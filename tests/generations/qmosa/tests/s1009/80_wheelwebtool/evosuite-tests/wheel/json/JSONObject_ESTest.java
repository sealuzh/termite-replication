/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 04:52:33 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Spliterator;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Short short0 = new Short((short)7);
      Short.toUnsignedInt((short)15);
      Short.toUnsignedInt((short)1745);
      Short.toUnsignedInt((short)1745);
      Short.toUnsignedLong((short) (-831));
      Short.toUnsignedInt((short)7);
      Float float0 = new Float(0.0);
      Short.compare((short)7, (short)92);
      Short.compare((short) (-4421), (short) (-4421));
      Short.compare((short)4052, (short)92);
      Short short1 = new Short((short)34);
      Short.toUnsignedLong((short)34);
      Short.compare((short)169, (short)15);
      Short.compare((short)164, (short)3200);
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put(float0, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.806584128273944
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Float float0 = new Float((-2418.0344F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("YMo+?@", float0);
      jSONObject0.toString((-1792), (-1792));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\",\n\"java.lang.String@0000000009\": java.lang.Float@000000001\n}");
      jSONObject0.putOpt("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\",\n\"java.lang.String@0000000009\": java.lang.Float@000000001\n}", jSONObject1);
      Float.min((-1792), 1859.1942F);
      JSONObject.valueToString(jSONArray0);
      Float.min((-1.0F), 0.0F);
      JSONObject.quote("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\",\n\"java.lang.String@0000000009\": java.lang.Float@000000001\n}");
      jSONObject0.put("wheel.json.JSONArray@0000000008", (long) (-1792));
      Object object0 = new Object();
      jSONObject1.putOpt("' and instead saw '", object0);
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.793508278285114
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Float float0 = new Float((-2418.0344F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toString((-1792), (-1792));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      JSONObject jSONObject2 = jSONObject0.putOpt("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", jSONObject1);
      jSONObject2.getJSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      Float.min((-1792), 1858.9426F);
      JSONObject.valueToString(jSONArray0);
      Float.min((-1.0F), 0.0F);
      JSONObject.quote("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      jSONObject0.put("wheel.json.JSONArray@0000000008", (long) (-1792));
      Object object0 = new Object();
      jSONObject1.putOpt("' and instead saw '", object0);
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8345423744156613
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(4475.85);
      linkedList1.add(double0);
      linkedList0.poll();
      linkedList0.add(double0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.toArray();
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      LinkedList<Double> linkedList5 = new LinkedList<Double>(linkedList2);
      linkedList5.add(double0);
      linkedList2.removeAll(linkedList3);
      Double double1 = new Double(0.0);
      LinkedList<Double> linkedList6 = new LinkedList<Double>(linkedList5);
      Double double2 = new Double((-3118.28));
      linkedList3.removeFirstOccurrence(double2);
      linkedList1.addAll((Collection<? extends Double>) linkedList4);
      LinkedList<Double> linkedList7 = new LinkedList<Double>();
      linkedList7.addAll((Collection<? extends Double>) linkedList5);
      Double double3 = new Double(0.0);
      Double double4 = new Double(0.0);
      Double double5 = new Double((-3118.28));
      linkedList6.add((Double) null);
      Boolean boolean0 = new Boolean("0|PS>w+x");
      Boolean boolean1 = Boolean.FALSE;
      Byte byte0 = new Byte((byte)49);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList6);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5598547425554843
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedLong((short)0);
      Short short1 = new Short((short)1436);
      Short.toUnsignedInt((short)69);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      Float float0 = new Float(3562.683332374948);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string0 = "Pgy^PmU|rhOl5";
      JSONObject jSONObject1 = jSONObject0.append("Pgy^PmU|rhOl5", float0);
      jSONObject1.isNull("Pgy^PmU|rhOl5");
      float float1 = (-427.0F);
      float float2 = 1.0F;
      Float.max(0L, 1.0F);
      String string1 = "I/vit_M";
      JSONTokener jSONTokener0 = new JSONTokener("I/vit_M");
      JSONTokener jSONTokener1 = new JSONTokener("I/vit_M");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of I/vit_M
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9411907831935964
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Boolean boolean0 = new Boolean("N&Dt}Wp_OT@V-");
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject.valueToString(hashMap0, 46, 2740);
      Object object0 = new Object();
      jSONObject0.optLong("{}");
      jSONObject0.optDouble("Lw}Eu%K!wDGVlQ", Double.NaN);
      jSONObject0.putOpt("{}", "N&Dt}Wp_OT@V-");
      Boolean boolean1 = new Boolean(true);
      jSONObject0.optLong("{}", 0L);
      JSONObject.doubleToString((-1.0));
      jSONObject0.put("3d;7b{m/#@f0_I", 0L);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7522801170929885
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Short.toUnsignedLong((short)17);
      Short.toUnsignedLong((short)17);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList4.toArray();
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      LinkedList<Double> linkedList6 = new LinkedList<Double>();
      linkedList3.addAll((Collection<? extends Double>) linkedList6);
      linkedList5.addAll((Collection<? extends Double>) linkedList4);
      Double.sum((-54.828488465), (-669.104325224));
      Double.max(0.0, 710.23);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList4);
      Float float0 = new Float(710.23);
      String string0 = JSONObject.valueToString(linkedList3);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "{oP-$]G}C96U";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{oP-$]G}C96U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {oP-$]G}C96U
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6722633826425115
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float((-2418.0344F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toString((-1792), (-1792));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      JSONObject.quote("");
      jSONObject0.putOpt("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", jSONObject1);
      Float.min((-1792), 1858.9426F);
      JSONObject.valueToString(jSONArray0);
      Float.min((-1.0F), 0.0F);
      JSONObject.quote("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      jSONObject0.put("wheel.json.JSONArray@0000000008", (long) (-1792));
      Object object0 = new Object();
      jSONObject1.putOpt("' and instead saw '", object0);
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.74815880453119
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Short short0 = new Short((short)7);
      Short.toUnsignedLong((short)7);
      Short.toUnsignedLong((short) (-98));
      Short.toUnsignedInt((short)1436);
      Short.toUnsignedInt((short)70);
      Short short1 = new Short((short) (-98));
      JSONObject.numberToString(short0);
      JSONObject jSONObject0 = new JSONObject(short0);
      Object object0 = new Object();
      Double double0 = new Double(65438L);
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Short@0000000001", double0);
      jSONObject1.toString(0, 0);
      Long long0 = new Long(7L);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.getLong("java.lang.Short@0000000001");
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      HashMap<String, JSONArray> hashMap1 = new HashMap<String, JSONArray>();
      HashMap<Byte, Object> hashMap2 = new HashMap<Byte, Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.poll();
      try { 
        jSONObject0.getJSONObject("java.lang.Short@00000000080");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@00000000080\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6806532556392497
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Short short0 = new Short((short)7);
      Short.toUnsignedLong((short)7);
      Short.toUnsignedLong((short) (-98));
      Short.toUnsignedInt((short)1436);
      Short.toUnsignedInt((short)70);
      Short short1 = new Short((short) (-98));
      JSONObject.numberToString(short0);
      JSONObject jSONObject0 = new JSONObject(short0);
      Object object0 = new Object();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Short@0000000001", double0);
      jSONObject1.toString(0, 0);
      Long long0 = new Long(7L);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.getLong("java.lang.Short@0000000001");
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      HashMap<String, JSONArray> hashMap1 = new HashMap<String, JSONArray>();
      HashMap<Byte, Object> hashMap2 = new HashMap<Byte, Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = linkedList1.poll();
      assertNull(integer0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5930876151499787
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ii}7^";
      JSONObject jSONObject0 = new JSONObject((Object) "!q`nv6=@DK`!$M");
      Double double0 = new Double((-1.0));
      jSONObject0.putOpt("R fS{v`sj", double0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Double double1 = new Double((-1097.583605));
      JSONObject.valueToString(double1);
      jSONObject0.optLong("R fS{v`sj");
      assertEquals(4, jSONObject0.length());
      
      Float float0 = new Float(1725.25F);
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.660826194337744
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-36));
      JSONObject.valueToString((Object) null, (byte) (-36), 1331);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("{}");
      jSONObject0.optLong("8?Y'2mpWtd_:");
      jSONObject0.put("Z}&!-vg<R", 1L);
      jSONObject0.optDouble(")OH6:28QtSzg\"7s2Q", 2227.571);
      jSONObject0.putOpt("'Ez#@lO8Jd", hashMap0);
      jSONObject0.optLong("*#=D8$`W|_3E[kEQWz", (long) (byte) (-36));
      JSONObject.doubleToString(0.0);
      jSONObject0.put("8?Y'2mpWtd_:", (-573L));
      int int0 = jSONObject0.getInt("8?Y'2mpWtd_:");
      assertEquals((-573), int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.560870078805346
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Boolean boolean0 = new Boolean("WCG0_!!:8|Ro");
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("' and nstead saw '", (Map) hashMap0);
      jSONObject0.get("' and nstead saw '");
      Integer integer0 = new Integer(12);
      Integer integer1 = Integer.getInteger("' and nstead saw '", (-1637));
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      JSONObject.valueToString(hashMap1);
      hashMap1.put(jSONObject1, integer1);
      Integer.valueOf(84);
      Integer integer2 = new Integer(1518);
      hashMap1.put(jSONObject1, integer2);
      Byte byte0 = new Byte((byte)2);
      jSONObject1.append("vv fqsH1o)uwO')", byte0);
      Short short0 = new Short((short)526);
      Integer integer3 = new Integer((short)3535);
      jSONObject1.names();
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0208763577531395
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optInt("wheel.json.JSONObject@0000000001");
      JSONObject.valueToString(jSONObject0, 0, 2740);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      jSONObject1.remove("{}");
      jSONObject1.optLong("N_ekqK7");
      jSONObject0.optDouble((String) null, 0.0);
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.putOpt("sp", ":aZkGZt-=;|@JDhnM|#");
      assertEquals(1, jSONObject2.length());
      
      jSONObject1.optLong("{}", (-573L));
      String string0 = JSONObject.quote("get");
      assertEquals("\"get\"", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8161480416847526
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(46);
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      jSONObject1.optLong("getsplit");
      jSONObject0.optDouble("gettoString", (double) 0L);
      jSONObject1.toString(46);
      jSONObject1.toString(46);
      JSONObject.doubleToString(46);
      jSONObject1.optString("Expected '");
      JSONArray jSONArray0 = (JSONArray)jSONObject0.opt("{}");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0894379124341
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      Integer.getInteger(":aZkGZt-=;|@JDhnM|#", 4);
      Integer integer0 = new Integer(88);
      Integer.valueOf(88);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      hashMap0.entrySet();
      Integer integer1 = new Integer((-571));
      Byte byte0 = new Byte((byte)10);
      JSONObject jSONObject1 = jSONObject0.append("o&snH@*^*j5S3Mu<3da", (Object) null);
      Short short0 = new Short((short)2313);
      Integer integer2 = new Integer((byte)10);
      jSONObject1.remove("o&snH@*^*j5S3Mu<3da");
      Long long0 = new Long(4);
      JSONObject jSONObject2 = jSONObject1.append("JSONArray[", long0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.209323036727541
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Short.toUnsignedLong((byte) (-36));
      Short.toUnsignedLong((short)1436);
      Short.toUnsignedInt((byte) (-36));
      Short.toUnsignedLong((short)1436);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((byte) (-36));
      linkedList0.add(double0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.add(double0);
      Float float0 = new Float(2008.74);
      JSONObject.valueToString(float0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Vk RWBWK:$^3m+", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0458831074311554
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)1000);
      JSONObject.valueToString(short0);
      Integer integer0 = new Integer((short)1000);
      JSONObject jSONObject1 = jSONObject0.append("h,", integer0);
      Boolean.valueOf(false);
      JSONObject jSONObject2 = jSONObject0.append("va", short0);
      jSONObject2.optLong("Substring bounds error");
      jSONObject2.optDouble("Ezh`=f1uPrdl.yr*", (double) (short)1000);
      jSONObject0.toString(46);
      jSONObject1.putOpt("] not found.", "getsplit");
      jSONObject0.toString(34);
      Integer integer1 = new Integer((short)1000);
      Object object0 = JSONObject.NULL;
      jSONObject1.optJSONObject("va");
      jSONObject2.optInt("{\n                                              \"java.lang.String@0000000004\": [java.lang.Integer@0000000008],\n                                              \"java.lang.String@0000000006\": [java.lang.Short@0000000002]\n}", 0);
      try { 
        jSONObject0.getBoolean("va");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"va\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Short short0 = new Short((short) (-831));
      Short short1 = new Short((short)7);
      Short short2 = new Short((short)1745);
      Float float0 = new Float(1118.8733572609);
      Short short3 = new Short((short)1745);
      Float.max((-28.828909F), 0.0F);
      Float.max(2883.4F, (-405.91F));
      Float.isFinite(1.0F);
      Float.isFinite((short)70);
      Float float1 = new Float(0.0F);
      Float.isFinite(1.0F);
      Float.isFinite((short)7);
      Float.max(2883.4F, 0.0F);
      Float.max((short)70, 0.0F);
      Float.sum(372.0F, 0.0F);
      Byte.toUnsignedLong((byte) (-8));
      Byte.toUnsignedLong((byte) (-8));
      Integer.getInteger("*o");
      Integer.remainderUnsigned((-463), (short)1745);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.testValidity(float0);
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4629221249986673
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toString((-1791), 1635);
      jSONArray0.optJSONObject(1635);
      jSONObject0.putOpt("{}", float0);
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONArray jSONArray2 = new JSONArray((Collection) null);
      HashMap<JSONArray, JSONArray> hashMap1 = new HashMap<JSONArray, JSONArray>();
      hashMap1.put(jSONArray1, jSONArray2);
      jSONObject0.optDouble("{}");
      Double double0 = new Double(0.0);
      Double.sum(0.0, 0.0);
      Float float1 = new Float((-2475.29612));
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject();
      Short short0 = new Short((short) (-1930));
      try { 
        jSONArray0.getJSONObject((short) (-1930));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1930] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4650163184224363
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optInt("o&snH@*^*j5S3Mu<3da");
      int int0 = 2740;
      JSONObject.valueToString("o&snH@*^*j5S3Mu<3da", 2740, (-954));
      String string0 = null;
      Object object0 = JSONObject.NULL;
      String string1 = ":aZkGZt-=;|@JDhnM|#";
      jSONObject1.optLong((String) null);
      jSONObject1.optDouble("\b", (double) 0);
      String string2 = null;
      JSONObject jSONObject2 = jSONObject1.putOpt((String) null, "\"java.lang.String@0000000004\"");
      try { 
        jSONObject2.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.952962591919676
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(46);
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      Boolean boolean0 = new Boolean(false);
      jSONObject0.getJSONArray("{}");
      jSONObject0.optLong("{}");
      jSONObject0.optJSONArray("]Tp?/'OW=ZZTC>)");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.optBoolean("{}");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append('Y');
      JSONObject.doubleToString((-1.0));
      jSONObject1.optString("]Tp?/'OW=ZZTC>)", "{}");
      try { 
        jSONObject0.getLong("getcompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getcompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7931817865597957
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Short short0 = new Short((short)7);
      Short.toUnsignedLong((short)7);
      Boolean.logicalAnd(true, true);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "v%";
      stringArray0[1] = "v%";
      stringArray0[2] = "v%";
      stringArray0[3] = "v%";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.putOpt("v%", "v%");
      jSONObject0.optLong("v%");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float float0 = new Float((float) (short) (-3826));
      Double double0 = new Double((short) (-3826));
      JSONObject jSONObject3 = jSONObject2.accumulate("v%", double0);
      Short short1 = new Short((short) (-207));
      Short short2 = new Short((short) (-3826));
      JSONObject jSONObject4 = new JSONObject(short2, stringArray0);
      String string0 = "0..";
      jSONObject3.optLong("v%");
      jSONObject4.isNull("getmin");
      JSONTokener jSONTokener0 = new JSONTokener("getmin");
      JSONObject jSONObject5 = null;
      try {
        jSONObject5 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getmin
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6808034854281004
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Short.toUnsignedLong((byte) (-36));
      Short.toUnsignedLong((short)1436);
      Short.toUnsignedInt((byte) (-36));
      Float float0 = new Float((-2522.0));
      String[] stringArray0 = new String[3];
      Float.min(1436L, (-5340.0F));
      Float.isFinite(1436L);
      stringArray0[0] = "false";
      Float.min((short)1436, (-1017.66F));
      stringArray0[2] = "iscompae";
      Float.max((-1.0F), 65500);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.isFinite(983.0F);
      Float.min(983.0F, 0.0F);
      jSONObject0.putOpt("*pRDg;oe6&y", (Object) null);
      try { 
        jSONObject0.getLong("iscompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2982522971817354
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-36));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'Ez#@lO8Jd";
      stringArray0[1] = "'";
      stringArray0[2] = "iscompare";
      stringArray0[3] = "9s@OB.G|jHMyzeEylu";
      stringArray0[4] = "";
      Short short0 = new Short((short)2607);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("[");
      JSONObject jSONObject1 = jSONObject0.put("iscompare", 530);
      jSONObject1.put("'Ez#@lO8Jd", 32);
      jSONObject1.optInt((String) null, (int) (short)2607);
      jSONObject0.isNull("ngcoWQ37t?kt[ma\"}u");
      try { 
        jSONObject0.getJSONArray("iscompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscompare\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2665687461027724
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "o&snH@*^*j5S3Mu<3da";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optInt("o&snH@*^*j5S3Mu<3da");
      jSONObject1.put("o&snH@*^*j5S3Mu<3da", (-105));
      JSONObject.valueToString("o&snH@*^*j5S3Mu<3da", 2740, 635);
      jSONObject1.optInt("o&snH@*^*j5S3Mu<3da");
      Double double0 = new Double(86);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5598063677702627
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = new Boolean("N&Dt}Wp_OT@V-");
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = "' and instead saw '";
      jSONObject0.put("' and instead saw '", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(1128);
      StringWriter stringWriter1 = new StringWriter();
      jSONObject0.write(stringWriter1);
      JSONObject.valueToString(stringWriter1);
      Long.getLong("\"java.io.StringWriter@0000000006\"", 1L);
      Boolean boolean1 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.append("\"java.io.StringWriter@0000000006\"", boolean1);
      try { 
        jSONObject1.getLong("wheel.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$Null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.637119420043846
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "Q%9fumeh8_rEGV<";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("Q%9fumeh8_rEGV<", (Collection) linkedList0);
      jSONObject0.optBoolean("Q%9fumeh8_rEGV<", false);
      jSONObject1.optInt("Q%9fumeh8_rEGV<");
      Object object0 = new Object();
      Object object1 = new Object();
      Float float1 = new Float((double) 0);
      jSONObject1.put("~Te``LJlJmn", (Object) float1);
      Double double0 = new Double(0.0);
      jSONObject0.accumulate("Q%9fumeh8_rEGV<", linkedList0);
      Double.min((-2524.8777137140323), 0);
      try { 
        jSONObject0.getJSONObject("Q%9fumeh8_rEGV<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Q%9fumeh8_rEGV<\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.223270325013424
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "N&Dt}Wp_OT@V-";
      Boolean boolean0 = new Boolean("N&Dt}Wp_OT@V-");
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("' and instead saw '", (Map) hashMap0);
      jSONObject0.getJSONObject("' and instead saw '");
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0676032882216056
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      Boolean boolean0 = new Boolean(false);
      JSONObject.doubleToString((short)7);
      Integer integer0 = new Integer((short)7);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.getInteger("pu", (int) (short)7);
      Integer.getInteger("7", integer0);
      Integer.min((short)7, (short)7);
      Integer integer1 = Integer.getInteger("~*p|8%(m(", integer0);
      Integer integer2 = new Integer((short)7);
      Integer integer3 = new Integer(1244);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer4 = new Integer(1244);
      Integer integer5 = new Integer((-1309));
      Integer integer6 = Integer.getInteger("7", integer1);
      linkedList1.add(integer6);
      Integer integer7 = new Integer((-1786));
      Integer integer8 = new Integer((-1309));
      linkedList2.add(integer8);
      int int0 = (-2841);
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8943853956379875
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optInt(")O6 +");
      Long.getLong(")O6 +");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("b)yo5", (Object) float0);
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      Float.isFinite(256.6F);
      stringArray0[1] = "%Tp)FYH{^aZN_9 ";
      stringArray0[2] = "JSON does not allow non-finite numbers.";
      stringArray0[3] = "has";
      stringArray0[4] = "b)yo5";
      stringArray0[5] = ")O6 +";
      stringArray0[6] = "JSON does not allow non-finite numbers.";
      JSONObject jSONObject2 = new JSONObject(integer0, stringArray0);
      jSONObject2.optBoolean("b)yo5", true);
      jSONObject0.put("JSON does not allow non-finite numbers.", (Object) linkedList0);
      jSONObject0.toString(0, 2);
      int int0 = 487;
      jSONObject0.toString(487);
      JSONObject jSONObject3 = new JSONObject(jSONObject0);
      try { 
        jSONObject1.getString("isiterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isiterator\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6025202148118862
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.putOpt(",`GNF--_B,(?/szJ", ",`GNF--_B,(?/szJ");
      Boolean.compare(true, true);
      JSONObject jSONObject2 = jSONObject0.append(".ha", boolean0);
      boolean boolean1 = jSONObject1.isNull(",`GNF--_B,(?/szJ");
      Short short0 = new Short((short) (-3813));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(14);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((short) (-3813));
      Integer.max(14, 0);
      linkedList0.add(integer2);
      linkedList1.add(integer0);
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer(1);
      Boolean boolean2 = new Boolean(".ha");
      Integer.min(0, 0);
      linkedList0.addLast(integer4);
      Integer integer5 = new Integer((short) (-3813));
      Integer integer6 = new Integer(14);
      Integer integer7 = new Integer((short) (-3813));
      Integer integer8 = new Integer(1966);
      linkedList0.add(integer8);
      Integer integer9 = new Integer(45);
      jSONObject2.accumulate(".ha", integer1);
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0.equals((Object)boolean1));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.359803961631582
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("49evjl|_yU&", (Collection) linkedList0);
      int int0 = 46;
      jSONObject0.toString(46);
      jSONObject0.optJSONArray("49evjl|_yU&");
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 46, 46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4240340317412956
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optInt("o&snH@*^*j5S3Mu<3dK");
      jSONObject1.optLong("o&snH@*^*j5S3Mu<3dK");
      double double0 = new Integer(0);
      jSONObject0.optLong(":aZkGZt-=;|@JDhnM|#", (-573L));
      JSONObject.quote("{");
      jSONObject0.append("\"{\"", ":aZkGZt-=;|@JDhnM|#");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("\"{\"");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6883569797160485
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short.toUnsignedLong((short)35);
      Short.toUnsignedInt((short)1436);
      Short.toUnsignedInt((short)86);
      Short.toUnsignedInt((short)2);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.put("[]", 106);
      jSONObject1.put("7M?%?", (long) (short)686);
      jSONObject1.opt(stringArray0[1]);
      try { 
        jSONObject0.getBoolean(stringArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.9950895671793965
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("49evjl|_yU&", (Collection) linkedList0);
      jSONObject0.toString(46);
      JSONObject jSONObject2 = jSONObject0.append("{\"java.lang.String@0000000003\": []}", "{\"java.lang.String@0000000003\": []}");
      Boolean boolean0 = new Boolean(false);
      jSONObject0.optDouble("{\"java.lang.String@0000000003\": []}", (double) 46);
      jSONObject2.toString(46);
      Integer integer0 = new Integer(117);
      Integer.compareUnsigned(60, 46);
      jSONObject1.putOpt("49evjl|_yU&", integer0);
      jSONObject1.toString((-3329));
      Float float0 = new Float((double) (-3329));
      String[] stringArray0 = new String[0];
      jSONObject2.optLong("49evjl|_yU&");
      jSONObject1.isNull("int");
      JSONObject.doubleToString(46.0);
      try { 
        jSONObject2.get("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"int\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6847250540555514
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-36));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'Ez#@lO8Jd";
      stringArray0[1] = "'";
      stringArray0[2] = "iscompare";
      stringArray0[3] = "9s@OB.G|jHMyzeEylu";
      stringArray0[4] = "";
      stringArray0[5] = "false";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.optString((String) null, "");
      try { 
        jSONObject0.getLong("e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"e\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9327911356579963
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      jSONArray0.put((Map) hashMap0);
      HashMap<Integer, Byte> hashMap1 = new HashMap<Integer, Byte>();
      String string0 = "wheel.json.JSONTokener";
      jSONObject0.optInt("wheel.json.JSONTokener");
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject();
      Short short0 = new Short((short)1867);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optJSONObject("A JSONArray text must start with '['");
      jSONObject0.optInt("wheel.json.JSONTokener", (-3880));
      try { 
        jSONObject0.getBoolean("#5:Gh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#5:Gh\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.585237051766536
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.optDouble("5K'k<\"zs1ne4K1t]f#a", 0.0);
      jSONObject1.putOpt("5K'k<\"zs1ne4K1t]f#a", "5K'k<\"zs1ne4K1t]f#a");
      jSONObject0.optLong("5K'k<\"zs1ne4K1t]f#a", (-34L));
      jSONObject1.optDouble(":y:S5%{'ccH");
      jSONObject0.isNull(":y:S5%{'ccH");
      JSONObject.doubleToString(0.0);
      jSONObject1.optString(":y:S5%{'ccH", (String) null);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.722146537490543
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optInt(")O6 +");
      Long.getLong(")O6 +");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("b)yo5", (Object) float0);
      jSONObject1.put("null", (long) 0);
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "JSON does not allow non-finite numbers.";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      Long.compareUnsigned(0, 0);
      jSONObject1.getDouble("null");
      jSONObject2.accumulate("7T5", (Object) null);
      assertEquals(5, jSONObject1.length());
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.470480573618366
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      jSONObject0.append("", stringWriter0);
      stringWriter0.write("ha");
      charArray0[1] = 'U';
      charArray0[2] = 'r';
      charArray0[3] = 's';
      JSONObject.valueToString(jSONObject0, (-2793), 42);
      charArray0[4] = 'M';
      charArray0[5] = 'n';
      stringWriter0.write(charArray0);
      stringWriter0.write(42);
      jSONObject0.write(stringWriter0);
      char[] charArray1 = new char[2];
      charArray1[0] = 'r';
      try { 
        Integer.decode("vw");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"vw\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9189342763140949
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Float float0 = new Float(0.0);
      String string0 = "b)yo5";
      String string1 = "fl";
      JSONObject jSONObject1 = jSONObject0.put("fl", (Object) null);
      Integer integer0 = new Integer(11);
      String string2 = "%Tp)FYH{^\\aZN_9 ";
      Byte byte0 = new Byte((byte)62);
      Long long0 = new Long(11);
      JSONObject.valueToString((Object) null);
      String string3 = "istoString";
      String string4 = "y>+dG_DCCqB~";
      try { 
        jSONObject1.getLong("y>+dG_DCCqB~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y>+dG_DCCqB~\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.513017903349735
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optInt(")O6 +");
      Long.getLong(")O6 +");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("b)yo5", (Object) float0);
      jSONObject1.put("null", (long) 0);
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      Long.compareUnsigned(0, 0);
      jSONObject1.getDouble("null");
      jSONObject1.accumulate("7T5", (Object) null);
      assertEquals(5, jSONObject1.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.77574350976497
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Short.toUnsignedLong((byte) (-36));
      Short.toUnsignedLong((short)8192);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(65500L);
      Double.sum(4602.1, 66.90815);
      linkedList0.add(double0);
      linkedList1.addAll((Collection<? extends Double>) linkedList0);
      Double double1 = new Double((byte) (-36));
      JSONObject jSONObject0 = new JSONObject(double1);
      assertEquals(3, jSONObject0.length());
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.364753018204256
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Float float0 = new Float((-2418.0344F));
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toString((-1792), (-1792));
      JSONObject jSONObject1 = new JSONObject("{}");
      jSONObject0.putOpt("{}", jSONObject1);
      Float.min((-1792), 1858.9426F);
      JSONObject.valueToString(jSONArray0);
      Float.min((-1.0F), 0.0F);
      JSONObject.quote("{}");
      jSONObject0.put("wheel.json.JSONArray@0000000002", (long) (-1792));
      Object object0 = new Object();
      jSONObject1.putOpt("' and instead saw '", object0);
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.2675632284814613
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Short short0 = new Short((short)25);
      Short.toUnsignedLong((short) (-1024));
      Short.toUnsignedLong((short) (-1024));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.spliterator();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList2.addAll((Collection<? extends Double>) linkedList0);
      linkedList3.addAll((Collection<? extends Double>) linkedList0);
      Double double0 = new Double((short) (-1024));
      linkedList3.add(double0);
      Float.min(0.0F, (-366.75F));
      Float.max((short) (-1657), 0.0F);
      Boolean boolean0 = new Boolean("{");
      Boolean boolean1 = Boolean.FALSE;
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList3);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList4.containsAll(linkedList2);
      Integer integer0 = new Integer((-2123));
      Integer integer1 = new Integer(117);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Integer integer2 = new Integer((-417));
      linkedList5.add(integer2);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Short.toUnsignedLong((short)1433);
      Float float0 = new Float((-2522.0));
      String[] stringArray0 = new String[3];
      Float.min(1433L, (-5340.0F));
      Float.isFinite(1433L);
      stringArray0[0] = "false";
      Float.min((short)1433, (-1016.79675F));
      Float.sum((-5340.0F), (-2030.3978F));
      Float.max((short)1433, (-1016.79675F));
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "iscompCe";
      stringArray1[1] = "iscompCe";
      stringArray1[2] = "false";
      stringArray1[3] = "false";
      stringArray1[4] = "false";
      stringArray1[5] = "false";
      stringArray1[6] = "iscompCe";
      stringArray1[7] = "false";
      JSONObject jSONObject1 = new JSONObject(float0, stringArray1);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("J3el");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.796416324117108
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      jSONObject0.put("[]", (Map) hashMap0);
      jSONObject0.optLong("[]");
      jSONObject0.optJSONArray("[]");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optBoolean("[]");
      stringWriter0.append('Y');
      JSONObject.doubleToString(0.0);
      jSONObject0.optString("[]", "ismin");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.1335160932444808
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      HashMap<JSONArray, JSONArray> hashMap1 = new HashMap<JSONArray, JSONArray>();
      JSONArray jSONArray2 = new JSONArray((Collection) null);
      JSONArray jSONArray3 = new JSONArray();
      hashMap1.put(jSONArray0, jSONArray1);
      Float float1 = new Float((-716.6F));
      Double double0 = new Double((-600.5432));
      Double.sum(1634, 187.944);
      Float.isFinite(1634);
      JSONArray jSONArray4 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOpt("A JSONObject text must end with '}'", float1);
      jSONObject1.optLong("2tCo*%_/bQsC7-oh^l", (long) 1634);
      JSONObject.quote("&kD0wCqE?ViwIySq4T");
      jSONObject1.optString("A JSONObject text must end with '}'");
      try { 
        jSONObject0.getLong("2tCo*%_/bQsC7-oh^l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2tCo*%_/bQsC7-oh^l\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7463572623338592
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = null;
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.361251759479306
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(4475.85);
      linkedList1.add(double0);
      linkedList0.poll();
      linkedList0.add(double0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.toArray();
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      LinkedList<Double> linkedList5 = new LinkedList<Double>(linkedList2);
      linkedList5.add(double0);
      linkedList2.removeAll(linkedList3);
      Double double1 = new Double(0.0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      stringWriter0.write(1930);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      jSONObject0.write(stringWriter0);
      try { 
        Integer.decode(",");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.3471418615900292
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.putOpt("v%", ",`GNF--_B,(?/szJ");
      Short short0 = new Short((short) (-3826));
      String[] stringArray0 = new String[4];
      stringArray0[2] = "v%";
      stringArray0[3] = "gettoString";
      JSONObject jSONObject2 = new JSONObject("v%", stringArray0);
      JSONObject jSONObject3 = jSONObject2.append("ha", boolean0);
      jSONObject3.optLong("*bgqA</VL", (-4235L));
      jSONObject1.isNull("v%");
      Float.max((-427.0F), (-427.0F));
      JSONTokener jSONTokener0 = new JSONTokener("I/vit_YM");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(14);
      Integer integer1 = new Integer((short) (-3826));
      linkedList0.add(integer1);
      linkedList1.add(integer0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(1);
      linkedList0.addLast(integer3);
      Integer integer4 = new Integer((short) (-3826));
      Integer integer5 = new Integer(14);
      Integer integer6 = new Integer((short) (-3826));
      Integer.compare(2434, 1966);
      linkedList2.add(integer5);
      Integer integer7 = linkedList2.poll();
      assertFalse(integer7.equals((Object)integer4));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[14];
      String string0 = "\\f";
      stringArray0[13] = "\f";
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5743378653255435
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-36));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'Ez#@lO8Jd";
      stringArray0[1] = "'";
      stringArray0[2] = "iscompare";
      stringArray0[3] = "9s@OB.G|jHMyzeEylu";
      stringArray0[4] = "";
      stringArray0[5] = "iscompare";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      jSONObject1.getInt("");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("'");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.674867044478253
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[9];
      String string0 = "\\u";
      stringArray0[0] = string0;
      stringArray0[1] = "cp8e@]#ylx0T";
      stringArray0[2] = "cp8e@]#ylx0T";
      stringArray0[3] = "cp8e@]#ylx0T";
      jSONObject0.optLong("+h*++3eqQM");
      jSONObject0.optJSONArray("lo");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optBoolean("getcompareTo");
      StringWriter stringWriter1 = stringWriter0.append('G');
      JSONObject.doubleToString(0);
      JSONObject jSONObject1 = new JSONObject(stringWriter1, stringArray0);
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject2 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject0.accumulate((String) null, jSONObject2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Short.toUnsignedLong((byte) (-36));
      Short.toUnsignedLong((short)1436);
      short short1 = (short) (-3826);
      Short short2 = new Short((short) (-3826));
      String string0 = "gettoString";
      Double double0 = new Double(Double.NaN);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String string1 = "ha";
      String string2 = "\\f";
      try { 
        jSONObject0.append("\f", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.244658185543744
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Boolean boolean0 = new Boolean("N&Dt}Wp_OT@V-");
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("' and nstead saw '", (Map) hashMap0);
      jSONObject0.get("' and nstead saw '");
      Integer integer0 = new Integer(12);
      Integer integer1 = Integer.getInteger("' and nstead saw '", (-1637));
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      hashMap1.put(jSONObject1, integer1);
      Integer.valueOf(84);
      Integer integer2 = new Integer(1518);
      hashMap1.put(jSONObject1, integer2);
      Byte byte0 = new Byte((byte)2);
      jSONObject1.append("vv fqsH1o)uwO')", byte0);
      Short short0 = new Short((short)526);
      Integer integer3 = new Integer((short)3535);
      try { 
        jSONObject0.getString("iswait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iswait\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6247177163571989
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "\\b";
      try { 
        jSONObject1.append("\b", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9788292344202025
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedLong((short)0);
      Short.toUnsignedInt((short)8192);
      Short.toUnsignedLong((short)686);
      Short.toUnsignedLong((short) (-98));
      Short.toUnsignedInt((short)1436);
      Short.toUnsignedInt((short) (-98));
      Short.toUnsignedInt((short) (-98));
      Short.toUnsignedInt((short) (-98));
      JSONObject.numberToString(short0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.Short@0000000001";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.opt("2Pmq{9|Jl");
      String string0 = "istoHexString";
      try { 
        jSONObject0.getJSONArray("istoHexString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoHexString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.0832075265172763
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Short.toUnsignedLong((byte) (-36));
      Short.toUnsignedLong((short)1436);
      Short.toUnsignedInt((byte) (-36));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Float float0 = new Float((-2522.0));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "false";
      stringArray0[1] = "yQL%<O1Ad";
      stringArray0[2] = "iscompae";
      Float.max((-1.0F), 65500);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.isFinite(983.0F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "iscompae";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray1);
      jSONObject1.optLong(",", 1436L);
      try { 
        jSONObject1.getDouble("iscompae");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscompae\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.7570340102050785
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Float float0 = new Float((-2418.0344F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toString((-1792), (-1792));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      jSONObject0.putOpt("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", jSONObject1);
      Float.min((-1792), 1858.9426F);
      JSONObject.valueToString(jSONArray0);
      Float.min((-1.0F), 0.0F);
      JSONObject.quote("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      jSONObject0.put("wheel.json.JSONArray@0000000008", (long) (-1792));
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.putOpt("' and instead saw '", object0);
      jSONObject2.append("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", object0);
      int int0 = 0;
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.9588196699617053
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Integer integer0 = new Integer((-2259));
      Integer integer1 = new Integer((-2259));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.4955170051907487
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(2740);
      linkedList1.add(double0);
      Double.min(2740, 1293.754073661588);
      linkedList1.add(double0);
      linkedList0.add(double0);
      linkedList0.add(double0);
      linkedList0.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.add(double0);
      linkedList1.addAll((Collection<? extends Double>) linkedList2);
      linkedList2.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList1.addAll((Collection<? extends Double>) linkedList4);
      Double double1 = new Double((-693.5769));
      Double.min(2220.36, (-1837.5959420695647));
      Double double2 = new Double(1293.754073661588);
      linkedList0.add(double0);
      Float float0 = new Float(2220.36);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "o&snH@*^*j5S3Mu<3da";
      stringArray0[2] = "G%x{NRS`k|";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("cle", false);
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.592124960805789
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("gethashCode", 2012.9032428990101);
      assertEquals(2012.9032428990101, double0, 0.01);
      
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[9];
      String string0 = "\\u";
      stringArray0[0] = string0;
      stringArray0[1] = "cp8e@]#ylx0T";
      stringArray0[2] = "cp8e@]#ylx0T";
      stringArray0[3] = "cp8e@]#ylx0T";
      stringArray0[4] = "cp8e@]#ylx0T";
      stringArray0[5] = "cp8e@]#ylx0T";
      stringArray0[6] = "cp8e@]#ylx0T";
      stringArray0[7] = "@ixq[l,NMV^<]";
      stringArray0[8] = "cp8e@]#ylx0T";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.accumulate("cp8e@]#ylx0T", jSONObject1);
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 0, 0);
      assertEquals("null", string1);
      
      Float.sum(46, (-965.9004F));
      Float.isFinite((-965.9004F));
      jSONObject0.optInt("cp8e@]#ylx0T", 27);
      int int0 = jSONObject2.optInt(string0, 46);
      assertEquals(46, int0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.29569715791005
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "cp8e@]#ylx0T";
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[9];
      String string1 = "\\u";
      stringArray0[0] = string1;
      stringArray0[1] = "cp8e@]#ylx0T";
      stringArray0[2] = "cp8e@]#ylx0T";
      stringArray0[3] = "cp8e@]#ylx0T";
      stringArray0[4] = "cp8e@]#ylx0T";
      stringArray0[5] = "cp8e@]#ylx0T";
      stringArray0[6] = "cp8e@]#ylx0T";
      stringArray0[7] = "@ixq[l,NMV^<]";
      stringArray0[8] = "cp8e@]#ylx0T";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.accumulate("cp8e@]#ylx0T", jSONObject1);
      Float.sum(46, (-965.9004F));
      try { 
        jSONObject0.getLong("cp8e@]#ylx0T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cp8e@]#ylx0T\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.7414556184728642
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("49evjl|_yU&", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(3794);
      jSONObject1.optLong("49evjl|_yU&");
      String string0 = "lo";
      jSONObject0.optJSONArray("lo");
      StringWriter stringWriter3 = new StringWriter();
      stringWriter1.flush();
      jSONObject0.optBoolean("LSIuKu#h");
      StringWriter stringWriter4 = stringWriter3.append((CharSequence) "getcompareTo");
      stringWriter4.append(']');
      jSONObject0.optLong("] is not a JO Arra`.");
      Object object0 = JSONObject.NULL;
      jSONObject1.optJSONObject("qe!Sanqb");
      jSONObject0.optInt("] is not a JO Arra`.", 1);
      try { 
        jSONObject1.getBoolean("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"in\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.046212966853168
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Short short0 = new Short((short)7);
      Short short1 = new Short((short)7);
      Short.toUnsignedInt((short)7);
      Short short2 = new Short((short) (-98));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optLong("getnotify", (-2353L));
      Object object0 = new Object();
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.3034870984192133
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(3794);
      jSONObject0.optLong("49e^jl_yQ&");
      String string0 = "lo";
      jSONObject0.optJSONArray("lo");
      stringWriter1.close();
      stringWriter1.flush();
      StringWriter stringWriter3 = new StringWriter();
      stringWriter1.flush();
      String string1 = "LSIuKu#h";
      jSONObject0.optBoolean("LSIuKu#h");
      StringWriter stringWriter4 = stringWriter3.append((CharSequence) "getcompareTo");
      stringWriter4.append('^');
      JSONObject.doubleToString(0L);
      jSONObject0.optLong("getcompareTo", 0L);
      jSONObject0.optString("0", "49e^jl_yQ&");
      try { 
        jSONObject0.getLong("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.8222926427649115
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = new Float((-2418.0344F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-1791), (-1791));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ii}7^";
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", stringArray0);
      String string0 = jSONObject0.toString(6296, (-3041));
      jSONObject0.names();
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject2 = jSONObject0.put("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", (Collection) linkedList0);
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      // Undeclared exception!
      jSONObject1.getDouble(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.6400556488514133
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 46;
      jSONObject0.toString(46);
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject2 = jSONObject1.append("{}", boolean0);
      String string0 = ",`GNF--_B,(?/szJ";
      jSONObject1.optLong("getsplit");
      jSONObject0.optDouble("gettoString", (double) 0L);
      jSONObject1.toString(46);
      String string1 = "va";
      JSONObject jSONObject3 = jSONObject2.putOpt("va", ",`GNF--_B,(?/szJ");
      jSONObject1.toString(46);
      jSONObject3.optLong("{\n                                              \"java.lang.String@0000000003\": [\n                                                                                            \"java.lang.String@0000000003\",\n                                                                                            java.lang.Boolean@0000000005\n                                              ],\n                                              \"java.lang.String@0000000006\": \"java.lang.String@0000000007\"\n}");
      String string2 = "\\u";
      try { 
        jSONObject0.get(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Byte byte0 = new Byte((byte) (-36));
      Short.toUnsignedLong((short)1433);
      Short.toUnsignedInt((byte) (-36));
      Float float0 = new Float((-2522.0));
      String[] stringArray0 = new String[3];
      Float.min(1433L, (-5340.0F));
      Float.isFinite(1433L);
      stringArray0[0] = "false";
      Float.min((short)1433, (-1016.79675F));
      stringArray0[2] = "iscompCe";
      Float.max((short)1433, (-1016.79675F));
      Float.max((-1.0F), 65500);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.isFinite(65500.0F);
      Integer.getInteger(",\n");
      Integer integer0 = new Integer((byte) (-36));
      Integer integer1 = new Integer((short)1433);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.addLast(integer0);
      Integer integer2 = new Integer((short)1433);
      Integer integer3 = new Integer(2579);
      Integer integer4 = new Integer(2579);
      Integer integer5 = new Integer(22);
      try { 
        jSONObject0.getJSONObject("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.7490906203903507
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Short.toUnsignedLong((byte) (-36));
      Short.toUnsignedLong((short)1436);
      Short.toUnsignedInt((byte) (-36));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Float float0 = new Float((-2522.0));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "false";
      stringArray0[1] = "yQL%<O1Ad";
      stringArray0[2] = "iscompare";
      float float1 = new Short((short)1436);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.isFinite(983.0F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      String string0 = JSONObject.valueToString(jSONObject0, (byte) (-36), 65500);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.670792086347495
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)127);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Integer.valueOf((int) (byte)127);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.4035621259899584
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(4475.85);
      linkedList1.add(double0);
      linkedList0.poll();
      linkedList0.add(double0);
      linkedList0.toArray();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList3.add(double0);
      Double double1 = new Double(2442.270433746865);
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList3.addAll((Collection<? extends Double>) linkedList4);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      linkedList3.addAll((Collection<? extends Double>) linkedList0);
      Short.compare((short)3217, (short)3217);
      Float.min((-500.43668F), (-500.43668F));
      Float.max(0.5835635F, (-500.43668F));
      Float.max((-863.1F), 1079.9895F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      jSONObject0.toString(3588, (int) (short)3217);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.0247357943492776
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      int int0 = jSONObject0.optInt("issum", 505);
      assertEquals(1, jSONObject0.length());
      assertEquals(505, int0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Short short0 = new Short((short) (-831));
      Short short1 = new Short((short)7);
      Short.toUnsignedInt((short)15);
      Short.toUnsignedInt((short)1745);
      Short.toUnsignedInt((short)1745);
      Float float0 = new Float(1118.8733572609);
      Short short2 = new Short((short)1745);
      Float.max((-28.828909F), 0.0F);
      Float float1 = new Float((double) 15);
      Float.max(2883.4F, (-405.91F));
      Float.isFinite(1.0F);
      Float.isFinite((short)70);
      Float float2 = new Float(0.0F);
      Float.max(15, 0.0F);
      Float.isFinite(1.0F);
      Float.isFinite((short)7);
      Float.max((short)70, 0.0F);
      Float.sum(372.0F, 0.0F);
      Float.sum(1.0F, 2152.8413F);
      Float.isFinite((-58.1F));
      Float.max((short)70, (-58.1F));
      String string0 = JSONObject.doubleToString(2883.4F);
      assertEquals("2883.39990234375", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.064721249273462
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optInt(")O6 +");
      Long.getLong(")O6 +");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Short short0 = new Short((short)1742);
      JSONObject jSONObject1 = new JSONObject(short0);
      try { 
        jSONObject1.getInt("/X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/X\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.589335953921771
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.putOpt(",`GNF--_B,(?/szJ", ",`GNF--_B,(?/szJ");
      int int0 = Boolean.compare(true, true);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.append("ha", boolean0);
      jSONObject1.isNull(",`GNF--_B,(?/szJ");
      Short short0 = new Short((short) (-3826));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(14);
      Integer integer1 = new Integer((short) (-3826));
      Integer.sum(0, 612);
      linkedList0.add(integer1);
      linkedList1.add(integer0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer(1);
      linkedList0.addLast(integer3);
      Integer integer4 = new Integer((short) (-3826));
      Integer integer5 = new Integer(14);
      Integer integer6 = new Integer((short) (-3826));
      Integer.compare(2434, 1966);
      linkedList2.add(integer5);
      Integer integer7 = new Integer(2434);
      int int1 = jSONObject2.length();
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.2392647061378037
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      Boolean boolean0 = Boolean.FALSE;
      jSONObject1.append("wheel.json.JSONObject@0000000001", boolean0);
      Integer integer0 = new Integer(46);
      jSONObject0.optDouble("`(}A`", (double) integer0);
      try { 
        jSONObject0.getLong("`(}A`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`(}A`\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.1868601258864917
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      String string0 = ",`GNF--_B,(?/szJ";
      jSONObject0.putOpt(",`GNF--_B,(?/szJ", ",`GNF--_B,(?/szJ");
      short short0 = (short) (-3813);
      Boolean.compare(true, true);
      try { 
        jSONObject0.append(",`GNF--_B,(?/szJ", boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[,`GNF--_B,(?/szJ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject.quote(stringArray0[0]);
      stringArray0[2] = "7/ n#I/";
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5266304865832219
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(2740);
      Double.min(2740, 1293.754073661588);
      Double.sum((-693.5769), 2740);
      linkedList0.add(double0);
      linkedList0.addAll((Collection<? extends Double>) linkedList1);
      linkedList1.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double1 = new Double(2464.0);
      Double.sum(2464.0, 2740);
      Double double2 = Double.valueOf(2122.2598983937323);
      Double.min(2464.0, (-1.0));
      linkedList1.add(double2);
      Double double3 = new Double(2464.0);
      linkedList1.add(double3);
      linkedList2.addAll((Collection<? extends Double>) linkedList0);
      Double double4 = new Double(1293.754073661588);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("v ho*w:X", (Object) linkedList0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.2303899811147658
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Short.toUnsignedLong((byte) (-36));
      Short.toUnsignedLong((short)1436);
      Short.toUnsignedInt((byte) (-36));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Float float0 = new Float((-2522.0));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "false";
      stringArray0[1] = "yQL%<O1Ad";
      stringArray0[2] = "iscompare";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      linkedList0.poll();
      String string0 = JSONObject.valueToString(jSONArray0, 489, (-1874));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.47021591933456
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Byte byte0 = new Byte((byte) (-36));
      Short.toUnsignedLong((short)1433);
      Short.toUnsignedInt((byte) (-36));
      Float float0 = new Float((-2522.0));
      Float.min(1433L, (-5340.0F));
      Short.toUnsignedLong((short)69);
      Short.toUnsignedInt((short) (-3538));
      Float float1 = new Float(0.0);
      Short.compare((short)1436, (short) (-660));
      Short.toUnsignedInt((short)9);
      Short.compare((short)95, (short)1797);
      Short short1 = new Short((short) (-660));
      Short.compare((short)69, (short) (-3080));
      Short.toUnsignedLong((short) (-1001));
      Float.max((-863.1F), (-5340.0F));
      Long long0 = new Long((short)69);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.toString((int) (byte) (-36), (int) (short) (-660));
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.95571359982777
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      jSONArray0.put((Map) hashMap0);
      HashMap<Integer, Byte> hashMap1 = new HashMap<Integer, Byte>();
      HashMap<Float, Boolean> hashMap2 = new HashMap<Float, Boolean>();
      HashMap<String, JSONArray> hashMap3 = new HashMap<String, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap3);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.2249223753302694
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-115));
      String[] stringArray0 = new String[9];
      Byte.compare((byte) (-115), (byte)34);
      stringArray0[0] = "getvalueOf";
      stringArray0[1] = "DX'Wm;S0,6P[mLeCm:D";
      stringArray0[2] = "is";
      stringArray0[3] = "wheel.json.JSONObject$1";
      Byte.compare((byte)30, (byte) (-118));
      stringArray0[4] = "[s)<%Tz";
      stringArray0[5] = "PJz'f:3DlE`=}";
      stringArray0[6] = "jBK$$*1.!zX/T=)ah";
      stringArray0[7] = "y,#:<>GH*xJtXg@m.?";
      stringArray0[8] = "G%x{NRS`k|";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      double double0 = jSONObject0.optDouble("QZaO=_1O", (-304.125068799104));
      assertEquals((-304.125068799104), double0, 0.01);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.024436576861065
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      String string0 = ",GNF--_B(szJ";
      JSONObject jSONObject1 = jSONObject0.putOpt("v%", ",GNF--_B(szJ");
      Object object0 = new Object();
      try { 
        jSONObject1.getBoolean("v%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"v%\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.4990104312963832
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "' and instead saw '";
      stringArray0[1] = "";
      stringArray0[2] = "Substring bounds error";
      short short1 = (short)1394;
      Short.compare((short)1394, (short)1615);
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("to");
      jSONObject0.isNull(",:]}/\"[{;=#");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(2740);
      Double.max(2740, 2740);
      Double.max(2740, (-1565.40950473));
      linkedList1.add(double0);
      double double1 = 1293.754073661588;
      Double.min(2740, 1293.754073661588);
      Double.sum((-693.5769), 2740);
      linkedList0.add(double0);
      linkedList0.add(double0);
      linkedList0.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.add(double0);
      linkedList1.addAll((Collection<? extends Double>) linkedList2);
      linkedList2.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      Boolean boolean0 = new Boolean("o&snH@*^*j5S3Mu<3da");
      linkedList2.offerLast(double0);
      Boolean.logicalOr(true, false);
      linkedList0.removeFirst();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(linkedList2, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(2740);
      Double.sum(2740, (-171.1));
      linkedList1.add(double0);
      Double.min(2740, 1293.754073661588);
      Double.sum((-693.5769), 2740);
      linkedList0.add(double0);
      linkedList0.toArray();
      Short.compare((short)16, (short)16);
      Short.compare((short)12, (short)12);
      Short.compare((short)12, (short)16);
      Short short0 = new Short((short)32);
      Short.toUnsignedLong((short) (-234));
      Short.compare((short)169, (short)169);
      Short.compare((short) (-772), (short)1);
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.157280995708096
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Short.toUnsignedLong((byte) (-36));
      Short.toUnsignedLong((short)1436);
      Short.toUnsignedInt((byte) (-36));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Float float0 = new Float((-2522.0));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "false";
      stringArray0[1] = "false";
      Float.min((short)1436, 65500L);
      Float.min((short)1436, (-1017.66F));
      stringArray0[2] = "iscompae";
      Float.max((-1.0F), 65500);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.isFinite(983.0F);
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      JSONObject jSONObject1 = jSONObject0.put("get", (Map) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.3336610304416983
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      String string0 = ",`GNF--_B,(?/szJ";
      JSONObject jSONObject1 = jSONObject0.putOpt(",`GNF--_B,(?/szJ", ",`GNF--_B,(?/szJ");
      Boolean.compare(true, true);
      jSONObject0.append(".ha", boolean0);
      jSONObject1.isNull(",`GNF--_B,(?/szJ");
      Short short0 = new Short((short) (-3813));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(14);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer((short) (-3813));
      Integer.max(14, 0);
      Boolean boolean1 = new Boolean(true);
      Boolean boolean2 = new Boolean(",`GNF--_B,(?/szJ");
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer(1);
      Boolean boolean3 = new Boolean(".ha");
      Integer.min(0, 0);
      linkedList0.addLast(integer4);
      Integer integer5 = new Integer((short) (-3813));
      Integer integer6 = new Integer(14);
      Integer integer7 = new Integer((short) (-3813));
      Integer integer8 = new Integer(1966);
      linkedList0.add(integer8);
      try { 
        jSONObject0.getInt(".ha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".ha\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.9898661428407531
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      try { 
        jSONObject1.getBoolean("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject.quote("\t");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "cp8e@]#ylx0T";
      stringArray0[2] = "cp8e@]#ylx0T";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.5991845289563358
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = new Object();
      Integer.getInteger(":aZkGZt-=;|@JDhnM|#", 4);
      Integer integer0 = new Integer((-1942));
      Integer.valueOf((-1942));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(43, 2740);
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      hashMap0.entrySet();
      Integer integer1 = new Integer((-571));
      Byte byte0 = new Byte((byte)10);
      Short short0 = new Short((short)2313);
      Integer integer2 = new Integer((byte)10);
      String string0 = jSONObject0.toString((int) (short)2313);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.456117947165377
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedLong((short)0);
      Short.toUnsignedLong((short) (-98));
      Short.toUnsignedInt((short)1436);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(1436);
      Integer.remainderUnsigned(46, (-3108));
      hashMap0.put(jSONObject0, integer0);
      Integer integer1 = Integer.valueOf(10);
      Integer integer2 = new Integer(529);
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      Integer integer3 = Integer.valueOf((int) (short) (-98));
      hashMap1.put(jSONObject0, integer3);
      hashMap1.put(jSONObject0, integer1);
      Byte byte0 = new Byte((byte)2);
      Boolean boolean0 = Boolean.valueOf("vv fqsH1o)uwO')");
      JSONObject jSONObject1 = jSONObject0.append("vv fqsH1o)uwO')", boolean0);
      Short short1 = new Short((short)1426);
      Integer integer4 = new Integer(121);
      jSONObject1.getString("vv fqsH1o)uwO')");
      JSONObject jSONObject2 = jSONObject1.put("vv fqsH1o)uwO')", 65438L);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.4359674102646816
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "gettoString");
      // Undeclared exception!
      jSONObject0.toString(689);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.192483368752913
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.append("] not0found.", "\b");
      String[] stringArray0 = new String[9];
      stringArray0[6] = "\b";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jSONObject0.put("\b", (Map) hashMap0);
      stringArray0[1] = "] not0found.";
      stringArray0[2] = "] not0found.";
      stringArray0[4] = "] is not aEnumber.";
      stringArray0[6] = "/ fSI/";
      stringArray0[7] = "/ fSI/";
      stringArray0[8] = "] is not aEnumber.";
      try { 
        jSONObject0.getDouble("] not0found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not0found.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.95571359982777
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("JSONArray[", "JSONArray[");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "val";
      Short.toUnsignedInt((short) (-486));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Float float1 = new Float(448.6051427384);
      Float.max((-1.0F), 1.0F);
      Float.min(5.060697F, 0.0F);
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      Float float2 = new Float((-699.26620096564));
      Float float3 = new Float(1.0F);
      Float.min(0.0F, 1.0F);
      Float.min((-1.0F), 1.0F);
      Float.isFinite(1101.3977F);
      Float.isFinite(0.0F);
      String string0 = JSONObject.valueToString(float3);
      assertNotNull(string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Byte byte0 = new Byte((byte) (-36));
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject.getNames((Object) hashMap0);
      int int0 = 2;
      Integer integer0 = new Integer((byte) (-36));
      Integer integer1 = new Integer(2);
      int int1 = 21;
      Integer integer2 = new Integer(21);
      Integer integer3 = new Integer(3152);
      int int2 = (-7557);
      int int3 = 108;
      Integer integer4 = new Integer(108);
      try { 
        Integer.valueOf("wFO!Ym:'&N3V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"wFO!Ym:'&N3V\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(4475.85);
      linkedList0.poll();
      linkedList0.add(double0);
      short short0 = (short)57;
      Short.toUnsignedInt((short)57);
      Short short1 = new Short((short)57);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.6068571632274358
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("] is not a JSONArray.");
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.keys();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Short.toUnsignedLong((short)17);
      Short.toUnsignedLong((short)17);
      linkedList1.add((Integer) null);
      Integer integer0 = new Integer((short)17);
      Integer integer1 = new Integer((short)17);
      Integer.compareUnsigned((short)17, 3039);
      linkedList1.add((Integer) null);
      Integer integer2 = new Integer((-320));
      Integer integer3 = new Integer((-241));
      Integer integer4 = new Integer((-2749));
      linkedList1.addLast(integer1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer5 = new Integer((-1));
      Integer integer6 = new Integer(515);
      int int0 = 34;
      try { 
        Integer.parseUnsignedInt("7n5(_Z:6ekk4W", 34);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7n5(_Z:6ekk4W\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Long long0 = new Long(589L);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "java.lang.Long@000000001.";
      stringArray0[1] = "getvalueOf";
      stringArray0[2] = "s_[ZY`U";
      stringArray0[3] = "A JSONObject text must end with '}'";
      stringArray0[4] = "EuDB%) 8.,{V'$@5^";
      stringArray0[5] = ",K?.['|.>";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      boolean boolean0 = jSONObject0.has("s_[ZY`U");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(2740);
      Double.sum(0.0, 0.0);
      linkedList1.add(double0);
      Double.min(2740, 2740);
      linkedList0.add(double0);
      linkedList0.toArray();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double1 = new Double(2740.0);
      linkedList1.add(double1);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>(linkedList3);
      Double double2 = new Double((-1974.28));
      linkedList4.add(double2);
      linkedList4.addAll((Collection<? extends Double>) linkedList1);
      linkedList2.addAll((Collection<? extends Double>) linkedList1);
      Double double3 = new Double(0.0);
      linkedList0.add((Double) null);
      Float float0 = new Float(0.0);
      Float.max(2740, (-1.0F));
      Boolean boolean0 = Boolean.FALSE;
      Byte byte0 = new Byte((byte)40);
      Float float1 = new Float((-1.0F));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Short short0 = new Short((short) (-831));
      Short short1 = new Short((short)7);
      Short.toUnsignedInt((short)15);
      Short.toUnsignedInt((short)1745);
      Short.toUnsignedInt((short)1745);
      Short.toUnsignedLong((short) (-831));
      Short.toUnsignedInt((short)7);
      Float float0 = new Float(0.0);
      Short.compare((short)7, (short)92);
      Short.toUnsignedInt((short) (-772));
      Short.compare((short) (-4421), (short) (-4421));
      Short.compare((short)4052, (short)92);
      Short short2 = new Short((short)34);
      Short.toUnsignedLong((short)34);
      Short.compare((short)169, (short)15);
      Short.compare((short)164, (short)3200);
      JSONObject.getNames((Object) short0);
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Byte byte0 = new Byte((byte) (-36));
      Short.toUnsignedLong((short)1436);
      Short.toUnsignedInt((byte) (-36));
      Float float0 = new Float((-2522.0));
      String[] stringArray0 = new String[3];
      Float.min(1436L, (-5340.0F));
      Float.isFinite(1436L);
      stringArray0[0] = "false";
      Float.min((-5340.0F), (short)1436);
      Float.max((byte) (-36), (-4035.88F));
      Float.sum((-205.503F), (byte) (-36));
      Float.max(0.0F, (-5340.0F));
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.809287344168781
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Long long0 = new Long((-2058L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.accumulate("a'|GXBxVS]BoJk4pD", "isfloatToIntBits");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "|lK4*<?cT`-\"atkL`";
      JSONTokener jSONTokener0 = new JSONTokener("|lK4*<?cT`-\"atkL`");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |lK4*<?cT`-\"atkL`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "5C}q!~";
      stringArray0[1] = "%jl9=T6Y}@\"_xZQb%(D";
      stringArray0[2] = "Unclosed comment";
      stringArray0[3] = "!\"4yRR?bs+b;";
      stringArray0[4] = "issum";
      stringArray0[5] = "java.lang.Long@00000000220";
      stringArray0[6] = "c@";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(34);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1.00";
      stringArray0[1] = "getnotifyAll";
      stringArray0[2] = "0";
      stringArray0[3] = "={h!";
      stringArray0[4] = "'bZ'7";
      stringArray0[5] = "";
      stringArray0[6] = "iscompare";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.5164877880195153
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedLong((short) (-1657));
      Short.toUnsignedLong((short) (-1657));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Spliterator<Double> spliterator0 = linkedList1.spliterator();
      Object[] objectArray0 = linkedList1.toArray();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.addAll((Collection<? extends Double>) linkedList0);
      linkedList1.addAll((Collection<? extends Double>) linkedList2);
      Double double0 = new Double(63879L);
      linkedList2.add(double0);
      Double.sum(0.0, (short) (-1657));
      Double.max(0.0, 0.0);
      linkedList2.toArray(objectArray0);
      linkedList2.add(double0);
      Double double1 = new Double(0.0);
      Double.sum((short)0, (short) (-1657));
      linkedList2.add(double1);
      Double.max((short)0, 3287.936605344221);
      linkedList0.add(double1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList2);
      Float float0 = new Float((double) (short)0);
      String string0 = JSONObject.valueToString("j;VXO");
      String string1 = JSONObject.valueToString(spliterator0, (short)0, (short)0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.032584666567857
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "R|Jg3U~TJ.>";
      stringArray0[1] = "2?Gx$8M7]_";
      stringArray0[2] = "['l\"?B8&*:9";
      stringArray0[3] = "I0gx8PS";
      stringArray0[4] = "Gi\"o~h";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = jSONObject1.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.6680336709356518
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(4475.85);
      linkedList1.add(double0);
      linkedList1.containsAll(linkedList0);
      Float float0 = new Float(4475.85);
      Double.sum((double) float0, (-670.0));
      linkedList1.add(double0);
      linkedList0.toArray();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      LinkedList<Double> linkedList5 = new LinkedList<Double>(linkedList4);
      linkedList5.removeFirstOccurrence(linkedList3);
      linkedList4.push(double0);
      linkedList3.addAll((Collection<? extends Double>) linkedList5);
      LinkedList<Double> linkedList6 = new LinkedList<Double>();
      linkedList2.addAll((Collection<? extends Double>) linkedList3);
      Double double1 = new Double(0.0);
      Double double2 = new Double(1.0);
      Double double3 = new Double(4475.85);
      linkedList5.add(double2);
      Boolean boolean0 = new Boolean("0|PS>w+x");
      Boolean boolean1 = Boolean.FALSE;
      Byte byte0 = new Byte((byte)49);
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList3);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.8387588765965983
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(4475.85);
      linkedList1.add(double0);
      linkedList0.poll();
      linkedList0.add(double0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.toArray();
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      LinkedList<Double> linkedList5 = new LinkedList<Double>(linkedList2);
      linkedList5.add(double0);
      linkedList2.removeAll(linkedList3);
      Double double1 = new Double(0.0);
      Double.min(4475.85, 1.0);
      linkedList1.add(double1);
      linkedList2.addAll((Collection<? extends Double>) linkedList5);
      LinkedList<Double> linkedList6 = new LinkedList<Double>();
      linkedList3.addAll((Collection<? extends Double>) linkedList1);
      Double double2 = new Double((-1973.55));
      Double double3 = new Double(4408.285648);
      linkedList4.add(double3);
      Boolean boolean0 = new Boolean("0|PS>w+x");
      Boolean boolean1 = Boolean.FALSE;
      Byte byte0 = new Byte((byte)49);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList4);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.5046015614451163
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(2740);
      linkedList1.add(double0);
      Double.min(2740, 1293.754073661588);
      Double.sum((-693.5769), 2740);
      linkedList0.add(double0);
      linkedList0.toArray();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>(linkedList3);
      linkedList4.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      linkedList2.addAll((Collection<? extends Double>) linkedList1);
      Double double1 = new Double(0.0);
      Double double2 = new Double(2220.36);
      linkedList5.add(double2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "y,#:<>GH*xJtXg@m.?";
      JSONObject jSONObject0 = new JSONObject("y,#:<>GH*xJtXg@m.?", stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "jBK$$*1.!zX/T=)ah";
      stringArray1[1] = "y,#:<>GH*xJtXg@m.?";
      stringArray1[2] = "y,#:<>GH*xJtXg@m.?";
      stringArray1[3] = "jBK$$*1.!zX/T=)ah";
      stringArray1[4] = "jBK$$*1.!zX/T=)ah";
      stringArray1[5] = "y,#:<>GH*xJtXg@m.?";
      stringArray1[6] = "jBK$$*1.!zX/T=)ah";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray1);
      jSONObject0.append("DZ", "jBK$$*1.!zX/T=)ah");
      jSONObject1.putOpt((String) null, double2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = 'U';
      Integer integer0 = new Integer(42);
      int int0 = (-7557);
      int int1 = 108;
      Integer integer1 = new Integer(42);
      String string0 = "wFO!Ym:'&N3V";
      try { 
        Integer.valueOf("wFO!Ym:'&N3V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"wFO!Ym:'&N3V\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(2740);
      linkedList0.add((Double) null);
      Double.min(2740, 1293.754073661588);
      Double.sum((-693.5769), 2740);
      linkedList0.add(double0);
      linkedList0.add(double0);
      linkedList0.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.add(double0);
      Boolean boolean0 = new Boolean(true);
      linkedList2.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList1.addAll((Collection<? extends Double>) linkedList4);
      Double double1 = new Double((-693.5769));
      Double.isFinite((-2837.096526936));
      Double.min((-2837.096526936), (-1837.5959420695647));
      Double double2 = new Double(2046.4231);
      boolean boolean1 = new Boolean(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Expected '";
      stringArray0[1] = "j0k[=zxFz&";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject0.getDouble("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      long long0 = 1L;
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "islogicalOr";
      Short.toUnsignedInt((short) (-486));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Float float1 = new Float(448.6051427384);
      Integer integer0 = new Integer((short) (-486));
      Integer integer1 = new Integer(72);
      Integer.getInteger("islogicalOr", 133);
      Integer.toUnsignedString(133);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer1);
      Integer integer2 = new Integer(133);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.addLast(integer0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer3 = new Integer(9);
      Integer integer4 = new Integer(44);
      linkedList2.add(integer4);
      Integer integer5 = new Integer(72);
      linkedList0.add(integer5);
      linkedList1.poll();
      JSONObject jSONObject0 = new JSONObject(integer5, stringArray0);
      try { 
        jSONObject0.getString("133");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"133\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.5340278241867096
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedLong((short)0);
      Short.toUnsignedLong((short) (-98));
      Short.toUnsignedInt((short)1436);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.put((Map) hashMap0);
      HashMap<Integer, Byte> hashMap1 = new HashMap<Integer, Byte>();
      jSONArray0.put(1634, (Map) hashMap0);
      JSONObject jSONObject0 = jSONArray0.getJSONObject(1634);
      jSONArray0.put((Map) hashMap1);
      String string0 = "{)|";
      try { 
        jSONObject0.getLong("{)|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{)|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.771294323446676
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      double double0 = jSONObject0.optDouble("C'+{{/@e%_**^;R", (double) (byte)48);
      assertEquals(48.0, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Short.toUnsignedLong((short)1433);
      Float float0 = new Float((-2522.0));
      String[] stringArray0 = new String[3];
      Float.min(1433L, (-5340.0F));
      Float.isFinite(1433L);
      stringArray0[0] = "iscompCe";
      Integer integer0 = new Integer((short)1433);
      Integer integer1 = new Integer(87);
      Integer integer2 = new Integer(1478);
      Integer integer3 = new Integer(33);
      Integer integer4 = new Integer((-1891));
      Integer integer5 = new Integer((-1227));
      Integer integer6 = new Integer(33);
      Integer integer7 = new Integer((-7557));
      Integer integer8 = new Integer(120);
      Integer integer9 = new Integer((short)1433);
      Integer integer10 = new Integer((-961));
      Integer integer11 = new Integer(3152);
      JSONTokener jSONTokener0 = new JSONTokener("iscompCe");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of iscompCe
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.213385389124461
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optInt("o&snH@*^*j5S3Mu<3da");
      int int0 = 2740;
      int int1 = (-954);
      JSONObject.valueToString("o&snH@*^*j5S3Mu<3da", 2740, (-954));
      String string0 = "\\b";
      String string1 = null;
      jSONObject1.remove((String) null);
      jSONObject1.optLong((String) null);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-954));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.468448251716318
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(2740);
      linkedList1.add(double0);
      Double.min(2740, 1293.754073661588);
      Double.sum((-693.5769), 2740);
      Double double1 = new Double(0.0);
      linkedList1.add(double1);
      linkedList0.add(double0);
      linkedList0.add(double0);
      linkedList0.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.add(double0);
      linkedList1.addAll((Collection<? extends Double>) linkedList2);
      linkedList2.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList1.addAll((Collection<? extends Double>) linkedList4);
      Double double2 = new Double((-693.5769));
      Double.min((-2837.096526936), (-1837.5959420695647));
      Double double3 = new Double(2046.4231);
      linkedList0.add(double0);
      Float float0 = new Float(2220.36);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "o&snH@*^*j5S3Mu<3da";
      stringArray0[2] = "G%x{NRS`k|";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.put("G%x{NRS`k|", (-693.5769));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.613129842728147
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "s}$$*SYpcsI";
      stringArray0[2] = "getsplit";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean1 = jSONObject0.optBoolean("getsplit", false);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.910175063233738
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Object) "wheel.json.JSONObject@0000000001");
      Boolean boolean0 = Boolean.FALSE;
      String string0 = "v%";
      JSONObject jSONObject2 = jSONObject0.putOpt("v%", ",`GNF--_B,(?/szJ");
      jSONObject2.optLong("wheel.json.JSONObject@0000000001");
      Float float0 = new Float((float) 0L);
      jSONObject2.accumulate("v%", float0);
      Short short0 = new Short((short) (-3826));
      String[] stringArray0 = new String[4];
      stringArray0[1] = "wheel.json.JSONObject@0000000001";
      stringArray0[2] = ",`GNF--_B,(?/szJ";
      stringArray0[3] = "gettoString";
      JSONObject jSONObject3 = new JSONObject("v%", stringArray0);
      jSONObject3.append("ha", boolean0);
      String string1 = "0..";
      jSONObject2.optLong("0..");
      jSONObject2.isNull("v%");
      jSONObject0.optBoolean("0..", true);
      Float.max((-427.0F), (-427.0F));
      try { 
        jSONObject0.getDouble("KU7xjB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"KU7xjB\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.840827283190615
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(2740);
      Double.min(2740, 1293.754073661588);
      Double.sum((-693.5769), 2740);
      linkedList0.add(double0);
      linkedList0.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      Double double1 = new Double((-1.0));
      Double.sum(1293.754073661588, Double.NaN);
      Double double2 = new Double(2740);
      Double double3 = new Double(1293.754073661588);
      linkedList3.add(double3);
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList3.addAll((Collection<? extends Double>) linkedList4);
      Double double4 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double1);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Short short0 = new Short((short)7);
      Short.toUnsignedInt((short)15);
      Short.toUnsignedInt((short)1745);
      Short.toUnsignedInt((short)1745);
      Short.toUnsignedLong((short) (-831));
      Float float0 = new Float(0.0);
      Short.compare((short)7, (short)92);
      Short.compare((short) (-4421), (short) (-4421));
      Short.compare((short)15, (short)92);
      Short short1 = new Short((short)34);
      Short.toUnsignedLong((short)34);
      Short.compare((short)169, (short)15);
      Short.compare((short)164, (short)3200);
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Byte byte0 = new Byte((byte) (-36));
      Short.toUnsignedLong((short)1436);
      Short.toUnsignedInt((byte) (-36));
      Float float0 = new Float((-2522.0));
      String[] stringArray0 = new String[3];
      Float.min(1436L, (-5340.0F));
      Float.isFinite(1436L);
      stringArray0[0] = "false";
      Float.min((short)1436, (-1016.79675F));
      stringArray0[2] = "iscompae";
      Float.max((short)1436, (-1016.79675F));
      Float.max((-1.0F), 65500);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.isFinite(65500.0F);
      Float.min(1.0F, (short)1436);
      Float.max((-207.8309F), (-1.0F));
      Float.max(0.0F, 65500);
      String string0 = jSONObject0.toString(59, 65500);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.900156510048972
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(2740);
      Double.sum(2740, 2740);
      linkedList1.add(double0);
      Double.min(2740, 2740);
      linkedList0.add(double0);
      linkedList0.toArray();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double1 = new Double(2740.0);
      linkedList1.add(double1);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>(linkedList3);
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      linkedList3.replaceAll(unaryOperator0);
      Double double2 = new Double((-1974.28));
      Double.max(2740, 5480.0);
      linkedList4.add(double2);
      linkedList4.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList5 = new LinkedList<Double>();
      linkedList2.addAll((Collection<? extends Double>) linkedList1);
      Double double3 = new Double(0.0);
      linkedList0.add((Double) null);
      Float float0 = new Float(0.0);
      Float.max(406.8722F, 2740);
      Boolean boolean0 = Boolean.FALSE;
      Byte byte0 = new Byte((byte)49);
      Float float1 = new Float(2740.0F);
      JSONObject jSONObject0 = new JSONObject(float1);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject.quote("-O<g=/HVzD lN+;Rl9");
      Integer.getInteger("\"-O<g=/HVzD lN+;Rl9\"");
      Integer integer0 = new Integer((short)1376);
      Integer.remainderUnsigned((-1792), (-1792));
      Integer.toUnsignedLong(0);
      Integer integer1 = new Integer((-1734));
      Integer.toUnsignedString((-1734));
      Integer.remainderUnsigned(9, 9);
      Integer integer2 = Integer.getInteger("D5|)~OtE2CSG)", integer1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer3 = new Integer((short)1376);
      Integer.remainderUnsigned(1824, (short)1376);
      int int0 = Integer.min((-1945), 51);
      Integer integer4 = new Integer((-1945));
      Short short0 = new Short((short)1376);
      linkedList0.add(integer2);
      Integer integer5 = new Integer((-1945));
      Integer integer6 = new Integer((-2146));
      Integer integer7 = new Integer(9);
      linkedList0.addLast((Integer) null);
      Integer integer8 = new Integer((-1289));
      Integer integer9 = new Integer(2536);
      Integer integer10 = new Integer(10);
      Integer integer11 = new Integer(19);
      Integer integer12 = new Integer(0);
      assertFalse(integer12.equals((Object)int0));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.15884121633729
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(2740);
      linkedList1.add(double0);
      Double.min(2740, 1293.754073661588);
      Double.sum((-693.5769), 2740);
      Double double1 = new Double(0.0);
      linkedList1.add(double1);
      linkedList0.add(double0);
      linkedList0.add(double0);
      linkedList0.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.add(double0);
      linkedList1.addAll((Collection<? extends Double>) linkedList2);
      linkedList2.addAll((Collection<? extends Double>) linkedList1);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      linkedList4.add(double0);
      linkedList1.addAll((Collection<? extends Double>) linkedList4);
      Double double2 = new Double((-693.5769));
      Double.min((-2837.096526936), (-1837.5959420695647));
      Double double3 = new Double(2046.4231);
      linkedList0.add(double0);
      Float float0 = new Float(2220.36);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "o&snH@*^*j5S3Mu<3da";
      stringArray0[2] = "G%x{NRS`k|";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("000");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Double double0 = Double.valueOf(1.0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      Double.sum(1.0, 1.0);
      try { 
        jSONObject0.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.6532303462243756
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(4475.85);
      linkedList1.add(double0);
      linkedList0.poll();
      linkedList0.add(double0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.toArray();
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      LinkedList<Double> linkedList5 = new LinkedList<Double>(linkedList2);
      linkedList5.add(double0);
      Double double1 = new Double(0.0);
      linkedList1.add(double1);
      linkedList3.addAll((Collection<? extends Double>) linkedList5);
      LinkedList<Double> linkedList6 = new LinkedList<Double>();
      linkedList5.addAll((Collection<? extends Double>) linkedList1);
      Short.compare((short)34, (short)3217);
      Float.min(1146.79F, (short)3217);
      Float.max(0.5835635F, (-770.1F));
      Float.max(0.0F, (-863.1F));
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      jSONObject0.toString((-3183), (int) (short)34);
      String string0 = jSONObject0.toString();
      assertEquals(4, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "L#W^m*";
      stringArray0[1] = "QXa^s2m>9-W7XxlZ-#";
      stringArray0[2] = ",!'y+%.2ip)Z._";
      stringArray0[3] = " of ";
      stringArray0[4] = "mi";
      stringArray0[5] = ":";
      stringArray0[6] = "~";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(4475.85);
      linkedList1.add(double0);
      Double.min((-760.7), 0.0);
      Double.sum((-760.7), 0.0);
      Double double1 = new Double((-693.5769));
      linkedList1.add(double1);
      linkedList0.toArray();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      LinkedList<Double> linkedList5 = new LinkedList<Double>(linkedList4);
      boolean boolean0 = new Boolean(true);
      linkedList3.addAll((Collection<? extends Double>) linkedList5);
      LinkedList<Double> linkedList6 = new LinkedList<Double>();
      boolean boolean1 = new Boolean(true);
      Double double2 = new Double(0.0);
      Double double3 = new Double(1.0);
      Boolean boolean2 = new Boolean(true);
      Boolean boolean3 = new Boolean("getcompare");
      Boolean boolean4 = Boolean.FALSE;
      Byte byte0 = new Byte((byte) (-76));
      Float float0 = new Float((-760.7));
      Float.isFinite((byte) (-76));
      Float.max((byte) (-76), 0.0F);
      String string0 = JSONObject.numberToString(double3);
      assertNotNull(string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Short short0 = new Short((short) (-831));
      Short short1 = new Short((short)7);
      Short.toUnsignedInt((short)15);
      Short.toUnsignedInt((short)1745);
      Short.toUnsignedInt((short)1745);
      Float float0 = new Float(1118.8733572609);
      Float.max(0.0F, 0.0F);
      Float.max(0.0F, 0.0F);
      Float.min((-26.53F), (short) (-831));
      Float.max(2883.4F, (-405.91F));
      Float.isFinite(164.0F);
      Float.isFinite((short)70);
      Float float1 = new Float(0.0F);
      Float.isFinite(1.0F);
      Float.isFinite((short)1745);
      Float.max((short)70, 0.0F);
      Float.sum(372.0F, 0.0F);
      Float.sum(1.0F, 2152.8413F);
      Float.isFinite((-58.1F));
      Float.max((short)70, (-58.1F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Short short0 = new Short((short)191);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "sp";
      stringArray0[1] = "-2457.00";
      stringArray0[2] = ">Y6U}xq@i|]]-Dp";
      stringArray0[3] = "art;\". ox+Xc,!nc(F5";
      stringArray0[4] = "getintern";
      stringArray0[5] = "[]";
      stringArray0[6] = "f  Xyrl}cyG#";
      stringArray0[7] = "Bad value from toJSONString: ";
      stringArray0[8] = "getvalueOf";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      String string0 = jSONObject0.optString("to");
      assertEquals("", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Byte byte0 = new Byte((byte) (-36));
      Short.toUnsignedLong((short)1433);
      Short.toUnsignedInt((byte) (-36));
      Float float0 = new Float((-2522.0));
      Float.min(1433L, (-5340.0F));
      Short.toUnsignedLong((short)69);
      Short.toUnsignedInt((short) (-3538));
      Float float1 = new Float(0.0);
      Short.compare((short)1436, (short) (-660));
      Short.toUnsignedInt((short)9);
      Short.compare((short)95, (short)1797);
      Short short1 = new Short((short) (-660));
      Short.compare((short)69, (short) (-3080));
      Short.toUnsignedLong((short) (-1001));
      Byte byte1 = new Byte((byte) (-36));
      Byte.toUnsignedLong((byte)7);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.7792267625426275
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Short short0 = new Short((short)7);
      short short1 = (short) (-117);
      Short short2 = new Short((short)7);
      Short.toUnsignedInt((short)7);
      Short short3 = new Short((short) (-117));
      JSONObject.numberToString(short0);
      JSONObject jSONObject0 = new JSONObject(short0);
      try { 
        Integer.valueOf("java.lang.Short@0000000001");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Short@0000000001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Short short0 = new Short((byte) (-36));
      Byte byte0 = new Byte((byte) (-36));
      Short.toUnsignedLong((short)1433);
      Short.toUnsignedInt((byte) (-36));
      Float float0 = new Float((-2522.0));
      Float.min(1433L, (-5340.0F));
      Short.toUnsignedLong((short)69);
      Short.toUnsignedInt((short) (-3538));
      Float float1 = new Float(0.0);
      Short.compare((short)1436, (short) (-660));
      Short.toUnsignedInt((short)9);
      Short.compare((short)95, (short)1797);
      Short short1 = new Short((short) (-660));
      Short.compare((short)69, (short) (-3080));
      Short.toUnsignedLong((short) (-1001));
      Byte byte1 = new Byte((byte) (-36));
      Byte.toUnsignedLong((byte) (-36));
      Byte.toUnsignedLong((byte) (-4));
      Byte.toUnsignedInt((byte) (-36));
      Byte.toUnsignedLong((byte) (-36));
      Byte.toUnsignedLong((byte)7);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("[dP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of [dP
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
