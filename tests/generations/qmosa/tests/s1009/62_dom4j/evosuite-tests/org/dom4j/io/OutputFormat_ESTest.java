/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 06:47:10 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.046368416176734
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = new OutputFormat();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-indent";
      stringArray0[1] = "-nwliznes";
      stringArray0[2] = "timTexr";
      stringArray0[1] = "-trimTexort";
      stringArray0[4] = "-enjod&ng";
      int int0 = outputFormat1.parseOptions(stringArray0, 0);
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertEquals(2, int0);
      assertFalse(outputFormat1.isXHTML());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isPadText());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isNewlines());
      assertEquals("-trimTexort", outputFormat1.getIndent());
      assertEquals("\n", outputFormat1.getLineSeparator());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-newlibes");
      assertFalse(outputFormat0.isTrimText());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "#b,IlEM jb7F)\"#Hh";
      stringArray0[2] = "RyM?n+^";
      stringArray0[3] = "-xhtml8xe}mbW";
      stringArray0[4] = "RyM?n+^";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isTrimText());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4665370871692325
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmptay8xe}mbW");
      outputFormat0.setNewlines(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-newlibes";
      stringArray0[3] = "#b,IlEM jb7F)\"#Hh";
      stringArray0[4] = "-xhtml8xe}mbW";
      stringArray0[5] = "-lineSeparator";
      stringArray0[6] = "-expandEmptay8xe}mbW";
      stringArray0[7] = ")yM?n+^";
      outputFormat0.parseOptions(stringArray0, 0);
      String[] stringArray1 = new String[9];
      outputFormat0.setIndent(false);
      stringArray1[1] = "#b,IlEM jb7F)\"#Hh";
      stringArray1[2] = "-xhtml8xe}mbW";
      stringArray1[3] = "-lineSeparator";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4993646124305886
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = "S^c:g 84Zf1H'?";
      String string1 = "$(~a\\pi_&'MM";
      outputFormat0.setIndentSize(376);
      String[] stringArray0 = new String[9];
      outputFormat0.setIndent("?W}q@y");
      stringArray0[0] = "-trimTexort";
      stringArray0[1] = "S^c:g 84Zf1H'?";
      stringArray0[2] = "";
      stringArray0[3] = "S^c:g 84Zf1H'?";
      stringArray0[4] = "$(~api_&'MM";
      // Undeclared exception!
      outputFormat0.setIndentSize(9996);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-omitEncoding";
      stringArray0[1] = "-trimTexort";
      stringArray0[2] = "xd=/,}TP,8eI 2x";
      stringArray0[3] = "-trimTexort";
      stringArray0[4] = "-trimTexort";
      stringArray0[6] = "-trimTexort";
      stringArray0[7] = "xd=/,}TP,8eI 2x";
      outputFormat0.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-3434));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3434
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Qp{,Kz(%F]+WC#~,0QQ`");
      assertFalse(outputFormat0.isNewlines());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "xhtmlfFha_R`m&aOoI";
      stringArray0[1] = "";
      stringArray0[2] = "-newlines";
      stringArray0[3] = "'uW]{01aJLiI";
      stringArray0[4] = "Qp{,Kz(%F]+WC#~,0QQ`";
      stringArray0[5] = "xhtmlfFha_R`m&aOoI";
      stringArray0[6] = "xhtmlfFha_R`m&aOoI";
      stringArray0[7] = "";
      int int0 = outputFormat0.parseOptions(stringArray0, 2);
      assertTrue(outputFormat0.isNewlines());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("RZW/2+@&SUz?iFg");
      assertFalse(outputFormat0.isPadText());
      
      String[] stringArray0 = new String[21];
      stringArray0[0] = "-padText";
      stringArray0[1] = "RZW/2+@&SUz?iFg";
      stringArray0[14] = "#b,IlEM jb7F)\"#Hh";
      stringArray0[3] = "RZW/2+@&SUz?iFg";
      stringArray0[4] = "RZW/2+@&SUz?iFg";
      stringArray0[5] = "-xhtml8xe}mbW";
      stringArray0[6] = "#b,IlEM jb7F)\"#Hh";
      stringArray0[7] = "-newlibes";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isPadText());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8542306045431616
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      outputFormat0.setTrimText(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setLineSeparator("-expandEmptyU^LN]H&pr9");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "z2ACv*`zI+p";
      stringArray0[1] = "-expandEmptyU^LN]H&pr9";
      stringArray0[2] = ";a\u0002u;8";
      stringArray0[1] = "-expandEmptyU^LN]H&pr9";
      OutputFormat outputFormat1 = new OutputFormat("-expandEmptyU^LN]H&pr9", true);
      outputFormat0.getNewLineAfterNTags();
      outputFormat1.setIndent("-expandEmptyU^LN]H&pr9");
      OutputFormat outputFormat2 = new OutputFormat("f 8<B{u,3iODD_mF", true, (String) null);
      OutputFormat outputFormat3 = new OutputFormat(":!NV4QemBa0V[f)4_`w", true);
      outputFormat3.setEncoding("-newlines");
      outputFormat0.setTrimText(true);
      outputFormat3.setOmitEncoding(false);
      outputFormat2.getEncoding();
      outputFormat3.getEncoding();
      assertEquals("-newlines", outputFormat3.getEncoding());
      
      outputFormat2.getEncoding();
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Invalid attribute quote character (", true, "UTF-8");
      outputFormat0.setLineSeparator("WC^kV4J ;Hq5");
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getLineSeparator();
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat1 = new OutputFormat("Invalid attribute quote character (");
      outputFormat1.setAttributeQuoteCharacter('\'');
      outputFormat1.getLineSeparator();
      assertEquals('\'', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7353909493384738
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setLineSeparator("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "`akODL~|XJT=3T";
      stringArray0[2] = "-expandEmptyU^LN]H&pr9";
      stringArray0[3] = "-expandEmptyU^LN]H&pr9";
      stringArray0[4] = ">_be{6bt;5!(T";
      stringArray0[5] = "~i:LHd6@6$xK3.R6MO&";
      stringArray0[6] = "~i:LHd6@6$xK3.R6MO&";
      stringArray0[7] = ">_be{6bt;5!(T";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getLineSeparator();
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.parseOptions(stringArray0, 1824);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('!');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (!)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("|^$Q", false, "b");
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator("");
      outputFormat0.getLineSeparator();
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Invalid attribute quote character (", false, "-xhtmlYrLZj UK");
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Invalid attribute quote character (";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "Invalid attribute quote character (";
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.getLineSeparator();
      outputFormat0.getLineSeparator();
      outputFormat0.getLineSeparator();
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("-xhtmlYrLZj UK", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("Invalid attribute quote character (", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.170793809518273
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setIndent("");
      outputFormat0.getIndent();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setExpandEmptyElements(true);
      outputFormat1.setTrimText(true);
      outputFormat1.setLineSeparator((String) null);
      outputFormat1.isPadText();
      outputFormat1.isExpandEmptyElements();
      OutputFormat outputFormat2 = new OutputFormat("-padText", true);
      outputFormat2.setIndentSize(0);
      assertEquals("", outputFormat2.getIndent());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "-padText";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "xO>PZF4hnW):Z'1";
      stringArray0[5] = null;
      outputFormat1.parseOptions(stringArray0, 22);
      assertFalse(outputFormat1.isNewlines());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Qp{VKz(%F]WC#~,0QV`");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Qp{VKz(%F]WC#~,0QV`";
      stringArray0[1] = "Qp{VKz(%F]WC#~,0QV`";
      stringArray0[2] = "-expUndEmptyU^LN]H&pr9";
      stringArray0[3] = "Qp{VKz(%F]WC#~,0QV`";
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setNewLineAfterNTags(2);
      outputFormat0.getNewLineAfterNTags();
      String string0 = OutputFormat.STANDARD_INDENT;
      String string1 = OutputFormat.STANDARD_INDENT;
      assertEquals("  ", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.getIndent();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      boolean boolean0 = true;
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setPadText(true);
      outputFormat0.setIndent(false);
      outputFormat1.setExpandEmptyElements(true);
      outputFormat1.setTrimText(true);
      outputFormat1.setLineSeparator((String) null);
      outputFormat1.setOmitEncoding(true);
      String string0 = "-padText";
      int int0 = 1;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setTrimText(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isTrimText();
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator("");
      outputFormat0.setIndent(true);
      outputFormat0.setIndent(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent("fa_#-D0,0IZno+S");
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1123103344201821
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "  ";
      stringArray0[2] = "-expandEmpty-trimTexort";
      stringArray0[3] = "-indentSize";
      stringArray0[4] = "-newlines";
      stringArray0[5] = "8imcexr";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-newlines\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3384481491346487
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmpty-trimTexort";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "-expandEmpty\n";
      stringArray0[3] = "-expandEmpty-trimTexort";
      stringArray0[4] = "-trimText";
      stringArray0[5] = "-expandEmpty\n";
      stringArray0[6] = "-newlines";
      stringArray0[7] = "-indentSize";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags((-2592));
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setLineSeparator("NlU'");
      outputFormat0.getLineSeparator();
      outputFormat0.getLineSeparator();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.getLineSeparator();
      outputFormat0.getLineSeparator();
      outputFormat0.getLineSeparator();
      assertEquals((-2592), outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8606101898701155
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.getIndent();
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setIndent(false);
      OutputFormat outputFormat2 = new OutputFormat();
      outputFormat2.setExpandEmptyElements(true);
      outputFormat0.setTrimText(true);
      String string0 = null;
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat3.isPadText();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5553520674551624
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("U^LN]H&pr9");
      OutputFormat outputFormat1 = new OutputFormat("c/nP{w;f ", false, "c/nP{w;f ");
      outputFormat1.setOmitEncoding(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "c/nP{w;f ";
      stringArray0[1] = "U^LN]H&pr9";
      stringArray0[2] = "U^LN]H&pr9";
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat1.setOmitEncoding(false);
      outputFormat0.setEncoding("");
      outputFormat1.setEncoding("");
      outputFormat0.setOmitEncoding(true);
      outputFormat1.getEncoding();
      assertEquals("", outputFormat1.getEncoding());
      
      String string0 = outputFormat0.getEncoding();
      assertEquals("", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent(true);
      outputFormat0.getIndent();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndent("!");
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals("!", outputFormat0.getIndent());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7300480657918285
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setIndentSize(3070);
      outputFormat0.setIndent(true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setLineSeparator("");
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent("-encoding");
      outputFormat0.setTrimText(true);
      assertEquals("-encoding", outputFormat0.getIndent());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat0 = new OutputFormat("8imcexr", false, "?\"ZRYv> {2qEo&*J9");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "O1Z|G]VeG`&eo";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "8imcexr";
      stringArray0[3] = "8imcexr";
      stringArray0[4] = "8imcexr";
      stringArray0[5] = "  ";
      stringArray0[6] = "-newlines";
      stringArray0[7] = "8imcexr";
      outputFormat0.parseOptions(stringArray0, 8);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals("?\"ZRYv> {2qEo&*J9", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("8imcexr", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlYrLZj UK");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtmlYrLZj UK";
      stringArray0[1] = "-xhtmlYrLZj UK";
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.parseOptions(stringArray0, 1360);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setEncoding((String) null);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.getEncoding();
      outputFormat0.getEncoding();
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9396395458476661
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = new OutputFormat();
      OutputFormat outputFormat2 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-tgrimTexort";
      stringArray0[0] = "-encoding";
      stringArray0[2] = "-tgrimTexort";
      stringArray0[3] = "-xhtml";
      stringArray0[4] = "-encoding";
      stringArray0[5] = "-tgrimTexort";
      stringArray0[6] = "-encoding";
      stringArray0[7] = "-tgrimTexort";
      stringArray0[8] = "-tgrimTexort";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(2, int0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6315560383090397
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat0.getIndent());
      assertTrue(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isPadText());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setAttributeQuoteCharacter('\"');
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertFalse(outputFormat2.isOmitEncoding());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertFalse(outputFormat2.isNewlines());
      assertTrue(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertFalse(outputFormat2.isPadText());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertFalse(outputFormat2.isXHTML());
      assertEquals("\n", outputFormat2.getLineSeparator());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "z^dVQ.3d*";
      stringArray0[1] = "-xh{tmlfFha_R`m&aOoI";
      stringArray0[3] = "q[HijXmBW.4VW*qp;";
      stringArray0[5] = "q[HijXmBW.4VW*qp;";
      OutputFormat outputFormat0 = new OutputFormat("-xh{tmlfFha_R`m&aOoI", false, "-xh{tmlfFha_R`m&aOoI");
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("-xh{tmlfFha_R`m&aOoI", outputFormat0.getEncoding());
      assertEquals('\"', char0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("-xh{tmlfFha_R`m&aOoI", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.241862695362889
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setLineSeparator("");
      outputFormat0.setNewLineAfterNTags((-1413));
      outputFormat0.isOmitEncoding();
      outputFormat0.isNewlines();
      outputFormat0.setIndent(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setTrimText(false);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.isPadText();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent(false);
      outputFormat1.setTrimText(false);
      outputFormat1.setNewlines(false);
      boolean boolean0 = outputFormat0.isTrimText();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("uNU!1<LQW|R7,=|Wt", true, "uNU!1<LQW|R7,=|Wt");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setPadText(true);
      outputFormat0.setIndentSize(40);
      outputFormat0.setTrimText(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setIndent(true);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isNewlines();
      outputFormat0.getEncoding();
      assertEquals("  ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      boolean boolean0 = outputFormat0.isXHTML();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.04497334728722
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setIndent(true);
      outputFormat0.setOmitEncoding(true);
      String[] stringArray0 = new String[0];
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setTrimText(true);
      outputFormat0.setEncoding("-encoding");
      outputFormat0.isOmitEncoding();
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent("");
      outputFormat0.setXHTML(true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndent(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isXHTML();
      outputFormat0.isExpandEmptyElements();
      outputFormat0.isTrimText();
      outputFormat0.getEncoding();
      outputFormat0.setIndent("-encoding");
      outputFormat0.setIndent("W");
      assertEquals("W", outputFormat0.getIndent());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expndEmpty8xe}mbW");
      assertEquals("-expndEmpty8xe}mbW", outputFormat0.getIndent());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-newlibes";
      stringArray0[3] = "#b,IlEM jb7F)\"#Hh";
      stringArray0[4] = "-xhtml8xe}mbW";
      stringArray0[5] = "-xhtml8xe}mbW";
      stringArray0[6] = "-expndEmpty8xe}mbW";
      outputFormat0.setIndent((String) null);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Invalid attribute quote character (", false, "-xhtmlYrLZj UK");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(']');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (])
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0006905819824055
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Q> AUeMm*K'zO~:l");
      outputFormat0.getLineSeparator();
      outputFormat0.setTrimText(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.getNewLineAfterNTags();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent(true);
      outputFormat1.setTrimText(true);
      outputFormat1.setPadText(true);
      outputFormat0.setLineSeparator("\n");
      outputFormat0.setIndentSize(1);
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setIndentSize(0);
      outputFormat0.isPadText();
      outputFormat0.setIndentSize(1);
      outputFormat0.getEncoding();
      outputFormat0.setXHTML(false);
      outputFormat0.getLineSeparator();
      outputFormat0.setIndent("-trimText");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0";
      stringArray0[1] = "Q> AUeMm*K'zO~:l";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-trimText";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat1.setIndent("Q> AUeMm*K'zO~:l");
      assertEquals("Q> AUeMm*K'zO~:l", outputFormat1.getIndent());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.748058988887039
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.isPadText();
      outputFormat0.isExpandEmptyElements();
      OutputFormat outputFormat1 = new OutputFormat("-padText", false);
      outputFormat1.setIndentSize(0);
      assertEquals("", outputFormat1.getIndent());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "-padText";
      stringArray0[2] = null;
      stringArray0[4] = "xO>PZF4hnW):Z'1";
      stringArray0[5] = null;
      outputFormat0.parseOptions(stringArray0, 22);
      outputFormat1.setIndent("");
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtml8xe}mbW";
      stringArray0[1] = "#b,IlEM jb7F)\"#Hh";
      stringArray0[3] = "-xhtml8xe}mbW";
      stringArray0[4] = "#b,IlEM jb7F)\"#Hh";
      OutputFormat outputFormat0 = new OutputFormat("-xhtml-xhtml8xe}mbW", false);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-2034976396));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2034976396
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isNewLineAfterDeclaration();
      String[] stringArray0 = new String[8];
      outputFormat0.setSuppressDeclaration(true);
      stringArray0[1] = "";
      stringArray0[2] = "QuG(K!}s?";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      outputFormat0.setEncoding("%4T4+@otPY\"!R!0[");
      stringArray0[7] = ">nx$/=2";
      outputFormat0.setNewLineAfterDeclaration(false);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-940));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -940
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "-padText";
      stringArray0[2] = "-encoding";
      stringArray0[3] = "";
      stringArray0[4] = "-expandEmpty";
      stringArray0[5] = "-suppressDeclaration";
      stringArray0[6] = "k@/-{R_&b5sf2";
      stringArray0[7] = "Qgm1_~t k0nc6?|}jv";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isPadText());
      assertEquals("", outputFormat0.getEncoding());
      assertEquals(6, int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Qp{,Kz(%F]+WC#~,0QQ`");
      assertEquals("Qp{,Kz(%F]+WC#~,0QQ`", outputFormat0.getIndent());
      
      String[] stringArray0 = new String[6];
      stringArray0[3] = "q\"7xCA'212";
      stringArray0[2] = "-expandEmptyaEPI&V*g3;";
      outputFormat0.setIndent(false);
      stringArray0[3] = "";
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isOmitEncoding());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Qp{,Kz(%F]+WC#~,0QQ`");
      outputFormat0.setIndent("Qp{,Kz(%F]+WC#~,0QQ`");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-xhtmlfFha_R`m&aOoI";
      outputFormat0.setIndent(true);
      assertEquals("  ", outputFormat0.getIndent());
      
      stringArray0[3] = "q\"7xCA'212";
      stringArray0[2] = "-expandEmptyaEPI&V*g3;";
      stringArray0[3] = "";
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("M", false, "M");
      outputFormat0.isOmitEncoding();
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.isSuppressDeclaration();
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("\n", string0);
      
      outputFormat0.setEncoding("M");
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("M", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("M", outputFormat0.getIndent());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent(false);
      outputFormat0.getIndent();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndent("!");
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6195259631210703
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setTrimText(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isTrimText();
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator("");
      outputFormat0.setIndent(false);
      outputFormat0.setIndentSize(1);
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent("fa_#-D0,0IZo+S");
      assertTrue(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-trimText";
      stringArray0[4] = "-expandEmpty\n";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "-trimText";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "-expandEmpty";
      stringArray1[2] = "-expandEmpay8xe}mbW";
      stringArray1[3] = "-expandEmpty-expandEmpty";
      stringArray1[4] = "-trimText";
      stringArray1[5] = "-trimText";
      stringArray1[6] = "-trimText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Qp{VKz(%F]WC#~,0QV`");
      assertEquals("Qp{VKz(%F]WC#~,0QV`", outputFormat0.getIndent());
      
      outputFormat0.setIndentSize((-66453165));
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "S^c:g 84Zf1H'?";
      stringArray0[1] = "S^c:g 84Zf1H'?";
      stringArray0[2] = "-trimTexort";
      stringArray0[3] = "S^c:g 84Zf1H'?";
      stringArray0[5] = "S^c:g 84Zf1H'?";
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewlines(false);
      String[] stringArray0 = new String[7];
      stringArray0[3] = "-expandEmpty\n";
      stringArray0[3] = "-newlines";
      stringArray0[2] = "-expandEmpty\n";
      stringArray0[3] = "-expandEmpty-trimTexort";
      stringArray0[4] = "-expandEmpty\n";
      stringArray0[5] = "8imcexr";
      stringArray0[6] = "-newlines";
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.104316458229271
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expndEmptay8xe}mbW");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "#b,IlEM jb7NR4F)\"#Hh";
      stringArray0[1] = "#b,IlEM jb7NR4F)\"#Hh";
      stringArray0[2] = "-xhtml8xe}mbW";
      stringArray0[3] = "-expandEmpty-trimTexort";
      stringArray0[4] = "#b,IlEM jb7NR4F)\"#Hh";
      stringArray0[5] = "-xhtml8xe}mbW";
      stringArray0[7] = "Y|Jb~Iz3W";
      stringArray0[8] = "#b,IlEM jb7NR4F)\"#Hh";
      int int0 = outputFormat0.parseOptions(stringArray0, 2);
      assertTrue(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(4, int0);
  }
}
