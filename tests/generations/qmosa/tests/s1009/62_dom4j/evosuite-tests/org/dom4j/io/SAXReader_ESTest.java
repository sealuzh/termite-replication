/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 07:18:53 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.DocumentType;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultProcessingInstruction;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.UserDataElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jaxen.SimpleVariableContext;
import org.jaxen.VariableContext;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.unparsedEntityDecl("$oi", "$oi", "$oi", "//tmp/org.dom4j.dom.DOMNodeHelper$EmptyNodeList0org.dom4j.dom.DOMNodeHelper$EmptyNodeList");
      MockFile mockFile0 = new MockFile("//tmp/org.dom4j.dom.DOMNodeHelper$EmptyNodeList0org.dom4j.dom.DOMNodeHelper$EmptyNodeList");
      File file0 = MockFile.createTempFile("http://xml.org/sax/features/use-locator2", "$oi", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "http://xml.org/sax/features/use-locator2");
      mockFile1.setExecutable(false);
      File file1 = mockFile0.getAbsoluteFile();
      MockFile mockFile2 = new MockFile("$oi");
      mockFile2.renameTo(file1);
      mockFile0.createNewFile();
      Integer integer0 = new Integer(2744);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setProperty("http://xml.org/sax/properties/declaration-handler", (Object) null);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.134872968988304
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getParent();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl2.getErrorHandler();
      xMLFilterImpl2.startPrefixMapping("SG_", "==f.+0!pDT9NGGBkp\"");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl4.startPrefixMapping("SG_", "==f.+0!pDT9NGGBkp\"");
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      xMLFilterImpl1.setParent(xMLFilterImpl3);
      xMLFilterImpl5.endDocument();
      xMLFilterImpl3.processingInstruction("http://xml.org/sax/features/namespace-prefixes", "http://xml.org/sax/features/namespace-prefixes");
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      xMLFilterImpl5.setContentHandler(xMLFilterImpl1);
      xMLFilterImpl3.getContentHandler();
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      InputSource inputSource0 = new InputSource("eON$.2S");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl3);
      sAXReader0.setEntityResolver(xMLFilterImpl3);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5719579500515657
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URI uRI0 = MockURI.aFTPURI;
      SAXReader sAXReader0 = new SAXReader(false);
      MockFile mockFile0 = new MockFile("|(R71LDU", "U4h'ZjdBZ(nv 8TD*");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      defaultDocumentFactory1.createQName("xxewy~1D", "o'L`iM_xi9R");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null);
      sAXReader1.setValidation(false);
      sAXReader1.createDefaultEntityResolver("r`/lkB\"}d8[NP`2Q ");
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/declaration-handler", "//home/ubuntu/termite/projects/62_dom4j/U'ZjdBZ(nv 8TD*/MRx\"('wJZ2)WF8dR0.tmp");
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/declaration-handler' cannot be casted to org.xml.sax.ext.DeclHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3863046904967216
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      defaultDocumentFactory0.createQName("//tmp/home/ubuntu/termite/projects/62_dom4j/5.E>+/dga_a+)zOO/home/ubuntu/termite/projects/62_dom4j/5.E>+/dga_a+)zOO0`sT-0/_K).>O", "DRs");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      defaultDocumentFactory2.createElement("];f<WCi1z.n");
      sAXReader0.setEncoding("//home/ubuntu/termite/projects/62_dom4j/ZR0`Y1$hy@RgU6/Validation not supported for XMLReader: /D<UrHk$4V &(yr$00D<UrHk$4V &(yr$0");
      StringReader stringReader0 = new StringReader("Is\"e =o%?^_?=d2^-");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3671693709947967
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      MockFile mockFile0 = new MockFile("//-p/`0?/D/R=$8V.YPLd<;40-B", "U'ZjdBZ(nv 8TD*");
      mockFile0.deleteOnExit();
      MockFile.createTempFile("MRx\"('wJZ2)WF8dR", "MRx\"('wJZ2)WF8dR", (File) mockFile0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      xMLFilterImpl0.setContentHandler(defaultHandler2_0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl3);
      sAXReader0.setXMLFilter(xMLFilterImpl4);
      StringReader stringReader0 = new StringReader("http://xml.org/sax/handlers/LexicalHandler");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("wILx");
      try { 
        sAXReader0.read("U Aw'P_@");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/U Aw'P_@ (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/U Aw'P_@ (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2990696902149015
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "org.jaxen.JaxenHandler");
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("org.jaxen.JaxenHandler");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl3);
      xMLFilterImpl4.setContentHandler(xMLFilterImpl5);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      xMLFilterImpl3.setContentHandler(xMLFilterImpl5);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl9 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl9);
      InputSource inputSource0 = new InputSource("\"\"%ElVa:)klfvn!");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: \"\"%ElVa:)klfvn! Nested exception: no protocol: \"\"%ElVa:)klfvn!
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URI uRI1 = MockURI.aFTPURI;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = "|(R71U";
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/use-locator2", false);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // Feature 'http://xml.org/sax/features/use-locator2' is read only.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1773151079980804
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getParent();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      String string0 = "SG_";
      xMLFilterImpl2.startPrefixMapping("SG_", "==f.+0!pDT9NGGBkp\"");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl4.startPrefixMapping("SG_", "==f.+0!pDT9NGGBkp\"");
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      xMLFilterImpl1.setParent(xMLFilterImpl3);
      xMLFilterImpl5.endDocument();
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      xMLFilterImpl5.setContentHandler(xMLFilterImpl1);
      xMLFilterImpl3.getContentHandler();
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      InputSource inputSource0 = new InputSource("/>]");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl6);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byteArrayInputStream0.reset();
      bufferedInputStream0.mark((-1378));
      byteArrayInputStream0.skip(3012L);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      bufferedInputStream0.available();
      sequenceInputStream0.read();
      sequenceInputStream0.read();
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.mark((byte)75);
      sequenceInputStream2.mark((-1));
      sequenceInputStream2.skip((-1));
      sequenceInputStream2.skip(0L);
      SAXReader sAXReader0 = new SAXReader();
      bufferedInputStream0.close();
      bufferedInputStream0.mark((-1));
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.275805525146526
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setContentHandler(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      InputSource inputSource0 = new InputSource("");
      inputSource0.setSystemId("");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!cy,+ 6?@h_");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = null;
      defaultDocumentFactory0.createQName((String) null);
      DOMNamespace dOMNamespace0 = new DOMNamespace((String) null, (String) null);
      QName.get("http://xml.org/sax/features/validation", (Namespace) dOMNamespace0, "http://xml.org/sax/features/validation");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setFeature("http://xml.org/sax/features/validation", true);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      sAXReader0.createXMLReader();
      defaultDocumentFactory1.createQName((String) null, (Namespace) dOMNamespace0);
      defaultDocumentFactory1.createCDATA("!cy,+ 6?@h_");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory1);
      // Undeclared exception!
      try { 
        namespaceStack0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4875624837479635
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      URI uRI0 = MockURI.aHttpURI;
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "l~XJ?*Zls";
      DefaultHandler defaultHandler0 = new DefaultHandler();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.getHandler("//tmp/{Fvik~%0{Fvik~%");
      sAXReader0.setDefaultHandler((ElementHandler) null);
      sAXReader0.setErrorHandler(defaultHandler0);
      try { 
        sAXReader0.read("l~XJ?*Zls");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/l~XJ (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/l~XJ (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = "";
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      QName qName0 = defaultDocumentFactory1.createQName("", "DR#");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      Namespace namespace0 = new Namespace("8>n2H7H5GQ;Jg)`__/", "");
      BaseElement baseElement0 = new BaseElement("//$0?/D/R=$8V.YPLH<;41", namespace0);
      DOMNamespace dOMNamespace0 = new DOMNamespace(baseElement0, "", "//$0?/D/R=$8V.YPLH<;41");
      QName.get("//$0?/D/R=$8V.YPLH<;41", (Namespace) dOMNamespace0);
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      BeanElement beanElement0 = new BeanElement(qName0, defaultDocumentFactory3);
      Element element0 = beanElement0.addElement("DR#");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("DR#", "", "");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      DOMDocumentType dOMDocumentType1 = (DOMDocumentType)dOMDocument0.getDocType();
      dOMDocumentType0.setDocument(dOMDocument0);
      DefaultDocument defaultDocument1 = new DefaultDocument(element0, dOMDocumentType1);
      dOMDocumentType1.isSameNode(dOMDocument0);
      DOMNamespace dOMNamespace1 = new DOMNamespace(beanElement0, "", "");
      dOMNamespace1.setDocument(defaultDocument1);
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory4.createCDATA("");
      defaultDocumentFactory4.createQName("", (Namespace) dOMNamespace1);
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byteArrayInputStream0.reset();
      bufferedInputStream0.mark((-1378));
      byteArrayInputStream0.skip(3012L);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      bufferedInputStream0.available();
      sequenceInputStream0.read();
      sequenceInputStream0.read();
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.mark((byte)75);
      sequenceInputStream2.skip((-1));
      sequenceInputStream2.skip(0L);
      SAXReader sAXReader0 = new SAXReader();
      bufferedInputStream0.mark((-1));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-1), 121);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 121, 1514);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0, 1514, (-1));
      byteArrayInputStream3.reset();
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream3.reset();
      byteArrayInputStream1.reset();
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0, (-1), 28);
      ByteArrayInputStream byteArrayInputStream6 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      assertNotSame(byteArrayInputStream0, byteArrayInputStream5);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
          DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
          DefaultDocument defaultDocument0 = new DefaultDocument();
          QName qName0 = defaultDocumentFactory1.createQName("", "DRs");
          DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
          Namespace namespace0 = new Namespace("8>n2H7H5GQ;Jg)`__/", "");
          BaseElement baseElement0 = new BaseElement("//$0?/D/R=$8V.YPLH<;41", namespace0);
          DOMNamespace dOMNamespace0 = new DOMNamespace(baseElement0, "", "//$0?/D/R=$8V.YPLH<;41");
          QName.get("//$0?/D/R=$8V.YPLH<;41", (Namespace) dOMNamespace0);
          DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
          BeanElement beanElement0 = new BeanElement(qName0, defaultDocumentFactory3);
          Element element0 = beanElement0.addElement("DRs");
          DOMElement dOMElement0 = new DOMElement(qName0);
          DOMDocumentType dOMDocumentType0 = new DOMDocumentType("DRs", "", "");
          DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
          DOMDocumentType dOMDocumentType1 = (DOMDocumentType)dOMDocument0.getDocType();
          dOMDocumentType0.setDocument(dOMDocument0);
          DefaultDocument defaultDocument1 = new DefaultDocument(element0, dOMDocumentType1);
          dOMDocumentType1.isSameNode(dOMDocument0);
          DOMNamespace dOMNamespace1 = new DOMNamespace(beanElement0, "", "");
          dOMNamespace1.setDocument(defaultDocument1);
          DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
          defaultDocumentFactory4.createQName("", (Namespace) dOMNamespace1);
          URL uRL0 = MockURL.getFtpExample();
          SAXReader sAXReader0 = new SAXReader(false);
          URI uRI0 = MockURL.toURI(uRL0);
          URI uRI1 = MockURI.parseServerAuthority(uRI0);
          URL uRL1 = MockURI.toURL(uRI1);
          try { 
            sAXReader0.read(uRL1);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor388.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor388.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1953475082587373
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      parserAdapter0.setDTDHandler(xMLFilterImpl0);
      xMLFilterImpl0.endElement("zzn^]", (String) null, "K8");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLReaderAdapter0.setEntityResolver(xMLFilterImpl0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(parserAdapter0, defaultHandler0);
      sAXReader0.createDefaultEntityResolver("K8");
      StringReader stringReader0 = new StringReader("K8");
      sAXReader0.isValidating();
      StringReader stringReader1 = new StringReader("7}b0~z");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3809682098476954
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl1.setContentHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      xMLFilterImpl3.setContentHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.createDefaultEntityResolver("");
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl5);
      try { 
        sAXReader0.configureReader(xMLFilterImpl2, sAXContentHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@21955f94 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.239095456210609
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      try { 
        sAXReader0.read("boolean() requires one argument");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@6358ba6a Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@6358ba6a Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.startPrefixMapping("eON$.2S", "NrySQ'g>a5y%P");
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.startPrefixMapping("c`OG=v!MU", "NrySQ'g>a5y%P");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl2.setContentHandler(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      MockURL.getFtpExample();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-39);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)57);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)102, 3745);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 3823, (byte)0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte)57;
      byteArray1[3] = (byte)57;
      byteArray1[4] = (byte)57;
      byteArray1[5] = (byte) (-39);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray1, 748, 93);
      byteArrayInputStream3.reset();
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray1);
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0, 3745, (byte)57);
      byteArrayInputStream5.reset();
      ByteArrayInputStream byteArrayInputStream6 = new ByteArrayInputStream(byteArray1, 8, (-1134));
      ByteArrayInputStream byteArrayInputStream7 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream6.reset();
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      String string0 = ".L/2I:2\\&mb)]2";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        sAXReader0.read(".L/2I:2&mb)]2");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: .L/2I:2&mb)]2 Nested exception: no protocol: .L/2I:2&mb)]2
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.40640935807259
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SAXReader sAXReader0 = new SAXReader((String) null);
      MockFile mockFile0 = new MockFile((String) null, "org.jaxen.function.LastFunction");
      MockFile.createTempFile("FEePa<80", (String) null, (File) mockFile0);
      mockFile0.getAbsoluteFile();
      mockFile0.getCanonicalFile();
      mockFile0.toPath();
      MockFile.createTempFile("org.jaxen.function.LastFunction", "'WQ6>e!X");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("PAx2WJx&JxVf4'9@");
      sAXReader_SAXEntityResolver0.resolveEntity("FEePa<80", "fip+8g *B");
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      StringReader stringReader0 = new StringReader("PAx2WJx&JxVf4'9@");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("The Attribute already has an existing parent \"", (Namespace) null);
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      qName0.setDocumentFactory(documentFactory0);
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      sAXReader0.isValidating();
      sAXReader0.createXMLReader();
      try { 
        sAXReader0.setXMLReaderClassName("//$0?/D/R=$8V.YPLH<;40");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //$0?/D/R=$8V.YPLH<;40 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.installXMLFilter(parserAdapter0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.installXMLFilter((XMLReader) null);
      DefaultDocumentFactory.getInstance();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getContentHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl0.setContentHandler((ContentHandler) null);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      InputSource inputSource0 = new InputSource("");
      xMLFilterImpl1.setContentHandler((ContentHandler) null);
      SAXParseException sAXParseException0 = new SAXParseException("o!n8>$<", "o!n8>$<", (String) null, (-1312), (-1312));
      Object object0 = new Object();
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      Object object0 = new Object();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLReader(xMLFilterImpl1);
      URI uRI1 = MockURI.aHttpURI;
      sAXReader0.createXMLReader();
      sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.366696557756026
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "D2jhq");
      InputSource inputSource0 = new InputSource("");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 489);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      try { 
        sAXReader0.read((InputStream) pushbackInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.4939323273795786
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream0.mark((-1378));
      byteArrayInputStream0.skip(3012L);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      bufferedInputStream0.available();
      sequenceInputStream0.read();
      sequenceInputStream0.read();
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.mark((byte)75);
      sequenceInputStream2.skip(0L);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.removeHandler((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DOMDocument dOMDocument0 = new DOMDocument((String) null);
      sAXReader0.getErrorHandler();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-1), 121);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 121, 1514);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0, 92, (-1));
      byteArrayInputStream4.reset();
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0, 0, 121);
      byteArrayInputStream2.reset();
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createNamespace((String) null, "xml");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      documentFactory0.createXPathFilter("xml", (VariableContext) simpleVariableContext0);
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("XTsa@KJLZ3qcP'IhiX-", "DRs");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("B,t22OT#=j|lXQ4!]H!", "XTsa@KJLZ3qcP'IhiX-");
      UserDataElement userDataElement0 = new UserDataElement(qName0);
      DefaultDocument defaultDocument0 = new DefaultDocument(userDataElement0, dOMDocumentType0);
      DOMNamespace dOMNamespace0 = new DOMNamespace(userDataElement0, "sum() requires one argument.", "sum() requires one argument.");
      dOMNamespace0.setDocument(defaultDocument0);
      defaultDocumentFactory2.createQName("//tmp/http:/xml.org/sax/features/use-locator20http:/xml.org/sax/features/use-locator2", (Namespace) dOMNamespace0);
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      documentFactory0.setXPathNamespaceURIs(hashMap0);
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createText("");
      defaultDocumentFactory4.createCDATA("//tmp/http:/xml.org/sax/features/use-locator20http:/xml.org/sax/features/use-locator2");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      defaultDocumentFactory6.getQNames();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory4);
      Integer integer0 = new Integer(3);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.4897182683864876
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-33);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      String string0 = "Expected node-type";
      DispatchHandler dispatchHandler1 = sAXReader0.getDispatchHandler();
      dispatchHandler1.removeHandler("Expected node-type");
      dispatchHandler0.addHandler("Expected node-type", (ElementHandler) null);
      sAXReader0.setDispatchHandler(dispatchHandler0);
      dispatchHandler0.removeHandler("number");
      sequenceInputStream0.skip((byte)15);
      sAXReader0.setEncoding("Error on line ");
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"ERROR ON LINE \". Nested exception: Invalid encoding name \"ERROR ON LINE \".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      String string0 = "";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDefaultHandler(pruningDispatchHandler0);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "B6j");
      String string1 = null;
      MockFile mockFile2 = null;
      try {
        mockFile2 = new MockFile(mockFile1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("", "", "");
      QName.get("", "//home/ubuntu/termite/projects/62_dom4j/org.jaxen.function.LastFunction/FEePa<800.tmp", "");
      documentFactory0.createElement(qName0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      defaultDocumentFactory0.createQName("XTsa@KJLZ3qcP'IhiX-", "DRs");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createText("");
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory2.createXPathFilter("DRs", (VariableContext) simpleVariableContext0);
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      defaultDocumentFactory2.createElement("0oaCV-!I");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)92);
      byteArrayInputStream0.mark((byte) (-86));
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      URI uRI0 = MockURI.aHttpURI;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler("U'ZjdBZ(nv 8TD*");
      sAXReader0.addHandler("//tmp/{Fvik~%0{Fvik~%", (ElementHandler) null);
      MockFile mockFile0 = new MockFile("//-p/`0?/D/R=$8V.YPLd<;40-B", "U'ZjdBZ(nv 8TD*");
      mockFile0.deleteOnExit();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//-p/`0?/D/R=$8V.YPLd<;40-B");
      File file0 = MockFile.createTempFile("MRx\"('wJZ2)WF8dR", (String) null, (File) mockFile0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("MRx\"('wJZ2)WF8dR");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      mockFile0.renameTo(file0);
      MockFile mockFile1 = new MockFile("l)97#aS,.@uNX");
      mockFile1.createNewFile();
      MockFile mockFile2 = new MockFile(mockFile0, "//-p/`0?/D/R=$8V.YPLd<;40-B");
      MockFile mockFile3 = new MockFile(mockFile1, "MRx\"('wJZ2)WF8dR");
      try { 
        sAXReader0.read((File) mockFile2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      QName qName0 = QName.get("org.dom4j.io.SAXReader");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory(documentFactory0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      try { 
        sAXReader0.setProperty("ctA{j]lAr*[_Tj.", "//$0?/D/R=$8V.YPLH<;40");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'ctA{j]lAr*[_Tj.' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/handlers/LexicalHandler");
      sAXReader_SAXEntityResolver0.resolveEntity("", "m{N+Ad^TT'P/\u0000CuK");
      Object object0 = new Object();
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, true);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertTrue(sAXReader0.isValidating());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2436);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, " : ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.resetHandlers();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String string0 = null;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      sAXReader0.addHandler("1M\"{_U'~B", dispatchHandler0);
      XMLReader xMLReader0 = null;
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIgnoreComments());
      
      sAXReader0.setIgnoreComments(true);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIgnoreComments(false);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      QName qName0 = defaultDocumentFactory0.createQName("", "DRs");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      BeanElement beanElement0 = new BeanElement(qName0, defaultDocumentFactory2);
      Element element0 = beanElement0.addElement("DRs");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("DRs", "", "");
      DOMDocument dOMDocument0 = new DOMDocument((DOMElement) null, (DOMDocumentType) null);
      dOMDocument0.getDocType();
      dOMDocumentType0.setDocument(dOMDocument0);
      DefaultDocument defaultDocument0 = new DefaultDocument(element0, (DocumentType) null);
      DOMNamespace dOMNamespace0 = new DOMNamespace(beanElement0, "", "http://xml.org/sax/features/namespaces");
      dOMNamespace0.setDocument(defaultDocument0);
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory3.createQName("", (Namespace) dOMNamespace0);
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      defaultDocumentFactory2.setXPathNamespaceURIs(hashMap0);
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      defaultDocumentFactory5.createText("'UE");
      defaultDocumentFactory5.createCDATA("//$0?/D/R=$8V.YPLH<;40");
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      defaultDocumentFactory6.getQNames();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory7);
      Integer integer0 = new Integer((-2255));
      try { 
        sAXReader0.setProperty("http://xml.org/sax/features/namespaces", integer0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'http://xml.org/sax/features/namespaces' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "5L}v4`<6QJV12U^zh");
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLReader((XMLReader) null);
      sAXReader0.installXMLFilter((XMLReader) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ";UUq@GC,-?fg";
      StringReader stringReader0 = new StringReader(";UUq@GC,-?fg");
      DefaultDocument defaultDocument0 = new DefaultDocument();
      sAXReader0.isIgnoreComments();
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.getXMLFilter();
      sAXReader0.isIgnoreComments();
      try { 
        sAXReader0.setXMLReaderClassName(";UUq@GC,-?fg");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class ;UUq@GC,-?fg not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object object0 = new Object();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.setEncoding("@");
      StringReader stringReader0 = new StringReader("");
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getRef());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("", "", "");
      qName0.equals("");
      documentFactory0.createElement(qName0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      defaultDocumentFactory0.createQName("XTsa@KJLZ3qcP'IhiX-", "DRs");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createText("");
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory2.createXPathFilter("DRs", (VariableContext) simpleVariableContext0);
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/validation");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/handlers/LexicalHandler", "//tmp/org.jaxen.function.LastFunction2/home/ubuntu/termite/projects/62_dom4j/org.jaxen.function.LastFunction");
      try { 
        sAXReader0.setFeature("XTsa@KJLZ3qcP'IhiX-", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'XTsa@KJLZ3qcP'IhiX-' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.getDocumentFactory();
      String string0 = "FEePa<80";
      MockFile mockFile0 = new MockFile((String) null, "org.jaxen.function.LastFunction");
      MockFile.createTempFile("FEePa<80", (String) null, (File) mockFile0);
      File file0 = mockFile0.getAbsoluteFile();
      mockFile0.getCanonicalFile();
      String string1 = "'WQ6>eX";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hLbSLO,_dy9N/)'4");
      File file1 = MockFile.createTempFile("org.jaxen.function.LastFunction", "'WQ6>eX");
      file1.setExecutable(false);
      mockFile0.getCanonicalPath();
      File file2 = MockFile.createTempFile("PAx2WJx&JxVf4O9@", "'WQ6>eX");
      file0.setWritable(false, false);
      file1.renameTo(mockFile0);
      file1.createNewFile();
      MockFile mockFile1 = new MockFile(file2, "FEePa<80");
      mockFile1.toPath();
      String string2 = null;
      MockFile mockFile2 = null;
      try {
        mockFile2 = new MockFile(file1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      defaultDocumentFactory0.createEntity(" of document ", " of document ");
      sAXReader0.getDocumentFactory();
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction(" of document ", " of document ");
      Object object0 = new Object();
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "//tmp/XF5Nec\"ye+vH5}?\u0000last() requires no arguments.");
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStringInternEnabled(false);
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createXMLReader();
      sAXReader0.setValidation(true);
      sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isValidating());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createNamespace((String) null, "xmxl");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, bufferedInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration0);
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      documentFactory0.createQName("9ugFo?H)e$fD", "9ugFo?H)e$fD", "9ugFo?H)e$fD");
      InputSource inputSource0 = new InputSource();
      MockURL.getHttpExample();
      InputSource inputSource1 = new InputSource();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)62, 92);
      byteArrayInputStream1.reset();
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertNotNull(dispatchHandler0);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.2786004072646815
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      InputSource inputSource0 = new InputSource(sequenceInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.2786004072646815
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      InputSource inputSource0 = new InputSource(sequenceInputStream0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      QName qName0 = defaultDocumentFactory1.createQName("", "DRs");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      Namespace namespace0 = new Namespace("8>n2H7H5GQ;Jg)`__/", "");
      BaseElement baseElement0 = new BaseElement("//$0?/D/R=$8V.YPLH<;41", namespace0);
      DOMNamespace dOMNamespace0 = new DOMNamespace(baseElement0, "", "//$0?/D/R=$8V.YPLH<;41");
      QName.get("//$0?/D/R=$8V.YPLH<;41", (Namespace) dOMNamespace0);
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      BeanElement beanElement0 = new BeanElement(qName0, defaultDocumentFactory3);
      Element element0 = beanElement0.addElement("DRs");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("DRs", "", "");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      DOMDocumentType dOMDocumentType1 = (DOMDocumentType)dOMDocument0.getDocType();
      dOMDocumentType0.setDocument(dOMDocument0);
      DefaultDocument defaultDocument1 = new DefaultDocument(element0, dOMDocumentType1);
      dOMDocumentType1.isSameNode(dOMDocument0);
      DOMNamespace dOMNamespace1 = new DOMNamespace(beanElement0, "", "");
      dOMNamespace1.setDocument(defaultDocument1);
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory4.createQName("", (Namespace) dOMNamespace1);
      defaultDocumentFactory1.getXPathNamespaceURIs();
      defaultDocumentFactory3.setXPathNamespaceURIs((Map<String, String>) null);
      DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createCDATA("");
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      defaultDocumentFactory0.getQNames();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory2);
      try { 
        sAXReader0.setXMLReaderClassName("");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.191759469228055
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.076104579100767
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.configureReader(xMLFilterImpl0, (DefaultHandler) null);
      MockFile mockFile0 = new MockFile("//-p/`0?/D/R=$8V.YPLd<;40-B", "U'ZjdBZ(nv 8TD*");
      mockFile0.deleteOnExit();
      MockFile.createTempFile("MRx\"('wJZ2)WF8dR", (String) null, (File) mockFile0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("MRx\"('wJZ2)WF8dR");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      MockFile mockFile1 = new MockFile(mockFile0, "PkJk\"=}");
      MockFile mockFile2 = null;
      try {
        mockFile2 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl0.setContentHandler((ContentHandler) null);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      InputSource inputSource0 = new InputSource("");
      xMLFilterImpl2.setContentHandler(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      sAXReader0.createContentHandler(xMLFilterImpl2);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.skip(3012L);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream1.mark((byte)75);
      sequenceInputStream1.skip(0L);
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      QName qName0 = defaultDocumentFactory1.createQName("", "DRs");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      Namespace namespace0 = new Namespace("8>n2H7H5GQ;Jg)`__/", "");
      BaseElement baseElement0 = new BaseElement("//$0?/D/R=$8V.YPLH<;41", namespace0);
      DOMNamespace dOMNamespace0 = new DOMNamespace(baseElement0, "", "//$0?/D/R=$8V.YPLH<;41");
      QName.get("//$0?/D/R=$8V.YPLH<;41", (Namespace) dOMNamespace0);
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      BeanElement beanElement0 = new BeanElement(qName0, defaultDocumentFactory3);
      Element element0 = beanElement0.addElement("DRs");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("DRs", "", "");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      DOMDocumentType dOMDocumentType1 = (DOMDocumentType)dOMDocument0.getDocType();
      dOMDocumentType0.setDocument(dOMDocument0);
      DefaultDocument defaultDocument1 = new DefaultDocument(element0, dOMDocumentType1);
      dOMDocumentType1.isSameNode(dOMDocument0);
      DOMNamespace dOMNamespace1 = new DOMNamespace(beanElement0, "", "");
      dOMNamespace1.setDocument(defaultDocument1);
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory4.createCDATA("");
      defaultDocumentFactory4.createQName("", (Namespace) dOMNamespace1);
      defaultDocumentFactory1.getXPathNamespaceURIs();
      defaultDocumentFactory3.setXPathNamespaceURIs((Map<String, String>) null);
      DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createCDATA("");
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      defaultDocumentFactory0.getQNames();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory2);
      StringReader stringReader0 = new StringReader("K`.Mqeo");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl2.setContentHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl2.setContentHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl4, true);
      sAXReader0.setEntityResolver(xMLFilterImpl2);
      sAXReader0.createDefaultEntityResolver("");
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.setContentHandler((ContentHandler) null);
      xMLFilterImpl0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("2d*`D3JE5NCg*Xs?W");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("2d*`D3JE5NCg*Xs?W", "2d*`D3JE5NCg*Xs?W");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      sAXReader0.setStripWhitespaceText(true);
      ElementStack elementStack0 = new ElementStack(1150);
      elementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      sAXReader0.isMergeAdjacentText();
      sAXReader0.isStripWhitespaceText();
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertTrue(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createNamespace((String) null, "xmxl");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory3);
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      URI uRI0 = MockURI.aHttpURI;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*S(%x?S|+(X&I");
      SAXReader sAXReader0 = new SAXReader((String) null);
      MockFile mockFile0 = new MockFile((String) null, "*S(%x?S|+(X&I");
      MockFile mockFile1 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/U'ZjdBZ(nv 8TD*/Error on line /Error on line 0.tmp", "}Z[19R1g1%W)");
      mockFile1.mkdir();
      MockFile.createTempFile("`&;", "HM%fGTj^zSr!?^P^_", (File) mockFile0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("%G\"^Vt+A^=MCPxK");
      sAXReader_SAXEntityResolver0.resolveEntity("//-p/$0?/D/R=$8V.YPLH<;40-p", ":`GzCq3(");
      try { 
        MockURI.URI(" iFXBYGEJICOrpa}>XE");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0:  iFXBYGEJICOrpa}>XE
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.3886459900319466
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 489);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      try { 
        sAXReader0.read((InputStream) pushbackInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createElement("//$0?/D/R=$8V`YPLH;40");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      QName qName0 = defaultDocumentFactory1.createQName("", "DRs");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      Namespace namespace0 = new Namespace("8>n2H7H5GQ;Jg)`__/", "");
      BaseElement baseElement0 = new BaseElement("//$0?/D/R=$8V.YPLH<;41", namespace0);
      DOMNamespace dOMNamespace0 = new DOMNamespace(baseElement0, "", "//$0?/D/R=$8V.YPLH<;41");
      QName.get("//$0?/D/R=$8V.YPLH<;41", (Namespace) dOMNamespace0);
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      BeanElement beanElement0 = new BeanElement(qName0, defaultDocumentFactory3);
      Element element0 = beanElement0.addElement("DRs");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("DRs", "", "");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      DOMDocumentType dOMDocumentType1 = (DOMDocumentType)dOMDocument0.getDocType();
      dOMDocumentType0.setDocument(dOMDocument0);
      DefaultDocument defaultDocument1 = new DefaultDocument(element0, dOMDocumentType1);
      dOMDocumentType1.isSameNode(dOMDocument0);
      DOMNamespace dOMNamespace1 = new DOMNamespace(beanElement0, "", "");
      dOMNamespace1.setDocument(defaultDocument1);
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory4.createCDATA("");
      defaultDocumentFactory4.createQName("", (Namespace) dOMNamespace1);
      defaultDocumentFactory1.getXPathNamespaceURIs();
      defaultDocumentFactory3.setXPathNamespaceURIs((Map<String, String>) null);
      DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createCDATA("");
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      defaultDocumentFactory6.createElement("//$0?/D/R=$8V.YPLH<;41");
      StringReader stringReader0 = new StringReader("Is\"e =o%?^\"_?=E2^-");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory4, false);
      try { 
        sAXReader0.read((Reader) stringReader0, "Q/Pph5p");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document Q/Pph5p : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/declaration-handler");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/properties/declaration-handler", "http://xml.org/sax/properties/declaration-handler");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.1773151079980804
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getParent();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl2.startPrefixMapping("SG_", "zb6");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl4.startPrefixMapping("SG_", "zb6");
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      xMLFilterImpl1.setParent(xMLFilterImpl3);
      xMLFilterImpl5.endDocument();
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      xMLFilterImpl5.setContentHandler(xMLFilterImpl1);
      xMLFilterImpl3.getContentHandler();
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      InputSource inputSource0 = new InputSource("eON$.2S");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl3);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = (XMLFilterImpl)xMLFilterImpl1.getParent();
      xMLFilterImpl1.startPrefixMapping("eON$.2S", "NrySQ'g>a5y%P");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      xMLFilterImpl2.setParent(xMLFilterImpl4);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl6.setContentHandler(xMLFilterImpl2);
      XMLFilterImpl xMLFilterImpl7 = new XMLFilterImpl();
      String string0 = "Fy-t,hP'jn^P&x{OM";
      InputSource inputSource0 = new InputSource("Fy-t,hP'jn^P&x{OM");
      XMLFilterImpl xMLFilterImpl8 = new XMLFilterImpl();
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("eON$.2S");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class eON$.2S not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createDocument();
      QName qName0 = defaultDocumentFactory1.createQName("", "DRs");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      BeanElement beanElement0 = new BeanElement(qName0, defaultDocumentFactory3);
      Element element0 = beanElement0.addElement("TjelbUOz&nYot{6g");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("DRs", "", "");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      DOMDocumentType dOMDocumentType1 = (DOMDocumentType)dOMDocument0.getDocType();
      dOMDocumentType0.setDocument(dOMDocument0);
      DefaultDocument defaultDocument0 = new DefaultDocument(element0, dOMDocumentType1);
      String string0 = "http://xml.org/sax/features/namespaces";
      dOMDocumentType1.isSameNode(dOMDocument0);
      DOMNamespace dOMNamespace0 = new DOMNamespace(beanElement0, "", "http://xml.org/sax/features/namespaces");
      dOMNamespace0.setDocument(defaultDocument0);
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory4.createQName("", (Namespace) dOMNamespace0);
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      defaultDocumentFactory1.getXPathNamespaceURIs();
      defaultDocumentFactory3.setXPathNamespaceURIs((Map<String, String>) null);
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createCDATA("");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("http://xml.org/sax/features/namespaces", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class http://xml.org/sax/features/namespaces not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      QName qName0 = defaultDocumentFactory1.createQName("", "DR#");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      Namespace namespace0 = new Namespace("8>n2H7H5GQ;Jg)`__/", "");
      BaseElement baseElement0 = new BaseElement("//$0?/D/R=$8V.YPLH<;41", namespace0);
      DOMNamespace dOMNamespace0 = new DOMNamespace(baseElement0, "", "//$0?/D/R=$8V.YPLH<;41");
      QName.get("//$0?/D/R=$8V.YPLH<;41", (Namespace) dOMNamespace0);
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      BeanElement beanElement0 = new BeanElement(qName0, defaultDocumentFactory3);
      Element element0 = beanElement0.addElement("DR#");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("DR#", "", "");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      DOMDocumentType dOMDocumentType1 = (DOMDocumentType)dOMDocument0.getDocType();
      dOMDocumentType0.setDocument(dOMDocument0);
      DefaultDocument defaultDocument1 = new DefaultDocument(element0, dOMDocumentType1);
      dOMDocumentType1.isSameNode(dOMDocument0);
      DOMNamespace dOMNamespace1 = new DOMNamespace(beanElement0, "", "");
      dOMNamespace1.setDocument(defaultDocument1);
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      simpleVariableContext0.setVariableValue("^h", (Object) "");
      defaultDocumentFactory5.createXPathFilter("dV", (VariableContext) simpleVariableContext0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory4);
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      defaultDocumentFactory6.createElement("r*Ys");
      StringReader stringReader0 = new StringReader("//$0?/D/R=$8V.YPLH<;41");
      try { 
        sAXReader0.read((Reader) stringReader0, "bf!L{w1I");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document bf!L{w1I : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      URI uRI0 = MockURI.aHttpURI;
      SAXReader sAXReader0 = new SAXReader((String) null);
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/5.E>+/dga_a+)zOO/home/ubuntu/termite/projects/62_dom4j/5.E>+/dga_a+)zOO0`sT-", "U'ZjdBZ(nv 8TD*");
      File file0 = MockFile.createTempFile("MRx\"('wJZ2)WF8dR", (String) null, (File) mockFile0);
      mockFile0.createNewFile();
      MockFile mockFile1 = new MockFile(file0, "m4rnKXG_`}=");
      MockFile mockFile2 = new MockFile(file0, "MRx\"('wJZ2)WF8dR");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      documentFactory0.createQName("", "//home/ubuntu/termite/projects/62_dom4j/gs7Y9>sGGgzu=(LTCj0|tH|8W0=:NDL0");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = defaultDocumentFactory0.createNamespace("//home/ubuntu/termite/projects/62_dom4j/gs7Y9>sGGgzu=(LTCj0|tH|8W0=:NDL0", "A?Iy]a");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory1);
      Namespace namespace1 = namespaceStack0.addNamespace(" attributes: ", "");
      namespaceStack0.getQName("//home/ubuntu/termite/projects/62_dom4j/gs7Y9>sGGgzu=(LTCj0|tH|8W0=:NDL0", "", "//home/ubuntu/termite/projects/62_dom4j/gs7Y9>sGGgzu=(LTCj0|tH|8W0=:NDL0");
      BaseElement baseElement0 = new BaseElement("", namespace0);
      DefaultDocument defaultDocument0 = new DefaultDocument(baseElement0, dOMDocumentType0);
      namespace1.setDocument(defaultDocument0);
      documentFactory0.createQName("", namespace1);
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory1.setXPathNamespaceURIs((Map<String, String>) null);
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory3.createCDATA("$VALUES");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      defaultDocumentFactory4.getQNames();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory4);
      StringReader stringReader0 = new StringReader("oI");
      try { 
        sAXReader0.read("org.dom4j.tree.AbstractEntity");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/org.dom4j.tree.AbstractEntity (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/org.dom4j.tree.AbstractEntity (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      QName qName0 = defaultDocumentFactory0.createQName("", "DRs");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      BeanElement beanElement0 = new BeanElement(qName0, defaultDocumentFactory2);
      Element element0 = beanElement0.addElement("TjelbUOz&nYot{6g");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("DRs", "", "");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      DocumentType documentType0 = dOMDocument0.getDocType();
      dOMDocumentType0.setDocument(dOMDocument0);
      DefaultDocument defaultDocument0 = new DefaultDocument(element0, documentType0);
      DOMNamespace dOMNamespace0 = new DOMNamespace(beanElement0, "", "http://xml.org/sax/features/namespaces");
      dOMNamespace0.setDocument(defaultDocument0);
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory3.createQName("", (Namespace) dOMNamespace0);
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory1.getXPathNamespaceURIs();
      defaultDocumentFactory2.setXPathNamespaceURIs((Map<String, String>) null);
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      defaultDocumentFactory5.createText("'UE");
      defaultDocumentFactory5.createCDATA("//$0?/D/R=$8V.YPLH<;40");
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      defaultDocumentFactory6.getQNames();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory7);
      StringReader stringReader0 = new StringReader("http://xml.org/sax/features/namespaces");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.startPrefixMapping("eON$.2S", "NrySQ'g>a5y%P");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl1.startPrefixMapping("c`OG=v!MU", "NrySQ'g>a5y%P");
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      xMLFilterImpl3.setParent(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl();
      xMLFilterImpl4.setContentHandler(xMLFilterImpl3);
      XMLFilterImpl xMLFilterImpl6 = new XMLFilterImpl();
      InputSource inputSource0 = new InputSource("-#");
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.setXMLReaderClassName("c`OG=v!MU");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class c`OG=v!MU not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)75;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byteArrayInputStream0.skip(3012L);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      bufferedInputStream0.available();
      sequenceInputStream1.read();
      sequenceInputStream1.read();
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.mark(0);
      sequenceInputStream2.skip((byte) (-31));
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(121);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
