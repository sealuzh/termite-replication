/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 04:36:12 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9378135424538416
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pushbackInputStream0.unread(12);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")", arrayList0, 3223);
      Properties properties0 = new Properties();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Attribute attribute0 = new Attribute(")", 12);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.995600999300808
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-114);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, (byte)43);
      discretize0.m_FindNumBins = true;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(".arff", arrayList1, protectedProperties1);
      Properties properties1 = new Properties();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      protectedProperties2.values();
      Attribute attribute1 = new Attribute("real", (String) null, protectedProperties2);
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      String string0 = discretize0.getBinRangesString(0);
      assertEquals("All", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0595049599945248
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("P?!", arrayList0, 82);
      Attribute attribute0 = new Attribute("95,95,1671,95,95,95,95", (-3497));
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      discretize0.convertInstance(binarySparseInstance0);
      binarySparseInstance1.copy();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      // Undeclared exception!
      try { 
        instances0.instance((-195225787));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -195225787
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.958481362836189
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-114);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#UY=I(%ER128");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, (byte)43);
      double[] doubleArray0 = new double[1];
      discretize0.m_FindNumBins = true;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(".arff", arrayList1, protectedProperties1);
      arrayList0.add(attribute0);
      doubleArray0[0] = (double) (byte)43;
      Properties properties1 = new Properties();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      protectedProperties2.values();
      Attribute attribute1 = new Attribute("real", (String) null, protectedProperties2);
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 3;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = 2;
      intArray0[5] = (int) (byte)2;
      intArray0[6] = (int) (byte)43;
      intArray0[7] = 4;
      intArray0[8] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, (-829));
      discretize0.convertInstance(binarySparseInstance0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.11165793659639
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "(");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Instances instances0 = new Instances(")", arrayList0, 3223);
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute(")", 3302);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "relational");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      discretize0.setBins((-1879048189));
      discretize0.setUseEqualFrequency(false);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1326);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.998009653680739
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("&F>F?jqHP#IPz^", arrayList0, 2966);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Attribute attribute0 = new Attribute(">=", 2966);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      arrayList0.add(attribute0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.985572789946291
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("&F>F?jqHP#IPz^", arrayList0, 2966);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Attribute attribute0 = new Attribute(">=", 2966);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      discretize0.convertInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        instances0.instance(86);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 86, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9796230921598497
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")", arrayList0, 3223);
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute(")", 3302);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      discretize0.convertInstance(binarySparseInstance0);
      discretize0.batchFinished();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      // Undeclared exception!
      try { 
        instances0.instance(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.985572789946291
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pushbackInputStream0.unread(3302);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")", arrayList0, 3223);
      Properties properties0 = new Properties();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Attribute attribute0 = new Attribute(")", 3302);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (-0.1);
      doubleArray0[4] = (double) 3302;
      doubleArray0[5] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(2.0, doubleArray0);
      sparseInstance0.isMissing(1909);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[3{DtcF");
      DenseInstance denseInstance0 = new DenseInstance(3, doubleArray0);
      discretize0.convertInstance(denseInstance0);
      // Undeclared exception!
      try { 
        instances0.instance(1909);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1909, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pushbackInputStream0.markSupported();
      pushbackInputStream0.unread(3302);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")", arrayList0, 3223);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList0.listIterator();
      Attribute attribute0 = new Attribute(")", 3302);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(4);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.088234058281052
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pushbackInputStream0.unread(3302);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")", arrayList0, 3223);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      Attribute attribute0 = new Attribute(")", 3302);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      Instance instance0 = null;
      discretize0.batchFinished();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      System.setCurrentTimeMillis(1);
      Range range0 = new Range("$Revision: 8964 $");
      discretize0.m_DiscretizeCols = range0;
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for range
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4837467836283142
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-114);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#rY=,(%ER12z");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, (byte)43);
      double[] doubleArray0 = new double[18];
      discretize0.m_FindNumBins = true;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(".arff", arrayList1, protectedProperties1);
      arrayList0.add(attribute0);
      doubleArray0[0] = (double) (byte)43;
      Properties properties1 = new Properties();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      protectedProperties2.values();
      Attribute attribute1 = new Attribute("|ZP-91VqL<<Y", (String) null, protectedProperties2);
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      discretize0.input((Instance) null);
      discretize0.isOutputFormatDefined();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      boolean boolean0 = discretize0.input((Instance) null);
      assertFalse(discretize0.isNewBatch());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      Discretize discretize0 = new Discretize("7_2x9'KHH{'Ir.a7C");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("&F>F?jqHP#IPz^", arrayList1, 37);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      Attribute attribute0 = new Attribute(">=", 2966);
      arrayList1.add(attribute0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at 7_2x9'KHH{'Ir.a7C
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.489359362578304
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream1);
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[7];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")", arrayList0, 3724);
      Properties properties0 = new Properties();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      protectedProperties0.values();
      Attribute attribute0 = new Attribute("-`^?z6OZQE@\"m", ")", protectedProperties0);
      arrayList0.add(attribute0);
      String[] stringArray0 = new String[0];
      Discretize.main(stringArray0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.input((Instance) null);
      assertFalse(discretize0.isNewBatch());
      
      discretize0.batchFinished();
      discretize0.getFindNumBins();
      discretize0.findNumBins(0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.06273110486666
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-114);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#UY=I(%ER128");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, (byte)43);
      double[] doubleArray0 = new double[1];
      discretize0.m_FindNumBins = true;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(".arff", arrayList1, protectedProperties1);
      arrayList0.add(attribute0);
      doubleArray0[0] = (double) (byte)43;
      Properties properties1 = new Properties();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      protectedProperties2.values();
      Attribute attribute1 = new Attribute("real", (String) null, protectedProperties2);
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      discretize0.getFindNumBins();
      discretize0.batchFinished();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.901706287448022
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-114);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#UY=I(%ER128");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, (byte)43);
      double[] doubleArray0 = new double[1];
      discretize0.m_FindNumBins = true;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(".arff", arrayList1, protectedProperties1);
      arrayList0.add(attribute0);
      doubleArray0[0] = (double) (byte)43;
      Properties properties1 = new Properties();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      protectedProperties2.values();
      Attribute attribute1 = new Attribute("real", (String) null, protectedProperties2);
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      discretize0.calculateCutPoints();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.065807706810478
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-114);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#UY=I(%ER128");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, (byte)43);
      double[] doubleArray0 = new double[1];
      discretize0.m_FindNumBins = false;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(".arff", arrayList1, protectedProperties1);
      arrayList0.add(attribute0);
      doubleArray0[0] = (double) (byte)43;
      Properties properties1 = new Properties();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      protectedProperties2.values();
      Attribute attribute1 = new Attribute("real", (String) null, protectedProperties2);
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0322545256542432
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances(")", arrayList0, 3223);
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute(")", 3302);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      discretize0.convertInstance(binarySparseInstance2);
      int int0 = (-1932735280);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1479));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1479
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.067648843266804
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")", arrayList0, 3223);
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute(")", 3302);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      String[] stringArray0 = new String[0];
      Filter.runFilter(discretize0, stringArray0);
      System.setCurrentTimeMillis(4);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0627299875428027
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("P?!", arrayList0, 82);
      Attribute attribute0 = new Attribute("95,95,1671,95,95,95,95", (-3497));
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      discretize0.convertInstance(binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = (BinarySparseInstance)binarySparseInstance2.copy();
      discretize0.output();
      binarySparseInstance1.copy();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      boolean boolean0 = discretize0.input(binarySparseInstance5);
      assertFalse(discretize0.isNewBatch());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6759144289822534
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-114);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#rY=,(%ER12z");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, (byte)43);
      double[] doubleArray0 = new double[1];
      discretize0.m_FindNumBins = true;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(".arff", arrayList1, protectedProperties1);
      arrayList0.add(attribute0);
      doubleArray0[0] = (double) (byte)43;
      Properties properties1 = new Properties();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      protectedProperties2.values();
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      Instance instance0 = null;
      discretize0.input((Instance) null);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '.arff' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.05236934770532
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")", arrayList0, 3223);
      Attribute attribute0 = new Attribute(")", 3302);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      discretize0.convertInstance(binarySparseInstance2);
      binarySparseInstance0.copy();
      int int0 = (-1932735280);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Filter.makeCopy((Filter) null);
      MultiFilter multiFilter2 = new MultiFilter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+0";
      stringArray0[1] = "-B";
      Filter.runFilter((Filter) null, stringArray0);
      Filter.makeCopy(multiFilter1);
      MultiFilter multiFilter3 = new MultiFilter();
      Discretize discretize0 = new Discretize("+0");
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -B option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2085716838811678
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DiscretizeCols = null;
      // Undeclared exception!
      try { 
        discretize0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2611883523040466
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SystemInUtil.addInputLine("gNFj99Ecg1C9o^v96}");
      Discretize discretize0 = new Discretize("-1452");
      discretize0.setUseEqualFrequency(true);
      discretize0.getBins();
      discretize0.findNumBinsTipText();
      discretize0.listOptions();
      discretize0.getOptions();
      discretize0.setOptions((String[]) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 10;
      intArray0[5] = 10;
      intArray0[6] = 10;
      discretize0.m_DefaultCols = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      intArray0[7] = 10;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10, intArray0, 10);
      binarySparseInstance0.toString(80);
      int int0 = (-35);
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis((-1484L));
      Discretize discretize0 = new Discretize("46AD7m");
      discretize0.m_UseEqualFrequency = true;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)127;
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.invertSelectionTipText();
      discretize0.setDesiredWeightOfInstancesPerInterval((-1484L));
      discretize0.getUseEqualFrequency();
      System.setCurrentTimeMillis((-1484L));
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      int int0 = (-408);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1.7976931348623157E308);
      doubleArray2[1] = 2519.4804445;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-3799.258623545362);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 4.634263658016137;
      doubleArray2[6] = 1.2;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-3799.258623545362);
      doubleArray3[1] = 1.7976931348623157E308;
      doubleArray3[2] = 0.0;
      discretize0.m_CutPoints = doubleArray0;
      doubleArray3[3] = 4.634263658016137;
      doubleArray3[5] = (-1.0);
      doubleArray0[3] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-4631));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4631
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("-B <num>");
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      boolean boolean0 = discretize0.getMakeBinary();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      Object object0 = new Object();
      Properties properties0 = new Properties();
      Object object1 = new Object();
      Object object2 = new Object();
      Properties properties1 = new Properties();
      Object object3 = new Object();
      properties1.put("I)[", object3);
      properties1.put(object0, object2);
      ProtectedProperties protectedProperties0 = null;
      try {
        protectedProperties0 = new ProtectedProperties(properties1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      AllFilter allFilter1 = new AllFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      MultiFilter multiFilter9 = new MultiFilter();
      MultiFilter multiFilter10 = new MultiFilter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)25;
      MultiFilter multiFilter11 = new MultiFilter();
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize("position");
      discretize0.setInvertSelection(true);
      discretize0.getOptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        protectedProperties1.put(object0, protectedProperties0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "46AD7m");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LX'qaj;");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 935;
      doubleArray0[1] = (double) 935;
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)66;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(935);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      Discretize discretize0 = new Discretize("7_2x9'KHH{'Ir.a7C");
      discretize0.getCapabilities();
      discretize0.m_MakeBinary = true;
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object4));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&FrM0Rk]Ee=%");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byteArray0[2] = (byte)63;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&FrM0Rk]Ee=%");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%M,[UeWw");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (double) (byte) (-107);
      doubleArray0[1] = (double) (byte)63;
      byte[] byteArray1 = new byte[13];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      byteArray1[1] = (byte) (-107);
      byteArray1[2] = (byte) (-107);
      byteArray1[4] = (byte)80;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray1 = new double[8][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4461755171495705
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      discretize0.getOptions();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'z';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = '4';
      char[] charArray1 = new char[1];
      charArray1[0] = '^';
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'z';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = '4';
      char[] charArray1 = new char[1];
      charArray1[0] = '^';
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = (MultiFilter)Filter.makeCopy(multiFilter0);
      multiFilter1.isStreamableFilter();
      Filter.makeCopy(multiFilter1);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2717.728713761057);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-2717.728713761057);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-2717.728713761057);
      doubleArray2[6] = (-2717.728713761057);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-2717.728713761057);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-2717.728713761057);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-2717.728713761057);
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (-2717.728713761057);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 1212.23;
      doubleArray7[3] = 0.0;
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, dataInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(dataInputStream0);
      pushbackInputStream1.available();
      pipedInputStream0.close();
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pushbackInputStream0, 3858);
      Object object3 = new Object();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Discretize discretize0 = new Discretize("'B2of2'");
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 3858;
      doubleArray1[1] = (double) 3858;
      doubleArray1[2] = (double) 3858;
      doubleArray1[3] = (double) 3858;
      doubleArray1[4] = (double) 3858;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 3858;
      doubleArray2[1] = (double) 3858;
      doubleArray2[2] = (double) 3858;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 3858;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 3858;
      doubleArray2[7] = (double) 0;
      doubleArray2[8] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 3858;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) 3858;
      doubleArray3[4] = (-1218.137213);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (-1218.137213);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (double) 3858;
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-1218.137213);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 3858;
      doubleArray5[3] = (-1218.137213);
      doubleArray5[4] = (double) 3858;
      doubleArray5[5] = (double) 0;
      doubleArray5[6] = (-1218.137213);
      doubleArray5[7] = (-1218.137213);
      doubleArray5[8] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 5.7;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 5.7;
      doubleArray8[1] = (double) 0;
      doubleArray8[2] = (double) 3858;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      doubleArray9[0] = 1.0;
      doubleArray9[1] = 0.0;
      doubleArray9[2] = Double.NaN;
      doubleArray9[3] = 0.0;
      doubleArray9[4] = 5.7;
      doubleArray9[5] = 5.7;
      doubleArray9[6] = (double) 3858;
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.847642989259894
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      discretize0.setUseBinNumbers(true);
      discretize0.getRevision();
      discretize0.m_UseBinNumbers = true;
      discretize0.listOptions();
      discretize0.setOutputFormat();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.globalInfo();
      discretize0.getCapabilities();
      discretize0.getInvertSelection();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      Discretize discretize0 = new Discretize("Q");
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "46AD7m");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LX'qaj;");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iAV%HbMvDl");
      SystemInUtil.addInputLine("archive");
      Discretize discretize0 = new Discretize("LX'qaj;");
      discretize0.setUseEqualFrequency(true);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(2688);
      sparseInstance1.replaceMissingValues(doubleArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[1] = "Ov";
      stringArray0[2] = "-F";
      stringArray0[3] = "1;z=1A#TUW_OTh=I]b";
      stringArray0[4] = "Ov";
      stringArray0[5] = "-R";
      stringArray0[6] = "-B <num>";
      stringArray0[7] = "HXyt3:t,:O8b^FHZhX2";
      stringArray0[8] = "HXyt3:t,:O8b^FHZhX2";
      Filter.runFilter(discretize0, stringArray0);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) sparseInstance1);
      sparseInstance3.dataset();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1879048189);
      String[] stringArray1 = new String[6];
      String string0 = "9DD[H)X\\u0^yk@FwmDA";
      stringArray1[1] = string0;
      stringArray1[2] = ".bsi";
      stringArray1[4] = ".arff";
      stringArray1[5] = ".arff";
      try { 
        discretize0.setOptions(stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.576534609090467
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "46AD7m");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LX'qaj;");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 935;
      Discretize discretize0 = new Discretize("46AD7m");
      Filter.makeCopy(discretize0);
      MultiFilter multiFilter0 = new MultiFilter();
      Discretize discretize1 = new Discretize("-B");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-V";
      stringArray0[1] = "";
      stringArray0[2] = "Jw[TeCN/aj9&]>";
      stringArray0[3] = "LX'qaj;";
      stringArray0[4] = "LX'qaj;";
      stringArray0[5] = "first-last";
      stringArray0[6] = "-B";
      stringArray0[7] = "Jw[TeCN/aj9&]>";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Jw[TeCN/aj9&]>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      Discretize discretize0 = new Discretize("7_2x9'KHH{'Ir.a7C");
      String[] stringArray0 = discretize0.getOptions();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize("-O");
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SystemInUtil.addInputLine("Byg!]/");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)80;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "46AD7m");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "46AD7m");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "46AD7m");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      int[] intArray0 = new int[1];
      SparseInstance sparseInstance2 = new SparseInstance(2688);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) sparseInstance1);
      sparseInstance1.replaceMissingValues(doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, intArray0, 100000);
      SparseInstance sparseInstance4 = new SparseInstance((Instance) sparseInstance1);
      sparseInstance0.mergeInstance(sparseInstance1);
      sparseInstance1.toString(62);
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      int[] intArray0 = new int[1];
      sparseInstance0.setMissing(14);
      SparseInstance sparseInstance2 = new SparseInstance(2688);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) sparseInstance2);
      sparseInstance1.replaceMissingValues(doubleArray0);
      sparseInstance2.toStringNoWeight();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1879048189), intArray0, (-1806));
      SparseInstance sparseInstance4 = new SparseInstance((Instance) sparseInstance1);
      sparseInstance4.dataset();
      discretize0.getCutPoints(82);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[7];
      intArray0[0] = 283;
      intArray0[1] = 2119;
      intArray0[2] = 7;
      intArray0[3] = 925;
      intArray0[4] = 0;
      intArray0[5] = 123;
      intArray0[6] = 0;
      discretize0.setAttributeIndicesArray(intArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize(" ");
      discretize0.getBinRangesString(73);
      discretize0.setAttributeIndices(" ");
      StringReader stringReader0 = new StringReader("voiK^>TD=.9xaaW");
      char[] charArray0 = new char[2];
      stringReader0.ready();
      stringReader0.mark(0);
      charArray0[0] = '=';
      charArray0[1] = 'Y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read();
      stringReader0.read(charBuffer0);
      CharBuffer charBuffer1 = CharBuffer.allocate(73);
      stringReader0.read(charBuffer1);
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // premature end of file, read Token[EOF], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Index out of range");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4A7");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LX'qaj;");
      double[] doubleArray0 = new double[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      doubleArray0[1] = (double) 935;
      Discretize discretize0 = new Discretize("+PM']`C{2q8Jb(P*w^7");
      double[][] doubleArray1 = new double[4][2];
      doubleArray1[2] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Discretize discretize0 = new Discretize("");
      discretize0.getOptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("B!", protectedProperties2);
      assertEquals(1, attribute0.ordering());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)");
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream1);
      pushbackInputStream0.unread(3302);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream2);
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream1);
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[6] = (byte) (-57);
      pipedInputStream1.skip(0L);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 77, (-1952257859));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip((-805L));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, pushbackInputStream1);
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(pipedInputStream0, pipedInputStream1);
      Discretize discretize0 = new Discretize("Xnm8%c@");
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2147483645);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      properties0.put(protectedProperties1, protectedProperties1);
      properties0.entrySet();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("SV=\"m\"M.j%}J&V;mui", protectedProperties1);
      boolean boolean0 = discretize0.getInvertSelection();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "46AD7m");
      Discretize discretize0 = new Discretize();
      discretize0.setBins(1024);
      discretize0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = discretize0.getBins();
      assertEquals(1024, int0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream1);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-39);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-36), 69);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, pipedInputStream1);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(pipedInputStream2, byteArrayInputStream0);
      sequenceInputStream2.markSupported();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream0);
      pushbackInputStream1.markSupported();
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pushbackInputStream0);
      pushbackInputStream2.available();
      pipedInputStream2.close();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(45);
      Discretize discretize0 = new Discretize("`JhOTwb -PW");
      discretize0.getInvertSelection();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream1);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pushbackInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, sequenceInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pushbackInputStream1, 10);
      pushbackInputStream2.markSupported();
      pushbackInputStream1.available();
      pipedInputStream0.close();
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.makeBinaryTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      discretize0.setOutputFormat();
      discretize0.getBinRangesString(86);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.setUseBinNumbers(false);
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      AllFilter allFilter1 = new AllFilter();
      MultiFilter multiFilter9 = new MultiFilter();
      MultiFilter multiFilter10 = new MultiFilter();
      MultiFilter multiFilter11 = new MultiFilter();
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.binsTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-318.0881369849447);
      doubleArray0[2] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      int[] intArray0 = new int[8];
      intArray0[1] = (-1879048189);
      intArray0[2] = (-1879048189);
      intArray0[3] = (-1879048189);
      intArray0[4] = (-1879048189);
      intArray0[5] = (-1879048189);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      MultiFilter multiFilter3 = new MultiFilter();
      MultiFilter multiFilter4 = new MultiFilter();
      MultiFilter multiFilter5 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter6 = new MultiFilter();
      MultiFilter multiFilter7 = new MultiFilter();
      AllFilter allFilter1 = new AllFilter();
      MultiFilter multiFilter8 = new MultiFilter();
      MultiFilter multiFilter9 = new MultiFilter();
      AllFilter allFilter2 = new AllFilter();
      AllFilter allFilter3 = new AllFilter();
      MultiFilter multiFilter10 = new MultiFilter();
      MultiFilter multiFilter11 = new MultiFilter();
      MultiFilter multiFilter12 = new MultiFilter();
      Discretize discretize0 = new Discretize("-B");
      discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Filter.makeCopy((Filter) null);
      MultiFilter multiFilter2 = new MultiFilter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+0";
      stringArray0[1] = "hc,uUHZ3Bo/{A";
      Filter.runFilter((Filter) null, stringArray0);
      Filter.makeCopy(multiFilter1);
      MultiFilter multiFilter3 = new MultiFilter();
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(79);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(79);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)6;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println();
      PrintWriter printWriter0 = mockPrintWriter1.append('6');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(pipedOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = 'p';
      mockPrintWriter2.print(charArray0);
      mockPrintWriter0.println((float) (byte)2);
      mockPrintWriter2.println((float) (byte)43);
      mockPrintWriter0.print(304.57F);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter("Ne8$bd");
      printWriter0.print(charArray0);
      Discretize discretize0 = new Discretize();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)6;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println();
      PrintWriter printWriter0 = mockPrintWriter1.append('6');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(pipedOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = 'p';
      mockPrintWriter2.print(charArray0);
      mockPrintWriter2.println((float) (byte)43);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter("Ne8$bd");
      printWriter0.print(charArray0);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      Object object0 = new Object();
      Properties properties2 = new Properties();
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        protectedProperties0.put(object1, properties0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = '&';
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Y(.^|Rj5tP=", arrayList0, 1911);
      Instances instances1 = new Instances(instances0, '&');
      Instances instances2 = Instances.mergeInstances(instances1, instances1);
      Instances instances3 = Instances.mergeInstances(instances2, instances2);
      instances2.clear();
      Instances.mergeInstances(instances2, instances2);
      Instances.mergeInstances(instances1, instances1);
      instances2.enumerateInstances();
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat(instances3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Filter.makeCopy((Filter) null);
      MultiFilter multiFilter2 = new MultiFilter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+0";
      stringArray0[1] = "*7I4GX";
      Filter.runFilter((Filter) null, stringArray0);
      Filter.makeCopy(multiFilter1);
      MultiFilter multiFilter3 = new MultiFilter();
      Discretize discretize0 = new Discretize("+0");
      Discretize discretize1 = new Discretize("+0");
      // Undeclared exception!
      try { 
        discretize1.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Object object0 = new Object();
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = '&';
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Y(.^|Rj5tP=", arrayList0, 1911);
      Instances instances1 = new Instances(".bsi", arrayList0, 14);
      Instances instances2 = Instances.mergeInstances(instances1, instances1);
      Instances instances3 = Instances.mergeInstances(instances0, instances0);
      Instances instances4 = Instances.mergeInstances(instances3, instances3);
      instances3.clear();
      Instances.mergeInstances(instances2, instances2);
      Instances.mergeInstances(instances1, instances1);
      instances2.enumerateInstances();
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat(instances4);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.823242702131751
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1.7976931348623157E308);
      doubleArray2[1] = 2519.4804445;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-3799.258623545362);
      doubleArray2[4] = (-64.04);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "H2d1=SI^%q8=";
      stringArray0[1] = "rPF8BPj\"Rn\"pmZQ(Dz?";
      Filter.runFilter(discretize0, stringArray0);
      doubleArray2[5] = 4.634263658016137;
      doubleArray2[6] = 1.2;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, bufferedInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(bufferedInputStream1, dataInputStream1);
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualFrequencyBinning((-2297));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }
}
