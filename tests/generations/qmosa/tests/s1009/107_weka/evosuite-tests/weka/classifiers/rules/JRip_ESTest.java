/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 04:37:15 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.BestFirst;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 662);
      SparseInstance sparseInstance0 = new SparseInstance(662);
      arrayList0.listIterator();
      instances0.add((Instance) sparseInstance0);
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale locale1 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(662);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale0.getDisplayScript(locale1);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, locale_FilteringMode1);
      locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      locale1.getDisplayVariant(locale0);
      ArrayList<Locale> arrayList5 = new ArrayList<Locale>();
      linkedList1.add((Locale.LanguageRange) null);
      ArrayList<Locale.LanguageRange> arrayList6 = new ArrayList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      locale1.getDisplayLanguage(locale0);
      Attribute attribute0 = new Attribute("\u610F\u5927\u5229\u6587", "\u610F\u5927\u5229\u6587", 1);
      arrayList4.containsAll(arrayList6);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip0.seedTipText();
      jRip_NumericAntd0.splitData(instances0, 0, 1);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      Instances instances0 = new Instances("", arrayList0, 662);
      SparseInstance sparseInstance0 = new SparseInstance(662);
      arrayList0.listIterator();
      instances0.add((Instance) sparseInstance0);
      Locale locale0 = Locale.FRENCH;
      locale0.getScript();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.getCapabilities();
      Attribute attribute0 = new Attribute(".bsi", (List<String>) null);
      attribute0.equalsMsg(".bsi");
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute(".bsi", (List<String>) null);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle string attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[2] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[5] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[7] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.listOptions();
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[4] = (byte)0;
      Instances instances0 = new Instances("", arrayList0, 662);
      SparseInstance sparseInstance0 = new SparseInstance(662);
      arrayList0.listIterator();
      instances0.add((Instance) sparseInstance0);
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      
      Attribute attribute0 = new Attribute("", "", 662);
      Attribute attribute1 = new Attribute("SWRMZr); ^Yxi", (List<String>) null, 0);
      Attribute.typeToString(2);
      Attribute attribute2 = new Attribute(".bsi", 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.deleteAttributeType(2);
      Attribute attribute3 = new Attribute("string", (List<String>) null);
      Attribute.typeToString(0);
      attribute3.setStringValue("@attribute");
      attribute2.setWeight(2);
      Attribute.typeToString(2);
      attribute1.setWeight(0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.splitData(instances0, 1, 3);
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 1, 1);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1, instancesArray0.length);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.689067872995674
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_':K4\"9k{", arrayList0, 212);
      Attribute attribute0 = new Attribute("", (List<String>) null);
      Attribute attribute1 = new Attribute("_':K4\"9k{", (List<String>) null, 1);
      Attribute.typeToString(attribute1);
      Attribute attribute2 = new Attribute("@end", 2);
      Attribute attribute3 = attribute0.copy("date");
      Attribute attribute4 = new Attribute("relational");
      Attribute attribute5 = attribute3.copy("numeric");
      attribute4.addStringValue(attribute5, 1);
      attribute4.setWeight(1229.1088959561773);
      attribute1.enumerateValues();
      attribute0.indexOfValue("s$IQE0e3D_qSz");
      attribute5.setWeight((byte)4);
      attribute2.setWeight(2);
      SparseInstance sparseInstance0 = new SparseInstance(44);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance3);
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance2);
      SparseInstance sparseInstance5 = new SparseInstance((Instance) sparseInstance1);
      SparseInstance sparseInstance6 = new SparseInstance((SparseInstance) binarySparseInstance0);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute2);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance2);
      assertFalse(jRip1.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip1.getUsePruning());
      assertFalse(boolean0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "2001";
      stringArray0[1] = "integer";
      stringArray0[2] = "relational";
      stringArray0[3] = "numeric";
      stringArray0[4] = "%";
      stringArray0[5] = "";
      stringArray0[6] = "@attribute";
      stringArray0[7] = "@attribute";
      stringArray0[8] = "string";
      jRip0.setOptions(stringArray0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "course");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yes");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EW#3\"3s~");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip jRip0 = new JRip();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      JRip jRip1 = new JRip();
      String string0 = "measureNumRules";
      // Undeclared exception!
      try { 
        jRip1.getMeasure("measureNumRules");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "";
      stringArray0[2] = "@";
      stringArray0[3] = "";
      stringArray0[4] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of thM file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different o -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[5] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of thM file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different o -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[6] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of thM file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different o -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      jRip0.setDebug(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        jRip0.rulesetForOneClass((-1.0), (Instances) null, (-1.0), (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y0jEA\"rM");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = new Instances("u 7 D ", arrayList0, 68);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jbe");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("4EnhL6-Qb#F^", (List<String>) null);
      Attribute attribute1 = new Attribute("date", (List<String>) null, 0);
      Attribute attribute2 = new Attribute("date", 1);
      Attribute attribute3 = attribute2.copy("integer");
      attribute3.setWeight(1);
      attribute3.setWeight((-1637.33));
      Attribute.typeToString((-1157));
      System.setCurrentTimeMillis(1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1157);
      doubleArray0[1] = 212.6330210159219;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7576378583071737
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[4] = (byte)0;
      Instances instances0 = new Instances("", arrayList0, 662);
      SparseInstance sparseInstance0 = new SparseInstance(662);
      arrayList0.listIterator();
      instances0.add((Instance) sparseInstance0);
      jRip0.getRevision();
      Attribute attribute0 = new Attribute("", "", 662);
      Attribute attribute1 = new Attribute("SWRMZr); ^Yxi", (List<String>) null, (-2146197531));
      Attribute.typeToString(2);
      Attribute attribute2 = new Attribute(".bsi", 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.deleteAttributeType(2);
      Attribute attribute3 = new Attribute("string", (List<String>) null);
      Attribute.typeToString(0);
      attribute3.setStringValue("@attribute");
      attribute2.setWeight(2);
      Attribute.typeToString(2);
      attribute1.setWeight(0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 1, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 662);
      Locale.getISOLanguages();
      SparseInstance sparseInstance0 = new SparseInstance(662);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("@relation", (List<String>) null);
      Attribute attribute1 = new Attribute("S^OrwU_", (List<String>) null, 1);
      Attribute attribute2 = new Attribute((String) null, 1);
      attribute1.copy("@end");
      attribute2.setWeight((-2634.2160078224583));
      attribute1.setWeight(2307.475743807);
      Attribute.typeToString(1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 3, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 662);
      SparseInstance sparseInstance0 = new SparseInstance(662);
      arrayList0.listIterator();
      instances0.add((Instance) sparseInstance0);
      Locale locale0 = Locale.CANADA_FRENCH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      arrayList1.add((Locale) null);
      List<Locale> list0 = new LinkedList<Locale>();
      linkedList0.removeAll(list0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      Locale locale1 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(662);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, locale_FilteringMode1);
      locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList4, (Collection<String>) linkedList2);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList3, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      linkedList4.replaceAll(unaryOperator0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList4, (Collection<String>) arrayList3);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-1337.39));
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("tZ)5_LwV94Ipb5Y{", arrayList0, 662);
      arrayList0.listIterator();
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("The defaul DL  ", arrayList2);
      arrayList0.add(attribute0);
      Locale.setDefault(locale0);
      arrayList1.add(locale0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale locale1 = Locale.ITALY;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>(662);
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) set0, locale_FilteringMode1);
      locale1.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList4, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList5 = new ArrayList<Locale.LanguageRange>();
      locale0.getDisplayVariant(locale1);
      ArrayList<Locale> arrayList6 = new ArrayList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList7 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList5, (Collection<Locale>) list1, locale_FilteringMode3);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4196189862824298
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      jRip0.globalInfo();
      Utils.log2 = Double.NaN;
      jRip0.setDebug(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip0.getOptions();
      jRip0.listOptions();
      jRip0.toString();
      jRip0.foldsTipText();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 4.9E-324;
      doubleArray0[2] = Double.NaN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SparseInstance sparseInstance0 = new SparseInstance(4.9E-324, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("tZ)5_LwV94Ipb5Y{", arrayList0, 662);
      arrayList0.listIterator();
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      Locale.setDefault(locale0);
      arrayList1.add(locale0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale locale1 = Locale.ITALY;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(662);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2, locale_FilteringMode2);
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList3, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list2);
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set1, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list3);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-1337.39));
      jRip_RipperRule0.grow(instances0);
      assertEquals((-1337.39), jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setFolds((-2115));
      jRip0.getFolds();
      jRip0.getOptimizations();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      assertEquals(3, nGramTokenizer0.getNGramMaxSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 662);
      SparseInstance sparseInstance0 = new SparseInstance(662);
      arrayList0.listIterator();
      instances0.add((Instance) sparseInstance0);
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      Locale locale1 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(662);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, locale_FilteringMode1);
      locale0.getUnicodeLocaleKeys();
      Locale locale2 = Locale.ENGLISH;
      locale0.getDisplayVariant(locale1);
      ArrayList<Locale> arrayList4 = new ArrayList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList5 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList5, (Collection<Locale>) list0, locale_FilteringMode2);
      Attribute attribute0 = new Attribute("", list2);
      arrayList2.containsAll(arrayList3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, (-1728.79), 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.setMinNo(0.0);
      jRip0.getDebug();
      AbstractClassifier.makeCopies(jRip0, 2773);
      Attribute attribute0 = new Attribute("nY4ji4");
      int[] intArray0 = new int[7];
      intArray0[5] = 6;
      intArray0[1] = 4;
      intArray0[2] = 2;
      intArray0[3] = 13;
      intArray0[4] = 4;
      intArray0[5] = 0;
      intArray0[6] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), intArray0, 1);
      binarySparseInstance0.dataset();
      jRip0.getFolds();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, (-1337.39), 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3469992135645263
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.KOREAN;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getDebug());
      assertEquals(11, stringArray0.length);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed((-3));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4577.41851903444;
      doubleArray0[1] = (-2254.821);
      doubleArray0[2] = 544.979355;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2254.821);
      doubleArray0[5] = (-201.1);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 544.979355;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2254.821), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2254.821), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance1);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance0);
      long long0 = jRip0.getSeed();
      assertEquals((-3L), long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      protectedProperties2.elements();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties8);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties4);
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/E cD*K&iEnOg_I^!";
      stringArray0[1] = "|$2[|FNG_jPb$uc";
      stringArray0[2] = "-P";
      stringArray0[3] = "c-r";
      stringArray0[4] = "";
      stringArray0[5] = "K]f!iO";
      stringArray0[6] = "measureKernelEvaluations";
      jRip0.setOptions(stringArray0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("|$2[|FNG_jPb$uc", arrayList1, protectedProperties9);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BallTree ballTree0 = new BallTree((Instances) null);
      try { 
        ballTree0.nearestNeighbour((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.BallTree", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.813782155210461
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      String[] stringArray0 = new String[9];
      jRip0.setUsePruning(false);
      stringArray0[0] = "@";
      stringArray0[2] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[3] = stringArray0[1];
      stringArray0[4] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[5] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[6] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      jRip0.getOptions();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("u 7 = ", arrayList0, 68);
      Locale.getISOLanguages();
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>(68);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode1);
      locale0.getUnicodeLocaleKeys();
      locale0.getUnicodeLocaleAttributes();
      Locale locale1 = Locale.ITALIAN;
      Locale locale2 = Locale.ENGLISH;
      Locale locale3 = Locale.GERMAN;
      locale0.getDisplayVariant(locale3);
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      JRip jRip1 = new JRip();
      try { 
        jRip1.rulesetForOneClass((-1477.07994), (Instances) null, 9.0, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("Should never happen!");
      Attribute attribute0 = new Attribute("One rule found after pruning:", arrayList0);
      attribute0.copy();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Attribute attribute1 = attribute0.copy("One rule found after pruning:");
      attribute0.equals(attribute1);
      jRip_NominalAntd0.accuRate = (double) 0;
      jRip_NominalAntd0.getRevision();
      jRip0.setFolds((-273));
      jRip_NominalAntd0.copy();
      jRip0.getFolds();
      jRip0.getMinNo();
      jRip_NominalAntd0.getRevision();
      jRip0.globalInfo();
      Random.setNextRandom((byte)89);
      int int0 = jRip0.getOptimizations();
      assertEquals((-273), jRip0.getFolds());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1894.105807774);
      doubleArray0[1] = (-1.0383630902174732);
      doubleArray0[2] = (-1.0383630902174732);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1894.105807774), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1, doubleArray0);
      Attribute attribute0 = new Attribute("implementation.  However, we didn't consider memory consumption ", (List<String>) null);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-3.0), doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((-1.0383630902174732), doubleArray0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance4);
      int[] intArray0 = new int[3];
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(0.0, intArray0, (-27));
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance7);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance5);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((SparseInstance) binarySparseInstance8);
      BinarySparseInstance binarySparseInstance10 = new BinarySparseInstance((SparseInstance) binarySparseInstance8);
      BinarySparseInstance binarySparseInstance11 = new BinarySparseInstance((SparseInstance) binarySparseInstance10);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance7);
      assertTrue(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      SparseInstance sparseInstance2 = new SparseInstance(5);
      SparseInstance sparseInstance3 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance12 = new BinarySparseInstance(1);
      SparseInstance sparseInstance4 = new SparseInstance(1);
      System.setCurrentTimeMillis(1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals("8118", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Ross QuinGlan", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getMaxInfoGain();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.debugTipText();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = null;
      try {
        protectedProperties0 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Qr&6#\"Z)Ve'");
      attribute0.addStringValue("Qr&6#\"Z)Ve'");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttr();
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip0.enumerateMeasures();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "date";
      stringArray0[3] = "real";
      stringArray0[4] = "string";
      stringArray0[5] = "relational";
      stringArray0[6] = "numeric";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 2;
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 3;
      intArray0[7] = (-2857);
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0, intArray0, 2);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertTrue(boolean0);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9512667872451708
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1894.105807774);
      doubleArray0[1] = (-1894.105807774);
      doubleArray0[2] = (-1.0383630902174732);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1894.105807774), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1, doubleArray0);
      Attribute attribute0 = new Attribute("implementation.  However, we didn't consider memory consumption ", (List<String>) null);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-515.34594975), doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((-1894.105807774), doubleArray0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance4);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 4250;
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(1358.5933533685643, intArray0, 1);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance7);
      JRip jRip1 = new JRip();
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((Instance) binarySparseInstance1);
      SparseInstance sparseInstance1 = new SparseInstance(1);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((SparseInstance) binarySparseInstance5);
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd1.covers(binarySparseInstance0);
      jRip_NumericAntd1.covers(binarySparseInstance3);
      jRip_NumericAntd1.getRevision();
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@";
      stringArray0[1] = "";
      stringArray0[2] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("lGtV7^~:k", arrayList0, 662);
      SparseInstance sparseInstance0 = new SparseInstance(662);
      arrayList0.listIterator();
      instances0.add((Instance) sparseInstance0);
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      arrayList1.add(locale0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1);
      linkedList0.spliterator();
      linkedList0.removeAll(list0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      Locale locale1 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(662);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, locale_FilteringMode1);
      locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList4, (Collection<String>) linkedList2);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList3, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList4.stream();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList4, (Collection<String>) arrayList3);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getUsePruning();
      jRip_RipperRule0.setConsequent((-1725.735557498266));
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(" is ot Sour4abe", arrayList0, 662);
      arrayList0.listIterator();
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      linkedList0.addAll((Collection<? extends Locale.LanguageRange>) arrayList2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      Locale locale1 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>(662);
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) set0, locale_FilteringMode1);
      locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList4, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList5 = new ArrayList<Locale.LanguageRange>();
      locale1.getDisplayVariant(locale0);
      linkedList0.add((Locale.LanguageRange) null);
      linkedList0.addLast((Locale.LanguageRange) null);
      ArrayList<Locale.LanguageRange> arrayList6 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList6, (Collection<Locale>) list1, locale_FilteringMode2);
      locale0.getDisplayLanguage(locale1);
      arrayList0.trimToSize();
      try { 
        jRip0.rulesetForOneClass(0.3, instances0, 0.3, 0.3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1894.105807774);
      doubleArray0[1] = (-1.0383630902174732);
      doubleArray0[2] = (-1.0383630902174732);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      CoverTree coverTree0 = new CoverTree();
      long long0 = jRip0.getSeed();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, long0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String string0 = "";
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      protectedProperties4.elements();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties11);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, ClassOrder> function0 = (Function<Object, ClassOrder>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, ClassOrder> function1 = unaryOperator0.andThen((Function<? super Object, ? extends ClassOrder>) function0);
      Attribute attribute0 = new Attribute("", 1143);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      properties1.put(object0, protectedProperties9);
      protectedProperties7.computeIfAbsent("", function1);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties8);
      Properties properties2 = new Properties();
      protectedProperties11.entrySet();
      Properties properties3 = new Properties(protectedProperties4);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties16 = null;
      try {
        protectedProperties16 = new ProtectedProperties(properties1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^JZ}6M$EM!");
      Instances instances0 = new Instances("^JZ}6M$EM!", arrayList0, 664);
      SparseInstance sparseInstance0 = new SparseInstance(664);
      instances0.iterator();
      arrayList0.listIterator();
      instances0.add((Instance) sparseInstance0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip0.getDebug();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      String[] stringArray0 = new String[0];
      AbstractClassifier.runClassifier(adaBoostM1_0, stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-13);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\nReplace: ");
      arrayList0.parallelStream();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^JZ}6M$EM!");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(0);
      jRip0.minNoTipText();
      Attribute attribute0 = new Attribute("The minimum total weight of the instances in a rule.", (-171));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getSplitPoint();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4196189862824298
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string0);
      
      String string1 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string1);
      
      jRip0.minNoTipText();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      Attribute attribute0 = new Attribute("Whether pruning is performed.", (-683));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccu();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string2 = jRip_NumericAntd0.toString();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("Whether pruning is performed. <= NaN", string2);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      Attribute attribute0 = new Attribute("8118");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAccuRate();
      RuleStats ruleStats0 = new RuleStats();
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", protectedProperties1);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[5] = 0;
      intArray0[0] = 3;
      intArray0[4] = 2;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      StringReader stringReader0 = new StringReader("");
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(" = ", string0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1894.105807774);
      doubleArray0[1] = (-1894.105807774);
      doubleArray0[2] = (-1.0383630902174732);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1894.105807774), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1, doubleArray0);
      Attribute attribute0 = new Attribute("implementation.  However, we didn't consider memory consumption ", (List<String>) null);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-515.34594975), doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((-1894.105807774), doubleArray0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance2);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(1, intArray0, (-1255));
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance4);
      SparseInstance sparseInstance1 = new SparseInstance(3);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance(3219);
      SparseInstance sparseInstance3 = new SparseInstance((SparseInstance) binarySparseInstance9);
      SparseInstance sparseInstance4 = new SparseInstance((Instance) binarySparseInstance4);
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip2.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance1);
      assertTrue(boolean0);
      
      String string0 = jRip_NominalAntd0.toString();
      assertEquals("implementation.  However, we didn't consider memory consumption  = ", string0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip2.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip2.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip2.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip2.getUsePruning());
      assertEquals(2, jRip2.getOptimizations());
      assertEquals(3, jRip2.getFolds());
      assertEquals(2.0, jRip2.getMinNo(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8550964054089625
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("?L^TI<1P0H P)._x", arrayList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      arrayList0.parallelStream();
      stringArray0[1] = "date";
      stringArray0[2] = "@attribute";
      arrayList0.add("date");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getCover();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1894.105807774);
      doubleArray0[1] = (-1.0383630902174732);
      doubleArray0[2] = (-1894.105807774);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1894.105807774), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      Attribute attribute0 = new Attribute("implemen%ation. However, we didn't con ider memry cohsumgtion ");
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0);
      binarySparseInstance2.toString((-1640));
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-3.0), doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((-1.0383630902174732), doubleArray0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance4);
      int[] intArray0 = new int[3];
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((-42.967405413220575), intArray0, 3);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance7);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance5);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((-1894.105807774), intArray0, 1);
      BinarySparseInstance binarySparseInstance10 = new BinarySparseInstance((SparseInstance) binarySparseInstance8);
      BinarySparseInstance binarySparseInstance11 = new BinarySparseInstance((SparseInstance) binarySparseInstance10);
      binarySparseInstance3.copy();
      SparseInstance sparseInstance2 = new SparseInstance(1);
      SparseInstance sparseInstance3 = new SparseInstance((SparseInstance) binarySparseInstance9);
      SparseInstance sparseInstance4 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance5 = new SparseInstance(1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      
      SparseInstance sparseInstance6 = new SparseInstance((SparseInstance) binarySparseInstance9);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => implemen%ation. However, we didn't con ider memry cohsumgtion =", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      double double0 = jRip_RipperRule0.getConsequent();
      assertEquals((-1.0), double0, 0.01);
      
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule1.hasAntds();
      assertFalse(boolean0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[7];
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1894.105807774);
      doubleArray0[1] = (-1.0383630902174732);
      doubleArray0[2] = (-1894.105807774);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1894.105807774), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1, doubleArray0);
      Attribute attribute0 = new Attribute("implementation.  However, we didn't consider memory consumption ", (List<String>) null);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0);
      binarySparseInstance2.toString(1911);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-3.0), doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((-1.0383630902174732), doubleArray0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance4);
      int[] intArray0 = new int[3];
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(0.0, intArray0, 3);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance7);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance5);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((-1894.105807774), intArray0, 1);
      BinarySparseInstance binarySparseInstance10 = new BinarySparseInstance((SparseInstance) binarySparseInstance8);
      BinarySparseInstance binarySparseInstance11 = new BinarySparseInstance((SparseInstance) binarySparseInstance10);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance8);
      binarySparseInstance3.copy();
      SparseInstance sparseInstance3 = new SparseInstance(1);
      SparseInstance sparseInstance4 = new SparseInstance((SparseInstance) binarySparseInstance9);
      SparseInstance sparseInstance5 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance6 = new SparseInstance((Instance) sparseInstance4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance7);
      assertTrue(boolean0);
      
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      int[] intArray0 = new int[8];
      Utils.log2 = (double) 5;
      intArray0[0] = 5;
      intArray0[5] = 4;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 2;
      intArray0[7] = 5;
      doubleArray0[3] = (double) 5;
      intArray0[6] = 1;
      doubleArray0[6] = (double) 5;
      jRip0.usePruningTipText();
      MockRandom mockRandom0 = new MockRandom();
      DecisionTable decisionTable1 = new DecisionTable();
      BestFirst bestFirst0 = (BestFirst)decisionTable1.m_search;
      System.setCurrentTimeMillis(5);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      JRip jRip0 = new JRip();
      jRip0.checkErrorRateTipText();
      intArray0[5] = 4;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 5;
      doubleArray0[1] = (double) 1;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = (double) 5;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 4;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RuleStats.stratify((Instances) null, 159, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String[] stringArray0 = new String[9];
      jRip0.setFolds(4);
      jRip_RipperRule0.setConsequent(-0.0);
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[3] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[4] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[5] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[6] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("u 7 = ", arrayList0, 68);
      Instances instances1 = new Instances("", arrayList0, 68);
      Locale.getISOLanguages();
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>(68);
      SystemInUtil.addInputLine(".bsi");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode1);
      locale0.getUnicodeLocaleKeys();
      locale0.getUnicodeLocaleAttributes();
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set1);
      Locale locale1 = new Locale(".\"`[5( |<~r[3HZ>|UQ");
      Attribute attribute0 = new Attribute("-j.>%>-\u0000X?zi(}@w-%", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[8];
      intArray0[0] = 2144249485;
      intArray0[1] = 5;
      intArray0[2] = (-5);
      intArray0[3] = (-1);
      intArray0[4] = (-1797);
      intArray0[5] = 81;
      intArray0[6] = (-919);
      intArray0[7] = (-1413);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3319.9306163717, intArray0, (-2774));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = stringArray0[1];
      stringArray0[4] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[5] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      CoverTree coverTree0 = new CoverTree();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      bayesNet0.setUseADTree(true);
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("tZ)5_LwV94Ipb5Y{", arrayList0, 662);
      arrayList0.listIterator();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("The defaul DL  ", arrayList2);
      arrayList0.add(attribute0);
      Locale.setDefault(locale0);
      arrayList1.add(locale0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale locale1 = Locale.ITALY;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>(662);
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) set0, locale_FilteringMode1);
      locale1.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList4, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList5 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList6 = new ArrayList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList7 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList5, (Collection<Locale>) list1, locale_FilteringMode3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 5.55555, 2951.177752775356);
      jRip_NumericAntd0.splitData(instances0, 1, 2653.4518562505);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("u 7 = ", arrayList0, 68);
      Locale.getISOLanguages();
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>(68);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode1);
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      locale0.getUnicodeLocaleAttributes();
      Locale locale1 = Locale.ITALIAN;
      Locale locale2 = Locale.ENGLISH;
      Locale locale3 = Locale.GERMAN;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      locale0.getDisplayVariant(locale3);
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) arrayList2, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set1, locale_FilteringMode3);
      Attribute attribute0 = new Attribute("jm5x_NBBp$i", list0);
      arrayList1.containsAll(arrayList2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 3, (-391.59948007426));
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1894.105807774);
      doubleArray0[1] = (-1894.105807774);
      doubleArray0[2] = (-1.0383630902174732);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1894.105807774), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1, doubleArray0);
      Attribute attribute0 = new Attribute("implementation.  However, we didn't consider memory consumption ", (List<String>) null);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-515.34594975), doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((-1894.105807774), doubleArray0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance4);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 4250;
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(1358.5933533685643, intArray0, 1);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance7);
      JRip jRip1 = new JRip();
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      SparseInstance sparseInstance1 = new SparseInstance(1);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((SparseInstance) binarySparseInstance5);
      JRip jRip2 = new JRip();
      jRip2.setDebug(false);
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance3);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip2.getFolds());
      assertTrue(boolean0);
      assertTrue(jRip2.getCheckErrorRate());
      assertEquals(1L, jRip2.getSeed());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip2.getUsePruning());
      assertEquals(2, jRip2.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(jRip2.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip2.getMinNo(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_':K4\"9k{", arrayList0, 212);
      Attribute attribute0 = new Attribute("", (List<String>) null);
      Attribute attribute1 = new Attribute("_':K4\"9k{", (List<String>) null, 1);
      Attribute.typeToString(attribute1);
      Attribute attribute2 = new Attribute("@end", 2);
      Attribute attribute3 = attribute0.copy("date");
      Attribute attribute4 = new Attribute("relational");
      Attribute attribute5 = attribute3.copy("numeric");
      attribute2.setWeight((-1715.5129669228393));
      String[] stringArray0 = new String[17];
      stringArray0[0] = "relational";
      stringArray0[1] = "string";
      Attribute.typeToString(attribute3);
      stringArray0[2] = "real";
      stringArray0[3] = "integer";
      stringArray0[4] = "@data";
      Attribute.main(stringArray0);
      attribute4.addStringValue(attribute5, 1);
      attribute4.setWeight(1229.1088959561773);
      attribute1.enumerateValues();
      attribute0.indexOfValue("s$IQE0e3D_qSz");
      attribute5.setWeight((byte)4);
      attribute2.setWeight(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute.typeToString(2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 1, 0);
      ClassOrder classOrder0 = new ClassOrder();
      assertEquals(0, ClassOrder.FREQ_ASCEND);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.minNoTipText();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[5] = 4;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      doubleArray0[1] = (double) 2;
      intArray0[7] = 4;
      doubleArray0[3] = (double) 5;
      doubleArray0[1] = (double) 1;
      doubleArray0[5] = (double) 10;
      doubleArray0[6] = (double) 5;
      doubleArray0[7] = (double) 2;
      MockRandom mockRandom0 = new MockRandom();
      DecisionTable decisionTable1 = new DecisionTable();
      BestFirst bestFirst0 = (BestFirst)decisionTable1.m_search;
      // Undeclared exception!
      try { 
        RuleStats.stratify((Instances) null, (-1596), mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "course");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "course");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "course");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " p: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JRip jRip0 = new JRip();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      JRip jRip1 = new JRip();
      String string0 = "Number of iterations to be performed.";
      // Undeclared exception!
      try { 
        jRip1.getMeasure("Number of iterations to be performed.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of iterations to be performed. not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 662);
      arrayList0.listIterator();
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale locale1 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(662);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale0.getDisplayScript(locale1);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, locale_FilteringMode1);
      locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      locale1.getDisplayVariant(locale0);
      ArrayList<Locale> arrayList5 = new ArrayList<Locale>();
      linkedList1.add((Locale.LanguageRange) null);
      ArrayList<Locale.LanguageRange> arrayList6 = new ArrayList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      locale1.getDisplayLanguage(locale0);
      Attribute attribute0 = new Attribute(".bsi", "\u610F\u5927\u5229\u6587", 662);
      arrayList2.containsAll(list1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 1602.99395692849, 4);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1894.105807774);
      doubleArray0[1] = (-1.0383630902174732);
      doubleArray0[2] = (-1894.105807774);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1894.105807774), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1, doubleArray0);
      Attribute attribute0 = new Attribute("implementation.  However, we didn't consider memory consumption ", (List<String>) null);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0);
      binarySparseInstance2.toString(1911);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-3.0), doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((-1.0383630902174732), doubleArray0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance4);
      int[] intArray0 = new int[3];
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(0.0, intArray0, 3);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance7);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance5);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((-1894.105807774), intArray0, 1);
      BinarySparseInstance binarySparseInstance10 = new BinarySparseInstance((SparseInstance) binarySparseInstance8);
      BinarySparseInstance binarySparseInstance11 = new BinarySparseInstance((SparseInstance) binarySparseInstance10);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance8);
      binarySparseInstance3.copy();
      SparseInstance sparseInstance3 = new SparseInstance((SparseInstance) binarySparseInstance9);
      SparseInstance sparseInstance4 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance5 = new SparseInstance((Instance) sparseInstance3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance7);
      assertTrue(boolean0);
      
      String string0 = jRip_NumericAntd0.toString();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals("implementation.  However, we didn't consider memory consumption  <= NaN", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      protectedProperties1.elements();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      protectedProperties0.computeIfAbsent(protectedProperties3, function0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties0);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties5);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!^dn>-yf;iSi9ND-W+";
      stringArray0[1] = "!^dn>-yf;iSi9ND-W+";
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      int[] intArray0 = new int[8];
      Utils.log2 = (double) 5;
      intArray0[0] = 5;
      intArray0[5] = 4;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 2;
      intArray0[7] = 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[1] = (double) 1;
      doubleArray0[6] = (double) 5;
      MockRandom mockRandom0 = new MockRandom();
      DecisionTable decisionTable1 = new DecisionTable();
      jRip0.getFolds();
      BestFirst bestFirst0 = (BestFirst)decisionTable1.m_search;
      System.setCurrentTimeMillis(5);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      int[] intArray0 = new int[8];
      Utils.log2 = (double) 5;
      intArray0[0] = 5;
      intArray0[5] = 4;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 2;
      intArray0[7] = 5;
      doubleArray0[3] = (double) 5;
      jRip_RipperRule0.size();
      doubleArray0[1] = (double) 1;
      doubleArray0[6] = (double) 5;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1894.105807774);
      doubleArray0[1] = (-1.0383630902174732);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      Properties properties2 = new Properties();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Object object0 = jRip_RipperRule0.copy();
      // Undeclared exception!
      try { 
        protectedProperties0.put("NA", object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-708.592395811));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-708.592395811));
      jRip_RipperRule0.size();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1462);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[5] = 4;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      intArray0[7] = 4;
      doubleArray0[3] = (double) 5;
      doubleArray0[1] = (double) 1;
      doubleArray0[6] = (double) 5;
      doubleArray0[7] = (double) 2;
      MockRandom mockRandom0 = new MockRandom();
      jRip0.globalInfo();
      DecisionTable decisionTable1 = new DecisionTable();
      BestFirst bestFirst0 = (BestFirst)decisionTable1.m_search;
      Utils.log2 = (double) 5;
      // Undeclared exception!
      try { 
        RuleStats.stratify((Instances) null, (-1596), mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[2] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[3] = stringArray0[1];
      stringArray0[4] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[5] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      CoverTree coverTree0 = new CoverTree();
      double double0 = jRip0.getMinNo();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, double0, 0.01);
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getCheckErrorRate();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[2] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[3] = stringArray0[1];
      stringArray0[4] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      stringArray0[5] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-a <attribute index>\n\tThe number of the attribute the probability distribution\n\testimation is done for.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n-c <class index>\n\tIf class value index is set, this attribute is taken as class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then last is default.\n-v <class value index>\n\tIf value is different to -1, select instances of this class value.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then all instances are taken.\n";
      CoverTree coverTree0 = new CoverTree();
      assertEquals(1.3, coverTree0.getBase(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      Properties properties1 = new Properties();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer0);
      Attribute attribute0 = new Attribute("", (-228));
      Attribute attribute1 = attribute0.copy("%lM^UmgS");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.copy();
      // Undeclared exception!
      try { 
        protectedProperties0.put((Object) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip0.toString();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", 950);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange(" has ", 360.3593);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=360.3593
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "!:$<ZkD";
      stringArray0[1] = "Whether check for error rate >= 1/2 is included in stopping criterion.";
      stringArray0[2] = "a'$V|<Z";
      stringArray0[3] = "sensible";
      stringArray0[4] = "%G+l` .z_4,?Zdp5A";
      stringArray0[5] = "qoj%3GWU[8@a\"tnjh";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      String string0 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string0);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Number of all possible conditions = ";
      stringArray0[2] = "";
      stringArray0[3] = "Should never happen: dl in building stage NaN or infinite!";
      JRip.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("{SQg4dveFnX");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-333.0);
      doubleArray0[1] = 474.23208;
      doubleArray0[2] = (-333.0);
      doubleArray0[3] = 474.23208;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-333.0);
      doubleArray0[6] = (-333.0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "8BIq$Ac@#|SU?=Q9";
      stringArray0[2] = "U3Jp1K_R4[tmpZ2^<";
      stringArray0[3] = "";
      JRip.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(" is ot Sour4abe", arrayList0, 662);
      arrayList0.listIterator();
      Locale locale0 = Locale.CHINA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      linkedList0.addAll((Collection<? extends Locale.LanguageRange>) arrayList2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      Locale locale1 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>(662);
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) set0, locale_FilteringMode1);
      locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList4, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList5 = new ArrayList<Locale.LanguageRange>();
      locale1.getDisplayVariant(locale0);
      linkedList0.add((Locale.LanguageRange) null);
      linkedList0.addLast((Locale.LanguageRange) null);
      ArrayList<Locale.LanguageRange> arrayList6 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList6, (Collection<Locale>) list1, locale_FilteringMode2);
      locale0.getDisplayLanguage(locale1);
      arrayList0.trimToSize();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, false);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.enumerateMeasures();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("\nOne condition: size = ", 35);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttrValue();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double double0 = (-1832.91150274232);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.8821103874851657
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("u 7 D ", arrayList0, 68);
      Attribute attribute0 = new Attribute("4EnhL6-Qb#F^", (List<String>) null);
      Attribute attribute1 = new Attribute("date", (List<String>) null, 0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-24);
      Attribute.typeToString(attribute1);
      byteArray0[3] = (byte) (-49);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)4;
      Attribute attribute2 = new Attribute("date", 1);
      Attribute attribute3 = attribute2.copy("integer");
      attribute2.addStringValue(attribute1, 0);
      attribute3.setWeight(1);
      attribute3.setWeight((-1637.33));
      Attribute.typeToString((-1157));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.splitData(instances0, 2, 0);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }
}
