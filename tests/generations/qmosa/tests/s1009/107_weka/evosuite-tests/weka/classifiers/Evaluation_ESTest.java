/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 07:27:29 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.time.temporal.ChronoField;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.evaluation.NumericPrediction;
import weka.classifiers.evaluation.output.prediction.CSV;
import weka.classifiers.evaluation.output.prediction.HTML;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.functions.supportVector.NormalizedPolyKernel;
import weka.classifiers.functions.supportVector.RegOptimizer;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomForest;
import weka.classifiers.trees.RandomTree;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckGOE;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ManhattanDistance;
import weka.core.OptionHandlerJavadoc;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.Loader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.estimators.Estimator;
import weka.estimators.NormalEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0277394929048342
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.getCapabilities();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".arff";
      stringArray0[1] = "weka/core/Capabilities.props";
      regressionByDiscretization0.setOptions(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      SelectedTag selectedTag0 = costSensitiveClassifier0.getCostMatrixSource();
      regressionByDiscretization0.setEstimatorType(selectedTag0);
      regressionByDiscretization0.setNumBins((-1929));
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.listOptions();
      evaluation0.weightedAreaUnderROC();
      evaluation0.matthewsCorrelationCoefficient(1169);
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(1);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.truePositiveRate(3);
      evaluation1.unweightedMicroFmeasure();
      evaluation0.avgCost();
      evaluation0.unweightedMicroFmeasure();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.055336366322696
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Predicate.isEqual((Object) "");
      DecisionStump decisionStump0 = new DecisionStump();
      Capabilities capabilities0 = decisionStump0.getCapabilities();
      SGD sGD0 = new SGD();
      sGD0.setLearningRate(2.0);
      sGD0.setSeed((-1603));
      Random.setNextRandom(210);
      SGD sGD1 = new SGD();
      sGD1.getLossFunction();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1054), 1516.73179683537);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      SimpleLogistic simpleLogistic1 = new SimpleLogistic();
      SimpleLogistic simpleLogistic2 = new SimpleLogistic();
      SimpleLogistic simpleLogistic3 = new SimpleLogistic();
      simpleLogistic1.setUseAIC(false);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.toMatrixString("globalInfo");
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6828558067063368
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.test(predicate0);
      predicate0.or(predicate1);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      XML xML0 = new XML();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      xML0.getOptions();
      RandomForest randomForest0 = new RandomForest();
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NormalEstimator normalEstimator0 = new NormalEstimator(610.2615065426368);
      Estimator.makeCopy(normalEstimator0);
      normalEstimator0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("version");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1335));
      double double0 = evaluation0.m_TotalCost;
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.951216310009807
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      C45Loader c45Loader0 = new C45Loader();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.fMeasure(1);
      doubleArray0[3] = (double) 2;
      evaluation0.priorEntropy();
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      evaluation0.num2ShortID(714, charArray0, 0);
      evaluation0.correct();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-2040724912));
      evaluation0.weightedFMeasure();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Predicate.isEqual((Object) naiveBayesUpdateable0);
      double double0 = evaluation0.m_SumClass;
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.listOptions();
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (-258.1771427);
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-258.1771427);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-258.1771427), doubleArray0);
      instances0.checkInstance(binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.450457503515297
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      regressionByDiscretization2.setUseEqualFrequency(true);
      regressionByDiscretization1.setOptions(testInstances0.DEFAULT_WORDS);
      regressionByDiscretization0.setNumBins((-1457654536));
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.listOptions();
      evaluation0.weightedAreaUnderROC();
      evaluation0.matthewsCorrelationCoefficient((-1));
      evaluation0.weightedPrecision();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.numFalseNegatives(1);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.meanAbsoluteError();
      Evaluation.getGlobalInfo(regressionByDiscretization2);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.toMatrixString("pm>FEYB86$\")TL^(");
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4172822846996236
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      sGD1.listOptions();
      sGD1.setLearningRate(0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      predicate4.or(predicate2);
      predicate4.and(predicate0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      predicate1.negate();
      predicate1.negate();
      SMOreg sMOreg0 = new SMOreg();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getRevision();
      M5Rules m5Rules0 = new M5Rules();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) inputMappedClassifier0);
      predicate3.and(predicate5);
      textDirectoryLoader0.getDataSet();
      evaluation0.truePositiveRate(1);
      evaluation0.unweightedMicroFmeasure();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6727547966053267
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      regressionByDiscretization2.setUseEqualFrequency(true);
      regressionByDiscretization1.setOptions(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("@relation");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4860056020026886
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      XML xML0 = new XML();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      xML0.getOptions();
      RandomForest randomForest0 = new RandomForest();
      Predicate.isEqual((Object) null);
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      NormalEstimator normalEstimator0 = new NormalEstimator((-4983.162389579948));
      normalEstimator0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("c\"e-GQ]|VA}[");
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.trueNegativeRate((-1));
      evaluation2.weightedFMeasure();
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation3.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      textDirectoryLoader0.setCharSet(" | ");
      doubleArray0[0] = (-1295.7121479706982);
      doubleArray0[1] = (-258.1771);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1295.7121479706982), doubleArray0);
      instances0.checkInstance(binarySparseInstance0);
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      votedPerceptron0.setDebug(true);
      votedPerceptron0.listOptions();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) votedPerceptron0, instances0, objectArray0);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.getCapabilities();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.remove((Object) naiveBayesMultinomialUpdateable0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(2269, false, false);
      SimpleLogistic simpleLogistic1 = new SimpleLogistic();
      SimpleLogistic simpleLogistic2 = new SimpleLogistic();
      SimpleLogistic simpleLogistic3 = new SimpleLogistic();
      SimpleLogistic simpleLogistic4 = new SimpleLogistic();
      simpleLogistic2.setUseAIC(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedTrueNegativeRate();
      double double0 = evaluation0.m_Incorrect;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 2269;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1350), 3918.3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1350
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6593387642402389
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.getCapabilities();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) naiveBayesMultinomialUpdateable0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      Predicate<Object> predicate5 = predicate3.and(predicate0);
      predicate4.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      predicate5.or(predicate4);
      predicate6.negate();
      predicate5.and(predicate4);
      J48 j48_0 = new J48();
      Predicate.isEqual((Object) j48_0);
      Predicate<Object> predicate7 = predicate2.negate();
      predicate7.or(predicate4);
      CSV cSV0 = new CSV();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "graphType");
      double double0 = evaluation0.m_SumClass;
      textDirectoryLoader0.listOptions();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.SFPriorEntropy();
      evaluation0.setPriors(instances0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      sGD1.setLearningRate(1);
      sGD0.setSeed(2);
      sGD0.setSeed(1004);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      String[] stringArray0 = new String[6];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 2;
      stringArray0[5] = "@data";
      MockRandom mockRandom0 = new MockRandom((-2L));
      mockRandom0.doubles((long) 1);
      M5P m5P0 = new M5P();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) m5P0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.046678357664687
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGD sGD0 = new SGD();
      sGD0.setLearningRate((-1));
      sGD0.setSeed((-1054));
      Random.setNextRandom(1);
      SGD sGD1 = new SGD();
      sGD1.getLossFunction();
      evaluation0.addNumericTrainClass(1516.73179683537, (-1.7976931348623157E308));
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      simpleLogistic0.setMaxBoostingIterations(2);
      SimpleLogistic simpleLogistic1 = new SimpleLogistic();
      SimpleLogistic simpleLogistic2 = new SimpleLogistic();
      simpleLogistic0.setUseAIC(false);
      evaluation0.toMatrixString(".arff");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1054);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1057.89;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = 1516.73179683537;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray1, (-312.521561));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.421847739438074
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.reset();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      CheckGOE checkGOE0 = new CheckGOE();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.m_ClassIsNominal = false;
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization3 = new RegressionByDiscretization();
      regressionByDiscretization3.getTechnicalInformation();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      evaluation0.relativeAbsoluteError();
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.6735627154422006
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "2");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate.isEqual((Object) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate2.or(predicate4);
      predicate1.and(predicate2);
      Predicate.isEqual((Object) predicate0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("2");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.remove((Object) ".arff");
      String string0 = evaluation0.toClassDetailsString("?UhC");
      assertEquals("?UhC\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      String string1 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string1);
      
      testInstances0.setNumInstancesRelational(0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.getClassPriors();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(1660);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      votedPerceptron0.listOptions();
      String[] stringArray0 = new String[2];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1660;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1660, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) sparseInstance0);
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      Evaluation.main(stringArray0);
      RandomTree randomTree0 = new RandomTree();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      try { 
        evaluation0.updateStatsForPredictor(6.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1958254704568323
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      predicate0.and(predicate0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      sGD1.setLearningRate(598.42);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.precision(1);
      evaluation1.getHeader();
      evaluation1.weightedPrecision();
      evaluation0.setNumericPriorsFromBuffer();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1237333421435447
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".arff";
      stringArray0[4] = ".arff";
      stringArray0[5] = " ";
      stringArray0[6] = "@data";
      stringArray0[7] = "GegW|L:njt*yqe#y]X";
      stringArray0[8] = ".bsi";
      regressionByDiscretization2.setOptions(stringArray0);
      regressionByDiscretization1.setNumBins(8);
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.listOptions();
      evaluation0.weightedAreaUnderROC();
      evaluation0.matthewsCorrelationCoefficient(0);
      evaluation0.weightedPrecision();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.getHeader();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Evaluation.handleCostOption("", (-614));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 1;
      Instances instances0 = new Instances(".cost", arrayList0, 1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      linearNNSearch0.nearestNeighbour(binarySparseInstance0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses1, binarySparseInstance0, 2110.5667006815);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7063260587210523
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      sGD1.setLearningRate(2110.5667006815);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1471));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1471
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.773800366164449
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.enumerateInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-1368));
      evaluation0.falsePositiveRate((-1368));
      evaluation1.weightedFalsePositiveRate();
      evaluation1.sizeOfPredictedRegions();
      Random.setNextRandom(464);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.addNumericTrainClass((-444.5928639), (-1103.19331));
      evaluation0.useNoPriors();
      evaluation0.numFalsePositives(505);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2110.5667006815;
      doubleArray0[2] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      MockRandom mockRandom0 = new MockRandom();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      // Undeclared exception!
      try { 
        pipedReader0.skip((-1399L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // skip value is negative
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.427665170875651
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      sGD1.setLearningRate(2110.5667006815);
      sGD1.setSeed(0);
      Random.setNextRandom(1);
      evaluation0.addNumericTrainClass(1516.73179683537, 0);
      evaluation0.priorEntropy();
      double[] doubleArray0 = null;
      NumericPrediction numericPrediction0 = new NumericPrediction((-4190.533384878914), (-1.7976931348623157E308), (-928.54344757));
      evaluation0.equals(numericPrediction0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9799151714181009
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "R0'+N8";
      stringArray0[1] = "    return toString();\n";
      stringArray0[2] = "z`a2|V";
      stringArray0[3] = ",;)";
      stringArray0[4] = "L$J";
      stringArray0[5] = "pn\"G9K5{";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5321124135489477
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      sGD1.setLearningRate(2110.5667006815);
      sGD1.setSeed(0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) evaluation0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      instances0.removeIf(predicate3);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      evaluation1.KBRelativeInformation();
      evaluation1.rootMeanPriorSquaredError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      LinearNNSearch linearNNSearch2 = new LinearNNSearch();
      try { 
        linearNNSearch0.nearestNeighbour(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.LinearNNSearch", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3890296964289446
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      sGD0.setLearningRate((-60.21657493038475));
      sGD0.setSeed(0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      double double0 = evaluation0.numFalsePositives(478);
      double double1 = evaluation0.falsePositiveRate(1);
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation0.numTrueNegatives(104);
      double double4 = evaluation1.m_TotalCoverage;
      double double5 = evaluation0.truePositiveRate(0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2670704956069354
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "R0'+N8";
      stringArray0[1] = "   retrntoStr ng();\n";
      SGD sGD0 = new SGD();
      sGD0.listOptions();
      sGD0.setLearningRate(0.5);
      sGD0.setSeed(122);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(0);
      instances0.toString();
      evaluation0.falsePositiveRate(2);
      evaluation0.numFalsePositives(485);
      evaluation0.trueNegativeRate((-1));
      evaluation0.confusionMatrix();
      System.setCurrentTimeMillis(364L);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5837007639017773
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Predicate.isEqual((Object) "");
      DecisionStump decisionStump0 = new DecisionStump();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      decisionStump0.getCapabilities();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(20, true, true);
      SimpleLogistic simpleLogistic1 = new SimpleLogistic();
      SimpleLogistic simpleLogistic2 = new SimpleLogistic();
      SimpleLogistic simpleLogistic3 = new SimpleLogistic();
      SimpleLogistic simpleLogistic4 = new SimpleLogistic();
      SimpleLogistic simpleLogistic5 = new SimpleLogistic();
      simpleLogistic5.setUseAIC(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.errorRate();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1320.6492;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 20;
      doubleArray0[3] = 700.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 20;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = Double.NaN;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5837007639017773
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CheckGOE checkGOE0 = new CheckGOE();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) checkGOE0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate2.negate();
      predicate2.and(predicate1);
      instances0.removeIf(predicate0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.KBRelativeInformation();
      evaluation0.rootMeanPriorSquaredError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 2;
      RandomCommittee randomCommittee0 = new RandomCommittee();
      instances0.remove((Object) randomCommittee0);
      doubleArray0[2] = (-449.0);
      doubleArray0[3] = (-449.0);
      doubleArray0[4] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      evaluation0.rootMeanSquaredError();
      LinearNNSearch linearNNSearch2 = new LinearNNSearch(instances0);
      try { 
        linearNNSearch1.nearestNeighbour(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.LinearNNSearch", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.677018125225026
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      sGD1.setLearningRate(1);
      textDirectoryLoader0.listOptions();
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 0;
      SparseInstance sparseInstance0 = new SparseInstance((-1536.0), doubleArray0, intArray0, 14);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 1);
      sparseInstance0.setWeight(1.0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(".names", arrayList0, 17);
      Attribute attribute1 = attribute0.copy(".names");
      binarySparseInstance0.value(attribute1);
      Attribute attribute2 = new Attribute("h39nRmW@pIM1CMPwi", 0);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.weightedMatthewsCorrelation();
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.unweightedMacroFmeasure();
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8725336946728466
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.getCapabilities();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) naiveBayesMultinomialUpdateable0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate5);
      predicate4.or(predicate7);
      Predicate<Object> predicate8 = predicate2.and(predicate7);
      Predicate<Object> predicate9 = predicate6.negate();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      predicate9.test(optionHandlerJavadoc0);
      predicate4.and(predicate8);
      predicate0.and(predicate9);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      predicate0.negate();
      REPTree rEPTree0 = new REPTree();
      LinearRegression linearRegression0 = new LinearRegression();
      textDirectoryLoader0.setOutputFilename(false);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(1780);
      // Undeclared exception!
      try { 
        evaluation1.truePositiveRate(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      M5Rules m5Rules0 = new M5Rules();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) m5Rules0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      predicate3.and(predicate5);
      predicate3.negate();
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate5.or(predicate3);
      Predicate<Object> predicate8 = predicate1.and(predicate7);
      Predicate<Object> predicate9 = predicate4.or(predicate8);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      predicate6.test(serializedClassifier0);
      predicate9.and(predicate4);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      predicate4.negate();
      REPTree rEPTree0 = new REPTree();
      Predicate.isEqual((Object) rEPTree0);
      RandomTree randomTree0 = new RandomTree();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5915904793495073
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Utils.SMALL = (double) 2;
      instances0.enumerateInstances();
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[4] = 1;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-1368));
      evaluation0.falsePositiveRate(84);
      evaluation1.weightedFalsePositiveRate();
      evaluation0.sizeOfPredictedRegions();
      Random.setNextRandom(2);
      evaluation1.m_NumClasses = 1;
      evaluation1.addNumericTrainClass((-153.0), 0);
      try { 
        evaluation1.priorEntropy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9912679239826738
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      SGD sGD0 = new SGD();
      sGD0.setSeed(1);
      Random.setNextRandom((-792));
      sGD0.getLossFunction();
      evaluation0.addNumericTrainClass(1516.73179683537, (-446.8));
      evaluation0.priorEntropy();
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = (-792);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-651.817637436303), (double[]) null, intArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "5");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.test("5");
      predicate2.or(predicate4);
      predicate1.and(predicate2);
      Predicate.isEqual((Object) predicate0);
      RandomTree randomTree0 = new RandomTree();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Predicate.isEqual((Object) randomTree0);
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("5");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 10.3088458746);
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.648209507465083
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate2.or(predicate4);
      predicate1.and(predicate2);
      Predicate.isEqual((Object) predicate0);
      RandomTree randomTree0 = new RandomTree();
      XML xML0 = new XML();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      xML0.getOptions();
      Predicate.isEqual((Object) naiveBayesMultinomialUpdateable0);
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("no");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(72);
      double double0 = evaluation0.numFalseNegatives(22);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.unweightedMacroFmeasure();
      double double2 = evaluation0.weightedTruePositiveRate();
      assertEquals(double2, double1, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      String string0 = evaluation0.num2ShortID(98, charArray0, 485);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                  QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7783540219669085
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[4] = 1;
      intArray0[3] = 2;
      Evaluation evaluation1 = new Evaluation(instances0);
      AbstractClassifier.makeCopy(regressionByDiscretization0);
      evaluation0.numFalsePositives((-1368));
      double double0 = evaluation0.falsePositiveRate(84);
      double double1 = evaluation1.weightedFalsePositiveRate();
      evaluation0.sizeOfPredictedRegions();
      Random.setNextRandom(2);
      evaluation1.addNumericTrainClass(0, 0);
      double double2 = evaluation1.priorEntropy();
      assertEquals(double2, double0, 0.01);
      
      evaluation0.toMatrixString("?;IbQbm");
      double double3 = evaluation0.weightedTruePositiveRate();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      Predicate.isEqual((Object) naiveBayesUpdateable0);
      double double0 = evaluation0.m_SumClass;
      textDirectoryLoader0.listOptions();
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1722;
      Object[] objectArray0 = new Object[2];
      ArffLoader arffLoader0 = new ArffLoader();
      Instances instances1 = new Instances(instances0, 1722);
      arffLoader0.getNextInstance(instances1);
      evaluation0.pctUnclassified();
      try { 
        naiveBayesUpdateable0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayes", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      evaluation0.makeDistribution(Double.NaN);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.weightedAreaUnderROC();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Instances instances1 = new Instances(instances0, (-5200));
      Evaluation evaluation0 = new Evaluation(instances1);
      HTML hTML0 = new HTML();
      Stacking stacking0 = new Stacking();
      HTML hTML1 = new HTML();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) hTML1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate2.and(predicate1);
      predicate1.negate();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      Predicate.isEqual((Object) technicalInformationHandlerJavadoc0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) evaluation0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate0.and(predicate4);
      Predicate<Object> predicate5 = predicate0.or(predicate1);
      predicate5.negate();
      instances0.removeIf(predicate4);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, (int[]) null, 0);
      double double0 = evaluation0.weightedFMeasure();
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.recall((-1319));
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.259394077476409
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      C45Loader c45Loader0 = new C45Loader();
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      sGD1.listOptions();
      sGD1.setLearningRate(0);
      sGD1.setSeed(0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      evaluation0.numFalsePositives(473);
      instances0.toString();
      double double0 = evaluation0.falsePositiveRate(2);
      double double1 = evaluation0.numFalsePositives(473);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.trueNegativeRate(0);
      assertEquals(double2, double0, 0.01);
      
      evaluation0.confusionMatrix();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      RandomTree randomTree0 = new RandomTree();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      double double2 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getOptions();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      C45Loader c45Loader0 = new C45Loader();
      textDirectoryLoader0.setCharSet("}");
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization3 = new RegressionByDiscretization();
      regressionByDiscretization3.setNumBins(8);
      Evaluation evaluation0 = new Evaluation(instances0);
      regressionByDiscretization1.globalInfo();
      double double0 = evaluation0.m_SumClass;
      textDirectoryLoader0.listOptions();
      int[] intArray0 = new int[5];
      evaluation0.m_SumPriorAbsErr = (double) 2;
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[0] = 2194;
      double double1 = evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double2 = evaluation0.weightedTrueNegativeRate();
      double double3 = evaluation0.errorRate();
      assertEquals(double3, double1, 0.01);
      
      double double4 = evaluation0.pctCorrect();
      assertEquals(double4, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6828558067063368
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGD sGD0 = new SGD();
      sGD0.setLearningRate(Double.NaN);
      sGD0.setSeed((-1));
      Random.setNextRandom(2);
      sGD0.getLossFunction();
      evaluation0.addNumericTrainClass(1.0, (-3915.65413637966));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6853649779407913
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      AbstractClassifier.makeCopy(regressionByDiscretization0);
      evaluation0.numFalsePositives(2);
      evaluation0.falsePositiveRate(1);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.weightedFalsePositiveRate();
      Random.setNextRandom(7);
      evaluation0.addNumericTrainClass((-258.1771427), 7);
      evaluation1.priorEntropy();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2192.629424566);
      int[] intArray0 = new int[6];
      intArray0[0] = 7;
      intArray0[1] = 84;
      intArray0[2] = 1;
      intArray0[3] = 84;
      intArray0[4] = 0;
      intArray0[5] = 2;
      SparseInstance sparseInstance0 = new SparseInstance((-2192.629424566), doubleArray0, intArray0, 84);
      SparseInstance sparseInstance1 = new SparseInstance(Double.POSITIVE_INFINITY, doubleArray0, intArray0, 20);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, sparseInstance0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9010244664142215
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double1 = evaluation0.numFalsePositives((-1));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.falsePositiveRate((-2));
      Instances instances1 = testInstances0.getData();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.numFalseNegatives(1);
      double double3 = evaluation0.unweightedMacroFmeasure();
      assertNotEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8147434244994134
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGD sGD0 = new SGD();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(81, true, true);
      SimpleLogistic simpleLogistic1 = new SimpleLogistic();
      SimpleLogistic simpleLogistic2 = new SimpleLogistic();
      SimpleLogistic simpleLogistic3 = new SimpleLogistic();
      SimpleLogistic simpleLogistic4 = new SimpleLogistic();
      SimpleLogistic simpleLogistic5 = new SimpleLogistic();
      simpleLogistic1.setUseAIC(true);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.errorRate();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getOptions();
      textDirectoryLoader0.reset();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      C45Loader c45Loader0 = new C45Loader();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization3 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization4 = new RegressionByDiscretization();
      regressionByDiscretization4.setNumBins(8);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      textDirectoryLoader0.listOptions();
      evaluation0.m_SumPriorAbsErr = (double) 2;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.1785214863331395
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.setOptions(testInstances0.DEFAULT_WORDS);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      DenseInstance denseInstance0 = (DenseInstance)linearNNSearch0.nearestNeighbour(binarySparseInstance0);
      double double0 = 2110.5667006815;
      denseInstance0.toString();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 1;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1000
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3HZ>|UQ";
      stringArray0[2] = "@w-%L";
      RegOptimizer regOptimizer0 = new RegOptimizer();
      sMOreg0.setRegOptimizer(regOptimizer0);
      stringArray0[3] = "Sanjoy Dasgupta";
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      sMOreg0.setKernel(normalizedPolyKernel0);
      stringArray0[4] = "makeCopies";
      stringArray0[5] = "Sanjoy Dasgupta";
      stringArray0[6] = "ewN!2=o\"0fE9";
      stringArray0[7] = "CffBI-PGIw0Jc3Q{";
      try { 
        Evaluation.evaluateModel((Classifier) sMOreg0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2287462131058797
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      C45Loader c45Loader0 = new C45Loader();
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      sGD1.listOptions();
      sGD1.setLearningRate(0);
      sGD1.setSeed(0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      evaluation0.numFalsePositives(473);
      instances0.toString();
      evaluation0.falsePositiveRate(2);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.numFalseNegatives(125);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances1);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 2010;
      intArray0[2] = 3;
      intArray0[3] = (-4);
      intArray0[4] = 36;
      intArray0[5] = 0;
      intArray0[6] = 3;
      intArray0[7] = 1;
      intArray0[8] = 0;
      Instance instance0 = BallNode.calcCentroidPivot(36, (-4), intArray0, instances1);
      Instance instance1 = linearNNSearch0.nearestNeighbour(instance0);
      assertEquals(2, instance1.numAttributes());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      votedPerceptron0.setDebug(true);
      double[] doubleArray0 = new double[2];
      textDirectoryLoader0.setCharSet(" | ");
      int[] intArray0 = new int[8];
      intArray0[0] = 19;
      intArray0[1] = 19;
      intArray0[2] = (-1871);
      intArray0[3] = 19;
      intArray0[4] = 33;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-946.642), doubleArray0);
      instances0.checkInstance(binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.483956189232597
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.SFMeanEntropyGain();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9m,EN'u4\":=GC']yYd");
      evaluation0.toMatrixString();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.meanPriorAbsoluteError();
      evaluation1.getClassPriors();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pushbackInputStream0.available();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      try { 
        bufferedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resetting to invalid mark
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      double double0 = 0.0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[0] = (double) 2;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) randomSubSpace0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      double double0 = evaluation0.m_SumClass;
      textDirectoryLoader0.listOptions();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) predicate0;
      objectArray0[2] = (Object) predicate0;
      objectArray0[3] = (Object) naiveBayesMultinomialUpdateable1;
      objectArray0[4] = (Object) evaluation0;
      objectArray0[5] = (Object) randomSubSpace0;
      objectArray0[6] = (Object) evaluation0;
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomialUpdateable1, instances0, 459, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.16658366839149
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".arff";
      stringArray0[4] = ".arff";
      stringArray0[5] = " ";
      stringArray0[6] = "@data";
      stringArray0[7] = "GegW|L:njt*yqe#y]X";
      stringArray0[8] = ".bsi";
      regressionByDiscretization2.setOptions(stringArray0);
      regressionByDiscretization1.setNumBins(8);
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances1.generate("GegW|L:njt*yqe#y]X");
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives(0);
      evaluation1.areaUnderPRC((-1910916519));
      double double1 = evaluation1.truePositiveRate((-2690));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.trueNegativeRate(1);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      votedPerceptron1.setDebug(true);
      votedPerceptron0.listOptions();
      try { 
        evaluation0.evaluateModel((Classifier) votedPerceptron0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.0549626987123517
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = (-2.147483648E9);
      evaluation0.toMatrixString(".arff");
      evaluation0.numInstances();
      evaluation0.correct();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.0362014414796366
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".arff";
      stringArray0[4] = ".arff";
      stringArray0[5] = " ";
      stringArray0[6] = "@data";
      stringArray0[7] = "GegWL:nj*yqe#y]X";
      stringArray0[8] = ".bsi";
      regressionByDiscretization2.setOptions(stringArray0);
      regressionByDiscretization1.setNumBins(8);
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.listOptions();
      evaluation0.weightedAreaUnderROC();
      double double0 = evaluation0.matthewsCorrelationCoefficient(0);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.falsePositiveRate(332);
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.truePositiveRate((-1335));
      double double1 = evaluation1.unweightedMicroFmeasure();
      evaluation0.incorrect();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      
      double double2 = evaluation2.truePositiveRate(939);
      assertNotEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate1);
      Predicate<Object> predicate6 = predicate5.or(predicate4);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate1.and(predicate7);
      predicate3.and(predicate7);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      Predicate.isEqual((Object) technicalInformationHandlerJavadoc0);
      RandomTree randomTree0 = new RandomTree();
      Predicate.isEqual((Object) predicate6);
      SGDText sGDText0 = new SGDText();
      Object object0 = new Object();
      Predicate<Object> predicate9 = Predicate.isEqual(object0);
      Predicate<Object> predicate10 = predicate1.or(predicate3);
      predicate1.or(predicate10);
      predicate9.or(predicate8);
      CSV cSV0 = new CSV();
      Predicate.isEqual((Object) predicate10);
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.evaluateModel((Classifier) sGDText0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      DenseInstance denseInstance0 = new DenseInstance(6);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      votedPerceptron0.setDebug(false);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-5525.99);
      doubleArray0[1] = (double) 6;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = (-1114383320);
      intArray0[4] = 6;
      SparseInstance sparseInstance0 = new SparseInstance(5.5, doubleArray0, intArray0, 6);
      instances0.checkInstance(sparseInstance0);
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      votedPerceptron1.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) 6;
      objectArray0[2] = (Object) evaluation0;
      objectArray0[3] = (Object) (-5525.99);
      objectArray0[4] = (Object) 6;
      objectArray0[5] = (Object) 6;
      Object object0 = new Object();
      objectArray0[6] = object0;
      evaluation0.evaluateModel((Classifier) votedPerceptron0, instances0, objectArray0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      sGD1.setLearningRate(1);
      sGD0.setSeed(2);
      sGD0.setSeed(1004);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".names";
      stringArray0[1] = ".names";
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      sGD1.listOptions();
      MockRandom mockRandom0 = new MockRandom(1149L);
      mockRandom0.doubles(1L);
      try { 
        evaluation0.crossValidateModel("e2*f*/z&}8Y>i5", instances0, 1, stringArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: e2*f*_/z&}8Y>i5
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RandomTree randomTree0 = new RandomTree();
      Object[] objectArray0 = new Object[0];
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\tUse '-p 0' if no attributes are desired.\n");
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, (String) null);
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      // Undeclared exception!
      try { 
        m5Rules1.getM5RootNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.m5.M5Base", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.3368883075390159
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = (-614);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate1);
      predicate5.or(predicate4);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate3.and(predicate6);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      Predicate.isEqual((Object) technicalInformationHandlerJavadoc0);
      RandomTree randomTree0 = new RandomTree();
      SGDText sGDText0 = new SGDText();
      Object object0 = new Object();
      Predicate<Object> predicate8 = Predicate.isEqual(object0);
      Predicate<Object> predicate9 = predicate1.or(predicate3);
      predicate1.or(predicate9);
      predicate8.or(predicate7);
      CSV cSV0 = new CSV();
      Predicate.isEqual((Object) predicate9);
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getOptions();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-614);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.95;
      doubleArray0[4] = 4.0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 2;
      SparseInstance sparseInstance0 = new SparseInstance(0.95, doubleArray0, intArray0, 1);
      instances0.add((Instance) sparseInstance0);
      Instance instance0 = null;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.9084655121998533
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getOptions();
      textDirectoryLoader0.reset();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      C45Loader c45Loader0 = new C45Loader();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization3 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization4 = new RegressionByDiscretization();
      regressionByDiscretization4.setNumBins(8);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      textDirectoryLoader0.listOptions();
      int[] intArray0 = new int[5];
      evaluation0.m_SumPriorAbsErr = (double) 2;
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      evaluation0.weightedAreaUnderROC();
      evaluation0.matthewsCorrelationCoefficient(1867);
      evaluation0.weightedPrecision();
      evaluation0.getDiscardPredictions();
      evaluation0.falsePositiveRate(8);
      evaluation0.addNumericTrainClass(1, 0);
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.717020786717215
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      DenseInstance denseInstance0 = new DenseInstance(6);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) (-1114383320);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SparseInstance sparseInstance0 = new SparseInstance(6.0, doubleArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.341748649525924
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = (-1114383320);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte) (-128);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      evaluation0.precision((-1114383320));
      evaluation0.weightedFalsePositiveRate();
      int int1 = 6;
      DenseInstance denseInstance0 = new DenseInstance(6);
      evaluation0.weightedRecall();
      try { 
        evaluation0.updateStatsForPredictor(6.0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.setDiscardPredictions(true);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[0] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      evaluation0.equals(regressionByDiscretization0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray1 = new double[0];
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 964.7430865272017);
      evaluation0.getRevision();
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8907965840134402
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      CheckGOE checkGOE0 = new CheckGOE();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) checkGOE0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.or(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate1.and(predicate2);
      instances0.removeIf(predicate0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (-2100.451632);
      doubleArray0[8] = Double.NaN;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      instances0.add((Instance) denseInstance0);
      RandomTree randomTree0 = new RandomTree();
      XML xML0 = new XML();
      Predicate.isEqual((Object) predicate1);
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation.handleCostOption((String) null, 0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.5459405090421
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.setOptions((String[]) null);
      instances0.enumerateInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      AbstractClassifier.makeCopy(regressionByDiscretization0);
      double double0 = evaluation0.numFalsePositives(2);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.falsePositiveRate(1);
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation2.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      Random.setNextRandom(7);
      evaluation0.addNumericTrainClass((-258.1771427), 7);
      double double3 = evaluation1.m_ConfLevel;
      assertEquals(0.95, double3, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 84;
      int[] intArray0 = new int[6];
      intArray0[0] = 7;
      intArray0[1] = 84;
      intArray0[2] = 1;
      intArray0[3] = 84;
      intArray0[4] = 0;
      intArray0[5] = 2;
      SparseInstance sparseInstance0 = new SparseInstance(Double.POSITIVE_INFINITY, doubleArray0, intArray0, 20);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 7);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      
      evaluation1.totalCost();
      assertEquals(Double.NaN, evaluation1.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.SFMeanEntropyGain();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, (-306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      double[] doubleArray0 = new double[25];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[0] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      evaluation0.equals(regressionByDiscretization0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0);
      SparseInstance sparseInstance0 = new SparseInstance(687);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 687;
      SparseInstance sparseInstance1 = new SparseInstance(2, doubleArray0, intArray0, 687);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      manhattanDistance0.getTechnicalInformation();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Predicate.isEqual((Object) randomCommittee0);
      double double0 = evaluation0.m_SumClass;
      textDirectoryLoader0.listOptions();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) manhattanDistance0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      instances0.checkInstance(binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.7045077657192014
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      CheckGOE checkGOE0 = new CheckGOE();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) checkGOE0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate1.or(predicate2);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate2.and(predicate3);
      instances0.removeIf(predicate0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (-2100.451632);
      doubleArray0[8] = Double.NaN;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      instances0.add((Instance) denseInstance0);
      RandomTree randomTree0 = new RandomTree();
      XML xML0 = new XML();
      Predicate.isEqual((Object) predicate1);
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation.handleCostOption((String) null, 0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.fMeasure((-13));
      assertNotEquals(double1, double0, 0.01);
      
      textDirectoryLoader0.setOutputFilename(false);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation1.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.areaUnderROC((-197112209));
      assertNotEquals(double3, double1, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.2077488965784924
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      RandomTree randomTree0 = new RandomTree();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      textDirectoryLoader0.setCharSet("*$J-");
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalsePositives(21);
      evaluation1.falsePositiveRate(1);
      evaluation1.weightedFalsePositiveRate();
      double double0 = evaluation1.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.3655934560029954
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.getCapabilities();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(2269, false, false);
      SimpleLogistic simpleLogistic1 = new SimpleLogistic();
      SimpleLogistic simpleLogistic2 = new SimpleLogistic();
      SimpleLogistic simpleLogistic3 = new SimpleLogistic();
      SimpleLogistic simpleLogistic4 = new SimpleLogistic();
      simpleLogistic2.setUseAIC(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.errorRate();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(2269);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2269
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.5743631318055766
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      manhattanDistance0.getTechnicalInformation();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      evaluation0.falsePositiveRate(13);
      evaluation0.numFalsePositives((-1792083944));
      evaluation0.trueNegativeRate(1);
      evaluation0.confusionMatrix();
      System.setCurrentTimeMillis(947L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1792083944);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 485;
      int[] intArray0 = new int[7];
      intArray0[0] = 2673;
      intArray0[1] = 13;
      intArray0[2] = (-5861);
      intArray0[3] = 0;
      intArray0[4] = (-1792083944);
      intArray0[5] = 2673;
      intArray0[6] = 485;
      SparseInstance sparseInstance0 = new SparseInstance(2673, doubleArray0, intArray0, 44);
      try { 
        evaluation0.evaluateModelOnce((double) (-5861), (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5861
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.4407696753202024
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      M5Rules m5Rules0 = new M5Rules();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) m5Rules0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate0.and(predicate3);
      Predicate<Object> predicate4 = predicate2.or(predicate0);
      predicate3.and(predicate4);
      predicate3.negate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(instances0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      evaluation0.updateMargins(doubleArray0, 1, 1664.020824);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 0;
      Instance instance0 = BallNode.calcCentroidPivot(1, 0, intArray0, instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(instance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) m5Rules0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      M5Rules m5Rules0 = new M5Rules();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) m5Rules0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate5.or(predicate3);
      Predicate<Object> predicate10 = predicate1.and(predicate9);
      Predicate<Object> predicate11 = predicate4.or(predicate10);
      Predicate<Object> predicate12 = predicate11.and(predicate4);
      predicate8.and(predicate0);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      predicate4.negate();
      REPTree rEPTree0 = new REPTree();
      Predicate.isEqual((Object) rEPTree0);
      RandomTree randomTree0 = new RandomTree();
      Predicate<Object> predicate13 = predicate7.and(predicate3);
      predicate11.or(predicate13);
      predicate7.and(predicate6);
      SGDText sGDText0 = new SGDText();
      Predicate<Object> predicate14 = Predicate.isEqual((Object) predicate12);
      predicate7.or(predicate3);
      predicate5.or(predicate0);
      CSV cSV0 = new CSV();
      Predicate.isEqual((Object) predicate14);
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      evaluation0.equals((Object) null);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, 2168.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      evaluation0.equals(chronoField0);
      int int0 = 1688;
      char[] charArray0 = new char[0];
      int int1 = 15;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1688, charArray0, 15);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.1963029825642364
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.kappa();
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      pushbackInputStream0.markSupported();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null, 878);
      pushbackInputStream1.mark(878);
      try { 
        pushbackInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Predicate.isEqual((Object) "");
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.getCapabilities();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(20, true, true);
      SimpleLogistic simpleLogistic1 = new SimpleLogistic();
      SimpleLogistic simpleLogistic2 = new SimpleLogistic();
      SimpleLogistic simpleLogistic3 = new SimpleLogistic();
      SimpleLogistic simpleLogistic4 = new SimpleLogistic();
      SimpleLogistic simpleLogistic5 = new SimpleLogistic();
      simpleLogistic5.setUseAIC(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      evaluation0.getRevision();
      evaluation0.m_NumTrainClassVals = 20;
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.errorRate();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation.getGlobalInfo(decisionStump0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      String string0 = Evaluation.makeOptionString(decisionStump0, true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = "\nSynopsis for weka.classifiers.trees.DecisionStump:\n\nClass for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.";
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, "4Fa,M+M6fXMo#4d-o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      XML xML0 = new XML();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Predicate.isEqual((Object) gaussianProcesses0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "#IMPLIED");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      DenseInstance denseInstance0 = new DenseInstance(6);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) (-1114383320);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SparseInstance sparseInstance0 = new SparseInstance(6.0, doubleArray0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance0, 3.4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.451920750018101
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (-5669.210291);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.KBRelativeInformation();
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = '\'';
      char char0 = ')';
      charArray0[2] = ')';
      charArray0[3] = 'h';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-3614), charArray0, (-1088));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.3112881430321695
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[0] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2;
      evaluation0.equals(regressionByDiscretization0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray1 = new double[7];
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 964.7430865272017);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-258.1771427), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) regressionByDiscretization1, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.550790434193796
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Predicate.isEqual((Object) serializedClassifier0);
      XML xML0 = new XML();
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      sGD1.setSeed(0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling.shouldAllThrowIOExceptions();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getEvaluationMeasure();
      KStar kStar0 = new KStar();
      KStar kStar1 = new KStar();
      kStar1.getMissingMode();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(70);
      double double0 = evaluation0.falsePositiveRate((-226));
      double double1 = evaluation0.weightedFalsePositiveRate();
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      Random.setNextRandom(0);
      evaluation0.addNumericTrainClass((-1459.66637018795), (-226));
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = '-';
      String string0 = evaluation0.num2ShortID(6, charArray0, 210);
      assertEquals("                                                                                                                                                                                                               qqq", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      C45Loader c45Loader0 = new C45Loader();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      MockRandom mockRandom0 = new MockRandom();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        evaluation0.crossValidateModel((Classifier) regressionByDiscretization0, instances0, 1, (java.util.Random) mockRandom0, (Object[]) regressionByDiscretization1.TAGS_ESTIMATOR);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.4741050341006434
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      MockRandom mockRandom0 = new MockRandom(0L);
      regressionByDiscretization0.setNumBins(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.fMeasure(459);
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      charArray0[6] = 'N';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-384), charArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.1012448189540684
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      boolean boolean0 = evaluation0.equals(chronoField0);
      assertFalse(boolean0);
      
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      double double0 = evaluation0.numFalsePositives(459);
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = ',';
      charArray0[2] = '$';
      charArray0[3] = '^';
      charArray0[4] = 'd';
      charArray0[5] = ',';
      String string0 = evaluation0.num2ShortID(22, charArray0, 108);
      assertEquals("                                                                                                          $d", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.7079223739447738
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      M5Rules m5Rules0 = new M5Rules();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) m5Rules0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      predicate3.and(predicate5);
      predicate3.negate();
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate5.or(predicate3);
      predicate1.and(predicate7);
      Predicate<Object> predicate8 = predicate7.negate();
      predicate8.and(predicate4);
      predicate6.and(predicate0);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      predicate4.negate();
      REPTree rEPTree0 = new REPTree();
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOutputFilename(true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.remove((Object) rEPTree0);
      String string0 = evaluation0.toClassDetailsString("getUseEqualFrequency");
      assertEquals("getUseEqualFrequency\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      String string1 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string1);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      evaluation0.weightedTrueNegativeRate();
      evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, evaluation1.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.432904992626926
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      evaluation0.toMatrixString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\tUse '-p 0' if no attributes are desired.\n");
      evaluation0.toMatrixString();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.fMeasure(497);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      int[] intArray0 = new int[0];
      int int0 = (-1120);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, (-1120));
      evaluation1.weightedFMeasure();
      Attribute attribute0 = new Attribute(".arff", 6);
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(497, (char[]) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.585274689875823
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.KBRelativeInformation();
      evaluation0.rootMeanPriorSquaredError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = '?';
      charArray0[2] = 'j';
      charArray0[3] = '$';
      charArray0[4] = 'm';
      charArray0[5] = 'R';
      evaluation0.num2ShortID(2859, charArray0, 2);
      doubleArray0[1] = (double) 2;
      int int0 = 3765;
      Instance instance0 = null;
      // Undeclared exception!
      try { 
        instances0.add(3765, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.166864539140391
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      C45Loader c45Loader0 = new C45Loader();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.fMeasure(1);
      doubleArray0[3] = (double) 2;
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      charArray0[1] = 'N';
      evaluation0.num2ShortID(714, charArray0, 0);
      evaluation0.correct();
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.weightedTrueNegativeRate();
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.numFalseNegatives(1);
      assertEquals(0.0, double4, 0.01);
      
      evaluation0.unweightedMacroFmeasure();
      double double5 = evaluation0.weightedAreaUnderPRC();
      double double6 = evaluation0.meanAbsoluteError();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.2376830354502575
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      CheckGOE checkGOE0 = new CheckGOE();
      Predicate.isEqual((Object) checkGOE0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      String string0 = "\tUse '-p 0' if no attributes are desired.\n";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "globalInfo");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.falseNegativeRate(21);
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int int0 = 467;
      regressionByDiscretization0.setNumBins((-848));
      CostMatrix costMatrix0 = new CostMatrix(467);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.1917521602996404
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.weightedAreaUnderPRC();
      String string1 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string1);
      
      RandomTree randomTree0 = new RandomTree();
      DecisionStump decisionStump0 = new DecisionStump();
      boolean boolean0 = evaluation0.equals(decisionStump0);
      assertFalse(boolean0);
      
      XML xML0 = new XML();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) textDirectoryLoader0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) instances0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate1.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) randomTree0);
      Predicate<Object> predicate5 = predicate4.and(predicate3);
      predicate2.or(predicate5);
      predicate3.negate();
      instances0.removeIf(predicate4);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) ',';
      intArray0[1] = (int) ',';
      intArray0[1] = (int) ',';
      intArray0[3] = (int) ',';
      intArray0[4] = (int) ',';
      intArray0[5] = 611;
      intArray0[6] = (int) ',';
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1882.810709418403), intArray0, 611);
      evaluation0.weightedFMeasure();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      evaluation0.getRevision();
      double double1 = evaluation0.unclassified();
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.2318773664829847
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      String[] stringArray0 = new String[2];
      evaluation0.toCumulativeMarginDistributionString();
      stringArray0[1] = "@relation";
      Evaluation.main(stringArray0);
      evaluation0.toClassDetailsString();
      RandomTree randomTree0 = new RandomTree();
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_WithClass = 3318.9720792603653;
      evaluation1.meanPriorAbsoluteError();
      assertEquals(0.0, evaluation1.meanPriorAbsoluteError(), 0.01);
      
      evaluation0.areaUnderROC(2);
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.3654597361104444
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      C45Loader c45Loader0 = new C45Loader();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      sGD1.setLearningRate(1);
      textDirectoryLoader0.listOptions();
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[5] = 0;
      SparseInstance sparseInstance0 = new SparseInstance((-1536.0), doubleArray0, intArray0, 14);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 1);
      sparseInstance0.setWeight(1.0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(".names", arrayList0, 17);
      Attribute attribute1 = attribute0.copy(".names");
      binarySparseInstance0.value(attribute1);
      Attribute attribute2 = new Attribute("h39nRmW@pIM1CMPwi", 0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.320811952555979
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      C45Loader c45Loader0 = new C45Loader();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01);
      
      textDirectoryLoader0.setCharSet("WTeyAyK7WrzrDE");
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.numFalsePositives((-1452352795));
      double double2 = evaluation0.falsePositiveRate(0);
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      manhattanDistance0.getTechnicalInformation();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Predicate.isEqual((Object) randomCommittee0);
      double double0 = evaluation0.m_SumClass;
      textDirectoryLoader0.listOptions();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) manhattanDistance0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 2;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0, intArray0, (-1995740342));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.147483647E9, intArray0, (-1995740342));
      sparseInstance0.setWeight(6);
      Attribute attribute0 = new Attribute("@relation", 0);
      binarySparseInstance0.toString(attribute0);
      M5P m5P0 = new M5P();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) m5P0, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      manhattanDistance0.getTechnicalInformation();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Predicate.isEqual((Object) randomCommittee0);
      double double0 = evaluation0.m_SumClass;
      Enumeration enumeration0 = new AlphabeticTokenizer();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) naiveBayesUpdateable0;
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomialUpdateable1, instances0, 566, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.classifiers.bayes.NaiveBayesUpdateable cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.7389896102893403
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      SimpleLogistic simpleLogistic1 = new SimpleLogistic((-13), false, false);
      SimpleLogistic simpleLogistic2 = new SimpleLogistic();
      SimpleLogistic simpleLogistic3 = new SimpleLogistic();
      SimpleLogistic simpleLogistic4 = new SimpleLogistic();
      SimpleLogistic simpleLogistic5 = new SimpleLogistic();
      SimpleLogistic simpleLogistic6 = new SimpleLogistic((-1456206972), true, true);
      SimpleLogistic[] simpleLogisticArray0 = new SimpleLogistic[0];
      SimpleLogistic[] simpleLogisticArray1 = instances0.toArray(simpleLogisticArray0);
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader0.setSource(file0);
      MockRandom mockRandom0 = new MockRandom(1);
      try { 
        evaluation0.crossValidateModel((Classifier) simpleLogistic1, instances0, 119, (java.util.Random) mockRandom0, (Object[]) simpleLogisticArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getOptions();
      textDirectoryLoader0.reset();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      C45Loader c45Loader0 = new C45Loader();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization2 = new RegressionByDiscretization();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      RegressionByDiscretization regressionByDiscretization3 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization4 = new RegressionByDiscretization();
      regressionByDiscretization4.setNumBins(8);
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      
      double double0 = evaluation0.m_SumClass;
      textDirectoryLoader0.listOptions();
      int[] intArray0 = new int[5];
      evaluation0.m_SumPriorAbsErr = (double) 2;
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 2194;
      intArray0[4] = 8;
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[5] = "   retrntoStr ng();\n";
      stringArray0[2] = "z`a2|V";
      stringArray0[4] = "$";
      stringArray0[5] = "pn\"G9K5{";
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = Evaluation.makeOptionString(naiveBayesMultinomialText0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.2922299598491787
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "q :3X}I-k]3=S#U");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      RandomTree randomTree0 = new RandomTree();
      evaluation0.toSummaryString(false);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "\tUse '-p 0' if no attributes are desired.\n");
      evaluation0.toSummaryString();
      double double0 = evaluation0.m_WithClass;
      evaluation0.m_CoverageStatisticsAvailable = false;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Percentage split ('-percentage-split') is missing.");
      evaluation0.falseNegativeRate(21);
      M5Rules m5Rules0 = new M5Rules();
      evaluation0.toSummaryString();
      M5Rules m5Rules1 = new M5Rules();
      // Undeclared exception!
      try { 
        m5Rules1.getM5RootNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.m5.M5Base", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.8548720307766429
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      manhattanDistance0.getTechnicalInformation();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGD sGD0 = new SGD();
      sGD0.setLearningRate(2);
      SGD sGD1 = new SGD();
      sGD1.setSeed(0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      evaluation0.numFalsePositives(2);
      evaluation0.toCumulativeMarginDistributionString();
      SparseInstance sparseInstance0 = null;
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      DenseInstance denseInstance0 = new DenseInstance(6);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ZeroR zeroR0 = new ZeroR();
      zeroR0.getOptions();
      String[] stringArray0 = new String[1];
      AbstractClassifier.makeCopies(zeroR0, 6);
      stringArray0[0] = ".bsi";
      try { 
        Evaluation.evaluateModel((Classifier) zeroR0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3HZ>|UQ";
      stringArray0[1] = "QB27-j.>%>-\u0000X?z";
      stringArray0[2] = "@w-%L";
      stringArray0[3] = "Sanjoy Dasgupta";
      stringArray0[4] = "makeCopies";
      stringArray0[5] = "        if (i.attribute(j).isNominal())\n";
      stringArray0[6] = "ewN!S2=o\"0fE9";
      stringArray0[7] = "CffBI-PGIw0Jc3Q{";
      try { 
        Evaluation.evaluateModel((Classifier) sMOreg0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SMOreg:
         // 
         // -C <double>
         // \tThe complexity constant C.
         // \t(default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither.
         // \t(default 0=normalize)
         // -I <classname and parameters>
         // \tOptimizer class used for solving quadratic optimization problem
         // \t(default weka.classifiers.functions.supportVector.RegSMOImproved)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to optimizer ('-I') weka.classifiers.functions.supportVector.RegSMOImproved:
         // 
         // -T <double>
         // \tThe tolerance parameter for checking the stopping criterion.
         // \t(default 0.001)
         // -V
         // \tUse variant 1 of the algorithm when true, otherwise use variant 2.
         // \t(default true)
         // -P <double>
         // \tThe epsilon for round-off error.
         // \t(default 1.0e-12)
         // -L <double>
         // \tThe epsilon parameter in epsilon-insensitive loss function.
         // \t(default 1.0e-3)
         // -W <double>
         // \tThe random number seed.
         // \t(default 1)
         // 
         // Options specific to kernel ('-K') weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("#WKB,,y");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)12;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        Evaluation.handleCostOption("#WKB,,y", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"g\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.8934284047624406
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      manhattanDistance0.getTechnicalInformation();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGD sGD0 = new SGD();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.toSummaryString("$G.D&OjDFwnm_m;_$-+", true);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      CostMatrix costMatrix0 = new CostMatrix(1);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanPriorEntropy();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@data";
      stringArray0[1] = ".arff";
      textDirectoryLoader0.setOptions(stringArray0);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      double double2 = evaluation0.SFMeanEntropyGain();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("3d1A<RR|3]", arrayList0, 3932);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "Iw\"7s^5;=_C,u";
      try { 
        Evaluation.handleCostOption("Iw\"7s^5;=_C,u", (-614));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "XOXx;KxY";
      stringArray0[1] = "XOXx;KxY";
      stringArray0[2] = "XOXx;KxY";
      stringArray0[3] = "XOXx;KxY";
      stringArray0[4] = "XOXx;KxY";
      stringArray0[5] = "F. Kleedorfer and A. Seewald";
      try { 
        Evaluation.evaluateModel("XOXx;KxY", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name XOXx;KxY.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      ConverterUtils.DataSource.read((InputStream) pushbackInputStream0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }
}
