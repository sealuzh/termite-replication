/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 07:00:01 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImprovedFile improvedFile0 = new ImprovedFile("tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[1] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[2] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[3] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[4] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[5] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      archiveScanner0.setIncludes(stringArray0);
      System.setCurrentTimeMillis(57L);
      System.setCurrentTimeMillis(57L);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesIncluded = vector0;
      System.setCurrentTimeMillis(490L);
      System.setCurrentTimeMillis((-1371L));
      System.setCurrentTimeMillis((-1192L));
      System.setCurrentTimeMillis((-329L));
      System.setCurrentTimeMillis(490L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      long long0 = 2302L;
      System.setCurrentTimeMillis(2302L);
      System.setCurrentTimeMillis((-329L));
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "'+EvB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("tzqgM{:D~/tzqgM{:D~/tzqgM{:D~0tzqgM{:D~.jar.jar0tzqgM{:D~0tzqgM{:D~.jar.jar");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImprovedFile improvedFile0 = new ImprovedFile("tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      archiveScanner0.addDefaultExcludes();
      stringArray0[1] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr");
      Vector<String> vector0 = new Vector<String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.createFolder(evoSuiteFile1);
      stringArray0[2] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.spliterator();
      stringArray0[3] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[4] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      stringArray0[5] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      archiveScanner0.includes = stringArray0;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr");
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5629442020541537
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("tzqgM{:D~/tzqgM{:D~/tzqgM{:D~0tzqgM{:D~.jar.jar0tzqgM{:D~0tzqgM{:D~.jar.jar");
      FileSystemHandling.createFolder(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("tzqgM{:D~/tzqgM{:D~/tzqgM{:D~0tzqgM{:D~.jar.jar0tzqgM{:D~0tzqgM{:D~.jar.jar");
      FileSystemHandling.createFolder(evoSuiteFile2);
      ImprovedFile improvedFile0 = new ImprovedFile("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar", "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      stringArray0[1] = "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[2] = "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      stringArray0[3] = "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      ImprovedFile.createTempDirectory("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar", "Error trying to copy file to staging directory.  Input file: ", (File) improvedFile1);
      stringArray0[4] = "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      stringArray0[5] = "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      archiveScanner0.includes = stringArray0;
      System.setCurrentTimeMillis(55L);
      System.setCurrentTimeMillis(55L);
      System.setCurrentTimeMillis(490L);
      System.setCurrentTimeMillis((-1371L));
      System.setCurrentTimeMillis((-1192L));
      archiveScanner0.scandir(improvedFile0, "`fkBBpTsctKh_F", false);
      assertEquals(0, ArchiveScanner.FILE);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("HejwwYss|+\bL\"\"@", "HejwwYss|+\bL\"\"@");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.filesExcluded = vector0;
      stringArray0[0] = "HejwwYss|+\bL\"\"@";
      stringArray0[1] = "HejwwYss|+\bL\"\"@";
      stringArray0[2] = "HejwwYss|+\bL\"\"@";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.addDefaultExcludes();
      Vector<Integer> vector1 = new Vector<Integer>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Object object1 = new Object();
      vector1.removeIf(predicate2);
      predicate1.test("HejwwYss|+\bL\"\"@");
      Integer integer0 = new Integer(2);
      predicate3.or(predicate0);
      DirectoryScanner.matchPatternStart(".ZIP", "HejwwYss|+\bL\"\"@");
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
      predicate3.test((Object) null);
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      Object object2 = new Object();
      predicate6.or(predicate5);
      Predicate.isEqual(object2);
      Predicate<Object> predicate7 = predicate6.and(predicate3);
      predicate7.negate();
      predicate1.and(predicate5);
      predicate4.and(predicate7);
      System.setCurrentTimeMillis((-242454305));
      Integer integer1 = new Integer((-270177599));
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "HejwwYss|+\bL\"\"@", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("HejwwYss|+\bL\"\"@", "HejwwYss|+\bL\"\"@");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "HejwwYss|+\bL\"\"@";
      stringArray0[1] = "HejwwYss|+\bL\"\"@";
      stringArray0[2] = "HejwwYss|+\bL\"\"@";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.addDefaultExcludes();
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(1563);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Object object1 = new Object();
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.dirsExcluded = vector1;
      Predicate.isEqual(object1);
      vector0.removeIf(predicate3);
      predicate2.test(predicate0);
      Integer integer1 = new Integer((-242454305));
      DirectoryScanner.matchPatternStart("HejwwYss|+\bL\"\"@", "HejwwYss|+\bL\"\"@");
      Integer integer2 = new Integer((-286314635));
      archiveScanner0.isIncluded("HejwwYss|+\bL\"\"@");
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate3.or(predicate4);
      predicate3.or(predicate4);
      Vector<String> vector2 = new Vector<String>();
      Integer integer3 = new Integer(1563);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "HejwwYss|+\bL\"\"@", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("HjwHwYss|\bL\"\"@", "HjwHwYss|\bL\"\"@");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "HjwHwYss|\bL\"\"@";
      Vector<SequenceInputStream> vector0 = new Vector<SequenceInputStream>();
      archiveScanner0.filesExcluded = vector0;
      DirectoryScanner.matchPatternStart("HejwwYss|+\bL\"\"@0(Q.\"~~\",jDZ4XpMW.jar.jar", "Failed to delete directory, .jar");
      stringArray0[1] = "HjwHwYss|\bL\"\"@";
      stringArray0[2] = "HjwHwYss|\bL\"\"@";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.processArchive(improvedFile0, "HjwHwYss|\bL\"\"@");
      assertEquals("/home/ubuntu/termite/projects/78_caloriecount/HjwHwYss|\bL\"\"@", improvedFile0.getParent());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".ZIP");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".ZIP";
      stringArray0[1] = ", for eXtr ";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.dirsExcluded = vector0;
      stringArray0[2] = ", for eXtr ";
      archiveScanner0.includes = stringArray0;
      byte[] byteArray0 = new byte[9];
      Integer integer0 = new Integer((-549));
      Vector<Integer> vector1 = new Vector<Integer>();
      vector1.clear();
      vector1.add(integer0);
      Integer integer1 = new Integer((-204989046));
      Integer integer2 = new Integer((-204989046));
      vector1.add(integer2);
      Integer integer3 = new Integer(15);
      Integer integer4 = new Integer((-691));
      Integer integer5 = new Integer(209);
      vector1.add(integer5);
      archiveScanner0.excludes = stringArray0;
      Integer integer6 = new Integer(1601);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      vector1.sort(comparator0);
      Integer integer7 = new Integer((byte)0);
      vector1.iterator();
      vector1.add(integer7);
      Integer integer8 = new Integer(209);
      Vector<String> vector2 = new Vector<String>();
      archiveScanner0.processDirectory(improvedFile0, ", for eXtr ", true);
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("HejwwYss|+\bL\"\"@", "HejwwYss|+\bL\"\"@");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "HejwwYss|+\bL\"\"@";
      stringArray0[1] = ", for eXtry ";
      stringArray0[2] = ", for eXtry ";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.addDefaultExcludes();
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(419);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-238952719));
      vector0.add(integer2);
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesIncluded = vector1;
      Integer integer3 = new Integer((-242454305));
      DirectoryScanner.matchPatternStart(", for eXtry ", ", for eXtry ");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Vector<SequenceInputStream> vector2 = new Vector<SequenceInputStream>();
      DirectoryScanner.matchPatternStart("gX`&(=1j]tgX", "Ql);z!9]pkwDoo8Zb");
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "HejwwYss|+\bL\"\"@", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("HejwwYss|+\bL\"\"@", "HejwwYss|+\bL\"\"@");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "HejwwYss|+\bL\"\"@";
      stringArray0[1] = ", for eXtry ";
      stringArray0[2] = ", for eXtry ";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.addDefaultExcludes();
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(419);
      Vector<Integer> vector1 = new Vector<Integer>(1);
      archiveScanner0.filesIncluded = vector1;
      Integer integer1 = new Integer(1583);
      Integer integer2 = new Integer((-1));
      vector0.add(integer2);
      improvedFile0.setWritable(false);
      Integer integer3 = new Integer((-242454305));
      DirectoryScanner.matchPatternStart(", for eXtry ", ", for eXtry ");
      Integer integer4 = new Integer((-286314635));
      Integer integer5 = new Integer((-979));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2515L);
      System.setCurrentTimeMillis(2);
      archiveScanner0.processFile(", for eXtry ");
      try { 
        archiveScanner0.scanArchive(improvedFile0, "1z+P5XH*2uJ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/HejwwYss|+\bL\"\"@/HejwwYss|+\bL\"\"@
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("HejwwYss|+\bL\"\"@", "HejwwYss|+\bL\"\"@");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "HejwwYss|+\bL\"\"@";
      stringArray0[1] = ", for eXtry ";
      stringArray0[2] = ", for eXtry ";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.addDefaultExcludes();
      improvedFile0.getAbsoluteFile();
      Integer integer0 = new Integer(2);
      Vector<Integer> vector0 = new Vector<Integer>();
      improvedFile0.setLastModified(1);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.filesExcluded = vector1;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)3;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(", for eXtry ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("HejwwYss|+\bL\"\"@", "HejwwYss|+\bL\"\"@");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "HejwwYss|+\bL\"\"@";
      stringArray0[1] = ", for eXtry ";
      stringArray0[2] = ", for eXtry ";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.addDefaultExcludes();
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(419);
      Integer integer1 = new Integer(1583);
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer((-238952719));
      vector0.add(integer3);
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesIncluded = vector1;
      Integer integer4 = new Integer((-242454305));
      DirectoryScanner.matchPatternStart(", for eXtry ", ", for eXtry ");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Vector<SequenceInputStream> vector2 = new Vector<SequenceInputStream>();
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.processArchive(improvedFile0, "HejwwYss|+\bL\"\"@");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/HejwwYss|+\bL\"\"@/HejwwYss|+\bL\"\"@
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("HejwwYss|+\bL\"\"@", "HejwwYss|+\bL\"\"@");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "HejwwYss|+\bL\"\"@";
      stringArray0[1] = "HejwwYss|+\bL\"\"@";
      stringArray0[2] = "HejwwYss|+\bL\"\"@";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.addDefaultExcludes();
      MockFile mockFile0 = new MockFile("HejwwYss|+\bL\"\"@");
      Integer integer0 = new Integer(2);
      Vector<Integer> vector0 = new Vector<Integer>();
      DirectoryScanner.matchPath("HejwwYss|+\bL\"\"@", "HejwwYss|+\bL\"\"@");
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.filesExcluded = vector1;
      mockFile0.setLastModified(1000000L);
      Integer integer1 = new Integer(2);
      archiveScanner0.processFile("HejwwYss|+\bL\"\"@");
      assertEquals(1, ArchiveScanner.DIRECTORY);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".ZIP");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".ZIP";
      stringArray0[1] = ", for eXtr ";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.dirsExcluded = vector0;
      stringArray0[2] = ", for eXtr ";
      archiveScanner0.includes = stringArray0;
      byte[] byteArray0 = new byte[9];
      Integer integer0 = new Integer((-549));
      Vector<Integer> vector1 = new Vector<Integer>();
      vector1.clear();
      vector1.add(integer0);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(0);
      vector1.add(integer2);
      Integer integer3 = new Integer(15);
      Integer integer4 = new Integer((-691));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer5 = new Integer(209);
      vector1.add(integer5);
      archiveScanner0.excludes = stringArray0;
      Integer integer6 = new Integer(1601);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer7 = new Integer((byte)0);
      vector1.add(integer7);
      Integer integer8 = new Integer(209);
      Vector<String> vector2 = new Vector<String>();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, ", for eXtr ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".ZIP");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".ZIP";
      stringArray0[1] = ", for eXtr ";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.dirsExcluded = vector0;
      stringArray0[2] = ", for eXtr ";
      archiveScanner0.includes = stringArray0;
      byte[] byteArray0 = new byte[9];
      Integer integer0 = new Integer((-571));
      Vector<Integer> vector1 = new Vector<Integer>();
      vector1.clear();
      Integer integer1 = new Integer((-204989046));
      Integer integer2 = new Integer((-204989046));
      vector1.add(integer2);
      Integer integer3 = new Integer(15);
      Integer integer4 = new Integer((-691));
      Vector<InputStream> vector2 = new Vector<InputStream>(155, (-691));
      archiveScanner0.filesNotIncluded = vector2;
      archiveScanner0.excludes = stringArray0;
      Integer integer5 = new Integer(1601);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector1.sort(comparator0);
      Integer integer6 = new Integer((byte)0);
      vector1.iterator();
      vector1.add(integer6);
      Integer integer7 = new Integer(209);
      archiveScanner0.processFile("7v'R");
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(", for eXtr ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("HejwwYss|+\bL\"\"@", "HejwwYss|+\bL\"\"@");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "HejwwYss|+\bL\"\"@";
      stringArray0[1] = "HejwwYss|+\bL\"\"@";
      stringArray0[2] = "HejwwYss|+\bL\"\"@";
      archiveScanner0.includes = stringArray0;
      DirectoryScanner.matchPath("HejwwYss|+\bL\"\"@", "HejwwYss|+\bL\"\"@");
      archiveScanner0.addDefaultExcludes();
      Integer integer0 = new Integer(2);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer1 = new Integer((-1440123201));
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsIncluded = vector1;
      Integer integer2 = new Integer(2);
      vector0.add((Integer) 1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer3 = new Integer((-178956970));
      Integer integer4 = new Integer(1);
      Integer integer5 = new Integer(1);
      Integer integer6 = new Integer(1);
      vector0.add(integer6);
      Integer integer7 = new Integer((-220028466));
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "HejwwYss|+\bL\"\"@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImprovedFile improvedFile0 = new ImprovedFile("tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[1] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[2] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[3] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[4] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[5] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector0;
      System.setCurrentTimeMillis(57L);
      System.setCurrentTimeMillis(57L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(490L);
      System.setCurrentTimeMillis((-1371L));
      System.setCurrentTimeMillis((-1192L));
      System.setCurrentTimeMillis((-329L));
      System.setCurrentTimeMillis(490L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      long long0 = 2302L;
      System.setCurrentTimeMillis(2302L);
      System.setCurrentTimeMillis((-28L));
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "'+EvB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".ZIP");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".ZIP";
      stringArray0[1] = ", for eXtr ";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.dirsExcluded = vector0;
      stringArray0[2] = ", for eXtr ";
      archiveScanner0.includes = stringArray0;
      byte[] byteArray0 = new byte[9];
      Integer integer0 = new Integer((-549));
      Vector<Integer> vector1 = new Vector<Integer>();
      vector1.clear();
      vector1.add(integer0);
      Integer integer1 = new Integer((-204989046));
      Integer integer2 = new Integer((-204989046));
      vector1.add(integer2);
      Integer integer3 = new Integer(15);
      Integer integer4 = new Integer((-691));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer5 = new Integer(209);
      vector1.add(integer5);
      archiveScanner0.excludes = stringArray0;
      Integer integer6 = new Integer(1601);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      vector1.sort(comparator0);
      Integer integer7 = new Integer((byte)0);
      vector1.add(integer7);
      Integer integer8 = new Integer(209);
      Vector<String> vector2 = new Vector<String>();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "MTvB6(~(]IMPARk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".ZIP", ".ZIP");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".ZIP";
      stringArray0[1] = ", for eXtr ";
      stringArray0[2] = ", for eXtr ";
      archiveScanner0.includes = stringArray0;
      byte[] byteArray0 = new byte[9];
      Integer integer0 = new Integer((-559));
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.clear();
      vector0.add(integer0);
      Integer integer1 = new Integer((-204989046));
      Integer integer2 = new Integer((-204989046));
      vector0.add(integer2);
      Integer integer3 = new Integer(15);
      Integer integer4 = new Integer((-712));
      Integer integer5 = new Integer(209);
      vector0.add(integer5);
      archiveScanner0.excludes = stringArray0;
      Integer integer6 = new Integer(1559);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      vector0.sort(comparator0);
      Integer integer7 = new Integer((byte)0);
      vector0.iterator();
      vector0.add(integer7);
      Integer integer8 = new Integer(2);
      Vector<String> vector1 = new Vector<String>();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, ", for eXtr ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("Hjw.ss|bL\"2@", "Hjw.ss|bL\"2@");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Hjw.ss|bL\"2@";
      stringArray0[1] = ", for eXtr ";
      stringArray0[2] = ", for eXtr ";
      archiveScanner0.includes = stringArray0;
      byte[] byteArray0 = new byte[9];
      Integer integer0 = new Integer((-559));
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.clear();
      vector0.add(integer0);
      Integer integer1 = new Integer((-204989046));
      Integer integer2 = new Integer((-204989046));
      vector0.add(integer2);
      Integer integer3 = new Integer(15);
      Integer integer4 = new Integer((-712));
      Integer integer5 = new Integer(209);
      vector0.add(integer5);
      archiveScanner0.excludes = stringArray0;
      Integer integer6 = new Integer(1559);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      vector0.sort(comparator0);
      Integer integer7 = new Integer((byte)0);
      vector0.add(integer7);
      Integer integer8 = new Integer(2);
      Vector<String> vector1 = new Vector<String>();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, ", for eXtr ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("Hjw.ss|bL\"2@", "Hjw.ss|bL\"2@");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Hjw.ss|bL\"2@";
      stringArray0[1] = ", for eXtr ";
      stringArray0[2] = ", for eXtr ";
      archiveScanner0.includes = stringArray0;
      byte[] byteArray0 = new byte[9];
      Integer integer0 = new Integer((-559));
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.clear();
      vector0.add(integer0);
      Integer integer1 = new Integer((-204989046));
      Integer integer2 = new Integer((-204989046));
      vector0.add(integer2);
      Integer integer3 = new Integer(15);
      Integer integer4 = new Integer((-712));
      Integer integer5 = new Integer(209);
      vector0.add(integer5);
      archiveScanner0.excludes = stringArray0;
      Integer integer6 = new Integer(1559);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      vector0.sort(comparator0);
      Integer integer7 = new Integer((byte)0);
      vector0.add(integer7);
      Integer integer8 = new Integer(0);
      Vector<String> vector1 = new Vector<String>();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, ", for eXtr ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImprovedFile improvedFile0 = new ImprovedFile("tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[1] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[2] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[3] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[4] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      stringArray0[5] = "tzqgM{:D~0tzqgM{:D~.oar.jar0<[f_@2Ub.jar";
      archiveScanner0.setIncludes(stringArray0);
      System.setCurrentTimeMillis(57L);
      System.setCurrentTimeMillis(57L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(490L);
      System.setCurrentTimeMillis((-1371L));
      System.setCurrentTimeMillis((-1192L));
      System.setCurrentTimeMillis((-329L));
      System.setCurrentTimeMillis(490L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      long long0 = 2302L;
      System.setCurrentTimeMillis(2302L);
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsIncluded = vector0;
      System.setCurrentTimeMillis((-28L));
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "'+EvB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("}Fg*", "}Fg*");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsNotIncluded = vector0;
      vector0.add((Integer) 0);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      archiveScanner0.setBasedir("Quit applicaio?");
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer(1);
      vector0.add((Integer) 0);
      Integer integer4 = new Integer((-180));
      Integer integer5 = new Integer(2331);
      Integer integer6 = new Integer((-214));
      Vector<Integer> vector2 = new Vector<Integer>();
      Integer integer7 = new Integer(1);
      Integer integer8 = new Integer((-214));
      vector2.add(integer8);
      vector2.add(integer7);
      vector2.add(integer4);
      Integer integer9 = new Integer(2);
      ImprovedFile.createTempImprovedFile("}Fg*", "Quit applicaio?", improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "}Fg*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".ZIP");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".ZIP";
      stringArray0[1] = ", for eXtr ";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.dirsExcluded = vector0;
      stringArray0[2] = ", for eXtr ";
      archiveScanner0.includes = stringArray0;
      byte[] byteArray0 = new byte[9];
      Integer integer0 = new Integer((-549));
      Vector<Integer> vector1 = new Vector<Integer>();
      vector1.clear();
      vector1.add(integer0);
      Integer integer1 = new Integer((-204989046));
      Integer integer2 = new Integer((-204989046));
      vector1.add(integer2);
      Integer integer3 = new Integer(15);
      archiveScanner0.addDefaultExcludes();
      Integer integer4 = new Integer((-691));
      Integer integer5 = new Integer(209);
      vector1.add(integer5);
      archiveScanner0.excludes = stringArray0;
      Integer integer6 = new Integer(1601);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyInt() , anyInt());
      vector1.sort(comparator0);
      Integer integer7 = new Integer((byte)0);
      vector1.iterator();
      vector1.add(integer7);
      Integer integer8 = new Integer(209);
      Vector<String> vector2 = new Vector<String>();
      archiveScanner0.processDirectory(improvedFile0, ", for eXtr ", true);
      assertFalse(improvedFile0.exists());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)42;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("tzqgM{:D~/tzqgM{:D~/tzqgM{:D~0tzqgM{:D~.jar.jar0tzqgM{:D~0tzqgM{:D~.jar.jar");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("tzqgM{:D~/tzqgM{:D~/tzqgM{:D~0tzqgM{:D~.jar.jar0tzqgM{:D~0tzqgM{:D~.jar.jar");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      ImprovedFile improvedFile0 = new ImprovedFile("tzqgM{:DG0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile3, "tzqgM{:DG0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      String[] stringArray0 = new String[6];
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      stringArray0[0] = "tzqgM{:DG0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      stringArray0[1] = "tzqgM{:DG0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, true);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.setPermissions(evoSuiteFile3, true, false, true);
      stringArray0[2] = "tzqgM{:DG0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      stringArray0[3] = "tzqgM{:DG0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      FileSystemHandling.createFolder(evoSuiteFile1);
      stringArray0[4] = "tzqgM{:DG0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      vector0.spliterator();
      stringArray0[5] = "tzqgM{:DG0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      archiveScanner0.includes = stringArray0;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile3);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.setPermissions(evoSuiteFile3, true, false, true);
      Vector<String> vector1 = new Vector<String>();
      FileSystemHandling.setPermissions(evoSuiteFile3, true, false, false);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "tzqgM{:DG0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      archiveScanner0.processDirectory(improvedFile0, "<f|!", true);
      assertEquals(0L, improvedFile0.getUsableSpace());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("tzqgM{:D~/tzqgM{:D~/tzqgM{:D~0tzqgM{:D~.jar.jar0tzqgM{:D~0tzqgM{:D~.jar.jar");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("tzqgM{:D~/tzqgM{:D~/tzqgM{:D~0tzqgM{:D~.jar.jar0tzqgM{:D~0tzqgM{:D~.jar.jar");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      ImprovedFile improvedFile0 = new ImprovedFile("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      String[] stringArray0 = new String[6];
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      stringArray0[0] = "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      stringArray0[1] = "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.setPermissions(evoSuiteFile2, true, false, true);
      stringArray0[2] = "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      stringArray0[3] = "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      FileSystemHandling.createFolder(evoSuiteFile0);
      stringArray0[4] = "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      vector0.spliterator();
      stringArray0[5] = "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar";
      archiveScanner0.includes = stringArray0;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      archiveScanner0.couldHoldIncluded("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      Vector<String> vector1 = new Vector<String>();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      archiveScanner0.processDirectory(improvedFile0, "<f|!", true);
      assertEquals(1, ArchiveScanner.DIRECTORY);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("tzqgM{:D~/tzqgM{:D~/tzqgM{:D~0tzqgM{:D~.jar.jar0tzqgM{:D~0tzqgM{:D~.jar.jar");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImprovedFile improvedFile0 = new ImprovedFile("tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      stringArray0[1] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr");
      Vector<String> vector0 = new Vector<String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.createFolder(evoSuiteFile1);
      stringArray0[2] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.spliterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) vector0, locale_FilteringMode0);
      stringArray0[3] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[4] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      stringArray0[5] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      archiveScanner0.includes = stringArray0;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr");
      try { 
        archiveScanner0.processDirectory(improvedFile0, "vfV]]N;FB{s6", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("tzquM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(504L);
      System.setCurrentTimeMillis((-1407L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-361L));
      System.setCurrentTimeMillis(950L);
      System.setCurrentTimeMillis(504L);
      System.setCurrentTimeMillis((-1407L));
      System.setCurrentTimeMillis((-8L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(950L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2867L));
      System.setCurrentTimeMillis((-8L));
      System.setCurrentTimeMillis((-1407L));
      System.setCurrentTimeMillis(504L);
      System.setCurrentTimeMillis(17L);
      System.setCurrentTimeMillis(17L);
      System.setCurrentTimeMillis(1000000L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(2217L);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("}Fg*", "}Fg*");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-100), 127);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, dataInputStream0);
      Vector<SequenceInputStream> vector0 = new Vector<SequenceInputStream>();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(dataInputStream0, (InputStream) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration2);
      sequenceInputStream5.read(byteArray0);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration3);
      sequenceInputStream3.read(byteArray0);
      sequenceInputStream6.close();
      SequenceInputStream sequenceInputStream7 = new SequenceInputStream(sequenceInputStream1, pushbackInputStream0);
      byteArrayInputStream0.reset();
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream8 = new SequenceInputStream(enumeration4);
      Vector<SequenceInputStream> vector1 = new Vector<SequenceInputStream>();
      Enumeration<InputStream> enumeration5 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration5).hasMoreElements();
      SequenceInputStream sequenceInputStream9 = new SequenceInputStream(enumeration5);
      SequenceInputStream sequenceInputStream10 = new SequenceInputStream(sequenceInputStream3, sequenceInputStream3);
      Enumeration<InputStream> enumeration6 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration6).hasMoreElements();
      SequenceInputStream sequenceInputStream11 = new SequenceInputStream(enumeration6);
      sequenceInputStream11.skip(1000000L);
      vector1.add(sequenceInputStream11);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector<SequenceInputStream> vector0 = new Vector<SequenceInputStream>();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      Enumeration<SequenceInputStream> enumeration3 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration4);
      sequenceInputStream0.close();
      Enumeration<InputStream> enumeration5 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration5).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration5);
      Vector<SequenceInputStream> vector1 = new Vector<SequenceInputStream>();
      Enumeration<InputStream> enumeration6 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration6).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration6);
      vector1.add(sequenceInputStream1);
      SequenceInputStream sequenceInputStream7 = new SequenceInputStream(sequenceInputStream3, sequenceInputStream0);
      vector0.add(sequenceInputStream1);
      Enumeration<InputStream> enumeration7 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration7).hasMoreElements();
      SequenceInputStream sequenceInputStream8 = new SequenceInputStream(enumeration7);
      Enumeration<SequenceInputStream> enumeration8 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration8).hasMoreElements();
      SequenceInputStream sequenceInputStream9 = new SequenceInputStream(enumeration8);
      SequenceInputStream sequenceInputStream10 = new SequenceInputStream(sequenceInputStream5, sequenceInputStream5);
      SequenceInputStream sequenceInputStream11 = new SequenceInputStream(sequenceInputStream5, sequenceInputStream2);
      sequenceInputStream5.close();
      Vector<SequenceInputStream> vector2 = new Vector<SequenceInputStream>();
      Enumeration<InputStream> enumeration9 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration9).hasMoreElements();
      SequenceInputStream sequenceInputStream12 = new SequenceInputStream(enumeration9);
      vector0.add(sequenceInputStream7);
      ImprovedFile improvedFile0 = new ImprovedFile("q");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tzqgM{:D~/tzqgM{:D~/tzqgM{:D~0tzqgM{:D~.jar.jar0tzqgM{:D~0tzqgM{:D~.jar.jar");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("tzqgM{:D~/tzqgM{:D~/tzqgM{:D~0tzqgM{:D~.jar.jar0tzqgM{:D~0tzqgM{:D~.jar.jar");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "tzqgM{:D~");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("tzqgM{:D~", "VN0\rHIt30}Fg*.jar");
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("tzqgM{:D~0tzqgM{:D~.jar.jar", "<[f_@2Ub", mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "user.dir", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.394993443200781
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ImprovedFile improvedFile0 = new ImprovedFile("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(504L);
      System.setCurrentTimeMillis((-1407L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-361L));
      System.setCurrentTimeMillis(950L);
      System.setCurrentTimeMillis(504L);
      System.setCurrentTimeMillis((-1407L));
      archiveScanner0.scandir(improvedFile0, "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar", true);
      System.setCurrentTimeMillis((-8L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(950L);
      System.setCurrentTimeMillis((-1407L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2867L));
      System.setCurrentTimeMillis((-8L));
      System.setCurrentTimeMillis((-1407L));
      System.setCurrentTimeMillis(504L);
      System.setCurrentTimeMillis(17L);
      System.setCurrentTimeMillis(17L);
      improvedFile0.createTempDir();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector<SequenceInputStream> vector0 = new Vector<SequenceInputStream>();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration2);
      Enumeration<SequenceInputStream> enumeration3 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration3);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration4);
      Enumeration<InputStream> enumeration5 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration5).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration5);
      Vector<SequenceInputStream> vector1 = new Vector<SequenceInputStream>();
      Enumeration<InputStream> enumeration6 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration6).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration6);
      vector0.add(sequenceInputStream3);
      Enumeration<SequenceInputStream> enumeration7 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration7).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration7);
      Enumeration<InputStream> enumeration8 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<InputStream> enumeration9 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration9).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration9);
      vector0.add(sequenceInputStream3);
      ImprovedFile improvedFile0 = new ImprovedFile(".jar1}~x&q\"UK!8aND.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      vector0.add(sequenceInputStream4);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tzqgM{:D~/tzqgM{:D~/tzqgM{:D~0tzqgM{:D~.jar.jar0tzqgM{:D~0tzqgM{:D~.jar.jar");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("tzqgM{:D~/tzqgM{:D~/tzqgM{:D~0tzqgM{:D~.jar.jar0tzqgM{:D~0tzqgM{:D~.jar.jar");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "tzqgM{:D~");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("tzqgM{:D~", "VN0\rHIt30}Fg*.jar");
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("V6?qNLgK0|X", "tzqgM{:D~0tzqgM{:D~.jar.jar", mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "IO error scanning directory 0IiRT.jar", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.929553510001476
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tzqgM{:D~/tzqgM{:D~/tzqgM{:D~0tzqgM{:D~.jar.jar0tzqgM{:D~0tzqgM{:D~.jar.jar");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("tzqgM{:D~/tzqgM{:D~/tzqgM{:D~0tzqgM{:D~.jar.jar0tzqgM{:D~0tzqgM{:D~.jar.jar");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "tzqgM{:D~");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("tzqgM{:D~", "VN0\rHIt30}Fg*.jar");
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("tzqgM{:D~0tzqgM{:D~.jar.jar", "<[f_@2Ub", mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      improvedFile0.tempRename();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "user.dir", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      System.setCurrentTimeMillis(57L);
      System.setCurrentTimeMillis(57L);
      System.setCurrentTimeMillis(490L);
      System.setCurrentTimeMillis(57L);
      System.setCurrentTimeMillis((-319L));
      System.setCurrentTimeMillis(950L);
      System.setCurrentTimeMillis(490L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-10L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1407L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(57L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      try { 
        archiveScanner0.scandir(improvedFile0, "dbf", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      System.setCurrentTimeMillis(18L);
      System.setCurrentTimeMillis(18L);
      System.setCurrentTimeMillis(504L);
      System.setCurrentTimeMillis((-1422L));
      System.setCurrentTimeMillis(18L);
      System.setCurrentTimeMillis((-371L));
      System.setCurrentTimeMillis(950L);
      System.setCurrentTimeMillis(504L);
      System.setCurrentTimeMillis((-1422L));
      System.setCurrentTimeMillis((-8L));
      System.setCurrentTimeMillis((-18L));
      System.setCurrentTimeMillis(950L);
      System.setCurrentTimeMillis((-1422L));
      System.setCurrentTimeMillis(18L);
      System.setCurrentTimeMillis((-2876L));
      System.setCurrentTimeMillis((-8L));
      System.setCurrentTimeMillis((-1422L));
      System.setCurrentTimeMillis(504L);
      System.setCurrentTimeMillis(17L);
      System.setCurrentTimeMillis(17L);
      System.setCurrentTimeMillis(1000003L);
      System.setCurrentTimeMillis(1000003L);
      System.setCurrentTimeMillis((-2876L));
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("HejwwIis|\bL|\"x@", "HejwwIis|\bL|\"x@");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[1] = ", for entry ";
      stringArray0[2] = "HejwwIis|\bL|\"x@";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-100);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-100), 2596);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, pushbackInputStream0);
      Vector<SequenceInputStream> vector0 = new Vector<SequenceInputStream>();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, pushbackInputStream0);
      sequenceInputStream1.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(pushbackInputStream0, sequenceInputStream0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration0);
      vector0.add(sequenceInputStream3);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tzqgM{:D~0tzqgM{:D~.jar.jar0<[f_@2Ub.jar");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      stringArray0[1] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr");
      Vector<String> vector0 = new Vector<String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile0);
      stringArray0[2] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.spliterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) vector0, locale_FilteringMode0);
      stringArray0[3] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[4] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      stringArray0[5] = "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr";
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr");
      MockFile mockFile0 = new MockFile("P<do=fYZq];<n&+8M\"K");
      MockFile mockFile1 = new MockFile(mockFile0, "tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr");
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("tzqgM#:D~0tzqgM{:D~.jar.jar0<[f9@2Ub.jr", "KchGH.jar", mockFile1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(mockFile1);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector<SequenceInputStream> vector0 = new Vector<SequenceInputStream>();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      Enumeration<SequenceInputStream> enumeration3 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration4);
      sequenceInputStream0.close();
      Enumeration<InputStream> enumeration5 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration5).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration5);
      sequenceInputStream2.read();
      Vector<SequenceInputStream> vector1 = new Vector<SequenceInputStream>();
      Enumeration<InputStream> enumeration6 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration6).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration6);
      sequenceInputStream2.read();
      SequenceInputStream sequenceInputStream7 = new SequenceInputStream(sequenceInputStream3, sequenceInputStream0);
      vector0.add(sequenceInputStream1);
      Enumeration<InputStream> enumeration7 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration7).hasMoreElements();
      SequenceInputStream sequenceInputStream8 = new SequenceInputStream(enumeration7);
      Enumeration<SequenceInputStream> enumeration8 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration8).hasMoreElements();
      SequenceInputStream sequenceInputStream9 = new SequenceInputStream(enumeration8);
      SequenceInputStream sequenceInputStream10 = new SequenceInputStream(sequenceInputStream5, sequenceInputStream5);
      SequenceInputStream sequenceInputStream11 = new SequenceInputStream(sequenceInputStream5, sequenceInputStream2);
      sequenceInputStream7.mark(1705);
      sequenceInputStream5.close();
      Vector<SequenceInputStream> vector2 = new Vector<SequenceInputStream>();
      Enumeration<InputStream> enumeration9 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration9).hasMoreElements();
      SequenceInputStream sequenceInputStream12 = new SequenceInputStream(enumeration9);
      vector0.add(sequenceInputStream7);
      ImprovedFile improvedFile0 = new ImprovedFile("q");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector<SequenceInputStream> vector0 = new Vector<SequenceInputStream>();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<SequenceInputStream> enumeration1 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream1.markSupported();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      Enumeration<SequenceInputStream> enumeration3 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration4);
      sequenceInputStream0.close();
      Enumeration<InputStream> enumeration5 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration5).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration5);
      Vector<SequenceInputStream> vector1 = new Vector<SequenceInputStream>();
      Enumeration<InputStream> enumeration6 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration6).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration6);
      vector1.add(sequenceInputStream1);
      sequenceInputStream5.read();
      sequenceInputStream2.close();
      SequenceInputStream sequenceInputStream7 = new SequenceInputStream(sequenceInputStream3, sequenceInputStream0);
      vector0.add(sequenceInputStream1);
      Enumeration<InputStream> enumeration7 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration7).hasMoreElements();
      Comparator<InputStream> comparator0 = (Comparator<InputStream>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      SequenceInputStream sequenceInputStream8 = new SequenceInputStream(enumeration7);
      Enumeration<SequenceInputStream> enumeration8 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<SequenceInputStream> enumeration9 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration9).hasMoreElements();
      SequenceInputStream sequenceInputStream9 = new SequenceInputStream(enumeration9);
      SequenceInputStream sequenceInputStream10 = new SequenceInputStream(sequenceInputStream5, sequenceInputStream5);
      SequenceInputStream sequenceInputStream11 = new SequenceInputStream(sequenceInputStream5, sequenceInputStream2);
      sequenceInputStream5.close();
      Vector<SequenceInputStream> vector2 = new Vector<SequenceInputStream>();
      Enumeration<InputStream> enumeration10 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration10).hasMoreElements();
      SequenceInputStream sequenceInputStream12 = new SequenceInputStream(enumeration10);
      SequenceInputStream sequenceInputStream13 = new SequenceInputStream(sequenceInputStream3, sequenceInputStream0);
      vector1.add(sequenceInputStream13);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "i~U~RbB77W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }
}
