/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 06:11:45 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.030596791283622
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token1.toString();
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.literal();
      xPathLexer0.hasMoreChars();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("[ (19) (mZ)");
      xPathLexer0.colon();
      xPathLexer0.at();
      xPathLexer0.equals();
      Token token3 = xPathLexer1.operatorName();
      assertNull(token3);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.638569895225968
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      xPathLexer0.mod();
      token0.toString();
      token0.toString();
      token0.toString();
      token1.toString();
      String string0 = token0.toString();
      assertEquals("[ (19) (mZ)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (15) (t7)", string1);
      
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer3.or();
      XPathLexer xPathLexer4 = new XPathLexer("D?!f ");
      xPathLexer4.and();
      Token token5 = xPathLexer4.nextToken();
      assertEquals("D", token5.getTokenText());
      
      xPathLexer2.doubleColon();
      Token token6 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.682409969152932
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (19) (mZ)", string0);
      
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("");
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(",", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer(">e>8");
      Token token5 = xPathLexer3.nextToken();
      assertEquals(">", token5.getTokenText());
      
      Token token6 = xPathLexer2.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer0.or();
      xPathLexer3.rightParen();
      String string1 = token1.toString();
      assertEquals("[ (15) (t7)", string1);
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer1.equals();
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer3.nextToken();
      assertEquals(9, token9.getTokenType());
      
      Token token10 = xPathLexer1.leftParen();
      assertEquals(1, token10.getTokenType());
      
      Token token11 = xPathLexer1.rightParen();
      assertEquals(2, token11.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9649347672415916
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      Token token0 = xPathLexer0.dollar();
      assertEquals("m", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("Z", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("i4cIC");
      Token token3 = xPathLexer2.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("i4cIC", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.leftBracket();
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer2.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer4.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(",", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer2.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("i4cIC");
      XPathLexer xPathLexer6 = new XPathLexer("mZt7, ");
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer5.whitespace();
      assertEquals((-2), token10.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0027274672985516
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIY");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.dollar();
      assertEquals("N", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("c", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("!", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("'", token3.getTokenText());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("c", token4.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token6);
      assertEquals(19, token6.getTokenType());
      assertEquals("dI", token6.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer0.literal();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightParen();
      assertEquals(2, token10.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("I$%9W,TfE}9&~lxK");
      Token token11 = xPathLexer1.minus();
      assertEquals(6, token11.getTokenType());
      assertEquals("I", token11.getTokenText());
      
      Token token12 = xPathLexer1.at();
      assertEquals("$", token12.getTokenText());
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer1.equals();
      assertEquals(21, token13.getTokenType());
      assertEquals("%", token13.getTokenText());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.058916517964371
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dWUR'9%py:C}s0XF\"");
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.currentPosition();
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("5AN0yi?r");
      xPathLexer0.setXPath("dWUR'9%py:C}s0XF\"");
      xPathLexer0.setXPath("5AN0yi?r");
      xPathLexer0.not();
      xPathLexer0.consume();
      xPathLexer0.minus();
      xPathLexer0.doubleColon();
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.LA(9);
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.LA(9);
      xPathLexer0.literal();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.572078252505638
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      XPathLexer xPathLexer1 = new XPathLexer("j\u0003amn-gbi");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("mZ", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("j\u0003amn-gbi");
      xPathLexer0.nextToken();
      Token token1 = xPathLexer1.equals();
      assertEquals("j", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer2.star();
      assertEquals("j", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.or();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals(",", token3.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("\" I,,$.PPrS<f");
      Token token4 = xPathLexer4.slashes();
      assertEquals("\"", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token5 = xPathLexer5.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer4.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals(" ", token6.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("j\u0003amn-gbi");
      Token token7 = xPathLexer6.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("j\u0003amn-gbi", token7.getTokenText());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0941926624766474
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R8a_n$Qj_-e&Gj+}}V6");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("R8a_n$Qj_-e&Gj+}}V6");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftBracket();
      xPathLexer1.number();
      xPathLexer2.notEquals();
      xPathLexer1.colon();
      xPathLexer2.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer("R8a_n$Qj_-e&Gj+}}V6");
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer1.equals();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6133562421684373
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("mZ", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.nextToken();
      Token token1 = xPathLexer1.equals();
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer1.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer3.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals(",", token4.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer4.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer3.notEquals();
      assertEquals(22, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("5:xX4pdlpe");
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token7 = xPathLexer6.pipe();
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("FtiIT");
      Token token8 = xPathLexer7.nextToken();
      assertEquals("FtiIT", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.788732659148469
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("mZ", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("-\"{qWEG!(&%8g");
      Token token2 = xPathLexer1.at();
      assertEquals("-", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("", token3.getTokenText());
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer1.or();
      Token token5 = xPathLexer0.colon();
      assertEquals("t", token5.getTokenText());
      
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals("7", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(",", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer1.rightParen();
      assertEquals(2, token9.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6106163781004017
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token1 = xPathLexer0.colon();
      assertEquals("o", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("m", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(".", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("werken.saxpath.XPathLexer", token4.getTokenText());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6745078053617606
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.at();
      assertEquals("c", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals("m", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(".", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token5 = xPathLexer1.pipe();
      assertEquals(")", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("erken.saxpath.XPathLexer", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8629163254395285
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      xPathLexer0.consume((-187));
      xPathLexer0.star();
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7012762174614504
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oMpYg81hL*tR*M@WE&");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.not();
      assertEquals("o", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("p", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.leftBracket();
      xPathLexer0.plus();
      Token token4 = xPathLexer0.plus();
      assertEquals("t", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer3.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer2.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("*", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.847889320143709
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VydE)?~*b~9");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer1.star();
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer("O[lPo.ilL`H6H");
      Token token2 = xPathLexer2.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("Vy", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("dE", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(")", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.or();
      Token token6 = xPathLexer0.plus();
      assertEquals("?", token6.getTokenText());
      
      xPathLexer2.colon();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.slashes();
      xPathLexer5.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer("[ (");
      Token token7 = xPathLexer6.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("[", token7.getTokenText());
      
      Token token8 = xPathLexer3.nextToken();
      assertEquals("O", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.plus();
      Token token9 = xPathLexer6.colon();
      assertEquals(" ", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer5.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.leftParen();
      assertEquals(1, token11.getTokenType());
      
      Token token12 = xPathLexer1.plus();
      assertEquals(5, token12.getTokenType());
      
      Token token13 = xPathLexer2.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer5.not();
      assertEquals(23, token14.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6989591438319898
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      xPathLexer0.plus();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("hMBxqU", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.leftBracket();
      xPathLexer0.not();
      XPathLexer xPathLexer5 = new XPathLexer("64hMBxqU");
      Token token5 = xPathLexer5.plus();
      assertEquals("6", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token6 = xPathLexer5.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("4", token6.getTokenText());
      
      Token token7 = xPathLexer5.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("h", token7.getTokenText());
      
      Token token8 = xPathLexer3.leftBracket();
      assertEquals(3, token8.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0516491406895914
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/`E^l{JnnF=b");
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      token0.toString();
      xPathLexer0.relationalOperator();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (1) (/)", string0);
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("{J", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("n", token3.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals("F", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer1.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer1.slashes();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("=", token8.getTokenText());
      
      Token token9 = xPathLexer1.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("b", token10.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (1) (/)");
      Token token11 = xPathLexer2.leftParen();
      assertEquals(1, token11.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7904253822073701
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=QkRZ1{4<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("=", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("Q", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      Token token6 = xPathLexer3.pipe();
      assertEquals("[", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("RZ1", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.110933184699185
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      xPathLexer0.operatorName();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer1.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer1.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.slashes();
      xPathLexer2.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer("mZt7, ");
      Token token7 = xPathLexer3.pipe();
      assertEquals("m", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer3.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("Zt7", token8.getTokenText());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.228660157749534
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIY");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("?^1; 8cwO=:x<Y'\u0002*");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("!", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer1.consume(0);
      xPathLexer0.consume(14);
      Token token2 = xPathLexer1.whitespace();
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer1.mod();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      xPathLexer1.operatorName();
      Token token7 = xPathLexer1.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("^", token7.getTokenText());
      
      Token token8 = xPathLexer1.star();
      assertEquals(20, token8.getTokenType());
      assertEquals("1", token8.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("?^1; 8cwO=:x<Y'\u0002*");
      Token token9 = xPathLexer2.leftBracket();
      assertEquals("?", token9.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer2.pipe();
      assertEquals(17, token10.getTokenType());
      assertEquals("^", token10.getTokenText());
      
      Token token11 = xPathLexer1.nextToken();
      assertEquals("; 8cwO=:x<Y'\u0002*", token11.getTokenText());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9465807740845977
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yc!'c+dIf");
      XPathLexer xPathLexer1 = new XPathLexer("yc!'c+dIf");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(23, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer1.at();
      assertEquals("y", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("yc!'c+dIf");
      xPathLexer2.nextToken();
      xPathLexer2.doubleColon();
      xPathLexer0.notEquals();
      Token token2 = xPathLexer1.dollar();
      assertEquals("c", token2.getTokenText());
      
      xPathLexer2.operatorName();
      Token token3 = xPathLexer1.dots();
      assertEquals("!", token3.getTokenText());
      
      xPathLexer1.at();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer3.consume(97);
      Token token5 = xPathLexer3.dots();
      assertEquals(13, token5.getTokenType());
      
      xPathLexer3.or();
      Token token6 = xPathLexer2.doubleColon();
      assertEquals("c+", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.identifier();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer1.minus();
      assertEquals(6, token7.getTokenType());
      
      xPathLexer4.colon();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer0.star();
      assertEquals("+", token8.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("yc!'c+dIf");
      Token token9 = xPathLexer6.notEquals();
      assertEquals("yc", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer4.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer3.consume((-2));
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      assertEquals("d", token11.getTokenText());
      
      xPathLexer0.mod();
      Token token12 = xPathLexer0.identifier();
      assertEquals("If", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.596600309901059
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R8a_n$Qj_-e&Gj+}}V6");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.doubleColon();
      xPathLexer0.consume((-2922));
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.5425037092423106
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token1.toString();
      String string0 = token0.toString();
      assertEquals("[ (19) (mZ)", string0);
      
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer("[ (15) (t7)");
      Token token2 = xPathLexer1.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      Token token3 = xPathLexer1.at();
      assertEquals(" ", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("");
      XPathLexer xPathLexer3 = new XPathLexer(">e>8");
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      Token token4 = xPathLexer3.relationalOperator();
      assertEquals(9, token4.getTokenType());
      assertEquals(">", token4.getTokenText());
      
      xPathLexer3.and();
      String string1 = token1.toString();
      assertEquals("[ (15) (t7)", string1);
      
      Token token5 = xPathLexer0.plus();
      assertEquals(" ", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("(", token6.getTokenText());
      
      Token token7 = xPathLexer3.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("e", token7.getTokenText());
      
      Token token8 = xPathLexer1.leftBracket();
      assertEquals("1", token8.getTokenText());
      assertEquals(3, token8.getTokenType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8004154780795734
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (15) (mZt7)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("[ (15) (mZt7)");
      Token token1 = xPathLexer1.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.slashes();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.or();
      Token token2 = xPathLexer2.leftBracket();
      assertEquals("[", token2.getTokenText());
      
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer2.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals(" ", token4.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.consume(100);
      xPathLexer4.slashes();
      Token token5 = xPathLexer3.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer0.slashes();
      assertEquals(" ", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer2.pipe();
      assertEquals("(", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer2.nextToken();
      assertEquals(30, token8.getTokenType());
      assertEquals("15", token8.getTokenText());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.consume((-423));
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.990344829050882
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftParen();
      token1.toString();
      xPathLexer0.relationalOperator();
      token1.toString();
      token0.toString();
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token1);
      XPathLexer xPathLexer1 = new XPathLexer(")");
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.minus();
      xPathLexer1.slashes();
      xPathLexer0.and();
      xPathLexer1.plus();
      xPathLexer0.colon();
      Token token2 = xPathLexer0.slashes();
      xPathLexer1.slashes();
      xPathLexer1.pipe();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer2.leftParen();
      assertNotSame(token3, token2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2305344538576912
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{:IT3]Cid#g!t");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      token0.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals(18, token1.getTokenType());
      assertEquals("[ (18) (:)", string0);
      
      Token token2 = xPathLexer0.rightParen();
      token2.toString();
      String string1 = token2.toString();
      assertEquals("[ (2) (I)", string1);
      
      String string2 = token0.toString();
      assertEquals("[ (13) ({)", string2);
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.at();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer0.dots();
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.or();
      Token token5 = xPathLexer0.colon();
      assertEquals("3", token5.getTokenText());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5529631979307712
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/`E^l{JnnF=b");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("/", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.relationalOperator();
      xPathLexer1.doubleColon();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("`E^l{JnnF=b", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("`E", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("^", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("/`E^l{JnnF=b");
      xPathLexer1.or();
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer1.literal();
      assertNull(token5);
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer3.or();
      Token token7 = xPathLexer3.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer5.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer2.pipe();
      assertEquals(17, token9.getTokenType());
      assertEquals("/", token9.getTokenText());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7916636468740852
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":IT3]Cid#g!t");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (13) (:)", string0);
      
      xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.dollar();
      assertEquals("T", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.or();
      Token token2 = xPathLexer0.plus();
      assertEquals("3", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("]", token4.getTokenText());
      
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer1.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("Cid#g!t", token7.getTokenText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.182088064700196
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.plus();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("4", token1.getTokenText());
      
      xPathLexer0.comma();
      String string0 = token0.toString();
      assertEquals("[ (5) (6)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      xPathLexer1.setXPath("64hMBxqU");
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("MBxqU", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("I9b~P#$^e");
      Token token4 = xPathLexer0.nextToken();
      xPathLexer1.and();
      xPathLexer1.setPreviousToken(token4);
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken((Token) null);
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer2.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer1.leftBracket();
      assertEquals("6", token8.getTokenText());
      
      xPathLexer3.or();
      xPathLexer0.plus();
      Token token9 = xPathLexer2.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer1.slashes();
      assertEquals(11, token10.getTokenType());
      assertEquals("4", token10.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer4.leftBracket();
      assertEquals(3, token11.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8234206410779454
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R8a_n$Qj_-e&Gj+}}V6");
      xPathLexer0.identifier();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.currentPosition();
      xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.notEquals();
      xPathLexer1.equals();
      Token token1 = xPathLexer1.leftParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9552802149518356
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R]\b.)/");
      xPathLexer0.number();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("5&F*5gi0\"&/");
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      int int0 = 0;
      xPathLexer1.minus();
      XPathLexer xPathLexer2 = new XPathLexer("5&F*5gi0\"&/");
      xPathLexer2.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.and();
      xPathLexer1.number();
      xPathLexer0.comma();
      xPathLexer3.colon();
      xPathLexer3.operatorName();
      xPathLexer0.dots();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      xPathLexer4.dollar();
      xPathLexer2.consume((-2));
      xPathLexer4.dots();
      xPathLexer4.or();
      xPathLexer4.plus();
      // Undeclared exception!
      try { 
        xPathLexer2.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1196718146465185
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.colon();
      xPathLexer0.colon();
      xPathLexer0.literal();
      xPathLexer0.consume(762);
      xPathLexer0.consume((-2032));
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.133500021637609
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/`E^l{JnnF=b");
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      token0.toString();
      xPathLexer0.relationalOperator();
      token0.toString();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.at();
      xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.and();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.consume((-2));
      xPathLexer0.dots();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.minus();
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer0.notEquals();
      xPathLexer0.equals();
      xPathLexer1.consume((-987));
      xPathLexer2.colon();
      // Undeclared exception!
      try { 
        xPathLexer1.mod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9451480893041002
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token1.toString();
      String string0 = token0.toString();
      assertEquals("[ (19) (mZ)", string0);
      
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer(">e>8");
      Token token4 = xPathLexer3.nextToken();
      assertEquals(">", token4.getTokenText());
      assertEquals(9, token4.getTokenType());
      
      Token token5 = xPathLexer2.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.or();
      token1.toString();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals(",", token6.getTokenText());
      
      Token token7 = xPathLexer1.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer3.nextToken();
      assertEquals("e", token8.getTokenText());
      
      xPathLexer1.leftParen();
      xPathLexer2.getPreviousToken();
      Token token9 = xPathLexer2.star();
      assertEquals(20, token9.getTokenType());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8505357793566564
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/`E^l{JnnF=b");
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer3.not();
      xPathLexer1.plus();
      xPathLexer2.colon();
      xPathLexer3.slashes();
      xPathLexer1.slashes();
      xPathLexer3.pipe();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer1.leftParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7903472223081067
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token1 = xPathLexer0.colon();
      assertEquals("o", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals("e", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("rken.saxpath.XPathLexer", token6.getTokenText());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7252615455335771
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.endPosition();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.notEquals();
      xPathLexer1.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.star();
      xPathLexer2.or();
      Token token0 = xPathLexer2.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4050121896992225
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.at();
      assertEquals("c", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer1.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(14, token5.getTokenType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.810430885635183
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dots();
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer1.star();
      assertEquals(20, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("m");
      xPathLexer2.setPreviousToken((Token) null);
      xPathLexer1.nextToken();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("64", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("hM", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer2.dollar();
      assertEquals("m", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      xPathLexer0.plus();
      xPathLexer1.colon();
      Token token4 = xPathLexer0.plus();
      assertEquals("x", token4.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer3.pipe();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("qU", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer5.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer4.or();
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer5.slashes();
      Token token8 = xPathLexer4.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer3.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer0.leftParen();
      assertEquals(1, token10.getTokenType());
      
      Token token11 = xPathLexer1.slashes();
      assertEquals(11, token11.getTokenType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6880458006266925
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/`E^l{JnnF=b");
      Token token0 = xPathLexer0.leftParen();
      Token token1 = xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.leftParen();
      token0.toString();
      xPathLexer0.relationalOperator();
      token0.toString();
      token0.toString();
      Token token3 = xPathLexer0.whitespace();
      token1.toString();
      token3.toString();
      token1.toString();
      String string0 = token2.toString();
      assertEquals("[ (1) (^)", string0);
      
      token3.toString();
      String string1 = token3.toString();
      assertEquals("[ (-2) ()", string1);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (-2) ()");
      Token token4 = xPathLexer1.at();
      xPathLexer1.setPreviousToken(token4);
      assertEquals("[", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals("{", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("JnnF", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.colon();
      assertEquals("=", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.whitespace();
      assertEquals("", token9.getTokenText());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8000060450915552
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer1.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer1.dollar();
      assertEquals(26, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer0.plus();
      XPathLexer xPathLexer3 = new XPathLexer("^^H8L");
      Token token3 = xPathLexer3.colon();
      assertEquals("^", token3.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer5.slashes();
      xPathLexer2.relationalOperator();
      Token token4 = xPathLexer3.pipe();
      assertEquals("^", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer3.nextToken();
      assertEquals("H8L", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.plus();
      xPathLexer5.colon();
      XPathLexer xPathLexer8 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token6 = xPathLexer8.slashes();
      assertEquals("c", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer8.leftParen();
      assertEquals("o", token7.getTokenText());
      
      Token token8 = xPathLexer1.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer8.equals();
      assertEquals(21, token9.getTokenType());
      assertEquals("m", token9.getTokenText());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token10 = xPathLexer9.nextToken();
      assertEquals((-1), token10.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4831252412438012
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "SNc!'c+dIB";
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume((-412));
      token0.toString();
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8959924413763345
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      xPathLexer0.leftBracket();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftBracket();
      xPathLexer1.number();
      xPathLexer0.colon();
      xPathLexer0.at();
      xPathLexer2.rightBracket();
      xPathLexer0.slashes();
      xPathLexer2.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("/&Hhm7;&@DiwjEK7Dh");
      xPathLexer3.nextToken();
      Token token1 = xPathLexer0.leftParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8553616128629074
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (23) (~)");
      xPathLexer0.at();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer0.dots();
      xPathLexer1.at();
      xPathLexer1.nextToken();
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.equals();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.mod();
      assertNull(token2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.591512863057803
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/`E^l{JnnF=b");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("/", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("`E", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("^l{JnnF=b", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("{", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("/`E^l{JnnF=b");
      xPathLexer0.or();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("J", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer0.literal();
      assertEquals(27, token6.getTokenType());
      assertNotNull(token6);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer3.slashes();
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.or();
      Token token8 = xPathLexer2.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer4.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer2.leftBracket();
      assertEquals(3, token10.getTokenType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.1861841247473652
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("mZ", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("t", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("7", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(",", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.and();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer0.not();
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      xPathLexer0.setPreviousToken(token4);
      assertEquals(17, token4.getTokenType());
      assertEquals(" ", token4.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      xPathLexer0.literal();
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      Token token11 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("mZt7, ");
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer0.equals();
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4844455612415954
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/`E^l{JnnF=b");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("/", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.relationalOperator();
      xPathLexer1.doubleColon();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("`E^l{JnnF=b", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("`E", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("^", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("/`E^l{JnnF=b");
      xPathLexer1.or();
      xPathLexer1.not();
      xPathLexer1.leftBracket();
      Token token4 = xPathLexer2.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("/", token4.getTokenText());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("l", token5.getTokenText());
      
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer2.slashes();
      assertEquals("`", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer3.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer3.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals("{JnnF=b", token10.getTokenText());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9752020196053277
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.plus();
      assertEquals(5, token0.getTokenType());
      
      xPathLexer1.rightBracket();
      xPathLexer0.notEquals();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer1.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.minus();
      assertEquals(6, token7.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer3 = new XPathLexer("PP8P=am<R$j");
      Token token8 = xPathLexer3.doubleColon();
      assertEquals("PP", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer2.star();
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("PP8P=am<R$j");
      Token token10 = xPathLexer4.leftParen();
      assertEquals(1, token10.getTokenType());
      assertEquals("P", token10.getTokenText());
      
      Token token11 = xPathLexer1.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      
      xPathLexer2.consume();
      Token token13 = xPathLexer0.dollar();
      assertEquals(26, token13.getTokenType());
      
      xPathLexer3.or();
      Token token14 = xPathLexer4.nextToken();
      assertEquals("P8P", token14.getTokenText());
      assertEquals(15, token14.getTokenType());
      
      xPathLexer1.identifier();
      xPathLexer2.operatorName();
      Token token15 = xPathLexer2.rightBracket();
      assertEquals(4, token15.getTokenType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.63970485618312
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.at();
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.LA(112);
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("1");
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.LA(0);
      xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer0.at();
      Token token2 = xPathLexer1.colon();
      assertNotSame(token2, token1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.4381661616864787
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/`E^l{JnnF=b");
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      token0.toString();
      xPathLexer0.relationalOperator();
      token0.toString();
      token0.toString();
      xPathLexer0.whitespace();
      xPathLexer0.notEquals();
      xPathLexer0.whitespace();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      xPathLexer0.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("[ (1) (/)");
      xPathLexer2.or();
      xPathLexer1.plus();
      xPathLexer0.colon();
      xPathLexer1.slashes();
      xPathLexer0.leftBracket();
      xPathLexer2.whitespace();
      xPathLexer1.equals();
      xPathLexer2.colon();
      Token token1 = xPathLexer1.relationalOperator();
      assertNull(token1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5344406158269235
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("mZ", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("L%");
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(32, token1.getTokenType());
      assertEquals(",", token1.getTokenText());
      
      Token token2 = xPathLexer1.doubleColon();
      assertEquals("L%", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals(" ", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.or();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.or();
      Token token7 = xPathLexer4.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer5.pipe();
      assertEquals(17, token9.getTokenType());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.854138802830585
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1+RO");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("+R", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer1.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("O", token4.getTokenText());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.525491607454638
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      XPathLexer xPathLexer1 = new XPathLexer("j\u0003amn-gbi");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("mZ", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("j\u0003amn-gbi");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("t7", token1.getTokenText());
      
      Token token2 = xPathLexer1.equals();
      assertEquals("j", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer2.star();
      assertEquals("j", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.or();
      Token token4 = xPathLexer0.at();
      assertEquals(",", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("\" I,,$.PPrS<f");
      Token token5 = xPathLexer4.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("\"", token5.getTokenText());
      
      Token token6 = xPathLexer4.not();
      assertEquals(" ", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer5.not();
      assertEquals(23, token7.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8562910319505277
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oMpYg81hL*tR*M@WE&");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("o", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("MpYg81hL", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer2.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("*", token4.getTokenText());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("R", token6.getTokenText());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("*", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("M@WE&", token8.getTokenText());
      
      Token token9 = xPathLexer2.rightParen();
      assertEquals(2, token9.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.9040114338715721
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (~)", string0);
      
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string1 = token1.toString();
      assertEquals("[ (15) (S)", string1);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.dots();
      assertEquals("&", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("I", token3.getTokenText());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("W", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      Token token5 = xPathLexer1.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals("n", token6.getTokenText());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.515649619775352
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("n3fm}");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.leftBracket();
      XPathLexer xPathLexer4 = new XPathLexer("n3fm}");
      Token token0 = xPathLexer4.not();
      xPathLexer4.plus();
      xPathLexer1.colon();
      xPathLexer2.leftBracket();
      XPathLexer xPathLexer5 = new XPathLexer("n3fm}");
      xPathLexer4.nextToken();
      Token token1 = xPathLexer1.leftParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.8817391438423887
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oMpYg81hL*tR*M@WE&");
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      Token token1 = xPathLexer0.slashes();
      assertEquals("*", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.pipe();
      assertEquals("t", token2.getTokenText());
      
      xPathLexer2.colon();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer2.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer2.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer1.colon();
      xPathLexer1.slashes();
      Token token7 = xPathLexer3.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer2.pipe();
      assertEquals(17, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer4.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token10 = xPathLexer3.colon();
      assertEquals(18, token10.getTokenType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.158831190545739
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{:IT3]Cid#g!t");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) ({)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals(":", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.or();
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer1.leftBracket();
      xPathLexer1.setPreviousToken(token3);
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("I", token4.getTokenText());
      
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("T3", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token7 = xPathLexer2.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.leftBracket();
      xPathLexer4.plus();
      Token token8 = xPathLexer4.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer1.slashes();
      assertEquals(11, token9.getTokenType());
      
      xPathLexer4.leftParen();
      Token token10 = xPathLexer3.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer1.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer0.not();
      assertEquals("C", token12.getTokenText());
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer1.leftBracket();
      assertEquals(3, token13.getTokenType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.461594829494279
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (~)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (23) (~)");
      String string1 = token1.toString();
      assertEquals("[ (15) (S)", string1);
      
      Token token2 = xPathLexer0.at();
      assertEquals("&", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer1.setPreviousToken(token1);
      Token token3 = xPathLexer0.slashes();
      assertEquals("I", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("W", token4.getTokenText());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals(3, token5.getTokenType());
      assertEquals("[", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals("n", token6.getTokenText());
      
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals(" ", token7.getTokenText());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.816661265841424
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("mZ", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("-\"{qWEG!(&%8g");
      Token token2 = xPathLexer1.at();
      assertEquals("-", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer1.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("\"", token3.getTokenText());
      
      xPathLexer1.or();
      xPathLexer0.colon();
      Token token4 = xPathLexer1.colon();
      assertEquals("{", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals("7", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals(",", token6.getTokenText());
      
      Token token7 = xPathLexer0.not();
      assertEquals(" ", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5617084102373497
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":IT3]Cid#g!t");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (13) (:)", string0);
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.setPreviousToken((Token) null);
      Token token2 = xPathLexer0.nextToken();
      assertEquals("T3", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("]", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("i", token4.getTokenText());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("d#", token5.getTokenText());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9886166207455471
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oMpYg81hL*tR*M@WE&");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("o", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("*t", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.star();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("*", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("=QkRZ1{4<");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.leftBracket();
      assertEquals("=", token4.getTokenText());
      
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals("@", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals("W", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals("E", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer1.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals("&", token10.getTokenText());
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals("", token11.getTokenText());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.048763682744179
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.literal();
      Token token1 = xPathLexer0.star();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("\"5I8w3Gbz{') SWB5{");
      XPathLexer xPathLexer2 = new XPathLexer("p&xi94>[");
      xPathLexer2.slashes();
      boolean boolean0 = xPathLexer2.isIdentifierChar('L');
      assertTrue(boolean0);
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("\"5I8w3Gbz{') SWB5{");
      xPathLexer3.div();
      Token token8 = xPathLexer1.doubleColon();
      assertEquals("\"5", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("\"5I8w3Gbz{') SWB5{");
      Token token9 = xPathLexer4.slashes();
      assertEquals("\"", token9.getTokenText());
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer3.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
      
      Token token12 = xPathLexer2.plus();
      assertEquals(5, token12.getTokenType());
      assertEquals("&", token12.getTokenText());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6420414842437916
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer1.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer1.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("6", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer2.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer2.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(")");
      Token token5 = xPathLexer4.plus();
      assertEquals(")", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer2.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer4.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer2.pipe();
      Token token8 = xPathLexer2.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(30, token9.getTokenType());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.9419477608420732
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      xPathLexer0.setXPath(".4XP}c+b}:Q4GCh");
      Token token2 = xPathLexer0.nextToken();
      assertEquals(31, token2.getTokenType());
      
      xPathLexer0.pipe();
      Token token3 = xPathLexer0.dollar();
      assertEquals("P", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("}", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer1.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer2.slashes();
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      assertEquals("+", token9.getTokenText());
      
      Token token10 = xPathLexer1.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer2.nextToken();
      assertEquals((-1), token11.getTokenType());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5016793353102231
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Vm7, ");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("Vm", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("7", token1.getTokenText());
      
      Token token2 = xPathLexer1.equals();
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.or();
      Token token3 = xPathLexer0.at();
      assertEquals(",", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer3.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer3.not();
      assertEquals(23, token6.getTokenType());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.0485422700340385
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dots();
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer1.star();
      assertEquals(20, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("m");
      XPathLexer xPathLexer3 = new XPathLexer("m");
      Token token1 = xPathLexer3.nextToken();
      assertEquals("m", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer3.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer3.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer2.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("m", token4.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.or();
      xPathLexer3.plus();
      xPathLexer1.colon();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.slashes();
      xPathLexer3.relationalOperator();
      Token token5 = xPathLexer4.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("64", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.plus();
      Token token7 = xPathLexer3.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer6.slashes();
      assertEquals(11, token8.getTokenType());
      
      xPathLexer4.leftParen();
      Token token9 = xPathLexer3.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer5.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer4.not();
      assertEquals(23, token11.getTokenType());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.9100321687615691
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.literal();
      xPathLexer0.mod();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.at();
      xPathLexer0.leftBracket();
      xPathLexer0.rightParen();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      xPathLexer0.consume((-449));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.9640452397918629
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l?LM_\"1>gXuP,");
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("?", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("L", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals("M", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("_", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("\"", token5.getTokenText());
      
      xPathLexer0.slashes();
      Token token6 = xPathLexer0.slashes();
      assertEquals(">", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("g", token7.getTokenText());
      
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.leftParen();
      assertEquals("X", token8.getTokenText());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7041587413907988
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{:IT3]Cid#g!t");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.dots();
      assertEquals("{", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.dollar();
      assertEquals("I", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals("T", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("{:IT3]Cid#g!t");
      Token token3 = xPathLexer2.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.leftBracket();
      Token token4 = xPathLexer3.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals("3", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer2.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("{", token6.getTokenText());
      
      Token token7 = xPathLexer2.slashes();
      assertEquals(":", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer2.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("I", token8.getTokenText());
      
      Token token9 = xPathLexer1.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals("]", token10.getTokenText());
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer4.identifierOrOperatorName();
      assertEquals(15, token11.getTokenType());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6342911383883845
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oMpYg81hL*tR*M@WE&");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("o", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("M", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      Token token2 = xPathLexer2.nextToken();
      assertEquals(")", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer2.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals(" (", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("pY", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.plus();
      Token token6 = xPathLexer0.colon();
      assertEquals("8", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.slashes();
      xPathLexer2.relationalOperator();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("1", token7.getTokenText());
      
      xPathLexer4.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer0.plus();
      Token token8 = xPathLexer3.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer2.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer4.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer6.leftParen();
      assertEquals(1, token11.getTokenType());
      
      Token token12 = xPathLexer0.plus();
      assertEquals(5, token12.getTokenType());
      assertEquals("L", token12.getTokenText());
      
      Token token13 = xPathLexer3.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer0.not();
      assertEquals(23, token14.getTokenType());
      assertEquals("*", token14.getTokenText());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6765276206778712
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIY");
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftBracket();
      xPathLexer0.not();
      xPathLexer1.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.colon();
      xPathLexer1.slashes();
      xPathLexer2.leftBracket();
      xPathLexer3.pipe();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.4000753564790607
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oMpYg81hL*tR*M@WE&");
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer1.leftBracket();
      xPathLexer2.not();
      xPathLexer0.plus();
      xPathLexer0.colon();
      xPathLexer0.slashes();
      xPathLexer1.leftBracket();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.9230622926206302
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1+RO");
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) (1)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals(5, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer1.leftBracket();
      xPathLexer1.setPreviousToken(token3);
      xPathLexer2.dots();
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("sf|zFB4j/nz1gAd");
      Token token5 = xPathLexer3.nextToken();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer3.leftBracket();
      assertEquals("|", token6.getTokenText());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer5.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer2.plus();
      Token token9 = xPathLexer4.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer2.slashes();
      assertEquals(11, token10.getTokenType());
      
      xPathLexer4.leftParen();
      XPathLexer xPathLexer6 = new XPathLexer("[ (17) (1)");
      xPathLexer6.plus();
      Token token11 = xPathLexer1.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer2.not();
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer4.doubleColon();
      assertEquals(19, token13.getTokenType());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.9817082517419558
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R8a_n$Qj_-e&Gj+}}V6");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.plus();
      xPathLexer0.comma();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer1.at();
      xPathLexer1.rightBracket();
      xPathLexer0.slashes();
      xPathLexer1.pipe();
      xPathLexer1.pipe();
      Token token1 = xPathLexer0.nextToken();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.7088275892672382
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      XPathLexer xPathLexer1 = new XPathLexer("j\u0003amn-gbi");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("mZ", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("j\u0003amn-gbi");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("t7", token1.getTokenText());
      
      Token token2 = xPathLexer1.equals();
      assertEquals("j", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("%'2H3");
      Token token3 = xPathLexer3.star();
      assertEquals("%", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer1.or();
      xPathLexer4.not();
      Token token4 = xPathLexer1.leftBracket();
      assertEquals("\u0003", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer3.not();
      assertEquals("'", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer2.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("j", token6.getTokenText());
      
      Token token7 = xPathLexer4.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer2.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("\u0003", token8.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.pipe();
      Token token9 = xPathLexer2.pipe();
      assertEquals("m", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer2.nextToken();
      assertEquals("n-gbi", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6160870474034126
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R8a_n$Qj_-e&Gj+}}V6");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.leftBracket();
      xPathLexer2.not();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.colon();
      xPathLexer1.slashes();
      xPathLexer1.pipe();
      Token token1 = xPathLexer2.nextToken();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.7352865078200168
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "64hMBxqU";
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      xPathLexer0.endPosition();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.and();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.9642305973596805
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oMpYg81hL*tR*M@WE&");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("oMpYg81hL", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("*", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("t", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("R*M@WE&", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.colon();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("M", token5.getTokenText());
      
      Token token6 = xPathLexer0.colon();
      assertEquals("@", token6.getTokenText());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer1.pipe();
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      assertEquals("E", token8.getTokenText());
      
      Token token9 = xPathLexer2.nextToken();
      assertEquals((-1), token9.getTokenType());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.7900327876333444
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.at();
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.LA(112);
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("1");
      xPathLexer0.slashes();
      xPathLexer0.comma();
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      xPathLexer0.dollar();
      xPathLexer0.literal();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.notEquals();
      xPathLexer0.or();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.6101282654167741
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume((-412));
      xPathLexer0.star();
      xPathLexer0.consume(88);
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.0014230073833894
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.consume(0);
      xPathLexer0.relationalOperator();
      xPathLexer0.consume(0);
      xPathLexer0.setXPath("v)ssal");
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.div();
      assertNull(token1);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.1757669746258923
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("c!", token1.getTokenText());
      
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      Token token2 = xPathLexer0.slashes();
      assertEquals("+", token2.getTokenText());
      
      xPathLexer0.pipe();
      Token token3 = xPathLexer0.colon();
      assertEquals("I", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.and();
      xPathLexer0.plus();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token8);
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      xPathLexer0.literal();
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      xPathLexer0.slashes();
      Token token12 = xPathLexer0.dollar();
      assertEquals(26, token12.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token13 = xPathLexer1.plus();
      assertEquals(5, token13.getTokenType());
      
      xPathLexer0.colon();
      Token token14 = xPathLexer1.slashes();
      assertEquals(11, token14.getTokenType());
      
      Token token15 = xPathLexer0.leftBracket();
      assertEquals(3, token15.getTokenType());
      
      Token token16 = xPathLexer0.whitespace();
      assertEquals((-2), token16.getTokenType());
      
      Token token17 = xPathLexer0.equals();
      assertEquals(21, token17.getTokenType());
      
      Token token18 = xPathLexer0.colon();
      assertEquals(18, token18.getTokenType());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.8727134372629157
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.star();
      assertEquals("c", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("SNc!'c+dIB");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("!'", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer1.notEquals();
      assertEquals("!'", token4.getTokenText());
      
      Token token5 = xPathLexer1.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("c", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.literal();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("c", token6.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.pipe();
      xPathLexer2.or();
      Token token7 = xPathLexer1.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      assertEquals("+", token9.getTokenText());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.0890656781426467
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "com.werken.saxpath.XPathLexer";
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.identifier();
      xPathLexer0.consume((-3637));
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.not();
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.0651619180558063
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIY");
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (3) (S)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer("18rbYT.eZn`=");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.leftBracket();
      xPathLexer3.setPreviousToken(token1);
      assertEquals("Nc", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer2.dots();
      assertEquals("1", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      xPathLexer1.at();
      Token token3 = xPathLexer2.nextToken();
      assertEquals("8", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer3.at();
      assertEquals(16, token4.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("[ (3) (S)");
      Token token5 = xPathLexer5.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("[", token5.getTokenText());
      
      Token token6 = xPathLexer4.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer2.pipe();
      assertEquals("r", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("p]+0#r(vLpE*p4rq=1");
      Token token8 = xPathLexer5.equals();
      assertEquals(21, token8.getTokenType());
      assertEquals(" ", token8.getTokenText());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.8981101441846626
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer1.star();
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("m");
      XPathLexer xPathLexer3 = new XPathLexer("m");
      Token token2 = xPathLexer3.nextToken();
      assertEquals("m", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer3.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer3.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer2.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("m", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.or();
      Token token6 = xPathLexer3.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer1.colon();
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.slashes();
      xPathLexer3.relationalOperator();
      xPathLexer4.pipe();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer3.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer1.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer2.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer6.pipe();
      assertEquals(17, token11.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token12 = xPathLexer1.equals();
      assertEquals(21, token12.getTokenType());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.6587311898676687
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.leftBracket();
      xPathLexer1.not();
      xPathLexer2.plus();
      xPathLexer1.colon();
      xPathLexer0.slashes();
      xPathLexer2.slashes();
      xPathLexer0.pipe();
      xPathLexer2.nextToken();
      Token token1 = xPathLexer2.leftParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.012935954425358
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oMpYg81hL*tR*M@WE&");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("*", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("*M", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("@", token4.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token5 = xPathLexer0.plus();
      assertEquals("E", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer1.comma();
      assertEquals(32, token6.getTokenType());
      
      xPathLexer0.pipe();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer1.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer2.pipe();
      assertEquals("c", token9.getTokenText());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals((-1), token11.getTokenType());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.8587438218223364
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "com.werken.saxpath.XPathLexer";
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      xPathLexer0.consume((-6265));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.8279416909724706
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIY");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("!", token2.getTokenText());
      
      xPathLexer0.star();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("c+dIY", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("=QkRZ1{4<");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.leftBracket();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("c", token4.getTokenText());
      
      Token token5 = xPathLexer2.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("SNc!'c+dIY");
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("~V4S\"eRq");
      Token token7 = xPathLexer5.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("~", token7.getTokenText());
      
      xPathLexer5.plus();
      Token token8 = xPathLexer5.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("4", token8.getTokenText());
      
      Token token9 = xPathLexer5.slashes();
      assertEquals("S", token9.getTokenText());
      assertEquals(11, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.leftParen();
      Token token10 = xPathLexer6.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer4.star();
      assertEquals(20, token11.getTokenType());
      assertEquals("S", token11.getTokenText());
      
      Token token12 = xPathLexer6.not();
      assertEquals(23, token12.getTokenType());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.8838631751022425
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.at();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("&Pd!`df- WT'");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.leftBracket();
      xPathLexer0.number();
      xPathLexer0.notEquals();
      xPathLexer2.colon();
      xPathLexer1.slashes();
      xPathLexer2.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("=QkRZ1{4<");
      xPathLexer2.equals();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.8727645017227437
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("o", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("m", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(13, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals("w", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("=QkRZ1{4<");
      Token token5 = xPathLexer1.nextToken();
      assertEquals(21, token5.getTokenType());
      assertEquals("=", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer2.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer0.plus();
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      assertEquals("k", token9.getTokenText());
      
      xPathLexer2.slashes();
      Token token10 = xPathLexer2.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer2.pipe();
      assertEquals(17, token11.getTokenType());
      
      Token token12 = xPathLexer2.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      Token token13 = xPathLexer0.leftParen();
      assertEquals("e", token13.getTokenText());
      
      Token token14 = xPathLexer0.plus();
      assertEquals(5, token14.getTokenType());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7745140461704938
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("S", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("N", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("c", token2.getTokenText());
      
      xPathLexer0.equals();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("=QkRZ1{4<");
      Token token5 = xPathLexer1.nextToken();
      assertEquals(21, token5.getTokenType());
      assertEquals("=", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer2.not();
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer2.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals("+d", token9.getTokenText());
      
      Token token10 = xPathLexer1.slashes();
      assertEquals(11, token10.getTokenType());
      assertEquals("k", token10.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer4.notEquals();
      assertEquals(22, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.or();
      Token token12 = xPathLexer3.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer5.colon();
      assertEquals(18, token13.getTokenType());
      
      Token token14 = xPathLexer2.pipe();
      assertEquals(17, token14.getTokenType());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.7441886738043548
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":IT3]Cid#g!t");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (4) (:)", string0);
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("I", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.rightBracket();
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.leftParen();
      assertEquals("3", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("]", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setPreviousToken(token2);
      Token token5 = xPathLexer3.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer2.colon();
      assertEquals(18, token6.getTokenType());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.7662505319389619
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("SNc!'c+dIB");
      xPathLexer1.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer1.notEquals();
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      xPathLexer2.plus();
      xPathLexer2.colon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.slashes();
      xPathLexer1.relationalOperator();
      // Undeclared exception!
      try { 
        xPathLexer2.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.1168349733504854
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("S", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.pipe();
      assertEquals("N", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("c!", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.colon();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("c", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      assertEquals("dIB", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer1.plus();
      Token token7 = xPathLexer0.colon();
      assertEquals("d", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      xPathLexer1.slashes();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("I", token8.getTokenText());
      
      Token token9 = xPathLexer2.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer2.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer1.leftParen();
      assertEquals(1, token11.getTokenType());
      
      Token token12 = xPathLexer0.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer0.star();
      assertEquals(20, token13.getTokenType());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.908539524551394
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jU?)])UF;");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("U", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (15) ()", string0);
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("?)", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      String string1 = token0.toString();
      assertEquals("[ (23) (j)", string1);
      
      xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("3=");
      Token token4 = xPathLexer1.nextToken();
      assertEquals(30, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("3=");
      Token token5 = xPathLexer2.notEquals();
      assertEquals("3=", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer1.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals("=", token6.getTokenText());
      
      xPathLexer1.pipe();
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer2.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer2.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token11 = xPathLexer3.pipe();
      assertEquals(17, token11.getTokenType());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.2506256764826171
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIY");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("S", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("Nc", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token2 = xPathLexer0.nextToken();
      assertEquals(23, token2.getTokenType());
      assertEquals("!", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("'", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals("c", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      Token token5 = xPathLexer2.at();
      assertEquals(16, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(":7]f82]");
      Token token6 = xPathLexer0.colon();
      assertEquals("+", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      xPathLexer2.not();
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.9622642297798616
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oMpYg81hL*tR*M@WE&");
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.leftBracket();
      Token token1 = xPathLexer2.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("t", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer1.leftParen();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("*", token5.getTokenText());
      
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer2.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("M@WE&", token9.getTokenText());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.6171190439399237
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R?k?");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.star();
      assertEquals("?", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("k", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("n3fm}");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("?", token2.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.leftBracket();
      XPathLexer xPathLexer5 = new XPathLexer("n3fm}");
      Token token3 = xPathLexer5.not();
      assertEquals("n", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer5.plus();
      assertEquals("3", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer2.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer3.leftBracket();
      assertEquals("n", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("n3fm}");
      Token token7 = xPathLexer6.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("n", token7.getTokenText());
      
      Token token8 = xPathLexer4.nextToken();
      assertEquals((-1), token8.getTokenType());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.1315381642528823
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("S", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("N", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("c", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("'", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.star();
      xPathLexer0.consume(0);
      Token token5 = xPathLexer0.nextToken();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals("dIB", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      xPathLexer1.colon();
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      xPathLexer1.or();
      Token token10 = xPathLexer1.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer1.star();
      assertEquals(20, token11.getTokenType());
      
      xPathLexer1.colon();
      Token token12 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.7318415969977272
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIY");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("S", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("!", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("'", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftBracket();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer2.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer1.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer3.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer1.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer2.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer3.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals("+", token11.getTokenText());
      assertEquals(5, token11.getTokenType());
      
      xPathLexer0.equals();
      Token token12 = xPathLexer0.equals();
      assertEquals("I", token12.getTokenText());
      assertEquals(21, token12.getTokenType());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.3420515970494833
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume((-412));
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.9991783334671545
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.slashes();
      xPathLexer0.not();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.4798910833767707
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      assertEquals("~", token0.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("IW", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals("n", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(".", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals("w", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer0.slashes();
      Token token9 = xPathLexer2.slashes();
      assertEquals(11, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("~S&IWn.w");
      Token token10 = xPathLexer3.pipe();
      assertEquals("~", token10.getTokenText());
      assertEquals(17, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token11 = xPathLexer4.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      xPathLexer0.leftParen();
      Token token12 = xPathLexer0.dollar();
      assertEquals(26, token12.getTokenType());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.9267216281363972
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.at();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      assertEquals("c", token0.getTokenText());
      
      Token token2 = xPathLexer1.not();
      assertEquals(23, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer1.setXPath("com.werken.saxpath.XPathLexer");
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("com.werken.saxpath.XPathLexer", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.plus();
      assertEquals("m", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      Token token6 = xPathLexer3.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
      
      Token token7 = xPathLexer2.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer3.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals(" ", token8.getTokenText());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(".", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.07498442177845
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume((-412));
      xPathLexer0.setXPath("@J");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("@", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("J", token3.getTokenText());
      
      xPathLexer1.div();
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("@J");
      Token token5 = xPathLexer2.dots();
      assertEquals("@", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer2.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer2.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer1.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer1.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      Token token12 = xPathLexer2.rightBracket();
      assertEquals(4, token12.getTokenType());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.889058804225436
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.7742471476054824
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      xPathLexer0.dots();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.number();
      token0.toString();
      xPathLexer0.and();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-179));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.211127849968881
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R?k?");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("R", token0.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.getXPath();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("k", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.div();
      xPathLexer0.leftParen();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token11.getTokenType());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.837855775931918
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (15) (t7)");
      token1.toString();
      xPathLexer1.at();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer1.or();
      xPathLexer0.colon();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.9885677806967068
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oMpYg81hL*tR*M@WE&");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("oMpYg81hL", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("*", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("t", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer1.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer2.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals("R", token5.getTokenText());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("*", token6.getTokenText());
      
      xPathLexer0.slashes();
      Token token7 = xPathLexer0.slashes();
      assertEquals("@", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      assertEquals("W", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("E&", token9.getTokenText());
      
      xPathLexer1.leftParen();
      Token token10 = xPathLexer2.dollar();
      assertEquals(26, token10.getTokenType());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.9398011549024687
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R8a_n$Qj_-e&Gj+}}V6");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.leftBracket();
      xPathLexer2.not();
      xPathLexer0.plus();
      xPathLexer0.colon();
      xPathLexer2.slashes();
      xPathLexer1.slashes();
      xPathLexer1.pipe();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer("W7DIR$b(J%|@_KCoK ");
      xPathLexer3.dollar();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-473));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.9123027284100245
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R8a_n$Qj_-e&Gj+}}V6");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.pipe();
      assertEquals("R", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("8a", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("R8a_n$Qj_-e&Gj+}}V6");
      Token token2 = xPathLexer1.slashes();
      assertEquals("R", token2.getTokenText());
      
      xPathLexer1.pipe();
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("a", token3.getTokenText());
      
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("R8a_n$Qj_-e&Gj+}}V6");
      xPathLexer2.minus();
      xPathLexer0.and();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("Q", token4.getTokenText());
      
      xPathLexer2.comma();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("j_", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer2.nextToken();
      Token token7 = xPathLexer1.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("_", token7.getTokenText());
      
      xPathLexer1.setPreviousToken(token6);
      assertEquals("a_n", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      Token token8 = xPathLexer2.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("<}P");
      xPathLexer4.hasMoreChars();
      Token token11 = xPathLexer4.identifierOrOperatorName();
      assertEquals(15, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("(v#Rj*GFs|dt");
      Token token12 = xPathLexer4.at();
      assertEquals("<", token12.getTokenText());
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer5.equals();
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.009320598104918
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.at();
      assertEquals("c", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("om", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("w", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("e", token3.getTokenText());
      
      Token token4 = xPathLexer0.literal();
      assertEquals(27, token4.getTokenType());
      assertNotNull(token4);
      assertEquals("ken.saxpath.XPathLexe", token4.getTokenText());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.7679791225018968
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIY");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("S", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("!", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals("'", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftBracket();
      xPathLexer1.and();
      Token token4 = xPathLexer0.not();
      assertEquals("c", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer1.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer2.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer2.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer1.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer2.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer0.notEquals();
      assertEquals("+d", token12.getTokenText());
      assertEquals(22, token12.getTokenType());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.5247610994512013
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.star();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.getXPath();
      xPathLexer0.div();
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.732907305237909
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("PP8P=am<R$j");
      xPathLexer0.leftBracket();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("?^1; 8cwO=:x<Y'\u0002*");
      xPathLexer2.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer1.consume((-2657));
      XPathLexer xPathLexer3 = new XPathLexer("PP8P=am<R$j");
      xPathLexer3.consume(0);
      xPathLexer2.nextToken();
      xPathLexer1.doubleColon();
      xPathLexer0.number();
      // Undeclared exception!
      try { 
        xPathLexer1.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_s1qs$JIo_bh,5#-z");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      int int0 = xPathLexer0.currentPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.118608776317771
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      token0.toString();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      String string0 = token1.toString();
      assertEquals("[ (15) (S)", string0);
      
      token0.toString();
      token0.toString();
      token0.toString();
      String string1 = token0.toString();
      assertEquals("[ (23) (~)", string1);
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.literal();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(8, int0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.68744617346859
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      xPathLexer0.star();
      xPathLexer0.div();
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.plus();
      xPathLexer0.whitespace();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.leftBracket();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.or();
      xPathLexer0.consume(679);
      xPathLexer0.and();
      xPathLexer0.isIdentifierStartChar(')');
      xPathLexer0.consume((-2443));
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.333792095926215
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      xPathLexer0.at();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      String string0 = token1.toString();
      assertEquals("[ (15) ()", string0);
      
      token0.toString();
      token0.toString();
      Token token2 = xPathLexer0.comma();
      String string1 = token2.toString();
      assertEquals("[ (32) (&)", string1);
      
      token0.toString();
      token0.toString();
      Token token3 = xPathLexer0.equals();
      token0.toString();
      token3.toString();
      token3.toString();
      token3.toString();
      String string2 = token3.toString();
      assertEquals("[ (21) (I)", string2);
      
      String string3 = token0.toString();
      assertEquals("[ (23) (~)", string3);
      
      xPathLexer0.setPreviousToken(token2);
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("W", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals("n", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer1.identifier();
      Token token7 = xPathLexer0.whitespace();
      assertEquals("", token7.getTokenText());
      assertEquals((-2), token7.getTokenType());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.7535005661945013
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.plus();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer1.and();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("t{O#,L`UbBBBOLgz#3T");
      xPathLexer2.div();
      xPathLexer2.relationalOperator();
      xPathLexer2.div();
      xPathLexer2.consume();
      xPathLexer1.doubleColon();
      xPathLexer0.dollar();
      xPathLexer2.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.identifier();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      boolean boolean0 = xPathLexer3.isIdentifierStartChar('a');
      assertTrue(boolean0);
      
      Token token8 = xPathLexer3.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer2.plus();
      assertEquals("{", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer2.minus();
      assertEquals("O", token10.getTokenText());
      assertEquals(6, token10.getTokenType());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.7926152854972346
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals(",", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("(T0l8fl+.9X>f?2U7}");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("", token1.getTokenText());
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.notEquals();
      assertEquals(22, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("`ZN0$3\"lBw");
      Token token4 = xPathLexer3.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("`", token4.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token5 = xPathLexer5.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer1.colon();
      assertEquals("(", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.relationalOperator();
      Token token8 = xPathLexer4.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer5.pipe();
      Token token9 = xPathLexer2.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer7.identifier();
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer5.pipe();
      assertEquals(17, token11.getTokenType());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.5852972177905222
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      token0.toString();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (23) (~)");
      token1.toString();
      xPathLexer0.at();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer0.dots();
      xPathLexer1.at();
      xPathLexer1.nextToken();
      xPathLexer1.equals();
      Token token2 = xPathLexer0.relationalOperator();
      assertNull(token2);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.924984255556001
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.comma();
      String string0 = token1.toString();
      assertEquals("[ (32) (S)", string0);
      
      token0.toString();
      token0.toString();
      Token token2 = xPathLexer0.equals();
      token2.toString();
      token0.toString();
      token2.toString();
      String string1 = token2.toString();
      assertEquals("[ (21) (&)", string1);
      
      String string2 = token0.toString();
      assertEquals("[ (23) (~)", string2);
      
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("I", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.setXPath("H5F=");
      Token token5 = xPathLexer0.nextToken();
      assertEquals("H5F", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer1.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("=", token7.getTokenText());
      
      Token token8 = xPathLexer1.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.2443586040666377
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifier();
      xPathLexer0.getXPath();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer1.identifier();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      xPathLexer1.and();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer1.identifier();
      xPathLexer1.div();
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer2.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer1.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer2.identifierOrOperatorName();
      Token token11 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token11.getTokenType());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.195893458996495
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.pipe();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.and();
      xPathLexer0.plus();
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("azIKV37S");
      xPathLexer1.colon();
      xPathLexer0.at();
      xPathLexer1.equals();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.consume((-26));
      xPathLexer0.colon();
      xPathLexer0.colon();
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("64hMBxqU");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.minus();
      xPathLexer1.div();
      String string0 = null;
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.649154362777592
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.consume(0);
      xPathLexer0.colon();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.slashes();
      xPathLexer0.colon();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer1.div();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer1.star();
      assertEquals(20, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token6 = xPathLexer2.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer2.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer1.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer1.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer0.leftBracket();
      assertEquals(3, token12.getTokenType());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.5502783490674443
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":IT3]Cid#g!t");
      Token token0 = xPathLexer0.dots();
      assertEquals(":", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.doubleColon();
      xPathLexer2.leftBracket();
      Token token1 = xPathLexer2.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("%:");
      Token token3 = xPathLexer1.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer4.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("%:", token4.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer(":GEzwNR3$~$6");
      Token token5 = xPathLexer5.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals(":", token5.getTokenText());
      
      Token token6 = xPathLexer5.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("G", token6.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.dollar();
      Token token7 = xPathLexer6.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer3.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer3.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer1.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer3.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer1.slashes();
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer4.leftBracket();
      assertEquals(3, token13.getTokenType());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.8572645453598489
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("S", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("N", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.star();
      assertEquals("c", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("SNc!'c+dIB");
      Token token3 = xPathLexer1.doubleColon();
      assertEquals("SN", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.nextToken();
      Token token4 = xPathLexer1.notEquals();
      assertEquals("!'", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals("!", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.or();
      xPathLexer0.plus();
      xPathLexer2.colon();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.slashes();
      xPathLexer4.consume();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer4.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("c", token7.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer4.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer3.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer5.slashes();
      assertEquals(11, token10.getTokenType());
      
      xPathLexer5.leftParen();
      Token token11 = xPathLexer3.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer5.not();
      assertEquals(23, token12.getTokenType());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.9080394789307413
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token1.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (~)", string0);
      
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string1 = token1.toString();
      assertEquals("[ (15) (S)", string1);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.dots();
      assertEquals("&", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("I", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.isIdentifierChar('K');
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer0.identifier();
      assertEquals("Wn.w", token5.getTokenText());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.369050280048628
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token2 = xPathLexer2.star();
      assertEquals(20, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("}.pfXo0uZ0!*W");
      Token token3 = xPathLexer2.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.9364113796040228
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      xPathLexer0.endPosition();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.div();
      xPathLexer0.doubleColon();
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer("64hMBxqU");
      xPathLexer0.notEquals();
      xPathLexer2.not();
      Token token0 = xPathLexer2.at();
      xPathLexer0.dollar();
      xPathLexer1.or();
      xPathLexer0.plus();
      xPathLexer2.plus();
      xPathLexer2.colon();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.equals();
      Token token1 = xPathLexer1.rightParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.0368771061617816
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIY");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("S", token0.getTokenText());
      
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("?^1; 8cwO=:x<Y'\u0002*");
      Token token1 = xPathLexer1.equals();
      xPathLexer0.relationalOperator();
      xPathLexer1.relationalOperator();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.at();
      Token token2 = xPathLexer1.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("^", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      xPathLexer1.identifier();
      Token token4 = xPathLexer1.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer1.at();
      assertEquals(";", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setPreviousToken(token1);
      assertEquals(21, token1.getTokenType());
      assertEquals("?", token1.getTokenText());
      
      Token token6 = xPathLexer3.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      String string0 = token3.toString();
      assertEquals("[ (11) (')", string0);
      
      XPathLexer xPathLexer4 = new XPathLexer("?^1; 8cwO=:x<Y'\u0002*");
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer5.slashes();
      xPathLexer1.isIdentifierChar('(');
      Token token8 = xPathLexer5.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      assertEquals("om.werken.saxpath.XPathLexer", token8.getTokenText());
      
      xPathLexer1.div();
      Token token9 = xPathLexer3.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      xPathLexer5.slashes();
      Token token10 = xPathLexer0.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer2.plus();
      assertEquals(5, token11.getTokenType());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.116862192875958
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals("S", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.pipe();
      assertEquals("N", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("c!", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.colon();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("c", token3.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals("+", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("d", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token7 = xPathLexer2.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals("I", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.slashes();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer4.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer1.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer2.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      xPathLexer1.leftParen();
      Token token12 = xPathLexer1.equals();
      assertEquals(21, token12.getTokenType());
      
      char char0 = xPathLexer0.LA(81);
      assertEquals('\uFFFF', char0);
      
      Token token13 = xPathLexer3.comma();
      assertEquals(32, token13.getTokenType());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.917982740559823
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.comma();
      token1.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token1.toString();
      assertEquals("[ (32) (S)", string0);
      
      token0.toString();
      String string1 = token0.toString();
      assertEquals("[ (23) (~)", string1);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (23) (~)");
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("[", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("IWn.w", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer1.plus();
      assertEquals(" ", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer1.slashes();
      assertEquals("(", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.1361000539441
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      String string0 = token1.toString();
      assertEquals("[ (15) (S)", string0);
      
      token0.toString();
      String string1 = token0.toString();
      assertEquals("[ (23) (~)", string1);
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("I", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals("Wn.w", token4.getTokenText());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.0299402818096146
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.pipe();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer1.not();
      xPathLexer1.plus();
      xPathLexer1.colon();
      Token token0 = xPathLexer0.slashes();
      xPathLexer1.slashes();
      xPathLexer1.pipe();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.leftParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.277387445049688
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mZt7, ");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.relationalOperator();
      xPathLexer0.slashes();
      xPathLexer0.not();
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.7891551792876508
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals("S", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.pipe();
      assertEquals("N", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("c!", token2.getTokenText());
      
      xPathLexer0.colon();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals("+", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer2.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals("d", token8.getTokenText());
      
      xPathLexer1.slashes();
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      assertEquals("I", token9.getTokenText());
      
      Token token10 = xPathLexer2.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer2.minus();
      assertEquals(6, token11.getTokenType());
      
      xPathLexer1.leftParen();
      Token token12 = xPathLexer0.equals();
      assertEquals(21, token12.getTokenType());
      assertEquals("B", token12.getTokenText());
      
      Token token13 = xPathLexer0.colon();
      assertEquals(18, token13.getTokenType());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.3620537853114003
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      String string0 = token1.toString();
      assertEquals("[ (15) (S)", string0);
      
      token0.toString();
      token0.toString();
      Token token2 = xPathLexer0.comma();
      String string1 = token2.toString();
      assertEquals("[ (32) (&)", string1);
      
      token0.toString();
      token0.toString();
      Token token3 = xPathLexer0.equals();
      token3.toString();
      token3.toString();
      token3.toString();
      String string2 = token3.toString();
      assertEquals("[ (21) (I)", string2);
      
      String string3 = token0.toString();
      assertEquals("[ (23) (~)", string3);
      
      xPathLexer0.setPreviousToken(token2);
      Token token4 = xPathLexer0.dots();
      assertEquals("W", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("n", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer1.identifier();
      assertEquals(15, token7.getTokenType());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.141630426988465
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oMpYg81hL*tR*M@WE&");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("oMpYg81hL", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("*", token1.getTokenText());
      
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("R*M@WE&", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      xPathLexer1.leftBracket();
      Token token3 = xPathLexer2.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("R", token4.getTokenText());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("*", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("M", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer1.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer1.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("@", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer1.colon();
      assertEquals(18, token10.getTokenType());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.8187117409787157
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      token0.toString();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (~)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (15) (S)", string1);
      
      xPathLexer0.at();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.dots();
      assertEquals("I", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals("W", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("n", token4.getTokenText());
      
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(".", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.1595686901429865
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      String string0 = token1.toString();
      assertEquals("S", token1.getTokenText());
      assertEquals("[ (15) (S)", string0);
      
      token0.toString();
      token0.toString();
      token0.toString();
      String string1 = token0.toString();
      assertEquals("[ (23) (~)", string1);
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("&", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("I", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("W", token4.getTokenText());
  }
}
