/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 18:56:41 GMT 2020
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.catalog.UUID;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.io.ArrayInputStream;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.store.access.heap.HeapController;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBDriverNotCapableException;
import org.h2.engine.ConnectionInfo;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.value.Value;
import org.h2.value.ValueByte;
import org.h2.value.ValueStringIgnoreCase;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "kND";
      Integer integer0 = new Integer((-2));
      Integer.max((-2), (-918));
      Integer integer1 = new Integer((-2));
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("_=+Q2H25rW_IOo*FOnd");
      jMXPrincipal0.equals(integer0);
      jMXPrincipal0.equals("kND");
      SQLUtil.renderValue((Object) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_=+Q2H25rW_IOo*FOnd");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "kND";
      stringArray0[1] = "_=+Q2H25rW_IOo*FOnd";
      stringArray0[2] = "_=+Q2H25rW_IOo*FOnd";
      stringArray0[3] = "null";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.replace(42, 2768, "kND");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0854684353173742
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append('w');
      stringBuilder0.chars();
      StringBuilder stringBuilder2 = new StringBuilder();
      StringBuilder stringBuilder3 = stringBuilder0.reverse();
      stringBuilder3.chars();
      stringBuilder3.append((CharSequence) "trHucate");
      StringBuilder stringBuilder4 = new StringBuilder();
      SQLUtil.removeComments("org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics");
      SQLUtil.isProcedureCall("update");
      SQLUtil.mutatesStructure("org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics");
      DBDataType dBDataType0 = DBDataType.getInstance(202, "update");
      Integer integer0 = new Integer(202);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, dBDataType0, integer0, integer0);
      dBDataType0.isAlpha();
      Integer.divideUnsigned(202, 202);
      Integer.getInteger("trHucate", integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance(202, "ESCAPE");
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("ESCAPE", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder5 = new StringBuilder();
      DBColumn dBColumn0 = defaultDBTable0.getColumn("update");
      SQLUtil.renderColumnTypeWithSize(dBColumn0, stringBuilder1);
      SQLUtil.isDML("trHucate");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, (String) null, false, "ESCAPE");
      SQLUtil.appendConstraintName((DBConstraint) dBNotNullConstraint0, stringBuilder1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1115904793495077
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      Integer.max((-2), (-918));
      Integer integer1 = new Integer((-2));
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("_=+Q2H25rW_IOo*FOnd");
      SQLUtil.mutatesStructure("kND");
      SQLUtil.mutatesDataOrStructure("kND");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "kND";
      stringArray0[1] = "kND";
      stringArray0[2] = "into";
      stringArray0[3] = " (exclusive)";
      stringArray0[4] = "_=+Q2H25rW_IOo*FOnd";
      stringArray0[5] = " (exclusive)";
      stringArray0[6] = "kND";
      stringArray0[7] = " (exclusive)";
      stringArray0[8] = "drop table";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " (exclusive)", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6977335913743923
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tablell\tf.r$ky-yo'");
      BasicUUID basicUUID0 = new BasicUUID("alter tablell\tf.r$ky-yo'");
      String string0 = "trHucate";
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.isDML("trHucate");
      Boolean boolean0 = Boolean.FALSE;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("\u0001\u0180", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("1:1: Tokens : ( T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME );");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6805342659708806
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.isDML("XMLNODE");
      stringArray0[0] = "XMLNODE";
      SQLUtil.normalize("XMLNODE", false);
      System.setCurrentTimeMillis((-2045L));
      SQLUtil.isDDL("");
      SQLUtil.removeComments("");
      SQLUtil.isQuery("select into");
      SQLUtil.isProcedureCall("");
      PipedReader pipedReader0 = new PipedReader(95);
      try { 
        pipedReader0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0483246968850244
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "XMLNODE";
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "XMLNODE";
      SQLUtil.normalize("XMLNODE", true);
      System.setCurrentTimeMillis(0L);
      SQLUtil.isDDL("");
      SQLUtil.normalize("z]&c 1>L1", false);
      SQLUtil.isQuery("select i?nto");
      SQLUtil.isProcedureCall("z ] & c 1 > L1");
      PipedReader pipedReader0 = new PipedReader(95);
      PipedReader pipedReader1 = new PipedReader();
      try { 
        pipedReader1.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2715831955607935
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('w');
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      stringBuilder1.chars();
      stringBuilder1.append((CharSequence) "pqFU8B#i&bQ&1\n$2M");
      StringBuilder stringBuilder2 = new StringBuilder();
      SQLUtil.removeComments("pqFU8B#i&bQ&1\n$2M");
      SQLUtil.isDML("update");
      SQLUtil.mutatesStructure("pqFU8B#i&bQ&1\n$2M");
      DBDataType dBDataType0 = DBDataType.getInstance(202, "update");
      Integer integer0 = new Integer(202);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, dBDataType0, integer0, integer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultDBColumn0.setDefaultValue("5z&d{LA");
      dBDataType0.isAlpha();
      defaultDBColumn0.setDoc("y");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.substituteMarkers("y", "pqFU8B#i&bQ&1\n$2M", dBDataType0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile("pqFU8B#i&bQ&1\n$2M", "54011");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) defaultDBTable0;
      objectArray0[1] = (Object) stringBuilder0;
      objectArray0[2] = (Object) "pqFU8B#i&bQ&1\n$2M";
      PrintWriter printWriter0 = mockPrintWriter0.format("trhucate", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.typeAndName(defaultDBTable0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, printWriter0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(44);
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("org.apache.derby.iapi.types.BooleanDataValue", "3~C%\u00063K%r_1r*", "3~C%\u00063K%r_1r*");
      jdbcConnectionPool0.getLogWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.derby.iapi.types.BooleanDataValue";
      stringArray0[1] = "org.apache.derby.iapi.types.BooleanDataValue";
      stringArray0[2] = "org.apache.derby.iapi.types.BooleanDataValue";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      Object object0 = new Object();
      dBPrimaryKeyConstraint0.equals(object0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder("org.apache.derby.iapi.types.BooleanDataValue");
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.iapi.types.BooleanDataValue");
      dBSchema0.getPackages();
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("org.apache.derby.iapi.types.BooleanDataValue", false, (String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2988427031242007
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('w');
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      stringBuilder1.chars();
      stringBuilder1.append((CharSequence) "trH-ucate");
      StringBuilder stringBuilder2 = new StringBuilder();
      SQLUtil.removeComments("pqFU8B#i&bQ&1\n$2M");
      SQLUtil.isDML("update");
      SQLUtil.mutatesStructure("pqFU8B#i&bQ&1\n$2M");
      DBDataType dBDataType0 = DBDataType.getInstance(202, "update");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, dBDataType0, integer0, integer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBDataType0.isAlpha();
      SQLUtil.substituteMarkers("y", "trH-ucate", dBDataType0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile("pqFU8B#i&bQ&1\n$2M", "54011");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) defaultDBTable0;
      objectArray0[1] = (Object) stringBuilder0;
      objectArray0[2] = (Object) "trH-ucate";
      PrintWriter printWriter0 = mockPrintWriter0.format("pqFU8B#i&bQ&1\n$2M", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.typeAndName(defaultDBTable0);
      System.setCurrentTimeMillis(202);
      SQLUtil.isProcedureCall("pqFU8B#i&bQ&1\n$2M");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "alter tablealter tablell\tf.r$ky-yo'", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(0.0);
      char[] charArray0 = new char[5];
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = stringBuilder0.reverse();
      SQLUtil.addRequiredCondition("create unique index", stringBuilder0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("COUNT ", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      PipedReader pipedReader0 = new PipedReader();
      String string0 = "B ";
      ValueStringIgnoreCase.get("B ");
      ValueByte.get((byte) (-86));
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "pqFU8B#i&bQ&1\n$2M", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("pqFU8B#i&bQ&1\n$2M", false, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      DBCatalog dBCatalog0 = new DBCatalog("drop indexsg#s!#8%oi?@-t=}");
      dBUniqueConstraint0.toString();
      DBSchema dBSchema0 = new DBSchema("pqFU8B#i&bQ&1\n$2M", dBCatalog0);
      String string0 = "drop table";
      DBPackage dBPackage0 = new DBPackage("drop table", dBSchema0);
      DBDataType.getInstance((-1120), "alter materialized view");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance((-16384), " or ");
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedLong((-666));
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      SQLUtil.addRequiredCondition(" or ", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt(39);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 39
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      Integer.max((-1224), (-918));
      Integer integer0 = new Integer((-1224));
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("_=+Q2H25rW_IOo*FOnd");
      ArrayInputStream arrayInputStream0 = new ArrayInputStream();
      jMXPrincipal0.equals(arrayInputStream0);
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "Qyc");
      StringBuilder stringBuilder2 = stringBuilder1.append('_');
      StringBuilder stringBuilder3 = SQLUtil.addOptionalCondition("/*", stringBuilder2);
      stringBuilder3.append((-1123.8));
      SQLUtil.addOptionalCondition("Qyc", stringBuilder3);
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4524851815966964
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XMLNODE", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XMLNODE";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "XMLNODE", false, stringArray0);
      dBPrimaryKeyConstraint0.equals(dBPrimaryKeyConstraint0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder("XMLNODE");
      StringBuilder stringBuilder1 = new StringBuilder(23);
      SQLUtil.join("alter tablesg#s!#8%oi?@-t=}", "9u2(g2`v^;52&&|KU<", stringArray0, "", "alter tablesg#s!#8%oi?@-t=}", stringArray0);
      SQLUtil.normalize("sg#s!#8%oi?@-t=}", false);
      String string0 = "Q'vIW_s#50w";
      SQLUtil.isProcedureCall("Q'vIW_s#50w");
      SQLUtil.substituteMarkers("", "=7XyaF@0#1[1", stringBuilder0);
      System.setCurrentTimeMillis(3600L);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "pqFU8B#i&bQ&1\n$2M", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("pqFU8B#i&bQ&1\n$2M", false, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      DBCatalog dBCatalog0 = new DBCatalog("drop indexsg#s!#8%oi?@-t=}");
      DBSchema dBSchema0 = new DBSchema("pqFU8B#i&bQ&1\n$2M", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("drop table", dBSchema0);
      DBDataType.getInstance((-1120), "alter materialized view");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance((-16384), " or ");
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table", defaultDBTable0, dBDataType0, integer3, integer2);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      SQLUtil.addRequiredCondition(" or ", stringBuilder0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alter table", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      TableContainer tableContainer0 = new TableContainer("XMLNODE", dBSchema0);
      TableContainer tableContainer1 = new TableContainer((String) null, tableContainer0);
      tableContainer1.getTable("XMLNODE");
      DBCatalog dBCatalog0 = new DBCatalog("execute");
      DBSchema dBSchema1 = new DBSchema("SysschemasIndex1Identifier", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("SysschemasIndex1Identifier", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-16384), "execute");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance(117, "insert");
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("^e]S\"QTPpq{GZ", (DBTable) null, dBDataType0, integer3, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "execute";
      stringArray0[1] = "XMLNODE";
      stringArray0[2] = "^e]S\"QTPpq{GZ";
      stringArray0[3] = "mozilla-firefox";
      stringArray0[4] = "XMLNODE";
      stringArray0[5] = "insert";
      stringArray0[6] = "XMLNODE";
      stringArray0[7] = "XMLNODE";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (execute, XMLNODE, ^e]S\"QTPpq{GZ, mozilla-firefox, XMLNODE, insert, XMLNODE, XMLNODE)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      UnaryOperator.identity();
      columnDescriptorList0.replaceAll(unaryOperator0);
      columnDescriptorList0.getColumnNames();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      columnDescriptorList0.getColumnDescriptor((UUID) null, "D");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("$qy?N[ \"X(1fqq", (DBTable) null, (DBDataType) null, (Integer) null, integer0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize(dBColumnArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3156580703985552
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<BufferedInputStream> unaryOperator2 = UnaryOperator.identity();
      Function<Object, BufferedInputStream> function0 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, BufferedInputStream> function1 = unaryOperator2.compose((Function<? super Object, ? extends BufferedInputStream>) function0);
      unaryOperator1.compose((Function<? super Integer, ?>) function1);
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      columnDescriptorList0.spliterator();
      UnaryOperator.identity();
      columnDescriptorList0.replaceAll(unaryOperator0);
      columnDescriptorList0.getColumnNames();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      columnDescriptorList0.getColumnDescriptor((UUID) null, "D");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("$qy?N[ \"X(1fqq", (DBTable) null, (DBDataType) null, (Integer) null, integer0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.normalize("D", false);
      boolean boolean0 = SQLUtil.isQuery("D");
      boolean boolean1 = SQLUtil.isProcedureCall("call");
      assertFalse(boolean1 == boolean0);
      
      Random.setNextRandom((-4915));
      String string0 = SQLUtil.substituteMarkers("$+XbBl7*5|\"6", "org.hsqldb.Library.curtime", (Object) null);
      assertEquals("$+XbBl7*5|\"6", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(44);
      String string0 = "3~C%\\63K%r_1r*";
      String string1 = "org.apache.derby.iapi.types.BooleanDataValue";
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("org.apache.derby.iapi.types.BooleanDataValue", "3~C%\u00063K%r_1r*", "3~C%\u00063K%r_1r*");
      jdbcConnectionPool0.getLogWriter();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      TableContainer tableContainer0 = new TableContainer("XMLNODE", dBSchema0);
      TableContainer tableContainer1 = new TableContainer((String) null, tableContainer0);
      tableContainer1.getTable("XMLNODE");
      DBCatalog dBCatalog0 = new DBCatalog("execute");
      DBSchema dBSchema1 = new DBSchema("SysschemasIndex1Identifier", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("SysschemasIndex1Identifier", dBSchema0);
      DBDataType.getInstance((-16384), "execute");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance((-16384), " or ");
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", (DBTable) null, (-16384), "execute");
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("EXECUTE", stringBuilder0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      TableContainer tableContainer0 = new TableContainer("XMLNODE");
      TableContainer tableContainer1 = new TableContainer((String) null, tableContainer0);
      tableContainer1.getTables();
      tableContainer1.getTable("XMLNODE");
      dBSchema0.getSequences(true);
      DBPackage dBPackage0 = new DBPackage("SysschemasIndex1Identifier", dBSchema0);
      DBDataType.getInstance((-16384), "execute");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance((-16384), " or ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SysschemasIndex1Identifier");
      boolean boolean0 = SQLUtil.isProcedureCall("rDx6;oC'`g:/3>C");
      Character character0 = Character.valueOf('>');
      Character.isSurrogate('\"');
      String string0 = SQLUtil.substituteMarkers("b\fZ9@$YCV}vSZW", "LASTVAL", character0);
      assertEquals("b\fZ9@$YCV}vSZW", string0);
      
      boolean boolean1 = SQLUtil.isQuery("execute");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2348971144483019
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.normalize("T/{qs", true);
      SQLUtil.parseColumnTypeAndSize("Irop index");
      SQLUtil.isDDL("derby.language.logStatementText");
      DBCatalog dBCatalog0 = new DBCatalog();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "derby.language.logStatementText";
      stringArray0[1] = "Irop index";
      stringArray0[2] = "[CSCHb !";
      stringArray0[0] = "derby.language.logStatementText";
      stringArray0[0] = "T/{qs";
      stringArray0[6] = "YuG&JF.>6NzP,g%yv";
      stringArray0[7] = "T/{qs";
      SQLUtil.removeComments("kEtG[zoQl>sod_L#");
      SQLUtil.normalize("|Uko$}BJa,{I;4N", false);
      SQLUtil.isProcedureCall("derby.language.logStatementText");
      SQLUtil.substituteMarkers("derby.language.logstate", "[CSCHb !", "Irop index");
      System.setCurrentTimeMillis((-2045L));
      SQLUtil.isDDL("Irop index");
      String[] stringArray1 = new String[1];
      stringArray1[0] = "derby.language.logstate";
      SQLUtil.normalize("kEtG[zoQl>sod_L#", false);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery(stringArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "(";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("(", (DBTable) null, (-3121), "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "pqFU8B#i&bQ&1\n$2M", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("pqFU8B#i&bQ&1\n$2M", false, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop indexsg#s!#8%oi?@-t=}");
      DBCatalog dBCatalog0 = new DBCatalog("drop indexsg#s!#8%oi?@-t=}");
      DBSchema dBSchema0 = new DBSchema("d}@m%AG>PoG>", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("drop table", dBSchema0);
      DBDataType.getInstance((-1120), "alter materialized view");
      Integer integer0 = RawTransaction.COMMIT;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("d}@m%AG>PoG>", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 44;
      PipedReader pipedReader0 = new PipedReader(44);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.lowerCaseMode(true);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "CONSTANT_NAME";
      stringArray0[1] = "call";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "call";
      System.setCurrentTimeMillis(0L);
      SQLUtil.isDDL("call");
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("delete8", compositeDBObject0);
      TableContainer tableContainer1 = new TableContainer("5:'1xd`w)D:Q:Z");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, " fUl\"gS-=6", (SchemaDescriptor) null, 107, false, false);
      tableDescriptor0.getConglomerateDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.replaceAll(unaryOperator1);
      columnDescriptorList0.getColumnNames();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      columnDescriptorList0.getColumnDescriptor((UUID) null, "execpqfu8b#i&bq&1\n$2m");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator.identity();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" ADD ", defaultDBTable0, (DBDataType) null, (Integer) null, (Integer) null);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = new Integer(996);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("L? L=z", defaultDBTable0, (DBDataType) null, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "create materialized view";
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("create materialized view", stringBuilder0);
      ValueStringIgnoreCase valueStringIgnoreCase0 = ValueStringIgnoreCase.get("create materialized view");
      Value value0 = null;
      HeapController heapController0 = new HeapController();
      FKConstraintDefinitionNode fKConstraintDefinitionNode0 = new FKConstraintDefinitionNode();
      fKConstraintDefinitionNode0.getProperties();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        valueStringIgnoreCase0.getInt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Data conversion error converting \"create materialized view\" [90021-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2793801628943036
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "dlete";
      stringArray0[1] = "dlete";
      stringArray0[2] = "dlete";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("sT_va12DB#]V9\"Rs*", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.columnReferencedBy("dlete");
      dBForeignKeyConstraint0.isIdentical(defaultDBTable0);
      SQLUtil.join("dlete", "dlete", stringArray0, "}o.e(_hI[>0uQ{Jl", "dlete", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("dlete");
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder1);
      assertEquals("dlete0.0 and null", stringBuilder1.toString());
      
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isQuery("9(N");
      SQLUtil.isDML("dlete");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      boolean boolean0 = SQLUtil.isProcedureCall("drop indexpq`");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('a');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      stringWriter1.flush();
      mockPrintWriter0.println("hG@-0'edUQS");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("inner");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("-&`D@t6[3eV3|=]!3)", false, defaultDBTable0, "inner");
      SQLUtil.constraintName(dBCheckConstraint0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CONSTRAINT -&`D@t6[3eV3|=]!3) ";
      stringArray0[1] = "S)^Dx).nx";
      stringArray0[2] = "hG@-0'edUQS";
      SQLUtil.join("inner", "hG@-0'edUQS", stringArray0, "X+K`K%u;o~6>fQYpc", "zZwrKC5Fk=1Fp|6", stringArray0);
      SQLUtil.ownerDotComponent(dBCheckConstraint0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (CONSTRAINT -&`D@t6[3eV3|=]!3) , S)^Dx).nx, hG@-0'edUQS)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sslfactoryarg");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",W", (DBTable) null, (-1486), "sslfactoryarg");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SSLFACTORYARG");
      BasicUUID basicUUID0 = new BasicUUID("dlete");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.412744636863848
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      TableContainer tableContainer0 = new TableContainer("XMLNODE", dBSchema0);
      TableContainer tableContainer1 = new TableContainer((String) null, tableContainer0);
      tableContainer1.getTable("XMLNODE");
      DBCatalog dBCatalog0 = new DBCatalog("execute");
      DBSchema dBSchema1 = new DBSchema("SysschemasIndex1Identifier", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("SysschemasIndex1Identifier", dBSchema0);
      DBDataType.getInstance((-16384), "execute");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance((-16384), " or ");
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SysschemasIndex1Identifier", (DBTable) null, dBDataType0, integer2, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "SysschemasIndex1Identifier  OR (1,3) NULL";
      stringArray1[1] = "XMLNODE";
      stringArray1[2] = null;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("", stringArray1, "execute", " or ", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6977335913743923
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('w');
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      stringBuilder1.chars();
      StringBuilder stringBuilder2 = new StringBuilder();
      SQLUtil.removeComments("execpqfu8b#i&bq&1\n$2m");
      SQLUtil.isDML("update");
      SQLUtil.mutatesStructure("execpqfu8b#i&bq&1\n$2m");
      PipedReader pipedReader0 = new PipedReader(97);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.eolIsSignificant(true);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "CONSTANT_NAME";
      stringArray0[1] = "call";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "`M^lvi";
      stringArray0[3] = "inner";
      stringArray0[4] = "BLOB";
      stringArray0[5] = "Wqna}|X`d}*0s";
      stringArray0[6] = ", ";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "CONSTANT_NAME";
      objectArray0[1] = (Object) "call";
      objectArray0[2] = (Object) "inner";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "CONSTANT_NAME";
      objectArray0[5] = (Object) fileSystemHandling0;
      String[] stringArray1 = new String[9];
      stringArray1[0] = ", ";
      stringArray1[1] = "BLOB";
      stringArray1[2] = "`M^lvi";
      stringArray1[3] = "inner";
      stringArray1[4] = "`M^lvi";
      stringArray1[5] = ", ";
      stringArray1[6] = "CONSTANT_NAME";
      stringArray1[7] = "BLOB";
      stringArray1[8] = "Wqna}|X`d}*0s";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9943536917623688
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(44);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.lowerCaseMode(true);
      SQLUtil.renderNumber(streamTokenizer0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ordinaryChars(697, 44);
      Boolean boolean0 = new Boolean((String) null);
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      SQLUtil.normalize("*/", false);
      SQLUtil.isQuery("select into");
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      System.setCurrentTimeMillis(0L);
      String string0 = SQLUtil.renderValue("");
      assertEquals("''", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize("PC%9S&: \"/S5SB!]E", false);
      DBCatalog dBCatalog0 = new DBCatalog("PC%9S&: \"/S5SB!]E");
      DBSchema dBSchema1 = new DBSchema("XMLNODE", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("drop indexsg#s!#8%oi?@-t=}", dBSchema1);
      DBDataType.getInstance((-28), "PC % 9S & : \"/S5SB!]E\"");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance((-2), "'");
      Integer integer1 = RawTransaction.ABORT;
      dBCatalog0.getTable("U<?,", false);
      StringBuilder stringBuilder1 = new StringBuilder();
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.90853528164356
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("into", stringBuilder0);
      stringBuilder0.append((CharSequence) stringBuilder1);
      stringBuilder0.append("I-]\"&ZV5@Yv");
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("6!OzRF_W", stringBuilder0);
      stringBuilder1.reverse();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized viewdelete8", (DBSchema) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "6!OzRF_W";
      stringArray0[3] = "into";
      stringArray0[2] = "I-]\"&ZV5@Yv";
      stringArray0[3] = "07V";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "alter materialized viewdelete8");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuilder stringBuilder3 = stringBuilder0.append(stringBuffer0);
      stringArray0[4] = "alter table";
      stringArray0[5] = "I-]\"&ZV5@Yv";
      stringArray0[6] = "I-]\"&ZV5@Yv";
      stringArray0[7] = "into";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized viewn0,,i9zo;", true, stringArray0);
      dBPrimaryKeyConstraint0.equals((Object) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("07V", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter table", true, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder4 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder2, nameSpec1);
      assertSame(stringBuilder4, stringBuilder3);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("create tablepqfu8b#i&bq&1\n$2m");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create tablepqfu8b#i&bq&1\n$2m");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create tablepqfu8b#i&bq&1\n$2m";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create tablepqfu8b#i&bq&1\n$2m", false, stringArray0);
      dBPrimaryKeyConstraint0.equals(dBPrimaryKeyConstraint0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder("create tablepqfu8b#i&bq&1\n$2m");
      int int0 = 23;
      dBSchema0.getPackages();
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("drop materialized viewpq`", false, "9u2(g2`v^;52&&|KU<", "create tablepqfu8b#i&bq&1\n$2m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Syntax error at the beginning 
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.max((-2), (-1));
      DBCatalog dBCatalog0 = new DBCatalog("isS&j<7");
      DBSchema dBSchema0 = new DBSchema("^U:2g4CXWQjGxE", dBCatalog0);
      dBSchema0.getDatabase();
      DBCatalog dBCatalog1 = new DBCatalog("^U:2g4CXWQjGxE", (Database) null);
      DBSchema dBSchema1 = new DBSchema("d}@m%AG>PoG>", dBCatalog1);
      DBPackage dBPackage0 = new DBPackage("update", dBSchema0);
      DBDataType.getInstance((-16384), "drop table");
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance((-1120), "}Y<[]SP6V5H");
      Integer integer3 = RawTransaction.ABORT;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      TableContainer tableContainer0 = new TableContainer("unknown constraint type", dBPackage0);
      tableContainer0.getTable("] b-tree leaf table:");
      Integer integer5 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}Y<[]SP6V5H", (DBTable) null, dBDataType0, integer1, integer5);
      dBSchema0.getTable(".");
      defaultDBColumn0.setTable((DBTable) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertunknown constraint type:");
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      UnaryOperator.identity();
      columnDescriptorList0.replaceAll(unaryOperator0);
      String[] stringArray0 = columnDescriptorList0.getColumnNames();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      DBDataType.getInstance((-643), "alter materialized view");
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance((-643), " or ");
      Integer integer3 = RawTransaction.ABORT;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("D", (DBTable) null, dBDataType0, integer2, integer2);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Yi};|Y{R,lP", false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals(" OR (3,3)", stringBuilder0.toString());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      UnaryOperator.identity();
      columnDescriptorList0.replaceAll(unaryOperator0);
      String[] stringArray0 = columnDescriptorList0.getColumnNames();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      DBDataType.getInstance((-643), "alter materialized view");
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance((-643), " or ");
      Integer integer3 = RawTransaction.ABORT;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("D", (DBTable) null, dBDataType0, integer2, integer2);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Yi};|Y{R,lP", true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals(" OR (3,3)CONSTRAINT Yi};|Y{R,lP ", stringBuilder0.toString());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "XMLNODE";
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      TableContainer tableContainer0 = new TableContainer("XMLNODE", dBSchema0);
      tableContainer0.getTable("XMLNODE");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XMLNODE");
      DBPackage dBPackage0 = new DBPackage("XMLNODE", dBSchema0);
      DBDataType.getInstance((-16384), "execute");
      dBSchema0.equals("XMLNODE");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance((-16384), " or ");
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.8173529788538034
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "#oSk+BUDQgRVQu";
      stringArray0[1] = "dlete";
      SQLUtil.join("dlete", "dlete", stringArray0, "dlete", "dlete", stringArray0);
      SQLUtil.normalize("getString(String)", true);
      SQLUtil.renderColumnListWithTableName("getString (String)", stringArray0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("drop materialized viewunknown constraint type:", "//", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("dlete");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'dlete'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber.valueOf("$qy?NW \"X(1fqq");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      UnaryOperator.identity();
      columnDescriptorList0.replaceAll(unaryOperator0);
      columnDescriptorList0.getColumnNames();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      columnDescriptorList0.getColumnDescriptor((UUID) null, "D");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringWriter stringWriter1 = stringWriter0.append('@');
      stringWriter0.close();
      stringWriter1.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintWriter0.println("hG@-0'edUQS");
      TableContainer tableContainer0 = new TableContainer("callll\tf.r$ky-yo'", defaultDBTable0);
      tableContainer0.getTable("Could not create directory, because a file with the same name already exists: ");
      DBCatalog dBCatalog0 = new DBCatalog("by: >S#RA9n?9=}");
      dBCatalog0.getSequences();
      DBCatalog dBCatalog1 = new DBCatalog();
      SQLUtil.typeAndName((DBObject) null);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6987829895138007
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\u0001\u0158", true, stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      defaultDBTable0.getIndex("sqrt");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DBSchema dBSchema0 = new DBSchema("S%");
      defaultDBTable0.getIndexes();
      dBSchema0.setName("sqrt");
      defaultDBTable0.setSchema(dBSchema0);
      Integer integer0 = new Integer((-2005536987));
      Integer.getInteger("S%", (-2005536987));
      dBPrimaryKeyConstraint0.toString();
      dBSchema0.getTable("\u0001\u0158");
      dBPrimaryKeyConstraint0.setOwner((CompositeDBObject<?>) null);
      defaultDBTable0.addReferrer((DBTable) null);
      dBPrimaryKeyConstraint0.equals(integer0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \u0001\u0158 PRIMARY KEY ()", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.removeComments("CONSTRAINT \u0001\u0158 PRIMARY KEY ()");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      SQLUtil.removeComments("sqrt");
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec2);
      assertEquals("CONSTRAINT \u0001\u0158 UNIQUE ()", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.47875333041028967
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = "42Y0e";
      String[] stringArray0 = new String[0];
      SQLUtil.join(")&*<{", "gST1Fra$wnN'z}zC;m", stringArray0, "42Y0e", ")&*<{", stringArray0);
      SQLUtil.normalize("O|.[%*I4", true);
      SQLUtil.renderColumnListWithTableName("&i;8nd4[5xvF*7/-qf@", stringArray0);
      String string1 = "SELECT   RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$CHARACTER_LENGTH as CHAR_LEN, F.RDB$CHARACTER_SET_ID as CHARACTER_SET_ID FROM  RDB$RELATION_FIELDS RF , RDB$FIELDS F  WHERE   RF.RDB$FIELD_SOURCE = F.RDB$FIELD_NAME AND  RF.RDB$FIELD_NAME = ? AND  RF.RDB$RELATION_NAME = ?";
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("SELECT   RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$CHARACTER_LENGTH as CHAR_LEN, F.RDB$CHARACTER_SET_ID as CHARACTER_SET_ID FROM  RDB$RELATION_FIELDS RF , RDB$FIELDS F  WHERE   RF.RDB$FIELD_SOURCE = F.RDB$FIELD_NAME AND  RF.RDB$FIELD_NAME = ? AND  RF.RDB$RELATION_NAME = ?", "O|.[%*I4", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("O |.[ % *  I4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'O |.[ % *  I4'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#(");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "inner";
      objectArray0[1] = (Object) ", ";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "#(";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7868083399845722
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "exec";
      SQLUtil.isDDL("exec");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "exec";
      stringArray0[1] = "exec";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnListWithTableName("renamedelete8", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      String string1 = "f?}5Yhw\\<y]dm";
      DBSchema dBSchema0 = new DBSchema("f?}5Yhw<y]dm", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("renamedelete8.exec, renamedelete8.exec, renamedelete8.null, renamedelete8.null", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "prepareCall", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("f?}5Yhw<y]dm", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) dBUniqueIndex0;
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable1, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(44);
      SQLUtil.mutatesDataOrStructure("Unknown constraint type: ");
      ErrorMessages errorMessages0 = new ErrorMessages();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("COUNT ", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.40869772507431423
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "42Y0e";
      String[] stringArray0 = new String[2];
      EvoSuiteFile evoSuiteFile0 = null;
      SQLUtil.normalize("create unique indexll\tf.r$ky-y", true);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("6", (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = SQLUtil.isDDL("alter table- 0");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('a');
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DBPackage dBPackage0 = new DBPackage((String) null, dBSchema0);
      DBDataType.getInstance((-16384), "UNIQUE ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string0 = SQLUtil.normalize("kk&73T9(](zm", true);
      assertEquals("kk & 73T9 (] (zm", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.282174095733918
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop indexsg#s!#8%oi?@-t=}");
      PrintWriter printWriter0 = mockPrintWriter0.printf("nlo>nx", (Object[]) null);
      printWriter0.print(4294967298L);
      SQLUtil.isDML("drop indexsg#s!#8%oi?@-t=}");
      StringBuilder stringBuilder0 = new StringBuilder("nlo>nx");
      SQLUtil.isDDL("7.1");
      stringBuilder0.append(1628.0F);
      SQLUtil.isQuery("rowCount expected ");
      SQLUtil.mutatesStructure("rowCount expected ");
      SQLUtil.mutatesDataOrStructure("nlo>nx");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop table", false, (String[]) null);
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      System.setCurrentTimeMillis((-3380L));
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("nlo>nx", (String[]) null, "nlo>nx", "98aXs88", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      SQLUtil.mutatesStructure("rename");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FromVTI fromVTI0 = new FromVTI();
      // Undeclared exception!
      try { 
        fromVTI0.getDataDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = "`M^lvi";
      stringArray0[4] = "BLOB";
      stringArray0[5] = "Wqna}|X`d}*0s";
      SQLUtil.isProcedureCall("isLasmTt");
      SQLUtil.isProcedureCall("insertll\tf.r$ky-yo'");
      System.setCurrentTimeMillis((-2045L));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 44;
      PipedReader pipedReader0 = new PipedReader(44);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.lowerCaseMode(true);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[_-Bzm4+i5D/G(S'dw";
      stringArray0[1] = "[_-Bzm4+i5D/G(S'dw";
      stringArray0[2] = "[_-Bzm4+i5D/G(S'dw";
      stringArray0[3] = "[_-Bzm4+i5D/G(S'dw";
      stringArray0[4] = "[_-Bzm4+i5D/G(S'dw";
      stringArray0[5] = "[_-Bzm4+i5D/G(S'dw";
      String string0 = null;
      String[] stringArray1 = new String[3];
      stringArray1[0] = "dVb#N5h";
      stringArray1[1] = "v";
      stringArray1[2] = "dVb#N5h";
      // Undeclared exception!
      try { 
        SQLUtil.join("[_-Bzm4+i5D/G(S'dw", "[_-Bzm4+i5D/G(S'dw", stringArray0, (String) null, "dVb#N5h", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      TableContainer tableContainer0 = new TableContainer("XMLNODE", dBSchema0);
      List<DBTable> list0 = tableContainer0.getTables();
      tableContainer0.getTables(false, list0);
      TableContainer tableContainer1 = new TableContainer((String) null, tableContainer0);
      DBCatalog dBCatalog0 = new DBCatalog("execute");
      DBPackage dBPackage0 = new DBPackage("SysschemasIndex1Identifier", dBSchema0);
      DBDataType.getInstance((-16384), "execute");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance((-16384), " or ");
      Integer integer2 = RawTransaction.ABORT;
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.1776044965456927
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.removeComments("org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics");
      SQLUtil.isProcedureCall("update");
      SQLUtil.mutatesStructure("org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics");
      DBDataType dBDataType0 = DBDataType.getInstance(202, "update");
      Integer integer0 = new Integer(202);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, dBDataType0, integer0, integer0);
      dBDataType0.isAlpha();
      Integer.divideUnsigned(202, 202);
      defaultDBColumn0.getForeignKeyConstraint();
      DBDataType.getInstance((-4322), "trHucate");
      Integer.getInteger("trHucate", integer0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance(202, "ESCAPE");
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("ESCAPE", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder2 = new StringBuilder();
      defaultDBTable0.getColumn("update");
      SQLUtil.isDML("trHucate");
      defaultDBColumn1.getNotNullConstraint();
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("liF", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("derb", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "derb";
      stringArray0[1] = "derb";
      stringArray0[2] = "liF";
      stringArray0[3] = "derb";
      stringArray0[4] = "derb";
      stringArray0[5] = "derb";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.419500631817431
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XMLNODE";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "XMLNODE", false, stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBPrimaryKeyConstraint0.equals(dBUniqueConstraint0);
      SQLUtil.mutatesDataOrStructure("XMLNODE");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.substituteMarkers("XMLNODE", "XMLNODE", dBPrimaryKeyConstraint1);
      GDSType.getType("sg#s!#8%oi");
      FBManagedConnectionFactory fBManagedConnectionFactory0 = null;
      try {
        fBManagedConnectionFactory0 = new FBManagedConnectionFactory((GDSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jca.FBManagedConnectionFactory", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.458510418535383
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "pqFU8B#i&bQ&1\n$2M", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("pqFU8B#i&bQ&1\n$2M");
      PrintWriter printWriter0 = mockPrintWriter0.printf("n~o>n-", (Object[]) null);
      printWriter0.print(0L);
      SQLUtil.isDML("drop indexsg#s!#8%oi?@-t=}");
      StringBuilder stringBuilder0 = new StringBuilder("n~o>n-");
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.isDDL("7.1");
      stringBuilder0.append(0L);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.isQuery("rowCount expected ");
      SQLUtil.mutatesStructure("rowCount expected ");
      SQLUtil.mutatesDataOrStructure("n~o>n-");
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0652997128514028
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLUtil.isDDL("delete8");
      String string0 = "42Y0e";
      String[] stringArray0 = new String[2];
      SQLUtil.join("delete8", "#oSk+BUDQgRVQu", stringArray0, "42Y0e", "RAND", stringArray0);
      SQLUtil.normalize("&i;8nd4[5xvF*7/-qf@", false);
      SQLUtil.renderColumnListWithTableName("&i;8nd4[5xvF*7/-qf@", stringArray0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("delete8", "delete8", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("SELECT   RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$CHARACTER_LENGTH as CHAR_LEN, F.RDB$CHARACTER_SET_ID as CHARACTER_SET_ID FROM  RDB$RELATION_FIELDS RF , RDB$FIELDS F  WHERE   RF.RDB$FIELD_SOURCE = F.RDB$FIELD_NAME AND  RF.RDB$FIELD_NAME = ? AND  RF.RDB$RELATION_NAME = ?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'SELECT   RF.RDB$RELATION_NAME as RELATION_NAME, RF.RDB$FIELD_NAME as FIELD_NAME, F.RDB$FIELD_LENGTH as FIELD_LENGTH, F.RDB$FIELD_PRECISION as FIELD_PRECISION, F.RDB$FIELD_SCALE as FIELD_SCALE, F.RDB$FIELD_SUB_TYPE as FIELD_SUB_TYPE, F.RDB$CHARACTER_LENGTH as CHAR_LEN, F.RDB$CHARACTER_SET_ID as CHARACTER_SET_ID FROM  RDB$RELATION_FIELDS RF , RDB$FIELDS F  WHERE   RF.RDB$FIELD_SOURCE = F.RDB$FIELD_NAME AND  RF.RDB$FIELD_NAME = ? AND  RF.RDB$RELATION_NAME = ?'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "K";
      stringArray0[1] = "K";
      // Undeclared exception!
      try { 
        SQLUtil.join("e", "K", stringArray0, "", "K", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Integer.toUnsignedLong((-111913228));
      Integer.max((-2), (-1));
      Integer.min((-205585934), 2);
      Integer.toUnsignedString(2054);
      Integer.getInteger("altr onex");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 44;
      PipedReader pipedReader0 = new PipedReader(44);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.lowerCaseMode(false);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "java.awt.Desktop";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("java.awt.Desktop", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "create materialized view";
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("create materialized view", stringBuilder0);
      ValueStringIgnoreCase valueStringIgnoreCase0 = ValueStringIgnoreCase.get("create materialized view");
      Value value0 = null;
      HeapController heapController0 = new HeapController();
      FKConstraintDefinitionNode fKConstraintDefinitionNode0 = new FKConstraintDefinitionNode();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        valueStringIgnoreCase0.getInt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Data conversion error converting \"create materialized view\" [90021-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer((String) null, compositeDBObject0);
      tableContainer0.getTable((String) null);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[1];
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DBDataType.getInstance((-1655), "*/");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "T/{qs";
      stringArray0[1] = "T/{qs";
      stringArray0[2] = "T/{qs";
      stringArray0[3] = "*/";
      stringArray0[4] = "T/{qs";
      stringArray0[5] = "T/{qs";
      stringArray0[6] = "*/";
      SQLUtil.innerJoin("*/", stringArray0, "Q)Wp*", "T/{qs", stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, "delete", "Q)Wp* as T/{qs on */.T/{qs = T/{qs.T/{qs and */.T/{qs = T/{qs.T/{qs and */.T/{qs = T/{qs.T/{qs and */.*/ = T/{qs.*/ and */.T/{qs = T/{qs.T/{qs and */.T/{qs = T/{qs.T/{qs and */.*/ = T/{qs.*/ and */.null = T/{qs.null", basicUUID0, false);
      assertFalse(schemaDescriptor0.isSYSIBM());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "CONSTANT_NAME";
      stringArray0[1] = "call";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "`M^lvi";
      stringArray0[3] = "inner";
      stringArray0[4] = "BLOB";
      SQLUtil.join("call", "o]Pv]#e=", stringArray0, "y+BsKQ=TBnZ>w=RO+q", "y+BsKQ=TBnZ>w=RO+q", stringArray0);
      ValueStringIgnoreCase.get("renamexmlnode");
      ConnectionInfo connectionInfo0 = new ConnectionInfo("inner");
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-1), threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.412744636863848
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      TableContainer tableContainer0 = new TableContainer("XMLNODE", dBSchema0);
      TableContainer tableContainer1 = new TableContainer((String) null, tableContainer0);
      tableContainer1.getTable("XMLNODE");
      DBCatalog dBCatalog0 = new DBCatalog("execute");
      DBSchema dBSchema1 = new DBSchema("SysschemasIndex1Identifier", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("SysschemasIndex1Identifier", dBSchema0);
      DBDataType.getInstance((-16384), "execute");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance((-16384), " or ");
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SysschemasIndex1Identifier", (DBTable) null, dBDataType0, integer2, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.appendCodePoint(1743);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "SysschemasIndex1Identifier  OR (1,3) NULL";
      stringArray1[1] = "XMLNODE";
      stringArray1[2] = null;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("", stringArray1, "execute", " or ", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize("create unique indexll\tf.r$ky-yo'", false);
      JdbcConnectionPool.create("BLOB", "exec", (String) null);
      PipedWriter pipedWriter0 = null;
      int int0 = 430;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null, 430);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0335620542068176
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      System.setCurrentTimeMillis(30000L);
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.lang.Object@2c062737";
      stringArray0[1] = "java.lang.Object@2c062737";
      stringArray0[2] = "java.lang.Object@2c062737";
      stringArray0[3] = "java.lang.Object@2c062737";
      stringArray0[4] = "java.lang.Object@2c062737";
      stringArray0[5] = "java.lang.Object@2c062737";
      stringArray0[6] = "java.lang.Object@2c062737";
      stringArray0[7] = "java.lang.Object@2c062737";
      stringArray0[8] = "java.lang.Object@2c062737";
      SQLUtil.leftJoin("java.lang.Object@2c062737", stringArray0, "java.lang.Object@2c062737", "java.lang.Object@2c062737", stringArray0);
      String string1 = SQLUtil.innerJoin("delete(, exec, , )", stringArray0, "java.lang.Object@2c062737", "java.lang.Object@2c062737", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      TableContainer tableContainer0 = new TableContainer("XMLNODE", dBSchema0);
      TableContainer tableContainer1 = new TableContainer((String) null, tableContainer0);
      tableContainer1.getTable("XMLNODE");
      DBCatalog dBCatalog0 = new DBCatalog("execute");
      DBSchema dBSchema1 = new DBSchema("SysschemasIndex1Identifier", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("SysschemasIndex1Identifier", dBSchema0);
      DBDataType.getInstance((-16384), "execute");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance((-16384), " or ");
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SysschemasIndex1Identifier", (DBTable) null, dBDataType0, integer2, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.18354893599301
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "pqFU8B#i&bQ&1\n$2M", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("pqFU8B#i&bQ&1\n$2M", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop indexsg#s!#8%oi?@-t=}");
      String string0 = "nlo>nx";
      PrintWriter printWriter0 = mockPrintWriter0.printf("nlo>nx", (Object[]) null);
      printWriter0.print(4294967298L);
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, printWriter0);
      SQLUtil.isDML("drop indexsg#s!#8%oi?@-t=}");
      StringBuilder stringBuilder0 = new StringBuilder("nlo>nx");
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      SQLUtil.isDDL("pQ`");
      stringBuilder0.append((-2978));
      stringBuilder0.append(1628.0F);
      SQLUtil.mutatesStructure("rowCount expected ");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-289267762), threadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.max((-2), (-1));
      Integer.toUnsignedString(2054);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" on ", 32);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("&pH(*BqKhRJ/SOJg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: &pH(*BqKhRJ/SOJg
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<BufferedInputStream> unaryOperator2 = UnaryOperator.identity();
      Function<Object, BufferedInputStream> function0 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, BufferedInputStream> function1 = unaryOperator2.compose((Function<? super Object, ? extends BufferedInputStream>) function0);
      unaryOperator1.compose((Function<? super Integer, ?>) function1);
      unaryOperator0.andThen((Function<? super String, ?>) unaryOperator1);
      columnDescriptorList0.spliterator();
      UnaryOperator.identity();
      columnDescriptorList0.replaceAll(unaryOperator0);
      columnDescriptorList0.getColumnNames();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      columnDescriptorList0.getColumnDescriptor((UUID) null, "D");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("$qy?N[ \"X(1fqq", (DBTable) null, (DBDataType) null, (Integer) null, integer0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      int int0 = (-918);
      Integer.max((-2), (-918));
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("kND");
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("kND", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.chars();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("truncate", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder0.reverse();
      StringBuilder stringBuilder3 = stringBuilder0.append((CharSequence) stringBuilder2);
      stringBuilder2.append("!");
      stringBuilder1.appendCodePoint(1101);
      StringBuilder stringBuilder4 = new StringBuilder();
      stringBuilder3.reverse();
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder2.deleteCharAt(230);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 230
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.9743147528693494
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "CONSTANT_NAME";
      stringArray0[1] = "call";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "`M^lvi";
      stringArray0[3] = "inner";
      stringArray0[4] = "BLOB";
      stringArray0[5] = "Wqna}|X`d}*0s";
      stringArray0[6] = ", ";
      stringArray0[0] = "lDqn8M[iI%];'~-4";
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2001, threadPoolExecutor_AbortPolicy0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CONSTANT_NAME");
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM CONSTANT_NAME WHERE lDqn8M[iI%];'~-4 = 'lDqn8M[iI%];'~-4' AND call = 'call' AND `M^lvi = '`M^lvi' AND inner = 'inner' AND BLOB = 'BLOB' AND Wqna}|X`d}*0s = 'Wqna}|X`d}*0s' AND ,  = ', ' AND null = null", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "call";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "call";
      stringArray0[3] = "inner";
      stringArray0[4] = "BLOB";
      stringArray0[5] = "Wqna}|X`d}*0s";
      stringArray0[6] = ", ";
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      versionNumber0.toString();
      versionNumber0.toString();
      versionNumber0.toString();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Wqna}|X`d}*0s";
      objectArray0[1] = (Object) stringArray0[0];
      objectArray0[3] = (Object) "BLOB";
      objectArray0[4] = (Object) "call";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      dBSchema0.setDoc("XMLNODE");
      dBSchema0.getTables();
      SQLUtil.ownerDotComponent(dBSchema0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("RAND", dBSchema0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream((byte[]) null);
      FBClob fBClob0 = new FBClob();
      try { 
        fBClob0.getCharacterStream(19L, (-1000L));
        fail("Expecting exception: FBDriverNotCapableException");
      
      } catch(FBDriverNotCapableException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.firebirdsql.jdbc.FBClob", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Object object0 = new Object();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select");
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('a');
      stringWriter0.close();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.close();
      stringWriter0.flush();
      mockPrintWriter0.println("hG@-0'edUQS");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("ll\tf.r$ky", compositeDBObject0);
      DBCatalog dBCatalog0 = new DBCatalog("Cost including extra ");
      dBCatalog0.getSequences();
      SQLUtil.typeAndName(dBCatalog0);
      System.setCurrentTimeMillis('a');
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "K";
      stringArray0[1] = "K";
      String string0 = SQLUtil.join("", "K", stringArray0, "", "K", stringArray0);
      assertEquals(" as K on K.K = K.K and K.K = K.K", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter tablederby.language.logstatementtext";
      stringArray0[1] = "alter tablederby.language.logstatementtext";
      stringArray0[2] = "alter tablederby.language.logstatementtext";
      stringArray0[3] = "alter tablederby.language.logstatementtext";
      stringArray0[4] = "alter tablederby.language.logstatementtext";
      stringArray0[5] = "COMPILATIONSCHEMAID";
      stringArray0[6] = "index not found ";
      stringArray0[7] = "<rs^q#<z";
      stringArray0[8] = "alter tablederby.language.logstatementtext";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "alter tablederby.language.logstatementtext";
      stringArray1[1] = "CACHE_SIZE";
      stringArray1[2] = "index not found ";
      stringArray1[3] = "<rs^q#<z";
      stringArray1[4] = "rename";
      stringArray1[5] = "alter tablederby.language.logstatementtext";
      stringArray1[6] = "<rs^q#<z";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("alter tablederby.language.logstatementtext", stringArray0, "CACHE_SIZE", "index not found ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
