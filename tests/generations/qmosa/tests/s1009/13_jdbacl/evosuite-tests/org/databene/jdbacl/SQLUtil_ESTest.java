/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 06:48:20 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Vector;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.SQLInteger;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.BinaryOperatorNode;
import org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode;
import org.apache.derby.impl.sql.compile.FromBaseTable;
import org.apache.derby.impl.sql.compile.FromSubquery;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.GroupByList;
import org.apache.derby.impl.sql.compile.NotNode;
import org.apache.derby.impl.sql.compile.SelectNode;
import org.apache.derby.impl.sql.compile.SubqueryList;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.apache.derby.impl.store.raw.xact.GlobalXactId;
import org.apache.derby.impl.store.raw.xact.TransactionTable;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.jdbc.FBClob;
import org.h2.engine.Session;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ArrayList<DefaultDBColumn> arrayList0 = new ArrayList<DefaultDBColumn>();
      Vector<DBColumn> vector0 = new Vector<DBColumn>(arrayList0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1950865325403197
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PLMGn^-X?L=xL");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "callrefere[cncej";
      SQLUtil.mutatesStructure("callrefere[cncej");
      SQLUtil.mutatesDataOrStructure("alter session");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "PLMGn^-X?L=xL";
      stringArray0[1] = "callrefere[cncej";
      stringArray0[2] = "PLMGn^-X?L=xL";
      stringArray0[3] = "PLMGn^-X?L=xL";
      stringArray0[4] = "PLMGn^-X?L=xL";
      stringArray0[5] = "\"@~/Pk3H55uc,5\"l=+";
      String string1 = null;
      SQLUtil.innerJoin("alter session", stringArray0, (String) null, "gy6&s-ma5wu", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("JuKfC-\"W", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("renamegy6&s-ma5wubp^n", dBSchema0);
      dBSchema0.removeTable(defaultDBTable0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "alter session", false, "gy6&s-ma5wubp^n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'gy6&s-ma5wubp^n' not found in table 'renamegy6&s-ma5wubp^n'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLInteger sQLInteger0 = new SQLInteger((-377137806));
      String string0 = SQLUtil.substituteMarkers("", "[V&plFjwm)4:IcQcX&#", sQLInteger0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4699913100731523
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create tablecallrefere[cncej", 6);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "IFdi`FdWV7");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      SQLUtil.removeComments("IFdi`FdWV7");
      boolean boolean1 = SQLUtil.isDML("IFdi`FdWV7");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Calling rollback() in auto-commit mode is no alowed.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("a");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("a");
      defaultDBTable0.setName(" WHERE ");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("a", defaultDBTable0, (-64), "(Lu`p}{I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (Lu`p}{I
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(61);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.quoteChar(11);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.ordinaryChars((-428839619), (-4));
      streamTokenizer2.sval = null;
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.sval = "[D8$m2h$<Z7g";
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer2.commentChar((-428839619));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer1.commentChar((-377137806));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-121122862), (-4));
      streamTokenizer1.commentChar(357);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer3.ordinaryChars((-814), (-4));
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      String[] stringArray0 = new String[2];
      streamTokenizer2.sval = null;
      stringArray0[1] = null;
      SQLUtil.renderColumnListWithTableName("[D8$m2h$<Z7g", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.813782155210461
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update");
      defaultDBTable0.getColumnNames();
      String string0 = "}p";
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "update", false, stringArray0);
      String string1 = "create materialized view";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint0.equals(dBPrimaryKeyConstraint1);
      SQLUtil.join("}p", "create materialized view", stringArray0, "openCore", ":DJ-RFPCA5jiv!+,/?B", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = (-580);
      stringBuilder0.append((-580));
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      SQLUtil.addOptionalCondition("openCore", stringBuilder0);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getContextManager();
      String string2 = null;
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("&,br4. i;5~'nt.H", false, dBPrimaryKeyConstraint1);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1, "create materialized vi");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, dBTable0, dBDataType0, (Integer) 0, (Integer) 0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(":DJ-RFPCA5jiv!+,/?B", dBTable0, dBDataType0, integer0, (Integer) 3);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("TWCw[K SY~xgV[x", defaultDBTable0, 0, "~K.b4&/p}9#");
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("create materialized vi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'create materialized vi' not found in table 'update'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3447004957129813
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "lR,e";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("lR,e", (DBTable) null, (-1655), "lR,e");
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer integer0 = new Integer((-1655));
      defaultDBColumn0.setFractionDigits(integer0);
      Integer.toUnsignedLong((-1655));
      Integer.getInteger("lR,e LR,E NULL", (-1655));
      Integer.compareUnsigned((-1655), (-1655));
      Integer.getInteger("F)Y{xj?6y3KfFO)`", (Integer) null);
      Integer.toUnsignedLong((-1655));
      defaultDBColumn0.setSize(integer0);
      defaultDBColumn0.toString();
      SelectNode selectNode0 = new SelectNode();
      SelectNode selectNode1 = new SelectNode();
      NotNode notNode0 = new NotNode();
      // Undeclared exception!
      try { 
        selectNode0.assignResultSetNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.131863598435938
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLUtil.normalize("T\"cwC_2|?H7", true);
      MockFile mockFile0 = new MockFile("T \"cwC_2|?H7\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write(41);
      mockFile0.getAbsoluteFile();
      mockFile0.setReadOnly();
      mockPrintWriter0.print("Calling rollback() in auto-commit mode is not allowed.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T\"cwC_2|?H7");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "T\"cwC_2|?H7";
      stringArray0[1] = "Calling rollback() in auto-commit mode is not allowed.";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "A\"398HVs|?", true, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.isDDL("T\"cwC_2|?H7");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "Calling rollback() in auto-commit mode is not allowed.";
      SQLUtil.renderWhereClause(stringArray1, stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "T \"cwC_2|?H7\"");
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt((-2221));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2221
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "lR,e";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("lR,e", (DBTable) null, (-1655), "lR,e");
      SQLUtil.removeComments("lR,e");
      Integer integer0 = new Integer((-1655));
      Integer.compareUnsigned((-1655), (-1655));
      Integer.getInteger("F)Y{xj?6y3KfFO)`", integer0);
      defaultDBColumn0.toString();
      SelectNode selectNode0 = new SelectNode();
      SelectNode selectNode1 = new SelectNode();
      // Undeclared exception!
      try { 
        selectNode0.parseDefault("F)Y{xj?6y3KfFO)`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.543100346718248
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BasicDatabase basicDatabase0 = new BasicDatabase();
      FromVTI fromVTI0 = new FromVTI();
      System.setCurrentTimeMillis(2);
      SQLUtil.isProcedureCall("create unique index");
      SQLUtil.mutatesDataOrStructure("TERRITORY_BASED:IDENTICAL");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "TERRITORY_BASED:IDENTICAL";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("create unique index", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.setTable(defaultDBTable0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index", dBTable0, (-267547835), "org.h2.expression.CompareLike");
      defaultDBColumn0.setFractionDigits((Integer) 3);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(".");
      dBSchema0.getTable("CHECK ");
      DBDataType dBDataType0 = DBDataType.getInstance(42101, ".");
      Integer.getInteger(".");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BIXglTP", (DBTable) null, dBDataType0, (Integer) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append('5');
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder2);
      assertEquals("5null.", stringBuilder2.toString());
      assertEquals("5null.", stringBuilder0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("lR,e", (DBTable) null, (-1655), "lR,e");
      SQLUtil.removeComments("lR,e");
      Integer integer0 = new Integer((-1655));
      Integer.toUnsignedLong((-1655));
      Integer.compareUnsigned((-1655), (-1655));
      Integer.getInteger("F)Y{xj?6y3KfFO)`", (Integer) null);
      Integer.toUnsignedLong((-1655));
      defaultDBColumn0.setSize(integer0);
      defaultDBColumn0.toString();
      SelectNode selectNode0 = new SelectNode();
      SelectNode selectNode1 = new SelectNode();
      // Undeclared exception!
      try { 
        selectNode0.parseDefault("F)Y{xj?6y3KfFO)`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6229568624376496
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog(".D:wGtp}ncqssw");
      DBSchema dBSchema0 = new DBSchema(" as ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" as ", dBSchema0);
      DBCatalog dBCatalog1 = defaultDBTable0.getCatalog();
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      DBTable dBTable0 = dBCatalog1.getTable(" as ");
      dBSchema0.isIdentical(dBCatalog1);
      String string0 = "create unique indexalter materialized viewrefere[cncej";
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "create unique indexalter materialized viewrefere[cncej", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      dBCatalog1.addSchema(dBSchema0);
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.mutatesStructure("?A%`4v#+Q'&");
      TableContainer tableContainer0 = new TableContainer("S|7>.FFV1B>VJEnG'", dBTable0);
      tableContainer0.getTable("inner");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6022173638270396
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("SELgCT * FROM ");
      assertFalse(boolean0);
      
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      FromVTI fromVTI0 = new FromVTI();
      System.setCurrentTimeMillis(2353L);
      boolean boolean1 = SQLUtil.isProcedureCall("create unique index");
      String string0 = SQLUtil.normalize(", ", false);
      assertEquals(",", string0);
      
      boolean boolean2 = SQLUtil.isQuery("select into");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3567084039447384
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ynewmea{q>08", 12345);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("O", 427);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("callrefere[cRncej");
      assertNull(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean1);
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lob: ", dBSchema0);
      defaultDBTable0.getComponents();
      defaultDBTable0.isIdentical(dBSchema0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("lob: ", defaultDBTable0, 202, "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM lob:  WHERE  = ''", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Integer integer0 = RawTransaction.ABORT;
      columnDescriptorList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3809682098476954
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "renamealter table");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "SELECT * FROM ";
      objectArray0[1] = (Object) "renamealter table";
      objectArray0[2] = (Object) null;
      mockPrintWriter0.format(locale0, "renamealter table", objectArray0);
      mockPrintWriter0.write(41);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "IFdi`FdWV7";
      stringArray0[1] = "IFdi`FdWV7";
      stringArray0[2] = "IFdi`FdWV7";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("IFdi`FdWV7", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.substituteMarkers("renamealter table", "IFdi`FdWV7", objectArray0[0]);
      assertEquals("renamealter table", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4216969060399287
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0dJ1c";
      stringArray0[1] = "nlO\nx$/=2";
      stringArray0[2] = null;
      stringArray0[3] = "0dJ1c";
      stringArray0[4] = "0dJ1c";
      stringArray0[5] = null;
      stringArray0[7] = "nlO\nx$/=2";
      stringArray0[8] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
      
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "-f*/uyv5q4]O}Lh@f+2", false, stringArray0);
      dBUniqueConstraint1.setName("gytTimf");
      String string0 = SQLUtil.constraintName(dBUniqueConstraint1);
      assertEquals("CONSTRAINT gytTimf ", string0);
      
      StringBuilder stringBuilder2 = new StringBuilder(2146);
      boolean boolean0 = SQLUtil.isQuery("0dJ1c");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.normalize("nlO\nx$/=2", false);
      assertEquals("nlO x $ / = 2", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Ah`Q1";
      stringArray0[1] = "IFdi`FdWV7";
      stringArray0[3] = "IFdi`FdWV7";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "~R";
      stringArray1[1] = "IFdi`FdWV7";
      // Undeclared exception!
      try { 
        SQLUtil.join("IFdi`FdWV7", "IFdi`FdWV7", stringArray0, "select", "~R", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[2];
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println(stringArray0[0]);
      char[] charArray0 = new char[0];
      mockPrintWriter0.println(charArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("exec");
      boolean boolean0 = SQLUtil.isProcedureCall("exec");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[2];
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println(stringArray0[0]);
      char[] charArray0 = new char[0];
      mockPrintWriter0.println(charArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("INCREMENT");
      String[] stringArray1 = new String[9];
      stringArray1[0] = " (";
      stringArray1[1] = "INCREMENT";
      stringArray1[2] = "A+?IbA={VOZ6_ O";
      stringArray1[3] = " (";
      stringArray1[4] = "INCREMENT";
      stringArray1[5] = " (";
      stringArray1[6] = "X^_`G}6";
      stringArray1[7] = " (";
      stringArray1[8] = "create table)_7!";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" (", false, defaultDBTable0, stringArray1, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" (\" FOREIGN KEY ( (, INCREMENT, A+?IbA={VOZ6_ O,  (, INCREMENT,  (, X^_`G}6,  (, create table)_7!) REFERENCES INCREMENT( (, INCREMENT, A+?IbA={VOZ6_ O,  (, INCREMENT,  (, X^_`G}6,  (, create table)_7!)", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLUtil.removeComments("IFdi`FdWV7");
      boolean boolean0 = SQLUtil.isDML("IFdi`FdWV7");
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('q');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'q'", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5682502364454014
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ynewmea{q>08", 12345);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("O", 427);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("callrefere[cRncej");
      assertNull(boolean0);
      
      Character character0 = new Character('7');
      String string0 = SQLUtil.substituteMarkers("] data node table:", "] data node table:", character0);
      assertEquals("'7'", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize(".>cR,z@\"", false);
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "e7Gv:zu./!p)M";
      SQLUtil.normalize("e7Gv:zu./!p)M", false);
      FromBaseTable fromBaseTable0 = new FromBaseTable();
      TransactionTable transactionTable0 = null;
      try {
        transactionTable0 = new TransactionTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.store.raw.xact.TransactionTable", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "alter materialized viewrefere[cncej";
      SQLUtil.mutatesStructure("alter materialized viewrefere[cncej");
      SelectNode selectNode0 = new SelectNode();
      SelectNode selectNode1 = new SelectNode();
      SelectNode selectNode2 = new SelectNode();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      // Undeclared exception!
      try { 
        slaveDatabase0.stopReplicationMaster();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.db.BasicDatabase", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.309117490227042
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ynewmea{q>08", 12345);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("O", 427);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("callrefere[cRncej");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("insert");
      assertTrue(boolean1);
      
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("insert");
      assertTrue(boolean2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.676428115487582
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "0DX1(";
      stringArray0[4] = "0DX1(";
      SQLUtil.renderColumnNames(stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[1] = "(, 0DX1(, , , 0DX1(, )";
      stringArray1[2] = "(, 0DX1(, , , 0DX1(, )";
      stringArray1[4] = "(, 0DX1(, , , 0DX1(, )";
      String string0 = SQLUtil.renderColumnListWithTableName(stringArray0[0], stringArray1);
      assertEquals("null.null, null.(, 0DX1(, , , 0DX1(, ), null.(, 0DX1(, , , 0DX1(, ), null.null, null.(, 0DX1(, , , 0DX1(, )", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("(, 0DX1(, , , 0DX1(, )", dBCatalog0);
      DBSchema dBSchema1 = new DBSchema(stringArray0[2]);
      DBPackage dBPackage0 = new DBPackage(stringArray1[0], dBSchema1);
      SQLUtil.typeAndName(dBCatalog0);
      String[] stringArray2 = new String[4];
      dBSchema1.setOwner(dBPackage0);
      stringArray2[1] = "42601";
      String string1 = SQLUtil.ownerDotComponent(dBSchema1);
      assertEquals("null.null", string1);
      
      String string2 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string2);
      assertNotNull(string2);
      
      String string3 = SQLUtil.renderColumnNames(stringArray2);
      assertEquals("(, 42601, , )", string3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("a");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("a", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-64), "DATE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(Lu`p}{I", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("DATE", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "refere[Cncej";
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8708776866179195
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLUtil.normalize("nlO\nx$/=2", true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nlO\nx$/=2";
      stringArray0[1] = "nlO  nx $ / = 2";
      stringArray0[2] = "alter index(0dx1 (, 0dx1(, 0dx1 (, 0dx1 (, 0dx1(, 0dx1 ()";
      stringArray0[3] = "nlO  nx $ / = 2";
      stringArray0[4] = "nlO\nx$/=2";
      stringArray0[5] = "nlO  nx $ / = 2";
      stringArray0[6] = "nlO  nx $ / = 2";
      stringArray0[7] = "nlO  nx $ / = 2";
      SQLUtil.renderColumnListWithTableName("=zpg", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("\u0001\u0166", dBCatalog0);
      DBSchema dBSchema1 = new DBSchema("nlO  nx $ / = 2");
      DBPackage dBPackage0 = new DBPackage("p(vMp", dBSchema1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "nlO  nx $ / = 2", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("nlO  nx $ / = 2", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("=zpg", true, dBTable0, stringArray0);
      SQLUtil.typeAndName(dBNonUniqueIndex0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "nlO\nx$/=2 = 'nlO\nx$/=2' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2' AND alter index(0dx1 (, 0dx1(, 0dx1 (, 0dx1 (, 0dx1(, 0dx1 () = 'alter index(0dx1 (, 0dx1(, 0dx1 (, 0dx1 (, 0dx1(, 0dx1 ()' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2' AND nlO\nx$/=2 = 'nlO\nx$/=2' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2'";
      stringArray1[1] = "nlO\nx$/=2";
      stringArray1[2] = "\u0001\u0166";
      stringArray1[3] = "index =zpg";
      stringArray1[4] = "p(vMp";
      stringArray1[5] = "nlO\nx$/=2 = 'nlO\nx$/=2' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2' AND alter index(0dx1 (, 0dx1(, 0dx1 (, 0dx1 (, 0dx1(, 0dx1 () = 'alter index(0dx1 (, 0dx1(, 0dx1 (, 0dx1 (, 0dx1(, 0dx1 ()' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2' AND nlO\nx$/=2 = 'nlO\nx$/=2' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2'";
      stringArray1[6] = "nlO\nx$/=2";
      stringArray1[7] = "\u0001\u0166";
      stringArray1[8] = "nlO\nx$/=2 = 'nlO\nx$/=2' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2' AND alter index(0dx1 (, 0dx1(, 0dx1 (, 0dx1 (, 0dx1(, 0dx1 () = 'alter index(0dx1 (, 0dx1(, 0dx1 (, 0dx1 (, 0dx1(, 0dx1 ()' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2' AND nlO\nx$/=2 = 'nlO\nx$/=2' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2' AND nlO  nx $ / = 2 = 'nlO  nx $ / = 2'";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("(0dx1 (, 0dx1(, 0dx", stringArray1, "call(0dx1 (, 0dx1(, 0dx1 (, 0dx1 (, 0dx1(, 0dx1 ()", "\"}", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1642585569697879
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = SQLUtil.isProcedureCall("--");
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
      
      boolean boolean1 = SQLUtil.isQuery("--");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.200408365674039
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      SQLUtil.parseColumnTypeAndSize("UOLi*CeEcr$P0");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("UOLi*CeEcr$P0", defaultDBTable0, (-1135459369), "UOLi*CeEcr$P0");
      String[] stringArray0 = new String[0];
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) "UOLi*CeEcr$P0";
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) stringWriter1;
      objectArray0[4] = (Object) defaultDBColumn0;
      objectArray0[5] = (Object) defaultDBColumn0;
      objectArray0[6] = (Object) defaultDBTable0;
      objectArray0[7] = (Object) "UOLi*CeEcr$P0";
      objectArray0[8] = (Object) stringWriter0;
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", true, defaultDBTable0, "UOLi*CeEcr$P0");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.5849073991677757
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLUtil.normalize("IFdi`FdWV7", false);
      StringBuilder stringBuilder0 = new StringBuilder("");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(76);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.quoteChar(76);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.slashStarComments(false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader1 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader1);
      streamTokenizer2.ordinaryChars((-1727), 349);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer1.commentChar((-1727));
      streamTokenizer2.ordinaryChars((-4), (-3));
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("u,", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLUtil.isDDL("alter materialized viewrefere[cncej");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alter materialized viewrefere[cncej";
      stringArray0[1] = "FKTABLENAME";
      stringArray0[2] = "alter materialized viewrefere[cncej";
      stringArray0[3] = "`sM";
      stringArray0[4] = "`sM";
      stringArray0[5] = "FKTABLENAME";
      stringArray0[6] = "`sM";
      stringArray0[7] = "}p";
      BTreeController bTreeController0 = new BTreeController();
      BTreeController bTreeController1 = new BTreeController();
      bTreeController1.getXactMgr();
      GroupByList groupByList0 = new GroupByList();
      BinaryOperatorNode binaryOperatorNode0 = new BinaryOperatorNode();
      FKConstraintDefinitionNode fKConstraintDefinitionNode0 = new FKConstraintDefinitionNode();
      fKConstraintDefinitionNode0.getColumnList();
      SelectNode selectNode0 = new SelectNode();
      selectNode0.getWherePredicates();
      SubqueryList subqueryList0 = new SubqueryList();
      selectNode0.getWherePredicates();
      GroupByList groupByList1 = new GroupByList();
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.rejectXMLValues();
      ContextManager contextManager0 = fromVTI0.getContextManager();
      assertNull(contextManager0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(76);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.quoteChar(435);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.ordinaryChars((-428839619), (-4));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.commentChar((-377137806));
      streamTokenizer1.ordinaryChars(1381, 387);
      streamTokenizer2.commentChar((-28578680));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer3.slashStarComments(false);
      streamTokenizer1.pushBack();
      streamTokenizer0.commentChar(90058);
      streamTokenizer0.ordinaryChars((-377137806), (-4));
      streamTokenizer3.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(pipedReader0);
      streamTokenizer4.pushBack();
      streamTokenizer1.parseNumbers();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = ":\\gG[\"q6HN=S";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(":gG[\"q6HN=S", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(76);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.quoteChar(11);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.ordinaryChars((-428839619), (-4));
      streamTokenizer0.ordinaryChar(161);
      streamTokenizer2.commentChar(90);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer1.commentChar((-377137794));
      streamTokenizer1.ordinaryChar(44);
      streamTokenizer1.ordinaryChars(1381, 387);
      streamTokenizer2.commentChar((-28578680));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer3.slashStarComments(false);
      streamTokenizer1.pushBack();
      streamTokenizer0.commentChar(90066);
      streamTokenizer0.ordinaryChars((-377137794), (-4));
      streamTokenizer3.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(pipedReader0);
      streamTokenizer4.pushBack();
      streamTokenizer1.parseNumbers();
      streamTokenizer4.slashStarComments(false);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(pipedReader0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = (-2854);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "Calling rollback() in auto-commit mode is no alowed.";
      String string1 = " NULL";
      SQLUtil.normalize("!{Q;7_C0rK.&$241C`", false);
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.166330769463752
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      dBSchema0.getSequences(false);
      dBSchema0.setDoc("XMLNODE");
      SQLUtil.ownerDotComponent(dBSchema0);
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "char (not supported)", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "}xkn POo$:  A}4XDV", true, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("char (not supported)", (String[]) null, ".", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLUtil.normalize(")WtO3w;ZFF'J+Ri", false);
      int int0 = 0;
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1599, (String) null, 0, (-3163), 0, 7, 0, 0, (-1574), 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.196664918501384
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "PGPORT";
      stringArray0[1] = "5Ut|";
      stringArray0[2] = "Kw&g>";
      stringArray0[3] = "5Ut|";
      stringArray0[4] = "5Ut|";
      stringArray0[5] = "PGPORT";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "5Ut|", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("PGPORT", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "5Ut|", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 5Ut| UNIQUE (PGPORT, 5Ut|, Kw&g>, 5Ut|, 5Ut|, PGPORT)", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(9);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.quoteChar(9);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.pushBack();
      pipedReader0.close();
      streamTokenizer0.parseNumbers();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.typeAndName((DBObject) null);
      System.setCurrentTimeMillis(0L);
      VersionNumber.valueOf("delete");
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.delete((-266416867), (-282783618));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -266416867
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("4b6,uX3]lE\"n6F{^j*|", true);
      FromSubquery fromSubquery0 = new FromSubquery();
      HashSet<JMXPrincipal> hashSet0 = new HashSet<JMXPrincipal>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("4b6,uX3]lE\"n6F{^j*|");
      HashSet<JMXPrincipal> hashSet1 = new HashSet<JMXPrincipal>();
      LinkedHashSet<JMXPrincipal> linkedHashSet0 = new LinkedHashSet<JMXPrincipal>();
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("VE[5:.Sb qj");
      jMXPrincipal0.toString();
      jMXPrincipal1.toString();
      JMXPrincipal jMXPrincipal2 = new JMXPrincipal("pFAv2YQ+?iO");
      JMXPrincipal jMXPrincipal3 = new JMXPrincipal("$7'*rF");
      LinkedHashSet<JMXPrincipal> linkedHashSet1 = new LinkedHashSet<JMXPrincipal>();
      JMXPrincipal jMXPrincipal4 = new JMXPrincipal("4b6,uX3]lE\"n6F{^j*|");
      linkedHashSet1.add(jMXPrincipal3);
      LinkedHashSet<DBNotNullConstraint> linkedHashSet2 = new LinkedHashSet<DBNotNullConstraint>();
      HashSet<JMXPrincipal> hashSet2 = new HashSet<JMXPrincipal>();
      HashSet<JMXPrincipal> hashSet3 = new HashSet<JMXPrincipal>();
      linkedHashSet1.add(jMXPrincipal1);
      Subject subject0 = new Subject(true, hashSet2, linkedHashSet0, linkedHashSet1);
      jMXPrincipal0.implies(subject0);
      jMXPrincipal0.toString();
      Subject subject1 = new Subject();
      Class<JMXPrincipal> class0 = JMXPrincipal.class;
      subject0.getPrincipals(class0);
      JMXPrincipal jMXPrincipal5 = new JMXPrincipal("!$aC*0>`V}{u");
      jMXPrincipal1.implies(subject1);
      Csv csv0 = Csv.getInstance();
      assertEquals(",", csv0.getFieldSeparatorWrite());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1114795332719003
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "ELECT * ROM ";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ELECT * ROM ";
      String string1 = "token 67";
      stringArray0[1] = "ELECT * ROM ";
      stringArray0[2] = "4:ZBKEnPPCSybI S";
      stringArray0[3] = "ELECT * ROM ";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "ELECT * ROM ";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      SQLUtil.addOptionalCondition((String) null, stringBuilder1);
      FBClob fBClob0 = new FBClob();
      int int0 = 222;
      int int1 = 4731;
      int int2 = 42;
      int int3 = 2422;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-3291), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1531782505128936
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BTreeController bTreeController0 = new BTreeController();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      xSQLVAR0.deepCopy();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "?", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "MVCC", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT MVCC UNIQUE ()", string0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, (String[]) null, dBTable0, (String[]) null);
      dBForeignKeyConstraint0.setTable(dBTable0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("FOREIGN KEY () REFERENCES null()", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "selgct";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("selgct", true, "selgct", "selgct");
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      int int0 = 90061;
      char char0 = '>';
      // Undeclared exception!
      try { 
        stringBuilder1.insert(90061, '>');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("INDEX");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("INDEX", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("alter materialized viewcallrefere[crncej", (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0164927125448684
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SQLUtil.removeComments("0DX1(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ".", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      String string0 = "}xkn POo$:  A}4XDV";
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "}xkn POo$:  A}4XDV", true, (String[]) null);
      String string1 = null;
      dBUniqueConstraint1.setName((String) null);
      SQLUtil.constraintName(dBUniqueConstraint1);
      StringBuilder stringBuilder1 = null;
      try {
        stringBuilder1 = new StringBuilder((-164));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3935343515788563
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ynewmea{q>08", 12345);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("O", 427);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "callrefere[cRncej";
      stringArray0[1] = "drop materialized view";
      stringArray0[2] = "callrefere[cRncej";
      stringArray0[3] = "callrefere[cRncej";
      stringArray0[4] = "callrefere[cRncej";
      SQLUtil.renderColumnListWithTableName("drop materialized view", stringArray0);
      DBSchema dBSchema0 = new DBSchema("GS6w5xqpeW", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("callrefe", false, defaultDBTable0, "callrefe");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) "callrefere[cRncej");
      StringBuilder stringBuilder2 = stringBuilder1.append(722.0F);
      StringBuilder stringBuilder3 = SQLUtil.addRequiredCondition("'J]{WAAK]LZRy`Qz", stringBuilder2);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder3, nameSpec0);
      assertEquals("callrefere[cRncej722.0 and 'J]{WAAK]LZRy`Qz", stringBuilder1.toString());
      assertEquals("callrefere[cRncej722.0 and 'J]{WAAK]LZRy`Qz", stringBuilder2.toString());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition(".>cR,z@\"", stringBuilder0);
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = '0';
      charArray0[2] = 'i';
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create table", 45);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      charArray0[3] = 'V';
      charArray0[4] = ';';
      charArray0[5] = '\"';
      charArray0[7] = '4';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".>cR,z@\"");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Km~X,&$4#~]6B<u", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("Km~X,&$4#~]6B<u", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "backup.his");
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(78);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.ttype = 78;
      streamTokenizer0.quoteChar(78);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.ordinaryChars((-428839619), (-4));
      streamTokenizer0.ordinaryChar(161);
      streamTokenizer2.commentChar(74);
      streamTokenizer1.commentChar((-377137794));
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedReader0.connect(pipedWriter0);
      streamTokenizer1.wordChars((-1740), 78);
      streamTokenizer1.ordinaryChar(44);
      streamTokenizer1.ordinaryChars(2370, 387);
      streamTokenizer2.commentChar((-28578680));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer3.slashStarComments(true);
      streamTokenizer1.pushBack();
      streamTokenizer0.commentChar(78);
      streamTokenizer0.ordinaryChars((-377137794), (-4));
      streamTokenizer3.eolIsSignificant(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(pipedReader0);
      streamTokenizer4.pushBack();
      streamTokenizer1.parseNumbers();
      streamTokenizer4.slashStarComments(true);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(829);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.quoteChar(11);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.ordinaryChars((-428839619), (-4));
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer2.sval = null;
      streamTokenizer0.sval = "[8$m2h$<*7g";
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer2.commentChar(90);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer1.commentChar((-377137806));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-121122862), 90);
      streamTokenizer1.commentChar(359);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer3.eolIsSignificant(true);
      streamTokenizer3.ordinaryChar(912);
      streamTokenizer3.ordinaryChars((-814), 1083);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = " NULL";
      SQLUtil.isQuery("SELECT * FROM ");
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)18;
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      xSQLVAR1.deepCopy();
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1655), "T/{qs");
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("T/{qs", (DBTable) null, dBDataType0);
      defaultDBColumn0.setDefaultValue("T/{qs");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.parseColumnTypeAndSize("drop indexexec");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("F+8CdPS;azx?X{f/G", "*d", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("InterruptedException", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema(",", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "SELECT * FROM ";
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = '2';
      charArray0[2] = 'z';
      charArray0[3] = 'e';
      charArray0[4] = 'M';
      charArray0[5] = 'j';
      stringBuilder0.append(charArray0);
      String string0 = ".>cR,z@\\\"";
      SQLUtil.addRequiredCondition(".>cR,z@\"", stringBuilder0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}p";
      stringArray0[1] = "update";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "T/{qs", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("selectselgct * from", true, dBTable0, stringArray0, dBTable0, (String[]) null);
      Integer.max(1753, (-111836631));
      DBDataType dBDataType0 = DBDataType.getInstance(1753, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter sessioncallrefere[cncej", defaultDBTable0, dBDataType0, (Integer) null);
      String string0 = SQLUtil.renderValue("alter sessioncallrefere[cncej");
      assertEquals("'alter sessioncallrefere[cncej'", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("KLH>/{(S_<\"G,X;uq");
      Subject subject0 = new Subject();
      Class<JMXPrincipal> class0 = JMXPrincipal.class;
      Set<JMXPrincipal> set0 = subject0.getPrincipals(class0);
      Subject subject1 = new Subject(true, set0, set0, set0);
      jMXPrincipal0.implies(subject1);
      String string0 = SQLUtil.substituteMarkers("Unkown SQL type.", "KLH>/{(S_<\"G,X;uq", jMXPrincipal0);
      assertEquals("Unkown SQL type.", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType dBDataType0 = DBDataType.getInstance(1279, "2Ga0{l$HFL");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType dBDataType1 = DBDataType.getInstance((-74151546), "insertcallrefere[crncej");
      Integer integer4 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncate", defaultDBTable0, dBDataType1, integer4, integer1);
      Integer.toUnsignedLong((-1489722061));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("truncate", defaultDBTable0, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      defaultDBColumn1.isIdentical(dBColumnArray0[0]);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "truncate, truncate, truncate, truncate, truncate, truncate, truncate, truncate, truncate";
      stringArray0[1] = "insertcallrefere[crncej";
      stringArray0[2] = "2Ga0{l$HFL";
      stringArray0[3] = "vn2hp/#";
      stringArray0[4] = "OJ(G";
      stringArray0[5] = "insertcallrefere[crncej";
      stringArray0[6] = "2Ga0{l$HFL";
      stringArray0[7] = "truncate, truncate, truncate, truncate, truncate, truncate, truncate, truncate, truncate";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("truncate", (String[]) null, "2Ga0{l$HFL", "insertcallrefere[crncej", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewcallrefere[crncej");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "drop materialized viewcallrefere[crncej";
      stringArray0[1] = "org.apache.derby.impl.sql.compile.CharConstantNode";
      stringArray0[2] = "drop materialized viewcallrefere[crncej";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.hsqldb.Table", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.apache.derby.impl.sql.compile.CharConstantNode", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, " NOT", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org.hsqldb.Table");
      StringBuilder stringBuilder1 = stringBuilder0.append("drop materialized viewcallrefere[crncej");
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '~';
      charArray0[2] = '/';
      charArray0[3] = '$';
      charArray0[4] = 'x';
      charArray0[5] = ' ';
      charArray0[6] = 'B';
      charArray0[7] = 'B';
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder2, nameSpec0);
      assertEquals("org.hsqldb.Tabledrop materialized viewcallrefere[crncej#~/$x BBCONSTRAINT \" NOT\" ", stringBuilder1.toString());
      assertEquals("org.hsqldb.Tabledrop materialized viewcallrefere[crncej#~/$x BBCONSTRAINT \" NOT\" ", stringBuilder2.toString());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[2];
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println(stringArray0[0]);
      char[] charArray0 = new char[0];
      mockPrintWriter0.println(charArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("create table)_7!");
      mockPrintWriter0.print("truncate)_7!");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "!G?", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      int int0 = (-2433);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2433), (float) (-2433));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2433
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}p";
      stringArray0[1] = "update";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "T/{qs", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("selectselgct * from", true, dBTable0, stringArray0, dBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"selectselgct * from\" FOREIGN KEY (}p, update) REFERENCES update()", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8885995049191862
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("21000");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "21000";
      stringArray0[1] = "21000";
      stringArray0[2] = "%9HkjmjI$@y";
      stringArray0[3] = "21000";
      stringArray0[4] = "}p";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "21000", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("21000", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("21000", true, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 21000 FOREIGN KEY (21000, 21000, %9HkjmjI$@y, 21000, }p) REFERENCES 21000(21000, 21000, %9HkjmjI$@y, 21000, }p)", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.derby.impl.load.ExportWriteDataAbstract";
      stringArray0[1] = "#\"{|hs";
      stringArray0[2] = "#\"{|hs";
      stringArray0[3] = "";
      stringArray0[4] = "#\"{|hs";
      stringArray0[5] = "";
      stringArray0[6] = "#\"{|hs";
      stringArray0[7] = "";
      stringArray0[8] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("#\"{|hs", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer0 = new Integer(1);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#\"{|hs", dBTable0, (DBDataType) null, integer0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)64;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Boolean.valueOf("Failed to re-encode xml data.");
      Boolean boolean0 = SQLUtil.mutatesStructure(" REFERENCES ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(9);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.quoteChar(9);
      streamTokenizer0.slashStarComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars(9, 421);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.commentChar((-377137806));
      streamTokenizer0.wordChars(421, (-377137806));
      streamTokenizer1.ordinaryChars((-28578680), 9);
      streamTokenizer1.commentChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-71);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.mutatesDataOrStructure("<");
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{X@!LNNr':";
      stringArray0[1] = "{X@!LNNr':";
      stringArray0[2] = "{X@!LNNr':";
      stringArray0[3] = "{X@!LNNr':";
      stringArray0[4] = "{X@!LNNr':";
      stringArray0[5] = "{X@!LNNr':";
      stringArray0[6] = "{X@!LNNr':";
      stringArray0[7] = "{X@!LNNr':";
      stringArray0[8] = "{X@!LNNr':";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("{X@!LNNr':", stringArray0, "{X@!LNNr':", "{X@!LNNr':", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[0] = "^T>+5cf1G/.(Uyq{VL";
      stringArray0[1] = "^T>+5cf1G/.(Uyq{VL";
      stringArray0[2] = "org.firebirdsql.jdbc.FBCallableStatement";
      stringArray0[3] = "^T>+5cf1G/.(Uyq{VL";
      stringArray0[4] = "0'fVf";
      stringArray0[5] = "^T>+5cf1G/.(Uyq{VL";
      stringArray0[6] = "^T>+5cf1G/.(Uyq{VL";
      // Undeclared exception!
      try { 
        SQLUtil.join("^T>+5cf1G/.(Uyq{VL", "^T>+5cf1G/.(Uyq{VL", stringArray0, "^T>+5cf1G/.(Uyq{VL", "^T>+5cf1G/.(Uyq{VL", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Calling rollback() in auto-commit ode is no alowgd.";
      String string1 = "callrefere[crncej";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("$.wuQytj14x~HD", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("''", "org.databene.jdbacl.sql.parser.SQLParser$name_return", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("m7qdAS", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("CLOB", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("into", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "execalter matqrialized viewrefare[cnc|j";
      stringArray0[1] = "into";
      stringArray0[2] = "m7qdAS";
      stringArray0[3] = "m7qdAS";
      stringArray0[4] = "CLOB";
      stringArray0[5] = "into";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "''", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (execalter matqrialized viewrefare[cnc|j, into, m7qdAS, m7qdAS, CLOB, into)", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLUtil.normalize("", false);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "XMLNODE";
      stringArray0[5] = " IN(";
      stringArray0[6] = "XMLNODE";
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLUtil.normalize("TW1*>?HV_", true);
      FromSubquery fromSubquery0 = new FromSubquery();
      HashSet<JMXPrincipal> hashSet0 = new HashSet<JMXPrincipal>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("TW1 * > ? HV_");
      HashSet<JMXPrincipal> hashSet1 = new HashSet<JMXPrincipal>();
      LinkedHashSet<JMXPrincipal> linkedHashSet0 = new LinkedHashSet<JMXPrincipal>();
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("$7'*rF");
      jMXPrincipal1.toString();
      jMXPrincipal1.toString();
      JMXPrincipal jMXPrincipal2 = new JMXPrincipal(" AND ");
      JMXPrincipal jMXPrincipal3 = new JMXPrincipal(" AND ");
      LinkedHashSet<JMXPrincipal> linkedHashSet1 = new LinkedHashSet<JMXPrincipal>();
      JMXPrincipal jMXPrincipal4 = new JMXPrincipal("select intocallrefere[crncej");
      linkedHashSet1.add(jMXPrincipal3);
      LinkedHashSet<DBNotNullConstraint> linkedHashSet2 = new LinkedHashSet<DBNotNullConstraint>();
      HashSet<JMXPrincipal> hashSet2 = new HashSet<JMXPrincipal>();
      HashSet<JMXPrincipal> hashSet3 = new HashSet<JMXPrincipal>();
      hashSet3.add(jMXPrincipal1);
      Subject subject0 = new Subject(true, hashSet2, linkedHashSet0, linkedHashSet1);
      jMXPrincipal2.implies(subject0);
      jMXPrincipal3.toString();
      Subject subject1 = new Subject();
      Class<JMXPrincipal> class0 = JMXPrincipal.class;
      subject1.getPrincipals(class0);
      JMXPrincipal jMXPrincipal5 = new JMXPrincipal("create unique indexcallrefere[crncej");
      jMXPrincipal1.implies(subject0);
      Csv csv0 = Csv.getInstance();
      assertEquals("", csv0.getNullString());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create tablecallrefere[cncej", 6);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      System.setCurrentTimeMillis(0L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "4IeGK#?qV%M";
      stringArray0[1] = "4IeGK#?qV%M";
      stringArray0[2] = "4IeGK#?qV%M";
      stringArray0[3] = "4IeGK#?qV%M";
      stringArray0[4] = "4IeGK#?qV%M";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "4IeGK#?qV%M", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("4IeGK#?qV%M", true, dBUniqueConstraint0);
      dBUniqueConstraint0.isIdentical(dBUniqueIndex0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "rename", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[2];
      stringArray1[0] = ">Q:<bj";
      stringArray1[1] = ">Q:<bj";
      SQLUtil.innerJoin(">Q:<bj", stringArray0, ">Q:<bj", "", stringArray1);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, ">Q:<bj as  on ", ">Q:<bj", basicUUID0, false);
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, "<P\"O?ZxI ", schemaDescriptor0, (-2617), false, true);
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getConstraintDescriptors(tableDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)64;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("(G/*");
      jMXPrincipal0.toString();
      Subject subject0 = new Subject();
      Class<JMXPrincipal> class0 = JMXPrincipal.class;
      subject0.getPrincipals(class0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("alter matq");
      jMXPrincipal0.implies(subject0);
      Csv.getInstance();
      String string0 = SQLUtil.normalize("}-{qJ,1:AVYK", false);
      assertEquals("} - { qJ, 1 : AVYK", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[2];
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println(stringArray0[0]);
      char[] charArray0 = new char[0];
      mockPrintWriter0.println(charArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("create table)_7!");
      mockPrintWriter0.print("truncate)_7!");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      mockPrintWriter0.close();
      charArray0[0] = '~';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      mockPrintWriter0.println();
      charArray0[4] = 'a';
      mockPrintWriter0.println(charArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("hG@-0'edUQS");
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(76);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.quoteChar(11);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer1.ordinaryChars((-428839619), (-4));
      streamTokenizer2.commentChar(90);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer1.commentChar((-377137806));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.ordinaryChars((-121122862), 90);
      streamTokenizer1.commentChar(359);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer3.ordinaryChar(912);
      streamTokenizer3.ordinaryChars((-814), 1083);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("{f* 9(km'r1+,?i|We");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: {f* 9(km'r1+,?i|We
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.3458240980466787
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "=_|h0gHV/";
      stringArray0[1] = "drop table";
      stringArray0[2] = "-B:GI4y#Fc";
      stringArray0[3] = "DML MOD";
      stringArray0[4] = " NOT NULL";
      stringArray0[5] = "sg#s!#8%oi?";
      stringArray0[6] = "alter materialized view";
      stringArray0[7] = " RDB$OBJECT_TYPE = 0 and RDB$FIELD_NAME is null order by 3, 6";
      stringArray0[8] = "drop indexsg#s!#8%oi?@-t=}";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE =_|h0gHV/ = '=_|h0gHV/' AND drop table = 'drop table' AND -B:GI4y#Fc = '-B:GI4y#Fc' AND DML MOD = 'DML MOD' AND  NOT NULL = ' NOT NULL' AND sg#s!#8%oi? = 'sg#s!#8%oi?' AND alter materialized view = 'alter materialized view' AND  RDB$OBJECT_TYPE = 0 and RDB$FIELD_NAME is null order by 3, 6 = ' RDB$OBJECT_TYPE = 0 and RDB$FIELD_NAME is null order by 3, 6' AND drop indexsg#s!#8%oi?@-t=} = 'drop indexsg#s!#8%oi?@-t=}'", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("inner", "EaY4}", (VersionNumber) null);
      defaultDatabase0.getTable("inner", false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "inner";
      stringArray0[1] = "inner";
      stringArray0[2] = "inner";
      stringArray0[3] = "EaY4}";
      stringArray0[4] = "inner";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.5457158654627987
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLUtil.isQuery("");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      SQLUtil.removeComments("");
      SQLUtil.parseColumnTypeAndSize("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "F+8CdPS;azx?X{f/G", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("=", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "F+8CdPS;azx?X{f/G";
      stringArray0[1] = "";
      SQLUtil.removeComments("");
      boolean boolean1 = SQLUtil.isQuery("");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLUtil.normalize("(.1*>?HV_", false);
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter materialized viewrefAre[cncej");
      SelectNode selectNode0 = new SelectNode();
      Session session0 = new Session();
      String string0 = "alter mate";
      // Undeclared exception!
      try { 
        session0.addSavepoint("alter materialized viewrefAre[cncej");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.engine.Session", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLUtil.isQuery("SELECT * FROM ");
      // Undeclared exception!
      try { 
        ContextService.getContext("SELECT * FROM ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Calling rollback() in auto-commit mode is no alowed.";
      stringArray0[1] = "Calling rollback() in auto-commit mode is no alowed.";
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("Calling rollback() in auto-commit mode is no alowed.");
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("Calling rollback() in auto-commit mode is no alowed.");
      jMXPrincipal0.equals(jMXPrincipal1);
      jMXPrincipal0.implies((Subject) null);
      GlobalXactId globalXactId0 = new GlobalXactId();
      PipedWriter pipedWriter0 = new PipedWriter();
      boolean boolean0 = SQLUtil.isDML("Calling rollback() in auto-commit mode is no alowed.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter matQrialized viewrefAre[cnc|j");
      SelectNode selectNode0 = new SelectNode();
      Session session0 = new Session();
      // Undeclared exception!
      try { 
        selectNode0.getDependencyManager();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Calling rollback() in auto-commit ode is no alowgd.";
      stringArray0[1] = "Calling rollback() in auto-commit ode is no alowgd.";
      stringArray0[2] = "Calling rollback() in auto-commit ode is no alowgd.";
      stringArray0[3] = "Calling rollback() in auto-commit ode is no alowgd.";
      stringArray0[4] = "Calling rollback() in auto-commit ode is no alowgd.";
      stringArray0[5] = "Calling rollback() in auto-commit ode is no alowgd.";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "Calling rollback() in auto-commit ode is no alowgd.";
      stringArray1[1] = "callrefere[cr";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "callrefere[cr";
      stringArray1[5] = "Calling rollback() in auto-commit ode is no alowgd.";
      stringArray1[6] = "Calling rollback() in auto-commit ode is no alowgd.";
      stringArray1[7] = "Calling rollback() in auto-commit ode is no alowgd.";
      String string0 = SQLUtil.leftJoin("Calling rollback() in auto-commit ode is no alowgd.", stringArray0, "callrefere[cr", "", stringArray1);
      assertEquals("left join callrefere[cr as  on Calling rollback() in auto-commit ode is no alowgd..Calling rollback() in auto-commit ode is no alowgd. = .Calling rollback() in auto-commit ode is no alowgd. and Calling rollback() in auto-commit ode is no alowgd..Calling rollback() in auto-commit ode is no alowgd. = .callrefere[cr and Calling rollback() in auto-commit ode is no alowgd..Calling rollback() in auto-commit ode is no alowgd. = . and Calling rollback() in auto-commit ode is no alowgd..Calling rollback() in auto-commit ode is no alowgd. = . and Calling rollback() in auto-commit ode is no alowgd..Calling rollback() in auto-commit ode is no alowgd. = .callrefere[cr and Calling rollback() in auto-commit ode is no alowgd..Calling rollback() in auto-commit ode is no alowgd. = .Calling rollback() in auto-commit ode is no alowgd.", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, "callcalling rollback() in auto-commit mode is not allowed.", stringArray0);
      assertEquals("null as callcalling rollback() in auto-commit mode is not allowed. on ", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ifdi`f";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      String string0 = SQLUtil.join("K:eQ1';R^oA308(", "K:eQ1';R^oA308(", stringArray0, "inner", "alter materialized view", stringArray0);
      assertEquals("K:eQ1';R^oA308( join inner as alter materialized view on K:eQ1';R^oA308(.ifdi`f = alter materialized view.ifdi`f and K:eQ1';R^oA308(.null = alter materialized view.null and K:eQ1';R^oA308(.null = alter materialized view.null and K:eQ1';R^oA308(.null = alter materialized view.null", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLUtil.isDDL("SELECT * aROM ");
      // Undeclared exception!
      try { 
        ContextService.getContext("SELECT * aROM ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter matQrialized viewrefAre[cnc|j");
      SelectNode selectNode0 = new SelectNode();
      Session session0 = new Session();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      MockThread mockThread0 = new MockThread("alter matQrialized viewrefAre[cnc|j");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      scheduledThreadPoolExecutor0.isShutdown();
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor0);
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(2, threadFactory1, threadPoolExecutor_DiscardPolicy0);
      int int0 = 9;
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThreadFactory threadFactory2 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor2 = new ScheduledThreadPoolExecutor(9);
      scheduledThreadPoolExecutor2.shutdown();
      scheduledThreadPoolExecutor2.getQueue();
      int int1 = 1174;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy1 = new ThreadPoolExecutor.DiscardPolicy();
      int int2 = (-2411);
      scheduledThreadPoolExecutor1.getTaskCount();
      int int3 = 1465;
      scheduledThreadPoolExecutor1.getQueue();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      MockThread.dumpStack();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      ThreadPoolExecutor threadPoolExecutor1 = null;
      try {
        threadPoolExecutor1 = new ThreadPoolExecutor(1174, 4191, (-2671L), timeUnit0, blockingQueue0, threadFactory2, threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }
}
