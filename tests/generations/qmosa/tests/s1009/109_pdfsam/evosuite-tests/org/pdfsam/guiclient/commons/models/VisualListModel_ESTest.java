/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 05:30:51 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGraphics2D;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.color.ICC_Profile;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.MouseWheelListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.ImagingOpException;
import java.awt.image.Kernel;
import java.awt.image.renderable.ParameterBlock;
import java.beans.PropertyChangeEvent;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import javax.media.jai.CollectionOp;
import javax.media.jai.OperationRegistry;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.border.Border;
import javax.swing.event.ListDataListener;
import javax.swing.event.PopupMenuListener;
import javax.swing.plaf.basic.BasicRootPaneUI;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalRootPaneUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0473092967465583
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      Vector<Integer> vector0 = new Vector<Integer>();
      Predicate<VisualPageListItem> predicate0 = Predicate.isEqual((Object) stack0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<VisualPageListItem> predicate2 = predicate0.and(predicate1);
      Predicate<VisualPageListItem> predicate3 = predicate2.or(predicate0);
      predicate2.or(predicate3);
      Predicate<VisualPageListItem> predicate4 = predicate3.negate();
      stack0.removeIf(predicate4);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>(stack0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.add((VisualPageListItem) null);
      linkedList0.add((VisualPageListItem) null);
      linkedList0.stream();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      visualListModel0.removeElements(0, 0, false);
      Stack<VisualPageListItem> stack2 = new Stack<VisualPageListItem>();
      stack2.add((VisualPageListItem) null);
      visualListModel0.moveUpIndex(2);
      // Undeclared exception!
      try { 
        stack2.addAll((Collection<? extends VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 8;
      JList<VisualPageListItem> jList0 = new JList<VisualPageListItem>(visualListModel0);
      List<VisualPageListItem> list0 = jList0.getSelectedValuesList();
      // Undeclared exception!
      try { 
        visualListModel0.appendAllElements(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.06075971812573
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.setData(visualPageListItemArray0);
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      Dialog.ModalExclusionType[] dialog_ModalExclusionTypeArray0 = new Dialog.ModalExclusionType[6];
      dialog_ModalExclusionTypeArray0[0] = dialog_ModalExclusionType0;
      visualListModel0.moveUpIndex(4);
      dialog_ModalExclusionTypeArray0[1] = dialog_ModalExclusionType0;
      dialog_ModalExclusionTypeArray0[2] = dialog_ModalExclusionType0;
      dialog_ModalExclusionTypeArray0[3] = dialog_ModalExclusionType0;
      dialog_ModalExclusionTypeArray0[1] = dialog_ModalExclusionType0;
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel0 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.TOOLKIT_EXCLUDE;
      Dialog.ModalExclusionType[] dialog_ModalExclusionTypeArray0 = new Dialog.ModalExclusionType[6];
      dialog_ModalExclusionTypeArray0[0] = dialog_ModalExclusionType0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dialog_ModalExclusionTypeArray0[1] = dialog_ModalExclusionType0;
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel0 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox0.getAction();
      jComboBox0.firePopupMenuCanceled();
      JComboBox<Dialog.ModalExclusionType> jComboBox1 = new JComboBox<Dialog.ModalExclusionType>();
      Locale locale0 = Locale.TAIWAN;
      jComboBox1.firePopupMenuCanceled();
      locale0.getUnicodeLocaleKeys();
      JComboBox<Dialog.ModalExclusionType> jComboBox2 = new JComboBox<Dialog.ModalExclusionType>();
      JComboBox<Dialog.ModalExclusionType> jComboBox3 = new JComboBox<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      jComboBox3.putClientProperty(locale0, integer0);
      jComboBox3.addPopupMenuListener((PopupMenuListener) null);
      JComboBox<Dialog.ModalExclusionType> jComboBox4 = new JComboBox<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      jComboBox4.setBorder((Border) null);
      jComboBox4.getComponentPopupMenu();
      jComboBox4.getContainerListeners();
      JComboBox<Dialog.ModalExclusionType> jComboBox5 = new JComboBox<Dialog.ModalExclusionType>(defaultComboBoxModel0);
      Vector<Dialog.ModalExclusionType> vector0 = new Vector<Dialog.ModalExclusionType>();
      VisualListModel visualListModel1 = new VisualListModel();
      OperationRegistry operationRegistry0 = new OperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      HashMap<RenderingHints.Key, KeyStroke> hashMap0 = new HashMap<RenderingHints.Key, KeyStroke>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "A9(*NA2%s3@p\"n6O'ev", parameterBlock0, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel1.prependAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"A9(*NA2%s3@p\"n6O'ev\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      stack0.clone();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      // Undeclared exception!
      try { 
        visualListModel0.appendAllElements(stack0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      visualListModel0.updateElementAt((-1900), (VisualPageListItem) null);
      visualListModel0.getValidElements();
      visualListModel0.data = null;
      int[] intArray0 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.getElements();
      // Undeclared exception!
      try { 
        visualListModel0.clearData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualPageListItem visualPageListItem0 = null;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>(stack0);
      VisualPageListItem visualPageListItem1 = null;
      linkedList0.add((VisualPageListItem) null);
      linkedList0.addLast((VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList1 = new LinkedList<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      visualListModel0.moveDownIndex(0);
      Stack<VisualPageListItem> stack2 = new Stack<VisualPageListItem>();
      stack2.addAll((Collection<? extends VisualPageListItem>) stack0);
      int int0 = (-1270);
      Stack<VisualPageListItem> stack3 = new Stack<VisualPageListItem>();
      // Undeclared exception!
      try { 
        stack3.setElementAt((VisualPageListItem) null, (-1270));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.462321065646792
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>(stack0);
      linkedList0.add((VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList1 = new LinkedList<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualListModel1.setData(visualPageListItemArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel0.addElement(visualPageListItemArray0[2]);
      visualListModel1.clearData();
      visualListModel0.getSize();
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.removeElements(0, 1, true);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualPageListItem visualPageListItem0 = null;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>(stack0);
      VisualPageListItem visualPageListItem1 = null;
      linkedList0.add((VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList1 = new LinkedList<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      int int0 = 0;
      visualListModel0.moveDownIndex(0);
      Stack<VisualPageListItem> stack2 = new Stack<VisualPageListItem>();
      stack2.addAll((Collection<? extends VisualPageListItem>) stack0);
      int int1 = (-1270);
      VisualPageListItem visualPageListItem2 = null;
      try {
        visualPageListItem2 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3822194921698756
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElementAt(visualPageListItemArray0[2], 443);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.parallelStream();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      treeSet0.descendingIterator();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.test(stack0);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate.isEqual((Object) predicate2);
      predicate3.or(predicate1);
      predicate0.or(predicate3);
      predicate0.and(predicate2);
      treeSet0.size();
      treeSet0.removeIf(predicate0);
      treeSet0.parallelStream();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) treeSet0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addElement(visualPageListItemArray0[0]);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.updateElementAt(13, visualPageListItemArray0[1]);
      int[] intArray0 = new int[1];
      intArray0[0] = 13;
      visualListModel0.addElementAt(visualPageListItemArray0[1], 13);
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 14
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.462097596650731
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElementAt(visualPageListItemArray0[2], 449);
      visualListModel0.getValidElements();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.parallelStream();
      treeSet0.parallelStream();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) treeSet0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.removeElementAt(1, true);
      visualListModel0.subList(449, 1127, true);
      assertEquals(6, visualListModel0.getSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8800221234841177
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      VisualListModel visualListModel1 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>(stack0);
      VisualPageListItem visualPageListItem0 = null;
      stack0.add((VisualPageListItem) null);
      linkedList0.add((VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList1 = new LinkedList<VisualPageListItem>();
      visualListModel1.addAllElements((Collection<VisualPageListItem>) linkedList0);
      linkedList1.add((VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualListModel1.removeElements(0, 0, true);
      visualPageListItemArray0[0] = null;
      stack0.addAll((Collection<? extends VisualPageListItem>) stack0);
      int int1 = (-1270);
      // Undeclared exception!
      try { 
        stack0.setElementAt(visualPageListItemArray0[0], (-1270));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.528966596020963
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      int[] intArray0 = new int[20];
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox0.firePopupMenuCanceled();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener3 = AWTEventMulticaster.add(hierarchyBoundsListener2, hierarchyBoundsListener2);
      jComboBox0.addHierarchyBoundsListener(hierarchyBoundsListener3);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("PJ}g", (VetoableChangeListener) null);
      jComboBox0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      jComboBox0.getContainerListeners();
      PopupMenuListener popupMenuListener0 = mock(PopupMenuListener.class, new ViolatedAssumptionAnswer());
      jComboBox0.addPopupMenuListener(popupMenuListener0);
      jComboBox0.doLayout();
      JComboBox<Dialog.ModalExclusionType> jComboBox1 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox1.removeNotify();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray1 = new int[3];
      visualListModel0.undeleteElements(intArray0);
      intArray1[1] = 0;
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.reverseElements(intArray1);
      visualListModel0.rotateClockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.733405568551526
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.addListDataListener((ListDataListener) null);
      linkedList0.containsAll(stack0);
      linkedList0.add((VisualPageListItem) null);
      linkedList0.add((VisualPageListItem) null);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, true);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.subList((-1), (-1261), true);
      visualListModel0.getSize();
      Stack<Dialog.ModalExclusionType> stack1 = new Stack<Dialog.ModalExclusionType>();
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel0 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(stack1);
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      defaultComboBoxModel0.insertElementAt(dialog_ModalExclusionType0, 0);
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>(defaultComboBoxModel0);
      visualListModel0.addListDataListener(jComboBox0);
      visualListModel0.getValidElements();
      visualListModel0.addAllElements(collection0);
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) null);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedList0);
      visualListModel0.updateElementAt(9, visualPageListItemArray0[1]);
      assertEquals(4, visualListModel0.getSize());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.669435108494575
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add((Integer) 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>(stack0);
      linkedList0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      linkedList0.add((VisualPageListItem) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<VisualPageListItem> linkedList1 = new LinkedList<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[2] = null;
      visualListModel1.setData(visualPageListItemArray0);
      int[] intArray1 = new int[1];
      intArray1[0] = 715;
      try { 
        visualListModel1.undeleteElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 715
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1663307694637526
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualPageListItem visualPageListItem0 = null;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = visualPageListItemArray0[1];
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.setData(visualPageListItemArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel1.data;
      vector0.add((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      int int0 = 1;
      visualListModel0.getElementAt(1);
      VisualPageListItem visualPageListItem1 = null;
      try {
        visualPageListItem1 = new VisualPageListItem((-9), "log4j.configDebug");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1663307694637526
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualPageListItem visualPageListItem0 = null;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.setData(visualPageListItemArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel1.data;
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      int int0 = 1;
      visualListModel0.getElementAt(1);
      VisualPageListItem visualPageListItem1 = null;
      try {
        visualPageListItem1 = new VisualPageListItem((-9), "log4j.configDebug");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3113369638633987
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel1.undeleteElements(intArray0);
      int[] intArray1 = new int[5];
      intArray1[0] = 650;
      intArray1[1] = 1523;
      intArray1[2] = 125;
      intArray1[3] = 650;
      intArray1[4] = 650;
      try { 
        visualListModel0.reverseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 650
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.528532040202024
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel1.reverseElements(intArray0);
      JList<VisualPageListItem> jList0 = new JList<VisualPageListItem>(visualListModel2);
      List<VisualPageListItem> list0 = jList0.getSelectedValuesList();
      visualListModel1.addAllElements(0, (Collection<VisualPageListItem>) list0);
      visualListModel2.setData(visualPageListItemArray0);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      // Undeclared exception!
      try { 
        visualListModel1.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3080570415126394
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<Integer> stack0 = new Stack<Integer>();
      Boolean boolean0 = new Boolean((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stack0.add((Integer) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stack0.add((Integer) 0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      visualListModel0.reverseElements(intArray0);
      stack0.forEach(consumer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "()");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[0] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.330017050443346
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElementAt(visualPageListItemArray0[2], 443);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.parallelStream();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      treeSet0.descendingIterator();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.test(stack0);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      predicate3.or(predicate1);
      predicate0.or(predicate3);
      predicate0.and(predicate2);
      treeSet0.size();
      treeSet0.removeIf(predicate0);
      treeSet0.parallelStream();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) treeSet0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addElement(visualPageListItemArray0[0]);
      int int0 = 13;
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.updateElementAt(13, visualPageListItemArray0[1]);
      int[] intArray0 = new int[1];
      intArray0[0] = 13;
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 13
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7576378583071737
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      VisualListModel visualListModel0 = new VisualListModel();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.parallelStream();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      treeSet0.descendingIterator();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)1;
      byteArray0[6] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2706), (byte) (-73));
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      Predicate<Object> predicate5 = predicate4.or(predicate1);
      Predicate<Object> predicate6 = predicate1.and(predicate3);
      Predicate.isEqual((Object) predicate2);
      predicate4.or(predicate1);
      predicate5.negate();
      treeSet0.size();
      treeSet0.removeIf(predicate0);
      treeSet0.parallelStream();
      visualListModel0.addElement(visualPageListItemArray0[0]);
      predicate6.negate();
      visualListModel0.updateElementAt(0, visualPageListItemArray0[1]);
      int[] intArray0 = new int[1];
      visualListModel0.addElementAt(visualPageListItemArray0[1], 0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.669435108494575
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      Dialog.ModalExclusionType[] dialog_ModalExclusionTypeArray0 = new Dialog.ModalExclusionType[6];
      dialog_ModalExclusionTypeArray0[0] = dialog_ModalExclusionType0;
      dialog_ModalExclusionTypeArray0[1] = dialog_ModalExclusionType0;
      Dialog.ModalExclusionType dialog_ModalExclusionType1 = Dialog.ModalExclusionType.NO_EXCLUDE;
      dialog_ModalExclusionTypeArray0[2] = dialog_ModalExclusionType1;
      dialog_ModalExclusionTypeArray0[3] = dialog_ModalExclusionType0;
      dialog_ModalExclusionTypeArray0[5] = dialog_ModalExclusionType0;
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel0 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel1 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox0.firePopupMenuCanceled();
      JComboBox<Dialog.ModalExclusionType> jComboBox1 = new JComboBox<Dialog.ModalExclusionType>();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      jComboBox1.addMouseWheelListener((MouseWheelListener) null);
      jComboBox1.getContainerListeners();
      JComboBox<Dialog.ModalExclusionType> jComboBox2 = new JComboBox<Dialog.ModalExclusionType>(defaultComboBoxModel0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jComboBox1.removeInputMethodListener((InputMethodListener) null);
      visualListModel0.undeleteElements(intArray0);
      PopupMenuListener popupMenuListener0 = mock(PopupMenuListener.class, new ViolatedAssumptionAnswer());
      jComboBox1.addPopupMenuListener(popupMenuListener0);
      visualListModel0.setData(visualPageListItemArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.95571359982777
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      Vector<Integer> vector0 = new Vector<Integer>();
      Predicate<VisualPageListItem> predicate0 = Predicate.isEqual((Object) stack0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<VisualPageListItem> predicate2 = predicate0.and(predicate1);
      Predicate<VisualPageListItem> predicate3 = predicate2.or(predicate0);
      Predicate<VisualPageListItem> predicate4 = predicate3.negate();
      stack0.removeIf(predicate4);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>(stack0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.add((VisualPageListItem) null);
      linkedList0.add((VisualPageListItem) null);
      linkedList0.stream();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      JMenuItem jMenuItem0 = new JMenuItem("]]b", (-1109));
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = metalRootPaneUI0.getBaselineResizeBehavior(jMenuItem0);
      MetalRootPaneUI metalRootPaneUI1 = new MetalRootPaneUI();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, component_BaselineResizeBehavior0);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.prependAllElements(linkedList0);
      assertEquals(2, visualListModel1.getSize());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualPageListItemArray0[0] = null;
      visualListModel0.setData(visualPageListItemArray0);
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      Dialog.ModalExclusionType dialog_ModalExclusionType1 = Dialog.ModalExclusionType.NO_EXCLUDE;
      Dialog.ModalExclusionType[] dialog_ModalExclusionTypeArray0 = new Dialog.ModalExclusionType[3];
      dialog_ModalExclusionTypeArray0[0] = dialog_ModalExclusionType0;
      dialog_ModalExclusionTypeArray0[1] = dialog_ModalExclusionType1;
      dialog_ModalExclusionTypeArray0[2] = dialog_ModalExclusionType1;
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel0 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox0.firePopupMenuCanceled();
      JComboBox<Dialog.ModalExclusionType> jComboBox1 = new JComboBox<Dialog.ModalExclusionType>();
      int[] intArray0 = new int[1];
      intArray0[0] = 16;
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 16
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      Dialog.ModalExclusionType[] dialog_ModalExclusionTypeArray0 = new Dialog.ModalExclusionType[2];
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      dialog_ModalExclusionTypeArray0[0] = dialog_ModalExclusionType0;
      Dialog.ModalExclusionType dialog_ModalExclusionType1 = Dialog.ModalExclusionType.NO_EXCLUDE;
      dialog_ModalExclusionTypeArray0[1] = dialog_ModalExclusionType1;
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel0 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>(defaultComboBoxModel0);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2147483647) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.421847739438074
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      intArray0[0] = (-2530);
      intArray0[1] = 102;
      intArray0[2] = 0;
      intArray0[3] = 10;
      visualListModel0.addElementAt((VisualPageListItem) null, 443);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.isEmpty();
      treeSet0.parallelStream();
      treeSet0.parallelStream();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) sunHints_Key0);
      treeSet0.size();
      treeSet0.removeIf(predicate0);
      treeSet0.parallelStream();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addElement(visualPageListItemArray0[1]);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      visualListModel0.removeElements(intArray1, true);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(443, 0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 0
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2653188729187956
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      VisualListModel visualListModel0 = new VisualListModel();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.parallelStream();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      treeSet0.descendingIterator();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)1;
      byteArray0[6] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2706), (byte) (-73));
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      Predicate<Object> predicate5 = predicate4.or(predicate1);
      Predicate<Object> predicate6 = predicate1.and(predicate3);
      Predicate.isEqual((Object) predicate2);
      predicate4.or(predicate1);
      predicate5.negate();
      treeSet0.size();
      FileSystemHandling.shouldAllThrowIOExceptions();
      treeSet0.parallelStream();
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addElement(visualPageListItemArray0[0]);
      predicate6.negate();
      visualListModel0.updateElementAt(0, visualPageListItemArray0[1]);
      int[] intArray0 = new int[1];
      visualListModel0.addElementAt(visualPageListItemArray0[1], 0);
      visualListModel0.removeElements(intArray0, true);
      assertEquals(7, visualListModel0.getSize());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.1590755296532165
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      VisualListModel visualListModel0 = new VisualListModel();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.parallelStream();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      treeSet0.descendingIterator();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)1;
      byteArray0[6] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2706), (byte) (-73));
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      Predicate<Object> predicate5 = predicate4.or(predicate1);
      Predicate<Object> predicate6 = predicate1.and(predicate3);
      Predicate.isEqual((Object) predicate2);
      predicate4.or(predicate1);
      predicate5.negate();
      treeSet0.size();
      treeSet0.removeIf(predicate0);
      treeSet0.parallelStream();
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.addElement(visualPageListItemArray0[0]);
      predicate6.negate();
      visualListModel0.updateElementAt(0, visualPageListItemArray0[1]);
      int[] intArray0 = new int[1];
      visualListModel0.addElementAt(visualPageListItemArray0[1], 0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.460650980761152
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      Stack<Dialog.ModalExclusionType> stack0 = new Stack<Dialog.ModalExclusionType>();
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>(stack0);
      jComboBox0.firePopupMenuCanceled();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jComboBox0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("KB", (VetoableChangeListener) null);
      jComboBox0.addVetoableChangeListener((VetoableChangeListener) null);
      jComboBox0.getContainerListeners();
      PopupMenuListener popupMenuListener0 = mock(PopupMenuListener.class, new ViolatedAssumptionAnswer());
      jComboBox0.addPopupMenuListener(popupMenuListener0);
      jComboBox0.doLayout();
      JComboBox<Dialog.ModalExclusionType> jComboBox1 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox1.removeNotify();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray1 = new int[2];
      intArray1[0] = (-1264);
      intArray1[1] = (-1938);
      visualListModel1.moveUpIndexes(intArray1);
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel1.moveDownIndexes(intArray1);
      visualListModel1.undeleteElements(intArray0);
      try { 
        visualListModel0.reverseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1264
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1331337395597156
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      int[] intArray0 = new int[20];
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.TOOLKIT_EXCLUDE;
      Dialog.ModalExclusionType[] dialog_ModalExclusionTypeArray0 = new Dialog.ModalExclusionType[3];
      dialog_ModalExclusionTypeArray0[0] = dialog_ModalExclusionType0;
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel0 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox0.firePopupMenuCanceled();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel1 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      JComboBox<Dialog.ModalExclusionType> jComboBox1 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox1.firePopupMenuCanceled();
      JComboBox<Dialog.ModalExclusionType> jComboBox2 = new JComboBox<Dialog.ModalExclusionType>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      Locale locale0 = Locale.ITALY;
      jComboBox2.firePopupMenuCanceled();
      JComboBox<Dialog.ModalExclusionType> jComboBox3 = new JComboBox<Dialog.ModalExclusionType>();
      JComboBox<Dialog.ModalExclusionType> jComboBox4 = new JComboBox<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      jComboBox2.getContainerListeners();
      JComboBox<Dialog.ModalExclusionType> jComboBox5 = new JComboBox<Dialog.ModalExclusionType>(defaultComboBoxModel0);
      Vector<Dialog.ModalExclusionType> vector0 = new Vector<Dialog.ModalExclusionType>();
      JComboBox<Dialog.ModalExclusionType> jComboBox6 = new JComboBox<Dialog.ModalExclusionType>(vector0);
      PopupMenuListener popupMenuListener0 = mock(PopupMenuListener.class, new ViolatedAssumptionAnswer());
      jComboBox4.addPopupMenuListener(popupMenuListener0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = 46;
      intArray1[1] = 46;
      intArray1[2] = 46;
      try { 
        visualListModel0.rotateClockwiseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 46
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2487138225718355
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<Integer> stack0 = new Stack<Integer>();
      Boolean boolean0 = new Boolean((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stack0.add((Integer) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stack0.add((Integer) 0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      stack0.add(integer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      visualListModel0.reverseElements(intArray0);
      stack0.forEach(consumer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "()");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-37);
      visualListModel0.moveUpIndex((-37));
      visualListModel0.moveDownIndex((-37));
      visualListModel0.clearData();
      int[] intArray0 = null;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem((-37), "org.pdfsam.guiclient.commons.models.VisualListModel", "(/d.Aq=O/N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OperationRegistry.getThreadSafeOperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      BasicRootPaneUI basicRootPaneUI0 = new BasicRootPaneUI();
      Color color0 = Color.orange;
      float[] floatArray0 = new float[20];
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(pdfGraphics2D_HyperLinkKey0, "", sunHints_LCDContrastKey0, color0);
      basicRootPaneUI0.propertyChange(propertyChangeEvent0);
      floatArray0[0] = (float) 1567;
      floatArray0[1] = (float) 1567;
      color0.getColorComponents(floatArray0);
      color0.getColorComponents(floatArray0);
      floatArray0[4] = (float) 1567;
      Color.RGBtoHSB(1567, (-927), (-927), floatArray0);
      Color color1 = Color.pink;
      Color.getColor("", (Color) null);
      parameterBlock0.getSources();
      Boolean boolean0 = new Boolean("");
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      defaultTableCellRenderer_UIResource0.transferFocus();
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      Dimension dimension0 = basicTreeUI0.getPreferredSize((JComponent) defaultTableCellRenderer_UIResource0);
      dimension0.clone();
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      basicRootPaneUI0.getBaselineResizeBehavior(defaultTableCellRenderer_UIResource0);
      Color.RGBtoHSB(0, 1665, 0, floatArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements(linkedHashSet0);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OperationRegistry operationRegistry0 = new OperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      BasicRootPaneUI basicRootPaneUI0 = new BasicRootPaneUI();
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      metalRootPaneUI0.getBaselineResizeBehavior(defaultTableCellRenderer_UIResource0);
      Dimension dimension0 = new Dimension();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      HierarchyListener hierarchyListener2 = AWTEventMulticaster.add((HierarchyListener) null, hierarchyListener1);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, hierarchyListener2);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      defaultTableCellRenderer_UIResource0.removeHierarchyListener((HierarchyListener) null);
      dimension0.clone();
      MetalRootPaneUI metalRootPaneUI1 = new MetalRootPaneUI();
      metalRootPaneUI1.getBaselineResizeBehavior(defaultTableCellRenderer_UIResource0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.587821318696078
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      Dialog.ModalExclusionType[] dialog_ModalExclusionTypeArray0 = new Dialog.ModalExclusionType[3];
      dialog_ModalExclusionTypeArray0[0] = dialog_ModalExclusionType0;
      dialog_ModalExclusionTypeArray0[1] = dialog_ModalExclusionType0;
      dialog_ModalExclusionTypeArray0[2] = dialog_ModalExclusionType0;
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel0 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel1 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox0.firePopupMenuCanceled();
      JComboBox<Dialog.ModalExclusionType> jComboBox1 = new JComboBox<Dialog.ModalExclusionType>();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      jComboBox0.doLayout();
      JComboBox<Dialog.ModalExclusionType> jComboBox2 = new JComboBox<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      defaultComboBoxModel0.removeAllElements();
      jComboBox1.removeNotify();
      jComboBox1.firePropertyChange("j&Geu}l\"zs2d4", 0.0, 1.0);
      JComboBox<Dialog.ModalExclusionType> jComboBox3 = new JComboBox<Dialog.ModalExclusionType>(defaultComboBoxModel0);
      jComboBox0.getMaximumRowCount();
      jComboBox3.setAlignmentX(8);
      JComponent.isLightweightComponent(jComboBox2);
      jComboBox3.removeActionListener(jComboBox1);
      jComboBox0.getVerifyInputWhenFocusTarget();
      jComboBox2.setDebugGraphicsOptions(8);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel1.undeleteElements(intArray0);
      visualListModel1.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OperationRegistry.getThreadSafeOperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      metalRootPaneUI0.getAccessibleChildrenCount(defaultTableCellRenderer_UIResource0);
      metalRootPaneUI0.getBaseline(defaultTableCellRenderer_UIResource0, 49, 1163);
      float[] floatArray0 = new float[22];
      metalRootPaneUI0.getBaselineResizeBehavior(defaultTableCellRenderer_UIResource0);
      floatArray0[8] = (float) 1567;
      Dimension dimension0 = new Dimension();
      floatArray0[2] = (float) 0;
      defaultTableCellRenderer_UIResource0.transferFocus();
      dimension0.clone();
      floatArray0[3] = (float) 1567;
      floatArray0[4] = (float) 1567;
      MetalRootPaneUI metalRootPaneUI1 = new MetalRootPaneUI();
      metalRootPaneUI0.getBaselineResizeBehavior(defaultTableCellRenderer_UIResource0);
      Color.RGBtoHSB(180, (-1), 49, floatArray0);
      MetalRootPaneUI metalRootPaneUI2 = new MetalRootPaneUI();
      KeyStroke.getKeyStroke(0, 1731);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1382619446879207
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[5] = null;
      Dialog.ModalExclusionType[] dialog_ModalExclusionTypeArray0 = new Dialog.ModalExclusionType[2];
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      dialog_ModalExclusionTypeArray0[0] = dialog_ModalExclusionType0;
      Dialog.ModalExclusionType dialog_ModalExclusionType1 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      dialog_ModalExclusionTypeArray0[1] = dialog_ModalExclusionType1;
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel0 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox0.getMouseListeners();
      jComboBox0.firePopupMenuCanceled();
      jComboBox0.getContainerListeners();
      JComboBox<Dialog.ModalExclusionType> jComboBox1 = new JComboBox<Dialog.ModalExclusionType>(defaultComboBoxModel0);
      Vector<Dialog.ModalExclusionType> vector0 = new Vector<Dialog.ModalExclusionType>();
      JComboBox<Dialog.ModalExclusionType> jComboBox2 = new JComboBox<Dialog.ModalExclusionType>(vector0);
      PopupMenuListener popupMenuListener0 = mock(PopupMenuListener.class, new ViolatedAssumptionAnswer());
      jComboBox2.addPopupMenuListener(popupMenuListener0);
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      defaultComboBoxModel0.setSelectedItem(dialog_ModalExclusionType1);
      jComboBox1.removeNotify();
      jComboBox2.setDebugGraphicsOptions(360);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeListDataListener(jComboBox1);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.setData(visualPageListItemArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 360;
      intArray0[1] = (-502);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      try { 
        visualListModel1.moveDownIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -501
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel1.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1346568241817123
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int[] intArray0 = new int[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      intArray0[0] = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<Integer> stack0 = new Stack<Integer>();
      Boolean boolean0 = new Boolean((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stack0.add((Integer) 0);
      stack0.add((Integer) null);
      visualListModel0.reverseElements(intArray0);
      stack0.forEach(consumer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "()");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      intArray0[0] = (int) (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveDownIndexes(intArray0);
      try { 
        visualListModel0.moveUpIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 86
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2526353911992865
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.TOOLKIT_EXCLUDE;
      Dialog.ModalExclusionType[] dialog_ModalExclusionTypeArray0 = new Dialog.ModalExclusionType[3];
      dialog_ModalExclusionTypeArray0[0] = dialog_ModalExclusionType0;
      dialog_ModalExclusionTypeArray0[1] = dialog_ModalExclusionType0;
      dialog_ModalExclusionTypeArray0[2] = dialog_ModalExclusionType0;
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel0 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel1 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox0.firePopupMenuCanceled();
      JComboBox<Dialog.ModalExclusionType> jComboBox1 = new JComboBox<Dialog.ModalExclusionType>();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      AWTEventMulticaster.add((MouseWheelListener) null, mouseWheelListener1);
      AWTEventMulticaster.add(mouseWheelListener1, mouseWheelListener0);
      jComboBox0.setName("=W}(");
      jComboBox0.addMouseWheelListener(mouseWheelListener1);
      defaultComboBoxModel1.addListDataListener(jComboBox0);
      jComboBox0.getContainerListeners();
      JComboBox<Dialog.ModalExclusionType> jComboBox2 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox1.removeActionListener(jComboBox0);
      jComboBox0.getVerifyInputWhenFocusTarget();
      JComboBox<Dialog.ModalExclusionType> jComboBox3 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox3.setDebugGraphicsOptions(10);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.setData(visualPageListItemArray0);
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel1.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.2487138225718355
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<Integer> stack0 = new Stack<Integer>();
      Boolean boolean0 = new Boolean((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stack0.add((Integer) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stack0.add((Integer) 0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      visualListModel0.reverseElements(intArray0);
      stack0.forEach(consumer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.4587373984309306
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      int[] intArray0 = new int[20];
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.TOOLKIT_EXCLUDE;
      Dialog.ModalExclusionType[] dialog_ModalExclusionTypeArray0 = new Dialog.ModalExclusionType[3];
      dialog_ModalExclusionTypeArray0[0] = dialog_ModalExclusionType0;
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel0 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox0.firePopupMenuCanceled();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("PJ}g", vetoableChangeListener0);
      jComboBox0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      jComboBox0.getContainerListeners();
      PopupMenuListener popupMenuListener0 = mock(PopupMenuListener.class, new ViolatedAssumptionAnswer());
      jComboBox0.addPopupMenuListener(popupMenuListener0);
      jComboBox0.doLayout();
      JComboBox<Dialog.ModalExclusionType> jComboBox1 = new JComboBox<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      jComboBox1.removeNotify();
      JComboBox<Dialog.ModalExclusionType> jComboBox2 = new JComboBox<Dialog.ModalExclusionType>(defaultComboBoxModel0);
      jComboBox2.setAlignmentX(0.0F);
      jComboBox2.getVerifyInputWhenFocusTarget();
      jComboBox2.setDebugGraphicsOptions((-445));
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray1 = new int[3];
      visualListModel0.undeleteElements(intArray0);
      intArray1[0] = (-445);
      intArray1[1] = (-445);
      intArray1[2] = (-445);
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      try { 
        visualListModel0.reverseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -445
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2526353911992865
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      Dialog.ModalExclusionType[] dialog_ModalExclusionTypeArray0 = new Dialog.ModalExclusionType[3];
      dialog_ModalExclusionTypeArray0[0] = dialog_ModalExclusionType0;
      dialog_ModalExclusionTypeArray0[1] = dialog_ModalExclusionType0;
      dialog_ModalExclusionTypeArray0[2] = dialog_ModalExclusionType0;
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel0 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel1 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox0.firePopupMenuCanceled();
      JComboBox<Dialog.ModalExclusionType> jComboBox1 = new JComboBox<Dialog.ModalExclusionType>();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      MouseWheelListener mouseWheelListener2 = AWTEventMulticaster.add((MouseWheelListener) null, mouseWheelListener1);
      AWTEventMulticaster.remove(mouseWheelListener2, mouseWheelListener2);
      jComboBox0.setName("=W}(");
      jComboBox0.addMouseWheelListener(mouseWheelListener1);
      defaultComboBoxModel1.addListDataListener(jComboBox0);
      jComboBox0.getContainerListeners();
      JComboBox<Dialog.ModalExclusionType> jComboBox2 = new JComboBox<Dialog.ModalExclusionType>(defaultComboBoxModel1);
      jComboBox1.removeActionListener(jComboBox0);
      jComboBox0.getVerifyInputWhenFocusTarget();
      JComboBox<Dialog.ModalExclusionType> jComboBox3 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox3.setDebugGraphicsOptions(10);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.setData(visualPageListItemArray0);
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel1.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.addAllElements(50, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.getValidElements();
      visualListModel0.data = null;
      int[] intArray0 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      assertNull(visualPageListItemArray0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5743378653255435
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.clearData();
      visualListModel0.elementChanged((VisualPageListItem) null);
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      JList<RenderingHints.Key> jList0 = new JList<RenderingHints.Key>(visualListModel0);
      List<RenderingHints.Key> list0 = jList0.getSelectedValuesList();
      linkedHashSet0.retainAll(list0);
      visualListModel0.getValidElements();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.addAllElements(50, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.getValidElements();
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.data = null;
      int int0 = (-1488);
      visualListModel0.removeElements(intArray0, true);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(50, (-1488), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.addAllElements(8, (Collection<VisualPageListItem>) priorityQueue0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.prependAllElements(linkedHashSet0);
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[8];
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance((-4715));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add(visualPageListItemArray0[1]);
      visualListModel0.addAllElements((-17), (Collection<VisualPageListItem>) linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OperationRegistry.getThreadSafeOperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      Dimension dimension0 = new Dimension();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      defaultTableCellRenderer_UIResource0.removeHierarchyListener((HierarchyListener) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OperationRegistry operationRegistry0 = new OperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      BasicRootPaneUI basicRootPaneUI0 = new BasicRootPaneUI();
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      Color color0 = Color.LIGHT_GRAY;
      Color color1 = Color.getColor("", color0);
      defaultTableCellRenderer0.setForeground(color1);
      basicRootPaneUI0.getBaselineResizeBehavior(defaultTableCellRenderer0);
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      RenderingHints renderingHints0 = new RenderingHints(pdfGraphics2D_HyperLinkKey0, bufferedInputStream0);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      visualListModel0.getElementAt(1670);
      objectArray0[1] = null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) color0;
      objectArray0[4] = (Object) defaultTableCellRenderer0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) operationRegistry0;
      objectArray0[7] = (Object) pdfGraphics2D_HyperLinkKey0;
      objectArray0[8] = (Object) parameterBlock0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 1670);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YteZh7+Q}/S");
      Dialog.ModalExclusionType[] dialog_ModalExclusionTypeArray0 = new Dialog.ModalExclusionType[13];
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      dialog_ModalExclusionTypeArray0[0] = dialog_ModalExclusionType0;
      Dialog.ModalExclusionType dialog_ModalExclusionType1 = Dialog.ModalExclusionType.NO_EXCLUDE;
      dialog_ModalExclusionTypeArray0[1] = dialog_ModalExclusionType1;
      Dialog.ModalExclusionType dialog_ModalExclusionType2 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      dialog_ModalExclusionTypeArray0[3] = dialog_ModalExclusionType2;
      Dialog.ModalExclusionType dialog_ModalExclusionType3 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      dialog_ModalExclusionTypeArray0[4] = dialog_ModalExclusionType0;
      DefaultComboBoxModel<Dialog.ModalExclusionType> defaultComboBoxModel0 = new DefaultComboBoxModel<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      Dialog.ModalExclusionType[] dialog_ModalExclusionTypeArray1 = new Dialog.ModalExclusionType[9];
      dialog_ModalExclusionTypeArray1[2] = dialog_ModalExclusionTypeArray1[0];
      dialog_ModalExclusionTypeArray1[3] = dialog_ModalExclusionType3;
      dialog_ModalExclusionTypeArray1[4] = dialog_ModalExclusionType1;
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) arrayDeque0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YteZh7+Q}/S");
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      assertEquals(0, intArray0.length);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OperationRegistry operationRegistry0 = new OperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      BasicRootPaneUI basicRootPaneUI0 = new BasicRootPaneUI();
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      Color color0 = Color.LIGHT_GRAY;
      String string0 = "";
      Color color1 = Color.getColor("", color0);
      defaultTableCellRenderer0.setForeground(color1);
      basicRootPaneUI0.getBaselineResizeBehavior(defaultTableCellRenderer0);
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1035);
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-1035));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.4968503600692964
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      int[] intArray0 = new int[20];
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox0.firePopupMenuCanceled();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener3 = AWTEventMulticaster.add(hierarchyBoundsListener2, hierarchyBoundsListener2);
      jComboBox0.addHierarchyBoundsListener(hierarchyBoundsListener3);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("PJ}g", (VetoableChangeListener) null);
      jComboBox0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      PopupMenuListener popupMenuListener0 = mock(PopupMenuListener.class, new ViolatedAssumptionAnswer());
      jComboBox0.addPopupMenuListener(popupMenuListener0);
      jComboBox0.doLayout();
      JComboBox<Dialog.ModalExclusionType> jComboBox1 = new JComboBox<Dialog.ModalExclusionType>();
      jComboBox1.removeNotify();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray1 = new int[3];
      intArray1[1] = 0;
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.getElements();
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.reverseElements(intArray1);
      visualListModel0.rotateClockwiseElements(intArray0);
      assertEquals(5, visualListModel0.getSize());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.containsAll(stack0);
      Boolean boolean0 = new Boolean(false);
      visualListModel0.subList(0, 0, false);
      int int1 = 11;
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 0
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.subList(1164, (-1657));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1164) > toIndex(-1657)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      OperationRegistry operationRegistry0 = new OperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      BasicRootPaneUI basicRootPaneUI0 = new BasicRootPaneUI();
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      Color color0 = Color.MAGENTA;
      int int0 = 1626;
      Boolean boolean0 = new Boolean(true);
      VisualListModel visualListModel0 = new VisualListModel();
      int int1 = 1393;
      int int2 = (-543);
      // Undeclared exception!
      try { 
        visualListModel0.subList(1393, (-543), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1393) > toIndex(-543)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.removeElements(20, (-1755), true);
      intArray0[0] = (-1011);
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = AffineTransform.getRotateInstance((double) (-1011), (double) 4, 4069.43902, 4069.43902);
      affineTransform1.setToQuadrantRotation(4, 0.0, 162.4178);
      AffineTransform.getShearInstance(1.0, 0.0);
      AffineTransform.getRotateInstance(4069.43902);
      AffineTransform affineTransform2 = new AffineTransform((-2060.35F), (float) (-1011), (float) (-1011), (float) (-1011), 0.0F, (float) 4);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform2, (-1755));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: -1755
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(1.0);
      int[] intArray0 = new int[0];
      affineTransform0.setToScale((-376), 2204.37837743);
      visualListModel0.removeElements(intArray0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      AffineTransform affineTransform1 = new AffineTransform((-1.0), (-1379.2943206486518), (-376), 1.0, 1.0, (-1.0));
      AffineTransform affineTransform2 = new AffineTransform(affineTransform0);
      AffineTransform affineTransform3 = AffineTransform.getTranslateInstance((-376), (-1379.2943206486518));
      JViewport jViewport0 = new JViewport();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      Point point1 = jViewport0.toViewCoordinates(point0);
      affineTransform3.inverseTransform((Point2D) point1, (Point2D) point0);
      visualListModel0.removeElements(0, 101, true);
      affineTransform3.setToRotation((-1300.8635071286974), 2204.37837743);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform3, 141);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 141
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = visualPageListItemArray0[1];
      AffineTransform.getScaleInstance(1.0, 914.9111);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElementAt(visualPageListItemArray0[5], (-6));
      VisualPageListItem[] visualPageListItemArray1 = visualListModel0.getElements();
      visualListModel0.getValidElements();
      visualListModel0.addAllElements((-733), (Collection<VisualPageListItem>) null);
      visualListModel0.updateElementAt((-6), (VisualPageListItem) null);
      visualListModel0.setData(visualPageListItemArray1);
      VisualPageListItem[] visualPageListItemArray2 = new VisualPageListItem[9];
      visualPageListItemArray2[0] = null;
      visualPageListItemArray2[1] = null;
      visualPageListItemArray2[2] = null;
      visualPageListItemArray2[3] = null;
      visualPageListItemArray2[4] = null;
      visualPageListItemArray2[5] = null;
      visualPageListItemArray2[6] = null;
      visualPageListItemArray2[7] = null;
      visualPageListItemArray2[8] = null;
      visualListModel0.setData(visualPageListItemArray1);
      assertNotSame(visualPageListItemArray1, visualPageListItemArray2);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add(visualPageListItemArray0[1]);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedHashSet0);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.parallelStream();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      treeSet0.descendingIterator();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      Predicate<Object> predicate5 = predicate4.or(predicate1);
      Predicate<Object> predicate6 = predicate1.and(predicate3);
      Predicate.isEqual((Object) predicate2);
      predicate5.negate();
      treeSet0.size();
      treeSet0.removeIf(predicate0);
      treeSet0.parallelStream();
      predicate6.negate();
      int[] intArray0 = new int[1];
      visualListModel0.removeElements(intArray0, false);
      assertEquals(1, intArray0.length);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      visualListModel0.moveUpIndex(0);
      visualListModel0.moveDownIndex(0);
      int[] intArray0 = null;
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(0, "org.pdfsam.guiclient.commons.models.VisualListModel", "e.A=3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(1551);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1551;
      floatArray0[1] = (float) 1551;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(1551, 1551, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 2 and should be 2405601
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<Integer> stack0 = new Stack<Integer>();
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      visualListModel0.removeElements(0, 0, false);
      Stack<VisualPageListItem> stack2 = new Stack<VisualPageListItem>();
      // Undeclared exception!
      try { 
        stack2.addAll((Collection<? extends VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(1.0);
      int[] intArray0 = new int[0];
      affineTransform0.setToScale((-376), 2204.37837743);
      visualListModel0.removeElements(intArray0, true);
      AffineTransform affineTransform1 = new AffineTransform((-1.0), (-1379.2943206486518), (-376), 1.0, 1.0, (-1.0));
      AffineTransform affineTransform2 = new AffineTransform(affineTransform0);
      AffineTransform affineTransform3 = AffineTransform.getTranslateInstance((-376), (-1379.2943206486518));
      JViewport jViewport0 = new JViewport();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      gridBagLayout0.minimumLayoutSize(jViewport0);
      Point point1 = jViewport0.toViewCoordinates(point0);
      affineTransform3.inverseTransform((Point2D) point1, (Point2D) point0);
      affineTransform3.setToRotation((-1300.8635071286974), 2204.37837743);
      visualListModel0.removeElements(1650, 1, false);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform3, 141);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 141
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      Dialog.ModalExclusionType dialog_ModalExclusionType1 = Dialog.ModalExclusionType.APPLICATION_EXCLUDE;
      Dialog.ModalExclusionType dialog_ModalExclusionType2 = Dialog.ModalExclusionType.TOOLKIT_EXCLUDE;
      JComboBox<Dialog.ModalExclusionType> jComboBox0 = new JComboBox<Dialog.ModalExclusionType>();
      Dialog.ModalExclusionType[] dialog_ModalExclusionTypeArray0 = new Dialog.ModalExclusionType[9];
      dialog_ModalExclusionTypeArray0[0] = dialog_ModalExclusionType1;
      Dialog.ModalExclusionType dialog_ModalExclusionType3 = Dialog.ModalExclusionType.TOOLKIT_EXCLUDE;
      dialog_ModalExclusionTypeArray0[2] = dialog_ModalExclusionType3;
      dialog_ModalExclusionTypeArray0[3] = dialog_ModalExclusionType2;
      dialog_ModalExclusionTypeArray0[4] = dialog_ModalExclusionType0;
      dialog_ModalExclusionTypeArray0[5] = dialog_ModalExclusionType2;
      dialog_ModalExclusionTypeArray0[6] = dialog_ModalExclusionType0;
      dialog_ModalExclusionTypeArray0[7] = dialog_ModalExclusionType2;
      dialog_ModalExclusionTypeArray0[8] = dialog_ModalExclusionType2;
      JComboBox<Dialog.ModalExclusionType> jComboBox1 = new JComboBox<Dialog.ModalExclusionType>(dialog_ModalExclusionTypeArray0);
      jComboBox0.addNotify();
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<VisualPageListItem> jComboBox2 = new JComboBox<VisualPageListItem>();
      visualListModel0.removeElements((-1855), (-3159), true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.appendAllElements(vector0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      OperationRegistry operationRegistry0 = OperationRegistry.getThreadSafeOperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      metalRootPaneUI0.getAccessibleChildrenCount(defaultTableCellRenderer_UIResource0);
      int int0 = metalRootPaneUI0.getBaseline(defaultTableCellRenderer_UIResource0, 49, 1163);
      float[] floatArray0 = new float[22];
      metalRootPaneUI0.getBaselineResizeBehavior(defaultTableCellRenderer_UIResource0);
      floatArray0[8] = (float) 1567;
      Dimension dimension0 = new Dimension();
      defaultTableCellRenderer_UIResource0.transferFocus();
      dimension0.clone();
      MetalRootPaneUI metalRootPaneUI1 = new MetalRootPaneUI();
      metalRootPaneUI0.getBaselineResizeBehavior(defaultTableCellRenderer_UIResource0);
      Color.RGBtoHSB(12, 1163, 180, floatArray0);
      MetalRootPaneUI metalRootPaneUI2 = new MetalRootPaneUI();
      KeyStroke.getKeyStroke(180, (-53));
      MetalRootPaneUI metalRootPaneUI3 = new MetalRootPaneUI();
      MetalRootPaneUI metalRootPaneUI4 = new MetalRootPaneUI();
      MetalRootPaneUI metalRootPaneUI5 = new MetalRootPaneUI();
      KeyStroke.getKeyStroke('F');
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      RenderingHints renderingHints0 = new RenderingHints(pdfGraphics2D_HyperLinkKey0, operationRegistry0);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      int int1 = visualListModel0.getSize();
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.pollFirst();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      integerArray0[0] = integer0;
      treeSet0.toArray(integerArray0);
      treeSet0.parallelStream();
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList((-805), (-1595));
      assertNull(collection0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = Boolean.TRUE;
      visualListModel0.subList(0, 0, true);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(0);
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      double double0 = 1119.3894070009208;
      AffineTransform affineTransform2 = AffineTransform.getScaleInstance(1119.3894070009208, 1119.3894070009208);
      affineTransform2.clone();
      affineTransform2.invert();
      affineTransform2.setTransform(affineTransform1);
      affineTransform2.shear(0.0, 1119.3894070009208);
      visualListModel0.subList(329, 65, true);
      affineTransform2.isIdentity();
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 0
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      double double0 = 0.0;
      AffineTransform affineTransform0 = new AffineTransform(73.10464306044, 73.10464306044, 73.10464306044, 73.10464306044, 2038.329375, 0.0);
      AffineTransform.getScaleInstance(0.0, (-1.0));
      int int0 = 11;
      int int1 = 3837;
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 3837);
        fail("Expecting exception: ImagingOpException");
      
      } catch(ImagingOpException e) {
         //
         // Unable to invert transform AffineTransform[[73.10464306044, 73.10464306044, 2038.329375], [73.10464306044, 73.10464306044, 0.0]]
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean.valueOf(true);
      visualListModel0.subList(0, 0);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(0);
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      AffineTransform affineTransform2 = AffineTransform.getScaleInstance(1119.3894070009208, 1119.3894070009208);
      affineTransform2.clone();
      affineTransform2.setTransform(affineTransform1);
      affineTransform2.isIdentity();
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 0
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.undeleteElements(intArray0);
      Point point0 = new Point();
      Point point1 = new Point((-746), (-2722));
      point0.move((-2722), (-1360));
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) (-2722), 0.0, 0.0, (-970.1300174));
      affineTransform0.inverseTransform((Point2D) point1, (Point2D) point0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point2 = gridBagLayout0.location((-2722), (-1844));
      point1.setLocation(point2);
      point2.setLocation(point1);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Point2D.Double point2D_Double1 = new Point2D.Double((-3197.61637), (-2722));
      Point2D.Double point2D_Double2 = new Point2D.Double(0.0, 10.0);
      affineTransform0.clone();
      AffineTransform affineTransform1 = AffineTransform.getRotateInstance(0.0, (-572.0490100943434), 0.0, 10.0);
      affineTransform1.setTransform(affineTransform0);
      AffineTransform affineTransform2 = AffineTransform.getTranslateInstance(0.0, (-3311.442));
      assertNotSame(affineTransform2, affineTransform1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      treeSet0.pollFirst();
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      integerArray0[0] = integer0;
      treeSet0.toArray(integerArray0);
      treeSet0.parallelStream();
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-1), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      OperationRegistry.getThreadSafeOperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      metalRootPaneUI0.getAccessibleChildrenCount(defaultTableCellRenderer_UIResource0);
      metalRootPaneUI0.getBaseline(defaultTableCellRenderer_UIResource0, 49, 1163);
      float[] floatArray0 = new float[22];
      floatArray0[8] = (float) 1567;
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = (Dimension)dimension0.clone();
      floatArray0[2] = (float) 0;
      defaultTableCellRenderer_UIResource0.setDebugGraphicsOptions(5000);
      defaultTableCellRenderer_UIResource0.transferFocus();
      Dimension dimension2 = new Dimension(dimension1);
      floatArray0[3] = (float) 1567;
      MetalRootPaneUI metalRootPaneUI1 = new MetalRootPaneUI();
      metalRootPaneUI0.getBaselineResizeBehavior(defaultTableCellRenderer_UIResource0);
      dimension0.width = 5;
      dimension1.height = 10000;
      MetalRootPaneUI metalRootPaneUI2 = new MetalRootPaneUI();
      KeyStroke.getKeyStroke(0, 0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      metalRootPaneUI1.getMinimumSize(defaultTableCellRenderer_UIResource0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-19);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1;
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveUpIndex(1);
      int int1 = 2162;
      double double0 = 1936.5303081515067;
      double double1 = (-1618.9589813727987);
      AffineTransform affineTransform0 = new AffineTransform((-1618.9589813727987), (-878.95502), (-878.95502), (-1190.32), 1936.5303081515067, 1510.1931814524);
      AffineTransform.getScaleInstance(1596.0035764, 1623.1871694);
      int int2 = (-1);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: -1
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      OperationRegistry operationRegistry0 = new OperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      BasicRootPaneUI basicRootPaneUI0 = new BasicRootPaneUI();
      Color color0 = Color.gray;
      float[] floatArray0 = new float[20];
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(pdfGraphics2D_HyperLinkKey0, "", sunHints_LCDContrastKey0, color0);
      floatArray0[0] = (float) 1567;
      floatArray0[1] = (float) 1567;
      color0.getColorComponents(floatArray0);
      color0.getColorComponents(floatArray0);
      Color.getColor("jx*'}?qXw;tXpIxB2", (-232));
      floatArray0[4] = (float) 1567;
      Color.RGBtoHSB(1567, 0, 0, floatArray0);
      Color color1 = Color.getColor("", color0);
      Color.getColor("", color1);
      color1.getComponents(floatArray0);
      Vector<Object> vector0 = parameterBlock0.getSources();
      vector0.add((Object) color1);
      KeyStroke.getKeyStroke("");
      AWTKeyStroke.getAWTKeyStroke(1567, 0, true);
      KeyStroke.getKeyStroke("");
      vector0.add((Object) null);
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      Dimension dimension0 = new Dimension();
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
