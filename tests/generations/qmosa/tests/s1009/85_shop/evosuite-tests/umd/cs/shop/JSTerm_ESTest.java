/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 06:14:00 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.374764507579765
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(z{@IG@i[_)!xGfHU$oK");
      SystemInUtil.addInputLine("(z{@IG@i[_)!xGfHU$oK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("m6}BZ{,|fVbDjg=:");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution4);
      stringReader0.skip(41);
      SystemInUtil.addInputLine("vgfseb");
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution0.cloneS();
      jSTerm1.toStr();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      jSTerm1.print();
      System.setCurrentTimeMillis(41);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1288258602385235
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(z{@IG@i[_)!xGfHU$oK");
      SystemInUtil.addInputLine("(z{@IG@i[_)!xGfHU$oK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("m6}BZ{,|fVbDjg=:");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("(z{@IG@i[_)!xGfHU$oK");
      SystemInUtil.addInputLine("m6}BZ{,|fVbDjg=:");
      stringReader0.reset();
      streamTokenizer0.resetSyntax();
      StringReader stringReader2 = new StringReader("~MK<`ou&}.'ac P");
      StringReader stringReader3 = new StringReader("lqDB}g+lS#1yP%m");
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.ordinaryChar(65);
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.eolIsSignificant(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.commentChar(1);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5125734389086265
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?\"OtFU[/{n A\"6");
      StringReader stringReader1 = new StringReader("?\"OtBUG/mn A\"6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      stringReader0.read(charArray0);
      stringReader0.ready();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      Object object0 = new Object();
      char[] charArray1 = new char[4];
      charArray1[0] = '?';
      charArray1[2] = '2';
      charArray1[2] = 'u';
      charArray1[3] = 'K';
      stringReader0.read(charArray1);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringReader0.read();
      jSTerm0.forEach(consumer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.read(charArray0);
      streamTokenizer1.ordinaryChars((-160), (-1));
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis((-4));
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4941343793902533
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.removeAll(jSTerm1);
      StringReader stringReader0 = new StringReader("zu6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("t.`&9q<Tv';)Oi[");
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.makeEval(true);
      jSTerm0.equals(jSTerm2);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.equals((JSPredicateForm) jSTerm0);
      jSTerm0.equals(jSTerm2);
      System.setCurrentTimeMillis((-936L));
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9113316045650817
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("A+}dD~9)Gt7.[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm3.print();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm1;
      jSTerm1.makeEval(true);
      objectArray0[2] = (Object) jSTerm2;
      objectArray0[3] = (Object) streamTokenizer0;
      objectArray0[4] = (Object) streamTokenizer0;
      objectArray0[5] = (Object) jSTerm2;
      objectArray0[6] = (Object) jSTerm1;
      Object object0 = jSTerm0.clone();
      objectArray0[7] = object0;
      JSJshopVars.slash = 41;
      jSTerm3.toArray();
      jSTerm1.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.elementAt(41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1313321259026838
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A+}dD~9)Gt7.[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("A+}dD~9)Gt7.[");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("constant");
      SystemInUtil.addInputLine("d?JNY");
      CharBuffer.allocate(33);
      StringReader stringReader2 = new StringReader(".(ZU6!");
      StringReader stringReader3 = new StringReader("BX Wz:~[6Wl");
      SystemInUtil.addInputLine((String) null);
      StringReader stringReader4 = new StringReader(".(ZU6!");
      stringReader4.ready();
      StringReader stringReader5 = new StringReader("");
      stringReader5.ready();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      StringReader stringReader6 = new StringReader(".(ZU6!");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader6);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.287988646743151
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("\"5Z<U$+3|[B!qT{C");
      StringReader stringReader0 = new StringReader("?\"OBxUG/n A\"6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("oqy;c08l0HPC&V");
      SystemInUtil.addInputLine("oqy;c08l0HPC&V");
      SystemInUtil.addInputLine("?\"OBxUG/n A\"6");
      SystemInUtil.addInputLine("");
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%HPW,:$N J1#E`'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Object object0 = new Object();
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object1 = new Object();
      jSTerm0.add((Object) "?\"OtBUG/{n A\"6");
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.elementAt(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?\"OtBUG/{n A\"6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("Toqy;c08l0HBC&V");
      SystemInUtil.addInputLine("(");
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?\"OtBUG/{n A\"6");
      stringReader0.mark(562);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "?\"OtBUG/{n A\"6");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.cloneS();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?\"OtBUG/{n A\"6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      SystemInUtil.addInputLine((String) null);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      boolean boolean0 = false;
      streamTokenizer1.slashSlashComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.766709966149073
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("A+}dD~9)Gt[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer0.commentChar(41);
      jSSubstitution1.setSize(41);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm3 = new JSTerm();
      int int0 = 562;
      JSJshopVars.rightPar = 562;
      jSTerm2.standardizerTerm();
      jSTerm3.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      jSTerm0.spliterator();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.822415231849296
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("A+}dD~9)Gt7.[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      streamTokenizer0.slashSlashComments(false);
      jSTerm1.toArray();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<JSSubstitution> predicate3 = Predicate.isEqual((Object) stringReader0);
      Predicate<JSSubstitution> predicate4 = predicate3.or(predicate2);
      Predicate<JSSubstitution> predicate5 = predicate3.and(predicate2);
      Predicate.isEqual((Object) predicate0);
      predicate4.negate();
      Predicate<JSSubstitution> predicate6 = predicate4.and(predicate3);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      predicate0.and(predicate1);
      predicate5.negate();
      predicate4.and(predicate0);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate8 = predicate0.and(predicate2);
      Predicate<Object> predicate9 = predicate8.negate();
      predicate9.or(predicate8);
      Predicate<Object> predicate10 = predicate2.or(predicate8);
      predicate10.or(predicate7);
      predicate6.or(predicate10);
      jSSubstitution2.add((Object) "f@8Qr(M*[.oXeT'");
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm3.print();
      System.setCurrentTimeMillis((-147L));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.62399551877641
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wVzyr");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "wVzyr");
      jSTerm0.clonePF();
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.and(predicate0);
      predicate0.negate();
      predicate0.test((String) null);
      predicate1.and(predicate2);
      Predicate<String> predicate3 = predicate1.or(predicate0);
      jSSubstitution0.add((Object) null);
      Predicate.isEqual((Object) predicate2);
      predicate3.or(predicate1);
      jSSubstitution0.removeIf(predicate3);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution1.fail());
      
      jSTerm0.cloneT();
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.629283134791957
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("A+}dD~9)Gt7.[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      stringReader0.skip((-1874L));
      SystemInUtil.addInputLine("vgfseb");
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm1.isEmpty();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution1.cloneS();
      jSTerm2.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.751038189850075
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("A+}dD~9)Gt7.[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      streamTokenizer0.slashSlashComments(false);
      jSTerm1.toArray();
      jSTerm1.toArray();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<JSSubstitution> predicate3 = Predicate.isEqual((Object) stringReader0);
      Predicate<JSSubstitution> predicate4 = predicate3.or(predicate2);
      Predicate<JSSubstitution> predicate5 = predicate3.and(predicate2);
      predicate4.negate();
      Predicate<JSSubstitution> predicate6 = predicate4.and(predicate3);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      predicate5.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate8 = predicate0.and(predicate2);
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate9.or(predicate8);
      predicate10.or(predicate7);
      predicate6.or(predicate2);
      jSSubstitution0.removeIf(predicate2);
      jSSubstitution2.add((Object) "f@8Qr(M*[.oXeT'");
      jSTerm2.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.cloneT();
      jSTerm2.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4526773581515555
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      SystemInUtil.addInputLine(" Expected (");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8213081505428774
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(z{@IG@i[_)!xGfHU$oK");
      SystemInUtil.addInputLine("(z{@IG@i[_)!xGfHU$oK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("aaxC");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "(z{@IG@i[_)!xGfHU$oK");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      SystemInUtil.addInputLine("Vq.&Q0sE!OdzY>");
      jSTerm0.standardizerTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis((-2266L));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      long long0 = 1371L;
      System.setCurrentTimeMillis((-2266L));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.533344419789668
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A+}dD~9)Gt7.[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("A+}dD~9)Gt7.[");
      StringReader stringReader1 = new StringReader("constant");
      SystemInUtil.addInputLine("d?JNY");
      CharBuffer.allocate(33);
      StringReader stringReader2 = new StringReader(".(ZU6!");
      StringReader stringReader3 = new StringReader("BX Wz:~[6Wl");
      SystemInUtil.addInputLine((String) null);
      StringReader stringReader4 = new StringReader(".(ZU6!");
      stringReader4.ready();
      StringReader stringReader5 = new StringReader("");
      stringReader5.ready();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      StringReader stringReader6 = new StringReader("Dnp");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertFalse(jSTerm1.isFunction());
      assertEquals("[nil]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm1.isConstant());
      assertTrue(jSTerm0.isConstant());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5639133004906642
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("9ppK7K0[C5UVy 3=Z+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = 'l';
      charArray0[2] = 'Q';
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.isGround();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      jSTerm4.isConstant();
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm1.matches(jSTerm4, jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1);
      jSTerm1.standardizerTerm();
      JSTerm jSTerm7 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSSubstitution1.setElementAt(jSTerm7, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2054480732221378
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?\"OtFU[/{n A\"6");
      StringReader stringReader1 = new StringReader("?\"OtBUG/mn A\"6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      stringReader0.ready();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      stringReader0.reset();
      Object object0 = new Object();
      char[] charArray1 = new char[4];
      stringReader0.read(charArray1);
      stringReader1.read();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      StringReader stringReader2 = new StringReader("?\"OtFU[/{n A\"6");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      char[] charArray2 = new char[6];
      charArray2[1] = 'u';
      charArray2[2] = '>';
      charArray2[4] = '2';
      charArray2[5] = 'e';
      stringReader2.read(charArray2);
      streamTokenizer1.ordinaryChars(1, (-4038));
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals("[?%%%]", jSTerm1.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6008952153103961
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(z{@IG@i[_)!xGfHU$oK");
      SystemInUtil.addInputLine("(z{@IG@i[_)!xGfHU$oK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("m6}BZ{,|fVbDjg=:");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.applySubstitutionT(jSSubstitution4);
      stringReader0.skip(41);
      SystemInUtil.addInputLine("vgfseb");
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      stringReader1.ready();
      StringReader stringReader2 = new StringReader("(z{@IG@i[_)!xGfHU$oK");
      stringReader2.ready();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      StringReader stringReader3 = new StringReader("min");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9594045983154569
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.622827904722017
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(uH ~jb6 \"@");
      SystemInUtil.addInputLine("ok{[)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.slashSlashComments(true);
      SystemInUtil.addInputLine((String) null);
      System.setCurrentTimeMillis(125L);
      StringReader stringReader1 = new StringReader("+'>>Xd]");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChar((-2133));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChar((-4));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      streamTokenizer5.ttype = 32;
      streamTokenizer5.eolIsSignificant(true);
      streamTokenizer4.slashStarComments(false);
      StringReader stringReader2 = new StringReader("%");
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader2);
      streamTokenizer7.slashSlashComments(true);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.641269639859855
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("A+}dD~9)Gtpn7.[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("A+}dD~9)Gtpn7.[");
      SystemInUtil.addInputLine("<=");
      SystemInUtil.addInputLine("A+}dD~9)Gtpn7.[");
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm1, jSSubstitution1);
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5144027875935255
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("9ppK7K0[C5UVy 3=Z+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = 'l';
      charArray0[2] = 'Q';
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.isGround();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      jSTerm1.equals(jSTerm4);
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm4, jSSubstitution0);
      jSTerm5.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1166801112506692
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(uH ~jb6 \"@");
      SystemInUtil.addInputLine("ok{[)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.slashSlashComments(true);
      System.setCurrentTimeMillis(125L);
      StringReader stringReader1 = new StringReader("+'>>Xd]");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.nval = (double) (-4);
      streamTokenizer4.ordinaryChar((-4));
      streamTokenizer3.sval = null;
      streamTokenizer3.eolIsSignificant(true);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChar((-4));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      streamTokenizer5.ttype = 32;
      streamTokenizer5.eolIsSignificant(true);
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer5.slashSlashComments(true);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")Jy]GR6iWQ");
      StringReader stringReader1 = new StringReader(")Jy]GR6iWQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.450507848988659
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SystemInUtil.addInputLine("~25{");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0557051606564785
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?\"OtFU[/{n A\"6");
      StringReader stringReader1 = new StringReader("?\"OtBUG/mn A\"6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      stringReader0.read(charArray0);
      stringReader0.ready();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      Object object0 = new Object();
      SystemInUtil.addInputLine("?\"OtFU[/{n A\"6");
      jSTerm1.spliterator();
      JSTerm jSTerm2 = jSTerm1.call();
      assertFalse(jSTerm2.isConstant());
      assertEquals("[?%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.254423781990184
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?\"OtBUG/{n A\"6");
      StringReader stringReader1 = new StringReader("?\"OtBUG/{n A\"6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      stringReader0.read(charArray0);
      SystemInUtil.addInputLine("5fRP~?ok(U\"Wgjq");
      stringReader0.ready();
      SystemInUtil.addInputLine("uH");
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Object object0 = new Object();
      char[] charArray1 = new char[5];
      SystemInUtil.addInputLine("?\"OtBUG/{n A\"6");
      charArray1[0] = 'D';
      charArray1[1] = '3';
      jSTerm1.firstElement();
      jSTerm1.removeElement("?%%%");
      charArray1[2] = 'u';
      charArray1[3] = 'K';
      charArray1[4] = '_';
      stringReader0.read(charArray1);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stringReader0.read();
      jSTerm0.forEach(consumer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8926321149036336
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?\"OtBUG/{n A\"6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) streamTokenizer0;
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object1 = new Object();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.containsAll(jSTerm1);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      jSTerm1.cloneT();
      jSTerm1.standardizerTerm();
      jSTerm4.toStr();
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9606480120079621
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("({@IG@i[_)!xGfHU$oK");
      SystemInUtil.addInputLine("({@IG@i[_)!xGfHU$oK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("m6}BZ{,|fVbDjg=:");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-1318));
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("m6}BZ{,|fVbDjg=:");
      stringReader0.reset();
      StringReader stringReader2 = new StringReader("O^\"ltA");
      StringReader stringReader3 = new StringReader("BX Wz:~[6Wl");
      SystemInUtil.addInputLine("({@IG@i[_)!xGfHU$oK");
      CharBuffer.allocate(33);
      jSTerm0.capacity();
      StringReader stringReader4 = new StringReader("BX Wz:~[6Wl");
      StringReader stringReader5 = new StringReader("m6}BZ{,|fVbDjg=:");
      SystemInUtil.addInputLine("] ");
      stringReader5.ready();
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader5);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?\"OtBUG/{n A\"6");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting constant symbol as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.622931027347061
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?\"OtBUG/{n A\"6");
      stringReader0.mark(562);
      SystemInUtil.addInputLine("?\"OtBUG/{n A\"6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm2);
      SystemInUtil.addInputLine("97");
      jSTerm1.standardizerTerm();
      stringReader0.skip(3361);
      System.setCurrentTimeMillis(562);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.cloneS();
      jSTerm1.applySubstitutionT(jSSubstitution3);
      jSSubstitution4.spliterator();
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6673260135451073
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?\"OtBUG/{n A\"6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.ttype = 2;
      Object object0 = new Object();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.addElement(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.remove(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1234177197931796
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isGround();
      jSTerm0.equals(jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      int int0 = 2;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm3.set(2, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6036051515160747
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SystemInUtil.addInputLine("A+}dD~9)Gt7.[");
      SystemInUtil.addInputLine("A+}dD~9)Gt7.[");
      StringReader stringReader0 = new StringReader(".-HVbxStOPC");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals((-2), streamTokenizer0.ttype);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      assertTrue(jSTerm0.isConstant());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6602162707648
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?\"OtBUG/{n A\"6");
      SystemInUtil.addInputLine("M_5Y\")E");
      StringReader stringReader1 = new StringReader("?\"OtBUG/{n A\"6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine((String) null);
      stringReader0.reset();
      StringReader stringReader3 = new StringReader("vgfseb");
      StringReader stringReader4 = new StringReader("?\"OtBUG/{n A\"6");
      SystemInUtil.addInputLine("t2Xb5");
      CharBuffer.allocate(2);
      jSTerm0.capacity();
      StringReader stringReader5 = new StringReader("J\"4y0o");
      StringReader stringReader6 = new StringReader("[ ");
      SystemInUtil.addInputLine("!");
      stringReader5.ready();
      stringReader5.skip(0L);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Kz(%F]WC#~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals("%%% ", stringBuffer0.toString());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("({@IG@i[_)!xGfHU$oK");
      SystemInUtil.addInputLine("({@IG@i[_)!xGfHU$oK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("m6}BZ{,|fVbDjg=:");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("({@IG@i[_)!xGfHU$oK");
      SystemInUtil.addInputLine("m6}BZ{,|fVbDjg=:");
      stringReader0.reset();
      streamTokenizer0.resetSyntax();
      StringReader stringReader2 = new StringReader("~MK<`ou&}.'ac P");
      stringReader2.markSupported();
      StringReader stringReader3 = new StringReader("lqDB}g+lS#1yP%m");
      SystemInUtil.addInputLine((String) null);
      CharBuffer.allocate(41);
      jSTerm0.capacity();
      StringReader stringReader4 = new StringReader("8.GBmE{");
      StringReader stringReader5 = new StringReader("9.0");
      stringReader5.ready();
      SystemInUtil.addInputLine(":#");
      stringReader2.ready();
      stringReader5.skip((-6850L));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9101315396761134
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("A+}dD~9)Gtpn7.[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("pk7k0[c5uvy");
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      Object[] objectArray0 = new Object[8];
      jSTerm3.retainAll(jSTerm2);
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) (-2);
      objectArray0[2] = (Object) jSTerm2;
      objectArray0[6] = (Object) jSTerm1;
      JSTerm jSTerm4 = (JSTerm)jSTerm0.clone();
      jSTerm4.toArray();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm3.toArray(objectArray0);
      JSTerm jSTerm6 = new JSTerm();
      JSTerm jSTerm7 = jSTerm5.cloneT();
      jSTerm6.matches(jSTerm5, jSSubstitution0);
      jSTerm7.cloneT();
      JSTerm jSTerm8 = new JSTerm();
      JSTerm jSTerm9 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm7.set(41, objectArray0[6]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 41
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8722087330545216
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("A+}dD~9)Gtpn7.[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) (-2);
      objectArray0[2] = (Object) jSTerm2;
      objectArray0[2] = (Object) streamTokenizer0;
      objectArray0[6] = (Object) jSTerm1;
      Object object0 = jSTerm0.clone();
      int int0 = 1864;
      JSJshopVars.coma = 1864;
      objectArray0[7] = object0;
      Object[] objectArray1 = jSTerm3.toArray();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.toArray(objectArray1);
      JSTerm jSTerm5 = new JSTerm();
      JSJshopVars.backquote = 1864;
      JSJshopVars.interrogation = (-2);
      jSTerm5.removeAll(jSTerm0);
      jSTerm4.cloneT();
      jSTerm1.matches(jSTerm3, jSSubstitution0);
      jSTerm3.cloneT();
      JSTerm jSTerm6 = new JSTerm();
      JSTerm jSTerm7 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm6.set((-3042), jSTerm7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3042
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1751674836762054
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.equals(jSTerm0);
      jSTerm0.isGround();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6321912032509727
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("A+}dD~9)Gt[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      int int0 = 3125;
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      streamTokenizer0.commentChar(3125);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm3.equals(jSTerm2);
      SystemInUtil.addInputLine("Q xeu/,F&|br2Xm");
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.052312921754819
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(uH ~jb6 \"@");
      JSTerm jSTerm1 = new JSTerm();
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("EzB6mu.S;O4d3aCtr");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      stringReader1.reset();
      Object object0 = new Object();
      stringReader1.read(charArray0);
      stringReader0.read();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.forEach(consumer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader1.read(charArray0);
      streamTokenizer0.ordinaryChars(921, 40);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2);
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SystemInUtil.addInputLine("~|gW3.a@I^h");
      SystemInUtil.addInputLine("A+}dqD~9)'t7.[");
      SystemInUtil.addInputLine(".-HVbxStOPC");
      StringReader stringReader0 = new StringReader(".-HVbxStOPC");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(false);
      SystemInUtil.addInputLine("");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars(337, (-4));
      streamTokenizer0.wordChars((-4), 977);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer3.parseNumbers();
      streamTokenizer3.wordChars(43, (-49));
      streamTokenizer3.whitespaceChars(206, 206);
      SystemInUtil.addInputLine("~|gW3.a@I^h");
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.call();
      assertEquals((-2), streamTokenizer1.ttype);
      assertFalse(jSTerm0.isVariable());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7500181519104905
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("A+}dD~9)Gt7.[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine((String) null);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis((-818L));
      StringReader stringReader1 = new StringReader("=Ar>%OoE>(C`*~hB5*F");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer5.ordinaryChar((-4));
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader2);
      SystemInUtil.addInputLine("");
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader1);
      streamTokenizer4.slashStarComments(false);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer9);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.VarCounter = 558;
      UnaryOperator.identity();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?\"OtBUG/{n A\"6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.spliterator();
      jSTerm0.spliterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      jSSubstitution0.listIterator();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.7978807205789944
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("A+}dD~9)Gt[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.rightBrac = (-1);
      stringReader0.reset();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm3.standardizerTerm();
      jSTerm4.cloneT();
      jSTerm4.isFunction();
      jSTerm3.toStr();
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5296847785508279
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SystemInUtil.addInputLine("~|gW3.a@I^h");
      SystemInUtil.addInputLine("A+}dqD~9)'t7.[");
      SystemInUtil.addInputLine(".-HVbxStOPC");
      StringReader stringReader0 = new StringReader(".-HVbxStOPC");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(false);
      SystemInUtil.addInputLine("");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars(337, (-4));
      streamTokenizer0.wordChars((-4), 977);
      streamTokenizer3.ordinaryChars((-2), 95);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer3.parseNumbers();
      streamTokenizer3.wordChars(43, (-49));
      streamTokenizer3.whitespaceChars(206, 206);
      SystemInUtil.addInputLine("~|gW3.a@I^h");
      streamTokenizer3.commentChar((-2872));
      SystemInUtil.addInputLine((String) null);
      streamTokenizer3.sval = "A+}dqD~9)'t7.[";
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("-X>i!-p2/{=-@");
      System.setCurrentTimeMillis(43);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5572661404461452
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SystemInUtil.addInputLine("~|ge3.a@I^1");
      SystemInUtil.addInputLine("A+}dD~9)'t7.[");
      SystemInUtil.addInputLine("MA0t~)=.179Pl;J");
      StringReader stringReader0 = new StringReader(".-HVbxStOPC");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(false);
      SystemInUtil.addInputLine("");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars(337, (-4));
      streamTokenizer0.wordChars((-4), 977);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer3.parseNumbers();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-1995));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.ordinaryChar(337);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer5.eolIsSignificant(false);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer4.slashSlashComments(true);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1166801112506692
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(uH ~jb6 \"@");
      SystemInUtil.addInputLine("ok{[)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.slashSlashComments(true);
      SystemInUtil.addInputLine((String) null);
      System.setCurrentTimeMillis(125L);
      StringReader stringReader1 = new StringReader("+'>>Xd]");
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar((-2133));
      streamTokenizer2.sval = null;
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar((-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer5.commentChar((-4));
      streamTokenizer4.ttype = (-2133);
      streamTokenizer4.eolIsSignificant(true);
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer4.slashSlashComments(true);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
