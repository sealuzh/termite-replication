/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 19:13:25 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7659373365785205
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(crb,sf)Ia6s%");
      char[] charArray0 = new char[9];
      StringReader stringReader0 = new StringReader("(crb,sf)Ia6s%");
      jSPredicateForm0.equals(jSPredicateForm0);
      charArray0[1] = '[';
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "(crb,sf)Ia6s%");
      charBuffer0.chars();
      CharBuffer.wrap(charArray0);
      CharBuffer.wrap((CharSequence) charBuffer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
      // Undeclared exception!
      try { 
        charBuffer0.append((CharSequence) "(crb,sf)Ia6s%");
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.2337916587064593
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      int int0 = 1360;
      StringReader stringReader0 = new StringReader("L(pxgj V,0Pfx<JTS G!");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int1 = (-1441975992);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.24493002679463532
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      int int0 = 1360;
      StringReader stringReader0 = new StringReader("L(xgj V,0x<JTmS!");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int1 = (-1441975981);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7140806159122948
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term  expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader(" Term  expected");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.whitespaceChars(32, 51);
      jSTerm0.remove((Object) stringReader0);
      stringReader0.ready();
      JSJshopVars.interrogation = 51;
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm1.add((Object) jSTerm2);
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.matches(jSTerm2);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.containsAll(jSTerm2);
      jSTerm0.isEmpty();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.removeAllElements();
      JSJshopVars.semicolon = 32;
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0);
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSJshopVars.rightPar = 0;
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSTerm0.standarizerPredicateForm();
      JSJshopVars.slash = 32;
      JSJshopVars.rightBrac = 51;
      System.setCurrentTimeMillis(51);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.926155713095467
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(crb,sf)Ia6s%");
      char[] charArray0 = new char[9];
      StringReader stringReader0 = new StringReader("(crb,sf)Ia6s%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm(streamTokenizer0);
      jSPredicateForm0.equals(jSPredicateForm1);
      charArray0[0] = '%';
      charArray0[1] = '[';
      charArray0[2] = '%';
      charArray0[3] = 'x';
      charArray0[4] = '&';
      StringReader stringReader1 = new StringReader("trm");
      String string0 = null;
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8546526185598227
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "4.0");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSJshopVars.apostrophe = (-320713799);
      jSPredicateForm0.add((Object) jSTerm0);
      Integer integer0 = new Integer((-1610612734));
      jSTerm0.isEmpty();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "4.0";
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSPredicateForm0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "4.0";
      jSTerm0.toArray(objectArray0);
      assertEquals("[4.0]", jSTerm0.toString());
      
      jSPredicateForm0.print();
      jSPredicateForm0.print();
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      jSTerm0.clonePF();
      StringReader stringReader0 = new StringReader("4.0");
      System.setCurrentTimeMillis((-3513L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-3727L));
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.toStr();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(11, stringBuffer0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Krm eApLcte,d");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader1 = new StringReader("E+Q?2xDW*wu");
      stringReader0.mark(1034);
      String string0 = "/~h@YKC+Y7AKu'_<TY";
      stringReader1.read();
      StringReader stringReader2 = new StringReader("/~h@YKC+Y7AKu'_<TY");
      StringReader stringReader3 = new StringReader("EFX/2}g_sGLVWP");
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      StringReader stringReader4 = new StringReader("T:<a'i ]@G7'!");
      String string1 = null;
      StringReader stringReader5 = null;
      try {
        stringReader5 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(:");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4293230219306162
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(jBchrb,sfgb6]");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4293230219306162
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(Vf");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "(jhs,suhgba64o ";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(jhs,suhgba64o ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.8599672810355049
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object object0 = jSTerm0.clone();
      stringReader0.reset();
      jSTerm0.add(object0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Error f]ag1k:<");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = 812;
      streamTokenizer1.nval = streamTokenizer1.nval;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar(41);
      streamTokenizer1.wordChars((-4), 812);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer0.quoteChar(812);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer2.ttype = 812;
      streamTokenizer1.eolIsSignificant(false);
      jSTerm0.removeElement(streamTokenizer2);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      streamTokenizer2.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer1.wordChars((-4), (-4));
      jSTerm0.add((Object) streamTokenizer0);
      streamTokenizer0.nval = 0.0;
      streamTokenizer0.resetSyntax();
      streamTokenizer1.eolIsSignificant(false);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Erqt flKv : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ttype = (-4);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer0.ordinaryChars((-4), 32);
      streamTokenizer0.quoteChar(32);
      jSTerm0.add((Object) streamTokenizer2);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.whitespaceChars((-4), (-326114488));
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.quoteChar(32);
      streamTokenizer1.whitespaceChars(32, 32);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer2.quoteChar((-4));
      streamTokenizer1.ordinaryChars(1086, (-4));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "4.0";
      jSTerm0.add((Object) "4.0");
      JSJshopVars.apostrophe = (-320713799);
      jSTerm0.add((Object) jSTerm0);
      Integer integer0 = new Integer((-1610612734));
      jSTerm0.isEmpty();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "4.0";
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "4.0";
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "4.0";
      jSTerm0.add((Object) "4.0");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSJshopVars.apostrophe = (-320713799);
      jSPredicateForm0.add((Object) jSTerm0);
      Integer integer0 = new Integer((-1610612734));
      jSTerm0.add((Object) integer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "4.0";
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSPredicateForm0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "4.0";
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0042424730540764
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object object0 = jSPredicateForm0.clone();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.addElement("/)>=z");
      jSPredicateForm0.toStr();
      jSPredicateForm0.addElement(object0);
      JSJshopVars.slash = (-2005);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      String string0 = "ayw5^sa4^1wg8ypm";
      int int0 = (-1934662838);
      CharBuffer.wrap((CharSequence) "ayw5^sa4^1wg8ypm");
      CharBuffer.allocate(124);
      jSPredicateForm0.equals((JSPredicateForm) null);
      int int1 = (-149);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-149));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      String string0 = "ayw5^sa4^1wg8ypm";
      CharBuffer.wrap((CharSequence) "ayw5^sa4^1wg8ypm");
      CharBuffer.allocate(124);
      jSPredicateForm0.equals((JSPredicateForm) null);
      int int0 = (-149);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-149));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-1433503813));
      jSTerm0.add((Object) "kv");
      jSTerm0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Erqt flKv : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.ordinaryChars(32, 32);
      streamTokenizer0.ordinaryChars(2253, (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.whitespaceChars(32, (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.quoteChar(32);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer1.whitespaceChars(32, 32);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ordinaryChars(32, 32);
      jSTerm0.add((Object) stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.quoteChar(32);
      streamTokenizer1.ordinaryChars(32, 32);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar(32);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.commentChar(32);
      System.setCurrentTimeMillis(2253);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = " Krm eApcted";
      StringReader stringReader0 = new StringReader(" Krm eApcted");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = null;
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.add((Object) " Krm eApcted");
      String string1 = " ";
      stringReader0.close();
      StringReader stringReader1 = new StringReader("h@u8oy?r[lgbeg");
      stringReader1.read();
      jSPredicateForm0.print();
      jSTerm0.toStr();
      stringReader1.markSupported();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Erqt flKv : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ttype = (-4);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-5104));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer0.ordinaryChars((-4), 32);
      streamTokenizer0.quoteChar(32);
      streamTokenizer0.ordinaryChar((-4));
      stringReader0.skip((-1344L));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer1.ttype = 32;
      streamTokenizer0.quoteChar(32);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      streamTokenizer1.whitespaceChars(32, 32);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ordinaryChars(32, 32);
      streamTokenizer1.resetSyntax();
      streamTokenizer2.quoteChar(32);
      streamTokenizer1.ordinaryChars(32, 32);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer2.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar(32);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer2.commentChar(32);
      assertEquals("Token[' '], line 1", streamTokenizer2.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Erqor flag1 : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars((-4), (-4176));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      streamTokenizer1.nval = streamTokenizer1.nval;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.quoteChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.ordinaryChars(32, 67);
      streamTokenizer2.quoteChar(67);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.nval = (-4.0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.ttype = (-4);
      streamTokenizer2.sval = "Erqor flag1 : ";
      streamTokenizer2.resetSyntax();
      streamTokenizer2.commentChar((-4176));
      streamTokenizer1.resetSyntax();
      streamTokenizer2.quoteChar((-4176));
      streamTokenizer1.commentChar(32);
      streamTokenizer2.nextToken();
      Integer integer1 = new Integer((-4));
      jSTerm0.add((Object) integer1);
      streamTokenizer2.quoteChar((-4));
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6730116670092565
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = " Term  expected";
      StringReader stringReader0 = new StringReader(" Term  expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = 51;
      StringReader stringReader1 = new StringReader(" Term  expected");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.whitespaceChars(32, 51);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm((String) null);
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.ready();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) jSTerm2);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.clonePF();
      jSTerm2.removeAllElements();
      JSJshopVars.semicolon = 32;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.equals(jSPredicateForm0);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.remove(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 32
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.firstElement();
      jSTerm0.add((Object) "Term");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "H@u8oy<R[LGbe]!";
      StringReader stringReader0 = new StringReader("H@u8oy<R[LGbe]!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Krm eApted");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.sval = null;
      streamTokenizer1.quoteChar((-4));
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-24L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(0L);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      Object object0 = new Object();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "H@u8oly<R[LGbe]!";
      StringReader stringReader0 = new StringReader("H@u8oly<R[LGbe]!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.close();
      jSTerm0.add((Object) stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Krm epted");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.ordinaryChars((-4), (-1091));
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.setSize(32);
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E t ff,Kv : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.nval = 0.0;
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars(1272, (-1087522186));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.quoteChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer1.whitespaceChars(32, 32);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ordinaryChars(32, 32);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar(32);
      streamTokenizer0.ordinaryChar(32);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Erqt flKv : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.ordinaryChar(1550);
      streamTokenizer0.ordinaryChars(32, 32);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars(1272, (-1087522186));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.whitespaceChars(32, (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.quoteChar(32);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer1.whitespaceChars(32, 32);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ordinaryChars(32, 32);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.quoteChar(32);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar(32);
      streamTokenizer0.ordinaryChar(32);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E t ff,Kv : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.nval = 0.0;
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.ordinaryChars(32, 32);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars(1252, (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.whitespaceChars(32, (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.quoteChar(32);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer1.whitespaceChars(32, 32);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ordinaryChars(32, 32);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ordinaryChars(32, 32);
      Integer integer1 = new Integer(32);
      jSTerm0.add((Object) integer1);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar(32);
      streamTokenizer0.ordinaryChar(32);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = " Trm expcted";
      StringReader stringReader0 = new StringReader(" Trm expcted");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSTerm> function0 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSTerm> function1 = unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function0);
      Function<Integer, Integer> function2 = Function.identity();
      Object object0 = new Object();
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function2);
      unaryOperator2.andThen((Function<? super Object, ? extends JSTerm>) function1);
      Function<Object, JSTerm> function5 = unaryOperator2.andThen((Function<? super Object, ? extends JSTerm>) function1);
      unaryOperator3.andThen((Function<? super Object, ? extends JSTerm>) function5);
      Function<Object, Integer> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function6);
      StringReader stringReader0 = new StringReader("0i}R/w-KE,%4-/-))");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(1604, 2414);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.quoteChar((-2479));
      streamTokenizer0.ordinaryChar(2414);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Krm eActed");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = " Krm eActed";
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.wordChars((-4), 96);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.commentChar((-1632750853));
      streamTokenizer1.nextToken();
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ttype = (-4);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(false);
      jSTerm0.lastElement();
      streamTokenizer0.wordChars((-4), (-4));
      jSPredicateForm0.addElement("Krm");
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.commentChar(32);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.ttype = 32;
      streamTokenizer1.parseNumbers();
      streamTokenizer1.pushBack();
      jSPredicateForm0.print();
      streamTokenizer0.ordinaryChar(32);
      assertEquals(1, streamTokenizer0.lineno());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.7902347553432828
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(crb,sf)Ia6s%");
      jSPredicateForm0.remove((Object) null);
      assertEquals(1, jSPredicateForm0.size());
      
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      jSSubstitution0.removeAll(jSSubstitution0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.addElement("/)>=z");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Object> function2 = function1.andThen((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super Object, ?>) function2);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function7);
      function1.andThen((Function<? super Integer, ? extends Integer>) function6);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E t ff,Kv : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.ordinaryChars(32, 32);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars(1272, (-1087522186));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.whitespaceChars(32, (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.quoteChar(32);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer1.whitespaceChars(32, 32);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ordinaryChars(32, 32);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar(32);
      streamTokenizer0.ordinaryChar(32);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "H@u8oy<R[LGbe]!";
      StringReader stringReader0 = new StringReader("H@u8oy<R[LGbe]!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E t ff,Kv : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.nval = 0.0;
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.ordinaryChars(32, 32);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars(1272, (-1087522186));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.whitespaceChars(32, (-4));
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.quoteChar(32);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      streamTokenizer1.whitespaceChars(32, 32);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ordinaryChars(32, 32);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar(32);
      streamTokenizer0.ordinaryChar(32);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Erqt flKv : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      Integer integer1 = new Integer((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer2.nval = (double) (-4);
      streamTokenizer1.wordChars(32, (-4));
      streamTokenizer0.ordinaryChars((-4), 32);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.commentChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      streamTokenizer1.whitespaceChars(32, 32);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.wordChars(32, 32);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.nval = 0.0;
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.commentChar((-4));
      streamTokenizer2.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.nval = (-4.0);
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer2.quoteChar((-4));
      streamTokenizer1.quoteChar(32);
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E t ff,Kv : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.ordinaryChars(32, 32);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-4), (-1087522186));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.whitespaceChars(32, (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.nval = (double) 32;
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.quoteChar(32);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer1.whitespaceChars(32, 32);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ttype = 32;
      streamTokenizer0.ordinaryChars(32, 32);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.quoteChar(32);
      streamTokenizer1.ordinaryChars(32, 32);
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.iterator();
      jSTerm1.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "H@u8oy<R[LGbe]!";
      StringReader stringReader0 = new StringReader("H@u8oy<R[LGbe]!");
      stringReader0.reset();
      char[] charArray0 = null;
      stringReader0.close();
      StringReader stringReader1 = new StringReader(" ");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = null;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.print();
      int int0 = (-1087522186);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1087522186));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function5).apply(any());
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      Function<Integer, String> function7 = unaryOperator3.compose((Function<? super Integer, ? extends String>) function6);
      Function<Object, String> function8 = unaryOperator3.compose((Function<? super Object, ? extends String>) function6);
      function7.andThen((Function<? super String, ? extends String>) function8);
      function6.apply(unaryOperator2);
      Integer integer0 = new Integer(3620);
      function7.apply(integer0);
      Integer integer1 = new Integer(3620);
      function7.apply(integer1);
      function3.andThen((Function<? super Integer, ? extends String>) function7);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      function4.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      function3.andThen((Function<? super Integer, ?>) function2);
      unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator2);
      unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "(!\"";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!\"");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Integer, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator3.compose((Function<? super String, ? extends Integer>) function3);
      Function<Object, JSTerm> function4 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSTerm> function5 = unaryOperator0.andThen((Function<? super Object, ? extends JSTerm>) function4);
      Function<Object, JSTerm> function6 = unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function5);
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator1);
      Integer integer0 = new Integer((-1433728624));
      unaryOperator3.apply(integer0);
      Function<Object, JSTerm> function7 = unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function5);
      unaryOperator0.andThen((Function<? super Object, ? extends JSTerm>) function6);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      function2.andThen((Function<? super Integer, ? extends Integer>) unaryOperator3);
      unaryOperator3.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator3.andThen((Function<? super Integer, ?>) function7);
      unaryOperator3.andThen((Function<? super Integer, ?>) unaryOperator3);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) unaryOperator4);
      StringReader stringReader0 = new StringReader("qn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Erqt flKv : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      Integer integer1 = new Integer((-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.commentChar((-4));
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), 32);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.quoteChar(32);
      streamTokenizer0.commentChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer1.whitespaceChars(32, 32);
      streamTokenizer1.wordChars(32, 32);
      streamTokenizer1.ttype = 32;
      streamTokenizer1.wordChars(32, 32);
      streamTokenizer1.ordinaryChars(32, 32);
      streamTokenizer1.nval = 0.0;
      streamTokenizer0.quoteChar(32);
      streamTokenizer0.wordChars(32, 32);
      streamTokenizer0.commentChar(32);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer1.commentChar(32);
      streamTokenizer0.ordinaryChar(32);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.quoteChar(32);
      streamTokenizer1.quoteChar(32);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.JSPredicateFormInit(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "G!p";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("G!p");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(%crb,sf)Ia6s%k");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function5).apply(any());
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      Function<Integer, String> function7 = unaryOperator3.compose((Function<? super Integer, ? extends String>) function6);
      Function<Object, String> function8 = unaryOperator3.compose((Function<? super Object, ? extends String>) function6);
      function7.andThen((Function<? super String, ? extends String>) function8);
      function6.apply(unaryOperator2);
      Integer integer0 = new Integer(3620);
      function7.apply(integer0);
      Integer integer1 = new Integer(3620);
      function7.apply(integer1);
      function3.andThen((Function<? super Integer, ? extends String>) function7);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      function4.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      function3.andThen((Function<? super Integer, ?>) function2);
      unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator2);
      Function<Object, Integer> function9 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function4);
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      Function<Object, Integer> function10 = unaryOperator5.compose((Function<? super Object, ? extends Integer>) function2);
      function10.andThen((Function<? super Integer, ? extends Integer>) function9);
      UnaryOperator.identity();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(0, stringBuffer0.length());
  }
}
