/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 05:08:32 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6573186405438316
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(nrQ@n%!)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.JSPredicateFormInit(streamTokenizer2);
      assertFalse(streamTokenizer2.equals((Object)streamTokenizer1));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6573186405438316
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(nrQ@n%!)");
      StringReader stringReader1 = new StringReader("(nrQ@n%!)");
      stringReader1.markSupported();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.whitespaceChars((-545), (-1373));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
      assertEquals("[nrQn%!]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.962709508903449
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7erm expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply((String) null);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator.identity();
      unaryOperator0.apply((String) null);
      unaryOperator0.apply("DJ{]@83EH");
      Function.identity();
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      Function.identity();
      Function<Object, JSTerm> function4 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends JSTerm>) function4);
      unaryOperator0.apply((String) null);
      jSTerm0.makeFunction();
      unaryOperator0.compose((Function<? super JSTerm, ? extends String>) function1);
      streamTokenizer0.quoteChar((-2890));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.pushBack();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution1);
      assertNotSame(jSPredicateForm2, jSPredicateForm0);
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm1));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2022886064254612
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7erm expeocted");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSTerm jSTerm2 = new JSTerm();
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm2.stream();
      jSTerm1.add((Object) jSTerm2);
      Integer integer0 = new Integer((-4215));
      jSTerm1.equals((JSPredicateForm) jSTerm1);
      jSTerm1.toArray();
      jSTerm2.spliterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.trimToSize();
      jSSubstitution1.addAll((Collection) jSTerm2);
      jSSubstitution0.removeElements(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.668952627613299
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7erm expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.standarizerPredicateForm();
      stringReader0.read();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSSubstitution1.insertElementAt(jSTerm1, 114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 114 > 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1901673943042492
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7erm expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.remove((Object) " 7erm expected");
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "lrs";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("lrs");
      jSTerm0.add((Object) null);
      int int0 = (-1090556247);
      System.setCurrentTimeMillis((-1090556247));
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "jel";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("jel");
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.add((Object) jSSubstitution0);
      int int0 = (-1090556247);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.009555877878628
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      jSSubstitution0.sort((Comparator) null);
      StringReader stringReader0 = new StringReader("8[Qm7 zH'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.addElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.isEmpty();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSPredicateForm0.toStr();
      jSTerm0.removeElement(streamTokenizer0);
      jSSubstitution0.add((Object) "8[Qm7 zH'");
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution3);
      jSPredicateForm0.isEmpty();
      jSPredicateForm3.clonePF();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.parallelStream();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution1.sort((Comparator) null);
      jSSubstitution2.removeElement(jSSubstitution1);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution7.iterator();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "(nrQ@n%!)";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(nrQ@n%!)");
      jSPredicateForm0.addElement("(nrQ@n%!)");
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7682293763712118
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7erm expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      JSTerm jSTerm1 = new JSTerm();
      jSPredicateForm0.print();
      // Undeclared exception!
      try { 
        jSSubstitution0.insertElementAt(jSTerm1, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7er epected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(" 7er epected");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<String, Object> function2 = unaryOperator0.andThen((Function<? super String, ?>) function1);
      UnaryOperator.identity();
      function1.compose((Function<? super String, ?>) function2);
      Function<String, String> function3 = Function.identity();
      function1.andThen((Function<? super String, ? extends String>) function3);
      function3.apply(" 7er epected");
      Function.identity();
      function3.apply("<I9Jm*");
      Function.identity();
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super Integer, ? extends String>) function1);
      function3.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function5 = function3.compose((Function<? super Object, ? extends String>) function1);
      Function<String, JSPredicateForm> function6 = (Function<String, JSPredicateForm>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends JSPredicateForm>) function6);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function7);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSTerm> function8 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super String, ? extends JSTerm>) function8);
      unaryOperator0.apply("ub8T26");
      jSTerm0.makeFunction();
      jSTerm0.add((Object) function5);
      unaryOperator1.compose((Function<? super JSTerm, ? extends String>) function5);
      streamTokenizer0.pushBack();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$55/2022744035 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.68175490357347
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7erm expecmted");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      stringReader0.read();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) stringReader0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSSubstitution0.addElements(jSSubstitution2);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution4);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm3 = jSTerm0.applySubstitutionPF(jSSubstitution7);
      assertNotSame(jSPredicateForm3, jSPredicateForm2);
      
      System.setCurrentTimeMillis((-974L));
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertTrue(jSPredicateForm0.equals((Object)jSPredicateForm1));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7er epRAt0d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function2 = Function.identity();
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.apply(" 7er epRAt0d");
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function.identity();
      Function.identity();
      streamTokenizer0.pushBack();
      Function<Object, Object> function5 = Function.identity();
      function5.compose((Function<? super Object, ?>) function2);
      Function.identity();
      function5.compose((Function<? super Object, ?>) function1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "(Dcri@&NV}";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(Dcri@&NV}");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(1389);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.removeAll(jSTerm1);
      jSTerm1.addElement((Object) null);
      jSTerm1.makeEval(true);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T;erm +expeced");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars(1640, 1640);
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.resetSyntax();
      stringReader0.read();
      streamTokenizer0.sval = ")";
      jSTerm0.add((Object) null);
      streamTokenizer0.resetSyntax();
      Predicate.isEqual((Object) "T;erm +expeced");
      Object[] objectArray0 = new Object[8];
      stringReader0.read();
      objectArray0[6] = (Object) "T;erm +expeced";
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.commentChar(32);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T;erm expecd");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.commentChar(38);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.sval = ")";
      streamTokenizer0.resetSyntax();
      Predicate.isEqual((Object) "T;erm expecd");
      streamTokenizer0.commentChar(32);
      Object[] objectArray0 = new Object[8];
      jSTerm0.add((Object) streamTokenizer0);
      objectArray0[6] = (Object) "T;erm expecd";
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.commentChar(32);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.close();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(307);
      Integer integer1 = new Integer((-2118));
      Integer integer2 = new Integer(44);
      Integer integer3 = new Integer(307);
      Integer integer4 = new Integer((-48802625));
      Integer integer5 = new Integer((-320713728));
      Integer integer6 = new Integer((-48802625));
      Integer integer7 = new Integer(307);
      Integer integer8 = new Integer((-3));
      Integer integer9 = new Integer((-1431655763));
      Integer integer10 = new Integer((-3356));
      Integer integer11 = new Integer((-1090556247));
      Integer integer12 = new Integer((-1090556247));
      Integer integer13 = new Integer((-700));
      Integer integer14 = new Integer(41);
      Integer integer15 = new Integer((-1431655763));
      Integer integer16 = new Integer((-547));
      Integer integer17 = new Integer((-48802625));
      Integer integer18 = new Integer((-1431655763));
      Integer integer19 = new Integer((-2118));
      Integer integer20 = new Integer((-28707612));
      Integer integer21 = new Integer((-547));
      Integer integer22 = new Integer(41);
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(307);
      Integer integer1 = new Integer((-2118));
      Integer integer2 = new Integer(44);
      Integer integer3 = new Integer(307);
      Integer integer4 = new Integer((-48802625));
      Integer integer5 = new Integer((-320713728));
      Integer integer6 = new Integer((-48802625));
      Integer integer7 = new Integer(307);
      Integer integer8 = new Integer((-3));
      Integer integer9 = new Integer((-1431655763));
      Integer integer10 = new Integer((-3356));
      Integer integer11 = new Integer((-1090556247));
      Integer integer12 = new Integer((-1090556247));
      Integer integer13 = new Integer((-675));
      Integer integer14 = new Integer(41);
      Integer integer15 = new Integer((-1431655763));
      Integer integer16 = new Integer((-547));
      Integer integer17 = new Integer((-48802625));
      Integer integer18 = new Integer((-1431655763));
      Integer integer19 = new Integer((-2118));
      Integer integer20 = new Integer((-28707612));
      Integer integer21 = new Integer((-547));
      Integer integer22 = new Integer(41);
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7erm expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.addElement(jSTerm0);
      Predicate.isEqual((Object) " 7erm expected");
      stringReader0.ready();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 307;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Integer integer0 = new Integer((-1352));
      jSPredicateForm0.addElement(integer0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      jSPredicateForm0.addElement(jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-1079435483));
      Integer integer1 = new Integer(307);
      Integer integer2 = new Integer((-2103));
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer((-1079435483));
      Integer integer6 = new Integer(100);
      Integer integer7 = new Integer((-103));
      Integer integer8 = new Integer(0);
      Integer integer9 = new Integer((-3005));
      Integer integer10 = new Integer((-103));
      System.setCurrentTimeMillis((-261L));
      Integer integer11 = new Integer((-3005));
      Integer integer12 = new Integer((-3005));
      System.setCurrentTimeMillis(307);
      System.setCurrentTimeMillis((-1L));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "(nrQ@Zn%!)";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(nrQ@Zn%!)");
      jSPredicateForm0.setSize(607);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("lrs");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.removeAll(jSTerm0);
      jSTerm1.removeAllElements();
      jSTerm1.addElement("lrs");
      jSTerm1.add((Object) "lrs");
      jSTerm0.makeEval(true);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.makeEval(true);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1076L);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader0.reset();
      streamTokenizer0.pushBack();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.stream();
      jSTerm0.parallelStream();
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChars((-4), (-1130892533));
      stringReader0.markSupported();
      streamTokenizer0.eolIsSignificant(false);
      stringReader0.reset();
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm0.toArray();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4780709313740181
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.remove((Object) jSSubstitution0);
      jSSubstitution1.assignFailure();
      jSSubstitution0.removeElements(jSSubstitution1);
      jSSubstitution1.sort((Comparator) null);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("lrs");
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSSubstitution0.add((Object) jSTerm0);
      Object object0 = new Object();
      jSSubstitution1.add(object0);
      jSTerm0.clonePF();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) null);
      jSSubstitution1.addElement((Object) null);
      jSSubstitution2.iterator();
      jSSubstitution0.add((Object) jSSubstitution2);
      jSTerm0.addAll((Collection) jSSubstitution2);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-4566L));
      jSSubstitution0.assignFailure();
      System.setCurrentTimeMillis(113L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(236L);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTerm0.forEach(consumer0);
      jSTerm0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7er epeAt0d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function1 = unaryOperator0.compose((Function<? super Integer, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function3 = unaryOperator0.andThen((Function<? super String, ? extends String>) function2);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function5 = Function.identity();
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = unaryOperator0.compose((Function<? super Object, ? extends String>) function6);
      function5.apply(" 7er epeAt0d");
      Function<Object, String> function8 = function7.compose((Function<? super Object, ?>) function5);
      Function<String, String> function9 = Function.identity();
      Function<Object, String> function10 = function3.compose((Function<? super Object, ? extends String>) function7);
      Function<Integer, String> function11 = function8.compose((Function<? super Integer, ?>) function1);
      Function<Object, String> function12 = function8.compose((Function<? super Object, ?>) function5);
      Function.identity();
      Function<Object, String> function13 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function14 = function10.compose((Function<? super Object, ?>) function5);
      Function.identity();
      function8.compose((Function<? super Integer, ?>) function13);
      Function<Object, String> function15 = unaryOperator0.compose((Function<? super Object, ? extends String>) function13);
      Function.identity();
      Function<String, String> function16 = Function.identity();
      Function<Object, Object> function17 = function14.andThen((Function<? super String, ?>) function16);
      function3.compose((Function<? super String, ? extends String>) unaryOperator0);
      function15.compose((Function<? super Integer, ?>) function11);
      function8.compose((Function<? super Integer, ?>) function5);
      function17.compose((Function<? super Object, ?>) function15);
      Function<Object, String> function18 = function8.compose((Function<? super Object, ?>) function7);
      function5.andThen((Function<? super Object, ? extends String>) function12);
      function18.andThen((Function<? super String, ? extends String>) function9);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ? extends String>) function12);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm2.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(2, (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.pushBack();
      streamTokenizer0.pushBack();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.stream();
      StringReader stringReader1 = new StringReader("cP=(\"?{t");
      streamTokenizer1.ordinaryChars((-4), 2334);
      stringReader0.markSupported();
      streamTokenizer0.eolIsSignificant(true);
      stringReader1.reset();
      jSTerm0.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7er epRAt0d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.makeFunction();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function3 = Function.identity();
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function4).apply(any());
      Function<Object, String> function5 = unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      function3.apply(" 7er epRAt0d");
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function6).apply(any());
      Function<Object, Integer> function7 = function5.andThen((Function<? super String, ? extends Integer>) function6);
      Function<Object, String> function8 = function5.compose((Function<? super Object, ?>) function3);
      Function.identity();
      Function<Object, Integer> function9 = function8.andThen((Function<? super String, ? extends Integer>) function7);
      Function<Object, String> function10 = function5.compose((Function<? super Object, ?>) function3);
      function5.compose((Function<? super Integer, ?>) function10);
      Function<Object, String> function11 = function5.compose((Function<? super Object, ?>) function3);
      Function<Object, String> function12 = unaryOperator0.compose((Function<? super Object, ? extends String>) function11);
      Function<Object, Object> function13 = function7.andThen((Function<? super Integer, ?>) function3);
      Function.identity();
      Function.identity();
      function11.andThen((Function<? super String, ? extends String>) function10);
      function12.compose((Function<? super String, ?>) function12);
      Function<Object, Object> function14 = Function.identity();
      function14.compose((Function<? super Object, ?>) function3);
      Function<String, String> function15 = function12.compose((Function<? super String, ?>) function12);
      function13.apply(function15);
      Function.identity();
      function14.compose((Function<? super Object, ?>) function2);
      function8.compose((Function<? super Object, ?>) function7);
      function11.andThen((Function<? super String, ? extends Integer>) function9);
      function8.andThen((Function<? super String, ? extends String>) function1);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm2);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7er epeAt0d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(" 7er epeAt0d");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function1 = unaryOperator0.compose((Function<? super Integer, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ? extends String>) function2);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function4 = Function.identity();
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function6 = unaryOperator0.compose((Function<? super Object, ? extends String>) function5);
      function4.apply(" 7er epeAt0d");
      Function.identity();
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super String, ? extends Integer>) function7);
      Function<Object, String> function8 = function6.compose((Function<? super Object, ?>) function4);
      Function.identity();
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function8.compose((Function<? super Integer, ?>) function1);
      Function<Object, String> function10 = function8.compose((Function<? super Object, ?>) function4);
      Function<Object, String> function11 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function8.compose((Function<? super Integer, ?>) function10);
      Function<Object, String> function12 = unaryOperator0.compose((Function<? super Object, ? extends String>) function11);
      Function.identity();
      Function.identity();
      Function.identity();
      function4.andThen((Function<? super Object, ?>) function12);
      Function<Object, Object> function13 = Function.identity();
      function12.compose((Function<? super String, ?>) function13);
      Function.identity();
      function4.compose((Function<? super Object, ?>) function8);
      function6.compose((Function<? super Object, ?>) function4);
      function12.andThen((Function<? super String, ? extends String>) function6);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.addElement("D|^");
      JSJshopVars.whiteSpace = 258;
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.iterator();
      jSPredicateForm0.addElement("mwg[t{M<hZ=Y");
      jSPredicateForm0.print();
      String string0 = "b<^jI\"Aty=8Wu]vt";
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(0, stringBuffer0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "(nrQ@n!)";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(nrQ@n!)");
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-33));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("~H%%");
      char[] charArray0 = new char[4];
      stringReader0.read(charArray0);
      long long0 = 1881L;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.spliterator();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "Jv'STer");
      jSPredicateForm0.trimToSize();
      JSJshopVars.minus = 3118;
      JSSubstitution jSSubstitution0 = jSPredicateForm0.matches(jSPredicateForm0);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7er epRAt0d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.makeFunction();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function3 = Function.identity();
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function4).apply(any());
      Function<Object, String> function5 = unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function6).apply(any());
      Function<Object, Integer> function7 = function5.andThen((Function<? super String, ? extends Integer>) function6);
      Function<Object, String> function8 = function5.compose((Function<? super Object, ?>) function3);
      Function.identity();
      Function<Object, Integer> function9 = function8.andThen((Function<? super String, ? extends Integer>) function7);
      Function<Object, String> function10 = function5.compose((Function<? super Object, ?>) function3);
      function5.compose((Function<? super Integer, ?>) function10);
      Function<Object, String> function11 = function5.compose((Function<? super Object, ?>) function3);
      Function<Object, String> function12 = unaryOperator0.compose((Function<? super Object, ? extends String>) function11);
      Function<Object, Object> function13 = function7.andThen((Function<? super Integer, ?>) function3);
      Function.identity();
      Function.identity();
      function3.andThen((Function<? super Object, ?>) function7);
      function11.andThen((Function<? super String, ? extends String>) function10);
      function12.compose((Function<? super String, ?>) function12);
      Function<Object, Object> function14 = Function.identity();
      function14.compose((Function<? super Object, ?>) function3);
      Function<String, String> function15 = function12.compose((Function<? super String, ?>) function12);
      function13.apply(function15);
      Function.identity();
      function14.compose((Function<? super Object, ?>) function2);
      function8.compose((Function<? super Object, ?>) function7);
      function11.andThen((Function<? super String, ? extends Integer>) function9);
      function8.andThen((Function<? super String, ? extends String>) function1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm2);
      jSTerm0.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, Object> function2 = Function.identity();
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function4 = Function.identity();
      Function.identity();
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = unaryOperator0.compose((Function<? super Object, ? extends String>) function6);
      Function<Object, String> function8 = function7.compose((Function<? super Object, ?>) function4);
      Function<String, String> function9 = Function.identity();
      Function<Object, String> function10 = function1.compose((Function<? super Object, ? extends String>) function7);
      Function<Object, String> function11 = function8.compose((Function<? super Object, ?>) function4);
      Function<Object, String> function12 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function10.andThen((Function<? super String, ?>) function2);
      Function<Object, String> function13 = unaryOperator0.compose((Function<? super Object, ? extends String>) function12);
      function9.andThen((Function<? super String, ?>) function5);
      Function<String, String> function14 = Function.identity();
      Function.identity();
      function9.compose((Function<? super String, ? extends String>) function14);
      function1.compose((Function<? super String, ? extends String>) unaryOperator0);
      function13.compose((Function<? super Object, ?>) function13);
      function11.andThen((Function<? super String, ? extends String>) function9);
      function2.compose((Function<? super Object, ?>) function13);
      Function<Object, String> function15 = function8.compose((Function<? super Object, ?>) function7);
      Function.identity();
      function15.compose((Function<? super Object, ?>) function4);
      function15.compose((Function<? super Object, ?>) function10);
      function15.andThen((Function<? super String, ? extends String>) function9);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.removeAll(jSTerm0);
      jSTerm1.addElement("lrs");
      jSTerm1.retainAll(jSTerm0);
      jSTerm0.makeEval(true);
      jSTerm1.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7er epeAt0d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function1 = unaryOperator0.compose((Function<? super Integer, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function3 = unaryOperator0.andThen((Function<? super String, ? extends String>) function2);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function5 = Function.identity();
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = unaryOperator0.compose((Function<? super Object, ? extends String>) function6);
      function5.apply(" 7er epeAt0d");
      Function<Object, String> function8 = function7.compose((Function<? super Object, ?>) function5);
      Function<String, String> function9 = Function.identity();
      Function<Object, String> function10 = function3.compose((Function<? super Object, ? extends String>) function7);
      Function<Integer, String> function11 = function8.compose((Function<? super Integer, ?>) function1);
      Function<Object, String> function12 = function8.compose((Function<? super Object, ?>) function5);
      Function.identity();
      Function<Object, String> function13 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function10.compose((Function<? super Object, ?>) function5);
      function12.compose((Function<? super Integer, ?>) function4);
      Function<Object, String> function14 = unaryOperator0.compose((Function<? super Object, ? extends String>) function13);
      Function.identity();
      Function<String, String> function15 = Function.identity();
      Function<Object, Object> function16 = function14.andThen((Function<? super String, ?>) function15);
      function3.compose((Function<? super String, ? extends String>) unaryOperator0);
      function14.compose((Function<? super Integer, ?>) function11);
      function8.compose((Function<? super Integer, ?>) function5);
      function16.compose((Function<? super Object, ?>) function14);
      Function<Object, String> function17 = function8.compose((Function<? super Object, ?>) function7);
      function5.andThen((Function<? super Object, ? extends String>) function12);
      function17.andThen((Function<? super String, ? extends String>) function9);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Te!rm e%6ected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate.isEqual((Object) predicate3);
      predicate3.negate();
      Predicate<Integer> predicate4 = predicate0.and(predicate1);
      predicate4.negate();
      Predicate<Integer> predicate5 = predicate0.or(predicate4);
      predicate2.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate2);
      predicate6.test(predicate0);
      predicate3.or(predicate7);
      jSSubstitution0.removeElement(predicate0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Predicate<Integer> predicate8 = predicate0.or(predicate6);
      Predicate<Object> predicate9 = predicate6.or(predicate7);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate1.or(predicate10);
      predicate1.or(predicate11);
      Predicate<Object> predicate12 = predicate7.and(predicate3);
      predicate1.or(predicate12);
      predicate0.and(predicate6);
      predicate8.and(predicate5);
      predicate8.or(predicate0);
      Predicate<Integer> predicate13 = predicate8.negate();
      predicate13.negate();
      predicate8.and(predicate2);
      predicate13.negate();
      Predicate.isEqual((Object) predicate13);
      predicate8.negate();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "(nrQ@n!)";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(nrQ@n!)");
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-21));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function3 = Function.identity();
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function5 = unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = function5.andThen((Function<? super String, ? extends Integer>) function6);
      Function<Object, String> function8 = function5.compose((Function<? super Object, ?>) function3);
      Function.identity();
      Function<Object, Integer> function9 = function8.andThen((Function<? super String, ? extends Integer>) function7);
      Function<Object, String> function10 = function5.compose((Function<? super Object, ?>) function3);
      function5.compose((Function<? super Integer, ?>) function10);
      Function<Object, String> function11 = function5.compose((Function<? super Object, ?>) function3);
      function10.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function12 = unaryOperator0.compose((Function<? super Object, ? extends String>) function11);
      Function.identity();
      Function.identity();
      function3.andThen((Function<? super Object, ?>) function7);
      function11.andThen((Function<? super String, ? extends String>) function10);
      function12.compose((Function<? super String, ?>) function12);
      Function<Object, Object> function13 = Function.identity();
      function13.compose((Function<? super Object, ?>) function3);
      Function<String, String> function14 = function12.compose((Function<? super String, ?>) function12);
      function3.apply(function14);
      Function.identity();
      function13.compose((Function<? super Object, ?>) function2);
      function8.compose((Function<? super Object, ?>) function7);
      function11.andThen((Function<? super String, ? extends Integer>) function9);
      function8.andThen((Function<? super String, ? extends String>) function1);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("('cAtmmYP");
      stringReader0.markSupported();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.ttype = 2805;
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.quoteChar((-281));
      streamTokenizer0.nval = (double) 2805;
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.parseNumbers();
      System.setCurrentTimeMillis(2805);
      streamTokenizer0.ttype = 699;
      streamTokenizer0.whitespaceChars(699, 699);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "($wCzMv\\H";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      String string0 = "b<^jI\"Aty=8Wu]vt";
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = ": unexpected EOF";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(": unexpected EOF");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(,nri@n!}");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
