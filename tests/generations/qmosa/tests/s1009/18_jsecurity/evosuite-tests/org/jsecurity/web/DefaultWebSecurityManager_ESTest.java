/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 07:09:48 GMT 2019
 */

package org.jsecurity.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsecurity.authc.AuthenticationToken;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy;
import org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy;
import org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.authz.permission.WildcardPermissionResolver;
import org.jsecurity.cache.HashtableCache;
import org.jsecurity.cache.HashtableCacheManager;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.Session;
import org.jsecurity.session.mgt.eis.MemorySessionDAO;
import org.jsecurity.subject.DelegatingSubject;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.DefaultWebSecurityManager;
import org.jsecurity.web.session.DefaultWebSessionManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWebSecurityManager_ESTest extends DefaultWebSecurityManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9855807690607032
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ",NZ6CM>dF&");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("jsecui9");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.setSessionIdCookieMaxAge((byte)122);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode(":?k$OrQrk[E.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [:?k$OrQrk[E.].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6120172700343436
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ",NZ6CM>dF&");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[1] = (byte) (-121);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("jsecui9");
      String string0 = "js5curkty";
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0217997374003334
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ",NZ6CM>dF&");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("jsecui9");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.isHttpSessionMode();
      defaultWebSecurityManager0.setSessionIdCookieSecure(false);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0108940605206347
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      hashtableCacheManager0.getCache("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY");
      hashtableCacheManager0.getCache("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      defaultWebSecurityManager0.setCacheManager(hashtableCacheManager0);
      MemorySessionDAO memorySessionDAO0 = new MemorySessionDAO();
      memorySessionDAO0.getActiveSessions();
      DefaultWebSessionManager defaultWebSessionManager0 = new DefaultWebSessionManager();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("http");
      MockInetAddress.getByName((String) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.setRememberMeCookiePath("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1544521942382837
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(simpleAccountRealm0, "ODQHdG>a");
      simplePrincipalCollection0.asSet();
      simplePrincipalCollection0.asList();
      simplePrincipalCollection0.clear();
      Class<String> class0 = String.class;
      simplePrincipalCollection0.byType(class0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      char[] charArray0 = new char[1];
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", charArray0, true);
      simpleAccountRealm0.init();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-29);
      char[] charArray1 = new char[6];
      charArray1[5] = '@';
      charArray1[1] = '@';
      charArray1[2] = '@';
      charArray1[3] = '%';
      charArray1[4] = '@';
      charArray1[5] = '@';
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("jsecuity", charArray1, true);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("Delegate RememberMeManager instance of type [");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.getSessionMode();
      defaultWebSecurityManager0.setSessionIdCookiePath("ODQHdG>a");
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0217997374003334
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ",NZ6CM>dF&");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("jsecui9");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.isHttpSessionMode();
      defaultWebSecurityManager0.setSessionIdCookieName("w2LV\"RGf{HpE(E=I<");
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7102476273485032
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      char[] charArray0 = new char[1];
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("", charArray0, true);
      simpleAccountRealm0.supports(usernamePasswordToken0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleAccountRealm0.init();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("#'g);k>iCPzS_wo");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.newSessionManagerInstance();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7212257503166537
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(servletResponse0).getWriter();
      doReturn(false).when(servletResponse0).isCommitted();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getCharacterEncoding();
      doReturn((String) null, (String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getRemoteHost();
      servletRequestWrapper0.getCharacterEncoding();
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper1, (ServletResponse) servletResponseWrapper2);
      servletResponseWrapper2.resetBuffer();
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper8);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper9);
      servletResponseWrapper7.isCommitted();
      servletResponseWrapper4.getWriter();
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper11);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) null, (ServletResponse) servletResponseWrapper5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9281387959706908
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(simpleAccountRealm0, "OQHdG>a");
      simplePrincipalCollection0.clear();
      Class<String> class0 = String.class;
      simplePrincipalCollection0.byType(class0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      char[] charArray0 = new char[1];
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", charArray0, true);
      simpleAccountRealm0.init();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-29);
      char[] charArray1 = new char[6];
      charArray1[5] = '@';
      charArray1[1] = '@';
      charArray1[2] = '@';
      charArray1[3] = '%';
      charArray1[4] = '@';
      charArray1[5] = '@';
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("jsecuity", charArray1, true);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("Delegate RememberMeManager instance of type [");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      boolean boolean0 = defaultWebSecurityManager0.isAuthenticated((Session) null);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.211128820965081
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection("", "cFlVvT{z{s:Gag>JT`");
      Class<UsernamePasswordToken> class0 = UsernamePasswordToken.class;
      Class<String> class1 = String.class;
      simplePrincipalCollection0.byType(class1);
      simplePrincipalCollection0.oneByType(class0);
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      servletResponseWrapper0.reset();
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      simpleAccountRealm0.getAuthorizationInfo((PrincipalCollection) null);
      char[] charArray0 = new char[18];
      charArray0[8] = 't';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '\u001C';
      charArray0[5] = '\u001C';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("K6vVo,PuJ$=", charArray0, true);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("{r");
      simpleAccountRealm2.init();
      simplePrincipalCollection0.addAll((PrincipalCollection) simplePrincipalCollection1);
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm("{r");
      simpleAccountRealm0.supports((AuthenticationToken) null);
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm3);
      assertEquals("http", defaultWebSecurityManager1.getSessionMode());
      
      DefaultWebSecurityManager defaultWebSecurityManager2 = new DefaultWebSecurityManager();
      assertTrue(defaultWebSecurityManager2.isHttpSessionMode());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.813782155210461
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper1.resetBuffer();
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper4.resetBuffer();
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper6);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper10);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(servletRequest0).getAttributeNames();
      doReturn((String[]) null).when(servletRequest0).getParameterValues(anyString());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      doReturn(0).when(servletRequest0).getRemotePort();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getAttributeNames();
      servletRequestWrapper0.getParameterValues((String) null);
      servletResponseWrapper1.resetBuffer();
      Locale locale0 = Locale.UK;
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper1.getRemotePort();
      WildcardPermission wildcardPermission0 = new WildcardPermission("_AUTHENTICATED_SESSION_KEY", true);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      MockInetAddress.anyLocalAddress();
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, true, (Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper9);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(subject0, servletRequestWrapper2, servletResponseWrapper11);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.813782155210461
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      servletResponseWrapper2.resetBuffer();
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper0.resetBuffer();
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper13 = new ServletResponseWrapper(servletResponseWrapper12);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(servletRequest0).getAttributeNames();
      doReturn((String[]) null).when(servletRequest0).getParameterValues(anyString());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      doReturn(0).when(servletRequest0).getRemotePort();
      doReturn((RequestDispatcher) null).when(servletRequest0).getRequestDispatcher(anyString());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.getAttributeNames();
      servletRequestWrapper0.getParameterValues(" class: '");
      servletResponseWrapper8.resetBuffer();
      Locale locale0 = Locale.UK;
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.getRemotePort();
      WildcardPermission wildcardPermission0 = new WildcardPermission("_AUTHENTICATED_SESSION_KEY", true);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      MockInetAddress.anyLocalAddress();
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, true, (Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) servletResponseWrapper5);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      servletRequestWrapper3.getRequestDispatcher("h");
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(subject0, servletRequestWrapper3, servletResponseWrapper8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6872593473350865
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper1.resetBuffer();
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper6);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper10);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(servletRequest0).getAttributeNames();
      doReturn((String[]) null).when(servletRequest0).getParameterValues(anyString());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      doReturn(0, 0).when(servletRequest0).getRemotePort();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getAttributeNames();
      servletRequestWrapper0.getParameterValues((String) null);
      Session session0 = null;
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper5);
      servletResponseWrapper1.resetBuffer();
      servletRequestWrapper0.getRemotePort();
      Locale locale0 = Locale.UK;
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper1.getRemotePort();
      boolean boolean0 = true;
      WildcardPermission wildcardPermission0 = new WildcardPermission("_AUTHENTICATED_SESSION_KEY", true);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(wildcardPermission0, "org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(simplePrincipalCollection0, true, inetAddress0, (Session) null, defaultWebSecurityManager0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper0, servletResponseWrapper9);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte)93;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)95;
      defaultWebSecurityManager0.setRememberMeCookiePath("dd5R");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy1 = new FirstSuccessfulAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      WildcardPermission wildcardPermission0 = new WildcardPermission("0el_g;-XfHL,5UVW)c", false);
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      linkedHashSet0.add(wildcardPermission0);
      Boolean boolean0 = new Boolean(false);
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      delegatingSubject0.isPermittedAll((Collection<Permission>) linkedHashSet0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(delegatingSubject0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      servletResponseWrapper2.resetBuffer();
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper0.resetBuffer();
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper13 = new ServletResponseWrapper(servletResponseWrapper12);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(servletRequest0).getAttributeNames();
      doReturn((String[]) null).when(servletRequest0).getParameterValues(anyString());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      doReturn(0).when(servletRequest0).getRemotePort();
      doReturn((RequestDispatcher) null).when(servletRequest0).getRequestDispatcher(anyString());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.getAttributeNames();
      servletRequestWrapper0.getParameterValues(" class: '");
      servletResponseWrapper8.resetBuffer();
      Locale locale0 = Locale.UK;
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.getRemotePort();
      WildcardPermission wildcardPermission0 = new WildcardPermission("_AUTHENTICATED_SESSION_KEY", true);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      MockInetAddress.anyLocalAddress();
      defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, true, (Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) servletResponseWrapper5);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      servletRequestWrapper3.getRequestDispatcher("h");
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null, (ServletRequest) null, servletResponseWrapper4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.813782155210461
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      servletResponseWrapper2.resetBuffer();
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper0.resetBuffer();
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper13 = new ServletResponseWrapper(servletResponseWrapper12);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(servletRequest0).getAttributeNames();
      doReturn((String[]) null).when(servletRequest0).getParameterValues(anyString());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      doReturn(0).when(servletRequest0).getRemotePort();
      doReturn((RequestDispatcher) null).when(servletRequest0).getRequestDispatcher(anyString());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.getAttributeNames();
      servletRequestWrapper0.getParameterValues(" class: '");
      servletResponseWrapper8.resetBuffer();
      Locale locale0 = Locale.UK;
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.getRemotePort();
      WildcardPermission wildcardPermission0 = new WildcardPermission("_AUTHENTICATED_SESSION_KEY", false);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      MockInetAddress.anyLocalAddress();
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, false, (Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) servletResponseWrapper5);
      assertFalse(subject0.isAuthenticated());
      
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      servletRequestWrapper3.getRequestDispatcher("h");
      defaultWebSecurityManager0.bind(subject0, servletRequestWrapper3, servletResponseWrapper8);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4659497192528064
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      HashtableCache hashtableCache0 = (HashtableCache)hashtableCacheManager0.getCache("ODQHdG>a");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320/org.jsecurity.realm.text.PropertiesRealm-0-accounts.index");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "public static final String constants in the ");
      hashtableCache0.clear();
      hashtableCache0.clear();
      hashtableCache0.toString();
      hashtableCacheManager0.getCache("HashtableCache [ODQHdG>a]");
      hashtableCache0.keys();
      Boolean boolean0 = new Boolean(false);
      hashtableCache0.remove(boolean0);
      hashtableCacheManager0.getCache("b~Wsi[XHzpE");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.newSessionManagerInstance();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4558487091517962
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      HashtableCache hashtableCache0 = new HashtableCache("");
      HashtableCache hashtableCache1 = new HashtableCache("");
      hashtableCache1.clear();
      hashtableCache1.clear();
      hashtableCache1.toString();
      HashtableCacheManager hashtableCacheManager1 = new HashtableCacheManager();
      hashtableCacheManager1.getCache("HashtableCache []");
      hashtableCache1.keys();
      Boolean boolean0 = new Boolean(true);
      hashtableCache1.remove(hashtableCacheManager0);
      hashtableCacheManager1.getCache("] to form a key/value pair.");
      hashtableCacheManager1.getCache("gUD6*n");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      boolean boolean1 = defaultWebSecurityManager0.isHttpSessionMode();
      assertTrue(boolean1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(simpleAccountRealm0, "ODQHdG>a");
      simplePrincipalCollection0.asSet();
      simplePrincipalCollection0.asList();
      simplePrincipalCollection0.clear();
      Class<String> class0 = String.class;
      simplePrincipalCollection0.byType(class0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      char[] charArray0 = new char[10];
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", charArray0, true);
      simpleAccountRealm0.init();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      char[] charArray1 = new char[9];
      charArray1[5] = '@';
      charArray1[1] = '@';
      charArray1[2] = '@';
      charArray1[3] = '%';
      charArray1[4] = '@';
      charArray1[5] = '@';
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("jsecuity", charArray1, true);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("Delegate RememberMeManager instance of type [");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieName("Delegate RememberMeManager instance of type [");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy1 = new FirstSuccessfulAuthenticationStrategy();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy2 = new FirstSuccessfulAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy1 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy2 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      defaultWebSecurityManager0.getPrincipals((Session) null);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      boolean boolean0 = defaultWebSecurityManager0.isAuthenticated((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("seci9");
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      linkedHashSet0.add(simpleAccountRealm0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(linkedHashSet0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection("", "cFlVvT{z{s:Gag>JT`");
      Class<UsernamePasswordToken> class0 = UsernamePasswordToken.class;
      Class<String> class1 = String.class;
      Collection<String> collection0 = simplePrincipalCollection0.byType(class1);
      simplePrincipalCollection0.oneByType(class0);
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      char[] charArray0 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("K6vVo,PuJ$=", charArray0, false);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("MD2");
      simpleAccountRealm0.init();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection(simplePrincipalCollection0);
      simplePrincipalCollection2.addAll((PrincipalCollection) simplePrincipalCollection1);
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm("");
      simpleAccountRealm0.supports(usernamePasswordToken0);
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      simplePrincipalCollection2.fromRealm("Reading configuration from URL ");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, collection0, locale_FilteringMode0);
      defaultWebSecurityManager0.hasRoles(simplePrincipalCollection2, list0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      String string0 = defaultWebSecurityManager1.getSessionMode();
      assertEquals("http", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7212257503166537
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(servletResponse0).getWriter();
      doReturn(false).when(servletResponse0).isCommitted();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getCharacterEncoding();
      doReturn((String) null, (String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.getRemoteHost();
      servletRequestWrapper0.getCharacterEncoding();
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper1, (ServletResponse) servletResponseWrapper2);
      servletResponseWrapper2.resetBuffer();
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper6);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper8);
      servletResponseWrapper5.isCommitted();
      servletResponseWrapper2.getWriter();
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper1);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) servletRequestWrapper3, (ServletResponse) servletResponseWrapper5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.servlet.ServletRequestWrapper cannot be cast to javax.servlet.http.HttpServletRequest
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      HashtableCacheManager hashtableCacheManager1 = new HashtableCacheManager();
      hashtableCacheManager1.getCache("].  Allowed values are ");
      hashtableCacheManager1.getCache("Sa");
      HashtableCache hashtableCache0 = new HashtableCache("Xu}");
      HashtableCache hashtableCache1 = new HashtableCache("Xu}");
      Boolean boolean0 = new Boolean(false);
      HashtableCache hashtableCache2 = new HashtableCache("Xu}");
      HashtableCacheManager hashtableCacheManager2 = new HashtableCacheManager();
      hashtableCacheManager2.getCache((String) null);
      hashtableCacheManager2.getCache("Xu}");
      HashtableCache hashtableCache3 = new HashtableCache((String) null);
      HashtableCache hashtableCache4 = new HashtableCache("2|23??^U0Bxo$Y4@");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("true");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [true].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      HashtableCacheManager hashtableCacheManager1 = new HashtableCacheManager();
      hashtableCacheManager1.getCache("].  Allowed values are ");
      hashtableCacheManager1.getCache("Sa");
      hashtableCacheManager1.getCache("Xu}");
      HashtableCache hashtableCache0 = new HashtableCache("Xu}");
      hashtableCacheManager1.getCache("2/{");
      Boolean boolean0 = new Boolean(true);
      HashtableCache hashtableCache1 = new HashtableCache("6r'$]o<!qZ\u0003Eu7");
      HashtableCacheManager hashtableCacheManager2 = new HashtableCacheManager();
      hashtableCacheManager2.getCache("LUx=");
      hashtableCacheManager1.getCache((String) null);
      HashtableCache hashtableCache2 = new HashtableCache((String) null);
      HashtableCache hashtableCache3 = new HashtableCache("6r'$]o<!qZ\u0003Eu7");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      Integer integer0 = new Integer((-48));
      Integer.compare((-48), 884);
      Integer.sum((-48), (-1));
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.clear();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      char[] charArray0 = new char[1];
      usernamePasswordToken0.clear();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("", charArray0, true);
      simpleAccountRealm0.supports(usernamePasswordToken0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleAccountRealm0.init();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("sessionId returned from doCreate implementation is null.  Please verify the implementation.");
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager((Realm) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realm argument cannot be null
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(g-)Pcea8j;Q)WMB");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, ",NZ6CM>dF&");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, ",NZ6CM>dF&");
      EvoSuiteFile evoSuiteFile2 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Fw2  AZ h4eq6OB)#p");
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      System.setCurrentTimeMillis(0L);
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager(linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realms collection argument cannot be empty.
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      HashtableCache hashtableCache0 = new HashtableCache("");
      HashtableCache hashtableCache1 = new HashtableCache("jse5ur'ty");
      HashtableCache hashtableCache2 = new HashtableCache("");
      hashtableCache2.toString();
      HashtableCacheManager hashtableCacheManager1 = new HashtableCacheManager();
      hashtableCacheManager0.getCache("jse5ur'ty");
      hashtableCache1.toString();
      hashtableCache1.clear();
      hashtableCacheManager0.getCache("jse5ur'ty");
      Set set0 = new LinkedHashSet<Boolean>();
      Boolean.valueOf(true);
      HashtableCache hashtableCache3 = new HashtableCache("l_^Uq^=d$e");
      hashtableCache3.remove(hashtableCache2);
      hashtableCacheManager1.getCache("GQ");
      HashtableCache hashtableCache4 = new HashtableCache("");
      hashtableCacheManager1.getCache("UJe<@~R_lHlnm");
      hashtableCacheManager1.getCache("2Y1_*aL");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)95;
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte) (-52);
      byteArray1[2] = (byte)93;
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy1 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy2 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookiePath("Invalid sessionMode [");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simplePrincipalCollection0.asSet();
      simplePrincipalCollection0.asList();
      simplePrincipalCollection0.clear();
      Class<String> class0 = String.class;
      simplePrincipalCollection0.byType(class0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "ODQHdG>a");
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      char[] charArray0 = new char[1];
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("", charArray0, true);
      simpleAccountRealm0.init();
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("", charArray0, true);
      simplePrincipalCollection1.clear();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("");
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("v2'/JD");
      simpleAccountRealm2.init();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection(simplePrincipalCollection1);
      WildcardPermission wildcardPermission0 = new WildcardPermission("MD2");
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("MD2");
      wildcardPermission0.implies(permission0);
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection(wildcardPermission0, "MD2");
      simplePrincipalCollection3.addAll((PrincipalCollection) simplePrincipalCollection1);
      simpleAccountRealm2.init();
      usernamePasswordToken2.toString();
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm("v2'/JD");
      simpleAccountRealm2.supports(usernamePasswordToken2);
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm3);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.setSessionIdCookieMaxAge((-1643376987));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simplePrincipalCollection0.asSet();
      simplePrincipalCollection0.asList();
      simplePrincipalCollection0.clear();
      Class<String> class0 = String.class;
      simplePrincipalCollection0.byType(class0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "ODQHdG>a");
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      char[] charArray0 = new char[1];
      simpleAccountRealm0.init();
      simplePrincipalCollection1.clear();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("");
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("v2'/JD");
      simpleAccountRealm2.init();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection(simplePrincipalCollection1);
      WildcardPermission wildcardPermission0 = new WildcardPermission("MD2");
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("MD2");
      wildcardPermission0.implies(permission0);
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection(wildcardPermission0, "MD2");
      simplePrincipalCollection3.addAll((PrincipalCollection) simplePrincipalCollection1);
      simpleAccountRealm2.init();
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm("v2'/JD");
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm2);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieMaxAge((-1643376991));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(servletRequest0).getRemotePort();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      servletRequestWrapper1.getRemotePort();
      Locale locale0 = Locale.UK;
      Integer integer0 = new Integer(0);
      defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
      DefaultWebSessionManager defaultWebSessionManager0 = new DefaultWebSessionManager();
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper0);
      MemorySessionDAO memorySessionDAO0 = new MemorySessionDAO();
      try { 
        memorySessionDAO0.readSession("ODvHdG>a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no session with id [ODvHdG>a]
         //
         verifyException("org.jsecurity.session.mgt.eis.CachingSessionDAO", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy1 = new FirstSuccessfulAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }
}
