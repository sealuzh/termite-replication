/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 05:52:31 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)25;
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = '3';
      charArray0[2] = 'z';
      charArray0[3] = 's';
      charArray0[4] = '=';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("%YA>[KFt='^(J9");
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress("-EH1\"[<J2bf", byteArray0);
      MockInetAddress.getByAddress("8J0oc[e^C'f^$q", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress("VYGw,X#|dd):.-", byteArray0);
      MockInetAddress.getByAddress("z2xqh", byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress("cnXt", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("8J0oc[e^C'f^$q", (String) null, true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockInetAddress.getLocalHost();
      InetAddress inetAddress0 = MockInetAddress.getByName("%YA>[KFt='^(J9");
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress("-EHl1\"<J2bf", byteArray0);
      MockInetAddress.getByAddress("870oc[e^C'f9$J", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress("VYGw,X#|dd):.-", byteArray0);
      MockInetAddress.getByAddress(">5,'DX&zs06~!3/p\"", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'D';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null, inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("%YA>[KFt='^(J9");
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress("-EH1\"[<J2bf", byteArray0);
      MockInetAddress.getByAddress("8J0oc[e^C'f^$q", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress("VYGw,X#|dd):.-", byteArray0);
      MockInetAddress.getByAddress("z2xqh", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("z2xqh", byteArray0);
      MockInetAddress.getByAddress("q~F#HW#p\n+GxPo>Sie", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("8J0oc[e^C'f^$q", (String) null);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, true);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      char[] charArray0 = new char[0];
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("%YA>[KFt='^(J9");
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress("-EH1\"[<J2bf", byteArray0);
      MockInetAddress.getByAddress("8J0oc[e^C'f^$q", byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress("VYGw,X#|dd):.-", byteArray0);
      MockInetAddress.getByAddress("T2q", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '>';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("-EH1\"[<J2bf", charArray0, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("%YA>[KFt='^(J9");
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress("-EHl1\"<J2bf", byteArray0);
      MockInetAddress.getByAddress("870oc[e^C'f9$J", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress("VYGw,X#|dd):.-", byteArray0);
      MockInetAddress.getByAddress(">5,'DX&zs06~!3/p\"", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(">5,'DX&zs06~!3/p\"", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("%YA>[KFt='^(J9", "cnXt", inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'O';
      charArray0[4] = 'v';
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" (", charArray0, true, inetAddress0);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("%YA>[KFt='^(J9");
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress("-EHl\"<J2bf", byteArray0);
      MockInetAddress.getByAddress("8J0oc[e^C'f^$q", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress("VYGw,X#|dd):.-", byteArray0);
      MockInetAddress.getByAddress(">5,'DX&zs06~!3/p\"", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      char[] charArray0 = new char[7];
      MockInetAddress.getByAddress(">5,'DX&zs06~!3/p\"", byteArray0);
      MockInetAddress.getByAddress("~F#HW#p\n+GxPo>Sie", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("%YA>[KFt='^(J9");
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress("-EHl1\"<J2bf", byteArray0);
      MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress("-EHl1\"<J2bf", byteArray0);
      MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (char[]) null, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0675802366583103
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[1];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true);
      usernamePasswordToken0.getUsername();
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      char[] charArray1 = new char[9];
      charArray1[0] = '=';
      charArray1[3] = 'I';
      charArray1[4] = '6';
      charArray1[5] = '.';
      usernamePasswordToken0.setUsername("");
      charArray1[7] = 'J';
      charArray1[8] = '.';
      usernamePasswordToken0.setPassword(charArray1);
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.setUsername("/Vf[!5%QOTzNw!Pu");
      MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("9,q(k_5m Ez3uB");
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[8];
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress("%YA>[KFt='^uJ8", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("H*sQiOnxOM]", byteArray0);
      MockInetAddress.getByAddress("H*sQiOnxOM]", byteArray0);
      MockInetAddress.getByAddress("q~F#HW#p\n+GxPo>Sie", byteArray0);
      MockInetAddress.getByAddress("", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("H*sQiOnxOM]", "%YA>[KFt='^uJ8", false, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("%YA>[KFt='^(J9");
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress("-EHl1\"<J2bf", byteArray0);
      MockInetAddress.getByAddress("870oc[e^C'f9$J", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress("VYGw,X#|dd):.-", byteArray0);
      MockInetAddress.getByAddress(">5,'DX&zs06~!3/p\"", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      char[] charArray0 = new char[7];
      MockInetAddress.getByAddress(">5,'DX&zs06~!3/p\"", byteArray0);
      MockInetAddress.getByAddress("q~F#HW#p\n+GxPo>Sie", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("cnXt", "", true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      Object object5 = new Object();
      Object object6 = new Object();
      usernamePasswordToken0.getPrincipal();
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object1));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("ns@e/l`n] %q74^", "ns@e/l`n] %q74^", true);
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = 'Q';
      charArray0[2] = '+';
      charArray0[3] = ' ';
      charArray0[4] = 'E';
      charArray0[5] = '[';
      charArray0[1] = 'P';
      charArray0[7] = 'c';
      charArray0[8] = ' ';
      usernamePasswordToken0.setPassword(charArray0);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("%YA>[KFt='^(J9");
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress("-EHl1\"<J2bf", byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress("870oc[e^C'f9$J", byteArray0);
      MockInetAddress.getByAddress("-EHl1\"<J2bf", byteArray0);
      MockInetAddress.getByAddress("8J0oc[e^C'f^$q", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress("-EH1\"[<J2bf", byteArray0);
      MockInetAddress.getByAddress(", rememberMe=", byteArray0);
      MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getByAddress("", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("q~F#HW#p\n+GxPo>Sie", (char[]) null, inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("ns@e/l`n] %q74^", "ns@e/l`n] %q74^", true);
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = 'Q';
      charArray0[2] = '+';
      charArray0[3] = ' ';
      charArray0[4] = 'E';
      charArray0[5] = '[';
      charArray0[6] = 'P';
      charArray0[7] = 'c';
      charArray0[8] = '{';
      usernamePasswordToken0.setPassword(charArray0);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Ng+%\"gn", (char[]) null, false);
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      char[] charArray0 = new char[8];
      charArray0[0] = 'a';
      charArray0[2] = ';';
      charArray0[3] = 'e';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, " (", false);
      Object object9 = new Object();
      usernamePasswordToken0.clear();
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("%YA>[KFt='^(J9");
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress("-EHl1\"<J2bf", byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress("q3+ZRfU+U~|_TX", byteArray0);
      MockInetAddress.getByAddress("/qIK", byteArray0);
      MockInetAddress.getByAddress("P~{7a*Df|b", byteArray0);
      MockInetAddress.getByAddress("w)8O8iC{oqRuR~dWeZ`", byteArray0);
      MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getByAddress("", byteArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("/qIK", charArray0, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" (", " (");
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("fqIk0l6;D", "&EO`6wplPA0x$Iw", false);
      usernamePasswordToken0.setInetAddress((InetAddress) null);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object7));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("ns@e/l`n] %q74^", "ns@e/l`n] %q74^", true);
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = 'Q';
      charArray0[2] = '+';
      charArray0[3] = '1';
      charArray0[4] = 'E';
      charArray0[5] = '[';
      charArray0[6] = 'P';
      charArray0[7] = 'c';
      charArray0[8] = '{';
      usernamePasswordToken0.setPassword(charArray0);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object7));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", false);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.setPassword((char[]) null);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("[prB,2XQl){>r^", "[prB,2XQl){>r^");
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[9];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("kZX[_6", charArray0, true);
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.setUsername("b_Pb%riN6jY]");
      usernamePasswordToken0.setUsername(">ahl");
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(")", ")", true);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - ), rememberMe=true", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("%YA>[KFt='^(J9");
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("%YA>[KFt='^(J9", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("G*s,iOcxO]", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress("-EHl1\"<J2bf", byteArray0);
      MockInetAddress.getByAddress("870oc[e^C'f9$J", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByAddress("VYGw,X#|dd):.-", byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(">5,'DX&zs06~!3/p\"", byteArray0);
      MockInetAddress.getByAddress("cnXt", byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      char[] charArray0 = new char[7];
      MockInetAddress.getByAddress(">5,'DX&zs06~!3/p\"", byteArray0);
      MockInetAddress.getByAddress("q~F#HW#p\n+GxPo>Sie", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, false, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false (>5,'DX&zs06~!3/p\"/0.0.0.0)", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '8';
      charArray0[3] = 'p';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("m(+=i)RA4R$~S&IWn.w", charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.setRememberMe(true);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "{HF*TtCaA>MPrJfZ76F", false);
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("ns@e/l`n] %q74^", "ns@e/l`n] %q74^");
      usernamePasswordToken0.setUsername("z");
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object4));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "{HF*TtCaA>MPrJfZ76F", false);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
