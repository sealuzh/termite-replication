/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 21:37:51 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("?Qp4|Zvz/L%Fb*h>", 3943L);
      assertEquals(3943L, long0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5171063970610277
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Byte byte0 = new Byte((byte)46);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6957425341696344
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("e?2B", 0);
      Object object1 = jSONObject0.remove("e?2B");
      assertEquals(0, object1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("{\"java.lang.String@0000000011\": java.lang.Long@0000000012}", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.991509361356614
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("e?2B", "e?2B");
      String string0 = jSONObject1.optString("e?2B");
      assertNotNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5622590391891036
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long long0 = new Long(3943L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.optLong(".C6]?v+qk:wU;A ", 0L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("re", (-1856L));
      assertEquals((-1856L), long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      int int0 = jSONObject0.optInt("JSON does not allow non-finite numbers.", (int) (byte)0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      int int0 = jSONObject0.optInt("JSON does not allow non-finite numbers.", (int) (byte) (-11));
      assertEquals((-11), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      double double0 = jSONObject0.optDouble("]X|6", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("e?2B", 0);
      double double0 = jSONObject1.optDouble("e?2B");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.991509361356614
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.accumulate(",\n", byte0);
      double double0 = jSONObject0.optDouble(",\n");
      assertEquals(1, jSONObject0.length());
      assertEquals(92.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6957425341696344
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("&&k|*", 13);
      Object object0 = jSONObject1.opt("&&k|*");
      assertEquals(13, object0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(47);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("+", stringArray0);
      jSONObject0.put("getaccumulate", (-1496.20250444307));
      boolean boolean0 = jSONObject0.has("getaccumulate");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.991509361356614
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.putOpt("e?2B", "e?2B");
      String string0 = jSONObject0.getString("e?2B");
      assertNotNull(string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5228146795137603
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long long0 = new Long(3943L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put(".C6]?v+qk:wU;A ", 0L);
      jSONObject0.getLong(".C6]?v+qk:wU;A ");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("&&k|*", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("{UXh[$&R /1^", 2);
      long long0 = jSONObject1.getLong("{UXh[$&R /1^");
      assertEquals(2L, long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.991509361356614
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("]1}, SK)}('$F", jSONArray0);
      JSONArray jSONArray1 = jSONObject0.getJSONArray("]1}, SK)}('$F");
      assertSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(" Yb]o0vq", stringArray0);
      jSONObject0.put(" Yb]o0vq", 115);
      int int0 = jSONObject0.getInt(" Yb]o0vq");
      assertEquals(115, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7917594692280554
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Double double0 = new Double((-639.9935));
      JSONObject jSONObject1 = jSONObject0.putOpt("XBis", double0);
      double double1 = jSONObject1.getDouble("XBis");
      assertEquals((-639.9935), double1, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 57, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1786549963416462
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(Double.NaN);
      hashMap0.put((Double) null, double0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 34, 42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((int) (byte)116, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[116] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2798542258336674
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("jnd?/y", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("+", stringArray0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Integer integer0 = new Integer((byte)3);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[7];
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject("[", stringArray0);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (long) 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("&&k|*", stringArray0);
      try { 
        jSONObject0.put("wa", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      try { 
        jSONObject0.accumulate((String) null, " Yb]o0?avq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.83611631639612
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Double double0 = new Double((-639.9935));
      jSONObject0.putOpt("XBis", double0);
      String string0 = jSONObject0.toString((-639), (-639));
      assertNotNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, 0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("istoJSONArray");
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, boolean0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt(",\n", stringArray0[0]);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0280940565630374
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, (Object) jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.006214565944081
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Byte byte0 = new Byte((byte)116);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Integer integer0 = new Integer(1849);
      jSONObject0.put("JSONArray[", (Object) integer0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("\"r<Q2", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Double double0 = new Double((-174.35360943868));
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      double double1 = jSONObject0.optDouble("[", (-174.35360943868));
      assertEquals((-174.35360943868), double1, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = new Integer(19);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.opt("?:@>cl");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("XBis", (Collection) linkedList0);
      try { 
        jSONObject0.getInt("XBis");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"XBis\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.682661330575521
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Long long0 = new Long(3943L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put(".C6]?v+qk:wU;A ", 0L);
      JSONObject jSONObject1 = jSONObject0.accumulate(".C6]?v+qk:wU;A ", long0);
      try { 
        jSONObject1.getDouble(".C6]?v+qk:wU;A ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".C6]?v+qk:wU;A \"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5268781472745927
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(629.589280205469);
      jSONObject0.append(" 1|@#Z;3&", double0);
      try { 
        jSONObject0.getBoolean(" 1|@#Z;3&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" 1|@#Z;3&\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.844621476365503
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.putOpt("u#s]", boolean0);
      boolean boolean1 = jSONObject0.getBoolean("u#s]");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put("NPO&V", 13);
      Object object0 = jSONObject0.get("NPO&V");
      assertEquals(13, object0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("S}:9w^gxVR9k;2X");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of S}:9w^gxVR9k;2X
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = new Integer((byte)34);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Object object1 = jSONObject0.remove("e?2B");
      assertNull(object1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.0628562377334734
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Long long0 = new Long(1122L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Integer integer0 = new Integer(3274);
      jSONObject0.putOpt("z", integer0);
      jSONObject0.accumulate("z", "49`w 8*F@EwfJW8");
      StringWriter stringWriter0 = new StringWriter(8192);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      String string0 = JSONObject.valueToString(hashMap0, 34, 42);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 34, 34);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[22];
      String string0 = JSONObject.valueToString(stringArray0[2], (byte)16, (-64089280));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6707549559936354
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(":;>u&z;/)|#z,", ":;>u&z;/)|#z,");
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.9784283686946544
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put("NPO&V", 13);
      jSONObject0.put("isrotateLeft", true);
      String string0 = jSONObject0.toString((-1), 50);
      assertNotNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.9745481968670184
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Long long0 = new Long(3943L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put(".C6]?v+qk:wU;A ", 0L);
      // Undeclared exception!
      jSONObject0.toString(4897, 442);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9881370026995782
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("1T", (-1229L));
      JSONObject.valueToString(jSONObject1, (-64089270), (short) (-3215));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6064880823229146
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, (-1823), 47);
      assertNotNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "<VN'B0I");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(59);
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = JSONObject.quote("/,LHl3\"OVNEL7VF");
      assertEquals("\"/,LHl3\\\"OVNEL7VF\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.2592004731479975
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("+", stringArray0);
      long long0 = jSONObject0.optLong("\r", 2428L);
      assertEquals(2428L, long0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = JSONObject.quote(stringArray0[0]);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.put(stringArray0[3], 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("+", stringArray0);
      jSONObject0.append("$wC}&XBkedv_", jSONObject0);
      String string0 = jSONObject0.optString("$wC}&XBkedv_", "$wC}&XBkedv_");
      assertNotNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Long long0 = new Long((-830L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.optJSONObject("cweN:");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("{}");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("+", stringArray0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("o/yKI2Om$^46MM,d");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.8572007905858017
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("+", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("getaccumulate", (double) 0);
      jSONObject1.put("getaccumulate", (long) (byte) (-69));
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.append("isnumberToString", jSONObject2);
      Long long0 = new Long(0L);
      jSONObject2.put("isnumberToString", 2953L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0283941667143721
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.put((long) (byte) (-88));
      String string0 = JSONObject.valueToString(jSONArray0, 55, (-1456));
      assertNotNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(47);
      String[] stringArray0 = JSONObject.getNames((Object) stringWriter0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.673992731488805
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.putOpt("&&k|*", "&&k|*");
      try { 
        jSONObject0.getLong("&&k|*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&&k|*\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5507721843811002
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("+", stringArray0);
      jSONObject0.put("getaccumulate", (-1496.20250444307));
      try { 
        jSONObject0.getJSONObject("getaccumulate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getaccumulate\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.7279318349954005
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Long long0 = new Long(1122L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Integer integer0 = new Integer(3274);
      jSONObject0.putOpt("z", integer0);
      jSONObject0.accumulate("z", "49`w 8*F@EwfJW8");
      jSONObject0.getJSONArray("z");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("QQ", (long) 21);
      try { 
        jSONObject0.getJSONArray("QQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"QQ\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5228146795137603
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Long long0 = new Long(3943L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = jSONObject0.put(".C6]?v+qk:wU;A ", 0L);
      jSONObject1.getDouble(".C6]?v+qk:wU;A ");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.7624988333496463
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.putOpt("&&k|*", "&&k|*");
      int int0 = jSONObject0.optInt("&&k|*", 16);
      assertEquals(16, int0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.0837660374856473
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Byte byte0 = new Byte((byte) (-121));
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("false", true);
      boolean boolean0 = jSONObject1.optBoolean("false", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.7677281666160187
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.putOpt("&&k|*", "&&k|*");
      boolean boolean0 = jSONObject0.optBoolean("&&k|*", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("+oqi\"@-5IP=( VqLHr", false);
      boolean boolean0 = jSONObject0.optBoolean("+oqi\"@-5IP=( VqLHr", true);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.doubleToString(5029.1582);
      assertEquals("5029.1582", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.71408754118701
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put("toS", (-4230.69));
      Short short0 = new Short((byte)0);
      try { 
        jSONObject0.append("toS", short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[toS] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.8636799873410004
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("+", stringArray0);
      jSONObject0.put("wheel.json.JSONObject", (Collection) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONObject", jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(" Yb]o0vq", stringArray0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\f", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.7917594692280554
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Double double0 = new Double((-639.9935));
      JSONObject jSONObject1 = jSONObject0.putOpt("XBis", double0);
      int int0 = jSONObject1.getInt("XBis");
      assertEquals((-639), int0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.2033320406994705
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("A JSONObject text must begin with '{'");
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 37 of A JSONObject text must begin with '{'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("quo", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(629.589280205469);
      jSONObject0.append(" 1|@#Z;3&", double0);
      boolean boolean0 = jSONObject0.isNull(" 1|@#Z;3&");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(60);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.203750922511834
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      int int0 = jSONObject0.optInt(",\n");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.4921530032950385
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = new Integer(2442);
      JSONObject jSONObject0 = new JSONObject(integer0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(" Yb]o0vq", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put(" Yb]o0vq", 115);
      double double0 = jSONObject1.optDouble(" Yb]o0vq", 0.0);
      assertEquals(115.0, double0, 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Float float0 = new Float(1113.42);
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong("getadd");
      assertEquals(0L, long0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("getflush");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("R^]j{glgw");
      assertEquals("", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      boolean boolean0 = jSONObject0.isNull("j7Q#8KR_s");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|41DNI\"K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |41DNI\"K
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.4085788142038693
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("[,*'jLc3M", (double) 59);
      int int0 = jSONObject0.optInt("[,*'jLc3M");
      assertEquals(59, int0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("#gh}TRN']!7V", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("1T", (-1229L));
      long long0 = jSONObject0.getLong("1T");
      assertEquals(2, jSONObject0.length());
      assertEquals((-1229L), long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      try { 
        jSONObject0.getString("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double double0 = new Double((-174.35360943868));
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      boolean boolean0 = jSONObject0.has("i|eK)W[lO/GuM59h`L");
      assertFalse(boolean0);
  }
}
