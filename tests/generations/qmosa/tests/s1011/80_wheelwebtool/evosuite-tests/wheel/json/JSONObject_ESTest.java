/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 13:21:40 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9665323334259055
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " of ";
      stringArray0[1] = "+";
      stringArray0[2] = "+";
      Byte.compare((byte)0, (byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put(" of ", (-4230.69));
      jSONObject0.put(",:]}/\"[{;=#", (long) (byte)0);
      JSONObject jSONObject1 = jSONObject0.put(" of ", (Collection) null);
      String[] stringArray1 = new String[6];
      stringArray1[0] = " of ";
      stringArray1[2] = ",:]}/\"[{;=#";
      stringArray1[3] = "+";
      stringArray1[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray1);
      jSONObject0.getDouble(",:]}/\"[{;=#");
      jSONObject1.optJSONArray((String) null);
      jSONObject1.toString(0, (-114));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      try { 
        jSONArray0.getJSONArray(44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[44] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0996407732218003
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject.doubleToString(1662.04280161);
      StringWriter stringWriter0 = new StringWriter(12);
      stringWriter0.close();
      JSONTokener jSONTokener0 = new JSONTokener("1662.04280161");
      JSONTokener jSONTokener1 = new JSONTokener("1662.04280161");
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(123);
      JSONObject jSONObject1 = new JSONObject(integer0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject1.putOpt("1662.04280161", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      linkedList0.replaceAll(unaryOperator0);
      Long long0 = new Long(2952L);
      linkedList0.add(long0);
      Long long1 = new Long(34);
      linkedList0.add(long1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long2 = new Long(0L);
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)2470);
      Boolean boolean0 = new Boolean(true);
      hashMap0.put(short0, boolean0);
      jSONObject0.toJSONArray((JSONArray) null);
      Double.valueOf(227.3619401967167);
      Integer integer0 = new Integer((-421));
      Boolean boolean1 = new Boolean("false");
      Boolean boolean2 = new Boolean("]n+X>'EW2Y5");
      Long long3 = new Long(0L);
      String string0 = jSONObject0.optString("ac4", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6105386910188018
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "tJ=%";
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Object) "tJ=%");
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("R&dPi.prL<?");
      Boolean boolean1 = new Boolean("R&dPi.prL<?");
      JSONObject.valueToString(hashMap1, 595, 595);
      JSONObject.doubleToString(1.0);
      // Undeclared exception!
      jSONObject0.toString(2762);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.231052605263619
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalXor(false, false);
      Boolean.logicalXor(false, false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.putOpt("", boolean0);
      jSONObject0.getBoolean("");
      String string0 = "isor";
      JSONTokener jSONTokener0 = new JSONTokener("isor");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of isor
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6332004508871008
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONArray jSONArray0 = null;
      Double double0 = new Double(526.8);
      double double1 = (-811.0969);
      Double.max(526.8, (-811.0969));
      int int0 = (-2042);
      hashMap0.put((JSONArray) null, double0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-2042), (-2042));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1729130961864254
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(629.589280205469);
      Double.isFinite(629.589280205469);
      jSONObject0.append("] is not a JSONArray.", double0);
      Double.min(629.589280205469, 629.589280205469);
      int int0 = 2203;
      Double.isFinite((-2030.940616));
      Float float0 = new Float(629.589280205469);
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a JSONArray.", float0);
      Boolean boolean0 = new Boolean(true);
      jSONObject1.accumulate("] is not a JSONArray.", boolean0);
      try { 
        jSONObject0.getJSONObject("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.027941588739906
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer((-2093064));
      Long long0 = new Long(0L);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      linkedList2.add(long0);
      Long long1 = new Long((-1740L));
      linkedList2.add(long1);
      Long long2 = new Long(0L);
      LinkedList<Long> linkedList3 = new LinkedList<Long>(linkedList2);
      linkedList3.replaceAll(unaryOperator0);
      Long long3 = Long.valueOf(0L);
      linkedList3.add(long3);
      String string0 = JSONObject.quote(";IG /TWLlQ~)b9");
      assertEquals("\";IG /TWLlQ~)b9\"", string0);
      
      linkedList2.add((Long) null);
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      linkedList3.poll();
      String string1 = JSONObject.valueToString(linkedList1);
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0470481964044267
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Byte.compare((byte) (-1), (byte)0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.put("getwait", (-4230.69));
      JSONObject jSONObject2 = jSONObject1.put("getwait", (long) (-1));
      JSONObject jSONObject3 = jSONObject0.put("Je:]87)zCI{\"f$", (Collection) null);
      JSONObject jSONObject4 = new JSONObject(jSONObject1, stringArray0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("Je:]87)zCI{\"f$");
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject1.toString(34, (int) (byte)0);
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      Byte.toUnsignedLong((byte) (-1));
      JSONObject jSONObject5 = jSONObject3.append("5LW", ",:]}/\"[{;=#");
      jSONObject2.put("'Jr'*<vw`4*vL{", true);
      jSONObject5.optJSONObject("getwait");
      try { 
        jSONObject5.getJSONObject(" at character ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" at character \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5666332734579296
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1798.5593600447128);
      assertEquals("1798.5593600447128", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("rot", (Object) "1798.5593600447128");
      double double0 = jSONObject1.optDouble("rot");
      double double1 = jSONObject0.optDouble("1798.5593600447128", 1798.5593600447128);
      assertEquals(double1, double0, 0.01);
      
      JSONObject.getNames((Object) jSONObject0);
      JSONObject.valueToString((Object) null, 874, 8448);
      jSONObject0.toString();
      Byte byte0 = new Byte((byte)121);
      Byte.toUnsignedLong((byte) (-82));
      JSONObject.getNames((Object) byte0);
      Integer integer0 = new Integer(874);
      Integer.sum(120, 1);
      JSONObject.getNames((Object) integer0);
      double double2 = jSONObject0.optDouble("null");
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8808421307236456
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " of ";
      stringArray0[1] = "+";
      stringArray0[2] = "+";
      Byte.compare((byte)0, (byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put(" of ", (-4230.69));
      Long.toUnsignedString(0L);
      Long.compare(0L, (-1L));
      Float float0 = new Float(Double.NaN);
      Float.min(2016.4385F, 0.0F);
      Float.min((-1735.0F), 0.0F);
      Float.isFinite(2259.0F);
      Float.max(0.0F, 0L);
      Float.isFinite(0.0F);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917416760626204
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer integer0 = new Integer((-762));
      String[] stringArray0 = new String[1];
      String string0 = ";IG /TWLlQ~)b9";
      stringArray0[0] = ";IG /TWLlQ~)b9";
      Long long0 = new Long(0L);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = new Boolean("4");
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.containsAll(linkedList1);
      String string1 = "jl:>h\"vawpB&wwv";
      JSONObject.doubleToString(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      JSONObject.valueToString("jl:>h\"vawpB&wwv");
      JSONObject.valueToString(linkedList0, 92, (-762));
      JSONTokener jSONTokener0 = new JSONTokener("0");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Integer integer0 = new Integer((-762));
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";IG /TWLlQ~)b9";
      Integer integer1 = new Integer((-1409));
      Integer.toUnsignedString((-2948));
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long long0 = Long.valueOf((-540L));
      hashMap0.put(long0, integer1);
      Long.sum((-1859L), 0L);
      hashMap0.put(long0, "getvalueOf");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.759549374139712
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " of ";
      stringArray0[1] = "+";
      stringArray0[2] = " Yb]o0vq";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put(" of ", (-4230.69));
      jSONObject0.put(",:]}/\"[{;=#", 0L);
      JSONObject jSONObject1 = jSONObject0.put("/VeBY)_S1nSvRf", (Collection) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('G');
      Boolean.logicalAnd(false, false);
      Long long0 = new Long(0L);
      jSONObject1.putOpt(" of ", "7y5gCSHoBP");
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      jSONObject1.optBoolean("p&KA46(IaK;F");
      Float.isFinite((byte)16);
      Float.isFinite(0L);
      Short short0 = new Short((byte)16);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.128509989934977
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(629.589280205469);
      Double.isFinite(629.589280205469);
      JSONObject jSONObject1 = jSONObject0.append("] is not a JSONArray.", double0);
      jSONObject1.getString("] is not a JSONArray.");
      Double.min(629.589280205469, 629.589280205469);
      int int0 = 2203;
      Double.isFinite((-2030.940616));
      Float float0 = new Float(629.589280205469);
      jSONObject0.putOpt("] is not a JSONArray.", float0);
      try { 
        jSONObject0.getJSONObject("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8856322076761303
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float((-2441.140497976946));
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      Float.isFinite(1.0F);
      Float.max((-1.0F), (-1.0F));
      JSONObject jSONObject1 = jSONObject0.put("ev*I4/`,w!", (Map) hashMap0);
      jSONObject0.put("ev*I4/`,w!", (Map) hashMap0);
      try { 
        jSONObject1.put((String) null, 91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";IG /TWLlQ~)b9";
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      Long long2 = new Long((-1L));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long3 = new Long(2952L);
      linkedList0.add((Long) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long4 = new Long(0L);
      Long long5 = new Long(2952L);
      linkedList0.add(long4);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8181342764317936
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Double double0 = new Double((-3016.4310530237));
      Long long0 = new Long((-37L));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long1 = new Long(0L);
      linkedList0.containsAll(linkedList0);
      Long long2 = new Long(0L);
      linkedList0.add(long2);
      Long long3 = new Long(0L);
      Long long4 = new Long((-761L));
      LinkedList<Long> linkedList1 = new LinkedList<Long>(linkedList0);
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      LinkedList<Long> linkedList2 = new LinkedList<Long>(linkedList0);
      linkedList0.replaceAll(unaryOperator0);
      linkedList2.poll();
      Long.valueOf((-1740L));
      Long long5 = new Long(0L);
      linkedList1.add(long3);
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      LinkedList<Long> linkedList5 = new LinkedList<Long>();
      linkedList3.poll();
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(linkedList5);
      try { 
        jSONObject0.get("QBj;lDcWcL-;/]z`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"QBj;lDcWcL-;/]z`\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6304788681128626
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " of ";
      String string0 = "+";
      stringArray0[1] = "+";
      stringArray0[2] = " of ";
      Byte.compare((byte)0, (byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put(" of ", (-4230.69));
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 2L);
      jSONObject0.put(" of ", (Collection) null);
      String[] stringArray1 = new String[2];
      stringArray1[0] = " of ";
      stringArray1[1] = "+";
      JSONObject.doubleToString(Double.NaN);
      jSONObject1.optBoolean("\n");
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString("+", (byte)0, 270);
      try { 
        jSONObject1.getJSONObject(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(3757);
      Long long0 = new Long(3757);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject("{}");
      Short short0 = new Short((short)108);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-410));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.658361019226912
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = "tJ=%";
      stringArray0[0] = "tJ=%";
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Object) "tJ=%");
      String string1 = "d!?e";
      JSONObject jSONObject2 = jSONObject1.putOpt("d!?e", "tJ=%");
      jSONObject2.toString();
      Long long0 = new Long(1980L);
      jSONObject2.put("tJ=%", (Object) long0);
      try { 
        jSONObject1.getBoolean("d!?e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"d!?e\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9014247746217374
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(98, 0);
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}", (long) 98);
      jSONObject1.optInt("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      jSONObject0.names();
      jSONObject1.getInt("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      jSONObject0.optJSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      Integer integer0 = new Integer((-1567));
      JSONObject.valueToString(integer0);
      jSONObject0.put("_", (long) 0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1070));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.376289728533694
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double double0 = new Double(629.589280205469);
      String[] stringArray0 = new String[8];
      stringArray0[0] = " 1|@#Z;3&";
      stringArray0[1] = " 1|@#Z;3&";
      stringArray0[2] = " 1|@#Z;3&";
      stringArray0[3] = " 1|@#Z;3&";
      stringArray0[4] = " 1|@#Z;3&";
      stringArray0[5] = " 1|@#Z;3&";
      stringArray0[6] = " 1|@#Z;3&";
      stringArray0[7] = " 1|@#Z;3&";
      JSONObject jSONObject0 = new JSONObject(" 1|@#Z;3&", stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(" 1|@#Z;3&", " 1|@#Z;3&");
      jSONObject1.optBoolean("?>[p=UOyF*]l@R[g@7H");
      jSONObject0.remove(" 1|@#Z;3&");
      try { 
        jSONObject1.getInt(" 1|@#Z;3&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" 1|@#Z;3&\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8827936154710376
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Byte.compare((byte)0, (byte)25);
      Object object0 = new Object();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "+";
      stringArray1[1] = "+";
      stringArray1[2] = "+";
      stringArray0[0] = "';IG /TWLQP~))b9";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray1);
      JSONObject jSONObject1 = jSONObject0.put("+", 2352.8410218335);
      JSONObject jSONObject2 = jSONObject0.put("+", (-3804L));
      JSONObject jSONObject3 = jSONObject2.put("';IG /TWLQP~))b9", (Collection) null);
      jSONObject0.optBoolean("+", true);
      jSONObject3.optInt("idoubleTString");
      Object object1 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)69);
      Byte byte1 = new Byte((byte)25);
      JSONObject jSONObject4 = new JSONObject(byte0, stringArray0);
      jSONObject0.getDouble("+");
      jSONObject0.put("';IG /TWLQP~))b9", false);
      jSONObject1.accumulate("getlogicalAnd", "';IG /TWLQP~))b9");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("2vP,m=b#<s`GUCNhN5c");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Integer integer0 = new Integer((-762));
      Long long0 = new Long((-637L));
      Long long1 = new Long((-637L));
      String string0 = Long.toUnsignedString(0L);
      Long.compare(0L, (-637L));
      Float float0 = new Float((double) (-762));
      Float.min(312L, (-1.0F));
      Float.isFinite((-1.0F));
      Float.min((-2605.7F), 791.0035F);
      Float.isFinite(858.1F);
      Float.max((-2112.981F), (-2605.7F));
      Float.max(1, 602.74F);
      Float.max((-738.49396F), (-2112.981F));
      Float.isFinite(1717.628F);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8990795978373458
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a JS~NArray.";
      Double double0 = new Double(629.589280205469);
      JSONObject jSONObject1 = jSONObject0.append("] is not a JS~NArray.", double0);
      jSONObject1.get("] is not a JS~NArray.");
      Double double1 = new Double(629.589280205469);
      Double.isFinite((-2030.940616));
      try { 
        jSONObject0.getJSONObject("] is not a JS~NArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JS~NArray.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0846217758269803
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte byte0 = (byte)0;
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = ",\n";
      jSONObject0.optLong("0", 1108L);
      try { 
        jSONObject0.getBoolean(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3520520803642557
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double((-174.35360943868));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i|eK)W[lO/GuM59h`L";
      stringArray0[2] = "i|eK)W[lO/GuM59h`L";
      stringArray0[3] = "";
      stringArray0[4] = "i|eK)W[lO/GuM59h`L";
      stringArray0[5] = "'";
      stringArray0[6] = "_^(}[CN'G_Z";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(true);
      jSONObject0.optDouble(stringArray0[1], (-174.35360943868));
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer integer0 = Integer.valueOf(2263);
      try { 
        jSONObject0.put(stringArray0[1], (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.12122985612315
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " of ";
      stringArray0[1] = "+";
      stringArray0[2] = "1.'=f";
      Byte.compare((byte)0, (byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put(" of ", (-4230.69));
      jSONObject1.optLong(" of ");
      jSONObject0.put(",:]}/\"[{;=#", 2L);
      JSONObject jSONObject2 = jSONObject0.put("/VeBY)_S1nSvRf", (Collection) null);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "/VeBY)_S1nSvRf";
      stringArray1[1] = "+";
      stringArray1[2] = ",:]}/\"[{;=#";
      stringArray1[3] = "+";
      stringArray1[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray1);
      jSONObject2.optJSONArray((String) null);
      jSONObject3.toJSONArray((JSONArray) null);
      jSONObject2.toString(0, (-114));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject3.append("Mhi>3d#gk>D\"OaQh9", jSONArray0);
      assertEquals(3, jSONObject3.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5543448637622554
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      hashMap0.remove(object0);
      String string0 = "log";
      int int0 = (-1343);
      jSONObject0.optInt("log", (-1343));
      Double double0 = new Double(0.0);
      hashMap0.put(double0, (Float) null);
      jSONObject0.optString("_tTQ#8Dx)}G?");
      jSONObject0.optJSONArray("_tTQ#8Dx)}G?");
      jSONObject0.keys();
      String string1 = null;
      jSONObject0.optDouble((String) null);
      JSONObject.getNames((Object) null);
      Double double1 = new Double((-1343));
      JSONObject jSONObject1 = jSONObject0.put("cy=7-[nXHD;nQS]Z", (Object) double1);
      try { 
        jSONObject1.put((String) null, (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.484881232234049
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[11];
      stringArray0[0] = "ishashCode";
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject.getNames((Object) linkedList0);
      long long0 = 1532L;
      Long long1 = new Long(1532L);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<String, JSONObject> hashMap1 = new HashMap<String, JSONObject>();
      JSONObject.valueToString(long1);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("ishashCode", "ishashCode");
      Double.valueOf(0.0);
      jSONObject0.toString();
      Double.isFinite(1532L);
      HashMap<String, JSONObject> hashMap2 = new HashMap<String, JSONObject>();
      JSONObject.valueToString(linkedList0);
      Long long2 = new Long(1532L);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(long2, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0865709195760305
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " of ";
      stringArray0[1] = "+";
      stringArray0[2] = "+";
      Byte.compare((byte)0, (byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put(" of ", (-4230.69));
      jSONObject0.put(",:]}/\"[{;=#", 2L);
      JSONObject jSONObject1 = jSONObject0.put(" of ", (Collection) null);
      String[] stringArray1 = new String[6];
      stringArray1[0] = " of ";
      stringArray1[2] = ",:]}/\"[{;=#";
      stringArray1[3] = "+";
      stringArray1[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray1);
      jSONObject1.optJSONArray((String) null);
      jSONObject2.toJSONArray((JSONArray) null);
      jSONObject1.toString(0, (-114));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Byte.toUnsignedLong((byte)8);
      jSONObject2.append("Mhi>3d#gk>D\"OaQh9", jSONArray0);
      jSONObject0.put(" of ", true);
      jSONObject0.optJSONObject(",:]}/\"[{;=#");
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1110942732940394
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double(629.589280205469);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " 1|@#Z;3&";
      stringArray0[1] = " 1|@#Z;3&";
      stringArray0[2] = " 1|@#Z;3&";
      stringArray0[3] = " 1|@#Z;3&";
      stringArray0[4] = " 1|@#Z;3&";
      stringArray0[5] = " 1|@#Z;3&";
      stringArray0[6] = " 1|@#Z;3&";
      JSONObject jSONObject0 = new JSONObject(" 1|@#Z;3&", stringArray0);
      jSONObject0.append(" 1|@#Z;3&", " 1|@#Z;3&");
      try { 
        jSONObject0.getLong(" 1|@#Z;3&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" 1|@#Z;3&\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9983916035564593
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(629.589280205469);
      Double.isFinite(0.0);
      jSONObject0.append(" s not  J0SONArra.", double0);
      Double.min(629.589280205469, 629.589280205469);
      Boolean boolean0 = new Boolean(" s not  J0SONArra.");
      Boolean boolean1 = new Boolean(true);
      Boolean.logicalAnd(true, (boolean) boolean0);
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(2203);
      Long.sum((-5828L), (-5828L));
      jSONObject0.accumulate(" s not  J0SONArra.", long0);
      Double double1 = new Double(629.589280205469);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      linkedList0.add(long0);
      linkedList1.pollLast();
      Long long1 = linkedList0.poll();
      assertEquals(2203L, (long)long1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.844847793696311
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = " of ";
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[7];
      stringArray0[1] = " Yb]o0vq";
      JSONObject jSONObject0 = new JSONObject(" of ", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put(" of ", 0L);
      JSONObject jSONObject2 = jSONObject1.put("2", (Collection) null);
      jSONObject2.optDouble("2", 0.0);
      jSONObject2.toString((int) (byte)0);
      jSONObject1.getLong(" of ");
      try { 
        jSONObject0.getJSONArray("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1821355215804705
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[7];
      stringArray0[1] = " Yb]o0vq";
      JSONObject jSONObject0 = new JSONObject(" of ", stringArray0);
      jSONObject0.put(" of ", 0L);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<String, JSONObject> hashMap1 = new HashMap<String, JSONObject>();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.3874400982031276
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " of ";
      stringArray0[1] = "JSONObject[";
      stringArray0[2] = "1.'=f";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put(" of ", (-4230.69));
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 2L);
      JSONObject jSONObject3 = jSONObject2.accumulate("/VeBY)_S1nSvRf", jSONObject1);
      JSONObject jSONObject4 = jSONObject0.put("/VeBY)_S1nSvRf", (Collection) null);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "/VeBY)_S1nSvRf";
      stringArray1[1] = "JSONObject[";
      stringArray1[2] = ",:]}/\"[{;=#";
      stringArray1[3] = "JSONObject[";
      stringArray1[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject5 = new JSONObject(jSONObject4, stringArray1);
      jSONObject4.optJSONArray((String) null);
      jSONObject5.toJSONArray((JSONArray) null);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.optInt((-114), (int) (byte)0);
      jSONObject4.optDouble(" of ");
      jSONObject5.append("Mhi>3d#gk>D\"OaQh9", jSONArray0);
      assertEquals(3, jSONObject5.length());
      
      jSONObject4.getLong(",:]}/\"[{;=#");
      jSONObject4.optString("a{2=5!");
      long long0 = jSONObject3.optLong(",:]}/\"[{;=#");
      assertEquals(2L, long0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9913740596968106
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",)j0HR7<j;<NwU}Y";
      JSONObject jSONObject1 = jSONObject0.put(",)j0HR7<j;<NwU}Y", (-2158.783045984));
      Byte byte0 = new Byte((byte)14);
      try { 
        jSONObject1.append(",)j0HR7<j;<NwU}Y", byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[,)j0HR7<j;<NwU}Y] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.895270074027822
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a JSONArray.";
      double double0 = 629.589280205469;
      Double double1 = new Double(629.589280205469);
      jSONObject0.append("] is not a JSONArray.", double1);
      try { 
        jSONObject0.getDouble("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.075098942074252
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "tJ=%";
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Object) "tJ=%");
      String string0 = "d!?e";
      jSONObject0.optJSONArray("tJ=%");
      jSONObject0.toString((-114), 3665);
      String string1 = "Mhi>3d#gk>D\"\\OaQh9";
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.getJSONArray((-114));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-114] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.760750468781551
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Byte> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Long> function0 = (Function<Object, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Short, ? extends Long>) function0);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator1.apply((Byte) null);
      Function<Float, Long> function1 = (Function<Float, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Float, ? extends Long>) function1);
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Long long0 = new Long(797L);
      linkedList0.add(long0);
      Long long1 = new Long(797L);
      LinkedList<Long> linkedList1 = new LinkedList<Long>(linkedList0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Long> unaryOperator2 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator0);
      Long.valueOf(1485L);
      Long.sum(0L, 0L);
      linkedList0.add((Long) null);
      Long long2 = new Long(0L);
      unaryOperator2.apply(long2);
      JSONObject.quote("");
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      linkedList1.replaceAll(unaryOperator2);
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      linkedList3.poll();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|8\"LDVK!{O 1s.4n:z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |8\"LDVK!{O 1s.4n:z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0474649167445413
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Object) "t*J`%");
      jSONObject1.putOpt(stringArray0[0], ";IG /TWLlQ~)b9");
      Long long0 = new Long(0L);
      jSONObject1.putOpt("$3A#7/i`pQ*=5GTn", (Object) null);
      jSONObject1.optJSONArray("tP+x4(:BU`xFF#2QG");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.353363451324745
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(2952L);
      Long.parseUnsignedLong("toS", 34);
      linkedList0.add(long0);
      linkedList0.add(long0);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalAnd(true, true);
      Long long1 = new Long(34368L);
      Long.sum((-306L), (-306L));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "toS";
      stringArray0[1] = "toS";
      stringArray0[2] = "toS";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.accumulate("toS", (Object) null);
      Double double0 = new Double(Double.NaN);
      Integer integer0 = new Integer(34);
      StringWriter stringWriter0 = new StringWriter(8192);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append('_');
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.4000518146316923
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clone();
      Double double0 = new Double(526.8);
      Double double1 = new Double(0.0);
      JSONObject.valueToString(double1, (-2042), (-2042));
      HashMap<JSONArray, Double> hashMap1 = new HashMap<JSONArray, Double>();
      JSONArray jSONArray0 = new JSONArray();
      Double double2 = new Double((-1.0));
      hashMap1.put(jSONArray0, double2);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalAnd(true, true);
      Long long0 = new Long(2577L);
      Byte byte0 = new Byte((byte)34);
      hashMap0.put(byte0, jSONArray0);
      Long long1 = new Long((-2125L));
      JSONObject jSONObject1 = new JSONObject(long1);
      JSONObject jSONObject2 = jSONObject0.accumulate("[]", jSONArray0);
      Double double3 = new Double(0.0);
      Integer integer0 = new Integer(2877);
      StringWriter stringWriter0 = new StringWriter(78);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append(':');
      Boolean boolean1 = Boolean.FALSE;
      JSONObject jSONObject3 = jSONObject2.put("RnjQ$382PQ+@", 1L);
      assertFalse(jSONObject3.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7519596907867663
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("6Eh)k,Xh");
      Long long0 = new Long((-2675L));
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<String, JSONObject> hashMap2 = new HashMap<String, JSONObject>();
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('s');
      stringWriter0.append('A');
      stringWriter1.append('s');
      Boolean boolean1 = new Boolean("getget");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double double0 = new Double(629.589280205469);
      String[] stringArray0 = new String[8];
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 1727, (-3592));
      JSONTokener jSONTokener0 = new JSONTokener("getintValue");
      jSONTokener0.skipTo('@');
      jSONTokener0.next(10);
      try { 
        jSONTokener0.next('*');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected '*' and instead saw 'e' at character 11 of getintValue
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double double0 = new Double((-237.88));
      Float float0 = new Float((-3437.7185F));
      Long long0 = new Long(60L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "i|eK)W[lO/GuM59h`L";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      String string0 = null;
      String string1 = "U!";
      try { 
        jSONObject0.append((String) null, "U!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.333977530670919
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Byte.compare((byte)0, (byte)0);
      Object object0 = new Object();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "+";
      stringArray1[1] = "';IG /TWLQP~))b9";
      stringArray1[2] = "+";
      stringArray0[0] = "';IG /TWLQP~))b9";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray1);
      jSONObject0.put("+", 2352.8410218335);
      jSONObject0.put("4", (-3804L));
      jSONObject0.optInt("4");
      Object object1 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)69);
      Byte.toUnsignedLong((byte)0);
      JSONObject jSONObject1 = new JSONObject(byte0, stringArray0);
      try { 
        jSONObject0.getDouble("';IG /TWLQP~))b9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"';IG /TWLQP~))b9\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3336610304416983
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double double0 = new Double(629.589280205469);
      String[] stringArray0 = new String[8];
      stringArray0[0] = " 1|@#Z;3&";
      stringArray0[1] = " 1|@#Z;3&";
      stringArray0[2] = " 1|@#Z;3&";
      stringArray0[3] = " 1|@#Z;3&";
      stringArray0[4] = " 1|@#Z;3&";
      stringArray0[5] = " 1|@#Z;3&";
      stringArray0[6] = " 1|@#Z;3&";
      stringArray0[7] = " 1|@#Z;3&";
      JSONObject jSONObject0 = new JSONObject(" 1|@#Z;3&", stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(" 1|@#Z;3&", " 1|@#Z;3&");
      jSONObject0.optBoolean("wai", false);
      try { 
        jSONObject1.getInt(" 1|@#Z;3&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" 1|@#Z;3&\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1171019303194956
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = "";
      jSONObject0.put("", 0L);
      String string1 = null;
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      try { 
        jSONObject0.put((String) null, (-1575L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.712977619065046
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[7];
      stringArray0[1] = " Yb]o0vq";
      stringArray0[2] = " of ";
      stringArray0[3] = " of ";
      stringArray0[4] = " Yb]o0vq";
      stringArray0[5] = " of ";
      stringArray0[6] = "+";
      JSONObject jSONObject0 = new JSONObject("+", stringArray0);
      jSONObject0.put("getlength", 0L);
      JSONObject jSONObject1 = jSONObject0.put("+", (Collection) null);
      jSONObject1.toString(14);
      jSONObject0.getJSONArray("+");
      StringWriter stringWriter0 = new StringWriter((byte)0);
      StringWriter stringWriter1 = stringWriter0.append('L');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "{\n              \"java.lang.String@0000000005\": [],\n              \"java.lang.String@0000000002\": java.lang.Long@0000000003\n}", 0, 0);
      stringWriter2.append('I');
      stringWriter2.close();
      stringWriter2.append('I');
      stringWriter2.append(' ');
      stringWriter2.append('C');
      Boolean boolean0 = new Boolean(" Yb]o0vq");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(3757);
      Long long0 = new Long(3757);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3985035229479377
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject1);
      byte byte0 = (byte)25;
      Byte byte1 = new Byte((byte)25);
      JSONObject jSONObject2 = new JSONObject(byte1);
      jSONObject0.names();
      jSONObject2.optBoolean("");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject3 = jSONObject0.putOpt("", jSONObject1);
      jSONObject3.optLong("");
      jSONObject0.opt("");
      Integer integer0 = new Integer((byte)25);
      JSONObject.valueToString(integer0);
      Float.max((byte)25, (-2117.0771F));
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("java.lang.Integer@0000000011");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of java.lang.Integer@0000000011
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Boolean boolean0 = new Boolean("");
      Boolean boolean1 = new Boolean("");
      Long long0 = new Long(0L);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      LinkedList<Long> linkedList2 = new LinkedList<Long>(linkedList1);
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      linkedList3.retainAll(linkedList0);
      linkedList1.stream();
      Long long1 = new Long(0L);
      linkedList1.add(long1);
      JSONObject.quote(",\n");
      Long long2 = new Long(0L);
      linkedList1.add(long2);
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      LinkedList<Long> linkedList5 = new LinkedList<Long>();
      LinkedList<Long> linkedList6 = new LinkedList<Long>();
      LinkedList<Long> linkedList7 = new LinkedList<Long>();
      LinkedList<Long> linkedList8 = new LinkedList<Long>();
      // Undeclared exception!
      try { 
        linkedList8.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.3515081375140006
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double double0 = new Double((-174.35360943868));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i|eK)W[lO/GuM59h`L";
      stringArray0[1] = "[";
      stringArray0[2] = "i|eK)W[lO/GuM59h`L";
      Float float0 = new Float(4.308943F);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("i|eK)W[lO/GuM59h`L", "[");
      jSONObject1.optLong("i|eK)W[lO/GuM59h`L");
      jSONObject1.put("su", (-36));
      try { 
        jSONObject0.getInt("i|eK)W[lO/GuM59h`L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"i|eK)W[lO/GuM59h`L\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[3] = "\fU*8,])E*{ 8%JIF";
      stringArray0[1] = "[";
      String string0 = "";
      stringArray0[3] = "\fU*8,])E*{ 8%JIF";
      stringArray0[4] = "\fU*8,])E*{ 8%JIF";
      stringArray0[5] = "1";
      Double double0 = new Double(Double.NaN);
      stringArray0[6] = "Sq_[mr*xju";
      UnaryOperator.identity();
      Long long0 = new Long((-112L));
      UnaryOperator.identity();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long1 = new Long(1L);
      linkedList0.add(long1);
      Long long2 = new Long((-112L));
      linkedList0.add(long2);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      int int0 = (-1595);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1595));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "t*J`%";
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(0L);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      long long1 = 2055L;
      Long long2 = new Long(2055L);
      Long long3 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter(1242);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      linkedList0.addAll((Collection<? extends Long>) linkedList1);
      Integer.remainderUnsigned(42, 60);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      LinkedList<Short> linkedList4 = new LinkedList<Short>();
      // Undeclared exception!
      try { 
        linkedList0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.7302674738391595
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = "tJ=%";
      stringArray0[0] = "tJ=%";
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Object) "tJ=%");
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.optJSONArray((String) null);
      // Undeclared exception!
      jSONObject1.toString(3153, 3153);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.867144791128431
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " of ";
      stringArray0[1] = "+";
      stringArray0[2] = "+";
      Byte.compare((byte)0, (byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte.toUnsignedLong((byte)83);
      jSONObject0.put(" of ", (-4230.69));
      String string0 = ",:]}/\\\"[{;=#";
      jSONObject0.put(",:]}/\"[{;=#", 2L);
      JSONObject jSONObject1 = jSONObject0.put(" of ", (Collection) null);
      String[] stringArray1 = new String[6];
      stringArray1[0] = " of ";
      stringArray1[2] = ",:]}/\"[{;=#";
      stringArray1[3] = "+";
      stringArray1[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray1);
      jSONObject2.toString((int) (byte)83, 4);
      jSONObject1.optJSONArray((String) null);
      jSONObject1.toString(0, (-114));
      String string1 = "Mhi>3d#gk>D\"\\OaQh9";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "Mhi>3d#gk>D\"OaQh9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.4647554019721343
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer((-762));
      Long long0 = new Long((-762));
      Long.toUnsignedString(60L);
      JSONArray jSONArray0 = new JSONArray();
      Double.isFinite(60L);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      predicate3.or(predicate1);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate3.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate1);
      predicate5.negate();
      Predicate.isEqual((Object) predicate0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.removeIf(predicate4);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      linkedList1.containsAll(linkedList0);
      Integer integer1 = new Integer(65);
      JSONObject jSONObject0 = new JSONObject(integer1);
      linkedList1.poll();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.4218597613339448
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " of ";
      stringArray0[1] = "+";
      stringArray0[2] = " Y]b]o0vq";
      Byte.compare((byte)0, (byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put(" of ", (-4230.69));
      jSONObject0.put(",:]}/\"[{;=#", 0L);
      jSONObject0.put("/VeBY)_S1nSvRf", (Collection) null);
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(" Y]b]o0vq");
      Float float0 = new Float((-997.37801));
      jSONObject1.append("/VeBY)_S1nSvRf", (Object) null);
      jSONObject0.putOpt("Expected a ',' or '}'", float0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ",:]}/\"[{;=#");
      stringWriter0.append('=');
      stringWriter0.close();
      StringWriter stringWriter2 = stringWriter1.append('Y');
      stringWriter0.append('Y');
      stringWriter2.append('X');
      Boolean boolean0 = new Boolean("6");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8561805146670056
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      UnaryOperator.identity();
      Long long0 = new Long(3757);
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Double> function0 = (Function<Object, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Long, ? extends Double>) function0);
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Long, ? extends Integer>) function1);
      unaryOperator0.apply((Long) null);
      Function.identity();
      Byte byte0 = new Byte((byte) (-62));
      UnaryOperator<Byte> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Byte byte1 = new Byte((byte) (-62));
      Byte.toUnsignedInt((byte) (-96));
      Byte.toUnsignedInt((byte)7);
      Byte.compare((byte)7, (byte)46);
      Byte.toUnsignedLong((byte)61);
      Byte.toUnsignedInt((byte)61);
      unaryOperator1.apply(byte1);
      Integer integer0 = new Integer((byte) (-84));
      Integer.getInteger("");
      Boolean boolean0 = new Boolean("RU");
      JSONObject.doubleToString(3757);
      Float float0 = new Float(3346.74784497725);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.937901458869565
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Byte> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Byte> function0 = (Function<Object, Byte>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      Function<Object, Byte> function1 = unaryOperator1.compose((Function<? super Object, ? extends Byte>) function0);
      unaryOperator0.andThen((Function<? super Long, ?>) function1);
      Function.identity();
      UnaryOperator.identity();
      Long long0 = new Long(0L);
      unaryOperator0.apply(long0);
      Function.identity();
      linkedList0.replaceAll(unaryOperator0);
      Long long1 = new Long(2952L);
      Long.toUnsignedString(2859L);
      Long.compare(2952L, 2952L);
      Float float0 = new Float((double) 34);
      Float.min((-621.7872F), 1754.9163F);
      Float.min(1754.9163F, 1L);
      Float.isFinite((-621.7872F));
      Float.isFinite(1L);
      Float.isFinite(34);
      JSONObject.numberToString(float0);
      JSONObject jSONObject0 = new JSONObject(function1);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "';IG /TWLQP~))b9";
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4734737883576816
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Double double0 = new Double((-174.35360943868));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i|eK)W[lO/GuM59h`L";
      stringArray0[1] = "[";
      stringArray0[2] = "XOt6,P0#EU";
      stringArray0[3] = "";
      Double.isFinite(0.0);
      stringArray0[4] = "i|eK)W[lO/GuM59h`L";
      stringArray0[5] = "i|eK)W[lO/GuM59h`L";
      stringArray0[6] = "_^(}[CN'G_Z";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("[", 1992L);
      jSONObject0.optBoolean("_^(}[CN'G_Z", true);
      jSONObject0.optDouble("[", (-174.35360943868));
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      Integer integer0 = Integer.valueOf(2263);
      jSONObject0.put("[", (Object) integer0);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(2263);
      Integer.getInteger("", 673);
      JSONObject jSONObject3 = new JSONObject(integer2, stringArray0);
      assertFalse(jSONObject3.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.5634601642639048
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " of ";
      stringArray0[1] = "+";
      stringArray0[2] = " Yb]o0vq";
      Byte.compare((byte)0, (byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put(" of ", (-4230.69));
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 0L);
      jSONObject0.put("/VVBY)_S1nSvRf", (Collection) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('\'');
      String[] stringArray1 = new String[6];
      stringArray1[0] = "/VVBY)_S1nSvRf";
      stringArray1[1] = "+";
      stringArray1[2] = ",:]}/\"[{;=#";
      Float.max((-585.5731F), (-585.5731F));
      jSONObject1.optInt("\"\"", 0);
      boolean boolean0 = jSONObject2.isNull(",\n");
      assertEquals(3, jSONObject2.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(2952L);
      String string0 = "toS";
      int int0 = 34;
      Long.parseUnsignedLong("toS", 34);
      linkedList0.add(long0);
      linkedList0.add(long0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long1 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      linkedList0.add(long1);
      try { 
        jSONObject0.put(",\n", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.1903837269747264
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) "");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Boolean boolean0 = new Boolean("");
      predicate0.and(predicate0);
      Double double0 = new Double(0.0);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      Long long0 = new Long(15L);
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      Long long1 = new Long(0L);
      LinkedList<Long> linkedList4 = new LinkedList<Long>(linkedList0);
      linkedList2.retainAll(linkedList4);
      linkedList3.offerLast(long1);
      linkedList2.listIterator();
      Long.valueOf(779L);
      linkedList3.add(long1);
      Object[] objectArray0 = new Object[0];
      linkedList3.toArray(objectArray0);
      JSONObject.quote("");
      Long.valueOf(15L);
      linkedList3.add((Long) null);
      LinkedList<Long> linkedList5 = new LinkedList<Long>();
      LinkedList<Long> linkedList6 = new LinkedList<Long>();
      LinkedList<Long> linkedList7 = new LinkedList<Long>();
      LinkedList<Long> linkedList8 = new LinkedList<Long>();
      linkedList8.poll();
      Short short0 = new Short((short)439);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.toString((-818), (-818));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.074771057671452
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(0.0);
      hashMap0.put(jSONArray0, double0);
      Double.max(526.8, (-811.0969));
      JSONObject.valueToString(hashMap0, (-1995), (-1995));
      JSONTokener jSONTokener0 = new JSONTokener(",\n");
      JSONTokener jSONTokener1 = new JSONTokener("rot");
      JSONTokener jSONTokener2 = new JSONTokener("] is not a number.");
      JSONTokener jSONTokener3 = new JSONTokener(",\n");
      jSONTokener2.back();
      try { 
        jSONTokener2.nextString('h');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 18 of ] is not a number.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.9183101504445133
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Byte.compare((byte)0, (byte)0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      
      Float float0 = new Float((float) 0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.964429655667706
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = new Double((-174.35360943868));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i|eK)W[lO/GuM59h`L";
      stringArray0[1] = "[";
      stringArray0[0] = "XOt6,P0#EU";
      stringArray0[3] = "[";
      Double.isFinite(0.0);
      stringArray0[4] = "";
      stringArray0[5] = "'";
      stringArray0[5] = "_^(}[CN'G_Z";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.optBoolean("_^(}[CN'G_Z", true);
      jSONObject0.optDouble("[", (-174.35360943868));
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("", (-368));
      JSONObject.quote("xDkn");
      jSONObject1.optString("d", "");
      jSONObject0.opt("F");
      jSONObject0.names();
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("_^(}[CN'G_Z", (Collection) linkedList0);
      try { 
        jSONObject2.getInt("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethashCode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.320051914151843
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(629.589280205469);
      Double.isFinite(0.0);
      JSONObject jSONObject1 = new JSONObject();
      double double1 = new Double(629.589280205469);
      Boolean boolean0 = new Boolean(" s not  J0SONArra.");
      Boolean boolean1 = new Boolean(true);
      Boolean.logicalAnd(true, (boolean) boolean0);
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(2203);
      Long.sum((-5828L), (-5828L));
      jSONObject0.accumulate(" s not  J0SONArra.", long0);
      assertEquals(1, jSONObject0.length());
      
      Double double2 = new Double(629.589280205469);
      Integer integer0 = new Integer(4);
      StringWriter stringWriter0 = new StringWriter(4);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append(':');
      Boolean boolean2 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(jSONObject1, 777, 777);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.9096168508714184
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " of ";
      String string0 = "+";
      stringArray0[1] = "+";
      stringArray0[2] = "1.'=f";
      Byte.compare((byte)0, (byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put(" of ", (-4230.69));
      jSONObject0.put(",:]}/\"[{;=#", 2L);
      Boolean.logicalAnd(false, false);
      Long long0 = new Long(0);
      JSONObject jSONObject1 = jSONObject0.putOpt("+", long0);
      jSONObject1.optBoolean("7y5gCSHoBP");
      JSONObject.valueToString(jSONObject0, (byte)0, (byte)16);
      try { 
        jSONObject0.getJSONObject("+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.0879887791939837
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Boolean boolean0 = new Boolean("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Double double0 = new Double(0.0);
      Double.min(0.0, 0.0);
      predicate0.negate();
      Double.isFinite(0.0);
      predicate0.test("");
      Predicate.isEqual((Object) double0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.test(double0);
      predicate1.test(double0);
      predicate3.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      predicate4.negate();
      Predicate.isEqual((Object) linkedList1);
      Boolean boolean1 = new Boolean("");
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put(",\n", (Map) hashMap0);
      Boolean boolean2 = new Boolean("");
      linkedList0.poll();
      jSONObject0.put("", (Object) predicate0);
      try { 
        jSONObject0.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = new Integer((-762));
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";IG /TWLlQ~)b9";
      Long long0 = new Long(0L);
      Integer integer1 = new Integer((-1409));
      Integer.toUnsignedString((-2948));
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(106);
      stringWriter0.append('N');
      Boolean boolean0 = Boolean.FALSE;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.3277258516827546
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long0 = new Long(4115L);
      Double double0 = new Double((byte)16);
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      Double.max((-1.0), (-1296.1286));
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.accumulate("jTZmr|!'<N3", jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "jTZmr|!'<N3");
      stringWriter0.append('a');
      stringWriter1.append('1');
      StringWriter stringWriter2 = stringWriter0.append('=');
      jSONObject1.write(stringWriter2);
      try { 
        jSONObject0.getJSONObject(")`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")`\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.206384246669422
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Boolean boolean0 = new Boolean("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      predicate0.and(predicate0);
      Double double0 = new Double(0.0);
      Predicate<Object> predicate1 = predicate0.negate();
      Boolean boolean1 = new Boolean("");
      Long long0 = new Long(0L);
      Byte byte0 = new Byte((byte)19);
      Double double1 = new Double(0.0);
      predicate1.test(double1);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = new JSONObject(predicate1);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1432136814444385
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[11];
      stringArray0[0] = "ishashCode";
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.poll();
      JSONObject.getNames((Object) linkedList0);
      Long long0 = new Long(1532L);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap1.put("ishashCode", "ishashCode");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.put("ishashCode", 0L);
      boolean boolean1 = true;
      Boolean.valueOf(true);
      Integer integer0 = new Integer(43);
      hashMap0.put(integer0, boolean0);
      Boolean boolean2 = Boolean.TRUE;
      Boolean boolean3 = Boolean.valueOf("ishashCode");
      hashMap0.put(integer0, boolean3);
      String string0 = "[";
      Boolean boolean4 = new Boolean("[");
      HashMap<Boolean, Double> hashMap2 = new HashMap<Boolean, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.1414230772504546
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "gettoLowerCase";
      stringArray0[0] = "gettoLowerCase";
      Integer.toUnsignedLong((-762));
      JSONObject.doubleToString(4294966534L);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-762));
      Double double0 = new Double((-38.90589192903651));
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      Long.max((-762), (-762));
      Double.max((-1296.1286), 0.0);
      Float float0 = new Float(0.0);
      Long.remainderUnsigned((-1L), (-1L));
      short short0 = (short)8473;
      JSONObject.valueToString("4.294966534E9");
      Short short1 = new Short((short)8473);
      linkedList0.add(long0);
      jSONObject0.put("gettoLowerCase", 0.0);
      char char0 = '\u008F';
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-762));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.9264679661295228
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer((-2093047));
      Integer integer1 = new Integer((-1409));
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      Long long0 = new Long(0L);
      linkedList1.add(long0);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      Long long1 = new Long((-1740L));
      linkedList2.add(long1);
      Long long2 = new Long(0L);
      LinkedList<Long> linkedList3 = new LinkedList<Long>(linkedList2);
      linkedList3.replaceAll(unaryOperator0);
      Long long3 = Long.valueOf(0L);
      linkedList3.add(long3);
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      LinkedList<Long> linkedList5 = new LinkedList<Long>();
      LinkedList<Long> linkedList6 = new LinkedList<Long>();
      linkedList1.poll();
      JSONObject jSONObject0 = new JSONObject(long2);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("QBj;lDcWcL-;/]z`", (Object) null);
      jSONObject1.optJSONObject("QBj;lDcWcL-;/]z`");
      Long.sum(0L, 267L);
      JSONTokener jSONTokener0 = new JSONTokener("AKN< #");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of AKN< #
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      UnaryOperator.identity();
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Byte> function0 = (Function<Object, Byte>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.apply((Byte) null);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ? extends Byte>) function0);
      Double.isFinite((-2030.940616));
      Float float0 = new Float(0.0);
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "is";
      JSONObject jSONObject1 = jSONObject0.putOpt("is", (Object) null);
      try { 
        jSONObject1.getJSONObject("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.4627938397065794
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " of ";
      stringArray0[1] = "+";
      stringArray0[2] = "1.'=f";
      Byte.compare((byte)0, (byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put(" of ", (-4230.69));
      jSONObject0.put(",:]}/\"[{;=#", 2L);
      JSONObject jSONObject1 = jSONObject0.put("/VeBY)_S1nSvRf", (Collection) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('u');
      String[] stringArray1 = new String[6];
      stringArray1[0] = "/VeBY)_S1nSvRf";
      stringArray1[1] = "+";
      stringArray1[2] = ",:]}/\"[{;=#";
      stringArray1[3] = "+";
      stringWriter0.append('z');
      stringArray1[4] = ",:]}/\"[{;=#";
      stringArray1[5] = "flo";
      jSONObject1.optInt("+", (int) (byte)16);
      boolean boolean0 = jSONObject1.isNull("1.'=f");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(20L);
      linkedList0.add(long0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Long long1 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Double double0 = new Double(20L);
      Double.isFinite(0.0);
      Byte byte0 = new Byte((byte)0);
      Predicate.isEqual((Object) byte0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate2.or(predicate4);
      Predicate<Object> predicate5 = predicate2.negate();
      linkedList1.add((Object) null);
      predicate5.negate();
      Float float0 = new Float(399.0F);
      Predicate.isEqual((Object) "getcompare");
      linkedList1.removeIf(predicate4);
      linkedList0.containsAll(linkedList1);
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("i\"iqw|[[|ghwf&\u0007uCE");
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("isequals");
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.55425309083331
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("] is not a JSONArray.");
      Double double0 = new Double(629.589280205469);
      JSONObject jSONObject1 = jSONObject0.append(" 1|@#Z;3&", double0);
      Double.min(629.589280205469, 629.589280205469);
      Double.isFinite((-2030.940616));
      JSONObject.quote(" 1|@#Z;3&");
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      hashMap0.values();
      jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("x2Iiy+K|nli.", (Map) hashMap0);
      jSONObject2.optDouble(" 1|@#Z;3&");
      jSONObject2.optString("", "null");
      jSONObject2.has("x2Iiy+K|nli.");
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.376982729226695
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Double double0 = new Double(629.589280205469);
      String[] stringArray0 = new String[8];
      stringArray0[0] = " 1|@#Z;3&";
      stringArray0[1] = " 1|@#Z;3&";
      stringArray0[2] = " 1|@#Z;3&";
      stringArray0[3] = " 1|@#Z;3&";
      stringArray0[5] = " 1|@#Z;3&";
      stringArray0[6] = " 1|@#Z;3&";
      stringArray0[7] = " 1|@#Z;3&";
      JSONObject jSONObject0 = new JSONObject(" 1|@#Z;3&", stringArray0);
      jSONObject0.optDouble("true", 629.589280205469);
      JSONObject jSONObject1 = jSONObject0.append(" 1|@#Z;3&", " 1|@#Z;3&");
      jSONObject1.optString(" 1|@#Z;3&");
      try { 
        jSONObject1.getInt(" 1|@#Z;3&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" 1|@#Z;3&\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Long.compare(3110L, 3110L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      String string0 = jSONObject0.optString((String) null, "$.PG)!|=h");
      assertEquals("$.PG)!|=h", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.667688703959922
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[7];
      Double.isFinite(0.0);
      Integer integer0 = new Integer(8);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.optBoolean("-`?tN(`yJ(", true);
      Integer.compareUnsigned(45, 774);
      jSONObject0.optDouble("Bad value from toJSONString: ", 0.0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer.valueOf((-677));
      Double double1 = new Double(396.3314868292);
      JSONObject jSONObject2 = jSONObject1.put("'", (Object) double1);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject3 = jSONObject1.put("", (Map) hashMap0);
      JSONObject jSONObject4 = new JSONObject(jSONObject2, stringArray0);
      jSONObject4.has("XOt6,P0#EU");
      try { 
        jSONObject3.getDouble("XOt6,P0#EU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"XOt6,P0#EU\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clone();
      long long0 = (-2399L);
      Long long1 = new Long((-2399L));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.close();
      stringWriter0.append((CharSequence) "\"\"");
      jSONObject0.optJSONObject("LE/(@aX");
      Long long2 = new Long((-2399L));
      long long3 = (-74L);
      Long long4 = new Long((-74L));
      LinkedList<Long> linkedList0 = null;
      try {
        linkedList0 = new LinkedList<Long>((Collection<? extends Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.628003745898036
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer integer0 = new Integer(19);
      String string0 = "";
      Boolean boolean0 = Boolean.valueOf("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "_^(}[CN'G_Z";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.optBoolean("", true);
      jSONObject0.optDouble("getwait", (double) 19);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer.valueOf(19);
      JSONObject jSONObject2 = jSONObject1.put("#687! *pn`*G", (Object) "_^(}[CN'G_Z");
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject3 = jSONObject2.put("_^(}[CN'G_Z", (Map) hashMap0);
      jSONObject2.has("#687! *pn`*G");
      try { 
        jSONObject3.getDouble(":].1Gnml_BI}.Ipz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":].1Gnml_BI}.Ipz\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.292066491137483
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      Boolean boolean0 = new Boolean(true);
      jSONObject0.optDouble("[", (double) (byte)16);
      Integer integer0 = Integer.valueOf((-2123));
      jSONObject0.put("i|eK)W[lO/GuM59h`L", (Object) "");
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer1 = new Integer((byte)16);
      hashMap0.put(integer0, boolean0);
      Boolean boolean1 = Boolean.TRUE;
      hashMap0.put(integer0, boolean0);
      Boolean boolean2 = new Boolean("_^(}[CN'G_Z");
      Double.sum(2, (-2312.0));
      jSONObject0.optLong("for");
      Boolean boolean3 = new Boolean(true);
      try { 
        jSONObject0.getDouble("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.599187091895453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float float0 = new Float(1.0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Qc";
      stringArray0[1] = "";
      stringArray0[2] = "YNlO";
      stringArray0[3] = "H";
      Float.min(0.0F, 0.0F);
      stringArray0[4] = "";
      stringArray0[5] = "' and instead saw '";
      Float.sum(997.81F, 0.0F);
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("!vO'l|l;e]", "' and instead saw '");
      jSONObject0.opt("' and instead saw '");
      JSONObject.valueToString("");
      jSONObject1.optInt("2)C6g4>nLl|NP>-I(u", 91);
      boolean boolean0 = jSONObject0.isNull("' and instead saw '");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.593112323987083
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float(1.0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Qc";
      stringArray0[1] = "";
      stringArray0[2] = "YNlO";
      stringArray0[3] = "H";
      Float.min(0.0F, 0.0F);
      stringArray0[4] = "";
      String string0 = "' and instead saw '";
      Float.sum(997.81F, 0.0F);
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.put("9,/$tw8y", (double) 0.0F);
      jSONObject0.putOpt("!vO'l|l;e]", "' and instead saw '");
      jSONObject0.opt(stringArray0[5]);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.2182667720394535
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = (byte)16;
      Byte byte1 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " of ";
      stringArray0[0] = "+";
      stringArray0[2] = " Yb]o0vq";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("+", (-4230.69));
      jSONObject0.put(",:]}/\"[{;=#", 0L);
      jSONObject1.optLong("C~ES/Y'Wg9>z", 0L);
      jSONObject0.put("/VeBY)_S1nSvRf", (Collection) null);
      char char0 = 'G';
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(21);
      stringWriter0.close();
      char char1 = 'r';
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) ",:]}/\"[{;=#", 21, (int) (byte)16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.966301923688881
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[11];
      String string0 = "isNasSCo<e";
      JSONObject jSONObject0 = new JSONObject("isNasSCo<e", stringArray0);
      Byte byte0 = new Byte((byte) (-94));
      JSONObject jSONObject1 = jSONObject0.append("isNasSCo<e", byte0);
      Object object0 = JSONObject.NULL;
      jSONObject1.isNull("isNasSCo<e");
      StringWriter stringWriter0 = new StringWriter(789);
      String string1 = "Mr";
      JSONTokener jSONTokener0 = new JSONTokener("Mr");
      jSONObject1.optLong((String) null, (long) (byte) (-94));
      JSONTokener jSONTokener1 = new JSONTokener("b");
      char char0 = '^';
      String string2 = "]O|6282uu>l";
      JSONTokener jSONTokener2 = new JSONTokener((String) null);
      jSONTokener2.back();
      try { 
        jSONObject1.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";IG /WBl/~)b9";
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      Long.toUnsignedString(0L);
      Long.compare(312L, 0L);
      Float float0 = new Float((double) 1);
      Long long2 = new Long((-3912L));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>(linkedList0);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      linkedList0.retainAll(linkedList1);
      linkedList2.listIterator();
      Long.valueOf(2952L);
      Long long3 = new Long(0L);
      linkedList0.add((Long) null);
      linkedList2.add((Long) null);
      JSONObject.quote(";IG /WBl/~)b9");
      Long long4 = new Long(2952L);
      linkedList2.add(long2);
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      LinkedList<Long> linkedList5 = new LinkedList<Long>();
      // Undeclared exception!
      try { 
        linkedList4.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Long long0 = new Long(20L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Long long1 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) long1);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) long1);
      Predicate<Object> predicate4 = predicate2.negate();
      predicate0.or(predicate4);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate6 = predicate5.negate();
      Double double0 = new Double(0L);
      predicate6.and(predicate3);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      predicate5.and(predicate7);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate8.negate();
      predicate9.negate();
      predicate0.negate();
      Predicate.isEqual((Object) predicate8);
      Boolean boolean0 = new Boolean("islogicalOr");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.8818656894704597
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = new Double(629.589280205469);
      String[] stringArray0 = new String[8];
      stringArray0[0] = " 1|@#Z;3&";
      stringArray0[1] = " 1|@#Z;3&";
      stringArray0[2] = " 1|@#Z;3&";
      stringArray0[3] = " 1|@#Z;3&";
      stringArray0[4] = " 1|@#Z;3&";
      stringArray0[5] = " 1|@#Z;3&";
      stringArray0[6] = " 1|@#Z;3&";
      stringArray0[7] = " 1|@#Z;3&";
      JSONObject jSONObject0 = new JSONObject(" 1|@#Z;3&", stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(" 1|@#Z;3&", " 1|@#Z;3&");
      Object object0 = JSONObject.NULL;
      jSONObject1.isNull(" 1|@#Z;3&");
      jSONObject1.get(" 1|@#Z;3&");
      JSONObject.valueToString(object0, 1727, (-3592));
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.toString();
      try { 
        jSONObject2.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Boolean boolean0 = new Boolean("!/|!Pd/L0|a-: o");
      Boolean.compare(false, false);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.5952629603288848
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) "");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Double double0 = new Double(0.0);
      Double.sum(0.0, 0.0);
      Double.isFinite(0.0);
      Predicate.isEqual((Object) double0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.negate();
      Predicate.isEqual((Object) linkedList1);
      linkedList1.removeIf(predicate3);
      linkedList0.containsAll(linkedList1);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      linkedList0.poll();
      jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.9440906203747668
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(629.589280205469);
      Double.isFinite(629.589280205469);
      jSONObject0.append("] is not a JS~NArray.", double0);
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Long, ? extends Integer>) function0);
      Long long0 = new Long((-1L));
      unaryOperator0.apply(long0);
      Function.identity();
      Byte byte0 = new Byte((byte)94);
      UnaryOperator<Byte> unaryOperator1 = UnaryOperator.identity();
      Function<Double, Double> function1 = Function.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super Double, ? extends Integer>) function2);
      Byte byte1 = new Byte((byte)61);
      Byte.toUnsignedInt((byte)78);
      Byte byte2 = new Byte((byte)114);
      unaryOperator1.apply(byte2);
      Integer.toUnsignedString(4);
      Integer.toUnsignedString((int) (byte) (-105));
      Integer integer0 = new Integer(78);
      Integer.toUnsignedString(4124);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double.isFinite((-2030.940616));
      JSONTokener jSONTokener0 = new JSONTokener("~^");
      JSONTokener jSONTokener1 = new JSONTokener("toU");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "is";
      stringArray0[1] = "YwHn1;7|7SMY\"!axuR(";
      stringArray0[2] = "isvalueOf";
      stringArray0[3] = "null";
      stringArray0[4] = "Null key.";
      stringArray0[5] = ".";
      stringArray0[6] = "] is not a JSONObject.";
      stringArray0[7] = "getgetChars";
      stringArray0[8] = "Expected a ',' or '}'";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("false", (Object) null);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "getdecode";
      stringArray0[1] = "getdecode";
      stringArray0[2] = "getdecode";
      stringArray0[3] = "getdecode";
      stringArray0[4] = "getdecode";
      stringArray0[5] = "getdecode";
      stringArray0[6] = "getdecode";
      JSONObject jSONObject0 = new JSONObject("getdecode", stringArray0);
      jSONObject0.put("{}", (-2434));
      JSONTokener jSONTokener0 = new JSONTokener("getdecode");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getdecode
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.2768388196600005
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "tJ=%";
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Short short0 = new Short((short)48);
      JSONObject jSONObject2 = jSONObject1.putOpt("%fW#&", short0);
      Long long0 = new Long((short)48);
      jSONObject2.put("tJ=%", (Object) long0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject3 = jSONObject2.putOpt("%fW#&", float0);
      try { 
        jSONObject3.getBoolean("tJ=%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tJ=%\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.197164039060734
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(3471L);
      linkedList0.offer(long0);
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      linkedList0.replaceAll(unaryOperator0);
      Byte byte0 = new Byte((byte) (-8));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.names();
      String string0 = "000";
      try { 
        jSONObject0.getJSONObject("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"000\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.0474649167445413
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "tJ=%";
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Object) "tJ=%");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) hashMap1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate2);
      Predicate.isEqual((Object) predicate1);
      predicate5.and(predicate2);
      Predicate<Object> predicate6 = predicate3.or(predicate2);
      Predicate<Object> predicate7 = predicate0.or(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate9 = predicate1.or(predicate4);
      Predicate<Object> predicate10 = predicate8.and(predicate9);
      Predicate<Object> predicate11 = predicate10.or(predicate3);
      predicate0.or(predicate9);
      predicate6.negate();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      predicate3.negate();
      Float float0 = new Float((-1.0F));
      Predicate<Object> predicate12 = predicate6.and(predicate5);
      predicate12.or(predicate8);
      linkedList0.removeIf(predicate11);
      JSONObject jSONObject2 = new JSONObject();
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertEquals(3, jSONObject1.length());
      assertNotNull(stringArray1);
      assertEquals(3, stringArray1.length);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.545202527023502
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = new Integer((-762));
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";IG /TWLlQ~)b9";
      Long long0 = new Long((-762));
      StringWriter stringWriter0 = new StringWriter();
      Long long1 = new Long(0L);
      Integer integer1 = new Integer((-1409));
      Double double0 = new Double(0.0);
      Integer integer2 = new Integer(539);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.isNull("qu");
      try { 
        jSONObject0.getLong("sz_lL<zYZ'1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sz_lL<zYZ'1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.046212966853168
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Short short0 = new Short((short) (-1535));
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.compare((short) (-1535), (short)1);
      JSONObject.valueToString((Object) null);
      String string0 = ".A|s7@";
      try { 
        jSONObject0.getJSONArray("toN-@'2wz;#_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toN-@'2wz;#_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1T[";
      stringArray0[1] = "hzV4b'~6?y(";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = "J!PiXxv_^0";
      stringArray0[4] = "";
      stringArray0[5] = "] not found.";
      stringArray0[6] = "{wBVb)h7~qW5mL@";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      int int0 = jSONObject0.optInt("Bad value from toJSONString: ");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Long long0 = new Long(20L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Long long1 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) long1);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate6 = predicate5.negate();
      Double double0 = new Double(0L);
      Predicate<Object> predicate7 = predicate0.negate();
      Byte byte0 = new Byte((byte)34);
      Float float0 = new Float((double) (byte)34);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) float0);
      Predicate<Object> predicate9 = predicate6.and(predicate1);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate8.and(predicate10);
      Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate12 = predicate0.and(predicate1);
      Predicate<Object> predicate13 = predicate1.or(predicate12);
      predicate13.and(predicate11);
      predicate7.or(predicate13);
      Predicate<Object> predicate14 = predicate12.negate();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      predicate14.negate();
      Float float1 = new Float(0.0F);
      Predicate<Object> predicate15 = predicate0.or(predicate6);
      linkedList0.removeIf(predicate15);
      JSONObject jSONObject0 = new JSONObject();
      Long long2 = new Long(20L);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      linkedList2.poll();
      try { 
        jSONObject0.getInt("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.6457928323748754
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = null;
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "getintValue";
      stringArray0[1] = "FrMYlXaI7,eIg3-}#";
      stringArray0[2] = "com";
      stringArray0[3] = "4";
      stringArray0[4] = "}Kr$EM6Q0mc@Y,Id>o";
      stringArray0[5] = "in";
      stringArray0[6] = "b}H<m[_xl3W";
      stringArray0[7] = "F6ytI!z";
      stringArray0[8] = "A JSONArray text must start with '['";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.accumulate((String) null, "F6ytI!z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      UnaryOperator.identity();
      Long long0 = new Long(3757);
      UnaryOperator.identity();
      Function.identity();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0, 21, (-1995));
      JSONTokener jSONTokener0 = new JSONTokener(",\n");
      JSONTokener jSONTokener1 = new JSONTokener(",\n");
      String string0 = "neg";
      JSONTokener jSONTokener2 = new JSONTokener("neg");
      JSONTokener jSONTokener3 = new JSONTokener("yDljh");
      jSONTokener3.back();
      try { 
        jSONTokener1.nextString('h');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 2 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.4335434276587424
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Byte.compare((byte)0, (byte)0);
      JSONObject jSONObject0 = new JSONObject((Object) " Yb]o0vq");
      jSONObject0.toString(1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Long long0 = new Long(20L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Long long1 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate.isEqual((Object) long1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) long1);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.or(predicate3);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate5 = predicate4.negate();
      Double double0 = new Double(0L);
      predicate5.and(predicate2);
      Byte byte0 = new Byte((byte)34);
      predicate2.and(predicate5);
      Predicate.isEqual((Object) linkedList0);
      predicate4.negate();
      predicate1.or(predicate3);
      Float.min(1823.677F, (-1083.2F));
      Float.isFinite(0L);
      Float.max(1.0F, 1.0F);
      Float.max(1823.677F, (-1031.581F));
      Float.isFinite(1823.677F);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.262436762135496
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString(69);
      Long long0 = new Long(69);
      JSONTokener jSONTokener0 = new JSONTokener("ST4^M!aL");
      jSONTokener0.nextValue();
      Short short0 = new Short((short)108);
      StringWriter stringWriter0 = new StringWriter(69);
      stringWriter0.close();
      StringWriter stringWriter1 = new StringWriter(58);
      JSONTokener jSONTokener1 = new JSONTokener("R?PO");
      JSONTokener jSONTokener2 = new JSONTokener("gN}7t5oOtB[g");
      JSONTokener jSONTokener3 = new JSONTokener("getparseBoolean");
      try { 
        jSONTokener0.next('H');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'H' and instead saw 'L' at character 8 of ST4^M!aL
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.1663239518305772
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Byte> unaryOperator1 = UnaryOperator.identity();
      Function<Long, Byte> function0 = (Function<Long, Byte>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Long, ? extends Byte>) function0);
      Function<Object, Long> function1 = (Function<Object, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Short, ? extends Long>) function1);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator1.apply((Byte) null);
      Function<Float, Long> function2 = (Function<Float, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Float, ? extends Long>) function2);
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Long long0 = new Long(797L);
      linkedList0.add(long0);
      Long long1 = new Long(797L);
      LinkedList<Long> linkedList1 = new LinkedList<Long>(linkedList0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Long> unaryOperator2 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator0);
      Long.valueOf(1485L);
      Long.sum(0L, 0L);
      linkedList0.add((Long) null);
      JSONObject.quote("");
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      linkedList1.replaceAll(unaryOperator2);
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      Long long2 = new Long(1485L);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONTokener jSONTokener0 = new JSONTokener("(,H5R|s+360R");
      jSONTokener0.back();
      String string0 = "z]N#e$:yr97>wP(q";
      JSONTokener jSONTokener1 = new JSONTokener("z]N#e$:yr97>wP(q");
      JSONTokener jSONTokener2 = new JSONTokener("OZ");
      jSONTokener0.next();
      JSONTokener jSONTokener3 = new JSONTokener("OZ");
      String string1 = "";
      JSONTokener jSONTokener4 = new JSONTokener("");
      jSONTokener1.syntaxError("OZ");
      try { 
        jSONTokener2.nextString('(');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 2 of OZ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.913675928962369
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer((-2093101));
      Integer integer1 = new Integer((-1409));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(1L);
      Long long1 = new Long(1L);
      Boolean boolean0 = new Boolean(";IG /TWLlQ~)b9");
      Long long2 = new Long(0L);
      linkedList0.add(long2);
      Long long3 = new Long(598L);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Long.valueOf(1485L);
      Long.sum(0L, (-2093101));
      linkedList0.add((Long) null);
      JSONObject.quote(";IG /TWLlQ~)b9");
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      linkedList1.replaceAll(unaryOperator0);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      Long long4 = new Long(1L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";IG /TWLlQ~)b9";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Long long0 = new Long(4013L);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      linkedList1.add(long0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Long long1 = new Long(4013L);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      Long long2 = new Long((-1585L));
      LinkedList<Long> linkedList4 = new LinkedList<Long>(linkedList1);
      Long.valueOf(1L);
      linkedList1.add(long2);
      JSONObject.quote("bJW:84g.7<C\"n");
      LinkedList<Long> linkedList5 = new LinkedList<Long>();
      LinkedList<Long> linkedList6 = new LinkedList<Long>();
      LinkedList<Long> linkedList7 = new LinkedList<Long>();
      linkedList3.pollLast();
      Long long3 = linkedList6.poll();
      assertNull(long3);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      Double double0 = new Double(526.8);
      Double.max(526.8, (-811.0969));
      JSONObject.valueToString(hashMap0, (-1995), (-1995));
      String string0 = ",\n";
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONTokener jSONTokener1 = new JSONTokener("rot");
      JSONTokener jSONTokener2 = new JSONTokener("] is not a number.");
      char char0 = '3';
      try { 
        jSONTokener2.nextString('3');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 18 of ] is not a number.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double double0 = new Double((-3016.4310530237));
      Long long0 = new Long((-37L));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long1 = new Long(0L);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      Long long2 = new Long(0L);
      Long long3 = new Long(0L);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      linkedList0.add(long3);
      Long long4 = new Long((-37L));
      LinkedList<Long> linkedList3 = new LinkedList<Long>(linkedList0);
      linkedList2.retainAll(linkedList3);
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      linkedList4.listIterator();
      Long.valueOf((-37L));
      Long long5 = new Long((-570L));
      linkedList2.add(long5);
      JSONObject.quote("q%qd'|cz2O(");
      Long.valueOf(0L);
      linkedList3.add((Long) null);
      LinkedList<Long> linkedList5 = new LinkedList<Long>();
      linkedList2.pollLast();
      LinkedList<Long> linkedList6 = new LinkedList<Long>();
      LinkedList<Long> linkedList7 = new LinkedList<Long>();
      LinkedList<Long> linkedList8 = new LinkedList<Long>();
      Long long6 = linkedList7.poll();
      assertNull(long6);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Long long0 = new Long(20L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Long long1 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) long1);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Double double0 = new Double(0L);
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate4.and(predicate3);
      predicate7.or(predicate4);
      predicate1.test(predicate8);
      Float float0 = new Float((double) (byte)34);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) float0);
      Predicate<Object> predicate10 = predicate6.and(predicate1);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate9.and(predicate11);
      Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate13 = predicate0.and(predicate1);
      predicate6.or(predicate3);
      Predicate<Object> predicate14 = predicate1.or(predicate13);
      predicate14.and(predicate12);
      predicate13.or(predicate7);
      predicate7.or(predicate14);
      Predicate<Object> predicate15 = predicate13.negate();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      predicate15.negate();
      Float float1 = new Float(0.0F);
      predicate5.and(predicate3);
      Predicate<Object> predicate16 = predicate0.or(predicate6);
      linkedList0.removeIf(predicate16);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.9590960964240387
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Byte> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Long> function0 = (Function<Object, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Short, ? extends Long>) function0);
      Function<Object, Byte> function1 = (Function<Object, Byte>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      UnaryOperator.identity();
      unaryOperator1.apply((Byte) null);
      UnaryOperator.identity();
      Function<Object, Byte> function2 = unaryOperator1.compose((Function<? super Object, ? extends Byte>) function1);
      unaryOperator0.andThen((Function<? super Long, ?>) function2);
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Long long0 = new Long(0L);
      unaryOperator0.apply(long0);
      Function.identity();
      Byte byte0 = new Byte((byte) (-84));
      unaryOperator1.apply(byte0);
      Function<Boolean, Boolean> function3 = Function.identity();
      Integer.toUnsignedString((-2948));
      Integer integer0 = new Integer(235);
      Integer.compare((-1807), 83);
      Integer.toUnsignedString((-1807));
      JSONObject jSONObject0 = new JSONObject(function3);
      try { 
        jSONObject0.getJSONArray("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.9226853935616632
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Double double0 = new Double((-3016.4310530237));
      Long long0 = new Long((-37L));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long1 = new Long(0L);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      Long long2 = new Long(0L);
      linkedList1.add(long2);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Long long3 = new Long((-37L));
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(8192);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      LinkedList<Long> linkedList5 = new LinkedList<Long>();
      LinkedList<Long> linkedList6 = new LinkedList<Long>();
      LinkedList<Long> linkedList7 = new LinkedList<Long>();
      LinkedList<Long> linkedList8 = new LinkedList<Long>();
      Long long4 = linkedList7.poll();
      assertNull(long4);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clone();
      Long long0 = new Long((-2399L));
      jSONObject0.put("[]", (Object) long0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      JSONTokener jSONTokener0 = new JSONTokener("isor");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of isor
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.03611166216486
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) "");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Boolean boolean0 = new Boolean("");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Double double0 = new Double(0.0);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      Long long0 = new Long(15L);
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      Long long1 = new Long(15L);
      LinkedList<Long> linkedList4 = new LinkedList<Long>(linkedList0);
      Long.valueOf(1L);
      linkedList0.add(long1);
      LinkedList<Long> linkedList5 = new LinkedList<Long>();
      LinkedList<Long> linkedList6 = new LinkedList<Long>();
      LinkedList<Long> linkedList7 = new LinkedList<Long>();
      linkedList4.pollLast();
      LinkedList<Long> linkedList8 = new LinkedList<Long>();
      linkedList8.poll();
      Double double1 = new Double(15L);
      JSONObject jSONObject0 = new JSONObject(predicate1);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double double0 = new Double((-3016.4310530237));
      Long long0 = new Long((-37L));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long1 = new Long(0L);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      Long long2 = new Long(0L);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      Long long3 = new Long(0L);
      linkedList1.add(long1);
      Long long4 = new Long(0L);
      LinkedList<Long> linkedList3 = new LinkedList<Long>(linkedList1);
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Long.valueOf(1199L);
      linkedList0.add((Long) null);
      JSONObject.quote((String) null);
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      LinkedList<Long> linkedList5 = new LinkedList<Long>();
      LinkedList<Long> linkedList6 = new LinkedList<Long>();
      Long long5 = linkedList1.poll();
      assertEquals(0L, (long)long5);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double((-3016.4310530237));
      Long long0 = new Long((-37L));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long1 = new Long(0L);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      Long long2 = new Long(0L);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      Long long3 = new Long(0L);
      linkedList1.add(long1);
      Long long4 = new Long(0L);
      LinkedList<Long> linkedList3 = new LinkedList<Long>(linkedList1);
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      linkedList0.replaceAll(unaryOperator0);
      Long.valueOf(1199L);
      linkedList0.add((Long) null);
      JSONObject.quote((String) null);
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      LinkedList<Long> linkedList5 = new LinkedList<Long>();
      LinkedList<Long> linkedList6 = new LinkedList<Long>();
      Long long5 = linkedList1.poll();
      assertFalse(long5.equals((Object)long0));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.964763373583426
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " of ";
      stringArray0[1] = "+";
      stringArray0[2] = " Yb]o0vq";
      Byte.compare((byte)0, (byte)0);
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("2~Ws4;", false);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      jSONObject0.put("i{NFl&g", (Map) hashMap1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";IG /TWLlQ~)b9";
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      Long.toUnsignedString(0L);
      Long.compare(312L, 0L);
      Float float0 = new Float((double) 1);
      Float.sum(0.0F, 0L);
      Float.min(1754.9163F, 2952L);
      Float.isFinite(0L);
      Float.min((-1.0F), 312L);
      Float.isFinite(1754.9163F);
      Float.max(1.0F, (-2325.2415F));
      Float.min(312L, 45.68761F);
      Float.max((-2112.981F), 1754.9163F);
      Float.sum(1754.9163F, 0.0F);
      Float.min((-1.0F), 1823.677F);
      Float.max(1754.9163F, (-1.0F));
      Float.max(1.0F, 45.68761F);
      Float.isFinite((-1.0F));
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("Null key.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.8418909337279232
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double double0 = new Double((-174.35360943868));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i|eK)W[lO/GuM59h`L";
      stringArray0[1] = "[";
      stringArray0[2] = "i|eK)W[lO/GuM59h`L";
      stringArray0[3] = "";
      stringArray0[4] = "i|eK)W[lO/GuM59h`L";
      stringArray0[5] = "'";
      stringArray0[6] = "_^(}[CN'G_Z";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.optBoolean("_^(}[CN'G_Z", true);
      jSONObject0.optDouble("[", (-174.35360943868));
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer integer0 = Integer.valueOf(2263);
      Integer.getInteger("Ro-j{Wd++", 88);
      JSONObject jSONObject2 = jSONObject0.put("[", (Object) integer0);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer1 = new Integer(2);
      Boolean boolean0 = new Boolean("for");
      JSONObject jSONObject3 = jSONObject2.put("", (Map) hashMap0);
      jSONObject3.optLong("");
      jSONObject1.has("i|eK)W[lO/GuM59h`L");
      try { 
        jSONObject1.getDouble("for");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"for\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.9494837273589989
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Boolean boolean0 = new Boolean("el?KY7KqD23tDf#");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "el?KY7KqD23tDf#");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Double double0 = new Double((-3337.2048022490676));
      Predicate<Object> predicate3 = predicate0.negate();
      Double.isFinite((-3337.2048022490676));
      Long long0 = new Long((-1L));
      predicate1.test(long0);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Predicate<Object> predicate4 = predicate1.or(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      predicate5.and(predicate3);
      Double double1 = new Double(Double.NaN);
      predicate0.test(double1);
      predicate5.negate();
      predicate3.negate();
      predicate3.negate();
      Long long1 = new Long(103L);
      Predicate.isEqual((Object) long1);
      Boolean boolean1 = new Boolean("isreplaceAll");
      JSONObject jSONObject0 = new JSONObject(double1);
      Boolean boolean2 = new Boolean("el?KY7KqD23tDf#");
      try { 
        jSONObject0.getDouble("EcS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"EcS\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Byte> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Long> function0 = (Function<Object, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Short, ? extends Long>) function0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Long, ? extends String>) function1);
      Function.identity();
      UnaryOperator.identity();
      unaryOperator1.apply((Byte) null);
      Function<Float, Long> function2 = (Function<Float, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Float, ? extends Long>) function2);
      UnaryOperator.identity();
      Function.identity();
      Function<Boolean, Boolean> function3 = Function.identity();
      Function.identity();
      Byte byte0 = new Byte((byte) (-84));
      Byte.toUnsignedLong((byte) (-84));
      unaryOperator1.apply(byte0);
      Function.identity();
      Integer.toUnsignedString((-2948));
      Integer integer0 = new Integer(235);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Fc?NChmfB";
      stringArray0[1] = "4294964348";
      stringArray0[2] = "4294964348";
      JSONObject jSONObject0 = new JSONObject(function3, stringArray0);
      try { 
        jSONObject0.getBoolean("4294964348");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4294964348\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.2113169331533986
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) "");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      predicate0.test(linkedList0);
      predicate0.and(predicate0);
      Double double0 = new Double(0.0);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      Long long0 = new Long(0L);
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      linkedList3.add(long0);
      Long long1 = new Long(0L);
      LinkedList<Long> linkedList4 = new LinkedList<Long>(linkedList0);
      linkedList2.retainAll(linkedList4);
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      linkedList2.listIterator();
      Long.valueOf(779L);
      linkedList3.add(long1);
      JSONObject.quote("");
      Long.valueOf(0L);
      linkedList3.add((Long) null);
      LinkedList<Long> linkedList5 = new LinkedList<Long>();
      linkedList0.pollLast();
      LinkedList<Long> linkedList6 = new LinkedList<Long>();
      LinkedList<Long> linkedList7 = new LinkedList<Long>();
      LinkedList<Long> linkedList8 = new LinkedList<Long>();
      linkedList8.poll();
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.4607600204895357
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Long long0 = new Long(20L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Long long1 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) long1);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Double double0 = new Double(0L);
      Predicate<Object> predicate8 = predicate0.negate();
      Byte byte0 = new Byte((byte)34);
      Float float0 = new Float((double) (byte)34);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) float0);
      predicate1.negate();
      Predicate<Object> predicate10 = predicate7.and(predicate2);
      Predicate<Object> predicate11 = predicate10.negate();
      predicate6.test(predicate1);
      Predicate<Object> predicate12 = predicate9.and(predicate11);
      Predicate<Integer> predicate13 = Predicate.isEqual((Object) predicate5);
      predicate4.and(predicate5);
      Predicate<Object> predicate14 = predicate0.and(predicate2);
      predicate9.negate();
      predicate7.or(predicate4);
      Predicate<Object> predicate15 = predicate2.or(predicate14);
      predicate15.and(predicate12);
      predicate8.or(predicate15);
      predicate4.negate();
      Predicate<Object> predicate16 = predicate14.negate();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      predicate16.negate();
      JSONObject jSONObject0 = new JSONObject(predicate10);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      JSONObject.testValidity(predicate1);
      assertFalse(predicate1.equals((Object)predicate13));
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.9844935290697798
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Long long0 = new Long(1980L);
      jSONObject0.accumulate(" at character ", "d!?e");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject.valueToString(hashMap0, (-1995), (-1995));
      JSONTokener jSONTokener0 = new JSONTokener(",\n");
      String string0 = "rot";
      JSONTokener jSONTokener1 = new JSONTokener("rot");
      String string1 = "] is not a number.";
      JSONTokener jSONTokener2 = new JSONTokener("] is not a number.");
      JSONTokener jSONTokener3 = new JSONTokener(",\n");
      jSONTokener2.back();
      try { 
        jSONTokener2.nextString('h');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 18 of ] is not a number.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.6270866719173012
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      UnaryOperator<Long> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer((-2093101));
      Integer integer1 = new Integer((-1409));
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Long, String> function1 = unaryOperator1.compose((Function<? super Long, ? extends String>) function0);
      unaryOperator0.andThen((Function<? super Long, ? extends String>) function1);
      Long long0 = new Long(1L);
      Long long1 = new Long(1L);
      Boolean boolean0 = new Boolean(";IG /TWLlQ~)b9");
      Long long2 = new Long(0L);
      linkedList1.add(long2);
      Long long3 = new Long(598L);
      LinkedList<Long> linkedList2 = new LinkedList<Long>(linkedList0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator0);
      Long.valueOf(1485L);
      Long.sum(0L, (-2093101));
      linkedList1.add((Long) null);
      JSONObject.quote(";IG /TWLlQ~)b9");
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      linkedList3.poll();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Double double0 = new Double((-3016.4310530237));
      Long long0 = new Long((-37L));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long1 = new Long(0L);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      linkedList1.containsAll(linkedList0);
      Long long2 = new Long(0L);
      linkedList1.add(long2);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Long long3 = new Long((-37L));
      Long long4 = new Long(0L);
      linkedList1.add(long4);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      StringWriter stringWriter0 = new StringWriter(8192);
      Integer.remainderUnsigned(8192, 2188);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      LinkedList<Short> linkedList4 = new LinkedList<Short>();
      linkedList1.retainAll(linkedList4);
      Long long5 = new Long(1L);
      LinkedList<Long> linkedList5 = new LinkedList<Long>();
      try { 
        Long.decode("qP}0-<B{h");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"qP}0-<B{h\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Boolean boolean0 = new Boolean("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      predicate0.and(predicate0);
      Double double0 = new Double(0.0);
      predicate0.negate();
      Boolean boolean1 = new Boolean("");
      Long long0 = new Long(303L);
      linkedList0.add(long0);
      Long long1 = new Long(0L);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Long> linkedList3 = new LinkedList<Long>(linkedList2);
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      linkedList4.retainAll(linkedList1);
      linkedList0.listIterator();
      JSONTokener jSONTokener0 = new JSONTokener("toU");
      JSONTokener jSONTokener1 = new JSONTokener("");
      jSONTokener0.nextTo("va");
      jSONTokener1.next();
      JSONTokener jSONTokener2 = new JSONTokener("Expected '");
      jSONTokener0.next('\u0000');
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.9433761826171119
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Double double0 = new Double((-174.35360943868));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i|eK)W[lO/GuM59h`L";
      stringArray0[1] = "[";
      stringArray0[3] = "";
      stringArray0[4] = "i|eK)W[lO/GuM59h`L";
      stringArray0[5] = "1";
      Double.min((-174.35360943868), Double.NaN);
      stringArray0[6] = "_^(}[CN'G_Z";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      Boolean boolean0 = new Boolean(true);
      jSONObject0.optDouble("[", (-174.35360943868));
      Integer integer0 = new Integer(2263);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer1 = new Integer(2);
      Integer.remainderUnsigned(9, 2);
      Integer.getInteger("", integer1);
      Integer integer2 = new Integer(3685);
      Boolean boolean1 = new Boolean("_^(}[CN'G_Z");
      hashMap0.put(integer2, boolean1);
      Integer integer3 = new Integer(2);
      Integer.getInteger("1", 2263);
      hashMap0.put(integer3, boolean0);
      Boolean.logicalOr(true, true);
      hashMap0.put(integer0, (Boolean) null);
      Boolean.valueOf(true);
      Double.sum(299.8811634, (-2220.602));
      jSONObject0.optLong("");
      try { 
        jSONObject0.getInt("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.9590960964240387
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Long long0 = new Long(20L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Long long1 = new Long((-21L));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) long1);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Double double0 = new Double((-21L));
      Predicate<Object> predicate8 = predicate0.negate();
      Byte byte0 = new Byte((byte)23);
      Float float0 = new Float((double) (byte)23);
      predicate1.negate();
      Predicate<Object> predicate9 = predicate7.and(predicate2);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate6.test(predicate1);
      Predicate<Object> predicate11 = predicate7.and(predicate10);
      Predicate.isEqual((Object) predicate5);
      predicate9.or(predicate7);
      predicate4.and(predicate5);
      Predicate<Object> predicate12 = predicate0.and(predicate2);
      predicate7.negate();
      predicate7.or(predicate4);
      Predicate<Object> predicate13 = predicate2.or(predicate12);
      predicate13.and(predicate11);
      predicate8.or(predicate13);
      predicate4.negate();
      Predicate<Object> predicate14 = predicate12.negate();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      predicate14.negate();
      JSONObject jSONObject0 = new JSONObject(predicate9);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      try { 
        jSONObject0.getJSONObject("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
