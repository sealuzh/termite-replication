/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 12:09:59 GMT 2019
 */

package macaw.businessLayer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.function.Consumer;
import macaw.businessLayer.DerivedVariable;
import macaw.businessLayer.OntologyTerm;
import macaw.businessLayer.RawVariable;
import macaw.businessLayer.SupportingDocument;
import macaw.businessLayer.User;
import macaw.businessLayer.ValueLabel;
import macaw.businessLayer.Variable;
import macaw.businessLayer.VariableSummary;
import macaw.system.ChangeEventType;
import macaw.system.MacawChangeEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Variable_ESTest extends Variable_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.6409929146631033
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      User user0 = new User();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.setName("4:>");
      rawVariable1.columnStart = "#5\"^g";
      rawVariable0.setName("v");
      User user1 = new User();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, rawVariable0);
      rawVariable0.cloneAttributes(derivedVariable0);
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      linkedList0.offerFirst(ontologyTerm0);
      LinkedList<OntologyTerm> linkedList1 = new LinkedList<OntologyTerm>();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      LinkedList<OntologyTerm> linkedList2 = new LinkedList<OntologyTerm>();
      linkedList0.parallelStream();
      linkedList2.remove((Object) null);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      OntologyTerm ontologyTerm6 = new OntologyTerm();
      OntologyTerm ontologyTerm7 = new OntologyTerm();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable0.clone();
      assertEquals("v", rawVariable0.getDisplayName());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setTitle("/v");
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument1.setFileName("(|]\u0004Bj");
      supportingDocument0.setDocumentCode("[");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      supportingDocument2.setIdentifier((-1732));
      supportingDocument3.setDescription("oF");
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      supportingDocument2.setDescription("oF");
      SupportingDocument supportingDocument6 = new SupportingDocument();
      SupportingDocument supportingDocument7 = new SupportingDocument();
      SupportingDocument supportingDocument8 = new SupportingDocument();
      SupportingDocument supportingDocument9 = new SupportingDocument();
      boolean boolean0 = rawVariable0.containsSupportingDocument(supportingDocument2);
      assertFalse(boolean0);
      
      rawVariable0.getYear();
      assertFalse(rawVariable0.isNewRecord());
      assertFalse(rawVariable0.isCleaned());
      assertEquals(0, rawVariable0.getIdentifier());
      assertFalse(rawVariable0.isCoded());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.053778405293998
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setIdentifier(1600);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      rawVariable0.setNotes("NON_EXISTENT_USER");
      rawVariable0.setIdentifier(1600);
      Variable.validateFields(rawVariable0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList0 = derivedVariable0.getOntologyTerms();
      derivedVariable0.addOntologyTerms(arrayList0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.addSourceVariable(derivedVariable1);
      rawVariable0.createVariableSummary();
      derivedVariable0.getLabel();
      rawVariable0.getSupportingDocuments();
      assertEquals(1600, rawVariable0.getIdentifier());
      
      ArrayList<Variable> arrayList1 = derivedVariable1.getSourceVariables();
      derivedVariable1.removeSourceVariables(arrayList1);
      assertEquals("Unknown", derivedVariable1.getAvailability());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.822142767406685
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setIsNewRecord(false);
      derivedVariable0.createVariableSummary();
      derivedVariable0.setIdentifier((-2103657448));
      derivedVariable0.getName();
      derivedVariable0.getNotes();
      derivedVariable0.setName("");
      derivedVariable0.getCodeBookNumber();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setTerm("");
      ontologyTerm0.setNameSpace("");
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      derivedVariable0.clone();
      derivedVariable0.createVariableSummary();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setForm("");
      rawVariable0.hasSameDisplayName(derivedVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFilePath("");
      derivedVariable0.containsSupportingDocument(supportingDocument0);
      assertEquals((-2103657448), derivedVariable0.getIdentifier());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.753366747039022
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.cloneAttributes(rawVariable0);
      derivedVariable0.setName("WN");
      derivedVariable0.setCleaningDescription("`SURXY<na[bG 2eovE ");
      derivedVariable0.getFilePath();
      User user0 = new User("5$l|]vi;*;", (String) null);
      user0.setAffiliation("supportingDocument.documentCode.saveChanges");
      user0.setAffiliation("general.error.blankField");
      RawVariable rawVariable1 = new RawVariable();
      ArrayList<ValueLabel> arrayList0 = new ArrayList<ValueLabel>();
      rawVariable0.setValueLabels(arrayList0);
      Variable.detectFieldChanges(user0, derivedVariable0, rawVariable1);
      User user1 = new User();
      rawVariable0.setCodeBookNumber("WN");
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("");
      supportingDocument0.setDescription("supportingDocument.documentCode.saveChanges");
      rawVariable1.setIdentifier(141);
      rawVariable0.addSupportingDocument(supportingDocument0);
      rawVariable1.containsSupportingDocument(supportingDocument0);
      int int0 = rawVariable1.getIdentifier();
      assertEquals("141", rawVariable1.getDisplayItemIdentifier());
      assertEquals(141, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.620795178839221
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.columnStart = null;
      User user0 = new User();
      User user1 = new User();
      user1.setAddressLine2("general.fieldValue.blank");
      User.detectFieldChanges(user1, user0, user1);
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      derivedVariable0.getQuestionNumber();
      derivedVariable0.getValueLabels();
      // Undeclared exception!
      try { 
        derivedVariable0.addSourceVariables((ArrayList<Variable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6878738184388458
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      rawVariable0.cloneAttributes(derivedVariable0);
      User user0 = new User("4:>", "4:>");
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.setAvailability("4:>");
      rawVariable0.setName("4:>");
      rawVariable1.columnStart = "#5\"^g";
      rawVariable1.setName("wv");
      User user1 = new User();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      Variable.detectFieldChanges(user0, rawVariable1, rawVariable0);
      derivedVariable0.containsSourceVariable(rawVariable1);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      RawVariable rawVariable2 = new RawVariable();
      derivedVariable2.removeSourceVariable(derivedVariable1);
      derivedVariable2.getAlternativeVariable();
      derivedVariable2.removeSourceVariable((Variable) null);
      System.setCurrentTimeMillis(3879L);
      derivedVariable1.getColumnEnd();
      rawVariable1.getQuestionNumber();
      assertEquals("#5\"^g", rawVariable1.getColumnStart());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.004956462942072
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable2);
      DerivedVariable derivedVariable4 = new DerivedVariable();
      User user0 = new User("X$U~8'r88", "X$U~8'r88");
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable3);
      assertEquals("Changed variable \"Alternative Variable\", field \"\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertNotNull(macawChangeEvent0);
      assertEquals(0, (int)macawChangeEvent0.getVariableOwnerID());
      
      User user1 = new User();
      ArrayList<Variable> arrayList0 = derivedVariable2.getSourceVariables();
      arrayList0.add((Variable) derivedVariable3);
      arrayList0.add((Variable) derivedVariable3);
      derivedVariable1.notes = "Xua)V4";
      derivedVariable4.removeSourceVariable(rawVariable0);
      DerivedVariable derivedVariable5 = new DerivedVariable();
      derivedVariable4.addSourceVariable(derivedVariable2);
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>();
      arrayList0.add((Variable) derivedVariable4);
      ArrayList<Variable> arrayList2 = derivedVariable5.getSourceVariables();
      arrayList2.add((Variable) derivedVariable2);
      derivedVariable3.setSourceVariables(arrayList1);
      DerivedVariable derivedVariable6 = new DerivedVariable();
      derivedVariable6.setAlternativeVariable(rawVariable0);
      derivedVariable6.form = "variable.name.label";
      derivedVariable6.getAlternativeVariable();
      derivedVariable1.getSourceVariables();
      assertFalse(derivedVariable1.isNewRecord());
      assertFalse(derivedVariable1.isCoded());
      assertFalse(derivedVariable1.isCleaned());
      assertEquals("", derivedVariable1.getDisplayName());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0008189434365673
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      Variable.validateFields(derivedVariable0);
      derivedVariable0.getForm();
      derivedVariable0.setCleaned(false);
      derivedVariable0.setColumnStart((String) null);
      derivedVariable0.isCleaned();
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setName("T}PEp*o");
      User user1 = new User();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      Variable.detectFieldChanges(user0, rawVariable0, derivedVariable0);
      user1.setStatus((String) null);
      derivedVariable0.containsSourceVariable(rawVariable0);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      RawVariable rawVariable1 = new RawVariable();
      derivedVariable1.removeSourceVariable(derivedVariable2);
      User user2 = new User();
      derivedVariable0.getAlternativeVariable();
      derivedVariable0.removeSourceVariable((Variable) null);
      // Undeclared exception!
      try { 
        Variable.detectChangesInAlternativeVariable(user2, (Variable) null, (Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0131535401970724
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.containsSourceVariable(derivedVariable1);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      ontologyTerm0.clone();
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      derivedVariable1.setCodeBookNumber("&s\"I)Rm'pL>");
      derivedVariable1.setQuestionNumber("variable.columnEnd.label");
      derivedVariable0.setCoded(true);
      derivedVariable0.getName();
      derivedVariable0.isCoded();
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      derivedVariable0.setAvailability("variable.name.label");
      derivedVariable0.setSourceVariables(arrayList0);
      derivedVariable1.addSourceVariable(derivedVariable0);
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, rawVariable0);
      try { 
        DerivedVariable.validateFields(derivedVariable1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.490825859952701
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable2.isCleaned();
      User user0 = new User();
      User user1 = new User(";x{z[2*|T$D-t", (String) null);
      User user2 = new User("\f.UwAfe&&tJQ)Ij", "UNABLE_TO_GET_VARIABLE_NAMES");
      Variable variable0 = null;
      Variable.detectChangesInAlternativeVariable(user2, rawVariable0, (Variable) null);
      User user3 = new User();
      try { 
        DerivedVariable.validateFields(derivedVariable1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.749238674914203
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      User user0 = new User();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.setName("4:>");
      rawVariable1.columnStart = "#5\"^g";
      rawVariable0.setName("v");
      User user1 = new User();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, rawVariable0);
      rawVariable0.cloneAttributes(derivedVariable0);
      Variable.detectFieldChanges(user0, rawVariable1, rawVariable0);
      ArrayList<Variable> arrayList0 = derivedVariable1.getSourceVariables();
      arrayList0.add((Variable) derivedVariable0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable1.form = "variable.isCleaned.saveChanges.changedToNotClean";
      Variable.validateFields(rawVariable0);
      System.setCurrentTimeMillis(90L);
      System.setCurrentTimeMillis((-3800L));
      derivedVariable0.addSourceVariables(arrayList0);
      assertEquals("v", derivedVariable0.getName());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.6050140878549226
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.cloneAttributes(rawVariable0);
      derivedVariable0.setName("WN");
      derivedVariable0.setCleaningDescription("`SURXY<na[bG 2eovE ");
      derivedVariable0.setCleaningStatus("`SURXY<na[bG 2eovE ");
      derivedVariable0.getFilePath();
      derivedVariable0.getFilePath();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      User user0 = new User();
      user0.setAffiliation("");
      RawVariable rawVariable1 = new RawVariable();
      Variable.detectFieldChanges(user0, rawVariable0, derivedVariable0);
      assertEquals("WN", derivedVariable0.getDisplayName());
      
      DerivedVariable derivedVariable2 = new DerivedVariable();
      Variable.detectFieldChanges(user0, rawVariable0, derivedVariable2);
      rawVariable1.cloneAttributes(rawVariable0);
      assertEquals(0, rawVariable0.getIdentifier());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9453254865859537
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      User user0 = new User("4:>", "4:>");
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.setCategory("variable.cleaningStatus.label");
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.columnStart = "#5\"^g";
      rawVariable1.setName("wv");
      User user1 = new User();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      Variable.detectFieldChanges(user0, rawVariable1, rawVariable0);
      user0.setStatus("variable.name.label");
      derivedVariable0.containsSourceVariable(rawVariable1);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      RawVariable rawVariable2 = new RawVariable();
      derivedVariable2.removeSourceVariable(derivedVariable1);
      User user2 = new User();
      derivedVariable2.getAlternativeVariable();
      derivedVariable2.removeSourceVariable((Variable) null);
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      derivedVariable2.setSourceVariables(arrayList0);
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user1, rawVariable1, rawVariable0);
      assertEquals("variable.cleaningStatus.label", rawVariable0.getCategory());
      assertEquals("Changed variable \"Alternative Variable\", field \"blank\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setDocumentCode("|");
      supportingDocument1.setTitle("!oqfix%l6~`k[Z~");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument0.setDocumentCode("mPd+.9Y");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      supportingDocument1.setFileName("|");
      rawVariable0.setFilePath("|");
      supportingDocument3.setFileName("bk]Meq<d>");
      SupportingDocument supportingDocument4 = new SupportingDocument();
      supportingDocument2.setIsNewRecord(false);
      supportingDocument4.clone();
      supportingDocument4.setDocumentCode("|");
      supportingDocument2.setFilePath("TIh;NT");
      rawVariable0.getFilePath();
      assertEquals("|", rawVariable0.getFilePath());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1562983335189747
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable1.questionNumber = "yI{6e/TUAI%dgg|.w";
      rawVariable0.setAlternativeVariable(derivedVariable2);
      DerivedVariable derivedVariable3 = new DerivedVariable();
      User user0 = new User("yI{6e/TUAI%dgg|.w", "yI{6e/TUAI%dgg|.w");
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable2);
      derivedVariable1.containsSourceVariable(derivedVariable2);
      DerivedVariable derivedVariable4 = new DerivedVariable();
      ArrayList<Variable> arrayList0 = derivedVariable4.getSourceVariables();
      arrayList0.add((Variable) derivedVariable1);
      DerivedVariable derivedVariable5 = new DerivedVariable();
      arrayList0.add((Variable) derivedVariable5);
      ArrayList<Variable> arrayList1 = derivedVariable2.getSourceVariables();
      ArrayList<Variable> arrayList2 = derivedVariable4.getSourceVariables();
      arrayList1.add((Variable) derivedVariable2);
      DerivedVariable derivedVariable6 = new DerivedVariable();
      derivedVariable4.setSourceVariables(arrayList2);
      DerivedVariable derivedVariable7 = new DerivedVariable();
      derivedVariable4.questionNumber = "yI{6e/TUAI%dgg|.w";
      DerivedVariable derivedVariable8 = new DerivedVariable();
      derivedVariable8.getAlternativeVariable();
      DerivedVariable derivedVariable9 = new DerivedVariable();
      derivedVariable4.getSourceVariables();
      derivedVariable7.getAlternativeVariable();
      // Undeclared exception!
      try { 
        derivedVariable9.cloneAttributes((Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      String string0 = "ALIAS_FILE_PATH";
      supportingDocument0.setTitle("ALIAS_FILE_PATH");
      // Undeclared exception!
      try { 
        rawVariable0.addOntologyTerms((ArrayList<OntologyTerm>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7711424820856867
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      User user0 = new User();
      user0.setAffiliation((String) null);
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      ArrayList<MacawChangeEvent> arrayList0 = Variable.detectFieldChanges(user0, rawVariable2, rawVariable2);
      assertTrue(arrayList0.isEmpty());
      
      User user1 = new User();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user1, derivedVariable0, (Variable) null);
      assertNull(macawChangeEvent0);
      
      User user2 = new User("UNABLE_TO_GET_CLEANING_STATE_NAME", "");
      MacawChangeEvent macawChangeEvent1 = Variable.detectChangesInAlternativeVariable(user0, rawVariable1, rawVariable0);
      assertNotNull(macawChangeEvent1);
      assertEquals(0, macawChangeEvent1.getChangedObjectIdentifier());
      assertEquals("Changed variable \"Alternative Variable\", field \"blank\", from \"\" to \"{3}\".", macawChangeEvent1.getChangeMessage());
      
      DerivedVariable derivedVariable1 = new DerivedVariable();
      User user3 = new User("^u;aOiWC[%d|{(h", "NBIC@[igA");
      System.setCurrentTimeMillis((-1L));
      derivedVariable1.addSourceVariable(rawVariable2);
      assertEquals("Unknown", derivedVariable1.getCleaningStatus());
      assertEquals("Unknown", derivedVariable1.getAvailability());
      assertEquals("Unknown", derivedVariable1.getCategory());
      assertFalse(derivedVariable1.isCleaned());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1171019303194956
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      ontologyTerm0.setOntologyName("MS7xo_p9e=+q0oZ");
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      derivedVariable0.removeOntologyTerm(ontologyTerm1);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      arrayList0.add(ontologyTerm0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ontologyTerm0.setOntologyName("~pAl,>iDzK]~,\"");
      derivedVariable0.updateOntologyTerm(ontologyTerm2);
      derivedVariable0.containsOntologyTerm(ontologyTerm2);
      ontologyTerm0.setOntologyName("p");
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      assertEquals("0", ontologyTerm4.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.983222729873338
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      User user0 = new User("4:>", "4:>");
      User user1 = new User("4:>", "4:>");
      DerivedVariable.detectFieldChanges(user1, derivedVariable0, derivedVariable0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.setAlias("4:>");
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.setName("wv");
      User user2 = new User();
      rawVariable1.createVariableSummary();
      rawVariable1.removeOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      Variable.detectFieldChanges(user1, rawVariable1, rawVariable0);
      try { 
        DerivedVariable.validateFields(derivedVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9699486781530458
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable2);
      DerivedVariable derivedVariable4 = new DerivedVariable();
      User user0 = new User("X$U~8'r88", "X$U~8'r88");
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable3);
      User user1 = new User();
      rawVariable0.setName("wv");
      User user2 = new User();
      DerivedVariable derivedVariable5 = new DerivedVariable();
      Variable.detectFieldChanges(user2, derivedVariable3, rawVariable0);
      DerivedVariable derivedVariable6 = new DerivedVariable();
      derivedVariable6.containsSourceVariable(derivedVariable1);
      DerivedVariable derivedVariable7 = new DerivedVariable();
      ArrayList<Variable> arrayList0 = derivedVariable6.getSourceVariables();
      arrayList0.add((Variable) derivedVariable2);
      arrayList0.add((Variable) derivedVariable0);
      ArrayList<Variable> arrayList1 = derivedVariable4.getSourceVariables();
      arrayList1.add((Variable) rawVariable0);
      assertEquals("wv", rawVariable0.getDisplayName());
      
      DerivedVariable derivedVariable8 = new DerivedVariable();
      derivedVariable6.setSourceVariables(arrayList1);
      DerivedVariable derivedVariable9 = new DerivedVariable();
      derivedVariable4.getAlternativeVariable();
      derivedVariable4.getSourceVariables();
      derivedVariable3.getAlternativeVariable();
      RawVariable.validateFields(rawVariable0);
      assertFalse(rawVariable0.isCleaned());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.658098466963857
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      User user0 = new User(";x{z[2*|T$D-t", "6?D");
      User user1 = new User();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      Variable.detectFieldChanges(user1, derivedVariable2, derivedVariable2);
      rawVariable0.cloneAttributes(derivedVariable1);
      RawVariable rawVariable1 = new RawVariable();
      derivedVariable1.removeSourceVariable(rawVariable0);
      VariableSummary variableSummary0 = rawVariable1.createVariableSummary();
      assertEquals(0, variableSummary0.getIdentifier());
      
      rawVariable0.hasSameDisplayName(derivedVariable0);
      derivedVariable1.cloneAttributes(derivedVariable2);
      assertEquals("Unknown", derivedVariable2.getCategory());
      assertFalse(derivedVariable1.isCleaned());
      assertFalse(derivedVariable1.isCoded());
      assertEquals("Unknown", derivedVariable2.getAvailability());
      assertEquals(0, derivedVariable2.getIdentifier());
      assertEquals("Unknown", derivedVariable2.getCleaningStatus());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      // Undeclared exception!
      try { 
        derivedVariable0.removeOntologyTerm((OntologyTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.questionNumber = "B!%v";
      rawVariable0.createVariableSummary();
      rawVariable0.setCleaningDescription((String) null);
      ArrayList<ValueLabel> arrayList0 = new ArrayList<ValueLabel>();
      ValueLabel valueLabel0 = new ValueLabel();
      valueLabel0.setIdentifier((-629));
      arrayList0.add(valueLabel0);
      rawVariable0.setValueLabels(arrayList0);
      rawVariable0.notes = "UNABLE_TO_GET_ORIGINAL_VARIABLE";
      rawVariable0.form = "";
      rawVariable0.form = "";
      rawVariable0.getQuestionNumber();
      rawVariable0.getName();
      rawVariable0.getDisplayName();
      rawVariable0.getValueLabels();
      rawVariable0.getAvailability();
      assertEquals("B!%v", rawVariable0.getQuestionNumber());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5718315996613828
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ontologyTerm1.setOntologyName("@{Ks}$>S$ ");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.addOntologyTerm(ontologyTerm1);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      arrayList0.add(ontologyTerm2);
      derivedVariable0.addOntologyTerms(arrayList0);
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      Consumer<OntologyTerm> consumer0 = (Consumer<OntologyTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer0);
      arrayList1.add(ontologyTerm0);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      try { 
        DerivedVariable.validateFields(derivedVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.218655583840207
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      LinkedList<OntologyTerm> linkedList1 = new LinkedList<OntologyTerm>();
      LinkedList<OntologyTerm> linkedList2 = new LinkedList<OntologyTerm>();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      LinkedList<OntologyTerm> linkedList3 = new LinkedList<OntologyTerm>(linkedList2);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      linkedList0.add(ontologyTerm2);
      linkedList2.add(ontologyTerm3);
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      linkedList1.add(ontologyTerm5);
      linkedList2.removeLastOccurrence(linkedList3);
      LinkedList<OntologyTerm> linkedList4 = new LinkedList<OntologyTerm>();
      OntologyTerm ontologyTerm6 = new OntologyTerm();
      linkedList1.add(ontologyTerm4);
      OntologyTerm ontologyTerm7 = new OntologyTerm();
      OntologyTerm ontologyTerm8 = new OntologyTerm();
      linkedList3.add(ontologyTerm8);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setCleaned(true);
      derivedVariable0.isCleaned();
      try { 
        DerivedVariable.validateFields(derivedVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6845453789466043
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      rawVariable0.addValueLabel(valueLabel0);
      rawVariable0.clone();
      try { 
        RawVariable.validateFields(rawVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.RawVariable", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.6619516001640307
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setCoded(false);
      derivedVariable0.cloneAttributes(rawVariable0);
      derivedVariable0.setName("WN");
      derivedVariable0.setCleaningDescription("`SURXY<na[bG 2eovE ");
      SupportingDocument supportingDocument0 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument0.setDocumentCode(";%(xO'y\"y$JA4 wh");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument0.setTitle("variable.year.label");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      rawVariable0.containsSupportingDocument(supportingDocument3);
      System.setCurrentTimeMillis((-1939L));
      derivedVariable0.getCleaningDescription();
      assertEquals("`SURXY<na[bG 2eovE ", derivedVariable0.getCleaningDescription());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.898434381904356
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setCodeBookNumber(";zO`y");
      derivedVariable0.getCodeBookNumber();
      derivedVariable0.getLabel();
      derivedVariable0.getColumnEnd();
      System.setCurrentTimeMillis(4731L);
      derivedVariable0.getFilePath();
      derivedVariable0.getColumnStart();
      derivedVariable0.getQuestionNumber();
      derivedVariable0.getAvailability();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.clone();
      rawVariable0.setIsNewRecord(true);
      try { 
        RawVariable.validateFields(rawVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.RawVariable", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.6638647953326533
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.cloneAttributes(rawVariable0);
      derivedVariable0.setName("WN");
      derivedVariable0.setCleaningDescription("`SURXY<na[bG 2eovE ");
      derivedVariable0.getFilePath();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      User user0 = new User();
      user0.setAffiliation("u6.c>{aoVnIeZ,Z");
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.setCoded(true);
      Variable.detectFieldChanges(user0, derivedVariable0, rawVariable1);
      assertEquals("`SURXY<na[bG 2eovE ", derivedVariable0.getCleaningDescription());
      
      System.setCurrentTimeMillis(0L);
      rawVariable1.getDisplayName();
      derivedVariable1.getColumnEnd();
      assertEquals("Unknown", derivedVariable1.getCleaningStatus());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setIdentifier((-1717986916));
      String string0 = "!oqfix%l6~`k[Z~";
      // Undeclared exception!
      try { 
        rawVariable0.addSupportingDocuments((ArrayList<SupportingDocument>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8943363994106277
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.getForm();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.setCleaned(true);
      derivedVariable1.isCleaned();
      User user0 = new User();
      User user1 = new User((String) null, "UNABLE_TO_CHECK_VALUE_LABEL_EXISTS");
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, rawVariable0);
      rawVariable0.getDisplayName();
      rawVariable0.createVariableSummary();
      derivedVariable0.form = "wv";
      User user2 = new User("jSR?EXC#H9}t3L", "general.error.promotesSecurityRisk");
      DerivedVariable derivedVariable2 = new DerivedVariable();
      Variable.detectFieldChanges(user2, derivedVariable0, derivedVariable2);
      rawVariable0.getForm();
      derivedVariable0.addSourceVariable(derivedVariable2);
      assertEquals("wv", derivedVariable0.getForm());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.4904599236161977
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      // Undeclared exception!
      try { 
        rawVariable0.containsOntologyTerm((OntologyTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.6205903623848696
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setTitle("ALIAS_FILE_PATH");
      rawVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setDocumentCode("ALIAS_FILE_PATH");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      supportingDocument3.setTitle("Z@Ta[2B");
      rawVariable0.containsSupportingDocument(supportingDocument3);
      System.setCurrentTimeMillis((-1939L));
      rawVariable0.clone();
      ArrayList<SupportingDocument> arrayList0 = rawVariable0.getSupportingDocuments();
      assertTrue(arrayList0.contains(supportingDocument0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5841760603850883
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      LinkedList<OntologyTerm> linkedList1 = new LinkedList<OntologyTerm>(linkedList0);
      linkedList1.add(ontologyTerm2);
      LinkedList<OntologyTerm> linkedList2 = new LinkedList<OntologyTerm>();
      linkedList1.add(ontologyTerm0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setCleaned(true);
      derivedVariable0.isCleaned();
      User user0 = new User("user.city.label", ",(RO*nC.>3@m/}V}H");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      Variable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      assertFalse(derivedVariable1.isCleaned());
      assertTrue(derivedVariable0.isCleaned());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.6489295449024803
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user0 = new User("Iu?+G", "Iu?+G");
      Variable.detectFieldChanges(user0, rawVariable0, derivedVariable0);
      rawVariable0.setAlternativeVariable(derivedVariable0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable1.setCleaned(true);
      derivedVariable1.isCleaned();
      User user1 = new User();
      User user2 = new User(";x{z[2*|T$D-t", "6?D");
      Variable.detectChangesInAlternativeVariable(user2, rawVariable0, derivedVariable1);
      User user3 = new User();
      user3.setStatus("<k]vid I:Is1Agz>");
      Variable.detectFieldChanges(user3, derivedVariable1, rawVariable0);
      rawVariable0.cloneAttributes(derivedVariable1);
      assertFalse(derivedVariable1.isCleaned());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6645808307575636
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.cloneAttributes(rawVariable0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable2.setName("(Gv/\"e,D?Sj");
      User user0 = new User();
      user0.setAddressLine1("UNABLE_TO_ASSOCIATE_SOURCE_VARIABLE");
      DerivedVariable derivedVariable2 = new DerivedVariable();
      Variable.detectFieldChanges(user0, rawVariable2, rawVariable2);
      rawVariable2.cloneAttributes(rawVariable0);
      RawVariable rawVariable3 = new RawVariable();
      derivedVariable0.removeSourceVariable(rawVariable2);
      rawVariable2.createVariableSummary();
      rawVariable0.hasSameDisplayName(derivedVariable1);
      assertEquals("(Gv/\"e,D?Sj", rawVariable0.getDisplayName());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8289194636511854
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.getDisplayItemIdentifier();
      User user0 = new User("0", "0");
      RawVariable rawVariable0 = new RawVariable();
      Variable.detectFieldChanges(user0, rawVariable0, derivedVariable0);
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("0");
      user0.setPostCode("lP3C*wz{;0\"C,Y7x");
      supportingDocument0.setFileName("0");
      user0.setAddressLine1("0");
      derivedVariable0.containsSupportingDocument(supportingDocument0);
      rawVariable0.setYear("0");
      derivedVariable0.getFilePath();
      Variable.detectFieldChanges(user0, rawVariable0, derivedVariable0);
      assertEquals("0", rawVariable0.getYear());
      assertEquals("Unknown", derivedVariable0.getCategory());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.357285019952196
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      arrayList0.add(ontologyTerm0);
      arrayList0.iterator();
      ontologyTerm0.setDescription("yev");
      ArrayList<OntologyTerm> arrayList1 = new ArrayList<OntologyTerm>();
      arrayList1.add((OntologyTerm) null);
      arrayList0.add(ontologyTerm0);
      arrayList1.iterator();
      ArrayList<OntologyTerm> arrayList2 = derivedVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm0);
      // Undeclared exception!
      try { 
        derivedVariable0.removeOntologyTerms(arrayList2);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      LinkedList<OntologyTerm> linkedList1 = new LinkedList<OntologyTerm>(linkedList0);
      linkedList1.add(ontologyTerm2);
      ontologyTerm0.setOntologyName("UNABLE_TO_CREATE_DATABASE");
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<OntologyTerm> arrayList0 = rawVariable0.getOntologyTerms();
      arrayList0.add(ontologyTerm1);
      ArrayList<OntologyTerm> arrayList1 = rawVariable0.getOntologyTerms();
      arrayList1.add(ontologyTerm1);
      // Undeclared exception!
      try { 
        arrayList0.sort((Comparator<? super OntologyTerm>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // macaw.businessLayer.OntologyTerm cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.087698781999318
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable2.setAlternativeVariable(rawVariable1);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable2.form = "Z";
      rawVariable2.setName("I^q");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable2.getName();
      System.setCurrentTimeMillis(503L);
      derivedVariable0.hasSameDisplayName(rawVariable1);
      rawVariable2.getDisplayName();
      assertEquals("I^q", rawVariable2.getDisplayName());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.columnStart = "QpTa";
      String string0 = derivedVariable0.getCodeBookNumber();
      assertFalse(derivedVariable0.isCoded());
      assertFalse(derivedVariable0.isNewRecord());
      assertEquals("", string0);
      assertFalse(derivedVariable0.isCleaned());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.000570825001368
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      Variable.validateFields(rawVariable0);
      rawVariable0.getColumnStart();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      valueLabel0.hasSameDisplayName(valueLabel1);
      valueLabel0.clone();
      rawVariable0.setCategory("");
      rawVariable0.addValueLabel(valueLabel0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user0 = new User("MISSING_DISPLAY_LIST_DELETER", "general.fieldValue.unknown");
      user0.setLastName("QMH4G&@Mi~");
      derivedVariable0.setCodeBookNumber("_1lPI");
      user0.setCity("QMH4G&@Mi~");
      rawVariable0.setLabel("MISSING_DISPLAY_LIST_DELETER");
      user0.setPhone("MISSING_DISPLAY_LIST_DELETER");
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      derivedVariable0.containsSourceVariable(rawVariable0);
      Variable.validateFields(rawVariable0);
      rawVariable0.getLabel();
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      derivedVariable0.addSourceVariables(arrayList0);
      // Undeclared exception!
      try { 
        rawVariable0.containsSupportingDocument((SupportingDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.6645197751053367
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.cloneAttributes(rawVariable0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.setAlternativeVariable(rawVariable0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      RawVariable rawVariable2 = new RawVariable();
      derivedVariable0.setLabel("vQWT$#");
      User user0 = new User();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      assertEquals("vQWT$#", derivedVariable0.getLabel());
      
      rawVariable2.cloneAttributes(rawVariable0);
      RawVariable rawVariable3 = new RawVariable();
      derivedVariable2.removeSourceVariable(rawVariable2);
      rawVariable1.createVariableSummary();
      assertEquals("Unknown", rawVariable1.getCategory());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.863074362767012
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      User user0 = new User("4:>", "4:>");
      rawVariable0.setColumnEnd("variable.isCleaned.saveChanges.changedToNotClean");
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.columnStart = "#5\"^g";
      rawVariable1.setName("wv");
      User user1 = new User();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      Variable.detectFieldChanges(user0, rawVariable1, rawVariable0);
      derivedVariable0.containsSourceVariable(rawVariable1);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      RawVariable rawVariable2 = new RawVariable();
      derivedVariable2.removeSourceVariable(derivedVariable1);
      derivedVariable2.getAlternativeVariable();
      derivedVariable2.removeSourceVariable((Variable) null);
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.107535896999073
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      arrayList0.add(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ontologyTerm1.setIdentifier((-744));
      ontologyTerm0.setOntologyName("~pAl,ziD7K]~,\"");
      derivedVariable0.updateOntologyTerm(ontologyTerm1);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.containsOntologyTerm(ontologyTerm1);
      derivedVariable0.hasSameDisplayName(rawVariable0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      User user0 = new User();
      assertEquals("", user0.getUserID());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9401690517473154
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      arrayList0.add(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ontologyTerm0.setIdentifier((-1));
      ontologyTerm0.setOntologyName("~pAl,ziD7K]~,\"");
      derivedVariable0.updateOntologyTerm(ontologyTerm1);
      boolean boolean0 = derivedVariable0.containsOntologyTerm(ontologyTerm1);
      assertFalse(boolean0);
      
      ArrayList<Variable> arrayList1 = derivedVariable0.getSourceVariables();
      derivedVariable0.setSourceVariables(arrayList1);
      assertFalse(derivedVariable0.isCleaned());
      assertFalse(derivedVariable0.isNewRecord());
      assertFalse(derivedVariable0.isCoded());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.7098378297701844
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable1.questionNumber = "yI{6e/TUAI%dgg|.w";
      rawVariable0.setAlternativeVariable(derivedVariable2);
      DerivedVariable derivedVariable3 = new DerivedVariable();
      User user0 = new User();
      rawVariable0.setName("lU,:)BG&;g");
      User user1 = new User();
      DerivedVariable derivedVariable4 = new DerivedVariable();
      Variable.detectChangesInAlternativeVariable(user1, derivedVariable2, derivedVariable2);
      Variable.detectFieldChanges(user1, derivedVariable2, rawVariable0);
      ArrayList<Variable> arrayList0 = derivedVariable2.getSourceVariables();
      arrayList0.add((Variable) rawVariable0);
      DerivedVariable derivedVariable5 = new DerivedVariable();
      derivedVariable5.getSourceVariables();
      arrayList0.add((Variable) derivedVariable2);
      DerivedVariable derivedVariable6 = new DerivedVariable();
      derivedVariable6.getSourceVariables();
      ArrayList<Variable> arrayList1 = derivedVariable5.getSourceVariables();
      arrayList1.add((Variable) rawVariable0);
      DerivedVariable derivedVariable7 = new DerivedVariable();
      derivedVariable4.setSourceVariables(arrayList0);
      DerivedVariable derivedVariable8 = new DerivedVariable();
      DerivedVariable derivedVariable9 = new DerivedVariable();
      derivedVariable6.getAlternativeVariable();
      DerivedVariable derivedVariable10 = new DerivedVariable();
      derivedVariable6.getSourceVariables();
      DerivedVariable derivedVariable11 = new DerivedVariable();
      rawVariable0.clone();
      assertEquals("lU,:)BG&;g", rawVariable0.getName());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList0 = derivedVariable0.getOntologyTerms();
      arrayList0.add(ontologyTerm0);
      // Undeclared exception!
      try { 
        derivedVariable0.removeOntologyTerms((ArrayList<OntologyTerm>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.8367041211656043
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument0);
      derivedVariable0.questionNumber = "";
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<Variable> arrayList0 = derivedVariable0.getSourceVariables();
      MacawChangeEvent[] macawChangeEventArray0 = new MacawChangeEvent[9];
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      macawChangeEventArray0[0] = macawChangeEvent0;
      MacawChangeEvent macawChangeEvent1 = new MacawChangeEvent();
      macawChangeEventArray0[1] = macawChangeEvent1;
      MacawChangeEvent macawChangeEvent2 = new MacawChangeEvent();
      macawChangeEventArray0[2] = macawChangeEvent2;
      MacawChangeEvent macawChangeEvent3 = new MacawChangeEvent();
      macawChangeEventArray0[3] = macawChangeEvent3;
      User user0 = new User("=m| :9Z;5zQ", "");
      MacawChangeEvent macawChangeEvent4 = Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, rawVariable0);
      macawChangeEventArray0[4] = macawChangeEvent4;
      ChangeEventType changeEventType0 = ChangeEventType.ONTOLOGY_TERM;
      MacawChangeEvent macawChangeEvent5 = new MacawChangeEvent(changeEventType0, "variable.alternativeVariable.label", "'/dx9~AkP|19");
      macawChangeEventArray0[5] = macawChangeEvent5;
      MacawChangeEvent macawChangeEvent6 = Variable.detectChangesInAlternativeVariable(user0, rawVariable0, rawVariable0);
      macawChangeEventArray0[6] = macawChangeEvent6;
      MacawChangeEvent macawChangeEvent7 = new MacawChangeEvent();
      macawChangeEventArray0[7] = macawChangeEvent7;
      MacawChangeEvent macawChangeEvent8 = Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable0);
      macawChangeEventArray0[8] = macawChangeEvent8;
      arrayList0.toArray(macawChangeEventArray0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      supportingDocument0.setIsNewRecord(false);
      ValueLabel valueLabel0 = new ValueLabel();
      derivedVariable0.addValueLabel(valueLabel0);
      User user1 = new User();
      DerivedVariable.detectFieldChanges(user1, derivedVariable0, derivedVariable0);
      arrayList0.containsAll(arrayList1);
      derivedVariable0.addSourceVariables(arrayList0);
      derivedVariable0.setAlternativeVariable(rawVariable0);
      derivedVariable0.setQuestionNumber("general.error.promotesSecurityRisk");
      derivedVariable0.setFilePath("");
      derivedVariable0.getValueLabels();
      derivedVariable0.createVariableSummary();
      derivedVariable0.isCoded();
      derivedVariable0.getAlias();
      derivedVariable0.clone();
      rawVariable0.isCoded();
      derivedVariable0.getColumnStart();
      derivedVariable0.getSourceVariables();
      derivedVariable0.containsSupportingDocument(supportingDocument0);
      assertEquals("general.error.promotesSecurityRisk", derivedVariable0.getQuestionNumber());
      
      rawVariable0.createVariableSummary();
      rawVariable0.getFilePath();
      rawVariable0.getName();
      assertEquals("Unknown", rawVariable0.getAvailability());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.676468561049379
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      user0.setAddressLine2("T");
      rawVariable0.columnEnd = "eg2%3f^O=t]6";
      rawVariable0.setCleaned(false);
      rawVariable0.questionNumber = "iR-~Q;{_p`/1gOLn.";
      RawVariable rawVariable1 = new RawVariable();
      Variable.detectFieldChanges(user0, rawVariable1, rawVariable1);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setDescription("iR-~Q;{_p`/1gOLn.");
      rawVariable0.removeSupportingDocument(supportingDocument0);
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      rawVariable1.addSupportingDocument(supportingDocument0);
      rawVariable0.getColumnEnd();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      try { 
        SupportingDocument.validateFields(supportingDocument1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.SupportingDocument", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.5806560020475704
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.cloneAttributes(rawVariable0);
      // Undeclared exception!
      try { 
        rawVariable0.removeSupportingDocuments((ArrayList<SupportingDocument>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<SupportingDocument> arrayList0 = rawVariable0.getSupportingDocuments();
      arrayList0.add((SupportingDocument) null);
      // Undeclared exception!
      try { 
        rawVariable0.removeSupportingDocuments(arrayList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      User user0 = new User("f*;8N5y)", "");
      user0.setPostCode("f*;8N5y)");
      ValueLabel.differencesExist(user0, derivedVariable0, valueLabel0, valueLabel0);
      derivedVariable0.removeValueLabel(valueLabel0);
      ValueLabel valueLabel1 = new ValueLabel();
      valueLabel1.setIdentifier((-7296));
      derivedVariable0.addValueLabel(valueLabel1);
      derivedVariable0.setIsNewRecord(false);
      derivedVariable0.setCleaningStatus("variable.availability.label");
      derivedVariable0.isNewRecord();
      derivedVariable0.setAvailability("");
      assertEquals("variable.availability.label", derivedVariable0.getCleaningStatus());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      ValueLabel valueLabel0 = new ValueLabel();
      rawVariable0.removeValueLabel(valueLabel0);
      supportingDocument1.setFilePath("!oqfix%l6~`k[Z~");
      supportingDocument0.setTitle("TIh;NT");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument1.setDocumentCode("!oqfix%l6~`k[Z~");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      supportingDocument3.setFilePath("TIh;NT");
      rawVariable0.getFilePath();
      assertFalse(rawVariable0.isNewRecord());
      assertFalse(rawVariable0.isCoded());
      assertFalse(rawVariable0.isCleaned());
      assertEquals(0, rawVariable0.getIdentifier());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setTitle("ALIAS_FILE_PATH");
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setDocumentCode("+]~0&t`}y=");
      User user0 = new User();
      rawVariable0.setCodeBookNumber("+]~0&t`}y=");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument1.setDescription("variable.cleaningDescription.label");
      rawVariable0.setIdentifier((-199));
      rawVariable0.addSupportingDocument(supportingDocument2);
      SupportingDocument supportingDocument3 = new SupportingDocument();
      boolean boolean0 = rawVariable0.containsSupportingDocument(supportingDocument3);
      assertEquals("+]~0&t`}y=", rawVariable0.getCodeBookNumber());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.625071549495739
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<Variable> arrayList0 = derivedVariable0.getSourceVariables();
      LinkedList<MacawChangeEvent> linkedList0 = new LinkedList<MacawChangeEvent>();
      arrayList0.containsAll(linkedList0);
      arrayList0.add((Variable) derivedVariable0);
      derivedVariable0.columnEnd = "ghaP!di)WWfLpilA{j";
      derivedVariable0.setSourceVariables(arrayList0);
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<ValueLabel> arrayList1 = new ArrayList<ValueLabel>();
      rawVariable0.setForm("ghaP!di)WWfLpilA{j");
      arrayList1.stream();
      rawVariable0.setValueLabels(arrayList1);
      derivedVariable0.cloneAttributes(rawVariable0);
      assertEquals("ghaP!di)WWfLpilA{j", rawVariable0.getColumnEnd());
      
      ArrayList<Variable> arrayList2 = new ArrayList<Variable>();
      derivedVariable0.setSourceVariables(arrayList2);
      String string0 = derivedVariable0.getName();
      assertEquals("", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.5350165608959494
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      LinkedList<OntologyTerm> linkedList1 = new LinkedList<OntologyTerm>(linkedList0);
      linkedList0.add(ontologyTerm0);
      linkedList0.add(ontologyTerm2);
      linkedList1.parallelStream();
      linkedList0.add(ontologyTerm2);
      linkedList0.removeFirst();
      linkedList0.offerFirst(ontologyTerm1);
      LinkedList<OntologyTerm> linkedList2 = new LinkedList<OntologyTerm>();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      linkedList2.parallelStream();
      linkedList1.remove((Object) ontologyTerm1);
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm6 = new OntologyTerm();
      OntologyTerm ontologyTerm7 = new OntologyTerm();
      OntologyTerm ontologyTerm8 = new OntologyTerm();
      OntologyTerm ontologyTerm9 = new OntologyTerm();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setLabel("dyzlI\u0002$9<?LI`Qb~dr");
      rawVariable0.clone();
      assertEquals("dyzlI\u0002$9<?LI`Qb~dr", rawVariable0.getLabel());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.5773139552883237
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setTitle("ALIAS_FILE_PATH");
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setTitle("G0m?4os+");
      supportingDocument1.setDocumentCode("G0m?4os+");
      supportingDocument1.setDescription("vCK?wg*I!Q2rWk");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument0.setDescription("UNABLE_TO_DELETE_ALIAS_FILE_PATH");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      supportingDocument3.setDocumentCode("*%$W3rn9h=T");
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      SupportingDocument supportingDocument7 = new SupportingDocument();
      boolean boolean0 = rawVariable0.containsSupportingDocument(supportingDocument1);
      assertTrue(boolean0);
      
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.cloneAttributes(derivedVariable0);
      assertEquals("Unknown", derivedVariable0.getAvailability());
      assertEquals("Unknown", derivedVariable0.getCategory());
      assertEquals("Unknown", derivedVariable0.getCleaningStatus());
      assertFalse(derivedVariable0.isCleaned());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
      assertFalse(derivedVariable0.isNewRecord());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.9454716320006415
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      User user0 = new User();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.setName("4:>");
      rawVariable1.columnStart = "#5\"^g";
      rawVariable0.setName("v");
      User user1 = new User();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, rawVariable0);
      Variable.detectFieldChanges(user0, rawVariable1, rawVariable0);
      ArrayList<Variable> arrayList0 = derivedVariable1.getSourceVariables();
      arrayList0.add((Variable) derivedVariable0);
      ArrayList<Variable> arrayList1 = derivedVariable1.getSourceVariables();
      arrayList1.add((Variable) rawVariable0);
      ArrayList<Variable> arrayList2 = new ArrayList<Variable>();
      ArrayList<Variable> arrayList3 = derivedVariable1.getSourceVariables();
      arrayList2.add((Variable) null);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable1.setSourceVariables(arrayList3);
      DerivedVariable derivedVariable3 = new DerivedVariable();
      DerivedVariable derivedVariable4 = new DerivedVariable();
      derivedVariable4.getAlternativeVariable();
      DerivedVariable derivedVariable5 = new DerivedVariable();
      derivedVariable5.getSourceVariables();
      DerivedVariable derivedVariable6 = new DerivedVariable();
      derivedVariable6.getAlternativeVariable();
      derivedVariable6.removeSourceVariable(derivedVariable0);
      derivedVariable1.setSourceVariables(arrayList2);
      // Undeclared exception!
      try { 
        Variable.validateFields((Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.8651214030229846
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<SupportingDocument> arrayList0 = rawVariable0.getSupportingDocuments();
      MacawChangeEvent[] macawChangeEventArray0 = new MacawChangeEvent[5];
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      macawChangeEventArray0[0] = macawChangeEvent0;
      User user0 = new User();
      MacawChangeEvent macawChangeEvent1 = Variable.detectChangesInAlternativeVariable(user0, rawVariable0, rawVariable0);
      macawChangeEventArray0[1] = macawChangeEvent1;
      MacawChangeEvent macawChangeEvent2 = new MacawChangeEvent();
      macawChangeEventArray0[2] = macawChangeEvent2;
      ChangeEventType changeEventType0 = ChangeEventType.LIST_CHOICE;
      MacawChangeEvent macawChangeEvent3 = new MacawChangeEvent(changeEventType0, "Lw ", "Y");
      macawChangeEventArray0[3] = macawChangeEvent3;
      ChangeEventType changeEventType1 = ChangeEventType.SUPPORTING_DOCUMENT;
      MacawChangeEvent macawChangeEvent4 = new MacawChangeEvent(changeEventType1, "variable.isCoded.label", "variable.isCleaned.saveChanges.changedToNotClean");
      macawChangeEventArray0[4] = macawChangeEvent4;
      arrayList0.toArray(macawChangeEventArray0);
      rawVariable0.addSupportingDocuments(arrayList0);
      rawVariable0.setLabel("Lw ");
      rawVariable0.setIdentifier((-755));
      rawVariable0.getNotes();
      rawVariable0.questionNumber = "NON_EXISTENT_ONTOLOGY_TERM_ASSOCIATION";
      User user1 = null;
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList1 = rawVariable0.getOntologyTerms();
      derivedVariable0.questionNumber = "Lw ";
      rawVariable0.setOntologyTerms(arrayList1);
      derivedVariable0.cloneAttributes(rawVariable0);
      try { 
        DerivedVariable.validateFields(derivedVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.7065689212895894
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setCoded(false);
      rawVariable0.questionNumber = "";
      rawVariable0.getFilePath();
      rawVariable0.getSupportingDocuments();
      rawVariable0.setCodeBookNumber("/");
      SupportingDocument supportingDocument0 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.columnEnd = "/";
      rawVariable0.cloneAttributes(derivedVariable0);
      ValueLabel valueLabel0 = new ValueLabel();
      derivedVariable0.setName("");
      ValueLabel.EditingOperationType valueLabel_EditingOperationType0 = ValueLabel.EditingOperationType.DELETE;
      valueLabel0.setEditingOperationType(valueLabel_EditingOperationType0);
      User user0 = new User("x _y", "");
      valueLabel0.setLabel("x _y");
      User.detectFieldChanges(user0, user0, user0);
      ValueLabel.differencesExist(user0, rawVariable0, valueLabel0, valueLabel0);
      assertEquals("/", rawVariable0.getCodeBookNumber());
      assertFalse(rawVariable0.isCoded());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.6277087992880186
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable2);
      derivedVariable1.setCleaningDescription((String) null);
      DerivedVariable derivedVariable4 = new DerivedVariable();
      User user0 = new User("X$U~8'r88", "X$U~8'r88");
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable3);
      assertEquals("Changed variable \"Alternative Variable\", field \"\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertEquals(0, (int)macawChangeEvent0.getVariableOwnerID());
      assertNotNull(macawChangeEvent0);
      
      User user1 = new User();
      ArrayList<Variable> arrayList0 = derivedVariable2.getSourceVariables();
      arrayList0.add((Variable) derivedVariable3);
      arrayList0.add((Variable) derivedVariable3);
      derivedVariable1.notes = "Xua)V4";
      derivedVariable2.removeSourceVariable(derivedVariable1);
      DerivedVariable derivedVariable5 = new DerivedVariable();
      derivedVariable5.addSourceVariable(derivedVariable4);
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>();
      ArrayList<Variable> arrayList2 = derivedVariable2.getSourceVariables();
      DerivedVariable derivedVariable6 = (DerivedVariable)derivedVariable1.clone();
      assertEquals("", derivedVariable6.getLabel());
      assertEquals("Unknown", derivedVariable6.getAvailability());
      assertFalse(derivedVariable6.isNewRecord());
      assertEquals("Unknown", derivedVariable6.getCleaningStatus());
      assertFalse(derivedVariable6.isCoded());
      assertEquals("Unknown", derivedVariable6.getCategory());
      assertEquals("", derivedVariable6.getCodeBookNumber());
      assertFalse(derivedVariable6.isCleaned());
      assertEquals("", derivedVariable6.getDisplayName());
      
      arrayList2.add((Variable) derivedVariable4);
      arrayList2.add((Variable) derivedVariable2);
      derivedVariable0.getSourceVariables();
      arrayList2.add((Variable) derivedVariable3);
      DerivedVariable derivedVariable7 = new DerivedVariable();
      derivedVariable7.setSourceVariables(arrayList0);
      DerivedVariable derivedVariable8 = new DerivedVariable();
      derivedVariable1.getAlternativeVariable();
      derivedVariable7.getSourceVariables();
      derivedVariable7.getAlternativeVariable();
      assertFalse(derivedVariable7.isNewRecord());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.7151583197228653
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      User user0 = new User();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.setName("4:>");
      rawVariable1.columnStart = "#5\"^g";
      rawVariable0.setName("v");
      User user1 = new User();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, rawVariable0);
      Variable.detectFieldChanges(user0, rawVariable1, rawVariable0);
      ArrayList<Variable> arrayList0 = derivedVariable1.getSourceVariables();
      arrayList0.add((Variable) derivedVariable0);
      ArrayList<Variable> arrayList1 = derivedVariable1.getSourceVariables();
      arrayList1.add((Variable) rawVariable0);
      assertEquals("v", rawVariable0.getName());
      
      ArrayList<Variable> arrayList2 = derivedVariable0.getSourceVariables();
      ArrayList<Variable> arrayList3 = derivedVariable1.getSourceVariables();
      arrayList2.add((Variable) null);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable1.setSourceVariables(arrayList3);
      DerivedVariable derivedVariable3 = new DerivedVariable();
      DerivedVariable derivedVariable4 = new DerivedVariable();
      derivedVariable4.getAlternativeVariable();
      DerivedVariable derivedVariable5 = new DerivedVariable();
      derivedVariable5.getSourceVariables();
      DerivedVariable derivedVariable6 = new DerivedVariable();
      derivedVariable6.getAlternativeVariable();
      derivedVariable6.removeSourceVariable(derivedVariable0);
      derivedVariable1.setSourceVariables(arrayList2);
      rawVariable1.clone();
      derivedVariable6.getYear();
      assertFalse(derivedVariable6.isNewRecord());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.6441986173899377
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setForm("*i,Jns");
      rawVariable0.setCoded(true);
      rawVariable0.clone();
      rawVariable0.getForm();
      rawVariable0.getLabel();
      User user0 = new User();
      user0.setLastName("");
      user0.setCounty("");
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      try { 
        RawVariable.validateFields(rawVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.RawVariable", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setFilePath("!oqfix%l6~`k[Z~");
      supportingDocument1.setDocumentCode("TIh;NT");
      supportingDocument0.setTitle("TIh;NT");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument1.setDocumentCode("!oqfix%l6~`k[Z~");
      rawVariable0.setColumnStart("z;?'");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      supportingDocument3.setFileName("TIh;NT");
      supportingDocument3.setDocumentCode("!oqfix%l6~`k[Z~");
      supportingDocument3.setFilePath("TIh;NT");
      rawVariable0.getFilePath();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.hasSameDisplayName(derivedVariable0);
      assertEquals("z;?'", rawVariable0.getColumnStart());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.6185269223209953
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      arrayList0.add(ontologyTerm0);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      ontologyTerm4.setOntologyName("t]");
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      User user0 = new User();
      OntologyTerm ontologyTerm6 = new OntologyTerm();
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.cloneAttributes(rawVariable0);
      ArrayList<Variable> arrayList1 = derivedVariable0.getSourceVariables();
      assertEquals(0, arrayList1.size());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.4428345663487723
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable1.questionNumber = "yI{6e/TUAI%dgg|.w";
      rawVariable0.setAlternativeVariable(derivedVariable2);
      DerivedVariable derivedVariable3 = new DerivedVariable();
      User user0 = new User();
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable2);
      assertEquals("Changed variable \"Alternative Variable\", field \"\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertNotNull(macawChangeEvent0);
      assertEquals(0, (int)macawChangeEvent0.getVariableOwnerID());
      
      derivedVariable1.containsSourceVariable(derivedVariable2);
      DerivedVariable derivedVariable4 = new DerivedVariable();
      ArrayList<String> arrayList0 = Variable.validateFields(derivedVariable0);
      assertEquals(1, arrayList0.size());
      
      ArrayList<Variable> arrayList1 = derivedVariable4.getSourceVariables();
      arrayList1.add((Variable) derivedVariable2);
      DerivedVariable derivedVariable5 = new DerivedVariable();
      DerivedVariable derivedVariable6 = new DerivedVariable();
      arrayList1.add((Variable) derivedVariable6);
      derivedVariable1.getSourceVariables();
      ArrayList<Variable> arrayList2 = derivedVariable3.getSourceVariables();
      DerivedVariable derivedVariable7 = new DerivedVariable();
      derivedVariable1.setSourceVariables(arrayList1);
      assertEquals("", derivedVariable1.getName());
      
      DerivedVariable derivedVariable8 = new DerivedVariable();
      DerivedVariable derivedVariable9 = new DerivedVariable();
      DerivedVariable derivedVariable10 = new DerivedVariable();
      DerivedVariable derivedVariable11 = new DerivedVariable();
      derivedVariable11.getAlternativeVariable();
      DerivedVariable derivedVariable12 = new DerivedVariable();
      derivedVariable12.getSourceVariables();
      DerivedVariable derivedVariable13 = new DerivedVariable();
      derivedVariable13.getSourceVariables();
      derivedVariable10.addSourceVariables(arrayList2);
      int int0 = derivedVariable9.getIdentifier();
      assertFalse(derivedVariable9.isCoded());
      assertFalse(derivedVariable9.isNewRecord());
      assertFalse(derivedVariable9.isCleaned());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.8946614705199325
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      User user0 = new User("B#|:K 6sl {{zw[YT", "X$U~8'r88");
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable2, derivedVariable2);
      User user1 = new User();
      rawVariable0.setName("variable.isCleaned.saveChanges.changedToNotClean");
      User user2 = new User();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      Variable.detectFieldChanges(user1, rawVariable0, derivedVariable3);
      DerivedVariable derivedVariable4 = new DerivedVariable();
      derivedVariable3.containsSourceVariable(derivedVariable0);
      DerivedVariable derivedVariable5 = new DerivedVariable();
      ArrayList<Variable> arrayList0 = derivedVariable1.getSourceVariables();
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>();
      arrayList1.add((Variable) rawVariable0);
      assertEquals("variable.isCleaned.saveChanges.changedToNotClean", rawVariable0.getDisplayName());
      
      arrayList0.add((Variable) derivedVariable0);
      derivedVariable5.getSourceVariables();
      derivedVariable4.getSourceVariables();
      arrayList1.add((Variable) derivedVariable3);
      DerivedVariable derivedVariable6 = new DerivedVariable();
      derivedVariable2.setSourceVariables(arrayList0);
      DerivedVariable derivedVariable7 = new DerivedVariable();
      derivedVariable7.getAlternativeVariable();
      DerivedVariable derivedVariable8 = new DerivedVariable();
      derivedVariable1.getSourceVariables();
      derivedVariable1.getAlternativeVariable();
      assertFalse(derivedVariable1.isCoded());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.8872092982108897
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable2);
      DerivedVariable derivedVariable4 = new DerivedVariable();
      User user0 = new User("X$U~8'r88", "X$U~8'r88");
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable3);
      User user1 = new User();
      derivedVariable3.codeBookNumber = "UNABLE_TO_GET_VARIABLE_IDENTIFIER";
      rawVariable0.setName("w\"");
      User user2 = new User();
      DerivedVariable derivedVariable5 = new DerivedVariable();
      Variable.detectFieldChanges(user2, derivedVariable3, rawVariable0);
      assertEquals("UNABLE_TO_GET_VARIABLE_IDENTIFIER", derivedVariable3.getCodeBookNumber());
      
      DerivedVariable derivedVariable6 = new DerivedVariable();
      DerivedVariable derivedVariable7 = new DerivedVariable();
      DerivedVariable derivedVariable8 = new DerivedVariable();
      derivedVariable8.getAlternativeVariable();
      DerivedVariable derivedVariable9 = new DerivedVariable();
      DerivedVariable derivedVariable10 = new DerivedVariable();
      ArrayList<Variable> arrayList0 = derivedVariable9.getSourceVariables();
      DerivedVariable derivedVariable11 = new DerivedVariable();
      derivedVariable10.getSourceVariables();
      derivedVariable2.addSourceVariables(arrayList0);
      assertEquals("Unknown", derivedVariable9.getAvailability());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.7277112355213653
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      Variable.validateFields(rawVariable0);
      User user0 = new User();
      User.detectFieldChanges(user0, user0, user0);
      user0.setAffiliation("RbjRzi=urUnk");
      RawVariable rawVariable1 = new RawVariable();
      Variable.detectFieldChanges(user0, rawVariable0, rawVariable1);
      User user1 = new User();
      rawVariable1.columnStart = "supportingDocument.title.label";
      User user2 = new User("RbjRzi=urUnk", "NO_SUPPORTING_DOCUMENT_FILTER");
      Variable.detectChangesInAlternativeVariable(user2, rawVariable0, rawVariable1);
      rawVariable0.clone();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable0.setForm("DUPLICATE_CLEANING_STATE");
      Variable.detectFieldChanges(user1, rawVariable0, rawVariable0);
      assertEquals("DUPLICATE_CLEANING_STATE", rawVariable0.getForm());
      
      rawVariable2.cloneAttributes(rawVariable1);
      assertEquals("Unknown", rawVariable1.getCleaningStatus());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.519135711036457
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setCleaningDescription((String) null);
      User user0 = new User();
      User user1 = new User();
      user1.setAffiliation("variable.columnStart.label");
      user1.setPostCode("eg2%3f^O=t]6");
      // Undeclared exception!
      try { 
        Variable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setTitle("ALIAS_FILE_PATH");
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      rawVariable0.setCleaningStatus("+]~0&t`}y=");
      supportingDocument0.setTitle("ALIAS_FILE_PATH");
      supportingDocument1.setDocumentCode("+]~0&t`}y=");
      supportingDocument1.setDescription("vdxM\"");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument1.setDescription("@h66_phZD;-yuTv:1");
      supportingDocument0.setDocumentCode("vdxM\"");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      boolean boolean0 = rawVariable0.containsSupportingDocument(supportingDocument1);
      assertEquals("+]~0&t`}y=", rawVariable0.getCleaningStatus());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ValueLabel valueLabel0 = new ValueLabel();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.form = "yI{6e/TUAI%dgg|.w";
      String string0 = rawVariable0.getColumnStart();
      assertFalse(rawVariable0.isCleaned());
      assertEquals("0", rawVariable0.getDisplayItemIdentifier());
      assertFalse(rawVariable0.isCoded());
      assertFalse(rawVariable0.isNewRecord());
      assertEquals("", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.6676082383884046
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.columnEnd = "om=z";
      derivedVariable0.cloneAttributes(derivedVariable1);
      derivedVariable0.setYear("SGT9m?'#X");
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      Consumer<SupportingDocument> consumer0 = (Consumer<SupportingDocument>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      derivedVariable0.setSupportingDocuments(arrayList0);
      derivedVariable0.createVariableSummary();
      derivedVariable0.getCategory();
      derivedVariable0.getSupportingDocuments();
      assertEquals("SGT9m?'#X", derivedVariable0.getYear());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setFilePath("!oqfix%l6~`k[Z~");
      supportingDocument1.setTitle("0");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      rawVariable0.setLabel("0");
      supportingDocument2.setTitle("0");
      rawVariable0.createVariableSummary();
      supportingDocument2.setDocumentCode((String) null);
      supportingDocument2.setFilePath("0");
      rawVariable0.getFilePath();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.addSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setTitle((String) null);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.containsSupportingDocument(supportingDocument0);
      ArrayList<Variable> arrayList1 = derivedVariable0.getSourceVariables();
      derivedVariable0.setSourceVariables(arrayList1);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setDescription((String) null);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      User user0 = new User();
      assertEquals(0, user0.getIdentifier());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.9753765189753083
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      derivedVariable0.updateOntologyTerm(ontologyTerm1);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      arrayList0.add(ontologyTerm0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      ontologyTerm2.setOntologyName(",");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.updateOntologyTerm(ontologyTerm0);
      derivedVariable0.containsOntologyTerm(ontologyTerm2);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.3597473990481395
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = derivedVariable0.getOntologyTerms();
      derivedVariable0.setOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      RawVariable rawVariable0 = new RawVariable();
      Object object0 = new Object();
      System.setCurrentTimeMillis(2694L);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      boolean boolean0 = rawVariable0.containsSupportingDocument(supportingDocument0);
      assertFalse(rawVariable0.isNewRecord());
      assertFalse(rawVariable0.isCleaned());
      assertFalse(boolean0);
      assertFalse(rawVariable0.isCoded());
      assertEquals(0, rawVariable0.getIdentifier());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.3398704635314767
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      arrayList0.add(ontologyTerm0);
      arrayList0.iterator();
      derivedVariable0.getOntologyTerms();
      arrayList0.add(ontologyTerm0);
      derivedVariable0.removeOntologyTerms(arrayList0);
      System.setCurrentTimeMillis((-1916L));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.6669919055686817
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setTitle("'h462rXl#`j");
      supportingDocument1.setFilePath("!oqfix%l6~`k[Z~");
      supportingDocument1.setTitle("0");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument2.setDocumentCode((String) null);
      ArrayList<ValueLabel> arrayList0 = rawVariable0.getValueLabels();
      rawVariable0.setValueLabels(arrayList0);
      supportingDocument2.setFilePath("0");
      rawVariable0.getFilePath();
      System.setCurrentTimeMillis((-1L));
      RawVariable rawVariable1 = (RawVariable)rawVariable0.clone();
      assertFalse(rawVariable1.isCleaned());
      assertEquals("Unknown", rawVariable1.getCategory());
      assertEquals("Unknown", rawVariable1.getAvailability());
      assertFalse(rawVariable1.isCoded());
      assertEquals("Unknown", rawVariable1.getCleaningStatus());
      assertFalse(rawVariable1.isNewRecord());
      assertEquals("0", rawVariable1.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ValueLabel valueLabel0 = new ValueLabel();
      RawVariable rawVariable0 = new RawVariable();
      String string0 = rawVariable0.getCleaningStatus();
      assertEquals(0, rawVariable0.getIdentifier());
      assertFalse(rawVariable0.isNewRecord());
      assertFalse(rawVariable0.isCleaned());
      assertEquals("Unknown", string0);
      assertNotNull(string0);
      assertFalse(rawVariable0.isCoded());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SupportingDocument supportingDocument0 = new SupportingDocument();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setOntologyName("KR&BS$fcg26IJ");
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      derivedVariable0.setCleaned(false);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument0.setTitle("oF");
      supportingDocument0.setFileName("H");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      supportingDocument3.setDocumentCode("UNABLE_TO_CHECK_ONTOLOGY_TERM_DUPLICATES");
      SupportingDocument supportingDocument4 = new SupportingDocument();
      supportingDocument0.setDescription("general.error.blankField");
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      supportingDocument1.setDescription((String) null);
      SupportingDocument supportingDocument7 = new SupportingDocument();
      SupportingDocument supportingDocument8 = new SupportingDocument();
      SupportingDocument supportingDocument9 = new SupportingDocument();
      SupportingDocument supportingDocument10 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      // Undeclared exception!
      try { 
        rawVariable0.containsSupportingDocument((SupportingDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setTitle("ALIAS_FILE_PATH");
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      rawVariable0.setColumnEnd("ALIAS_FILE_PATH");
      supportingDocument1.setTitle("G0m?4os+");
      supportingDocument1.setDocumentCode("G0m?4os+");
      supportingDocument1.setDescription("vCK?wg*I!Q2rWk");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument0.setDescription("UNABLE_TO_DELETE_ALIAS_FILE_PATH");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      supportingDocument3.setDocumentCode("*%$W3rn9h=T");
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      SupportingDocument supportingDocument7 = new SupportingDocument();
      rawVariable0.containsSupportingDocument(supportingDocument5);
      rawVariable0.getDisplayItemIdentifier();
      assertEquals("ALIAS_FILE_PATH", rawVariable0.getColumnEnd());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setTitle("/v");
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument0);
      rawVariable0.setCategory("/v");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument0.setTitle("oF");
      supportingDocument1.setFileName("(|]\u0004Bj");
      supportingDocument0.setDocumentCode("[");
      supportingDocument1.setDescription("oF");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      supportingDocument2.setDescription("oF");
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      SupportingDocument supportingDocument7 = new SupportingDocument();
      SupportingDocument supportingDocument8 = new SupportingDocument();
      boolean boolean0 = rawVariable0.containsSupportingDocument(supportingDocument2);
      assertEquals("/v", rawVariable0.getCategory());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.getCleaningDescription();
      assertFalse(derivedVariable0.isCoded());
      assertFalse(derivedVariable0.isCleaned());
      assertFalse(derivedVariable0.isNewRecord());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setNotes("variable.name.label");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.removeSourceVariable(derivedVariable1);
      derivedVariable0.setCleaningDescription("4qP");
      derivedVariable0.getNotes();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      derivedVariable0.addOntologyTerms(arrayList0);
      assertEquals("4qP", derivedVariable0.getCleaningDescription());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.154474348110858
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable2);
      DerivedVariable derivedVariable4 = new DerivedVariable();
      User user0 = new User("X$U~8'r88", "X$U~8'r88");
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable3);
      User user1 = new User();
      DerivedVariable derivedVariable5 = new DerivedVariable();
      derivedVariable2.setNotes("X$U~8'r88");
      ArrayList<Variable> arrayList0 = derivedVariable5.getSourceVariables();
      arrayList0.add((Variable) rawVariable0);
      DerivedVariable derivedVariable6 = new DerivedVariable();
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>();
      derivedVariable4.setSourceVariables(arrayList1);
      derivedVariable2.getAlternativeVariable();
      assertEquals("X$U~8'r88", derivedVariable2.getNotes());
      
      derivedVariable4.containsSourceVariable(derivedVariable3);
      assertEquals(0, derivedVariable3.getIdentifier());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.8350684354515376
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable1.questionNumber = "yI{6e/TUAI%dgg|.w";
      rawVariable0.setAlternativeVariable(derivedVariable2);
      DerivedVariable derivedVariable3 = new DerivedVariable();
      User user0 = new User();
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable2);
      derivedVariable1.containsSourceVariable(derivedVariable2);
      DerivedVariable derivedVariable4 = new DerivedVariable();
      ArrayList<Variable> arrayList0 = derivedVariable4.getSourceVariables();
      arrayList0.add((Variable) derivedVariable1);
      DerivedVariable derivedVariable5 = new DerivedVariable();
      arrayList0.add((Variable) derivedVariable5);
      ArrayList<Variable> arrayList1 = derivedVariable2.getSourceVariables();
      ArrayList<Variable> arrayList2 = derivedVariable4.getSourceVariables();
      arrayList1.add((Variable) derivedVariable2);
      DerivedVariable derivedVariable6 = new DerivedVariable();
      derivedVariable4.setSourceVariables(arrayList2);
      DerivedVariable derivedVariable7 = new DerivedVariable();
      derivedVariable4.questionNumber = "yI{6e/TUAI%dgg|.w";
      DerivedVariable derivedVariable8 = new DerivedVariable();
      derivedVariable8.getAlternativeVariable();
      User user1 = new User("wv", "yI{6e/TUAI%dgg|.w");
      DerivedVariable derivedVariable9 = new DerivedVariable();
      ArrayList<MacawChangeEvent> arrayList3 = Variable.detectFieldChanges(user1, derivedVariable4, derivedVariable7);
      assertEquals("yI{6e/TUAI%dgg|.w", derivedVariable4.getQuestionNumber());
      assertEquals(1, arrayList3.size());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.8348528407695395
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable2);
      DerivedVariable derivedVariable4 = new DerivedVariable();
      User user0 = new User("X$U~8'r88", "X$U~8'r88");
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable3);
      User user1 = new User();
      ArrayList<Variable> arrayList0 = derivedVariable2.getSourceVariables();
      arrayList0.add((Variable) derivedVariable3);
      derivedVariable1.notes = "X$U~8'r88";
      derivedVariable4.removeSourceVariable(rawVariable0);
      DerivedVariable derivedVariable5 = new DerivedVariable();
      derivedVariable4.addSourceVariable(derivedVariable2);
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>();
      arrayList0.add((Variable) derivedVariable4);
      ArrayList<Variable> arrayList2 = derivedVariable5.getSourceVariables();
      arrayList2.add((Variable) derivedVariable2);
      derivedVariable3.setSourceVariables(arrayList1);
      DerivedVariable derivedVariable6 = new DerivedVariable();
      User user2 = new User("X$U~8'r88", "CANCEL");
      DerivedVariable derivedVariable7 = new DerivedVariable();
      RawVariable rawVariable1 = new RawVariable();
      Variable.detectFieldChanges(user2, derivedVariable1, rawVariable1);
      assertEquals("X$U~8'r88", derivedVariable1.getNotes());
      assertEquals("Unknown", derivedVariable1.getCleaningStatus());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = derivedVariable0.getOntologyTerms();
      derivedVariable0.addOntologyTerms(arrayList0);
      derivedVariable0.setIsNewRecord(true);
      derivedVariable0.setIsNewRecord(false);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      // Undeclared exception!
      try { 
        derivedVariable0.updateOntologyTerm((OntologyTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setTitle("ALIAS_FILE_PATH");
      rawVariable0.addSupportingDocument(supportingDocument0);
      rawVariable0.setQuestionNumber("ALIAS_FILE_PATH");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setDescription("yvNLUKw$_o");
      supportingDocument1.setDocumentCode("ALIAS_FILE_PATH");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      rawVariable0.containsSupportingDocument(supportingDocument3);
      assertEquals("ALIAS_FILE_PATH", rawVariable0.getQuestionNumber());
      
      System.setCurrentTimeMillis((-1939L));
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<Variable> arrayList0 = derivedVariable0.getSourceVariables();
      derivedVariable0.addSourceVariables(arrayList0);
      assertEquals(0, derivedVariable0.getIdentifier());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setYear("UNABLE_TO_GET_COMPLETE_VARIABLE_DATA");
      rawVariable0.getYear();
      assertEquals("UNABLE_TO_GET_COMPLETE_VARIABLE_DATA", rawVariable0.getYear());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.addOntologyTerm(ontologyTerm1);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      Consumer<OntologyTerm> consumer0 = (Consumer<OntologyTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      arrayList0.add(ontologyTerm0);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      derivedVariable0.setAlias("nnbN:Cw~^]Uq");
      ontologyTerm0.setOntologyName("S:6n\"Z?:DUAe");
      OntologyTerm ontologyTerm6 = new OntologyTerm();
      User user0 = new User();
      OntologyTerm ontologyTerm7 = new OntologyTerm();
      derivedVariable0.getSourceVariables();
      assertEquals("nnbN:Cw~^]Uq", derivedVariable0.getAlias());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.301608716407634
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setTitle("ALIAS_FILE_PATH");
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.removeSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument1);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument2.setTitle(" ~0sv");
      supportingDocument0.setFileName("ALIAS_FILE_PATH");
      supportingDocument0.setDocumentCode("UNABLE_TO_REGISTER_CHANGE_EVENTS");
      supportingDocument0.setDescription("ALIAS_FILE_PATH");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      supportingDocument3.setDescription((String) null);
      SupportingDocument supportingDocument5 = new SupportingDocument();
      SupportingDocument supportingDocument6 = new SupportingDocument();
      SupportingDocument supportingDocument7 = new SupportingDocument();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      try { 
        DerivedVariable.validateFields(derivedVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.554035648050529
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      LinkedList<OntologyTerm> linkedList0 = new LinkedList<OntologyTerm>();
      linkedList0.remove((Object) ontologyTerm1);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      LinkedList<OntologyTerm> linkedList1 = new LinkedList<OntologyTerm>(arrayList0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      linkedList1.add(ontologyTerm3);
      LinkedList<OntologyTerm> linkedList2 = new LinkedList<OntologyTerm>();
      linkedList2.parallelStream();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      LinkedList<OntologyTerm> linkedList3 = new LinkedList<OntologyTerm>(arrayList0);
      OntologyTerm ontologyTerm5 = new OntologyTerm();
      linkedList3.add(ontologyTerm5);
      linkedList0.add((OntologyTerm) null);
      linkedList0.removeFirst();
      LinkedList<OntologyTerm> linkedList4 = new LinkedList<OntologyTerm>();
      linkedList4.offerFirst(ontologyTerm4);
      LinkedList<OntologyTerm> linkedList5 = new LinkedList<OntologyTerm>();
      OntologyTerm ontologyTerm6 = new OntologyTerm();
      linkedList2.parallelStream();
      ValueLabel valueLabel0 = new ValueLabel();
      linkedList1.remove((Object) valueLabel0);
      OntologyTerm ontologyTerm7 = new OntologyTerm();
      OntologyTerm ontologyTerm8 = new OntologyTerm();
      User user0 = new User("XT", "k");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.columnStart = "z;?'";
      Variable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      ArrayList<Variable> arrayList1 = derivedVariable0.getSourceVariables();
      derivedVariable0.setSourceVariables(arrayList1);
      assertEquals("z;?'", derivedVariable0.getColumnStart());
  }
}
