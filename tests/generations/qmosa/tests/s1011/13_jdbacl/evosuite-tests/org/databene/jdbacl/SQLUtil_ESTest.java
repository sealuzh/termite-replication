/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 11:28:33 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.Vector;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.DataTypeDescriptor;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.compile.CostEstimateImpl;
import org.apache.derby.impl.sql.compile.CurrentRowLocationNode;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.HashJoinStrategy;
import org.apache.derby.impl.sql.compile.IntersectOrExceptNode;
import org.apache.derby.impl.sql.compile.Predicate;
import org.apache.derby.impl.sql.compile.PredicateList;
import org.apache.derby.impl.sql.compile.ProjectRestrictNode;
import org.apache.derby.impl.sql.compile.SelectNode;
import org.apache.derby.impl.sql.compile.SubqueryList;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBConnection;
import org.h2.expression.Parameter;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.value.ValueLobDb;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte byte0 = (byte) (-1);
      IntersectOrExceptNode intersectOrExceptNode0 = new IntersectOrExceptNode();
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8927555565293948
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLUtil.substituteMarkers("alter tables:;$estring(", "alter tables:;$estring(", "alter tables:;$estring(");
      SQLUtil.isQuery("alter tables:;$estring(");
      SQLUtil.isProcedureCall("alter tables:;$estring(");
      SQLUtil.mutatesStructure("~Hg**Vq{$RP");
      ArrayList<VersionNumberComponent> arrayList0 = new ArrayList<VersionNumberComponent>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "NCLOB";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      SQLUtil.normalize("alter tables:;$estring(", true);
      StringBuilder stringBuilder0 = new StringBuilder(522);
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = 'm';
      charArray0[2] = 'C';
      charArray0[3] = '';
      charArray0[4] = '1';
      charArray0[5] = '';
      charArray0[6] = '\"';
      charArray0[7] = '4';
      charArray0[8] = 'r';
      stringBuilder0.append(charArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("FmC1\"4r", stringBuilder0.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.118506444504226
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "DW(l(!g=r9/7N";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "je^_gM|?:ZB9!9\"";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "UNIQUE ", true, stringArray0);
      dBUniqueConstraint0.isIdentical((DBObject) null);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT \"UNIQUE \" UNIQUE (DW(l(!g=r9/7N, , , je^_gM|?:ZB9!9\", , )", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("UNIQUE ");
      Locale locale0 = Locale.UK;
      mockPrintWriter0.format(locale0, "call", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string1 = SQLUtil.join("executecreate mat]rialized views:;$etstring(", "A", stringArray0, "create unique indexcreate mat]rialized views:;$etstring(", "executecreate mat]rialized views:;$etstring(", stringArray0);
      assertEquals("executecreate mat]rialized views:;$etstring( join create unique indexcreate mat]rialized views:;$etstring( as executecreate mat]rialized views:;$etstring( on A.DW(l(!g=r9/7N = executecreate mat]rialized views:;$etstring(.DW(l(!g=r9/7N and A.null = executecreate mat]rialized views:;$etstring(.null and A.null = executecreate mat]rialized views:;$etstring(.null and A.je^_gM|?:ZB9!9\" = executecreate mat]rialized views:;$etstring(.je^_gM|?:ZB9!9\" and A.null = executecreate mat]rialized views:;$etstring(.null and A.null = executecreate mat]rialized views:;$etstring(.null", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-1);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(90086, byteArray0, 128L);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars(8, 0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.nval = (-25.842488981863713);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ttype = (int) (byte) (-1);
      SQLUtil.renderNumber(streamTokenizer0);
      DataTypeDescriptor dataTypeDescriptor0 = DataTypeDescriptor.getBuiltInDataTypeDescriptor(14, false, (-2457));
      assertNull(dataTypeDescriptor0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FromVTI fromVTI0 = new FromVTI();
      Random.setNextRandom(2);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      FromVTI fromVTI1 = new FromVTI();
      fromVTI0.setSharedState("PURE_JAVA", 0);
      DataTypeDescriptor.getBuiltInDataTypeDescriptor((-365), true, 0);
      Random.setNextRandom((-56318524));
      String string0 = SQLUtil.renderValue(fromVTI1);
      assertEquals("", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DBDataType.getInstance((-1439), "CHAR_OCTET_LENGTH");
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte) (-61), " ADD ");
      dBDataType0.isNumber();
      dBDataType0.isNumber();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TimeZone.getAvailableIDs();
      boolean boolean0 = SQLUtil.isDML(" NOT");
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal(" ADD ");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter session");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-1);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(90086, byteArray0, 128L);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars(8, 0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.nval = (double) (-1);
      streamTokenizer0.lowerCaseMode(false);
      SQLUtil.renderNumber(streamTokenizer0);
      DataTypeDescriptor dataTypeDescriptor0 = DataTypeDescriptor.getBuiltInDataTypeDescriptor(14, false, (-2457));
      assertNull(dataTypeDescriptor0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1950865325403197
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      System.setCurrentTimeMillis((-462L));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "setString(";
      stringArray0[1] = "setString(";
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      SQLUtil.mutatesDataOrStructure("select");
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      try { 
        slaveDatabase0.getTimeFormat();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You are trying to do an operation that uses the territory of the database, but the database does not have a territory.
         //
         verifyException("org.apache.derby.iapi.error.StandardException", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "";
      SQLUtil.substituteMarkers("", "rename", "");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "@57D7{7MfD~fil|j", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("", false, dBTable0, "@57D7{7MfD~fil|j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1439), "CHAR_OCTET_LENGTH");
      DBDataType dBDataType1 = DBDataType.getInstance((int) (byte) (-61), " ADD ");
      dBDataType1.isNumber();
      dBDataType1.isNumber();
      dBDataType1.isNumber();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      dBDataType0.isNumber();
      TimeZone.getAvailableIDs();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("@FSDgoDar!.vo#", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setDefaultValue("BFGpZ=");
      defaultDBColumn0.setType(dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("@FSDgoDar!.vo# CHAR_OCTET_LENGTH DEFAULT BFGpZ= NULL", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.875278940481297
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLUtil.substituteMarkers("create unique indexyreate uiique index", "QBX", "QBX");
      SQLUtil.isQuery("y._-J~5z7}dCGz%B");
      SQLUtil.isProcedureCall("create unique indexyreate uiique index");
      DBCatalog dBCatalog0 = new DBCatalog("~Hg**Vq{$RP");
      SQLUtil.mutatesStructure("create unique indexyreate uiique index");
      ArrayList<VersionNumberComponent> arrayList0 = new ArrayList<VersionNumberComponent>();
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create unique indexyreate uiique index";
      SQLUtil.join(" WHERE ", "create unique indexyreate uiique index", stringArray0, "org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl", "alter ", stringArray0);
      SQLUtil.normalize("JMH# O)sZ@.9q \"{K", true);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2097962778274995
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[14];
      boolean boolean0 = SQLUtil.isQuery("");
      DBCatalog dBCatalog0 = new DBCatalog("");
      Boolean boolean1 = SQLUtil.mutatesStructure("");
      assertTrue(boolean1.equals((Object)boolean0));
      
      ArrayList<VersionNumberComponent> arrayList0 = new ArrayList<VersionNumberComponent>();
      Vector<String> vector0 = new Vector<String>();
      dBCatalog0.getSchema("");
      String string0 = SQLUtil.join("create unique index~hg**vq{$rp", "TRIGGER", stringArray0, "boRZ,zySd?<", "TRIGGER", stringArray0);
      assertEquals("create unique index~hg**vq{$rp join boRZ,zySd?< as TRIGGER on TRIGGER.null = TRIGGER.null and TRIGGER.null = TRIGGER.null and TRIGGER.null = TRIGGER.null and TRIGGER.null = TRIGGER.null and TRIGGER.null = TRIGGER.null and TRIGGER.null = TRIGGER.null and TRIGGER.null = TRIGGER.null and TRIGGER.null = TRIGGER.null and TRIGGER.null = TRIGGER.null and TRIGGER.null = TRIGGER.null and TRIGGER.null = TRIGGER.null and TRIGGER.null = TRIGGER.null and TRIGGER.null = TRIGGER.null and TRIGGER.null = TRIGGER.null", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("", string1);
      
      boolean boolean2 = SQLUtil.isDDL("boRZ,zySd?<");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-1);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(90086, byteArray0, 128L);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars(8, 0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.sval = ")";
      streamTokenizer0.nval = (double) 20;
      streamTokenizer0.wordChars(2, 0);
      streamTokenizer0.ttype = (int) (byte) (-1);
      SQLUtil.renderNumber(streamTokenizer0);
      CostEstimateImpl costEstimateImpl0 = new CostEstimateImpl(10, 4, 0.33);
      IntersectOrExceptNode intersectOrExceptNode0 = new IntersectOrExceptNode();
      boolean boolean0 = intersectOrExceptNode0.isMaterializable();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "5r2\"M])JZ");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-1994356563), "CONSTRAINT ");
      defaultDBTable0.addColumn(defaultDBColumn0);
      DBDataType dBDataType0 = DBDataType.getInstance((-2331), "bc{UZhUq'EBF*");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("5r2\"M])JZ", defaultDBTable1, dBDataType0, integer0);
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("()", defaultDBTable1, dBDataType0, integer1, integer1);
      defaultDBColumn2.toString();
      DBSchema dBSchema0 = new DBSchema("intoi:;$etstring(", (DBCatalog) null);
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("bc{UZhUq'EBF*", defaultDBTable1, 145, "=*");
      defaultDBColumn2.setOwner(dBSchema0);
      defaultDBColumn3.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.join("", "intoi:;$etstring(", (String[]) null, "jS", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-1);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(90086, byteArray0, 128L);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars(8, 0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.nval = 0.12;
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ttype = (int) (byte) (-1);
      SQLUtil.renderNumber(streamTokenizer0);
      DataTypeDescriptor dataTypeDescriptor0 = DataTypeDescriptor.getBuiltInDataTypeDescriptor(14, false, (-2457));
      assertNull(dataTypeDescriptor0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5764356996224858
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[9];
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("call", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Object object0 = new Object();
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.normalize("truncateyreate uiique index", false);
      SQLUtil.renderColumnNames(stringArray0);
      Boolean.valueOf(true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncateyreate uiique index");
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)35;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"x~>|5%}?dJ`\"o-l4C", defaultDBTable0, 207, "\"x~>|5%}?dJ`\"o-l4C");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = 'w';
      charArray0[2] = ')';
      charArray0[3] = '_';
      stringBuilder0.append(286.244F);
      charArray0[4] = '}';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(8, (long) 207);
      System.setCurrentTimeMillis(0L);
      StringBuilder stringBuilder3 = stringBuilder2.append((-1850.6458653));
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder3);
      assertEquals("286.244l207w)_}-1850.6458653\"X~>|5%}?DJ`\"O-L4C", stringBuilder3.toString());
      assertEquals("286.244l207w)_}-1850.6458653\"X~>|5%}?DJ`\"O-L4C", stringBuilder0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.273240950709537
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      System.setCurrentTimeMillis((-462L));
      Boolean.valueOf("setStr,ing(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Al,z");
      System.setCurrentTimeMillis((-462L));
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("execcreate m", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      FromVTI fromVTI0 = new FromVTI();
      DBDataType.getInstance(2, "Al,z");
      System.setCurrentTimeMillis((-462L));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "setStr,ing(";
      stringArray0[1] = "Al,z";
      stringArray0[2] = "DataDictionaryVersion";
      stringArray0[3] = "7JzN~j\"6xL*),";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "7JzN~j\"6xL*),", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Al,z", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Al,z", true, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Al,z FOREIGN KEY (setStr,ing(, Al,z, DataDictionaryVersion, 7JzN~j\"6xL*),) REFERENCES Al,z(setStr,ing(, Al,z, DataDictionaryVersion, 7JzN~j\"6xL*),)", string0);
      
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint1, nameSpec1);
      assertEquals("CONSTRAINT 7JzN~j\"6xL*), UNIQUE (setStr,ing(, Al,z, DataDictionaryVersion, 7JzN~j\"6xL*),)", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7689192975524
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "CHAR_OCTET_LENGTH";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CHAR_OCTET_LENGTH", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      File file0 = FileUtil.canonicalFile("BH");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      PrintWriter printWriter0 = mockPrintWriter1.printf("CHAR_OCTET_LENGTH", (Object[]) stringArray0);
      mockPrintWriter0.append('T');
      StringWriter stringWriter0 = new StringWriter();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BH");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CHAR_OCTET_LENGTH", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("CHAR_OCTET_LENGTH", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, printWriter0);
      assertEquals("table", dBTable0.getObjectType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9053219129459422
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 13, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-3492), "C");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      dBDataType0.isAlpha();
      defaultDBTable0.addColumn(defaultDBColumn0);
      String[] stringArray1 = new String[0];
      SQLUtil.renderWhereClause(stringArray1, stringArray1);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.432553284919671
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 874, "");
      defaultDBTable0.getColumn("");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.getForeignKeyConstraint();
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      jdbcDataSource0.toString();
      jdbcDataSource0.setLoginTimeout(50004);
      SQLUtil.mutatesDataOrStructure("ds306: url= user=");
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("callalter tables:;$etstring(");
      SQLUtil.mutatesStructure("callalter tables:;$etstring(");
      ArrayList<VersionNumberComponent> arrayList0 = new ArrayList<VersionNumberComponent>();
      Vector<String> vector0 = new Vector<String>();
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("Drf3", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4497544252414523
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("F", true, "F", "F");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "lADuCSRcOs)v6[;cmC");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(", defaultDBTable0, (-1994356563), "oFA{*%$W3rn9");
      defaultDBTable0.addColumn(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("t@!5", defaultDBTable0, 325, "F");
      defaultDBTable0.addColumn(defaultDBColumn1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintWriter0.println((-202423488));
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.printf("drop indexs:;$etstring(", objectArray0);
      printWriter0.checkError();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertFalse(mockPrintWriter0.equals((Object)printWriter0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("3luUH-:", false);
      assertEquals("3luUH - :", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9313637081915069
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = false;
      SQLUtil.normalize("Nm~hg**vq{$", false);
      String string0 = "selectcreate mat]rialized views:;$etstring(";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("selectcreate mat]rialized views:;$etstring(", (String[]) null, "Nm ~ hg * * vq { $", "selectcreate mat]rialized views:;$etstring(", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0615632381579823
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-61);
      Object object0 = new Object();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create materialized view", 8);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "updateyreate uiique index";
      SQLUtil.renderColumnListWithTableName("updateyreate uiique index", stringArray0);
      Character.lowSurrogate(2687);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("renameyreate uiique index");
      String[] stringArray1 = columnDescriptorList0.getColumnNames();
      Byte byte0 = new Byte((byte) (-61));
      Integer.compareUnsigned((-328), 3420);
      Integer integer0 = new Integer((byte) (-1));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updateyreate uiique index", defaultDBTable0, (DBDataType) null, integer0, (Integer) null);
      columnDescriptorList0.add((Object) defaultDBColumn0);
      Boolean boolean0 = Boolean.FALSE;
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.join("J ", "Xapoi@]sN|!{", stringArray0, "Xapoi@]sN|!{", " AND ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6337723332221934
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      System.setCurrentTimeMillis((-462L));
      SQLUtil.mutatesDataOrStructure("setString(");
      String[] stringArray0 = new String[12];
      stringArray0[0] = "setString(";
      stringArray0[1] = "setString(";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)67;
      SQLUtil.mutatesStructure("delete");
      Character.valueOf('G');
      SQLUtil.isDDL("update");
      Character.highSurrogate(3753);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.remainderUnsigned(122, (-24));
      SQLUtil.renderValue(integer0);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(39, byteArray0, (byte)67);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(reader0);
      SQLUtil.isQuery("getSetTransactionResultSet");
      System.setCurrentTimeMillis((-5868L));
      String[] stringArray1 = new String[8];
      stringArray1[0] = "s:;$ets";
      stringArray1[1] = "getSetTransactionResultSet";
      stringArray1[2] = "delete";
      stringArray1[3] = null;
      stringArray1[4] = "2";
      stringArray1[5] = "delete";
      stringArray1[6] = null;
      stringArray1[7] = null;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, stringArray0, "setString(", "setString(", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1439), "CHAR_OCTET_LENGTH");
      DBDataType dBDataType1 = DBDataType.getInstance((int) (byte) (-61), " ADD ");
      dBDataType1.isNumber();
      dBDataType1.isNumber();
      dBDataType1.isNumber();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      dBDataType0.isNumber();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ADD ";
      stringArray0[1] = " = ";
      stringArray0[2] = " ADD ";
      stringArray0[3] = " = ";
      stringArray0[4] = "CHAR_OCTET_LENGTH";
      stringArray0[5] = "CHAR_OCTET_LENGTH";
      stringArray0[6] = "CHAR_OCTET_LENGTH";
      stringArray0[7] = "<:d";
      stringArray0[8] = " = ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " = ", false, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      dBUniqueConstraint0.toString();
      StringBuilder stringBuilder0 = new StringBuilder(547);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \" = \" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.203456186693981
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "DW(l(!g=r9/7N";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "je^_gM|?:ZB9!9\"";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "UNIQUE ", true, stringArray0);
      dBUniqueConstraint0.isIdentical((DBObject) null);
      dBUniqueConstraint0.toString();
      StringBuilder stringBuilder0 = new StringBuilder(86);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-61);
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\tNumber of start/stop statistics predicates is : ";
      stringArray0[1] = "EUC_TW";
      stringArray0[2] = "&!,q%Q0";
      stringArray0[3] = "[J4";
      stringArray0[4] = "#5.:%{{";
      stringArray0[5] = "J_0d[x(|G";
      stringArray0[6] = "ASSERT";
      stringArray0[7] = "execcreate mat]rialized views:;$etstring(";
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "";
      String[] stringArray0 = new String[8];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      stringArray0[1] = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[3] = "";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(4656, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.getInteger("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.toString();
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      IntersectOrExceptNode intersectOrExceptNode0 = new IntersectOrExceptNode();
      intersectOrExceptNode0.isMaterializable();
      IntersectOrExceptNode intersectOrExceptNode1 = new IntersectOrExceptNode();
      int int0 = 90134;
      long long0 = (-3977L);
      String string1 = "alter materialized view~hg**vq{$rp";
      boolean boolean0 = false;
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 4656;
      intArray0[6] = 48;
      String string2 = "0+*oqfU(-}LPIs/";
      String string3 = null;
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.461243664095091
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , )", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 13, "");
      defaultDBTable0.getColumn("");
      DBDataType dBDataType0 = DBDataType.getInstance((-3492), "C");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      String string1 = defaultDBColumn0.toString();
      assertEquals(" : ", string1);
      
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("PRIMARY KEY (, , , , , , , )", defaultDBTable0, dBDataType0, integer0, integer0);
      DBDataType.getInstance((-3492), "CONSTRAINT ");
      defaultDBTable0.getColumn("");
      defaultDBColumn2.isEquivalent(defaultDBColumn0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string2);
      
      String string3 = SQLUtil.innerJoin("", stringArray0, "org.apache.derby.iapi.types.TypeId", "", stringArray0);
      assertEquals("org.apache.derby.iapi.types.TypeId as  on . = . and . = . and . = . and . = . and . = . and . = . and . = . and . = .", string3);
      
      String string4 = SQLUtil.ownerDotComponent(dBColumnArray0[0]);
      assertEquals("null.", string4);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-1);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(90086, byteArray0, 114L);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.parseNumbers();
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4172383526509957
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("create table ");
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("execfirefox");
      boolean boolean2 = SQLUtil.isDDL("create table ");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("alter table");
      CurrentRowLocationNode currentRowLocationNode0 = new CurrentRowLocationNode();
      CurrentRowLocationNode currentRowLocationNode1 = new CurrentRowLocationNode();
      currentRowLocationNode1.init((Object) stringBuilder0);
      // Undeclared exception!
      try { 
        currentRowLocationNode0.genEqualsFalseTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-61);
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0211196177983384
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1439), "CHAR_OCTET_LENGTH");
      DBDataType dBDataType1 = DBDataType.getInstance((int) (byte) (-61), " ADD ");
      dBDataType1.isNumber();
      dBDataType1.isNumber();
      dBDataType1.isNumber();
      dBDataType0.isNumber();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      dBDataType0.isNumber();
      String[] stringArray0 = TimeZone.getAvailableIDs();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" ADD ", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setType(dBDataType0);
      defaultDBTable0.getColumn(" ADD ");
      DBDataType.getInstance(2385, " ADD ");
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      System.setCurrentTimeMillis((-1439));
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("yreate", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("CHAR_OCTET_LENGTH");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("isc_info_sql_alias ", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      StringBuilder stringBuilder3 = SQLUtil.addOptionalCondition(" ADD ", stringBuilder2);
      SQLUtil.addOptionalCondition(" ADD ,  ADD ,  ADD ,  ADD ", stringBuilder3);
      assertEquals("CHAR_OCTET_LENGTH and isc_info_sql_alias CONSTRAINT yreate  or  ADD  or  ADD ,  ADD ,  ADD ,  ADD ", stringBuilder3.toString());
      assertEquals("CHAR_OCTET_LENGTH and isc_info_sql_alias CONSTRAINT yreate  or  ADD  or  ADD ,  ADD ,  ADD ,  ADD ", stringBuilder0.toString());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, " 3/G");
      stringArray0[1] = " 3/G";
      stringArray0[3] = "";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      int int0 = (-1994356563);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Rp{v%FMr", defaultDBTable1, (-1994356563), "");
      defaultDBTable0.addColumn(defaultDBColumn0);
      DBDataType.getInstance(4656, "pj^30^y");
      DBSchema dBSchema0 = new DBSchema("`s%", (DBCatalog) null);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("pj^30^y", defaultDBTable0, 4656, "insert");
      int int1 = 322;
      DBDataType.getInstance(322, "E1g>");
      defaultDBColumn1.getNotNullConstraint();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " 3/G");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.5732052067491771
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ireate u", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = new Boolean("akHy$%d/;Gg[J9N>n");
      Boolean.logicalAnd(true, true);
      Boolean.compare(false, false);
      String string0 = SQLUtil.normalize("akHy$%d/;Gg[J9N>n", (boolean) boolean0);
      assertEquals("akHy $ % d / ; Gg [ J9N > n", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "truncate";
      String[] stringArray0 = new String[7];
      String string1 = "calxl";
      stringArray0[0] = "calxl";
      stringArray0[1] = "map";
      stringArray0[2] = "map";
      stringArray0[3] = "truncate";
      stringArray0[4] = "execsetstring(";
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ireate u", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int int0 = (-301667333);
      String string0 = "alter indexfirefox";
      String string1 = "(DRDAID = ";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("yiP5?1:!76", (DBTable) null, (-301667333), "(DRDAID = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (DRDAID = 
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.5732052067491771
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-61);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("yreate uiique index", 3);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil sQLUtil0 = new SQLUtil();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("$,W]f5hb'zlNQHpne*", false);
      Random.setNextRandom((byte) (-61));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.355785150714608
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Object object0 = new Object();
      String string0 = "&!,q%Q0";
      IntersectOrExceptNode intersectOrExceptNode0 = new IntersectOrExceptNode();
      SQLUtil.mutatesDataOrStructure("select into");
      StringBuilder stringBuilder0 = new StringBuilder(1);
      HashJoinStrategy hashJoinStrategy0 = new HashJoinStrategy();
      OptimizablePredicateList optimizablePredicateList0 = null;
      SelectNode selectNode0 = new SelectNode();
      selectNode0.getWherePredicates();
      IntersectOrExceptNode intersectOrExceptNode1 = new IntersectOrExceptNode();
      // Undeclared exception!
      try { 
        hashJoinStrategy0.getBasePredicates((OptimizablePredicateList) null, (OptimizablePredicateList) null, intersectOrExceptNode1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.HashJoinStrategy", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Pb5`M/");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = "&h3YN2(F";
      SQLUtil.addOptionalCondition("&h3YN2(F", stringBuilder0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "&h3YN2(F");
      StringBuilder stringBuilder2 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-113738528), 'A');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4993646124305886
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[4] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 40, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = (DefaultDBColumn)defaultDBTable0.getColumn("");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      defaultDBColumn0.setTable(defaultDBTable0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      Integer.max(40, (-3492));
      Integer.getInteger("", (Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn1;
      DBDataType.getInstance((-3492), "");
      DefaultDBColumn defaultDBColumn2 = (DefaultDBColumn)defaultDBTable0.getColumn("");
      defaultDBColumn2.isUnique();
      defaultDBColumn1.isEquivalent(defaultDBColumn0);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn2;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[4] = "C";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("SIGN(double)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"double\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("fu~yA|a[%''ox{S");
      String string0 = "W(e@W_b7)d\"=PhRO";
      int int0 = (-301667348);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("fu~yA|a[%''ox{S", defaultDBTable0, (-301667348), "W(e@W_b7)d\"=PhRO");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e@W_b7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "fuLyA|a[%''ox{ S";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("fuLyA|a[%''ox{ S");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("fuLyA|a[%''ox{ S", defaultDBTable0, (-301667333), "W(,e@W_b7)d\"=PhRO[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.120263272023643
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Character.isAlphabetic(0);
      Character.isIdeographic(69);
      Character.highSurrogate(47);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      FromVTI fromVTI0 = new FromVTI();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(3, "truncatesetstr,ing(");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".5_Rz ^W]GJWQr", defaultDBTable0, dBDataType0, integer1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "truncatesetstr,ing(";
      stringArray0[1] = "truncatesetstr,ing(";
      stringArray0[2] = null;
      stringArray0[3] = ".5_Rz ^W]GJWQr";
      stringArray0[4] = null;
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("truncatesetstr,ing( = 'truncatesetstr,ing(' AND truncatesetstr,ing( = 'truncatesetstr,ing(' AND null = null AND .5_Rz ^W]GJWQr = '.5_Rz ^W]GJWQr' AND null = null", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("c^EhU?gktZkz]h9s]M", false, defaultDBTable0, "into");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK into", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) null);
      FromVTI fromVTI0 = new FromVTI();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, (String[]) null);
      assertEquals("null as null on ", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.29357254279256
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "orgh2.command.ddl.CreateRole");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("orgh2.command.ddl.CreateRole", defaultDBTable0, 150, "orgh2.command.ddl.CreateRole");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("orgh2.command.ddl.CreateRole");
      mockPrintWriter0.println(150);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      pipedOutputStream0.close();
      PrintWriter printWriter0 = mockPrintWriter0.printf("orgh2.command.ddl.CreateRole", objectArray0);
      PrintWriter printWriter1 = mockPrintWriter0.append('!');
      StringWriter stringWriter0 = new StringWriter();
      printWriter0.print(0.0);
      stringWriter0.write(150);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-80);
      printWriter0.println((int) (byte)101);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      printWriter0.print("Aob}%g$P<(*5C3E~");
      mockPrintWriter0.println(534);
      printWriter0.println((Object) "orgh2.command.ddl.CreateRole");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(";|wV/UjlkvMyWsT<", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, printWriter1);
      assertNull(dBForeignKeyConstraint0.getDoc());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      System.setCurrentTimeMillis(200L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("wOGj9HZ", defaultDBTable0, 0, "wOGj9HZ");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintStream mockPrintStream0 = new MockPrintStream("select.obu#qw7 :jh9t");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("PRIMARY KEY ", objectArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ireate u", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = new Boolean("akHy$%d/;Gg[J9N>n");
      Boolean.logicalAnd(true, true);
      Boolean.compare(false, false);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Parameter parameter0 = new Parameter(0);
      columnDescriptorList0.add((Object) parameter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.h2.expression.Parameter cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9992323314068172
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Character.valueOf('6');
      Character.isSurrogate('u');
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Al,z");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Al,z";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Al,z", true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint1, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      SQLUtil.addRequiredCondition("Al,z", stringBuilder1);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.constraintName(dBPrimaryKeyConstraint1);
      SQLUtil.normalize("Shutting down TCP Server at ", true);
      SQLUtil.normalize("Shutting down TCP Server at", true);
      String[] stringArray1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6847854169135204
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) tableContainer0);
      genericDescriptorList0.ensureCapacity((-85518062));
      genericDescriptorList0.add((Object) null);
      tableContainer0.getTables(true, (List<DBTable>) genericDescriptorList0);
      SQLUtil.ownerDotComponent(tableContainer0);
      SQLUtil.typeAndName(tableContainer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null");
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBPrimaryKeyConstraint0.toString();
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("null", stringBuilder0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5658841404408412
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , )", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 13, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-3492), "C");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      defaultDBColumn0.toString();
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("PRIMARY KEY (, , , , , , , )", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      DBDataType.getInstance((-3492), "CONSTRAINT ");
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      defaultDBColumn2.isEquivalent(defaultDBColumn0);
      dBColumnArray0[4] = dBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", , , PRIMARY KEY (, , , , , , , ), ", string1);
      
      String string2 = SQLUtil.renderColumn(dBColumnArray0[3]);
      assertEquals("PRIMARY KEY (, , , , , , , ) C(3,3) NULL", string2);
      
      String string3 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , , , )", string3);
      
      String string4 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("null.", string4);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!9 F/)5f]";
      String[] stringArray1 = new String[13];
      SQLUtil.leftJoin("!9 F/)5f]", stringArray0, "U^AT>stZ@Lq_[kc[{cU", ";2m kZU2EIL f54j=Q", stringArray1);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("1H@N+h('h<[R)Q*^", stringArray1, ";2m kZU2EIL f54j=Q", "!9 F/)5f]", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("(^~Fj)@Tp8\"g", false);
      System.setCurrentTimeMillis((-509L));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      System.setCurrentTimeMillis((-462L));
      SQLUtil.normalize("n1.,.,?j", true);
      FromVTI fromVTI0 = new FromVTI();
      FromVTI fromVTI1 = new FromVTI();
      Random.setNextRandom(0);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      FromVTI fromVTI2 = new FromVTI();
      ProjectRestrictNode projectRestrictNode0 = new ProjectRestrictNode();
      // Undeclared exception!
      try { 
        projectRestrictNode0.genProjectRestrict();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.ResultSetNode", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.563023629494366
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("FOREIGN KEY ", 46);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = new Boolean("org.apache.eby.catalg.ty/esDefaultIfoImpl");
      String string0 = SQLUtil.normalize("org.apache.eby.catalg.ty/esDefaultIfoImpl", false);
      assertEquals("org.apache. eby.catalg.ty / esDefaultIfoImpl", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((byte) (-18), byteArray0, 1525L);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.wordChars(2309, (-56318524));
      String string0 = "Em";
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("Em", (String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-1);
      DBCatalog dBCatalog0 = new DBCatalog("execute");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "je^_gM|?:ZB9r!9\"");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("je^_gM|?:ZB9r!9\"", stringBuilder0);
      int int0 = (-293);
      // Undeclared exception!
      try { 
        stringBuilder1.delete((-174174976), (-293));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -174174976
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3412474390077769
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "deleteyreate uiique index";
      stringArray0[1] = "yreate uiique index";
      stringArray0[2] = "primar";
      stringArray0[3] = "r!FkHw";
      stringArray0[4] = "alter materialized view";
      stringArray0[5] = "gG|CstWm";
      stringArray0[6] = "Jg2x";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE deleteyreate uiique index = 'deleteyreate uiique index' AND yreate uiique index = 'yreate uiique index' AND primar = 'primar' AND r!FkHw = 'r!FkHw' AND alter materialized view = 'alter materialized view' AND gG|CstWm = 'gG|CstWm' AND Jg2x = 'Jg2x'", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) null);
      FromVTI fromVTI0 = new FromVTI();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLUtil.isQuery("PRIMARY KEY ");
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      int int0 = (-1988);
      Boolean boolean0 = Boolean.TRUE;
      Vector<String> vector0 = new Vector<String>();
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      SQLUtil.removeComments("aFS vX}sW'ws");
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[4] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 40, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      dBColumnArray0[1] = dBColumn0;
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      Integer.max(40, (-3492));
      Integer.getInteger("", (Integer) null);
      dBColumnArray0[3] = dBColumn0;
      DBDataType.getInstance((-3492), "");
      defaultDBTable0.getColumn("");
      Boolean.compare(false, false);
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "aD|%+jM:Cznj9xx]!";
      stringArray0[1] = "execsetstring(";
      stringArray0[2] = "execsetstring(";
      String[] stringArray1 = new String[5];
      stringArray1[1] = "map";
      stringArray1[2] = "map";
      stringArray1[3] = "aD|%+jM:Cznj9xx]!";
      stringArray1[4] = "execsetstring(";
      String string0 = SQLUtil.innerJoin("aD|%+jM:Cznj9xx]!", stringArray0, "", "&V", stringArray1);
      assertEquals(" as &V on aD|%+jM:Cznj9xx]!.aD|%+jM:Cznj9xx]! = &V.null and aD|%+jM:Cznj9xx]!.execsetstring( = &V.map and aD|%+jM:Cznj9xx]!.execsetstring( = &V.map", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1439), "CHAR_OCTET_LENGTH");
      DBDataType dBDataType1 = DBDataType.getInstance((int) (byte) (-61), " ADD ");
      dBDataType1.isNumber();
      dBDataType1.isNumber();
      dBDataType1.isNumber();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      dBDataType0.isNumber();
      String[] stringArray0 = defaultDBTable0.getColumnNames();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("@FSDgoDar!.vo#", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setType(dBDataType0);
      String string0 = SQLUtil.renderColumnListWithTableName(" ADD ", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isQuery("select intos:;$etstringx");
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      fBManagedConnectionFactory0.getTransactionIsolation();
      DBCatalog dBCatalog0 = new DBCatalog("3luUHK-:");
      DBSchema dBSchema0 = new DBSchema("7F4OywW|\"bj'wRA", dBCatalog0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "reate u.iqu";
      stringArray0[1] = "reate u.iqu";
      URI uRI0 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.4990104312963832
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[6];
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "je^_gM|?:ZB9!9\"";
      stringArray0[4] = null;
      stringArray0[0] = null;
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "UNIQUE ", true, stringArray0);
      dBUniqueConstraint0.isIdentical((DBObject) null);
      dBUniqueConstraint0.toString();
      StringBuilder stringBuilder0 = new StringBuilder(86);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("je^_gM|?:ZB9!9\"", defaultDBTable0, (DBDataType) null, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-61);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((byte) (-61), byteArray0, (byte) (-61));
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.lowerCaseMode(false);
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      String string1 = SQLUtil.renderValue("- 0");
      assertEquals("'- 0'", string1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.023064445916172
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      System.setCurrentTimeMillis((-462L));
      Boolean.valueOf("setStr,ing(");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "setStr,ing(";
      stringArray0[1] = "setStr,ing(";
      stringArray0[2] = "DataDictionaryVersion";
      stringArray0[3] = "DataDictionaryVersion";
      stringArray0[4] = "DataDictionaryVersion";
      stringArray0[5] = "DataDictionaryVersion";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Al,z");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "setStr,ing(", true, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      stringBuilder0.append((double) (-462L));
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      System.setCurrentTimeMillis((-462L));
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      FromVTI fromVTI0 = new FromVTI();
      DBDataType.getInstance(2, "Al,z");
      System.setCurrentTimeMillis((-462L));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 13, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      dBColumnArray0[1] = dBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-3492), "C");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      dBDataType0.isAlpha();
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.toString();
      Integer.max(2664, (-3492));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      Integer.toUnsignedString((-3492));
      Integer.getInteger("", (Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn1;
      DBDataType.getInstance((-3492), "");
      DBColumn dBColumn1 = defaultDBTable0.getColumn("");
      dBColumn1.isUnique();
      defaultDBColumn1.isEquivalent(defaultDBColumn0);
      dBColumnArray0[4] = dBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.renderColumnListWithTableName("iXL 0F\"X(*:m-3J", stringArray0);
      defaultDBColumn1.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cY[}&_N+KSuTCA5/N");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "cY[}&_N+KSuTCA5/N";
      stringArray0[1] = "cY[}&_N+KSuTCA5/N";
      stringArray0[2] = " FROM ";
      stringArray0[3] = "cY[}&_N+KSuTCA5/N";
      stringArray0[4] = " FROM ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "cY[}&_N+KSuTCA5/N", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertNull(defaultDBTable1.getName());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.394993443200781
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[7];
      stringArray0[3] = "A?";
      stringArray0[4] = "tvX;e5`o%yBv4#Sxko";
      stringArray0[5] = "A?";
      stringArray0[6] = "A?";
      String string0 = SQLUtil.leftJoin("A?", stringArray0, "tvX;e5`o%yBv4#Sxko", "tvX;e5`o%yBv4#Sxko", stringArray0);
      SQLUtil.parseColumnTypeAndSize("A?");
      String string1 = SQLUtil.innerJoin("8Dw@bo'89{8@vn", stringArray0, "9UdiZG}3", "execsetstring(", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("R\"_g/@*$3^`TW5vh+");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "R\"_g/@*$3^`TW5vh+";
      stringArray0[1] = "R\"_g/@*$3^`TW5vh+";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "R\"_g/@*$3^`TW5vh+";
      stringArray1[2] = "R\"_g/@*$3^`TW5vh+";
      stringArray1[3] = "R\"_g/@*$3^`TW5vh+";
      stringArray1[4] = "R\"_g/@*$3^`TW5vh+";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("R\"_g/@*$3^`TW5vh+", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (R\"_g/@*$3^`TW5vh+, R\"_g/@*$3^`TW5vh+) REFERENCES R\"_g/@*$3^`TW5vh+(, R\"_g/@*$3^`TW5vh+, R\"_g/@*$3^`TW5vh+, R\"_g/@*$3^`TW5vh+, R\"_g/@*$3^`TW5vh+)", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.9347268701657128
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "S<xecute";
      stringArray0[1] = "S<xecute";
      stringArray0[2] = "orgh2.command.ddl.CreateRole";
      stringArray0[3] = "S<xecute";
      stringArray0[4] = "S<xecute";
      stringArray0[5] = "orgh2.command.ddl.CreateRole";
      stringArray0[6] = "S<xecute";
      stringArray0[7] = "orgh2.command.ddl.CreateRole";
      stringArray0[8] = "orgh2.command.ddl.CreateRole";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("S<xecute", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.printf("orgh2.command.ddl.CreateRole", objectArray0);
      PrintWriter printWriter1 = mockPrintWriter0.append('!');
      StringWriter stringWriter0 = new StringWriter();
      printWriter1.print(0.0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-80);
      printWriter0.println((int) (byte)101);
      printWriter0.print((-462L));
      printWriter0.print("Aob}%g$P<(*5C3E~");
      mockPrintWriter0.println(534);
      printWriter0.println((long) '!');
      printWriter0.println((Object) "orgh2.command.ddl.CreateRole");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      System.setCurrentTimeMillis((-468L));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "DataDictionaryVersion";
      Character character0 = new Character('Q');
      Character.isIdeographic(5366);
      Character.highSurrogate(5366);
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'Q'", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Boolean.valueOf("yreate uiique index");
      CurrentRowLocationNode currentRowLocationNode0 = new CurrentRowLocationNode();
      SelectNode selectNode0 = new SelectNode();
      selectNode0.getFromList();
      Predicate predicate0 = new Predicate();
      predicate0.getReferencedMap();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("trT77FJc9L~zE%}|z+i", "yreate uiique index", versionNumber0);
      defaultDatabase0.getTable("yreate uiique index", false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "trT77FJc9L~zE%}|z+i";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLUtil.isDML("create mat]rialized views:;$etstring(");
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 13, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      dBColumnArray0[1] = dBColumn0;
      int int0 = (-3492);
      DBDataType dBDataType0 = DBDataType.getInstance((-3492), "C");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      defaultDBColumn0.toString();
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      Integer.getInteger("", (Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      DBDataType.getInstance((-3492), "CONSTRAINT ");
      defaultDBTable0.getColumn("");
      defaultDBColumn2.isEquivalent(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("Bd8f$M[>$PGpohtI", stringBuilder0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Bd8f$M[>$PGpohtI", "foreign key", (VersionNumber) null);
      defaultDatabase0.getTable("foreign key", false);
      int int0 = 1685;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Bd8f$M[>$PGpohtI", (DBTable) null, 1685, "I`U{T=4TP");
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("I`U{T=4TP", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.5837682495771985
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLUtil.substituteMarkers("alter tables:;$etstring(", "alter tables:;$etstring(", "alter tables:;$etstring(");
      SQLUtil.isQuery("alter tables:;$etstring(");
      SQLUtil.isProcedureCall("alter tables:;$etstring(");
      DBCatalog dBCatalog0 = new DBCatalog("~Hg**Vq{$RP");
      SQLUtil.mutatesStructure("~Hg**Vq{$RP");
      ArrayList<VersionNumberComponent> arrayList0 = new ArrayList<VersionNumberComponent>();
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alter tables:;$etstring(";
      stringArray0[1] = "alter tables:;$etstring(";
      stringArray0[2] = "alter tables:;$etstring(";
      stringArray0[3] = "'alter tables:;$etstring('";
      stringArray0[4] = "'alter tables:;$etstring('";
      stringArray0[5] = "K]k&).q]&G-LT aqUWt";
      stringArray0[6] = "inner";
      stringArray0[7] = "alter tables:;$etstring(";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("inner", stringArray0, "inner", "create unique indexcreate unique indexyreate uiique index", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "number of sta";
      stringArray0[1] = "number of sta";
      stringArray0[2] = "create";
      stringArray0[3] = "number of sta";
      stringArray0[4] = "number of sta";
      stringArray0[5] = "create";
      stringArray0[6] = "create";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "nV6LJ\"";
      stringArray1[1] = "number of sta";
      stringArray1[2] = "L .zyEG+<E|$KF'mM";
      stringArray1[3] = "number of sta";
      stringArray1[4] = "select intoeuc_tw";
      stringArray1[5] = "]SF8V?N;{lJ5wAXfV";
      stringArray1[6] = "G%J4,xT>ntoAM";
      String string0 = SQLUtil.join("create", "number of sta", stringArray0, "G%J4,xT>ntoAM", "]SF8V?N;{lJ5wAXfV", stringArray1);
      assertEquals("create join G%J4,xT>ntoAM as ]SF8V?N;{lJ5wAXfV on number of sta.number of sta = ]SF8V?N;{lJ5wAXfV.nV6LJ\" and number of sta.number of sta = ]SF8V?N;{lJ5wAXfV.number of sta and number of sta.create = ]SF8V?N;{lJ5wAXfV.L .zyEG+<E|$KF'mM and number of sta.number of sta = ]SF8V?N;{lJ5wAXfV.number of sta and number of sta.number of sta = ]SF8V?N;{lJ5wAXfV.select intoeuc_tw and number of sta.create = ]SF8V?N;{lJ5wAXfV.]SF8V?N;{lJ5wAXfV and number of sta.create = ]SF8V?N;{lJ5wAXfV.G%J4,xT>ntoAM", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.1534963399945894
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "Wk~;=_>;B!kaT(OW";
      String[] stringArray0 = new String[22];
      stringArray0[0] = "Wk~;=_>;B!kaT(OW";
      stringArray0[1] = "Wk~;=_>;B!kaT(OW";
      stringArray0[2] = "+";
      stringArray0[3] = "Wk~;=_>;B!kaT(OW";
      stringArray0[4] = "Wk~;=_>;B!kaT(OW";
      stringArray0[5] = "+";
      stringArray0[6] = "Wk~;=_>;B!kaT(OW";
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "Wk~;=_>;B!kaT(OW";
      objectArray0[2] = (Object) "+";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "Wk~;=_>;B!kaT(OW";
      objectArray0[5] = (Object) "Wk~;=_>;B!kaT(OW";
      objectArray0[6] = (Object) "Wk~;=_>;B!kaT(OW";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-1);
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(90086, byteArray0, 128L);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.parseNumbers();
      DataTypeDescriptor.getBuiltInDataTypeDescriptor((int) (byte) (-1), false, 287);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("sljj_KC(,y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: sljj_KC(,y
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "lADuCSRcOs)v6[;cmC";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("F", false, "F", "F");
      dBCheckConstraint0.setDoc("alter materialized viewyreate uiique index");
      int int0 = 363;
      StringBuilder stringBuilder0 = new StringBuilder(363);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) null);
      stringBuilder2.reverse();
      // Undeclared exception!
      try { 
        stringBuilder2.insert(363, (CharSequence) stringBuilder0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 363
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-61);
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\tNumber of start/stop statistics predicates is : ";
      MockFile mockFile0 = new MockFile("\tNumber of start/stop statistics predicates is : ");
      mockFile0.deleteOnExit();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println(638);
      mockPrintWriter0.print((long) (byte) (-61));
      mockPrintWriter0.print("\tNumber of start/stop statistics predicates is : ");
      mockPrintWriter0.println(1311);
      Parameter parameter0 = new Parameter(58);
      mockPrintWriter0.println((Object) parameter0);
      mockPrintWriter0.println('T');
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("iU`*ad");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("iU`*ad", stringBuilder0);
      StringBuilder stringBuilder2 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder0.append(stringBuffer0);
      stringBuffer0.append((-1.0));
      StringBuilder stringBuilder4 = new StringBuilder("iU`*ad");
      stringBuilder4.append("iU`*ad");
      stringBuilder2.append((int) (byte) (-61));
      StringBuilder stringBuilder5 = new StringBuilder(stringBuilder3);
      assertEquals("iU`*ad and iU`*ad-1.0", stringBuffer0.toString());
      assertEquals("iU`*ad and iU`*adiU`*ad and iU`*ad", stringBuilder0.toString());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "&8^3yv/<*9";
      stringArray0[2] = "&8^3yv/<*9";
      stringArray0[3] = "&8^3yv/<*9";
      stringArray0[4] = "&8^3yv/<*9";
      stringArray0[5] = "&8^3yv/<*9";
      stringArray0[6] = "&8^3yv/<*9";
      stringArray0[7] = "&8^3yv/<*9";
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&8^3yv/<*9", defaultDBTable0, 13, "&8^3yv/<*9");
      DBColumn dBColumn0 = defaultDBTable0.getColumn("&8^3yv/<*9");
      dBColumnArray0[1] = dBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance(13, "C");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("&8^3yv/<*9", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      assertEquals("C(3)", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.701376140435607
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+", defaultDBTable0, (-400633194), "*Ara?Kha");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*Ara?Kha";
      stringArray0[1] = "*Ara?Kha";
      stringArray0[2] = "+";
      stringArray0[3] = "*Ara?Kha";
      stringArray0[4] = "*Ara?Kha";
      stringArray0[5] = "+";
      stringArray0[6] = "*Ara?Kha";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) defaultDBColumn0;
      objectArray0[1] = (Object) "*Ara?Kha";
      objectArray0[2] = (Object) "+";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "*Ara?Kha";
      objectArray0[5] = (Object) "*Ara?Kha";
      objectArray0[6] = (Object) "*Ara?Kha";
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "+";
      objectArray1[1] = (Object) "*Ara?Kha";
      objectArray1[2] = (Object) "*Ara?Kha = + : *ARA?KHA AND *Ara?Kha = '*Ara?Kha' AND + = '+' AND *Ara?Kha = java.lang.Object@798cdbc0 AND *Ara?Kha = '*Ara?Kha' AND + = '*Ara?Kha' AND *Ara?Kha = '*Ara?Kha'";
      objectArray1[3] = (Object) "*Ara?Kha";
      objectArray1[4] = (Object) defaultDBTable0;
      objectArray1[5] = (Object) "+";
      objectArray1[6] = (Object) "*Ara?Kha";
      objectArray1[7] = (Object) "*Ara?Kha";
      objectArray1[8] = (Object) "*Ara?Kha";
      String string1 = SQLUtil.renderWhereClause(stringArray0, objectArray1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 13, "");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      dBColumnArray0[1] = dBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance(13, "C");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      dBDataType0.isAlpha();
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnTypeWithSize(dBColumnArray0[0]);
      assertEquals("", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.701376140435607
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+", defaultDBTable0, (-400633194), "Wk~;=_>;5kaTpOW");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Wk~;=_>;5kaTpOW";
      stringArray0[1] = "Wk~;=_>;5kaTpOW";
      stringArray0[2] = "+";
      stringArray0[3] = "Wk~;=_>;5kaTpOW";
      stringArray0[4] = "Wk~;=_>;5kaTpOW";
      stringArray0[5] = "+";
      stringArray0[6] = "Wk~;=_>;5kaTpOW";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) defaultDBColumn0;
      objectArray0[1] = (Object) "Wk~;=_>;5kaTpOW";
      objectArray0[2] = (Object) "+";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "Wk~;=_>;5kaTpOW";
      objectArray0[5] = (Object) "Wk~;=_>;5kaTpOW";
      objectArray0[6] = (Object) "Wk~;=_>;5kaTpOW";
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "+";
      objectArray1[1] = (Object) "Wk~;=_>;5kaTpOW";
      objectArray1[2] = (Object) "Wk~;=_>;5kaTpOW = + : WK~;=_>;5KATPOW AND Wk~;=_>;5kaTpOW = 'Wk~;=_>;5kaTpOW' AND + = '+' AND Wk~;=_>;5kaTpOW = java.lang.Object@7037c9bc AND Wk~;=_>;5kaTpOW = 'Wk~;=_>;5kaTpOW' AND + = 'Wk~;=_>;5kaTpOW' AND Wk~;=_>;5kaTpOW = 'Wk~;=_>;5kaTpOW'";
      objectArray1[3] = (Object) "Wk~;=_>;5kaTpOW";
      objectArray1[4] = (Object) defaultDBTable0;
      objectArray1[5] = (Object) "+";
      objectArray1[6] = (Object) "Wk~;=_>;5kaTpOW";
      objectArray1[7] = (Object) "Wk~;=_>;5kaTpOW";
      objectArray1[8] = (Object) "Wk~;=_>;5kaTpOW";
      String string1 = SQLUtil.renderWhereClause(stringArray0, objectArray1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",`g!YT&2+@");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "je^_gM|?:ZB9!9\"";
      stringArray0[1] = "je^_gM|?:ZB9!9\"";
      stringArray0[2] = "je^_gM|?:ZB9!9\"";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ",`g!YT&2+@", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "je^_gM|?:ZB9!9\"");
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'F';
      // Undeclared exception!
      try { 
        stringBuilder1.insert(97, charArray0, 889, 889);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 97
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.getSchema();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DATESTYLE");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "DATESTYLE", "DATESTYLE");
      int int0 = 363;
      int int1 = 48;
      StringBuilder stringBuilder0 = new StringBuilder(48);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("executefirefox");
      stringBuilder1.append((Object) jMXPrincipal0);
      stringBuilder0.reverse();
      // Undeclared exception!
      try { 
        stringBuilder1.insert(48, (CharSequence) "executefirefox");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 48
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("F", true, "F", "F");
      StringBuilder stringBuilder0 = new StringBuilder(363);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) null);
      stringBuilder2.reverse();
      stringBuilder0.append((float) 363);
      StringBuilder stringBuilder3 = stringBuilder2.append("lADuCSRcOs)v6[;cmC");
      // Undeclared exception!
      try { 
        stringBuilder3.deleteCharAt(363);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 363
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "";
      String[] stringArray0 = new String[8];
      stringArray0[4] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      int int0 = 3;
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("create table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TERRITORY_BASED:PRIMARY", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "create table";
      stringArray0[1] = "TERRITORY_BASED:PRIMARY";
      stringArray0[2] = "create table";
      stringArray0[3] = "create unique index";
      stringArray0[4] = "TERRITORY_BASED:PRIMARY";
      stringArray0[5] = "create table";
      stringArray0[6] = "IrG";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create table", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (create table, TERRITORY_BASED:PRIMARY, create table, create unique index, TERRITORY_BASED:PRIMARY, create table, IrG)", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("delete");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("execyrea", "execyrea", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog((String) null, defaultDatabase0);
      dBCatalog0.getSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable((String) null, false);
      SQLUtil.typeAndName((DBObject) null);
      FromVTI fromVTI0 = new FromVTI();
      Random.setNextRandom((-1793044597));
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      FromVTI fromVTI1 = new FromVTI();
      ProjectRestrictNode projectRestrictNode0 = new ProjectRestrictNode();
      // Undeclared exception!
      try { 
        projectRestrictNode0.genProjectRestrict();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.ResultSetNode", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("alter tables:;$etstring(");
      SQLUtil.typeAndName(tableContainer0);
      FromVTI fromVTI0 = new FromVTI();
      CurrentRowLocationNode currentRowLocationNode0 = new CurrentRowLocationNode();
      SelectNode selectNode0 = new SelectNode();
      selectNode0.getFromList();
      CurrentRowLocationNode currentRowLocationNode1 = new CurrentRowLocationNode();
      SubqueryList subqueryList0 = new SubqueryList();
      Vector<Integer> vector0 = new Vector<Integer>();
      SubqueryList subqueryList1 = new SubqueryList();
      PredicateList predicateList0 = null;
      // Undeclared exception!
      try { 
        currentRowLocationNode1.orReliability((-995));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }
}
