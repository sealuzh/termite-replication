/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 12:27:41 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7492837611129413
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("ajksf;r");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals(jSTerm1);
      jSTerm0.isGround();
      jSTerm1.equals(jSTerm0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.cloneT();
      Integer integer0 = new Integer(92);
      StringReader stringReader1 = new StringReader("ajksf;r");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.read();
      stringReader0.skip(97);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(92);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis((-1840L));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      Object object0 = new Object();
      jSTerm0.toStr();
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      jSSubstitution1.removeElements(jSSubstitution0);
      jSSubstitution0.removeAllElements();
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      StringReader stringReader0 = new StringReader("(s7QSd+f*Hk]");
      jSSubstitution0.assignFailure();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("?'S^x>EtJ>PZo[O*(");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.cloneS();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.782019572767355
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function1 = Function.identity();
      Function.identity();
      function1.compose((Function<? super String, ? extends Integer>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ?>) function2);
      StringReader stringReader0 = new StringReader("p) ,GcY;k`QSNI");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5772048011382633
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = null;
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals(jSTerm1);
      jSTerm0.isGround();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      int int0 = 92;
      Integer integer0 = new Integer(92);
      jSTerm0.add((Object) "ajksf;r");
      jSTerm3.clone();
      jSTerm1.addAll((Collection) jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1844723550500422
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSSubstitution0.stream();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.isGround();
      jSTerm1.isGround();
      jSTerm1.standardizerTerm();
      jSTerm1.standardizerTerm();
      jSTerm1.standardizerTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6833779836186187
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("ajksf;r");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals(jSTerm1);
      jSTerm0.isGround();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.cloneT();
      Integer integer0 = new Integer(97);
      jSTerm0.add((Object) "ajksf;r");
      jSTerm0.clone();
      jSTerm2.addAll((Collection) jSTerm1);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(124);
      Integer integer3 = new Integer(1635);
      Integer integer4 = new Integer(97);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ?>) unaryOperator0);
      Integer integer5 = new Integer(97);
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$47/1128517458 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7902117416467065
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("ajksf;r");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.isConstant();
      jSTerm0.isGround();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.cloneT();
      Integer integer0 = new Integer(92);
      jSTerm1.add((Object) jSTerm2);
      assertEquals(2, jSTerm1.size());
      
      JSTerm jSTerm3 = (JSTerm)jSTerm2.clone();
      jSTerm0.addAll((Collection) jSSubstitution0);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(1220);
      Integer integer3 = new Integer((-2));
      Integer integer4 = new Integer((-1281));
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ?>) unaryOperator0);
      Integer integer5 = new Integer((-1506));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.standardizerTerm();
      JSJshopVars.leftPar = (-2);
      jSTerm2.cloneT();
      boolean boolean0 = jSTerm3.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6288922115877589
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringReader stringReader0 = new StringReader("%E");
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("($U#]k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) (-4));
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Object object0 = new Object();
      Predicate<String> predicate4 = Predicate.isEqual(object0);
      Predicate<String> predicate5 = predicate4.or(predicate1);
      Predicate<String> predicate6 = predicate5.negate();
      Predicate<String> predicate7 = predicate6.and(predicate0);
      Predicate<String> predicate8 = predicate7.and(predicate0);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate9 = predicate6.negate();
      predicate0.and(predicate2);
      Predicate<String> predicate10 = predicate8.negate();
      predicate0.and(predicate1);
      predicate5.test("jst(rj:");
      predicate9.test("QP>'");
      Predicate<String> predicate11 = predicate8.or(predicate2);
      Predicate<String> predicate12 = predicate9.and(predicate0);
      Predicate<String> predicate13 = predicate11.negate();
      Predicate<String> predicate14 = predicate10.or(predicate9);
      predicate9.negate();
      predicate3.or(predicate1);
      predicate6.negate();
      predicate9.and(predicate12);
      Predicate<String> predicate15 = predicate9.and(predicate14);
      Predicate<String> predicate16 = predicate14.and(predicate13);
      predicate3.negate();
      predicate8.and(predicate9);
      predicate9.and(predicate15);
      predicate11.and(predicate6);
      predicate14.and(predicate9);
      predicate16.negate();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function1 = Function.identity();
      Function.identity();
      function1.compose((Function<? super String, ? extends Integer>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(any());
      Function<Object, Object> function3 = unaryOperator0.andThen((Function<? super Object, ?>) function2);
      Function<Integer, Object> function4 = unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Object> function5 = function3.andThen((Function<? super Object, ?>) unaryOperator0);
      Object object0 = unaryOperator0.apply(function4);
      unaryOperator0.compose((Function<? super Object, ?>) function3);
      function3.apply(function5);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<JSSubstitution, Object> function7 = function4.compose((Function<? super JSSubstitution, ? extends Integer>) function6);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.andThen((Function<? super Object, ? extends String>) function8);
      JSTerm jSTerm0 = new JSTerm();
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.compose((Function<? super Object, ? extends Integer>) function9);
      jSTerm0.add((Object) "7jk_f;r");
      Function<Object, Integer> function10 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.compose((Function<? super JSSubstitution, ? extends Integer>) function10);
      Function.identity();
      Function.identity();
      jSTerm0.add((Object) unaryOperator0);
      Function<Object, Object> function11 = Function.identity();
      function11.apply(function7);
      Function<Object, Integer> function12 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function13 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function12);
      Function<Object, String> function14 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function11.andThen((Function<? super Object, ? extends String>) function14);
      Function<Object, Integer> function15 = function13.andThen((Function<? super Integer, ? extends Integer>) function1);
      function15.andThen((Function<? super Integer, ? extends Integer>) function1);
      jSTerm0.contains(object0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$47/1128517458 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Object object0 = new Object();
      Predicate<String> predicate3 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate4 = predicate3.or(predicate1);
      Predicate<String> predicate5 = predicate3.negate();
      Predicate<String> predicate6 = predicate5.and(predicate0);
      Predicate<String> predicate7 = predicate3.and(predicate6);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate8.negate();
      Predicate<String> predicate10 = predicate9.or(predicate4);
      Predicate<String> predicate11 = predicate4.and(predicate10);
      Predicate<Object> predicate12 = predicate2.negate();
      predicate10.and(predicate3);
      predicate6.or(predicate10);
      Predicate<String> predicate13 = predicate8.negate();
      Predicate<Object> predicate14 = predicate12.and(predicate2);
      predicate14.or(predicate2);
      Predicate<String> predicate15 = predicate11.and(predicate8);
      Predicate<String> predicate16 = predicate13.negate();
      Integer integer0 = new Integer(2319);
      Predicate<Object> predicate17 = predicate1.negate();
      Predicate<String> predicate18 = predicate7.or(predicate17);
      Predicate<String> predicate19 = predicate18.or(predicate6);
      Predicate<String> predicate20 = predicate7.negate();
      predicate20.and(predicate11);
      predicate16.and(predicate12);
      predicate19.negate();
      predicate18.and(predicate15);
      predicate12.or(predicate2);
      jSTerm0.setSize(1634);
      Object object1 = new Object();
      jSTerm0.contains(object1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.077526447866406
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function.identity();
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      unaryOperator0.andThen((Function<? super Object, ?>) function1);
      Integer integer0 = new Integer((-614));
      function1.apply(integer0);
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "list");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      StringReader stringReader0 = new StringReader("list");
      StringReader stringReader1 = new StringReader("list");
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm2);
      jSTerm2.print();
      jSTerm0.makeEval(true);
      jSTerm2.toStr();
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.matches(jSTerm2);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      jSTerm0.firstElement();
      jSTerm1.lastElement();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm4.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm6 = jSTerm3.cloneT();
      jSTerm6.standardizerTerm();
      jSTerm1.call();
      jSTerm0.cloneT();
      System.setCurrentTimeMillis(0L);
      jSTerm3.isEval();
      jSTerm1.isGround();
      jSTerm5.toStr();
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8351993537610203
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function.identity();
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      Integer integer0 = new Integer((-614));
      function1.apply(integer0);
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "list");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      StringReader stringReader0 = new StringReader("list");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      jSTerm1.print();
      jSTerm0.makeEval(true);
      jSTerm0.toStr();
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm0.cloneT();
      jSTerm2.print();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5824248101287743
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "WO";
      StringReader stringReader0 = new StringReader("WO");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      streamTokenizer0.parseNumbers();
      JSJshopVars.greaterT = (-1);
      jSTerm0.makeFunction();
      JSJshopVars.percent = (-1);
      jSTerm0.print();
      jSTerm0.equals(jSTerm0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      jSTerm0.capacity();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.print();
      jSTerm0.removeAll(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.lastElement();
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.elementAt((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "ajksft;r");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4559747062582016
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function1 = Function.identity();
      Function.identity();
      function1.compose((Function<? super String, ? extends Integer>) function0);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "7jk_f;r");
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.isFunction();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSJshopVars.equalT = 0;
      jSTerm1.clone();
      jSTerm3.addAll((Collection) jSTerm2);
      Integer integer0 = new Integer((-503));
      jSTerm3.setSize(92);
      Integer integer1 = new Integer(92);
      Integer integer2 = new Integer(92);
      System.setCurrentTimeMillis((-1299));
      // Undeclared exception!
      try { 
        jSTerm3.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function1 = Function.identity();
      Function<Object, Object> function2 = Function.identity();
      function1.compose((Function<? super String, ? extends Integer>) function0);
      function2.compose((Function<? super Object, ?>) unaryOperator0);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ?>) function3);
      Function<Integer, Object> function4 = unaryOperator0.compose((Function<? super Integer, ?>) function1);
      function2.andThen((Function<? super Object, ?>) unaryOperator0);
      Function.identity();
      JSTerm jSTerm0 = new JSTerm();
      function1.andThen((Function<? super Integer, ?>) function4);
      Function.identity();
      jSTerm0.add((Object) "{");
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Integer, JSTerm> function7 = (Function<Integer, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super Integer, ? extends JSTerm>) function7);
      Function<Object, Integer> function8 = function6.andThen((Function<? super Integer, ? extends Integer>) function1);
      Function<JSSubstitution, Object> function9 = unaryOperator0.compose((Function<? super JSSubstitution, ?>) unaryOperator0);
      Function<Object, String> function10 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function9.andThen((Function<? super Object, ? extends String>) function10);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      Function.identity();
      function4.compose((Function<? super JSSubstitution, ? extends Integer>) function8);
      StringReader stringReader0 = new StringReader(" . ");
      stringReader0.ready();
      UnaryOperator.identity();
      jSTerm0.toString();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function1 = Function.identity();
      Function<Object, Object> function2 = Function.identity();
      function1.compose((Function<? super String, ? extends Integer>) function0);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      Function<Object, Object> function4 = unaryOperator0.andThen((Function<? super Object, ?>) function3);
      Function<Integer, Object> function5 = unaryOperator0.compose((Function<? super Integer, ?>) function4);
      Function<Object, Object> function6 = function4.andThen((Function<? super Object, ?>) unaryOperator0);
      function6.compose((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.apply(function5);
      unaryOperator0.compose((Function<? super JSTerm, ?>) function2);
      unaryOperator0.compose((Function<? super Object, ?>) function4);
      function4.apply(function6);
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.compose((Function<? super JSSubstitution, ? extends Integer>) function7);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "7jk_f;r");
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.compose((Function<? super JSSubstitution, ? extends Integer>) function8);
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("YYdW?'");
      stringReader0.skip(1L);
      jSTerm0.add((Object) function6);
      Object object0 = new Object();
      jSTerm0.clone();
      jSTerm0.lastElement();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) function1;
      objectArray0[2] = (Object) "7jk_f;r";
      objectArray0[3] = (Object) jSTerm0;
      Object object1 = jSTerm0.lastElement();
      objectArray0[4] = object1;
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$48/143820932 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.72994194503983
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function1 = Function.identity();
      Function.identity();
      function1.compose((Function<? super String, ? extends Integer>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function2).apply(any());
      Function<Object, Object> function3 = unaryOperator0.andThen((Function<? super Object, ?>) function2);
      Function<Integer, Object> function4 = unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Object> function5 = function3.andThen((Function<? super Object, ?>) unaryOperator0);
      unaryOperator0.apply(function4);
      unaryOperator0.compose((Function<? super Object, ?>) function3);
      function3.apply(function5);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.compose((Function<? super JSSubstitution, ? extends Integer>) function6);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "7jk_f;r");
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.compose((Function<? super JSSubstitution, ? extends Integer>) function7);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.clear();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      Integer integer0 = new Integer(92);
      jSTerm2.add((Object) integer0);
      JSTerm jSTerm4 = (JSTerm)jSTerm1.clone();
      jSTerm3.addAll((Collection) jSTerm2);
      Integer integer1 = new Integer((-503));
      Integer integer2 = new Integer(92);
      Integer integer3 = new Integer(92);
      Integer integer4 = new Integer((-1299));
      function4.apply(integer4);
      System.setCurrentTimeMillis((-1299));
      boolean boolean0 = jSTerm4.isGround();
      assertEquals("[7jk_f;r]", jSTerm0.toString());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.328811135389218
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("+");
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = unaryOperator0.compose((Function<? super Object, ?>) function0);
      StringReader stringReader1 = new StringReader("3.0");
      stringReader1.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader1.reset();
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      streamTokenizer0.parseNumbers();
      StringReader stringReader2 = new StringReader("+");
      StringReader stringReader3 = new StringReader("\\&NmoJDt*");
      stringReader3.reset();
      StringReader stringReader4 = new StringReader("\\&NmoJDt*");
      stringReader3.read();
      stringReader1.skip(1L);
      jSTerm0.add((Object) "+");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) function1;
      objectArray0[2] = (Object) unaryOperator0;
      objectArray0[3] = (Object) stringReader1;
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      objectArray0[4] = (Object) jSTerm2;
      objectArray0[5] = (Object) unaryOperator0;
      objectArray0[6] = (Object) "\\&NmoJDt*";
      objectArray0[7] = (Object) "3.0";
      jSTerm0.lastElement();
      objectArray0[8] = (Object) "+";
      jSTerm1.toArray(objectArray0);
      JSTerm jSTerm3 = jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2769130758173466
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "list");
      jSTerm0.clone();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      StringReader stringReader0 = new StringReader("Mbjp%p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.364871333578161
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function1 = Function.identity();
      function1.compose((Function<? super String, ? extends Integer>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function3 = unaryOperator0.andThen((Function<? super Object, ?>) function2);
      Function<Integer, Object> function4 = unaryOperator0.compose((Function<? super Integer, ?>) function3);
      function3.andThen((Function<? super Object, ?>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ?>) function3);
      JSTerm jSTerm0 = new JSTerm();
      Function.identity();
      jSTerm0.add((Object) "%%%");
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.add((Object) jSSubstitution0);
      function4.compose((Function<? super JSSubstitution, ? extends Integer>) function6);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4791512914597686
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      JSJshopVars.apostrophe = 446;
      linkedList0.add((Object) "%%%");
      StringReader stringReader0 = new StringReader("%%%");
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringReader0;
      objectArray0[1] = (Object) unaryOperator0;
      jSTerm0.makeConstant();
      objectArray0[2] = (Object) unaryOperator0;
      objectArray0[3] = (Object) "%%%";
      objectArray0[4] = (Object) stringReader0;
      objectArray0[5] = (Object) jSTerm0;
      objectArray0[6] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm2.call();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "list");
      StringReader stringReader1 = new StringReader("list");
      stringReader1.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader2 = new StringReader(") ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.slashStarComments(false);
      jSTerm0.parseList(streamTokenizer1);
      jSTerm0.clone();
      streamTokenizer0.parseNumbers();
      StringReader stringReader3 = null;
      try {
        stringReader3 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.254423781990184
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) linkedList0);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.assignFailure();
      jSSubstitution0.assignFailure();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      jSSubstitution0.addAll((Collection) linkedList0);
      StringReader stringReader0 = new StringReader("?'6^x>EtJ>PZo[O*(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.listIterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution3);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.or(predicate0);
      Predicate<String> predicate3 = predicate2.and(predicate0);
      Predicate<String> predicate4 = predicate3.and(predicate1);
      Predicate<String> predicate5 = predicate2.and(predicate1);
      predicate4.negate();
      jSTerm0.removeIf(predicate5);
      System.setCurrentTimeMillis((-1066L));
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2801336877336107
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("ajksf;o");
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "ajksf;o");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1075358969990727
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cy<]UBllsd:Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm1.removeAll(jSPredicateForm0);
      jSSubstitution0.print();
      streamTokenizer0.whitespaceChars((-1410), (-1410));
      jSTerm0.clonePF();
      System.setCurrentTimeMillis(0L);
      JSJshopVars.coma = 2635;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<String> predicate1 = predicate0.negate();
      jSSubstitution0.clear();
      Predicate<Object> predicate2 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      predicate1.negate();
      Predicate<String> predicate3 = predicate1.or(predicate2);
      Predicate<String> predicate4 = predicate3.and(predicate0);
      jSSubstitution0.removeIf(predicate4);
      jSSubstitution1.cloneS();
      jSSubstitution1.add((Object) "cy<]UBllsd:Z");
      jSSubstitution0.add((Object) jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.503601812219694
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSTerm0;
      jSTerm0.toArray();
      StringReader stringReader0 = new StringReader("?E;1zt.");
      JSJshopVars.percent = (-15);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSJshopVars.rightBrac = (-1);
      objectArray0[0] = (Object) (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm0, jSSubstitution1);
      assertEquals(1, jSSubstitution2.size());
      
      jSTerm0.isEval();
      jSTerm1.call();
      jSTerm2.isVariable();
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertFalse(boolean0);
      
      jSTerm1.print();
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6036051515160747
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(?\"3Jy0b3ZBRHDk;M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      streamTokenizer1.ordinaryChars((-1637), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ordinaryChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer2.sval = null;
      System.setCurrentTimeMillis((-4));
      stringReader0.ready();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer4);
      jSTerm0.isGround();
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.assignFailure();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.assignFailure();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.clear();
      jSSubstitution3.assignFailure();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.080703909628037
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("min");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-3319));
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.nextToken();
      stringReader0.read();
      System.setCurrentTimeMillis((-1));
      jSTerm1.toStr();
      assertFalse(jSTerm1.isVariable());
      
      jSTerm0.isGround();
      jSTerm1.makeVariable();
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm2);
      jSTerm0.matches(jSTerm3);
      streamTokenizer0.nval = 238.015801082248;
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2);
      jSTerm2.isGround();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm4.applySubstitutionT(jSSubstitution1);
      jSTerm4.call();
      jSTerm0.call();
      assertFalse(jSTerm0.equals((Object)jSTerm4));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5159634177102554
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function1 = Function.identity();
      Function.identity();
      function1.compose((Function<? super String, ? extends Integer>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function2).apply(any());
      Function<Object, Object> function3 = unaryOperator0.andThen((Function<? super Object, ?>) function2);
      Function<Integer, Object> function4 = unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Object> function5 = function3.andThen((Function<? super Object, ?>) unaryOperator0);
      unaryOperator0.apply(function4);
      unaryOperator0.compose((Function<? super Object, ?>) function3);
      function3.apply(function5);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "%%%");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.cloneT();
      Integer integer0 = new Integer(92);
      jSTerm2.add((Object) integer0);
      jSTerm1.clone();
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      jSTerm2.addAll((Collection) jSTerm1);
      assertEquals("[%%%]", jSTerm0.toString());
      
      Integer integer1 = new Integer(92);
      function4.apply(integer1);
      jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7329764674602965
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSSubstitution0.addAll((Collection) linkedList0);
      StringReader stringReader0 = new StringReader("?'6^x>EtJ>PZo[O*(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.print();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.3444053452117863
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("o~=Bdb<<`y )&Az");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.firstElement();
      jSSubstitution1.add((Object) "o=Bdb<<`y");
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.assignFailure();
      jSSubstitution1.assignFailure();
      StringReader stringReader1 = new StringReader("?'6^x>EtJ>PZo[O*(");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.add((Object) "7jk_f;r");
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, JSTerm> function0 = (Function<Integer, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Object> function1 = unaryOperator0.andThen((Function<? super Integer, ?>) function0);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.compose((Function<? super JSSubstitution, ? extends Integer>) function2);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = "?%%%0";
      StringReader stringReader0 = new StringReader("?%%%0");
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer((-3));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Object object0 = new Object();
      Predicate<String> predicate4 = Predicate.isEqual(object0);
      Predicate<String> predicate5 = predicate4.or(predicate1);
      Predicate<String> predicate6 = predicate5.negate();
      Predicate<String> predicate7 = predicate6.and(predicate0);
      Predicate<String> predicate8 = predicate7.and(predicate0);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate9 = predicate6.negate();
      Predicate<String> predicate10 = predicate8.negate();
      predicate9.test("QP>'");
      Predicate<String> predicate11 = predicate8.or(predicate2);
      predicate9.and(predicate0);
      Predicate<Object> predicate12 = predicate1.negate();
      Predicate<String> predicate13 = predicate11.negate();
      Predicate<String> predicate14 = predicate13.or(predicate0);
      Predicate<String> predicate15 = predicate10.negate();
      predicate0.or(predicate12);
      Predicate<String> predicate16 = predicate13.negate();
      predicate16.and(predicate3);
      Predicate<String> predicate17 = predicate6.negate();
      Predicate.isEqual((Object) predicate13);
      predicate17.or(predicate3);
      Predicate<String> predicate18 = predicate15.negate();
      Predicate<String> predicate19 = predicate16.and(predicate2);
      predicate14.and(predicate19);
      predicate17.and(predicate3);
      predicate18.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("?");
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yC5dw>wAHK@~`}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9387281743103264
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) linkedList0);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.assignFailure();
      jSSubstitution0.assignFailure();
      jSSubstitution0.addAll((Collection) linkedList0);
      StringReader stringReader0 = new StringReader("?'6^x>EtJ>PZo[O*(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clear();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.listIterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.9156104860456247
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 1Tfil6p5aW#IYtSn");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) "(");
      jSSubstitution2.add((Object) "(");
      jSSubstitution1.assignFailure();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.assignFailure();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSSubstitution1.add((Object) "(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.print();
      jSTerm0.removeAll(jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution6 = jSTerm0.matches(jSTerm1, jSSubstitution3);
      assertFalse(jSSubstitution6.fail());
      
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm0.cloneT();
      Integer integer0 = new Integer(42);
      jSTerm2.remove((Object) integer0);
      JSSubstitution jSSubstitution7 = jSTerm0.matches(jSTerm2);
      assertTrue(jSSubstitution7.fail());
      
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isConstant());
      
      JSTerm jSTerm5 = new JSTerm();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSTerm jSTerm6 = jSTerm3.applySubstitutionT(jSSubstitution10);
      assertNotSame(jSTerm3, jSTerm4);
      assertFalse(jSTerm6.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertEquals(10, jSTerm3.capacity());
      assertEquals("[1.0]", jSTerm3.toString());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Object object0 = new Object();
      Predicate<String> predicate3 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate4 = predicate3.or(predicate1);
      Predicate<String> predicate5 = predicate3.negate();
      Predicate<String> predicate6 = predicate5.and(predicate0);
      Predicate<String> predicate7 = predicate3.and(predicate6);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate8.negate();
      Predicate<String> predicate10 = predicate9.or(predicate4);
      Predicate<String> predicate11 = predicate4.and(predicate10);
      Predicate<Object> predicate12 = predicate2.negate();
      predicate10.and(predicate3);
      predicate6.or(predicate10);
      Predicate<String> predicate13 = predicate8.negate();
      Predicate<Object> predicate14 = predicate12.and(predicate2);
      predicate14.or(predicate2);
      Predicate<String> predicate15 = predicate11.and(predicate8);
      Predicate<String> predicate16 = predicate13.negate();
      Integer integer0 = new Integer(2319);
      Predicate<Object> predicate17 = predicate1.negate();
      Predicate<String> predicate18 = predicate7.or(predicate17);
      Predicate<String> predicate19 = predicate18.or(predicate6);
      Predicate<String> predicate20 = predicate11.negate();
      predicate20.and(predicate11);
      predicate16.and(predicate12);
      predicate19.negate();
      predicate18.and(predicate15);
      predicate12.or(predicate2);
      jSTerm0.setSize(1634);
      Object object1 = new Object();
      jSTerm0.contains(object1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.394993443200781
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function1 = Function.identity();
      Function.identity();
      function1.compose((Function<? super String, ? extends Integer>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(any());
      Function<Object, Object> function3 = unaryOperator0.andThen((Function<? super Object, ?>) function2);
      Function<Integer, Object> function4 = unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Object> function5 = function3.andThen((Function<? super Object, ?>) unaryOperator0);
      unaryOperator0.apply(function4);
      function3.apply(function5);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.compose((Function<? super JSSubstitution, ? extends Integer>) function6);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.andThen((Function<? super Object, ? extends String>) function7);
      JSTerm jSTerm0 = new JSTerm();
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.compose((Function<? super Object, ? extends Integer>) function8);
      jSTerm0.add((Object) "7jk_f;r");
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function10 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function10);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSSubstitution0.cloneS();
      StringReader stringReader0 = new StringReader("7jk_f;r");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.listIterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      System.setCurrentTimeMillis((-297L));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.618678726574372
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ng#9}%34^5J,.{7|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm1.clear();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9024533308450557
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.addElement(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.clear();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution0.stream();
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.assignFailure();
      StringReader stringReader0 = new StringReader("kAxy8WO|");
      StringReader stringReader1 = new StringReader("kAxy8WO|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.listIterator();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution7.clone();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution8 = jSTerm0.matches(jSTerm1, jSSubstitution7);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSSubstitution8.fail());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.addElement(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.clear();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      jSSubstitution0.stream();
      jSSubstitution0.assignFailure();
      jSSubstitution2.assignFailure();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSEvaluate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.listIterator();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.2654436797543713
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.assignFailure();
      jSSubstitution0.assignFailure();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      jSSubstitution0.addAll((Collection) linkedList0);
      StringReader stringReader0 = new StringReader("?'6^x>EtJ>PZo[O*(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      streamTokenizer0.slashStarComments(false);
      jSSubstitution2.listIterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      stringReader0.skip(0L);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution5);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.clear();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.assignFailure();
      jSSubstitution1.assignFailure();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.listIterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.622827904722017
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringReader stringReader0 = new StringReader("%%%");
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6288922115877589
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0.0");
      StringReader stringReader1 = new StringReader("($U#]k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      StringReader stringReader2 = new StringReader("failed substitution");
      stringReader2.ready();
      StringReader stringReader3 = new StringReader("0.0");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader3);
      streamTokenizer2.whitespaceChars((-1501), (-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5688603433446962
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?vO9E6-5Ms-6TG");
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = '^';
      charArray0[2] = '\"';
      charArray0[3] = 't';
      charArray0[4] = 'p';
      charArray0[5] = 't';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Object object0 = new Object();
      Predicate<String> predicate2 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate3 = predicate2.or(predicate1);
      Predicate<String> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate4.and(predicate0);
      Predicate<String> predicate6 = predicate2.and(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate8.or(predicate3);
      Predicate<String> predicate10 = predicate3.and(predicate9);
      predicate1.negate();
      Predicate<String> predicate11 = predicate8.and(predicate6);
      Predicate<String> predicate12 = predicate10.or(predicate6);
      predicate1.and(predicate0);
      predicate1.or(predicate0);
      Predicate<String> predicate13 = predicate9.and(predicate8);
      predicate9.negate();
      Integer integer0 = new Integer(2319);
      predicate1.negate();
      predicate11.or(predicate2);
      Predicate<String> predicate14 = predicate4.or(predicate8);
      Predicate<String> predicate15 = predicate9.negate();
      predicate15.test("`Y F5_JIY46Ia");
      predicate15.and(predicate14);
      Predicate<String> predicate16 = predicate4.and(predicate9);
      predicate1.negate();
      Predicate<String> predicate17 = predicate13.and(predicate1);
      predicate17.and(predicate4);
      predicate12.and(predicate9);
      predicate2.and(predicate16);
      predicate6.negate();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.clear();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.assignFailure();
      jSSubstitution1.assignFailure();
      StringReader stringReader0 = new StringReader("?'6^x>EtJ>PZo[O*(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.listIterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.addElement(jSSubstitution5);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution6);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.backquote = 108;
      JSJshopVars.backquote = 42;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1985574616803634
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.assignFailure();
      jSSubstitution0.assignFailure();
      StringReader stringReader0 = new StringReader("?'6^x>EtJ>PZo[O*(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm0.isConstant());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.listIterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution7 = jSTerm1.matches(jSTerm0, jSSubstitution6);
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSSubstitution7.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm0.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6602162707648
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = "?%%%0";
      StringReader stringReader0 = new StringReader("?%%%0");
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3548015058139915
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3U1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSJshopVars.VarCounter = (-4);
      streamTokenizer0.ttype = (-4);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = 36;
      JSPredicateForm jSPredicateForm0 = null;
      jSTerm0.equals((JSPredicateForm) null);
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(?\"3Jy0b3ZBRHDk;M");
      StringReader stringReader1 = new StringReader("dv_))T1\"g0VPE{/'N");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      assertTrue(jSSubstitution3.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.clear();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.assignFailure();
      jSSubstitution1.assignFailure();
      StringReader stringReader0 = new StringReader("?'6^x>EtJ>PZo[O*(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.listIterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      stringReader0.ready();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.067192817572092
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      linkedList0.add((Object) jSSubstitution0);
      jSSubstitution0.assignFailure();
      jSSubstitution0.assignFailure();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      jSSubstitution0.addAll((Collection) linkedList0);
      StringReader stringReader0 = new StringReader("?'6^x>EtJ>PZo[O*(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm0.isEval());
      
      jSTerm0.makeEval(true);
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm0);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm1.firstElement();
      jSTerm1.lastElement();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution2);
      jSTerm1.cloneT();
      JSTerm jSTerm5 = jSTerm3.standardizerTerm();
      jSTerm4.call();
      jSTerm0.cloneT();
      jSTerm3.toStr();
      jSTerm5.cloneT();
      jSTerm3.matches(jSTerm4);
      jSTerm0.matches(jSTerm5, jSSubstitution3);
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Object object0 = new Object();
      Predicate<String> predicate2 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate3 = predicate2.or(predicate1);
      Predicate<String> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate4.and(predicate0);
      Predicate<String> predicate6 = predicate2.and(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate8.or(predicate3);
      Predicate<String> predicate10 = predicate3.and(predicate9);
      predicate1.negate();
      Predicate<String> predicate11 = predicate8.and(predicate6);
      Predicate<String> predicate12 = predicate10.or(predicate6);
      predicate1.and(predicate0);
      predicate1.or(predicate0);
      Predicate<String> predicate13 = predicate9.and(predicate8);
      predicate9.negate();
      Integer integer0 = new Integer(2319);
      predicate1.negate();
      predicate11.or(predicate2);
      Predicate<String> predicate14 = predicate4.or(predicate8);
      Predicate<String> predicate15 = predicate9.negate();
      predicate15.test("`Y F5_JIY46Ia");
      predicate15.and(predicate14);
      Predicate<String> predicate16 = predicate4.and(predicate9);
      predicate1.negate();
      Predicate<String> predicate17 = predicate13.and(predicate1);
      predicate17.and(predicate4);
      predicate12.and(predicate9);
      predicate2.and(predicate16);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.assignFailure();
      jSSubstitution1.assignFailure();
      StringReader stringReader0 = new StringReader("?'6^x>EtJ>PZo[O*(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.listIterator();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm0.isEval());
      assertNotSame(jSTerm0, jSTerm1);
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isVariable());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.669437548207739
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function1 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Object> function2 = Function.identity();
      Function<String, Object> function3 = unaryOperator0.compose((Function<? super String, ?>) unaryOperator1);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function4).apply(any());
      Function<Object, Object> function5 = unaryOperator0.andThen((Function<? super Object, ?>) function4);
      Object object0 = new Object();
      function3.apply(".?`V<>mjrLQ[ [r)z-f");
      unaryOperator1.compose((Function<? super Integer, ?>) function1);
      Function<Object, Object> function6 = function2.andThen((Function<? super Object, ?>) function5);
      Function<Object, Object> function7 = unaryOperator0.compose((Function<? super Object, ?>) function5);
      function5.apply(function6);
      Function.identity();
      function2.andThen((Function<? super Object, ?>) function7);
      Function.identity();
      Function.identity();
      function7.apply(function2);
      Function<Object, Integer> function8 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super Object, ? extends String>) function9);
      function8.andThen((Function<? super Integer, ? extends Integer>) function8);
      function8.andThen((Function<? super Integer, ? extends Integer>) function1);
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control parameters: ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<String, Object> function1 = unaryOperator0.compose((Function<? super String, ?>) function0);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<String, Integer> function2 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function3 = unaryOperator1.compose((Function<? super String, ? extends Integer>) function2);
      function1.apply("list");
      function0.compose((Function<? super Integer, ?>) unaryOperator0);
      Function<Object, Object> function4 = unaryOperator0.compose((Function<? super Object, ?>) function0);
      function3.andThen((Function<? super Integer, ?>) unaryOperator0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      function0.apply(function3);
      Function.identity();
      Function<Object, Object> function5 = unaryOperator0.andThen((Function<? super Object, ?>) function4);
      Function.identity();
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function7.andThen((Function<? super Integer, ? extends Integer>) unaryOperator1);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super Object, ? extends String>) function8);
      function7.andThen((Function<? super Integer, ? extends Integer>) unaryOperator1);
      jSTerm0.setSize(1905);
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.addElement(jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.clear();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.stream();
      jSSubstitution0.assignFailure();
      jSSubstitution1.assignFailure();
      StringReader stringReader0 = new StringReader("?'S^x>EtJ>PZo[O*(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.listIterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Object object0 = new Object();
      Predicate<String> predicate2 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate3 = predicate2.or(predicate1);
      Predicate<String> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate4.and(predicate0);
      Predicate<String> predicate6 = predicate2.and(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate8.or(predicate3);
      Predicate<String> predicate10 = predicate3.and(predicate9);
      predicate1.negate();
      Predicate<String> predicate11 = predicate8.and(predicate6);
      predicate10.or(predicate6);
      predicate1.and(predicate0);
      predicate1.or(predicate0);
      predicate9.and(predicate8);
      predicate9.negate();
      Integer integer0 = new Integer(2319);
      predicate1.negate();
      predicate11.or(predicate2);
      Predicate<String> predicate12 = predicate4.or(predicate8);
      Predicate<String> predicate13 = predicate9.negate();
      predicate13.test("`Y F5_JIY46Ia");
      predicate13.and(predicate12);
      predicate4.and(predicate9);
      StringReader stringReader1 = new StringReader("foF2*qc2w5>&zHO-@");
      stringReader0.ready();
      UnaryOperator.identity();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isVariable();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.1101013118142995
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NOP?T");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.equalT = 78;
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSJshopVars.exclamation = (-2344);
      jSTerm1.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate3 = predicate2.or(predicate1);
      Predicate<String> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate4.and(predicate0);
      Predicate<String> predicate6 = predicate2.and(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate8.or(predicate3);
      Predicate<String> predicate10 = predicate3.and(predicate9);
      predicate1.negate();
      Predicate<String> predicate11 = predicate8.and(predicate6);
      Predicate<String> predicate12 = predicate10.or(predicate6);
      predicate1.and(predicate0);
      Predicate<Object> predicate13 = predicate1.or(predicate0);
      predicate9.negate();
      Predicate<Object> predicate14 = predicate1.negate();
      predicate11.or(predicate2);
      Predicate<String> predicate15 = predicate4.or(predicate8);
      Predicate<String> predicate16 = predicate9.negate();
      predicate16.test("`Y F5_JIY46Ia");
      predicate5.negate();
      predicate4.and(predicate9);
      predicate1.negate();
      Predicate<Object> predicate17 = predicate13.negate();
      Predicate<String> predicate18 = predicate12.and(predicate17);
      predicate18.and(predicate14);
      Predicate<String> predicate19 = predicate10.negate();
      Predicate<String> predicate20 = predicate19.and(predicate11);
      predicate20.and(predicate15);
      predicate8.negate();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.6650336111779946
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.standardizerTerm();
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSTerm1.addAll((Collection) jSTerm2);
      Integer integer0 = new Integer((-503));
      int int0 = (-2);
      // Undeclared exception!
      try { 
        jSTerm1.remove(94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 94
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.294646023847278
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.isGround();
      jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm1.standardizerTerm();
      jSTerm1.standardizerTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm2.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Wl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      streamTokenizer0.parseNumbers();
      JSJshopVars.greaterT = (-1);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.percent = (-1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("Wl");
      streamTokenizer0.parseNumbers();
      System.setCurrentTimeMillis((-1));
      stringReader0.read();
      stringReader0.close();
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Object object0 = new Object();
      Predicate<String> predicate3 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate4 = predicate3.or(predicate1);
      Predicate<String> predicate5 = predicate4.and(predicate0);
      Predicate<String> predicate6 = predicate3.and(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate8.or(predicate4);
      Predicate<String> predicate10 = predicate4.negate();
      Predicate<Object> predicate11 = predicate2.negate();
      predicate9.and(predicate3);
      predicate5.or(predicate9);
      Predicate<String> predicate12 = predicate7.negate();
      Predicate<Object> predicate13 = predicate11.and(predicate2);
      predicate13.or(predicate2);
      Predicate<String> predicate14 = predicate10.and(predicate7);
      Predicate<String> predicate15 = predicate12.negate();
      Integer integer0 = new Integer(2319);
      Predicate<Object> predicate16 = predicate11.negate();
      Predicate<String> predicate17 = predicate6.or(predicate16);
      predicate17.or(predicate5);
      Predicate<String> predicate18 = predicate10.negate();
      predicate18.and(predicate12);
      predicate18.and(predicate10);
      predicate15.and(predicate11);
      Predicate<String> predicate19 = predicate6.and(predicate7);
      Predicate<String> predicate20 = predicate17.and(predicate14);
      predicate20.and(predicate4);
      predicate19.negate();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertEquals(0, jSSubstitution0.size());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Object object0 = new Object();
      Predicate<String> predicate3 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate4 = predicate3.or(predicate1);
      Predicate<String> predicate5 = predicate3.negate();
      Predicate<String> predicate6 = predicate5.and(predicate0);
      Predicate<String> predicate7 = predicate3.and(predicate6);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate8.negate();
      Predicate<String> predicate10 = predicate9.or(predicate4);
      Predicate<String> predicate11 = predicate4.and(predicate10);
      Predicate<Object> predicate12 = predicate2.negate();
      predicate10.and(predicate3);
      predicate6.or(predicate10);
      Predicate<String> predicate13 = predicate8.negate();
      Predicate<Object> predicate14 = predicate12.and(predicate2);
      predicate14.or(predicate2);
      Predicate<String> predicate15 = predicate11.and(predicate8);
      Predicate<String> predicate16 = predicate13.negate();
      Integer integer0 = new Integer(2319);
      Predicate<Object> predicate17 = predicate12.negate();
      Predicate<String> predicate18 = predicate7.or(predicate17);
      predicate18.or(predicate6);
      Predicate<String> predicate19 = predicate11.negate();
      predicate19.and(predicate13);
      predicate19.and(predicate11);
      predicate16.and(predicate12);
      Predicate<String> predicate20 = predicate7.and(predicate8);
      Predicate<String> predicate21 = predicate18.and(predicate15);
      predicate21.and(predicate4);
      predicate20.negate();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertEquals("[]", jSSubstitution0.toString());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = null;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      stringReader0.read(charBuffer0);
      jSTerm0.isFunction();
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.536062315080832
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("ajksf;r");
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "ajksf;r");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm1.isFunction();
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      assertTrue(jSTerm3.isFunction());
      
      jSTerm0.lastElement();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm2);
      JSJshopVars.greaterT = 1521;
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.negate();
      Predicate<String> predicate3 = predicate1.or(predicate0);
      predicate1.negate();
      Predicate<String> predicate4 = predicate1.negate();
      Predicate<String> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) "ajksf;r");
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate8 = predicate6.or(predicate7);
      predicate7.and(predicate6);
      Predicate<String> predicate9 = predicate1.and(predicate4);
      Predicate<String> predicate10 = predicate0.or(predicate8);
      predicate4.or(predicate6);
      predicate0.and(predicate4);
      predicate1.negate();
      Predicate<String> predicate11 = predicate0.negate();
      predicate8.negate();
      Predicate<String> predicate12 = predicate11.or(predicate10);
      predicate3.and(predicate1);
      predicate4.and(predicate2);
      predicate12.and(predicate7);
      predicate2.and(predicate9);
      predicate5.and(predicate10);
      predicate11.negate();
      jSTerm1.removeIf(predicate4);
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.533344419789668
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Function.identity();
      StringReader stringReader0 = new StringReader("dxjg)0Y8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[nil]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<String> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<String> predicate2 = predicate1.or(predicate0);
      Predicate<String> predicate3 = predicate1.negate();
      Predicate<String> predicate4 = predicate3.and(predicate0);
      Predicate<String> predicate5 = predicate1.and(predicate4);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate6 = predicate5.negate();
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate7.or(predicate2);
      Predicate<String> predicate9 = predicate2.and(predicate8);
      predicate0.negate();
      Predicate<String> predicate10 = predicate7.and(predicate5);
      Predicate<String> predicate11 = predicate9.or(predicate5);
      predicate3.test("-");
      predicate0.and(predicate0);
      Predicate<Object> predicate12 = predicate0.or(predicate0);
      predicate8.negate();
      Predicate<Object> predicate13 = predicate0.negate();
      predicate10.or(predicate1);
      Predicate<String> predicate14 = predicate3.or(predicate7);
      Predicate<String> predicate15 = predicate8.negate();
      predicate15.test("`Y F5_JIY46Ia");
      predicate4.negate();
      predicate3.and(predicate8);
      predicate0.negate();
      Predicate<Object> predicate16 = predicate12.negate();
      Predicate<String> predicate17 = predicate11.and(predicate16);
      predicate17.and(predicate13);
      Predicate<String> predicate18 = predicate9.negate();
      Predicate<String> predicate19 = predicate18.and(predicate10);
      predicate19.and(predicate14);
      Predicate<String> predicate20 = predicate19.and(predicate9);
      predicate20.negate();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Object object0 = new Object();
      Predicate<String> predicate2 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate3 = predicate2.or(predicate1);
      Predicate<String> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate4.and(predicate0);
      Predicate<String> predicate6 = predicate5.negate();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate8.or(predicate3);
      Predicate<String> predicate10 = predicate3.and(predicate9);
      predicate1.negate();
      Predicate<String> predicate11 = predicate8.and(predicate6);
      Predicate<String> predicate12 = predicate10.or(predicate6);
      predicate1.and(predicate0);
      predicate1.or(predicate0);
      Predicate<String> predicate13 = predicate9.and(predicate8);
      predicate9.negate();
      Integer integer0 = new Integer(2319);
      predicate1.negate();
      predicate11.or(predicate2);
      Predicate<String> predicate14 = predicate4.or(predicate8);
      Predicate<String> predicate15 = predicate9.negate();
      predicate15.test("`Y F5_JIY46Ia");
      predicate15.and(predicate14);
      Predicate<String> predicate16 = predicate4.and(predicate9);
      predicate1.negate();
      Predicate<String> predicate17 = predicate13.and(predicate1);
      predicate17.and(predicate4);
      predicate12.and(predicate9);
      predicate2.and(predicate16);
      predicate6.negate();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<String> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<String> predicate2 = predicate1.or(predicate0);
      Predicate<String> predicate3 = predicate1.negate();
      Predicate<String> predicate4 = predicate3.and(predicate0);
      Predicate<String> predicate5 = predicate1.and(predicate4);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate6 = predicate5.negate();
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate7.or(predicate2);
      Predicate<String> predicate9 = predicate2.and(predicate8);
      predicate0.negate();
      Predicate<String> predicate10 = predicate7.and(predicate5);
      Predicate<String> predicate11 = predicate9.or(predicate5);
      predicate0.and(predicate0);
      Predicate<Object> predicate12 = predicate0.or(predicate0);
      predicate8.negate();
      Predicate<Object> predicate13 = predicate0.negate();
      predicate10.or(predicate1);
      Predicate<String> predicate14 = predicate3.or(predicate7);
      Predicate<String> predicate15 = predicate8.negate();
      predicate15.test("`Y F5_JIY46Ia");
      predicate4.negate();
      predicate3.and(predicate8);
      predicate0.negate();
      Predicate<Object> predicate16 = predicate12.negate();
      Predicate<String> predicate17 = predicate11.and(predicate16);
      predicate17.and(predicate13);
      Predicate<String> predicate18 = predicate9.negate();
      Predicate<String> predicate19 = predicate18.and(predicate10);
      predicate19.and(predicate14);
      Predicate<String> predicate20 = predicate19.and(predicate9);
      predicate20.negate();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = (-2);
      JSJshopVars.apostrophe = (-2);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.562815860600497
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ajksf;r");
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "ajksf;r");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm0.cloneT();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<String> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      Predicate<String> predicate2 = predicate0.or(predicate1);
      Predicate<String> predicate3 = predicate1.negate();
      Predicate<String> predicate4 = predicate0.negate();
      Predicate<String> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate7.or(predicate6);
      Predicate<Object> predicate9 = predicate8.and(predicate6);
      predicate9.negate();
      predicate9.or(predicate8);
      Predicate<String> predicate10 = predicate1.or(predicate0);
      Predicate<String> predicate11 = predicate4.and(predicate3);
      Predicate<String> predicate12 = predicate11.negate();
      Predicate<String> predicate13 = predicate5.negate();
      predicate1.or(predicate8);
      Predicate<String> predicate14 = Predicate.isEqual((Object) predicate13);
      predicate12.and(predicate14);
      Predicate<Object> predicate15 = predicate8.and(predicate6);
      predicate10.and(predicate15);
      predicate2.and(predicate14);
      predicate13.negate();
      Predicate<Integer> predicate16 = Predicate.isEqual((Object) predicate14);
      predicate16.negate();
      System.setCurrentTimeMillis((-257L));
      jSTerm0.matches(jSTerm1);
      assertEquals("[ajksf;r, ajksf;r]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.679442376707846
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Integer> function1 = Function.identity();
      Function<Object, Object> function2 = Function.identity();
      function1.compose((Function<? super String, ? extends Integer>) function0);
      function2.compose((Function<? super Object, ?>) unaryOperator0);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ?>) function3);
      Function<Integer, Object> function4 = unaryOperator0.compose((Function<? super Integer, ?>) function1);
      function2.andThen((Function<? super Object, ?>) unaryOperator0);
      Function.identity();
      JSTerm jSTerm0 = new JSTerm();
      Function<Integer, Object> function5 = function1.andThen((Function<? super Integer, ?>) function4);
      Function<String, String> function6 = Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function5);
      jSTerm0.add((Object) "{");
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function7).apply(any());
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      function8.apply(function5);
      Function<Integer, JSTerm> function9 = (Function<Integer, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSTerm> function10 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      function8.compose((Function<? super Integer, ?>) function10);
      function8.andThen((Function<? super Integer, ? extends JSTerm>) function9);
      function8.andThen((Function<? super Integer, ? extends Integer>) function1);
      Function<JSSubstitution, Object> function11 = unaryOperator0.compose((Function<? super JSSubstitution, ?>) unaryOperator0);
      Function<Object, String> function12 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function11.andThen((Function<? super Object, ? extends String>) function12);
      unaryOperator0.apply(function6);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElement("{");
      jSTerm1.removeElement(function9);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSSubstitution2.fail());
      
      jSTerm0.removeElement(function3);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm2.isFunction());
      
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      
      JSTerm jSTerm4 = jSTerm1.cloneT();
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm4);
      assertTrue(jSTerm4.isFunction());
      
      JSTerm jSTerm5 = jSTerm0.call();
      assertTrue(jSTerm5.isFunction());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSJshopVars.backquote = 38;
      JSJshopVars.backquote = 38;
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(?\"3Jy0b3ZBRHDk;M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-1637), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ordinaryChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = null;
      System.setCurrentTimeMillis((-4));
      stringReader0.ready();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar(834);
      streamTokenizer3.parseNumbers();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
