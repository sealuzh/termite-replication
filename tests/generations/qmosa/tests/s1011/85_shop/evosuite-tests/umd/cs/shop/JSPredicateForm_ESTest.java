/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 12:26:28 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1259534134609535
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?b:]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar((-1));
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.nval = (double) (-1);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChar((-1));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-1564), (-1));
      streamTokenizer1.wordChars((-1), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-1));
      streamTokenizer0.ordinaryChar(730);
      streamTokenizer0.commentChar((-1));
      Integer integer1 = new Integer((-1));
      streamTokenizer2.quoteChar((-1));
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer2.whitespaceChars((-1), (-4));
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.ordinaryChars((-1), (-1));
      streamTokenizer0.lowerCaseMode(true);
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm1));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-1251L));
      System.setCurrentTimeMillis((-1251L));
      System.setCurrentTimeMillis((-2033L));
      System.setCurrentTimeMillis((-269L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1483L));
      System.setCurrentTimeMillis(1718L);
      long long0 = 2368L;
      System.setCurrentTimeMillis(2368L);
      System.setCurrentTimeMillis((-1251L));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis((-2033L));
      JSTerm jSTerm0 = new JSTerm();
      jSPredicateForm0.addElement(jSTerm0);
      System.setCurrentTimeMillis((-2033L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.832920911191322
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B%@)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.trimToSize();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = "p0J='[7#5{'n^M]` }";
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.parallelStream();
      streamTokenizer0.commentChar((-4));
      stringReader0.reset();
      jSTerm0.equals((JSPredicateForm) null);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.sort(comparator0);
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      Object object0 = new Object();
      jSTerm0.add((Object) streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.014983339002437
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expetig");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar((-1));
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChar((-1));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-1564), (-1));
      streamTokenizer1.wordChars((-1), (-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      streamTokenizer1.commentChar((-3));
      Integer integer0 = new Integer((-1));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.commentChar((-1685));
      streamTokenizer1.slashSlashComments(true);
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertEquals("(%%%%%% )", stringBuffer0.toString());
      
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1409958145862924
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z.x%hDekK+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar((-1));
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.nval = (double) (-1);
      streamTokenizer0.ttype = (-1495);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      streamTokenizer0.wordChars((-1495), (-1495));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.ordinaryChar((-1495));
      streamTokenizer0.wordChars((-4), 2);
      streamTokenizer1.wordChars((-1495), (-1110114093));
      streamTokenizer1.commentChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-1495));
      stringReader0.skip((-4));
      streamTokenizer2.quoteChar((-1495));
      streamTokenizer2.ttype = (-4);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChars((-1495), (-1495));
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertTrue(boolean0);
      
      streamTokenizer2.resetSyntax();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.print();
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm2));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\u008D';
      StringReader stringReader0 = new StringReader("#s.0");
      CharBuffer charBuffer0 = CharBuffer.allocate('\u008D');
      CharBuffer charBuffer1 = CharBuffer.allocate('\u008D');
      charBuffer1.chars();
      CharBuffer charBuffer2 = CharBuffer.allocate(15);
      CharBuffer charBuffer3 = CharBuffer.allocate('\u008D');
      charBuffer1.clear();
      CharBuffer charBuffer4 = CharBuffer.allocate('\u008D');
      CharBuffer.allocate(15);
      charBuffer0.rewind();
      CharBuffer charBuffer5 = CharBuffer.allocate('\u008D');
      charBuffer5.flip();
      charBuffer2.read(charBuffer1);
      charBuffer0.codePoints();
      charBuffer5.codePoints();
      CharBuffer charBuffer6 = CharBuffer.allocate(15);
      charBuffer3.clear();
      charBuffer4.codePoints();
      CharBuffer charBuffer7 = charBuffer0.slice();
      charBuffer7.slice();
      CharBuffer charBuffer8 = CharBuffer.allocate('\u008D');
      CharBuffer charBuffer9 = CharBuffer.allocate('\u008D');
      charBuffer6.rewind();
      charBuffer8.codePoints();
      charBuffer9.append((CharSequence) charBuffer4);
      charBuffer6.codePoints();
      CharBuffer.allocate(415);
      charArray0[0] = '\u008D';
      CharBuffer.allocate('\u008D');
      charBuffer8.append((CharSequence) charBuffer3);
      charBuffer3.codePoints();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(wc0l%CgW^h^SBp");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[0] = '{';
      CharBuffer charBuffer0 = CharBuffer.allocate('{');
      CharBuffer charBuffer1 = CharBuffer.allocate('{');
      charBuffer0.codePoints();
      CharBuffer charBuffer2 = CharBuffer.allocate('{');
      charBuffer2.order();
      CharBuffer charBuffer3 = CharBuffer.allocate('{');
      CharBuffer charBuffer4 = CharBuffer.allocate('{');
      CharBuffer charBuffer5 = CharBuffer.allocate('{');
      charBuffer0.rewind();
      CharBuffer.allocate('{');
      charBuffer3.clear();
      charBuffer2.read(charBuffer1);
      charBuffer0.codePoints();
      charBuffer5.codePoints();
      CharBuffer charBuffer6 = CharBuffer.allocate('{');
      charBuffer3.clear();
      charBuffer4.codePoints();
      CharBuffer charBuffer7 = CharBuffer.allocate('{');
      charBuffer7.asReadOnlyBuffer();
      CharBuffer.allocate(123);
      CharBuffer charBuffer8 = CharBuffer.allocate('{');
      CharBuffer charBuffer9 = CharBuffer.allocate('{');
      charBuffer6.rewind();
      charBuffer8.codePoints();
      CharBuffer charBuffer10 = charBuffer9.append((CharSequence) charBuffer4);
      charBuffer8.append((CharSequence) charBuffer6);
      charBuffer9.read(charBuffer10);
      charBuffer7.chars();
      CharBuffer.allocate('{');
      charBuffer8.codePoints();
      charArray0[0] = '{';
      CharBuffer.allocate('{');
      CharBuffer.allocate('{');
      CharBuffer charBuffer11 = CharBuffer.allocate('{');
      charBuffer11.codePoints();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(wcWl%CgW^^Srp");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9212364045420975
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eJWpeti%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar((-1));
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChar((-1));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer1.wordChars((-1), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      Integer integer0 = new Integer((-1));
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.commentChar((-1));
      streamTokenizer2.eolIsSignificant(true);
      Integer integer1 = new Integer((-1));
      streamTokenizer2.quoteChar((-1));
      streamTokenizer2.quoteChar((-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer2.whitespaceChars((-1), (-4));
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.ordinaryChars((-1), (-1));
      streamTokenizer0.lowerCaseMode(true);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1109599684818052
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eJWpeti%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar((-1));
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChar((-1));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-1564), (-1));
      streamTokenizer1.wordChars((-1), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      Integer integer0 = new Integer((-1));
      streamTokenizer0.ordinaryChar((-1));
      streamTokenizer0.commentChar((-1));
      streamTokenizer2.eolIsSignificant(true);
      Integer integer1 = new Integer((-1));
      streamTokenizer2.quoteChar((-1));
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer2.whitespaceChars((-1), (-4));
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.ordinaryChars((-1), (-1));
      streamTokenizer0.lowerCaseMode(true);
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm1));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2320587094640723
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eJWpeti%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar((-1));
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      streamTokenizer0.wordChars((-1), (-1));
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChar((-1));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-1564), (-1));
      streamTokenizer1.wordChars((-1), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-1));
      streamTokenizer0.commentChar((-1));
      streamTokenizer2.eolIsSignificant(true);
      Integer integer1 = new Integer((-1));
      streamTokenizer2.quoteChar((-1));
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer2.whitespaceChars((-1), (-4));
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.ordinaryChars((-1), (-1));
      streamTokenizer0.lowerCaseMode(true);
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSPredicateForm0.matches(jSPredicateForm1);
      assertTrue(jSPredicateForm0.equals((Object)jSPredicateForm2));
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B%@)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) null);
      Consumer<JSPredicateForm> consumer0 = (Consumer<JSPredicateForm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      charArray0[2] = 'U';
      charArray0[3] = 'p';
      charArray0[6] = 'D';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      jSSubstitution0.removeAllElements();
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) listIterator0;
      jSSubstitution0.iterator();
      objectArray0[4] = (Object) '\u0000';
      jSSubstitution0.toArray(objectArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.add(object0);
      Integer integer0 = new Integer('p');
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      stringReader0.read();
      charArray0[2] = 'U';
      charArray0[5] = 'U';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[13];
      objectArray0[2] = (Object) stringReader0;
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = (-1268L);
      long long1 = (-3336L);
      long long2 = 0L;
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1268L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2976L);
      System.setCurrentTimeMillis((-3336L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1268L));
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-3336L));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[14];
      CharBuffer charBuffer0 = CharBuffer.allocate('{');
      CharBuffer.allocate('\u0000');
      charBuffer0.codePoints();
      CharBuffer charBuffer1 = CharBuffer.allocate('{');
      CharBuffer charBuffer2 = CharBuffer.allocate('\u0000');
      charBuffer0.put('|');
      CharBuffer charBuffer3 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer4 = CharBuffer.allocate('{');
      charBuffer0.rewind();
      CharBuffer charBuffer5 = CharBuffer.allocate('\u0000');
      charBuffer4.chars();
      charBuffer2.clear();
      charBuffer4.read(charBuffer5);
      charBuffer1.codePoints();
      CharBuffer charBuffer6 = CharBuffer.allocate(0);
      charBuffer6.mark();
      charBuffer1.append((CharSequence) charBuffer6);
      charBuffer3.rewind();
      charBuffer5.codePoints();
      CharBuffer charBuffer7 = CharBuffer.allocate('{');
      CharBuffer.allocate(0);
      charBuffer7.asReadOnlyBuffer();
      System.setCurrentTimeMillis('\u000E');
      StringReader stringReader0 = new StringReader("(wRl%CgtW^Bp");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      CharBuffer charBuffer0 = CharBuffer.allocate('z');
      CharBuffer charBuffer1 = CharBuffer.allocate('z');
      charBuffer0.codePoints();
      CharBuffer charBuffer2 = CharBuffer.allocate(15);
      charBuffer2.order();
      CharBuffer charBuffer3 = CharBuffer.allocate('z');
      CharBuffer charBuffer4 = CharBuffer.allocate('z');
      CharBuffer charBuffer5 = CharBuffer.allocate(15);
      charBuffer0.rewind();
      CharBuffer charBuffer6 = CharBuffer.allocate('z');
      charBuffer6.position(15);
      charBuffer6.clear();
      charBuffer2.read(charBuffer1);
      charBuffer0.codePoints();
      charBuffer5.codePoints();
      CharBuffer charBuffer7 = CharBuffer.allocate(15);
      charBuffer3.clear();
      charBuffer4.codePoints();
      CharBuffer charBuffer8 = CharBuffer.allocate('z');
      charBuffer8.asReadOnlyBuffer();
      CharBuffer.allocate(15);
      CharBuffer charBuffer9 = CharBuffer.allocate('z');
      CharBuffer charBuffer10 = CharBuffer.allocate('z');
      charBuffer7.rewind();
      charBuffer9.codePoints();
      CharBuffer charBuffer11 = charBuffer10.append((CharSequence) charBuffer4);
      charBuffer7.codePoints();
      CharBuffer.allocate('z');
      charBuffer9.codePoints();
      charArray0[0] = 'z';
      CharBuffer.allocate('z');
      charBuffer3.compact();
      CharBuffer.allocate(15);
      charBuffer11.codePoints();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(:cWl%CgW^^Srp");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = (-1251L);
      long long1 = (-2037L);
      System.setCurrentTimeMillis((-1251L));
      System.setCurrentTimeMillis((-1251L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2976L);
      System.setCurrentTimeMillis((-2037L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1251L));
      System.setCurrentTimeMillis(3L);
      System.setCurrentTimeMillis((-2037L));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("((");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = (-3336L);
      System.setCurrentTimeMillis((-3336L));
      long long1 = 2968L;
      System.setCurrentTimeMillis(2968L);
      System.setCurrentTimeMillis((-1255L));
      System.setCurrentTimeMillis((-3336L));
      System.setCurrentTimeMillis((-18L));
      System.setCurrentTimeMillis(2968L);
      System.setCurrentTimeMillis((-11L));
      long long2 = (-31L);
      System.setCurrentTimeMillis((-31L));
      System.setCurrentTimeMillis((-18L));
      System.setCurrentTimeMillis(2968L);
      System.setCurrentTimeMillis((-31L));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(E");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B%@)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) streamTokenizer1);
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      Object object0 = new Object();
      jSSubstitution0.add((Object) stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      Iterator iterator0 = jSSubstitution0.iterator();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) streamTokenizer1;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) listIterator0;
      objectArray0[3] = (Object) "f%";
      objectArray0[4] = (Object) jSSubstitution0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) stringReader0;
      objectArray0[7] = (Object) iterator0;
      objectArray0[8] = (Object) "f%";
      jSSubstitution0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.add((Object) null);
      jSTerm1.toArray(objectArray0);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[5] = 'X';
      charArray0[0] = 'U';
      charArray0[3] = 'p';
      charArray0[4] = '7';
      charArray0[5] = 'U';
      charArray0[6] = 'p';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      jSSubstitution1.add((Object) null);
      jSSubstitution1.add((Object) listIterator0);
      streamTokenizer0.lowerCaseMode(false);
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) listIterator0;
      objectArray0[4] = (Object) 'z';
      objectArray0[5] = (Object) jSSubstitution1;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.clone();
      jSTerm1.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm1.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      charArray0[1] = 'D';
      charArray0[2] = 'U';
      charArray0[3] = 'p';
      charArray0[5] = 'U';
      charArray0[6] = 'D';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      jSSubstitution1.add((Object) listIterator0);
      streamTokenizer0.lowerCaseMode(false);
      jSSubstitution0.removeAllElements();
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) listIterator0;
      jSSubstitution0.iterator();
      objectArray0[4] = (Object) 'D';
      Object[] objectArray1 = jSSubstitution0.toArray(objectArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.add(object0);
      Integer integer0 = new Integer(2147483645);
      jSSubstitution0.add((Object) integer0);
      jSTerm0.add((Object) null);
      jSTerm0.toArray(objectArray1);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      stringReader0.ready();
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'X';
      StringReader stringReader1 = new StringReader("hzV4b'~6?y(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer((-1286));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer0.wordChars((-4), (-4));
      StringReader stringReader2 = new StringReader("?%%%");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      stringReader0.close();
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(1085L);
      long long0 = 2417L;
      System.setCurrentTimeMillis(2417L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[2] = '^';
      charArray0[3] = 'w';
      charArray0[5] = '^';
      charArray0[6] = 'D';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      jSSubstitution1.add((Object) listIterator0);
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSSubstitution1;
      objectArray0[3] = (Object) listIterator0;
      jSSubstitution0.iterator();
      jSSubstitution1.ensureCapacity(720);
      objectArray0[4] = (Object) 'z';
      jSSubstitution0.toArray(objectArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function0);
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.sort(comparator0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B:@)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("i4K");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.parseNumbers();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      Integer integer0 = new Integer(93);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      streamTokenizer2.nextToken();
      streamTokenizer0.nextToken();
      Integer integer1 = new Integer((-1503));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer5.ordinaryChars((-1503), (-112));
      streamTokenizer5.pushBack();
      Integer integer2 = new Integer((-112));
      stringReader1.ready();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      assertEquals((-4), streamTokenizer7.ttype);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("J9?btW%BZV");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      jSTerm0.add((Object) "J9?btW%BZV");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.quoteChar((-1));
      streamTokenizer4.wordChars((-1), (-4));
      StringReader stringReader2 = new StringReader("bl00b%");
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      streamTokenizer5.slashStarComments(true);
      streamTokenizer5.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("-_vfk.pNVe=*]O\"7");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      stringReader0.read();
      charArray0[1] = '*';
      charArray0[2] = 'n';
      charArray0[3] = '7';
      JSJshopVars.semicolon = 1;
      charArray0[4] = '+';
      charArray0[5] = '8';
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      jSPredicateForm0.addAll((Collection) jSTerm0);
      jSPredicateForm0.print();
      jSPredicateForm0.print();
      assertEquals(10, jSPredicateForm0.capacity());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(37);
      int int0 = 836;
      JSJshopVars.interrogation = 836;
      JSJshopVars.plus = 613;
      JSJshopVars.minus = 613;
      JSJshopVars.leftBrac = 0;
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0000');
      charBuffer0.codePoints();
      CharBuffer charBuffer2 = CharBuffer.allocate('\u0094');
      CharBuffer charBuffer3 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer4 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer5 = CharBuffer.allocate('\u0094');
      charBuffer1.mark();
      CharBuffer charBuffer6 = CharBuffer.allocate('\u0000');
      charBuffer3.clear();
      charBuffer2.read(charBuffer1);
      charBuffer0.codePoints();
      charBuffer5.codePoints();
      CharBuffer charBuffer7 = CharBuffer.allocate(0);
      CharBuffer charBuffer8 = charBuffer2.append((CharSequence) charBuffer7);
      charBuffer6.mark();
      charBuffer4.codePoints();
      CharBuffer charBuffer9 = CharBuffer.allocate('\u0094');
      charBuffer9.asReadOnlyBuffer();
      CharBuffer charBuffer10 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer11 = CharBuffer.allocate('\u0000');
      charBuffer9.mark();
      charBuffer10.codePoints();
      charBuffer11.append((CharSequence) charBuffer4);
      CharBuffer.allocate(0);
      charBuffer8.mark();
      CharBuffer charBuffer12 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer13 = charBuffer10.append((CharSequence) charBuffer12);
      int int0 = new Integer('\u0094');
      charBuffer6.chars();
      CharBuffer.allocate('\u0000');
      charBuffer10.codePoints();
      charArray0[0] = '\u0000';
      CharBuffer.allocate('\u0094');
      CharBuffer.allocate('\u0000');
      charBuffer13.codePoints();
      CharBuffer.allocate(0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.exclamation = (-1909361247);
      JSJshopVars.interrogation = (-1909361247);
      JSJshopVars.rightBrac = (-1909361247);
      JSJshopVars.astherisk = (-1909361247);
      JSJshopVars.minus = (-1909361247);
      JSJshopVars.astherisk = (-1909361247);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSPredicateForm0;
      objectArray0[3] = (Object) jSPredicateForm0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = (Object) jSPredicateForm0;
      objectArray0[6] = (Object) jSSubstitution0;
      objectArray0[7] = (Object) jSSubstitution0;
      objectArray0[8] = (Object) jSPredicateForm0;
      Object[] objectArray1 = jSSubstitution0.toArray(objectArray0);
      StringReader stringReader0 = new StringReader("xK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add(objectArray0[1]);
      jSTerm0.toArray(objectArray1);
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "f%");
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[10];
      jSSubstitution0.add((Object) listIterator0);
      objectArray0[2] = (Object) stringReader0;
      objectArray0[3] = (Object) listIterator0;
      objectArray0[5] = (Object) jSSubstitution0;
      Object[] objectArray1 = jSSubstitution0.toArray(objectArray0);
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) null);
      jSTerm0.toArray(objectArray1);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.033303574248122
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      charArray0[1] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      charArray0[6] = 'Y';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      jSSubstitution1.addAll((Collection) jSSubstitution0);
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) null);
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[0] = (Object) stringReader0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) 'z';
      jSSubstitution0.toArray(objectArray0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.add((Object) listIterator0);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(6.0)", stringBuffer0.toString());
      
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSPredicateForm0);
      jSPredicateForm0.applySubstitutionPF(jSSubstitution3);
      JSJshopVars.leftBrac = 7;
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution3);
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
      assertNotSame(jSPredicateForm0, jSPredicateForm2);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = '%';
      charArray0[2] = '%';
      jSPredicateForm0.setSize(33);
      charArray0[3] = '%';
      charArray0[5] = '%';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.codePoints();
      charBuffer0.get();
      charBuffer0.compact();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[5] = '%';
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(774);
      linkedList0.addLast(integer0);
      jSPredicateForm0.addAll((Collection) linkedList0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      charBuffer0.get();
      charBuffer0.compact();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7842068034002125
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "f0b%";
      StringReader stringReader0 = new StringReader("f0b%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Consumer<JSPredicateForm> consumer0 = (Consumer<JSPredicateForm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      jSSubstitution0.clone();
      jSSubstitution2.spliterator();
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("f0b%");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0710633374692575
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      charArray0[2] = 'U';
      charArray0[3] = 'p';
      charArray0[4] = '7';
      charArray0[5] = 'U';
      charArray0[6] = ',';
      stringReader0.read(charArray0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      predicate2.and(predicate1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      predicate0.negate();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      streamTokenizer0.resetSyntax();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm1);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.matches(jSPredicateForm4);
      JSJshopVars.greaterT = (-1627724429);
      jSPredicateForm3.matches(jSPredicateForm1, jSSubstitution0);
      jSTerm0.add((Object) predicate3);
      jSPredicateForm0.matches(jSPredicateForm3);
      jSPredicateForm1.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5fBl\u0000_{0B%@)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution2);
      jSSubstitution3.clone();
      System.setCurrentTimeMillis((-510L));
      System.setCurrentTimeMillis((-2733L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-419L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-419L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(24L);
      System.setCurrentTimeMillis(24L);
      System.setCurrentTimeMillis(2962L);
      System.setCurrentTimeMillis((-3298L));
      System.setCurrentTimeMillis(33L);
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-3298L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2962L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-3298L));
      System.setCurrentTimeMillis((-3298L));
      System.setCurrentTimeMillis(2962L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(33L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(2962L);
      System.setCurrentTimeMillis(2962L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(732L);
      System.setCurrentTimeMillis(732L);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSPredicateForm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[9];
      StringReader stringReader0 = new StringReader("s.0");
      stringReader0.read(charArray0);
      CharBuffer.allocate(3);
      CharBuffer charBuffer0 = CharBuffer.allocate('s');
      Integer integer0 = new Integer('\u0087');
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer2 = CharBuffer.allocate(3);
      charBuffer2.get();
      CharBuffer charBuffer3 = CharBuffer.allocate(3);
      charBuffer2.flip();
      charBuffer1.read(charBuffer0);
      charBuffer0.codePoints();
      CharBuffer.allocate(0);
      charBuffer0.flip();
      CharBuffer charBuffer4 = CharBuffer.allocate(3);
      charBuffer1.limit(0);
      CharBuffer charBuffer5 = CharBuffer.wrap(charArray0);
      CharBuffer.allocate(738);
      CharBuffer.allocate('s');
      charBuffer5.codePoints();
      CharBuffer charBuffer6 = charBuffer4.slice();
      CharBuffer charBuffer7 = charBuffer5.slice();
      CharBuffer charBuffer8 = CharBuffer.allocate(3);
      CharBuffer.allocate(0);
      charBuffer7.codePoints();
      charBuffer6.append((CharSequence) "s.0");
      charBuffer6.codePoints();
      CharBuffer.allocate(0);
      CharBuffer.allocate(9);
      charBuffer3.append((CharSequence) charBuffer8);
      charBuffer8.codePoints();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0000');
      charBuffer0.codePoints();
      CharBuffer charBuffer2 = CharBuffer.allocate('\u0094');
      CharBuffer charBuffer3 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer4 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer5 = CharBuffer.allocate('\u0094');
      charBuffer1.mark();
      CharBuffer charBuffer6 = CharBuffer.allocate('\u0000');
      charBuffer3.clear();
      charBuffer2.read(charBuffer1);
      charBuffer0.codePoints();
      charBuffer5.codePoints();
      CharBuffer charBuffer7 = CharBuffer.allocate(0);
      CharBuffer charBuffer8 = charBuffer2.append((CharSequence) charBuffer7);
      charBuffer6.mark();
      charBuffer4.codePoints();
      CharBuffer charBuffer9 = CharBuffer.allocate('\u0094');
      charBuffer9.asReadOnlyBuffer();
      CharBuffer charBuffer10 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer11 = CharBuffer.allocate('\u0000');
      charBuffer9.mark();
      charBuffer10.codePoints();
      charBuffer11.append((CharSequence) charBuffer4);
      CharBuffer.allocate(0);
      charBuffer8.mark();
      CharBuffer charBuffer12 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer13 = charBuffer10.append((CharSequence) charBuffer12);
      Integer integer0 = new Integer('\u0094');
      charBuffer6.chars();
      charBuffer10.codePoints();
      charArray0[0] = '\u0000';
      CharBuffer.allocate('\u0094');
      CharBuffer.allocate('\u0000');
      charBuffer13.codePoints();
      CharBuffer.allocate(0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0000');
      charBuffer0.codePoints();
      CharBuffer charBuffer2 = CharBuffer.allocate('\u0094');
      CharBuffer charBuffer3 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer4 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer5 = CharBuffer.allocate('\u0094');
      charBuffer1.mark();
      CharBuffer charBuffer6 = CharBuffer.allocate('\u0000');
      charBuffer3.clear();
      charBuffer2.read(charBuffer1);
      charBuffer0.codePoints();
      charBuffer5.codePoints();
      CharBuffer charBuffer7 = CharBuffer.allocate(0);
      CharBuffer charBuffer8 = charBuffer2.append((CharSequence) charBuffer7);
      charBuffer6.mark();
      charBuffer4.codePoints();
      CharBuffer charBuffer9 = CharBuffer.allocate('\u0094');
      CharBuffer charBuffer10 = charBuffer9.asReadOnlyBuffer();
      CharBuffer charBuffer11 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer12 = CharBuffer.allocate('\u0000');
      charBuffer9.mark();
      charBuffer11.codePoints();
      CharBuffer charBuffer13 = charBuffer12.append((CharSequence) charBuffer4);
      charBuffer13.put("<t{q?5^M$&2PQm", 0, 0);
      charBuffer8.mark();
      CharBuffer charBuffer14 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer15 = charBuffer11.append((CharSequence) charBuffer14);
      charBuffer12.read(charBuffer13);
      charBuffer10.codePoints();
      CharBuffer.allocate('\u0000');
      charBuffer11.codePoints();
      charArray0[0] = '\u0000';
      CharBuffer.allocate('\u0094');
      CharBuffer.allocate('\u0000');
      charBuffer15.codePoints();
      CharBuffer.allocate(0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertEquals("[]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0000');
      charBuffer0.codePoints();
      CharBuffer charBuffer2 = CharBuffer.allocate('{');
      CharBuffer charBuffer3 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer4 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer5 = CharBuffer.allocate('{');
      charBuffer0.clear();
      CharBuffer charBuffer6 = CharBuffer.allocate('\u0000');
      charBuffer3.clear();
      charBuffer2.read(charBuffer1);
      charBuffer0.codePoints();
      charBuffer5.codePoints();
      CharBuffer charBuffer7 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer8 = CharBuffer.allocate(0);
      charBuffer2.append((CharSequence) charBuffer8);
      charBuffer3.clear();
      charBuffer6.codePoints();
      CharBuffer charBuffer9 = CharBuffer.allocate('{');
      CharBuffer charBuffer10 = charBuffer9.asReadOnlyBuffer();
      CharBuffer.allocate(0);
      CharBuffer charBuffer11 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer12 = CharBuffer.allocate('\u0000');
      charBuffer7.rewind();
      CharBuffer charBuffer13 = charBuffer12.append((CharSequence) charBuffer4);
      charBuffer11.append((CharSequence) charBuffer7);
      char[] charArray1 = new char[0];
      charBuffer2.get(charArray1);
      charBuffer12.read(charBuffer13);
      charBuffer10.codePoints();
      CharBuffer.allocate('\u0000');
      charBuffer11.codePoints();
      charArray0[0] = '\u0000';
      CharBuffer.allocate('{');
      CharBuffer.allocate('\u0000');
      CharBuffer.allocate('{');
      CharBuffer.allocate(0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) jSPredicateForm0);
      jSPredicateForm0.retainAll(jSTerm0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[2] = 'U';
      charArray0[3] = 'p';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      charArray0[6] = '\u0019';
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) jSPredicateForm0);
      jSPredicateForm0.retainAll(jSTerm0);
      jSPredicateForm0.retainAll(jSTerm0);
      jSTerm0.matches(jSPredicateForm0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[14];
      CharBuffer charBuffer0 = CharBuffer.allocate('?');
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0000');
      charBuffer0.codePoints();
      CharBuffer charBuffer2 = CharBuffer.allocate('?');
      CharBuffer charBuffer3 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer4 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer5 = CharBuffer.allocate('?');
      charBuffer0.clear();
      CharBuffer charBuffer6 = CharBuffer.allocate('?');
      charBuffer3.clear();
      charBuffer2.read(charBuffer1);
      charBuffer0.codePoints();
      charBuffer5.codePoints();
      CharBuffer charBuffer7 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer8 = CharBuffer.allocate('?');
      CharBuffer charBuffer9 = charBuffer2.append((CharSequence) charBuffer8);
      charBuffer9.clear();
      charBuffer6.codePoints();
      CharBuffer charBuffer10 = CharBuffer.allocate('?');
      charBuffer8.clear();
      CharBuffer charBuffer11 = charBuffer10.asReadOnlyBuffer();
      CharBuffer charBuffer12 = CharBuffer.allocate(0);
      CharBuffer charBuffer13 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer14 = CharBuffer.allocate('\u0000');
      charBuffer9.clear();
      CharBuffer.wrap(charArray0);
      charBuffer12.chars();
      CharBuffer charBuffer15 = charBuffer14.append((CharSequence) charBuffer4);
      charBuffer13.append((CharSequence) charBuffer7);
      charBuffer14.read(charBuffer15);
      charBuffer11.codePoints();
      CharBuffer.allocate('\u0000');
      charArray0[6] = '\u0000';
      CharBuffer.allocate('?');
      CharBuffer.allocate('\u0000');
      System.setCurrentTimeMillis((-1L));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0000');
      charBuffer0.codePoints();
      CharBuffer charBuffer2 = CharBuffer.allocate('\u0094');
      CharBuffer charBuffer3 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer4 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer5 = CharBuffer.allocate('\u0094');
      charBuffer1.mark();
      CharBuffer charBuffer6 = CharBuffer.allocate('\u0000');
      charBuffer3.clear();
      charBuffer2.read(charBuffer1);
      charBuffer0.codePoints();
      charBuffer5.codePoints();
      CharBuffer charBuffer7 = CharBuffer.allocate(0);
      CharBuffer charBuffer8 = charBuffer2.append((CharSequence) charBuffer7);
      charBuffer6.mark();
      charBuffer4.codePoints();
      CharBuffer charBuffer9 = CharBuffer.allocate('\u0094');
      CharBuffer charBuffer10 = CharBuffer.allocate('\u0094');
      CharBuffer charBuffer11 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer12 = CharBuffer.allocate('\u0000');
      charBuffer9.mark();
      charBuffer11.codePoints();
      CharBuffer charBuffer13 = charBuffer12.append((CharSequence) charBuffer4);
      CharBuffer.allocate(0);
      charBuffer8.mark();
      CharBuffer charBuffer14 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer15 = charBuffer11.append((CharSequence) charBuffer14);
      charBuffer12.read(charBuffer13);
      charBuffer10.codePoints();
      CharBuffer.allocate('\u0000');
      charBuffer11.codePoints();
      charArray0[0] = '\u0000';
      CharBuffer.allocate('\u0094');
      CharBuffer.allocate('\u0000');
      charBuffer15.codePoints();
      CharBuffer.allocate(0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hzV4b'~6?y(");
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[2] = 'U';
      charArray0[3] = 'p';
      charArray0[5] = 'U';
      charArray0[6] = 'D';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      ListIterator listIterator0 = jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      jSSubstitution1.add((Object) listIterator0);
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) listIterator0;
      jSSubstitution0.iterator();
      objectArray0[4] = (Object) 'z';
      objectArray0[5] = (Object) jSSubstitution1;
      jSSubstitution0.toArray(objectArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function0);
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.sort(comparator0);
      jSTerm0.add(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[14];
      CharBuffer charBuffer0 = CharBuffer.allocate('?');
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0000');
      charBuffer0.codePoints();
      CharBuffer charBuffer2 = CharBuffer.allocate('?');
      CharBuffer charBuffer3 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer4 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer5 = CharBuffer.allocate('?');
      charBuffer0.clear();
      CharBuffer charBuffer6 = CharBuffer.allocate('?');
      charBuffer3.clear();
      charBuffer2.read(charBuffer1);
      charBuffer0.codePoints();
      charBuffer5.codePoints();
      CharBuffer charBuffer7 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer8 = CharBuffer.allocate('?');
      CharBuffer charBuffer9 = charBuffer2.append((CharSequence) charBuffer8);
      charBuffer9.clear();
      charBuffer6.codePoints();
      CharBuffer charBuffer10 = CharBuffer.allocate('?');
      CharBuffer charBuffer11 = charBuffer10.asReadOnlyBuffer();
      CharBuffer charBuffer12 = CharBuffer.allocate(0);
      CharBuffer charBuffer13 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer14 = CharBuffer.allocate('\u0000');
      charBuffer9.clear();
      charBuffer12.chars();
      CharBuffer charBuffer15 = charBuffer14.append((CharSequence) charBuffer4);
      charBuffer13.append((CharSequence) charBuffer7);
      charBuffer14.read(charBuffer15);
      charBuffer11.codePoints();
      CharBuffer.allocate('\u0000');
      charBuffer13.codePoints();
      charArray0[6] = '\u0000';
      CharBuffer.allocate('?');
      CharBuffer.allocate('\u0000');
      CharBuffer charBuffer16 = CharBuffer.allocate('\u0000');
      charBuffer16.codePoints();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0000');
      charBuffer0.codePoints();
      CharBuffer charBuffer2 = CharBuffer.allocate('{');
      CharBuffer charBuffer3 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer4 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer5 = CharBuffer.allocate('{');
      charBuffer0.clear();
      CharBuffer charBuffer6 = CharBuffer.allocate('\u0000');
      charBuffer3.clear();
      charBuffer2.read(charBuffer1);
      charBuffer0.codePoints();
      charBuffer5.codePoints();
      CharBuffer charBuffer7 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer8 = CharBuffer.allocate(0);
      charBuffer2.append((CharSequence) charBuffer8);
      charBuffer3.clear();
      charBuffer6.codePoints();
      CharBuffer charBuffer9 = CharBuffer.allocate('{');
      CharBuffer charBuffer10 = charBuffer9.asReadOnlyBuffer();
      CharBuffer.allocate(0);
      CharBuffer charBuffer11 = CharBuffer.allocate('\u0000');
      CharBuffer charBuffer12 = CharBuffer.allocate('\u0000');
      charBuffer7.rewind();
      CharBuffer charBuffer13 = charBuffer12.append((CharSequence) charBuffer4);
      charBuffer11.append((CharSequence) charBuffer7);
      char[] charArray1 = new char[1];
      charBuffer2.get(charArray1);
      charBuffer12.read(charBuffer13);
      charBuffer10.codePoints();
      CharBuffer.allocate('\u0000');
      charBuffer11.codePoints();
      charArray0[0] = '\u0000';
      CharBuffer.allocate('\u0000');
      CharBuffer.allocate('{');
      CharBuffer.allocate(0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.clone();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[0] = '\u0081';
      CharBuffer charBuffer0 = CharBuffer.allocate('\u0081');
      CharBuffer charBuffer1 = CharBuffer.allocate('\u0081');
      charBuffer0.codePoints();
      CharBuffer charBuffer2 = CharBuffer.allocate(15);
      charBuffer2.order();
      CharBuffer charBuffer3 = CharBuffer.allocate('\u0081');
      CharBuffer charBuffer4 = CharBuffer.allocate('\u0081');
      CharBuffer charBuffer5 = CharBuffer.allocate(15);
      charBuffer0.rewind();
      CharBuffer.allocate('\u0081');
      charBuffer1.flip();
      charBuffer2.read(charBuffer1);
      charBuffer0.codePoints();
      charBuffer5.codePoints();
      CharBuffer charBuffer6 = CharBuffer.allocate(15);
      charBuffer3.clear();
      charBuffer4.codePoints();
      CharBuffer charBuffer7 = CharBuffer.allocate('\u0081');
      CharBuffer charBuffer8 = charBuffer7.asReadOnlyBuffer();
      CharBuffer.allocate(0);
      CharBuffer charBuffer9 = CharBuffer.allocate('\u0081');
      CharBuffer charBuffer10 = CharBuffer.allocate('\u0081');
      charBuffer6.rewind();
      charBuffer9.codePoints();
      CharBuffer charBuffer11 = charBuffer10.append((CharSequence) charBuffer4);
      charBuffer10.read(charBuffer11);
      charBuffer8.codePoints();
      CharBuffer.allocate('\u0081');
      charBuffer9.codePoints();
      charArray0[0] = '\u0081';
      CharBuffer.allocate('\u0081');
      CharBuffer.allocate('\u0081');
      CharBuffer charBuffer12 = CharBuffer.allocate(15);
      charBuffer12.codePoints();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(wcWl%CgW^^Srp");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
