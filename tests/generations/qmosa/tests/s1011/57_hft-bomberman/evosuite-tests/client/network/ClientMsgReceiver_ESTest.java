/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 13:33:08 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.net.Proxy;
import java.net.Socket;
import java.sql.SQLDataException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLTransactionRollbackException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import javax.swing.DebugGraphics;
import messages.global.MapInfo;
import messages.global.MapListMsg;
import messages.round.RoundStateMsg;
import messages.session.SessionParticipationMsg;
import org.apache.log4j.helpers.Loader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      String string0 = "Couldn't close input stream";
      SQLDataException sQLDataException0 = new SQLDataException(string0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      Hashtable<Thread, StackTraceElement[]> hashtable0 = new Hashtable<Thread, StackTraceElement[]>();
      PrintStream printStream0 = DebugGraphics.logStream();
      String string1 = "p0";
      SQLDataException sQLDataException1 = new SQLDataException(string1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0);
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object object1 = new Object();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byteArrayOutputStream1.flush();
      byteArrayOutputStream1.reset();
      Object object2 = new Object();
      Object object3 = new Object();
      byteArrayOutputStream1.reset();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) sQLDataException1;
      objectArray0[2] = (Object) sQLDataException1;
      objectArray0[3] = object1;
      objectArray0[4] = object1;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) clientMsgReceiver0;
      objectArray0[7] = (Object) mockPrintStream0;
      mockPrintStream0.format(string0, objectArray0);
      long long0 = (-1L);
      System.setCurrentTimeMillis(long0);
      boolean boolean0 = false;
      int int0 = 1601;
      System.setCurrentTimeMillis(long0);
      SessionParticipationMsg sessionParticipationMsg0 = new SessionParticipationMsg(boolean0, int0, string1);
      clientMsgReceiver0.processMsg(sessionParticipationMsg0);
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      int int0 = 206;
      bomberClient0.setIdOffset(int0);
      mockSocket0.getLocalAddress();
      MockThread.getAllStackTraces();
      PrintStream printStream0 = DebugGraphics.logStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0);
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byteArrayOutputStream1.reset();
      boolean boolean0 = false;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, boolean0);
      mockSocket0.getLocalAddress();
      LinkedList<MapInfo> linkedList0 = new LinkedList<MapInfo>();
      ArrayList<MapInfo> arrayList0 = new ArrayList<MapInfo>();
      MapListMsg mapListMsg0 = new MapListMsg(arrayList0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(mapListMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      int int0 = 0;
      bomberClient0.setIdOffset(int0);
      mockSocket0.getLocalAddress();
      List<MapInfo> list0 = null;
      MapListMsg mapListMsg0 = new MapListMsg(list0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(mapListMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      bomberClient0.deleteObservers();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      int int0 = 0;
      RoundStateMsg roundStateMsg0 = new RoundStateMsg(int0);
      clientMsgReceiver0.processMsg(roundStateMsg0);
      MockThread.getDefaultUncaughtExceptionHandler();
      byte byte0 = (byte)31;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = byte0;
      StartFrame startFrame0 = null;
      StartFrame.startFrame = startFrame0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      mockSocket0.getLocalAddress();
      List<MapInfo> list0 = null;
      MapListMsg mapListMsg0 = new MapListMsg(list0);
      String string0 = "`Hp2e";
      // Undeclared exception!
      try { 
        mapListMsg0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("messages.global.MapListMsg", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      clientMsgReceiver0.setContextClassLoader(classLoader1);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Socket socket0 = null;
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver(socket0, bomberClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      String string0 = "Couldn't close input stream";
      SQLDataException sQLDataException0 = new SQLDataException(string0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      MockThread.getAllStackTraces();
      DebugGraphics.logStream();
      String string1 = "";
      String string2 = "client.network.ClientMsgReceiver";
      SQLDataException sQLDataException1 = new SQLDataException(string2);
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      Object object1 = new Object();
      Object object2 = new Object();
      String string3 = "";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) sQLDataException0;
      objectArray0[2] = object1;
      Loader.getResource(string3);
      objectArray0[3] = object0;
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) sQLDataException0;
      objectArray1[1] = (Object) string2;
      objectArray1[2] = (Object) bomberClient0;
      Object object3 = new Object();
      objectArray1[3] = object3;
      objectArray1[4] = (Object) consumer0;
      objectArray1[5] = (Object) string1;
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      String string0 = "Couldn't close input stream";
      SQLDataException sQLDataException0 = new SQLDataException(string0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      HashMap<Thread, StackTraceElement[]> hashMap0 = new HashMap<Thread, StackTraceElement[]>();
      PrintStream printStream0 = DebugGraphics.logStream();
      String string1 = "Yv~pTgG0P=ryf+,g:";
      SQLDataException sQLDataException1 = new SQLDataException(string1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0);
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      Object object1 = new Object();
      Object object2 = new Object();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      String string2 = "Could not load properties from file";
      String string3 = "+W/oJxm";
      int int0 = 1;
      StackTraceElement stackTraceElement0 = new StackTraceElement(string2, string3, string2, int0);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string4 = "";
      String string5 = "";
      StackTraceElement stackTraceElement1 = new StackTraceElement(string4, string0, string5, int0);
      stackTraceElementArray0[1] = stackTraceElement1;
      String string6 = "Unknown message type: ";
      String string7 = "Ku!i+z=(GK_\"";
      String string8 = "8";
      StackTraceElement stackTraceElement2 = new StackTraceElement(string6, string7, string8, int0);
      stackTraceElementArray0[2] = stackTraceElement2;
      String string9 = "";
      int int1 = (-1164);
      StackTraceElement stackTraceElement3 = new StackTraceElement(string3, string9, string6, int1);
      stackTraceElementArray0[3] = stackTraceElement3;
      String string10 = "client.network.ClientMsgReceiver";
      StackTraceElement stackTraceElement4 = new StackTraceElement(string10, string5, string1, int1);
      stackTraceElementArray0[4] = stackTraceElement4;
      String string11 = "";
      String string12 = "zuE20[F5oh.#.EV_6?J";
      int int2 = (-2729);
      StackTraceElement stackTraceElement5 = new StackTraceElement(string11, string12, string0, int2);
      stackTraceElementArray0[5] = stackTraceElement5;
      String string13 = "Unknown message type: ";
      String string14 = "";
      StackTraceElement stackTraceElement6 = new StackTraceElement(string13, string14, string0, int0);
      stackTraceElementArray0[6] = stackTraceElement6;
      String string15 = "oxPHtA3z";
      String string16 = "ROLLBACK";
      StackTraceElement stackTraceElement7 = new StackTraceElement(string15, string1, string16, int1);
      stackTraceElementArray0[7] = stackTraceElement7;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      sQLDataException0.addSuppressed(sQLDataException1);
      String string17 = "j!ebi*'o8fokW";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object2;
      objectArray0[1] = object1;
      objectArray0[2] = (Object) hashMap0;
      objectArray0[3] = (Object) string1;
      mockPrintStream0.format(string17, objectArray0);
      String string18 = null;
      int int3 = 0;
      String string19 = "";
      int int4 = 0;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(string18, string19, int4, sQLDataException1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(string19, string17, int3, sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = null;
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLInvalidAuthorizationSpecException1);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
