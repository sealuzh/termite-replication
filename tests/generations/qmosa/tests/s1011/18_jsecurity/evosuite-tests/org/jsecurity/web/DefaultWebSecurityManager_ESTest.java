/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 12:36:29 GMT 2019
 */

package org.jsecurity.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsecurity.authc.AuthenticationListener;
import org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy;
import org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy;
import org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy;
import org.jsecurity.authc.pam.ModularAuthenticationStrategy;
import org.jsecurity.authc.pam.ModularRealmAuthenticator;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.permission.AllPermission;
import org.jsecurity.authz.permission.WildcardPermissionResolver;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.Session;
import org.jsecurity.session.SessionListener;
import org.jsecurity.subject.DelegatingSubject;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.RememberMeManager;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.DefaultWebSecurityManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWebSecurityManager_ESTest extends DefaultWebSecurityManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy1 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      modularRealmAuthenticator0.getModularAuthenticationStrategy();
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy1 = new AllSuccessfulModularAuthenticationStrategy();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getLocalName();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper2.getLocalName();
      Object object0 = new Object();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(object0, "U'm}mkOW$Z;GM");
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(simplePrincipalCollection1, false, inetAddress0, (Session) null, defaultWebSecurityManager0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper3, servletResponseWrapper0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Illegal configuration. No default cache is configured.");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.setPermissions(evoSuiteFile2, false, false, false);
      FileSystemHandling.createFolder(evoSuiteFile2);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      boolean boolean0 = defaultWebSecurityManager0.isHttpSessionMode();
      assertTrue(boolean0);
      
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      servletResponseWrapper0.resetBuffer();
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) null, true, (Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) null);
      assertTrue(subject0.isAuthenticated());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8595824068593738
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simplePrincipalCollection0.getRealmNames();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm1);
      defaultWebSecurityManager0.setSessionMode("http");
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      Class<Integer> class0 = Integer.class;
      simplePrincipalCollection0.oneByType(class0);
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection4 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection5 = new SimplePrincipalCollection();
      assertTrue(simplePrincipalCollection5.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7754337976947765
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy1 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      ModularAuthenticationStrategy modularAuthenticationStrategy0 = modularRealmAuthenticator0.getModularAuthenticationStrategy();
      defaultWebSecurityManager0.setModularAuthenticationStrategy(modularAuthenticationStrategy0);
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      defaultWebSecurityManager0.setModularAuthenticationStrategy(allSuccessfulModularAuthenticationStrategy0);
      boolean boolean0 = defaultWebSecurityManager0.isHttpSessionMode();
      boolean boolean1 = defaultWebSecurityManager0.isAuthenticated((Session) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      byte byte0 = (byte) (-113);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null, servletRequestWrapper1, servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.018703762168135
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simplePrincipalCollection0.getRealmNames();
      simplePrincipalCollection0.iterator();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection();
      Class<Integer> class0 = Integer.TYPE;
      Class<Integer> class1 = Integer.class;
      SimplePrincipalCollection simplePrincipalCollection4 = new SimplePrincipalCollection(simplePrincipalCollection0);
      Class<SessionListener> class2 = SessionListener.class;
      simplePrincipalCollection4.oneByType(class2);
      simplePrincipalCollection4.oneByType(class1);
      Class<Integer> class3 = Integer.TYPE;
      simplePrincipalCollection1.byType(class1);
      SimplePrincipalCollection simplePrincipalCollection5 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection6 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection7 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection8 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection9 = new SimplePrincipalCollection();
      defaultWebSecurityManager0.setSessionIdCookieSecure(false);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.018703762168135
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Class<SimplePrincipalCollection> class0 = SimplePrincipalCollection.class;
      simplePrincipalCollection0.byType(class0);
      simplePrincipalCollection0.getRealmNames();
      simplePrincipalCollection0.iterator();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection();
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      simplePrincipalCollection3.byType(class1);
      Class<Integer> class2 = Integer.class;
      simplePrincipalCollection3.oneByType(class2);
      SimplePrincipalCollection simplePrincipalCollection4 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection5 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection6 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection7 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection8 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection9 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection10 = new SimplePrincipalCollection();
      defaultWebSecurityManager0.setSessionIdCookieMaxAge(50);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8686121260453956
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.setRememberMeManager((RememberMeManager) null);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Class<SimplePrincipalCollection> class0 = SimplePrincipalCollection.class;
      simplePrincipalCollection0.byType(class0);
      simplePrincipalCollection0.getRealmNames();
      simplePrincipalCollection0.iterator();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection();
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      simplePrincipalCollection3.byType(class1);
      Class<Integer> class2 = Integer.TYPE;
      simplePrincipalCollection3.oneByType(class2);
      SimplePrincipalCollection simplePrincipalCollection4 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection5 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection6 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection7 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection8 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection9 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection10 = new SimplePrincipalCollection();
      String string0 = defaultWebSecurityManager0.getSessionMode();
      assertEquals("jsecurity", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7063260587210523
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Class<SimplePrincipalCollection> class0 = SimplePrincipalCollection.class;
      simplePrincipalCollection0.byType(class0);
      simplePrincipalCollection0.getRealmNames();
      simplePrincipalCollection0.iterator();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection4 = new SimplePrincipalCollection();
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      simplePrincipalCollection3.byType(class1);
      SimplePrincipalCollection simplePrincipalCollection5 = new SimplePrincipalCollection(simplePrincipalCollection2);
      Class<Integer> class2 = Integer.class;
      simplePrincipalCollection4.oneByType(class2);
      SimplePrincipalCollection simplePrincipalCollection6 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection7 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection8 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection9 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection10 = new SimplePrincipalCollection();
      defaultWebSecurityManager0.isHttpSessionMode();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.018703762168135
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("jsecurity");
      AllPermission allPermission0 = new AllPermission();
      simpleAccountRealm1.setPermissionResolver(wildcardPermissionResolver0);
      SessionListener sessionListener0 = mock(SessionListener.class, new ViolatedAssumptionAnswer());
      defaultWebSecurityManager0.add(sessionListener0);
      defaultWebSecurityManager0.setSessionIdCookiePath("!{z+x.i _!z");
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.39605050990334
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      simpleAccountRealm0.setPermissionResolver(wildcardPermissionResolver0);
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm0);
      Session session0 = null;
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      defaultWebSecurityManager1.isAuthenticated((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      defaultWebSecurityManager0.newSessionManagerInstance();
      DefaultWebSecurityManager defaultWebSecurityManager2 = new DefaultWebSecurityManager();
      defaultWebSecurityManager2.getPrincipals((Session) null);
      defaultWebSecurityManager0.createSubject((PrincipalCollection) null, false, (Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.setSessionMode("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6120172700343436
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(servletResponse0).getLocale();
      doReturn((ServletOutputStream) null).when(servletResponse0).getOutputStream();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      servletResponseWrapper0.reset();
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper6);
      servletResponseWrapper6.getOutputStream();
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper3.setLocale((Locale) null);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper9);
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper11);
      ServletResponseWrapper servletResponseWrapper13 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper14 = new ServletResponseWrapper(servletResponseWrapper13);
      ServletResponseWrapper servletResponseWrapper15 = new ServletResponseWrapper(servletResponseWrapper9);
      servletResponseWrapper5.reset();
      servletResponseWrapper4.getLocale();
      servletResponseWrapper15.setLocale((Locale) null);
      servletResponseWrapper14.flushBuffer();
      ServletResponseWrapper servletResponseWrapper16 = new ServletResponseWrapper(servletResponseWrapper8);
      servletResponseWrapper8.reset();
      ServletResponseWrapper servletResponseWrapper17 = new ServletResponseWrapper(servletResponseWrapper9);
      servletResponseWrapper2.resetBuffer();
      servletResponseWrapper16.flushBuffer();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletResponseWrapper2.getResponse();
      ServletResponseWrapper servletResponseWrapper18 = new ServletResponseWrapper(servletResponseWrapper4);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      Subject subject0 = defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper5);
      assertFalse(subject0.isAuthenticated());
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6120172700343436
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getCharacterEncoding();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      servletResponseWrapper0.getCharacterEncoding();
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.028453832036954
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "jsecurity");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionIdCookieName("}y*)x?]EM0WAw{");
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
      
      Integer integer0 = new Integer((-3080));
      boolean boolean0 = defaultWebSecurityManager1.isHttpSessionMode();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(servletResponse0).getWriter();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      delegatingSubject0.logout();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-113);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper0, servletResponseWrapper1);
      servletResponseWrapper2.getWriter();
      ServletResponse servletResponse1 = null;
      ServletResponseWrapper servletResponseWrapper3 = null;
      try {
        servletResponseWrapper3 = new ServletResponseWrapper((ServletResponse) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Response cannot be null
         //
         verifyException("javax.servlet.ServletResponseWrapper", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((ServletOutputStream) null).when(servletResponse0).getOutputStream();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      servletResponseWrapper0.reset();
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper6);
      servletResponseWrapper6.getOutputStream();
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper9);
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper11);
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setModularAuthenticationStrategy(allSuccessfulModularAuthenticationStrategy0);
      defaultWebSecurityManager0.setSessionMode("http");
      System.setCurrentTimeMillis(600L);
      System.setCurrentTimeMillis((-801L));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      LinkedHashSet<AuthenticationListener> linkedHashSet0 = new LinkedHashSet<AuthenticationListener>();
      modularRealmAuthenticator0.setAuthenticationListeners(linkedHashSet0);
      modularRealmAuthenticator0.getModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      defaultWebSecurityManager0.setSessionMode("http");
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy1 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      ModularAuthenticationStrategy modularAuthenticationStrategy0 = modularRealmAuthenticator0.getModularAuthenticationStrategy();
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy1 = new AllSuccessfulModularAuthenticationStrategy();
      defaultWebSecurityManager0.setModularAuthenticationStrategy(modularAuthenticationStrategy0);
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy2 = new AllSuccessfulModularAuthenticationStrategy();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy2 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy1 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy1 = new AllSuccessfulModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy2 = new AllSuccessfulModularAuthenticationStrategy();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy2 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeCookiePath("~5");
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(servletResponse0).getLocale();
      doReturn((ServletOutputStream) null).when(servletResponse0).getOutputStream();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      servletResponseWrapper0.reset();
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper6);
      servletResponseWrapper6.getOutputStream();
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper3.setLocale((Locale) null);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper9);
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper11);
      ServletResponseWrapper servletResponseWrapper13 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper14 = new ServletResponseWrapper(servletResponseWrapper13);
      ServletResponseWrapper servletResponseWrapper15 = new ServletResponseWrapper(servletResponseWrapper9);
      servletResponseWrapper5.reset();
      servletResponseWrapper4.getLocale();
      servletResponseWrapper15.setLocale((Locale) null);
      servletResponseWrapper14.flushBuffer();
      ServletResponseWrapper servletResponseWrapper16 = new ServletResponseWrapper(servletResponseWrapper8);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) null, (ServletResponse) servletResponseWrapper15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.getSessionMode();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      LinkedHashSet<AuthenticationListener> linkedHashSet0 = new LinkedHashSet<AuthenticationListener>();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      Class<SimplePrincipalCollection> class0 = SimplePrincipalCollection.class;
      simplePrincipalCollection0.byType(class0);
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      simplePrincipalCollection1.getRealmNames();
      simplePrincipalCollection1.iterator();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection4 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection5 = new SimplePrincipalCollection();
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      simplePrincipalCollection4.byType(class1);
      Class<Integer> class2 = Integer.class;
      simplePrincipalCollection0.oneByType(class2);
      SimplePrincipalCollection simplePrincipalCollection6 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection7 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection8 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection9 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection10 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection11 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection12 = new SimplePrincipalCollection();
      assertTrue(simplePrincipalCollection12.equals((Object)simplePrincipalCollection2));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy1 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      ModularRealmAuthenticator modularRealmAuthenticator0 = new ModularRealmAuthenticator();
      modularRealmAuthenticator0.getModularAuthenticationStrategy();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy0 = new AllSuccessfulModularAuthenticationStrategy();
      AllSuccessfulModularAuthenticationStrategy allSuccessfulModularAuthenticationStrategy1 = new AllSuccessfulModularAuthenticationStrategy();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy2 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4659497192528064
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.newSessionManagerInstance();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)27;
      byteArray0[8] = (byte) (-52);
      try { 
        MockInetAddress.getByAddress(":", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [7, 67, 67, 67, 3, -10, -79, 27, -52]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Illegal configuration. No default cache is configured.");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, (String) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.setPermissions(evoSuiteFile2, false, false, false);
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager((Realm) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realm argument cannot be null
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookiePath("key cannot be null");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)7;
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieName(" is not Serializable and is not being overflowed to disk.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "]0#(r(TumP,U]{#q!m");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, (String) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.setPermissions(evoSuiteFile2, false, false, false);
      FileSystemHandling.createFolder(evoSuiteFile1);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieMaxAge(47);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("~ioyt1yE#$rvC}4");
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      linkedList0.add((Realm) simpleAccountRealm0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("~ioyt1yE#$rvC}4");
      linkedList0.add((Realm) simpleAccountRealm1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.add((Realm) simpleAccountRealm1);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(linkedList0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      AtLeastOneSuccessfulModularAuthenticationStrategy atLeastOneSuccessfulModularAuthenticationStrategy0 = new AtLeastOneSuccessfulModularAuthenticationStrategy();
      defaultWebSecurityManager0.setModularAuthenticationStrategy(atLeastOneSuccessfulModularAuthenticationStrategy0);
      FirstSuccessfulAuthenticationStrategy firstSuccessfulAuthenticationStrategy0 = new FirstSuccessfulAuthenticationStrategy();
      defaultWebSecurityManager0.setModularAuthenticationStrategy((ModularAuthenticationStrategy) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("^lBqlC5pt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [^lBqlC5pt].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(servletResponse0).getLocale();
      doReturn((ServletOutputStream) null).when(servletResponse0).getOutputStream();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      servletResponseWrapper0.reset();
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      servletResponseWrapper1.setLocale(locale0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper6);
      servletResponseWrapper6.getOutputStream();
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper3.setLocale((Locale) null);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper9);
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper11);
      ServletResponseWrapper servletResponseWrapper13 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper14 = new ServletResponseWrapper(servletResponseWrapper13);
      servletResponseWrapper6.getResponse();
      ServletResponseWrapper servletResponseWrapper15 = new ServletResponseWrapper(servletResponseWrapper9);
      servletResponseWrapper5.reset();
      servletResponseWrapper4.getLocale();
      servletResponseWrapper15.setLocale((Locale) null);
      servletResponseWrapper14.flushBuffer();
      ServletResponseWrapper servletResponseWrapper16 = new ServletResponseWrapper(servletResponseWrapper8);
      servletResponseWrapper8.reset();
      ServletResponseWrapper servletResponseWrapper17 = new ServletResponseWrapper(servletResponseWrapper9);
      servletResponseWrapper2.resetBuffer();
      servletResponseWrapper16.flushBuffer();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletResponseWrapper2.getResponse();
      ServletResponseWrapper servletResponseWrapper18 = new ServletResponseWrapper(servletResponseWrapper4);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponseWrapper servletResponseWrapper19 = new ServletResponseWrapper(servletResponseWrapper18);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper19);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.servlet.ServletRequestWrapper cannot be cast to javax.servlet.http.HttpServletRequest
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      linkedList0.add((Realm) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(linkedList0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookiePath("le\"@\"%_e9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Boolean boolean0 = new Boolean("irYs");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("irYs");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      Integer integer0 = new Integer((-1910423762));
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      Integer integer0 = new Integer(3);
      defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      LinkedHashSet<AuthenticationListener> linkedHashSet0 = new LinkedHashSet<AuthenticationListener>();
      LinkedList<AuthenticationListener> linkedList0 = new LinkedList<AuthenticationListener>();
      LinkedHashSet<AuthenticationListener> linkedHashSet1 = new LinkedHashSet<AuthenticationListener>();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      linkedHashSet1.add(authenticationListener0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection((Collection) linkedHashSet1, "http");
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      LinkedList<SessionListener> linkedList1 = new LinkedList<SessionListener>();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection();
      assertFalse(simplePrincipalCollection3.equals((Object)simplePrincipalCollection0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      AllPermission allPermission0 = new AllPermission();
      simpleAccountRealm1.setPermissionResolver(wildcardPermissionResolver0);
      SessionListener sessionListener0 = mock(SessionListener.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis(0L);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm1);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Illegal configuration. No default cache is configured.");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, (String) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.setPermissions(evoSuiteFile2, false, false, false);
      FileSystemHandling.createFolder(evoSuiteFile2);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realms collection argument cannot be empty.
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }
}
