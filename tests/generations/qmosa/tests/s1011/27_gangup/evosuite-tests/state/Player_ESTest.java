/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 12:08:25 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.util.Enumeration;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8240859905178586
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player();
      player0.setConnected(false);
      player0.setZ(1);
      Player player1 = new Player();
      player0.setJoinOK(player1, false);
      Player player2 = new Player();
      player0.isJoinOK(player1, false);
      player2.setDead((long) (short)4919);
      player1.head = (Party) player0;
      player1.getZ();
      System.setCurrentTimeMillis(1392409281430L);
      System.setCurrentTimeMillis(1392409296331L);
      player0.pack();
      player0.isJoinOK(player1, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      try { 
        pipedInputStream0.skip(1392409296331L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8232201896520577
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(1, "3o*ljiVMW{9L5XCp}", "3o*ljiVMW{9L5XCp}", 1);
      player0.setZ(1);
      Player player1 = new Player();
      player0.setJoinOK(player1, false);
      Player player2 = new Player();
      player0.isJoinOK(player1, false);
      player1.head = (Party) player0;
      player1.getZ();
      player1.setY(415.0F);
      System.setCurrentTimeMillis(1392409296320L);
      player0.pack();
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis(4919L);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2046484301738687
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(1, "3o%ljiVMW{9L5Xsp}", "3o%ljiVMW{9L5Xsp}", 1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player0.reset(false);
      player0.setConnected(false);
      byte[] byteArray0 = player0.pack();
      player0.setZ(1);
      Player player1 = new Player();
      player0.setJoinOK(player1, false);
      Player player2 = new Player();
      player0.isJoinOK(player1, false);
      player2.setDead((long) (short)4919);
      player2.reset(false);
      player1.setY((short)4919);
      player2.reset(true);
      player2.add(player0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player1.getZ();
      System.setCurrentTimeMillis((short)4919);
      player1.pack();
      player1.isJoinOK(player0, false);
      player1.getY();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(2515L);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1061966147634
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((-347), "1A~2ws", "1A~2ws", (-6981));
      player0.pack();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Player player1 = new Player((-26279), "1A~2ws", (-253));
      player0.add(player1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      player0.getStrength();
      player0.pack();
      player0.gangStrength();
      Player player2 = new Player((-6981), "1A~2ws", "1A~2ws", (short)4919);
      player0.isJoinOK(player2, true);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream1);
      player2.remove(player0);
      player0.setJoinOK(player2, false);
      player2.setX((-6981));
      Player player3 = new Player((-1584), "", "1A~2ws", 10, 2);
      player3.isJoinOK(player2, true);
      player3.getZ();
      System.setCurrentTimeMillis((short)4919);
      player2.getX();
      assertEquals((-6981.0F), player2.getX(), 0.01F);
      
      float float0 = player0.getX();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.125543816101745
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "t!r";
      Player player0 = new Player((-1345), "", "t!r", (-1345));
      player0.setDead();
      Player player1 = new Player();
      player0.prev = (Party) player1;
      player0.setDead();
      byte[] byteArray0 = player0.pack();
      player0.getX();
      player0.setMoney(1751.4F);
      player0.getY();
      player0.setZ(1751.4F);
      player0.getMoney();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Player.unpack(): *** WARNING *** data is not of proper type!");
      int int0 = (-420);
      try { 
        mockFileOutputStream0.write(byteArray0, (-26279), (-420));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1958550791509905
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(5, "E", "E", 1, 0);
      player0.pack();
      Player player1 = new Player();
      player0.setConnected(true);
      player0.getStrength();
      player1.pack();
      player1.setZ(0.2F);
      Player player2 = new Player();
      player2.setJoinOK(player1, true);
      player1.setX(171.0F);
      player2.isJoinOK(player0, true);
      player2.getZ();
      System.setCurrentTimeMillis(227L);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Player player0 = new Player(2, "0<+E$(o'(%k5sM\"z", "0<+E$(o'(%k5sM\"z", 1695, 2);
      player0.setZ((-1788.8002F));
      Player player1 = new Player();
      player0.setX((short)4919);
      player0.isJoinOK(player1, false);
      player0.getZ();
      assertEquals(4919.0F, player0.getX(), 0.01F);
      
      System.setCurrentTimeMillis(1L);
      float float0 = player1.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      player0.setY((-801.73F));
      Party party0 = new Party();
      player0.boss = party0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-63);
      player0.unpack(byteArray0);
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Player player0 = new Player((-28416));
      Player player1 = new Player();
      player0.add(player1);
      int int0 = player0.gangStrength();
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(2, int0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("Player-28416", player0.toString());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player();
      player0.setZ(10);
      Player player1 = new Player();
      player0.getZ();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".*[.]class$");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player1 = new Player();
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player1, true);
      String string0 = "";
      String string1 = "";
      URI uRI0 = MockURI.URI("");
      // Undeclared exception!
      try { 
        MockURI.resolve(uRI0, "hyBa6D4 -!S1#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 7: hyBa6D4 -!S1#
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".*[.]class$");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      player0.setJoinOK(player0, true);
      player0.isJoinOK(player0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      String string0 = "";
      URI uRI0 = MockURI.URI("");
      String string1 = "hyBa6D4 -!S1#";
      // Undeclared exception!
      try { 
        MockURI.resolve(uRI0, "hyBa6D4 -!S1#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 7: hyBa6D4 -!S1#
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Player player0 = new Player(238, "", (String) null, 1392, (byte) (-70));
      int int0 = player0.gangStrength();
      assertEquals((-70), int0);
      assertEquals(1392, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = player0.isConnected();
      Player player1 = new Player();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (short)4919);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream0.markSupported();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Player player2 = new Player((-1), "", "", (-2610));
      player2.isJoinOK(player1, true);
      long long0 = player1.getTimeOfDeath();
      assertEquals(0L, long0);
      
      Player player3 = new Player(14080);
      String string0 = player1.getName();
      assertEquals("Player-1", string0);
      
      player2.getIP();
      assertEquals((-2610), player2.getPictureId());
      
      int int0 = player0.type();
      assertEquals(5, int0);
      
      boolean boolean1 = player1.isJoinOK(player3, false);
      assertEquals("0.0.0.0", player3.getIP());
      assertEquals(1, player3.getStrength());
      assertEquals(10.0F, player3.getX(), 0.01F);
      assertEquals(0.0F, player3.getY(), 0.01F);
      assertFalse(player3.isDead());
      assertFalse(boolean1 == boolean0);
      assertEquals(0, player3.getPictureId());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 3;
      Player player0 = new Player(3, (String) null, (String) null, 3);
      player0.getName();
      player0.getName();
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1618;
      Player player0 = new Player(0, (String) null, (String) null, 946);
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1508, (-2247));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byteArrayInputStream0.markSupported();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      bufferedInputStream0.markSupported();
      Player player0 = new Player(1212, "X4`1E~ V{S'UA]%wy", "X4`1E~ V{S'UA]%wy", (byte) (-1), 3);
      player0.setDead();
      long long0 = player0.getTimeOfDeath();
      assertEquals(1392409281320L, long0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((-2477), "dn{f", (-257));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5);
      Player player1 = new Player(256);
      player0.setJoinOK(player1, true);
      player0.setDead((-2570L), true);
      player0.getTimeOfDeath();
      player0.setMoney((-257));
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      player1.pack(dataOutputStream0);
      assertEquals(30, byteArrayOutputStream0.size());
      assertEquals("\u00137\u0000\u0000\u0001\u0000\u0000A \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\tPlayer256", byteArrayOutputStream0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null);
      System.setCurrentTimeMillis((-1422L));
      Player player0 = new Player(1563, "", "uc?P+P+BY:+S", 1563, 1563);
      int int0 = player0.gangStrength();
      assertEquals(1563, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(1563, int0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("", player0.getIP());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1952296882816973
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(3, (String) null, "c`.|?mI8hWCO; ", 3);
      player0.setMoney(3);
      player0.getName();
      player0.pack();
      player0.id = 3;
      player0.getY();
      player0.getZ();
      player0.getName();
      player0.setDead(1L, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0b=f");
      player0.isJoinOK(player0, false);
      player0.getTimeOfDeath();
      Player player1 = new Player(3);
      LinkedList<Party> linkedList0 = new LinkedList<Party>();
      player1.getName();
      player0.getIP();
      player0.setDead(1L);
      float float0 = player0.getX();
      assertEquals(3.0F, player0.getMoney(), 0.01F);
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1813);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      Player player0 = new Player();
      player0.pack(dataOutputStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      player0.type();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.4169835932338453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(1, "3o%ljiVMW{9L5Xsp}", "3o%ljiVMW{9L5Xsp}", 1);
      player0.setConnected(false);
      player0.getStrength();
      byte[] byteArray0 = player0.pack();
      player0.setZ(1);
      Player player1 = new Player();
      player1.unpack(byteArray0);
      player1.setZ((-1656.668F));
      Player player2 = new Player((short)4919, "3o%ljiVMW{9L5Xsp}", "3o%ljiVMW{9L5Xsp}", 1, (short)4919);
      player0.setJoinOK(player2, false);
      player2.prev = (Party) player0;
      player2.setX(0.1F);
      player1.getSubparty();
      player0.isConnected();
      player1.getZ();
      player2.getY();
      int int0 = player1.gangStrength();
      assertEquals(1, player1.getId());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8884888954634342
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Party party0 = new Party();
      Player player0 = new Player(1595);
      player0.setZ(1595);
      player0.setJoinOK(player0, true);
      player0.pack();
      Player player1 = new Player();
      int int0 = Packable.UNDEFINED;
      player0.isJoinOK(player0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      Player player2 = new Player((short)4919, "H3V", "bw~v=S2*6@_<(ej@?A_", (short)4919);
      player2.setY((-929.5F));
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) dataOutputStream0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) player0;
      mockPrintStream0.print('O');
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) party0;
      Object object3 = new Object();
      objectArray0[7] = object3;
      Object object4 = new Object();
      Object object5 = new Object();
      player2.getY();
      player0.pack();
      assertEquals(1595.0F, player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis((-3817L));
      Player player0 = new Player((-1), "#|0N.2ldi<st", "S=)0}*!.]d(ue4ntm/(", (-1), (-1));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(boolean0);
      assertEquals((-1), player0.getPictureId());
      assertEquals((-1), player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals("#|0N.2ldi<st", player0.getIP());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-*45W){l/Pix|E?");
      Party party0 = new Party();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2258), 4);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      byteArrayInputStream0.markSupported();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(dataInputStream0);
      bufferedInputStream1.markSupported();
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      Player player0 = new Player(1535, "-*45W){l/Pix|E?", "h|n[kw", (-1), 869);
      Player player1 = new Player(1, "qS", "h|n[kw", 14052, (-2258));
      long long0 = player1.getTimeOfDeath();
      assertTrue(player1.isConnected());
      assertEquals(14052, player1.getPictureId());
      assertEquals((-2258), player1.getStrength());
      assertEquals("qS", player1.getIP());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(player1.isDead());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1;
      String string0 = "1A~2ws";
      Player player0 = new Player((-347), "1A~2ws", "1A~2ws", (-6981));
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3o%ljiVMW{9L5Xsp}");
      Player player0 = new Player(0, "3o%ljiVMW{9L5Xsp}", 0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-41), (short)4919);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.380937795632014
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player(1, "3o%ljiVMW{9L5Xsp}", "3o%ljiVMW{9L5Xsp}", 1);
      player0.setConnected(true);
      byte[] byteArray0 = player0.pack();
      player0.setZ(0.0F);
      Player player1 = new Player();
      player0.setJoinOK(player1, false);
      Player player2 = new Player();
      player2.setDead();
      player2.isDead();
      Player player3 = new Player((-400));
      player3.setDead((long) 1);
      player3.reset(false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player1.setX((-400));
      player3.getZ();
      System.setCurrentTimeMillis((-266L));
      player1.pack();
      player3.isJoinOK(player1, false);
      assertEquals((-400.0F), player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(1);
      String string0 = player0.getName();
      assertEquals("Player1", string0);
      
      int int0 = player0.gangStrength();
      assertEquals(1, int0);
      
      float float0 = player0.getX();
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals(10.0F, float0, 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/US63Z}qM0D$sKar3:T1>~.;#Hua");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "q)}U_ HFuGB5");
      Player player0 = new Player((-248), "US63Z}qM", (-909));
      player0.setX((-248));
      player0.pack();
      player0.getPictureId();
      player0.getStrength();
      player0.getName();
      File file0 = MockFile.createTempFile("US63Z}qM", "D$sKar3:T1>~.;#Hua");
      try { 
        MockFile.createTempFile("US63Z}qM", "state.Party", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1106);
      Player player0 = new Player(1106, "I{|2Pi3x{mM>$zZt", 0);
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
      
      Player player1 = new Player();
      player0.head = (Party) player1;
      int int0 = player0.getPictureId();
      assertEquals(0, int0);
      
      Player player2 = new Player(1535, ".|^/0yn!AJ8", 0);
      boolean boolean0 = player0.isJoinOK(player2, false);
      assertFalse(boolean0);
      
      float float1 = player1.getX();
      assertEquals(10.0F, float1, 0.01F);
      assertEquals(0, player1.getPictureId());
      assertEquals("Player-1", player1.getName());
      
      int int1 = player2.type();
      assertFalse(player2.isDead());
      assertEquals(1, player2.getStrength());
      assertEquals(0L, player2.getTimeOfDeath());
      assertTrue(player2.isConnected());
      assertEquals(5, int1);
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals("0.0.0.0", player2.getIP());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player(10, "", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 3, 3);
      int int0 = player0.getPictureId();
      int int1 = player0.getStrength();
      assertTrue(int1 == int0);
      
      float float0 = player0.getY();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("", player0.getIP());
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1106);
      Player player0 = new Player(0);
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
      
      Player player1 = new Player();
      player0.head = (Party) player1;
      int int0 = player0.getPictureId();
      assertEquals(0, int0);
      
      Player player2 = new Player(1535, ".|^/0yn!AJ8", 0);
      boolean boolean0 = player0.isJoinOK(player2, false);
      assertFalse(boolean0);
      assertEquals(0, player2.getPictureId());
      
      float float1 = player1.getX();
      assertEquals("0.0.0.0", player1.getIP());
      assertTrue(player1.isConnected());
      assertEquals(10.0F, float1, 0.01F);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(1, player1.getStrength());
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertEquals("Player-1", player1.getName());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player((-13580), "vV\"'zz(Ra<3Vg", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 0);
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player();
      int int0 = player0.gangStrength();
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.getName());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Party party0 = new Party();
      Player player0 = new Player();
      int int0 = Packable.UNDEFINED;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(byteArrayOutputStream0);
      player0.pack(dataOutputStream0);
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player(361, ".*[.]class$", ".*[.]class$", 361, 361);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7971377304062592
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Party party0 = new Party();
      int int0 = 1595;
      Player player0 = new Player(1595);
      player0.setZ(1595);
      player0.setJoinOK(player0, true);
      player0.pack();
      Player player1 = new Player();
      int int1 = Packable.UNDEFINED;
      player1.setY(1.0F);
      player0.isJoinOK(player0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      Player player2 = new Player((short)4919, "H3V", "bw~v=S2*6@_<(ej@?A_", (short)4919);
      Player player3 = new Player();
      // Undeclared exception!
      try { 
        player1.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player(482, "Player", "Player", 4919, 768);
      player0.getIP();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-47);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(dataInputStream0, 15104);
      sequenceInputStream0.read();
      DataInputStream dataInputStream1 = new DataInputStream(pushbackInputStream1);
      Player player0 = new Player();
      boolean boolean0 = player0.unpack(dataInputStream1);
      assertFalse(boolean0);
      
      int int0 = player0.type();
      assertEquals(5, int0);
      
      float float0 = player0.getX();
      assertEquals(10.0F, float0, 0.01F);
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.toString());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 946);
      Player player0 = new Player();
      Player player1 = new Player((short)4919);
      int int0 = player0.getStrength();
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.getName());
      assertFalse(player0.isDead());
      assertEquals(1, int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6467142775717116
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player(749, "state.Player$JoinInfo", "state.Player$JoinInfo", 0, 749);
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0);
      player0.gangStrength();
      player0.type();
      player0.getX();
      Player player1 = new Player(749, "state.Player$JoinInfo", "state.Player$JoinInfo", 5, 4136);
      player1.setZ(0.0F);
      player0.next = (Party) player1;
      Player player2 = new Player((short)4919);
      assertFalse(player2.isDead());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player((-2440), "", "w`vs}/m$AZCz`SZ:p", 1146, (-2440));
      int int0 = player0.getStrength();
      assertEquals(1146, player0.getPictureId());
      assertEquals("", player0.getIP());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals((-2440), int0);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player(5, "GUb", " ", 5, 5);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      player0.isDead();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-81);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player(4919);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-86);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 4919);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream1);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null, 1563);
      DataInputStream dataInputStream1 = new DataInputStream((InputStream) null);
      Player player0 = new Player(1563, (String) null, "Player.unpack(): *** WARNING *** data is not of proper type!", 1563, 1563);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2648964145474735
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player((-21), "*eV( ,)QR", "*eV( ,)QR", (-21), (-21));
      player0.setDead();
      player0.getSubparty();
      Player player1 = new Player((short)4919, "", "", (short)4919);
      player0.setJoinOK(player1, false);
      Player player2 = new Player();
      player2.setJoinOK(player0, false);
      player1.setMoney(0.1F);
      player2.setJoinOK(player0, false);
      player0.add(player2);
      player0.toString();
      player0.toString();
      player0.setY((-21));
      player2.getSubparty();
      player0.prev = (Party) player1;
      byte[] byteArray0 = new byte[0];
      player1.unpack(byteArray0);
      player2.setJoinOK(player1, false);
      player0.setDead(0L, false);
      player2.setJoinOK(player0, true);
      player0.getMoney();
      player0.setY(0.1F);
      assertEquals(0.1F, player0.getY(), 0.01F);
      
      boolean boolean0 = player1.isJoinOK(player2, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 5;
      int int1 = 4919;
      Player player0 = new Player(5, "", "%Fe{386DOH/-]", (-793), 4919);
      player0.pack();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1239058144637433
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player((-1109), "", "", (-1109));
      player0.setY((-1109));
      player0.setZ(2423.868F);
      player0.setZ((-41.3855F));
      player0.setConnected(true);
      player0.getY();
      player0.reset(true);
      player0.getTimeOfDeath();
      player0.toString();
      player0.getStrength();
      player0.setConnected(false);
      player0.setDead(3094L);
      player0.setX(0.2F);
      assertEquals(0.2F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Player player0 = new Player(2147, "th):8'|',bDe", 1602);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-3);
      player0.unpack(byteArray0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(1602, player0.getPictureId());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player(2, "module.ModuleBrowserDialog$ModuleFilter", "module.ModuleBrowserDialog$ModuleFilter", 1, 10);
      float float0 = player0.getMoney();
      assertEquals(10, player0.getStrength());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player(12, "gui.ModuleBrowserDialog$ModuleFilter", 41);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 10);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      boolean boolean0 = player0.isConnected();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(41, player0.getPictureId());
      assertTrue(boolean0);
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Player player0 = new Player(5, "m:(3T@=", "", 5, 5);
      player0.setDead((long) 5);
      player0.id = 5;
      System.setCurrentTimeMillis(5);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead((long) (-1), false);
      Player player1 = new Player((short)4919, "", (-1));
      player1.setDead((long) (-1), true);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.close();
      Player player0 = new Player(2478, "", "", (-932));
      player0.getName();
      assertEquals((-932), player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Player player0 = new Player(5, "GUb", " ", 5, 5);
      player0.setDead();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      InputStream inputStream0 = null;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Player player0 = new Player(1, "$k0m*", "$k0m*", 1);
      player0.setConnected(false);
      Player player1 = new Player(1, "$k0m*", "", 1, 1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Player player0 = new Player(1268, "4a2^#^l9K", 39);
      player0.reset(true);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1392409281320L);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Player player0 = new Player(0, "module.ModuleBrowserDialog$ModuleFilter", 0);
      int int0 = player0.gangStrength();
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, player0.getPictureId());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Party party0 = new Party();
      Player player0 = new Player((-11609), " &j{1s5pO", (-1720));
      player0.next = party0;
      player0.getMoney();
      player0.getMoney();
      player0.setMoney((-1748.13F));
      player0.getMoney();
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Player player0 = new Player(255, "1rk>8!kjOU1D8$ZX", "1rk>8!kjOU1D8$ZX", 10, 10);
      player0.pack();
      String string0 = "dQn;&G u,P9l";
      MockFile mockFile0 = new MockFile("dQn;&G u,P9l", "1rk>8!kjOU1D8$ZX");
      URI uRI0 = MockURI.aFTPURI;
      String string1 = "";
      MockFile mockFile1 = new MockFile("1rk>8!kjOU1D8$ZX", "");
      File file0 = mockFile0.getAbsoluteFile();
      String string2 = "f;r";
      MockFile mockFile2 = new MockFile(file0, "f;r");
      MockFile mockFile3 = new MockFile("q");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("q", "|", (File) mockFile3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
}
