/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 12:05:54 GMT 2019
 */

package net.sf.xbus.protocol.records;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.time.Instant;
import javax.xml.stream.util.EventReaderDelegate;
import net.sf.xbus.base.bytearraylist.ByteArrayList;
import net.sf.xbus.base.xbussystem.XBUSSystem;
import net.sf.xbus.protocol.records.RecordTypeMessage;
import org.apache.axis.Message;
import org.apache.axis.MessageContext;
import org.apache.axis.attachments.AttachmentPart;
import org.apache.axis.configuration.DirProvider;
import org.apache.axis.deployment.wsdd.WSDDJAXRPCHandlerInfoChain;
import org.apache.axis.message.Detail;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.xerces.dom.AttrNSImpl;
import org.apache.xerces.dom.CommentImpl;
import org.apache.xerces.dom.DeferredDocumentImpl;
import org.apache.xerces.dom.DocumentFragmentImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Node;
import org.w3c.dom.traversal.NodeFilter;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.AttributesImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RecordTypeMessage_ESTest extends RecordTypeMessage_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      ByteArrayList byteArrayList0 = new ByteArrayList();
      EventReaderDelegate eventReaderDelegate0 = new EventReaderDelegate();
      EventReaderDelegate eventReaderDelegate1 = new EventReaderDelegate();
      EventReaderDelegate eventReaderDelegate2 = new EventReaderDelegate();
      EventReaderDelegate eventReaderDelegate3 = new EventReaderDelegate();
      EventReaderDelegate eventReaderDelegate4 = new EventReaderDelegate();
      EventReaderDelegate eventReaderDelegate5 = new EventReaderDelegate();
      EventReaderDelegate eventReaderDelegate6 = new EventReaderDelegate();
      EventReaderDelegate eventReaderDelegate7 = new EventReaderDelegate();
      ByteArrayList byteArrayList1 = new ByteArrayList();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)108;
      byteArrayList1.add(byteArray0);
      // Undeclared exception!
      try { 
        recordTypeMessage0.setRequestObject(byteArrayList1, (XBUSSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.xbus.protocol.xml.XMLMessageAbstract", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate(763, 1, 1);
      Integer integer0 = new Integer(763);
      MockDate mockDate1 = new MockDate(763, 6, (-866));
      mockDate0.after(mockDate1);
      MockDate mockDate2 = new MockDate();
      mockDate2.toInstant();
      Instant instant0 = mockDate2.toInstant();
      MockDate mockDate3 = new MockDate(763, (-866), 763);
      mockDate3.setTime(1);
      MockDate.UTC(763, (-866), 763, (-1), 763, 244);
      mockDate3.getTime();
      mockDate0.toInstant();
      mockDate2.toInstant();
      mockDate1.toInstant();
      Boolean boolean0 = new Boolean(true);
      MockDate mockDate4 = new MockDate();
      MockDate.UTC(408, 6, (-2320), 6, 763, 1);
      MockInstant.minusNanos(instant0, 1);
      MockDate mockDate5 = new MockDate(6);
      MockDate mockDate6 = new MockDate(244);
      mockDate0.toInstant();
      mockDate3.toInstant();
      mockDate3.before(mockDate0);
      MockDate mockDate7 = new MockDate(0L);
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage("003", (XBUSSystem) null, "I");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)17;
      ByteArrayList byteArrayList0 = ByteArrayList.createByteArrayList(byteArray0, (byte)0);
      // Undeclared exception!
      try { 
        recordTypeMessage0.setResponseObject(byteArrayList0, (XBUSSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.xbus.protocol.xml.XMLMessageAbstract", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(763, 1, 1);
      Integer integer0 = new Integer(763);
      MockDate mockDate1 = new MockDate(763, 6, (-866));
      mockDate0.after(mockDate1);
      MockDate mockDate2 = new MockDate();
      mockDate2.toInstant();
      Instant instant0 = mockDate2.toInstant();
      MockDate mockDate3 = new MockDate(763, (-866), 763);
      mockDate3.setTime(1);
      MockDate.UTC(763, (-866), 763, (-1), 763, 275);
      mockDate3.getTime();
      mockDate0.toInstant();
      mockDate2.toInstant();
      mockDate1.toInstant();
      Boolean boolean0 = new Boolean(true);
      MockDate mockDate4 = new MockDate();
      MockDate.UTC(408, 6, (-2320), 6, 763, 1);
      MockInstant.minusNanos(instant0, 1);
      MockDate mockDate5 = new MockDate(6);
      MockDate mockDate6 = new MockDate(275);
      mockDate0.toInstant();
      mockDate3.toInstant();
      mockDate3.before(mockDate0);
      MockDate mockDate7 = new MockDate(0L);
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage("003", (XBUSSystem) null, "I");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)17;
      ByteArrayList byteArrayList0 = ByteArrayList.createByteArrayList(byteArray0, (byte)0);
      // Undeclared exception!
      try { 
        recordTypeMessage0.setResponseObject(byteArrayList0, (XBUSSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.xbus.protocol.xml.XMLMessageAbstract", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      char[] charArray0 = new char[4];
      charArray0[0] = '\uFFE9';
      charArray0[3] = '\uFFE9';
      char[] charArray1 = new char[16];
      charArray1[1] = '\u0000';
      MessageContext.getCurrentContext();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("isMsg", "acceptMissingParams", "axis.transport.version", '\u0000');
      stackTraceElementArray0[5] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("securityProvider", "axis.transport.version", "acceptMissingParams", '\u0000');
      stackTraceElementArray0[3] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("authenticatedUser", "axis.transport.version", "engine.handler", '\u0000');
      stackTraceElementArray0[2] = stackTraceElement0;
      StackTraceElement stackTraceElement3 = new StackTraceElement("authenticatedUser", "U=aMi80@BSD9T", "U=aMi80@BSD9T", '\u0000');
      ByteArrayList byteArrayList0 = new ByteArrayList();
      try { 
        recordTypeMessage0.setResponseObject(stackTraceElement3, (XBUSSystem) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // I_02_003_0 java.lang.StackTraceElement cannot be cast to net.sf.xbus.base.bytearraylist.ByteArrayList
         //
         verifyException("net.sf.xbus.protocol.records.RecordTypeMessage", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      char[] charArray0 = new char[4];
      charArray0[0] = '\uFFE9';
      charArray0[3] = '\uFFE9';
      char[] charArray1 = new char[16];
      charArray1[1] = '\u0000';
      MessageContext.getCurrentContext();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("isMsg", "acceptMissingParams", "axis.transport.version", '\u0000');
      stackTraceElementArray0[5] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("authenticatedUser", "axis.transport.version", "engine.handler", '\u0000');
      stackTraceElementArray0[2] = stackTraceElement0;
      StackTraceElement stackTraceElement2 = new StackTraceElement("authenticatedUser", "U=aMi80@BSD9T", "U=aMi80@BSD9T", '\u0000');
      ByteArrayList byteArrayList0 = new ByteArrayList();
      recordTypeMessage0.setResponseText((String) null, (XBUSSystem) null);
      assertEquals("RecordTypeMessage", recordTypeMessage0.getShortname());
      assertEquals("RC_OK", recordTypeMessage0.getReturncode());
      assertEquals(0, recordTypeMessage0.getErrorcode());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 1, 1, 763);
      MockDate mockDate1 = new MockDate((-862), (-24), 1, (-24), (-862), (-24));
      mockDate0.after(mockDate1);
      MockDate mockDate2 = new MockDate((-862), (-24), 1, (-862), 763, (-24));
      MockDate mockDate3 = (MockDate)mockDate1.clone();
      MockDate mockDate4 = (MockDate)mockDate1.clone();
      mockDate4.toInstant();
      mockDate2.toInstant();
      MockDate mockDate5 = new MockDate((-862), (-24), 1, (-24), (-24));
      mockDate2.before(mockDate3);
      mockDate1.after(mockDate0);
      mockDate0.after(mockDate5);
      mockDate1.after(mockDate5);
      MockDate.UTC(1, 1, 244, 6, 6, 1);
      mockDate1.getTime();
      mockDate4.getTime();
      MockDate mockDate6 = new MockDate((-24), (-17), 244, 763, (-17));
      MockDate.UTC((-24), (-24), (-17), (-24), 763, (-17));
      mockDate2.after(mockDate5);
      MockDate mockDate7 = new MockDate((-17), 1, 1, (-862), 1);
      MockDate mockDate8 = new MockDate((-862), 763, 763);
      mockDate2.clone();
      mockDate5.before(mockDate0);
      MockDate mockDate9 = new MockDate((-3031039037000L));
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage("dynamicVars:   ", (XBUSSystem) null, (String) null);
      recordTypeMessage0.setResponseObject((Object) null, (XBUSSystem) null);
      assertEquals(0, recordTypeMessage0.getErrorcode());
      assertEquals("RecordTypeMessage", recordTypeMessage0.getShortname());
      assertEquals("RC_OK", recordTypeMessage0.getReturncode());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[3] = '\u0000';
      char[] charArray1 = new char[16];
      MessageContext.getCurrentContext();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("isMsg", "acceptMissingParams", "axis.transport.version", '\u0000');
      stackTraceElementArray0[5] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("authenticatedUser", "axis.transport.version", "engine.handler", '\u0000');
      stackTraceElementArray0[2] = stackTraceElement0;
      StackTraceElement stackTraceElement2 = new StackTraceElement("authenticatedUser", "U=aMi80@BSD9T", "U=aMi80@BSD9T", '\u0000');
      ByteArrayList byteArrayList0 = new ByteArrayList();
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage("isMsg", (XBUSSystem) null, "org.apache.axis.transport.jms.JMSTransport");
      recordTypeMessage0.setResponseObject((Object) null, (XBUSSystem) null);
      assertEquals("RC_OK", recordTypeMessage0.getReturncode());
      assertEquals(0, recordTypeMessage0.getErrorcode());
      assertEquals("RecordTypeMessage", recordTypeMessage0.getShortname());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[3] = '\u0000';
      char[] charArray1 = new char[16];
      MessageContext.getCurrentContext();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("isMsg", "acceptMissingParams", "axis.transport.version", '\u0000');
      stackTraceElementArray0[5] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("authenticatedUser", "axis.transport.version", "engine.handler", '\u0000');
      stackTraceElementArray0[2] = stackTraceElement0;
      StackTraceElement stackTraceElement2 = new StackTraceElement("authenticatedUser", "U=aMi80@BSD9T", "U=aMi80@BSD9T", '\u0000');
      ByteArrayList byteArrayList0 = new ByteArrayList();
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage("axis.wsdlgen.serv.loc.url", (XBUSSystem) null, "securityProvider");
      recordTypeMessage0.getRequestTextAsXML((XBUSSystem) null);
      assertEquals("RecordTypeMessage", recordTypeMessage0.getShortname());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      Object object0 = new Object();
      Message message0 = new Message(object0);
      AttachmentPart attachmentPart0 = new AttachmentPart();
      message0.addAttachmentPart(attachmentPart0);
      DeferredDocumentImpl deferredDocumentImpl0 = new DeferredDocumentImpl();
      deferredDocumentImpl0.getDomConfig();
      deferredDocumentImpl0.createAttributeNS("application/xop+xml", "application/xop+xml", "request");
      // Undeclared exception!
      try { 
        recordTypeMessage0.setResponseDocument(deferredDocumentImpl0, (XBUSSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.dom.DeferredDocumentImpl", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WSDDJAXRPCHandlerInfoChain wSDDJAXRPCHandlerInfoChain0 = new WSDDJAXRPCHandlerInfoChain();
      wSDDJAXRPCHandlerInfoChain0.getParametersTable();
      wSDDJAXRPCHandlerInfoChain0.setName("");
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage("itemType", (XBUSSystem) null, "requestFlow");
      wSDDJAXRPCHandlerInfoChain0.getJavaClass();
      recordTypeMessage0.synchronizeRequestFields((XBUSSystem) null);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      Integer integer0 = new Integer((-2401));
      ByteArrayList byteArrayList0 = new ByteArrayList();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-67);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-100);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayList byteArrayList1 = new ByteArrayList();
      recordTypeMessage0.setResponseObject(byteArrayList1, (XBUSSystem) null);
      assertEquals("RC_OK", recordTypeMessage0.getReturncode());
      assertEquals(0, recordTypeMessage0.getErrorcode());
      assertEquals("RecordTypeMessage", recordTypeMessage0.getShortname());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteArrayList byteArrayList0 = new ByteArrayList();
      byte[] byteArray0 = new byte[0];
      byteArrayList0.toString();
      ByteArrayList byteArrayList1 = new ByteArrayList();
      byteArrayList1.addAll(byteArrayList0);
      byteArrayList1.addAll(byteArrayList0);
      byteArrayList1.add(byteArray0);
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      recordTypeMessage0.setRequestObject(byteArrayList0, (XBUSSystem) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)42);
      pipedInputStream0.close();
      pipedInputStream0.skip((-1783L));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 43);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream0);
      byte[] byteArray1 = new byte[0];
      pipedInputStream0.read(byteArray1);
      pushbackInputStream1.unread(byteArray0);
      int int0 = 21;
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pipedInputStream0, 21);
      int int1 = 21;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)42;
      byteArray2[1] = (byte)42;
      byteArray2[2] = (byte)42;
      byteArray2[3] = (byte)42;
      byteArray2[4] = (byte)42;
      // Undeclared exception!
      try { 
        pushbackInputStream2.read(byteArray2, 1785, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayList byteArrayList0 = new ByteArrayList();
      byte[] byteArray0 = new byte[0];
      ByteArrayList byteArrayList1 = ByteArrayList.createByteArrayList(byteArray0, 763);
      byteArrayList1.toString();
      ByteArrayList byteArrayList2 = new ByteArrayList();
      byteArrayList2.addAll(byteArrayList1);
      byteArrayList2.add(byteArray0);
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      recordTypeMessage0.setRequestObject((Object) null, (XBUSSystem) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(763);
      int int0 = (-181);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, (-181));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      AttributesImpl attributesImpl1 = new AttributesImpl();
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributesImpl0.getIndex("] 5Y?2s{,(");
      AttributesImpl attributesImpl3 = new AttributesImpl();
      attributesImpl3.getIndex("I", "I");
      attributesImpl3.getIndex("`x GG1}vSg:}%1D", "^o'Tu)6s1");
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage("] 5Y?2s{,(", (XBUSSystem) null, "");
      recordTypeMessage0.getResponseText();
      attributesImpl1.clear();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributesImpl0);
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributes2Impl0);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl();
      assertFalse(attributes2Impl3.equals((Object)attributes2Impl1));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteArrayList byteArrayList0 = new ByteArrayList();
      byteArrayList0.toString();
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      recordTypeMessage0.setShortname("");
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-20);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)58;
      byteArrayList0.add(byteArray0);
      try { 
        recordTypeMessage0.setRequestObject("", (XBUSSystem) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // I_02_003_0 java.lang.String cannot be cast to net.sf.xbus.base.bytearraylist.ByteArrayList
         //
         verifyException("net.sf.xbus.protocol.records.RecordTypeMessage", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteArrayList byteArrayList0 = new ByteArrayList();
      byte[] byteArray0 = new byte[0];
      byteArrayList0.toString();
      ByteArrayList byteArrayList1 = new ByteArrayList();
      byteArrayList1.addAll(byteArrayList0);
      byteArrayList1.add(byteArray0);
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      recordTypeMessage0.setRequestObject(byteArrayList0, (XBUSSystem) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)42);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 22);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      pipedInputStream0.read(byteArray0);
      pushbackInputStream0.unread(byteArray0);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pushbackInputStream0, (byte)42);
      PushbackInputStream pushbackInputStream3 = new PushbackInputStream(pipedInputStream0, 1236);
      PushbackInputStream pushbackInputStream4 = new PushbackInputStream(pushbackInputStream1);
      try { 
        pushbackInputStream4.unread(byteArray0, (int) (byte)42, 25);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Push back buffer is full
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      char[] charArray0 = new char[4];
      charArray0[0] = '\uFFE9';
      charArray0[3] = '\uFFE9';
      char[] charArray1 = new char[16];
      charArray1[1] = '\u0000';
      MessageContext.getCurrentContext();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("isMsg", "acceptMissingParams", "axis.transport.version", '\u0000');
      stackTraceElementArray0[5] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("securityProvider", "axis.transport.version", "acceptMissingParams", '\u0000');
      stackTraceElementArray0[3] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("authenticatedUser", "axis.transport.version", "engine.handler", '\u0000');
      stackTraceElementArray0[2] = stackTraceElement0;
      StackTraceElement stackTraceElement3 = new StackTraceElement("authenticatedUser", "U=aMi80@BSD9T", "U=aMi80@BSD9T", '\u0000');
      ByteArrayList byteArrayList0 = new ByteArrayList();
      recordTypeMessage0.getResponseText();
      assertEquals("RecordTypeMessage", recordTypeMessage0.getShortname());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage("n)w`C~v,R?>v)6%/3`SU", (XBUSSystem) null, "5~qSqXUBd");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DocumentFragmentImpl documentFragmentImpl0 = (DocumentFragmentImpl)hTMLDocumentImpl0.createDocumentFragment();
      documentFragmentImpl0.getUserData();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      hTMLDocumentImpl0.createTreeWalker((Node) documentFragmentImpl0, (-216), nodeFilter0, true);
      hTMLDocumentImpl0.getDoctype();
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl((DocumentType) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-120);
      byteArray0[6] = (byte) (-17);
      recordTypeMessage0.setResponseDocument(pSVIDocumentImpl0, (XBUSSystem) null);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      ByteArrayList byteArrayList0 = new ByteArrayList();
      EventReaderDelegate eventReaderDelegate0 = new EventReaderDelegate();
      EventReaderDelegate eventReaderDelegate1 = new EventReaderDelegate();
      EventReaderDelegate eventReaderDelegate2 = new EventReaderDelegate();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-100);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-100);
      byteArrayList0.add(byteArray0);
      EventReaderDelegate eventReaderDelegate3 = new EventReaderDelegate();
      EventReaderDelegate eventReaderDelegate4 = new EventReaderDelegate();
      EventReaderDelegate eventReaderDelegate5 = new EventReaderDelegate();
      EventReaderDelegate eventReaderDelegate6 = new EventReaderDelegate();
      EventReaderDelegate eventReaderDelegate7 = new EventReaderDelegate();
      recordTypeMessage0.setResponseText((String) null, (XBUSSystem) null);
      assertEquals("RC_OK", recordTypeMessage0.getReturncode());
      assertEquals("RecordTypeMessage", recordTypeMessage0.getShortname());
      assertEquals(0, recordTypeMessage0.getErrorcode());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      recordTypeMessage0.getResponseObject();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0003';
      charArray0[3] = '1';
      defaultHandler2_0.comment(charArray0, '\u0003', '\u0003');
      defaultHandler2_1.externalEntityDecl("mti[xq;Yu>DqV$)", "mti[xq;Yu>DqV$)", "mti[xq;Yu>DqV$)");
      defaultHandler2_0.endPrefixMapping("mti[xq;Yu>DqV$)");
      defaultHandler2_0.startDocument();
      defaultHandler2_0.attributeDecl("%Jc|NcLUbN{r=<DVH`.i", "~V>#?tL8xk", "mti[xq;Yu>DqV$)", (String) null, "~V>#?tL8xk");
      char[] charArray1 = new char[28];
      defaultHandler2_1.characters(charArray1, '\u0000', '\u0000');
      defaultHandler2_1.skippedEntity("%Jc|NcLUbN{r=<DVH`.i");
      defaultHandler2_0.startEntity("Dw:Z{");
      defaultHandler2_1.characters(charArray1, '\u0003', 9);
      defaultHandler2_1.startPrefixMapping("mti[xq;Yu>DqV$)", "mti[xq;Yu>DqV$)");
      defaultHandler2_1.comment(charArray1, '\u0000', '1');
      defaultHandler2_1.endElement("%Jc|NcLUbN{r=<DVH`.i", "%Jc|NcLUbN{r=<DVH`.i", "%Jc|NcLUbN{r=<DVH`.i");
      defaultHandler2_1.notationDecl("mti[xq;Yu>DqV$)", "`aU(AMLF>", "E^LSmZz~.:8K+0K&F");
      charArray1[3] = '\u0000';
      charArray1[1] = '\u0000';
      defaultHandler2_1.characters(charArray1, '\u0000', '\u0000');
      DirProvider dirProvider0 = null;
      try {
        dirProvider0 = new DirProvider(".");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Configuration file directory '.' does not exist or is not a directory or is not readable.
         //
         verifyException("org.apache.axis.configuration.DirProvider", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage("znF<LHK @1p", (XBUSSystem) null, "XZe4Qe");
      recordTypeMessage0.getRequestText((XBUSSystem) null);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      attributesImpl0.getValue(2218);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl0);
      AttributesImpl attributesImpl1 = new AttributesImpl();
      AttributesImpl attributesImpl2 = new AttributesImpl(attributesImpl1);
      attributesImpl0.setAttributes(attributes2Impl0);
      attributes2Impl0.getValue(1956);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributesImpl1);
      String string0 = "] 5Y?2s{,(";
      AttributesImpl attributesImpl3 = new AttributesImpl();
      String string1 = "LoeB9/!7";
      // Undeclared exception!
      try { 
        attributesImpl1.setAttribute(15, "znF<LHK @1p", "LoeB9/!7", "RC_OK", "RC_OK", (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Attempt to modify attribute at illegal index: 15
         //
         verifyException("org.xml.sax.helpers.AttributesImpl", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLDocumentImpl hTMLDocumentImpl1 = new HTMLDocumentImpl();
      hTMLDocumentImpl1.getLinks();
      hTMLDocumentImpl1.getTitle();
      hTMLDocumentImpl1.compareTreePosition(hTMLDocumentImpl0);
      AttrNSImpl attrNSImpl0 = new AttrNSImpl();
      hTMLDocumentImpl1.getBaseURI();
      CommentImpl commentImpl0 = new CommentImpl(hTMLDocumentImpl0, "");
      String string0 = "FZ -\"HSUeojX;$Y";
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(hTMLDocumentImpl0, "FZ -\"HSUeojX;$Y");
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage("org.apache.axis.encoding.ser.Base64Serializer", (XBUSSystem) null, "iu");
      recordTypeMessage0.getRequestText((XBUSSystem) null);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Detail detail0 = new Detail();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl(attributesImpl0);
      // Undeclared exception!
      try { 
        attributes2Impl0.setValue((short)0, "<H");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Attempt to modify attribute at illegal index: 0
         //
         verifyException("org.xml.sax.helpers.AttributesImpl", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7741057932992024
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate((-891), (-37), 1, (-37), (-891), (-37));
      mockDate0.after(mockDate1);
      MockDate mockDate2 = new MockDate((-891), (-37), 1, (-891), 763, (-37));
      Instant instant0 = mockDate2.toInstant();
      MockDate mockDate3 = (MockDate)mockDate1.clone();
      Instant instant1 = mockDate3.toInstant();
      MockDate mockDate4 = new MockDate((-891), (-37), 1, (-37), (-37));
      mockDate1.after(mockDate0);
      mockDate2.getTime();
      mockDate0.after(mockDate4);
      mockDate1.getTime();
      Instant instant2 = MockInstant.minusNanos(instant0, (-30426243457000L));
      Instant instant3 = MockInstant.minusMillis(instant2, (-37));
      mockDate4.getTime();
      Instant instant4 = MockInstant.minusNanos(instant3, (-891));
      Instant instant5 = MockInstant.plusSeconds(instant4, (-891));
      MockDate mockDate5 = new MockDate(244, (-19), (-891));
      MockDate.UTC((-37), (-37), (-19), (-37), 763, 7);
      mockDate2.after(mockDate4);
      Instant instant6 = MockInstant.minusNanos(instant1, 1);
      MockDate mockDate6 = new MockDate(7, 1, 1, (-891), 1);
      MockDate mockDate7 = new MockDate((-891), 763, 763);
      MockInstant.minusSeconds(instant5, (-891));
      MockInstant.minusSeconds(instant6, (-891));
      mockDate4.before(mockDate0);
      MockDate mockDate8 = new MockDate();
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage("syncConfigraton", (XBUSSystem) null, "syncConfigraton");
      // Undeclared exception!
      try { 
        recordTypeMessage0.setResponseText("syncConfigraton", (XBUSSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.xbus.protocol.xml.XMLMessageAbstract", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7741057932992024
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 1, 1, 763);
      MockDate mockDate1 = new MockDate((-862), (-37), 1, (-37), (-862), (-37));
      mockDate0.after(mockDate1);
      MockDate mockDate2 = new MockDate((-862), (-37), 1, (-862), 763, (-37));
      Instant instant0 = mockDate2.toInstant();
      Instant instant1 = mockDate2.toInstant();
      MockDate mockDate3 = new MockDate((-862), (-37), 1, (-37), (-37));
      mockDate1.after(mockDate0);
      mockDate2.getTime();
      mockDate0.after(mockDate3);
      mockDate1.getTime();
      Instant instant2 = MockInstant.minusNanos(instant0, (-29510990257000L));
      Instant instant3 = MockInstant.minusMillis(instant2, (-37));
      mockDate3.getTime();
      Instant instant4 = MockInstant.minusNanos(instant3, (-862));
      Instant instant5 = MockInstant.plusSeconds(instant4, (-862));
      MockDate mockDate4 = new MockDate((-37), (-19), 244, 763, (-19));
      MockDate.UTC((-37), (-37), (-19), (-37), 763, 7);
      mockDate2.after(mockDate3);
      Instant instant6 = MockInstant.minusNanos(instant1, 1);
      MockDate mockDate5 = new MockDate(7, 1, 1, (-862), 1);
      MockDate mockDate6 = new MockDate((-862), 763, 763);
      MockInstant.minusSeconds(instant5, (-862));
      MockInstant.minusSeconds(instant6, (-862));
      mockDate3.before(mockDate0);
      MockDate mockDate7 = new MockDate();
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage("syncConfigraton", (XBUSSystem) null, "syncConfigraton");
      // Undeclared exception!
      try { 
        recordTypeMessage0.setResponseText("syncConfigraton", (XBUSSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.xbus.protocol.xml.XMLMessageAbstract", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      // Undeclared exception!
      try { 
        recordTypeMessage0.setRequestText("i", (XBUSSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sf.xbus.protocol.xml.XMLMessageAbstract", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F*JiU#s");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      recordTypeMessage0.setRequestText((String) null, (XBUSSystem) null);
      Integer integer0 = new Integer((-2401));
      ByteArrayList byteArrayList0 = new ByteArrayList();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-38);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayList byteArrayList1 = new ByteArrayList();
      assertFalse(byteArrayList1.equals((Object)byteArrayList0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RecordTypeMessage recordTypeMessage0 = new RecordTypeMessage((XBUSSystem) null);
      recordTypeMessage0.getRequestObject((XBUSSystem) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0003';
      charArray0[0] = '\u0003';
      charArray0[3] = '1';
      defaultHandler2_0.comment(charArray0, '\u0003', '\u0003');
      defaultHandler2_1.externalEntityDecl("mti[xq;Yu>DqV$)", "mti[xq;Yu>DqV$)", "mti[xq;Yu>DqV$)");
      defaultHandler2_0.endPrefixMapping("mti[xq;Yu>DqV$)");
      char[] charArray1 = new char[28];
      defaultHandler2_1.characters(charArray1, '\u0000', '\u0000');
      defaultHandler2_1.skippedEntity("%Jc|NcLUbN{r=<DVH`.i");
      defaultHandler2_0.startEntity("Dw:Z{");
      defaultHandler2_1.characters(charArray1, '\u0003', 9);
      defaultHandler2_1.startPrefixMapping("mti[xq;Yu>DqV$)", "mti[xq;Yu>DqV$)");
      defaultHandler2_1.comment(charArray1, '\u0000', '1');
      defaultHandler2_1.endElement("%Jc|NcLUbN{r=<DVH`.i", "%Jc|NcLUbN{r=<DVH`.i", "%Jc|NcLUbN{r=<DVH`.i");
      defaultHandler2_1.notationDecl("mti[xq;Yu>DqV$)", "`aU(AMLF>", "E^LSmZz~.:8K+0K&F");
      charArray1[3] = '\u0000';
      charArray1[1] = '\u0000';
      defaultHandler2_1.characters(charArray1, '\u0000', '\u0000');
      DirProvider dirProvider0 = null;
      try {
        dirProvider0 = new DirProvider(".");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Configuration file directory '.' does not exist or is not a directory or is not readable.
         //
         verifyException("org.apache.axis.configuration.DirProvider", e);
      }
  }
}
