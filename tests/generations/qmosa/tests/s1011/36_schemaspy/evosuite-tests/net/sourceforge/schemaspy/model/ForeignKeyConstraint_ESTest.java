/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 11:27:15 GMT 2019
 */

package net.sourceforge.schemaspy.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import net.sourceforge.schemaspy.Config;
import net.sourceforge.schemaspy.model.ForeignKeyConstraint;
import net.sourceforge.schemaspy.model.Table;
import net.sourceforge.schemaspy.model.TableColumn;
import net.sourceforge.schemaspy.model.xml.SchemaMeta;
import net.sourceforge.schemaspy.model.xml.TableColumnMeta;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForeignKeyConstraint_ESTest extends ForeignKeyConstraint_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 24, 24);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.clear();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale locale1 = Locale.PRC;
      locale1.getDisplayVariant(locale0);
      locale0.getDisplayScript(locale1);
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Object object0 = new Object();
      Object object1 = new Object();
      locale0.getUnicodeLocaleAttributes();
      UnaryOperator.identity();
      Function<Locale.LanguageRange, String> function0 = (Function<Locale.LanguageRange, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Locale.LanguageRange, ? extends String>) function0);
      UnaryOperator.identity();
      locale1.getDisplayLanguage(locale0);
      UnaryOperator.identity();
      locale0.getDisplayCountry(locale1);
      linkedList1.replaceAll(unaryOperator0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      linkedList0.removeAll(set0);
      foreignKeyConstraint0.getParentColumns();
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) linkedList1;
      Object object2 = new Object();
      objectArray0[1] = (Object) "\u4E2D\u56FD";
      objectArray0[2] = (Object) "\u4E2D\u56FD";
      Object object3 = new Object();
      objectArray0[3] = (Object) locale0;
      Object object4 = new Object();
      objectArray0[6] = (Object) locale0;
      linkedList0.toArray(objectArray0);
      linkedList0.spliterator();
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getName();
      assertEquals(24, foreignKeyConstraint0.getUpdateRule());
      assertEquals(24, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5982538439717047
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wm8~CM}dZj\" Ese%CT");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "),UF=5>o;+n6^O3R");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "@G=lO]YfL\"RT`{", 2, 2);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Null on delete", string0);
      
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals(2, foreignKeyConstraint0.getUpdateRule());
      assertEquals("Null on delete:\n Foreign key to parent set to NULL when parent deleted", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 24, 24);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.clear();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      linkedList0.add(tableColumn0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale locale1 = Locale.PRC;
      locale0.getDisplayScript(locale1);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      UnaryOperator.identity();
      locale1.getDisplayLanguage(locale0);
      UnaryOperator.identity();
      linkedList1.removeIf(predicate0);
      locale0.getDisplayCountry(locale1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      linkedList0.removeAll(set0);
      foreignKeyConstraint0.getParentColumns();
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) linkedList1;
      Object object1 = new Object();
      objectArray0[1] = (Object) "\u4E2D\u56FD";
      objectArray0[2] = (Object) "\u4E2D\u56FD";
      Object object2 = new Object();
      objectArray0[3] = (Object) locale0;
      Object object3 = new Object();
      objectArray0[6] = (Object) locale0;
      linkedList0.toArray(objectArray0);
      linkedList0.spliterator();
      String string0 = ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      assertNull(string0);
      
      foreignKeyConstraint0.getChildColumns();
      assertEquals(24, foreignKeyConstraint0.getUpdateRule());
      assertEquals(24, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.spliterator();
      linkedList0.addLast((TableColumn) null);
      // Undeclared exception!
      try { 
        ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q=");
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte)1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray1[3] = (byte)1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zG+P.v`jp1<&S");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Cascade on delete:\n Deetion of parent deletes child", (byte)3, (byte)1);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string0);
      assertEquals(3, foreignKeyConstraint0.getUpdateRule());
      assertEquals(1, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8797877350457353
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q=");
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Cascade on delete:\n Deetion of parent deletes child", (byte)3, (byte)3);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string1);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string2);
      assertEquals(3, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "EPO[P%[=U_ZjzYN", (-637), (-4621));
      Object object0 = new Object();
      Predicate<TableColumn> predicate0 = Predicate.isEqual((Object) null);
      Predicate<TableColumn> predicate1 = Predicate.isEqual((Object) foreignKeyConstraint0);
      Predicate<TableColumn> predicate2 = predicate1.and(predicate0);
      Predicate<TableColumn> predicate3 = predicate1.negate();
      Predicate<TableColumn> predicate4 = predicate2.and(predicate3);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Predicate.isEqual((Object) mockFileInputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      predicate2.or(predicate4);
      Object object1 = new Object();
      Predicate.isEqual(object1);
      predicate1.or(predicate4);
      predicate0.negate();
      predicate3.and(predicate2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", (-1720), 48);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-637));
      int int0 = foreignKeyConstraint1.compareTo(foreignKeyConstraint0);
      assertEquals((-15), int0);
      assertEquals((-1720), foreignKeyConstraint1.getUpdateRule());
      assertEquals(48, foreignKeyConstraint1.getDeleteRule());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Predicate<TableColumn> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      predicate0.negate();
      predicate1.test((Object) null);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate2.negate();
      Predicate<Object> predicate9 = predicate2.negate();
      Predicate<Object> predicate10 = predicate5.or(predicate9);
      Predicate<Object> predicate11 = predicate4.negate();
      Predicate<Object> predicate12 = predicate7.and(predicate11);
      Predicate<Object> predicate13 = predicate4.negate();
      predicate13.test(predicate10);
      Predicate<Locale.LanguageRange> predicate14 = Predicate.isEqual((Object) predicate13);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate15 = Predicate.isEqual((Object) predicate14);
      Predicate<Object> predicate16 = predicate3.or(predicate15);
      predicate0.negate();
      predicate0.and(predicate6);
      Predicate<Object> predicate17 = Predicate.isEqual((Object) null);
      predicate0.and(predicate17);
      Predicate<Object> predicate18 = predicate16.negate();
      Predicate<Object> predicate19 = predicate12.negate();
      Predicate<Object> predicate20 = predicate18.negate();
      Predicate<Object> predicate21 = predicate4.negate();
      Predicate<Object> predicate22 = Predicate.isEqual((Object) predicate18);
      Predicate<Object> predicate23 = predicate21.negate();
      predicate22.negate();
      Predicate<Object> predicate24 = predicate20.negate();
      predicate23.and(predicate24);
      predicate0.and(predicate19);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "oyJf3NNC.VpDXmHXMkO", (-22), (-22));
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      assertEquals((-22), foreignKeyConstraint0.getDeleteRule());
      assertFalse(boolean0);
      assertEquals((-22), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Predicate<TableColumn> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      predicate0.or(predicate4);
      predicate1.test((Object) null);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate6 = predicate4.and(predicate1);
      Predicate<Object> predicate7 = predicate1.and(predicate3);
      Predicate<Object> predicate8 = predicate2.or(predicate7);
      Predicate<Object> predicate9 = predicate5.or(predicate4);
      Locale locale0 = Locale.FRANCE;
      Predicate.isEqual((Object) locale0);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate.isEqual((Object) predicate10);
      Predicate.isEqual((Object) predicate2);
      predicate0.negate();
      predicate0.and(predicate6);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate7);
      predicate0.and(predicate11);
      Predicate<Object> predicate12 = predicate9.and(predicate2);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate11);
      predicate5.or(predicate8);
      predicate4.and(predicate11);
      Predicate<Object> predicate14 = Predicate.isEqual((Object) predicate12);
      Predicate<Object> predicate15 = predicate14.and(predicate9);
      predicate14.negate();
      Predicate<Object> predicate16 = predicate14.negate();
      predicate15.and(predicate16);
      predicate0.and(predicate13);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "&bm", 451, 60);
      boolean boolean0 = foreignKeyConstraint0.isReal();
      assertTrue(boolean0);
      assertEquals(451, foreignKeyConstraint0.getUpdateRule());
      assertEquals(60, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      int int0 = 2;
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Rd?Z&(P", 2, 2);
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.getChildTable();
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "7]XD^ybonA4E@\"O&Fj=", 1721, 60);
      Object object0 = new Object();
      Predicate<TableColumn> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<TableColumn> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      Predicate<Object> predicate5 = predicate1.or(predicate2);
      Predicate<TableColumn> predicate6 = predicate0.and(predicate2);
      predicate0.or(predicate5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      predicate1.test((Object) null);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate6);
      predicate5.and(predicate1);
      predicate7.and(predicate4);
      predicate7.or(predicate2);
      predicate2.or(predicate7);
      predicate3.and(predicate2);
      Predicate<TableColumn> predicate8 = predicate6.or(predicate3);
      predicate1.and(predicate5);
      Predicate.isEqual((Object) predicate6);
      predicate8.negate();
      predicate6.and(predicate8);
      Predicate.isEqual((Object) "7]XD^ybonA4E@\"O&Fj=");
      predicate0.or(predicate6);
      predicate8.and(predicate0);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "N", 1721, 661);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(60);
      int int0 = foreignKeyConstraint1.compareTo(foreignKeyConstraint0);
      assertEquals(1721, foreignKeyConstraint1.getUpdateRule());
      assertEquals(661, foreignKeyConstraint1.getDeleteRule());
      assertEquals(55, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Config config0 = Config.getInstance();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      config0.isSingleSignOn();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 0, 1);
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean0);
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Table table0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "SUM", 0, 0);
      foreignKeyConstraint0.getChildColumns();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getUpdateRule();
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.02285770806073
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q=");
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Cascade on delete:\n Deetion of parent deletes child", (byte)3, (byte)0);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Cascade on delete", string1);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals(3, foreignKeyConstraint0.getUpdateRule());
      assertEquals("C", string2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      Predicate<TableColumn> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate3);
      predicate1.test("7]XD^)ybonA4E@\"O&Fj=");
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate8.or(predicate9);
      predicate8.test(predicate0);
      Predicate<Object> predicate11 = predicate6.and(predicate8);
      predicate3.test(predicate5);
      predicate1.test(object0);
      predicate4.negate();
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate13 = predicate1.negate();
      predicate11.negate();
      predicate12.or(predicate2);
      predicate10.negate();
      predicate0.negate();
      Predicate<TableColumn> predicate14 = predicate0.or(predicate0);
      predicate0.negate();
      predicate13.negate();
      Predicate<Locale.LanguageRange> predicate15 = Predicate.isEqual((Object) predicate2);
      predicate15.negate();
      predicate0.and(predicate14);
      predicate14.and(predicate7);
      Predicate.isEqual((Object) "7]XD^)ybonA4E@\"O&Fj=");
      predicate14.or(predicate0);
      predicate14.and(predicate0);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "7]XD^)ybonA4E@\"O&Fj=", (-984), 60);
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      assertEquals((-984), foreignKeyConstraint0.getUpdateRule());
      assertEquals(60, foreignKeyConstraint0.getDeleteRule());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, ">Nlbk&!Mz,HV/&J", 48, 48);
      Object object0 = new Object();
      Predicate<TableColumn> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual(object1);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate0.and(predicate4);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      predicate5.test(predicate0);
      Predicate<Object> predicate8 = predicate5.or(predicate6);
      predicate0.or(predicate8);
      predicate7.test(predicate0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate5.and(predicate9);
      predicate6.test(predicate9);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate14 = predicate8.and(predicate5);
      Predicate<Object> predicate15 = predicate13.and(predicate7);
      Predicate<Object> predicate16 = predicate11.and(predicate13);
      Predicate<Object> predicate17 = predicate12.negate();
      predicate6.or(predicate13);
      predicate0.and(predicate12);
      predicate0.or(predicate0);
      Predicate<Object> predicate18 = predicate17.negate();
      Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      predicate0.and(predicate15);
      predicate16.negate();
      Predicate<TableColumn> predicate19 = predicate0.or(predicate18);
      predicate19.and(predicate14);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, ">Nlbk&!Mz,HV/&J", 48, 48);
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wm8~CM}dZj\" Ese%CT");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "),UF=5>o;+n6^O3R");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 2, 2);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals(2, foreignKeyConstraint0.getUpdateRule());
      assertEquals("N", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "O", 1721, 60);
      Predicate<TableColumn> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      predicate0.or(predicate4);
      predicate1.test((Object) null);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Predicate<Object> predicate6 = predicate1.and(predicate3);
      Predicate<Object> predicate7 = predicate2.or(predicate6);
      Predicate<Object> predicate8 = predicate2.or(predicate4);
      Predicate<Object> predicate9 = predicate2.negate();
      Predicate.isEqual((Object) predicate9);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 245);
      Predicate.isEqual((Object) pipedInputStream0);
      Predicate.isEqual((Object) predicate2);
      predicate0.negate();
      predicate0.and(predicate5);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate6);
      predicate0.and(predicate10);
      Predicate<Object> predicate11 = predicate8.and(predicate2);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate10);
      predicate1.or(predicate7);
      predicate4.and(predicate10);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate11);
      predicate13.and(predicate8);
      Predicate<Object> predicate14 = predicate13.negate();
      predicate12.and(predicate14);
      predicate0.and(predicate12);
      foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals(60, foreignKeyConstraint0.getDeleteRule());
      assertEquals(1721, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q=");
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Cascade on delete:\n Deetion of parent deletes child", (byte)3, (byte)1);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string0);
      assertEquals(3, foreignKeyConstraint0.getUpdateRule());
      assertEquals(1, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q=");
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Cascade on delete:\n Deetion of parent deletes child", (byte) (-1), (byte)1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string0);
      assertEquals((-1), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5642900265283206
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "{'!m", 3, 3);
      List<TableColumn> list0 = foreignKeyConstraint0.getParentColumns();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForeignKeyConstraint.toString(list0);
      foreignKeyConstraint0.getDeleteRule();
      foreignKeyConstraint0.getParentTable();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.isRestrictDelete();
      ForeignKeyConstraint.toString(list0);
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getParentTable();
      ForeignKeyConstraint.toString(list0);
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getParentTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      foreignKeyConstraint0.getParentColumns();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.unlinkParents();
      tableColumn0.setShortType("3YI");
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn0.removeChild(tableColumn1);
      tableColumn0.unlinkChildren();
      tableColumn1.unlinkChildren();
      tableColumn1.removeParent((TableColumn) null);
      tableColumn1.setShortType("3YI");
      tableColumn0.removeChild(tableColumn1);
      tableColumn1.setType("3YI");
      tableColumn0.unlinkChildren();
      tableColumn0.removeChild((TableColumn) null);
      tableColumn1.setIsAutoUpdated(true);
      tableColumn0.unlinkChildren();
      tableColumn0.unlinkChildren();
      tableColumn0.setShortType("");
      tableColumn0.setIsAutoUpdated(true);
      tableColumn1.setComments("]csXO.>");
      tableColumn1.removeChild(tableColumn0);
      tableColumn1.setComments("]csXO.>");
      tableColumn0.unlinkParents();
      tableColumn1.setShortType("JEBn[Zv");
      tableColumn1.unlinkParents();
      tableColumn1.setIsAutoUpdated(true);
      tableColumn0.removeChild(tableColumn1);
      tableColumn1.removeParent(tableColumn0);
      tableColumn0.removeChild(tableColumn1);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint((TableColumn) null, tableColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Password: ", (-2826), 0);
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getParentTable();
      Config.getInstance();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      foreignKeyConstraint0.getParentColumns();
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals(0, int0);
      
      System.setCurrentTimeMillis(0);
      foreignKeyConstraint0.getChildTable();
      assertEquals((-2826), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 60, 449);
      foreignKeyConstraint0.getName();
      assertEquals(449, foreignKeyConstraint0.getDeleteRule());
      assertEquals(60, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "P:jvt.sk:";
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "P:jvt.sk:", 0, 0);
      Integer integer0 = new Integer(0);
      foreignKeyConstraint0.isNullOnDelete();
      String string1 = "";
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("P:jvt.sk:", "", "P:jvt.sk:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"P:jvt.sk:\" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      Predicate<TableColumn> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<TableColumn> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate4);
      predicate1.test(object0);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate5.negate();
      predicate0.negate();
      Predicate<Object> predicate9 = predicate1.negate();
      predicate9.test(predicate0);
      predicate7.and(predicate9);
      FileSystemHandling.shouldAllThrowIOExceptions();
      predicate1.test(object0);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate11 = predicate1.negate();
      predicate10.and(predicate4);
      predicate10.or(predicate2);
      predicate2.or(predicate10);
      predicate3.negate();
      Predicate<TableColumn> predicate12 = predicate3.or(predicate3);
      predicate0.negate();
      predicate11.negate();
      Predicate<Locale.LanguageRange> predicate13 = Predicate.isEqual((Object) predicate2);
      predicate13.negate();
      predicate0.and(predicate12);
      predicate12.and(predicate8);
      Predicate.isEqual((Object) "7]XD^ybonA4E@\"O&Fj=");
      predicate12.or(predicate0);
      predicate12.and(predicate0);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "7]XD^ybonA4E@\"O&Fj=", (-984), 60);
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      assertFalse(boolean0);
      assertEquals(60, foreignKeyConstraint0.getDeleteRule());
      assertEquals((-984), foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "selectTableCommentsSql";
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "selectTableCommentsSql", 21, 21);
      foreignKeyConstraint0.addParentColumn((TableColumn) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Config.getInstance();
      Connection connection0 = null;
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      String string1 = "ZONE";
      String string2 = "";
      String string3 = "N";
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("", "", "N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Meta directory \"\" must contain a file named \"N.meta.xml\"
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.unlinkParents();
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn0.unlinkChildren();
      tableColumn1.unlinkChildren();
      tableColumn0.removeParent(tableColumn1);
      tableColumn1.setShortType("");
      tableColumn0.removeChild(tableColumn1);
      tableColumn0.setShortType("");
      tableColumn0.removeChild((TableColumn) null);
      tableColumn1.setIsAutoUpdated(true);
      tableColumn0.unlinkChildren();
      tableColumn0.setShortType("");
      tableColumn0.setIsAutoUpdated(false);
      tableColumn1.setComments("]csXO.>");
      tableColumn1.setComments("]csXO.>");
      tableColumn1.unlinkParents();
      tableColumn0.removeChild(tableColumn1);
      tableColumn0.unlinkChildren();
      tableColumn1.removeParent(tableColumn0);
      tableColumn0.removeChild(tableColumn1);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn1, tableColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "7]XD^bon4E@\"O&j=", 59, 59);
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo((ForeignKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, ">Nlbk&!Mz,HV/&J", 48, 48);
      Object object0 = new Object();
      Predicate<TableColumn> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual(object1);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate0.and(predicate4);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      predicate5.test(predicate0);
      Predicate<Object> predicate8 = predicate5.or(predicate6);
      predicate0.or(predicate8);
      predicate7.test(predicate0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate13 = predicate5.and(predicate12);
      predicate6.test(predicate9);
      Predicate<Object> predicate14 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate15 = predicate8.and(predicate5);
      Predicate<Object> predicate16 = predicate14.and(predicate7);
      Predicate<Object> predicate17 = predicate11.and(predicate14);
      Predicate<Object> predicate18 = predicate13.negate();
      predicate6.or(predicate14);
      predicate0.and(predicate13);
      predicate0.or(predicate0);
      Predicate<Object> predicate19 = predicate18.negate();
      Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      predicate0.and(predicate16);
      predicate17.negate();
      Predicate<TableColumn> predicate20 = predicate0.or(predicate19);
      predicate20.and(predicate15);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, ">Nlbk&!Mz,HV/&J", 48, 48);
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, ">Nlbk&!Mz,HV/&J", 48, 48);
      Object object0 = new Object();
      Predicate<TableColumn> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual(object1);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate0.and(predicate4);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      predicate5.test(predicate0);
      Predicate<Object> predicate8 = predicate5.or(predicate6);
      predicate7.test(predicate0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate13 = predicate5.and(predicate12);
      predicate6.test(predicate9);
      Predicate<Object> predicate14 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate15 = predicate8.and(predicate5);
      Predicate<Object> predicate16 = predicate14.and(predicate7);
      predicate11.and(predicate14);
      Predicate<Object> predicate17 = predicate13.negate();
      predicate6.or(predicate14);
      predicate0.and(predicate13);
      predicate0.or(predicate0);
      Predicate<Object> predicate18 = predicate17.negate();
      Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      predicate0.and(predicate16);
      Predicate<TableColumn> predicate19 = predicate0.or(predicate18);
      predicate19.and(predicate15);
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint0);
      assertEquals(0, int0);
      assertEquals(48, foreignKeyConstraint0.getDeleteRule());
      assertEquals(48, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.400704712407596
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Pakssword: ", (-3929), (-3929));
      foreignKeyConstraint0.getParentColumns();
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertFalse(boolean0);
      
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals((-3929), int0);
      
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getParentTable();
      assertEquals((-3929), foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Config config0 = Config.getInstance();
      config0.isSingleSignOn();
      config0.getHost();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", (-2826), 17);
      foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals((-2826), foreignKeyConstraint0.getUpdateRule());
      assertEquals(17, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "7]XD^ybonA4EO&Fj=", 449, 60);
      foreignKeyConstraint0.addChildColumn((TableColumn) null);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      Config config0 = Config.getInstance();
      boolean boolean0 = config0.isSingleSignOn();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5101178182775215
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Pakssword: ", (-3929), (-3929));
      foreignKeyConstraint0.getParentColumns();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "Pakssword: ", 1, (-3929));
      foreignKeyConstraint1.getParentColumns();
      boolean boolean0 = foreignKeyConstraint1.isRestrictDelete();
      foreignKeyConstraint0.getDeleteRule();
      int int0 = foreignKeyConstraint1.getUpdateRule();
      assertEquals(1, int0);
      
      foreignKeyConstraint1.getChildColumns();
      foreignKeyConstraint1.getDeleteRuleDescription();
      Integer integer0 = new Integer((-3929));
      foreignKeyConstraint1.getDeleteRuleName();
      boolean boolean1 = foreignKeyConstraint0.isCascadeOnDelete();
      assertTrue(boolean1 == boolean0);
      
      foreignKeyConstraint1.getParentTable();
      assertEquals((-3929), foreignKeyConstraint1.getDeleteRule());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Config config0 = Config.getInstance();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      config0.isSingleSignOn();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 0, (-2826));
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertEquals((-2826), foreignKeyConstraint0.getDeleteRule());
      assertFalse(boolean0);
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      Predicate<TableColumn> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      predicate0.negate();
      predicate1.test((Object) null);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate5.or(predicate4);
      Predicate<Object> predicate9 = Predicate.isEqual(object0);
      Predicate<Object> predicate10 = predicate7.and(predicate9);
      Predicate<Object> predicate11 = predicate4.negate();
      predicate11.test(predicate8);
      Predicate<Locale.LanguageRange> predicate12 = Predicate.isEqual((Object) predicate11);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate12);
      Predicate<Object> predicate14 = predicate3.or(predicate13);
      predicate0.negate();
      predicate0.and(predicate6);
      Predicate<Object> predicate15 = Predicate.isEqual((Object) null);
      predicate0.and(predicate15);
      Predicate<Object> predicate16 = predicate14.negate();
      Predicate<Object> predicate17 = predicate10.negate();
      Predicate<Object> predicate18 = predicate4.negate();
      Predicate<Object> predicate19 = predicate8.negate();
      Predicate<Object> predicate20 = Predicate.isEqual((Object) predicate16);
      Predicate<Object> predicate21 = predicate19.negate();
      predicate20.negate();
      Predicate<Object> predicate22 = predicate18.negate();
      predicate21.and(predicate22);
      predicate0.and(predicate17);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "oyJf3NNC.VpDXmHXMkO", 229, 229);
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertEquals(229, foreignKeyConstraint0.getDeleteRule());
      assertEquals(229, foreignKeyConstraint0.getUpdateRule());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "O", 1721, 60);
      Object object0 = new Object();
      Predicate<TableColumn> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<TableColumn> predicate5 = predicate0.and(predicate2);
      predicate0.or(predicate4);
      predicate1.test((Object) null);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate7 = predicate4.and(predicate1);
      Predicate<Object> predicate8 = predicate1.and(predicate3);
      Predicate<Object> predicate9 = predicate2.or(predicate8);
      Predicate<Object> predicate10 = predicate6.or(predicate4);
      Locale locale0 = Locale.ENGLISH;
      Predicate.isEqual((Object) locale0);
      Predicate<Object> predicate11 = predicate6.negate();
      Predicate.isEqual((Object) predicate11);
      Predicate.isEqual((Object) predicate2);
      predicate0.negate();
      predicate0.and(predicate7);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate8);
      predicate5.and(predicate12);
      Predicate<Object> predicate13 = predicate10.and(predicate2);
      Predicate<Object> predicate14 = Predicate.isEqual((Object) predicate12);
      predicate6.or(predicate9);
      predicate4.and(predicate12);
      Predicate<Object> predicate15 = Predicate.isEqual((Object) predicate13);
      predicate15.and(predicate10);
      Predicate<Object> predicate16 = predicate15.negate();
      predicate14.and(predicate16);
      predicate0.and(predicate14);
      foreignKeyConstraint0.getName();
      assertEquals(60, foreignKeyConstraint0.getDeleteRule());
      assertEquals(1721, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.unlinkParents();
      tableColumn0.setShortType("");
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn0.unlinkChildren();
      tableColumn1.unlinkChildren();
      tableColumn1.removeParent((TableColumn) null);
      tableColumn1.setShortType("");
      tableColumn0.removeChild(tableColumn1);
      tableColumn1.setType("");
      tableColumn0.unlinkChildren();
      tableColumn0.removeChild((TableColumn) null);
      tableColumn1.setIsAutoUpdated(true);
      tableColumn0.unlinkChildren();
      tableColumn0.unlinkChildren();
      tableColumn0.setShortType("");
      tableColumn0.setIsAutoUpdated(true);
      tableColumn1.setComments("]csXO.>");
      tableColumn1.removeChild(tableColumn0);
      tableColumn1.setComments("]csXO.>");
      tableColumn0.unlinkParents();
      tableColumn1.setShortType("JEBn[Zv");
      tableColumn1.unlinkParents();
      tableColumn1.setIsAutoUpdated(true);
      tableColumn0.removeChild(tableColumn1);
      tableColumn0.unlinkChildren();
      tableColumn1.removeParent(tableColumn0);
      tableColumn0.removeChild(tableColumn1);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint((TableColumn) null, tableColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.unlinkParents();
      tableColumn0.setShortType("3YsI");
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn1, tableColumn1, 1062, 1062);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 449;
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.unlinkChildren();
      tableColumn0.unlinkChildren();
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn1.removeParent(tableColumn0);
      tableColumn0.setShortType("");
      tableColumn1.removeChild(tableColumn0);
      tableColumn0.setShortType("");
      tableColumn0.removeChild(tableColumn1);
      tableColumn0.setIsAutoUpdated(false);
      tableColumn1.unlinkChildren();
      tableColumn1.setIsAutoUpdated(false);
      tableColumn1.setComments(" references ");
      tableColumn0.setComments("h5~]'gw,7");
      tableColumn1.unlinkParents();
      tableColumn1.removeChild(tableColumn0);
      tableColumn0.unlinkChildren();
      tableColumn0.removeParent(tableColumn1);
      tableColumn1.removeChild(tableColumn0);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint((TableColumn) null, tableColumn1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "_H1pv|5'avCsT.[jh", 11, 11);
      boolean boolean0 = foreignKeyConstraint0.isImplied();
      assertEquals(11, foreignKeyConstraint0.getUpdateRule());
      assertFalse(boolean0);
      assertEquals(11, foreignKeyConstraint0.getDeleteRule());
  }
}
