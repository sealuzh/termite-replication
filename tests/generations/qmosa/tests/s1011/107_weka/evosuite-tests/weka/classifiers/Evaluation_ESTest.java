/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 11:54:53 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.clusterers.Cobweb;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.Tag;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.Loader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.100216452340039
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toMatrixString(" ");
      assertEquals(" \n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.weightedMatthewsCorrelation();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier6 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier7 = new AttributeSelectedClassifier();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      
      LinkedHashSet<VotedPerceptron> linkedHashSet0 = new LinkedHashSet<VotedPerceptron>();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation0.weightedFalseNegativeRate();
      double double2 = evaluation1.falsePositiveRate(8);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7923911516277187
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setRetrieval(16);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation1.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      instances0.containsAll(hashSet0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.weightedAreaUnderPRC();
      evaluation1.weightedAreaUnderROC();
      evaluation1.rootMeanPriorSquaredError();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      MockRandom mockRandom0 = new MockRandom(394);
      HashSet<AdaBoostM1> hashSet1 = new HashSet<AdaBoostM1>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      TestInstances testInstances0 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      TestInstances.forCapabilities(capabilities0);
      evaluation0.KBMeanInformation();
      Instance instance0 = null;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 16;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (double) 394;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = (double) (-2);
      doubleArray1[7] = (double) 16;
      doubleArray1[8] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray1, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9839133877027684
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      AdaBoostM1 adaBoostM1_1 = new AdaBoostM1();
      hashSet0.add(adaBoostM1_1);
      boolean boolean0 = evaluation1.m_CoverageStatisticsAvailable;
      evaluation0.weightedAreaUnderROC();
      double double0 = evaluation1.m_ClassPriorsSum;
      evaluation1.weightedFMeasure();
      IBk iBk0 = new IBk(1);
      iBk0.getOptions();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.truePositiveRate(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation1.weightedTruePositiveRate();
      evaluation0.confusionMatrix();
      evaluation0.pctUnclassified();
      evaluation1.weightedAreaUnderPRC();
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "@relation");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3552595729048686
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Instances instances1 = new Instances(instances0, (-188));
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "randomSeedTipText");
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.enumerateMeasures();
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[8];
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier2;
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier1;
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier2;
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier2;
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier0;
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier1;
      int[] intArray0 = new int[5];
      intArray0[0] = (-188);
      intArray0[1] = (-2);
      intArray0[2] = (-1374);
      intArray0[3] = (-2);
      intArray0[4] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-919.665804807803), intArray0, (-1141));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      DecisionTable decisionTable0 = new DecisionTable();
      try { 
        evaluation0.evaluateModelOnce((Classifier) decisionTable0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.461934648705106
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("@relation");
      attribute0.setWeight(0);
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[6];
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier1;
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier3;
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier4;
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier5;
      AbstractClassifier.makeCopies(attributeSelectedClassifier0, 619);
      attribute0.isInRange(2);
      textDirectoryLoader0.setRetrieval(103);
      instances0.toArray(attributeSelectedClassifierArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      double double0 = evaluation0.weightedAreaUnderROC();
      Enumeration enumeration0 = new NGramTokenizer();
      evaluation0.weightedTruePositiveRate();
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.SFEntropyGain();
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.unweightedMicroFmeasure();
      assertNotEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8423454860407178
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      TestInstances testInstances0 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AdditiveRegression additiveRegression1 = new AdditiveRegression();
      additiveRegression1.getCapabilities();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getNotCapabilities();
      additiveRegression1.toString();
      additiveRegression0.setNumIterations((-1));
      additiveRegression0.setDebug(true);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(2);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 0.22499999403953552;
      doubleArray0[6] = (double) (-2);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6576622608125806
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      textDirectoryLoader0.setRetrieval(539);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = (double) 26;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(539);
      BinarySparseInstance binarySparseInstance1 = (BinarySparseInstance)binarySparseInstance0.copy();
      int[] intArray0 = new int[2];
      intArray0[1] = 26;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1892.0816362218166), intArray0, 26);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString();
      evaluation1.errorRate();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-156.882995), intArray0, 26);
      JRip jRip0 = new JRip();
      Evaluation.getGlobalInfo(jRip0);
      evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2223.193111533823, intArray0, 6);
      binarySparseInstance0.mergeInstance(binarySparseInstance1);
      evaluation1.updateMargins(doubleArray0, 6, 0.1);
      assertEquals(Double.NaN, evaluation1.sizeOfPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4940355237092673
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      textDirectoryLoader0.getDirectory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation1.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      hashSet0.stream();
      instances0.containsAll(hashSet0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.useNoPriors();
      evaluation0.weightedAreaUnderPRC();
      evaluation1.weightedAreaUnderROC();
      evaluation1.weightedFMeasure();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      MockRandom mockRandom0 = new MockRandom(394);
      HashSet<AdaBoostM1> hashSet1 = new HashSet<AdaBoostM1>();
      TestInstances testInstances0 = new TestInstances();
      HashSet<AdaBoostM1> hashSet2 = new HashSet<AdaBoostM1>();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      try { 
        evaluation0.updateStatsForPredictor(1185.90397031, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("@relation");
      attribute0.setWeight(0);
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[6];
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier1;
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier0;
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier3;
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier4;
      AbstractClassifier.makeCopies(attributeSelectedClassifier0, 619);
      attribute0.isInRange(2);
      textDirectoryLoader0.setRetrieval(103);
      instances0.toArray(attributeSelectedClassifierArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      double double0 = evaluation0.weightedAreaUnderROC();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
      
      LinkedHashSet<VotedPerceptron> linkedHashSet0 = new LinkedHashSet<VotedPerceptron>();
      double double3 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.399560559313061
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      LinkedHashSet<AdaBoostM1> linkedHashSet0 = new LinkedHashSet<AdaBoostM1>();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      boolean boolean0 = evaluation1.m_DiscardPredictions;
      evaluation0.KBRelativeInformation();
      instances0.containsAll(linkedHashSet0);
      evaluation1.weightedRecall();
      double double0 = evaluation1.m_MaxTarget;
      evaluation1.weightedAreaUnderROC();
      evaluation0.meanAbsoluteError();
      evaluation1.weightedFMeasure();
      evaluation1.SFMeanEntropyGain();
      Evaluation.k_MarginResolution = (-1461032992);
      evaluation1.weightedAreaUnderPRC();
      evaluation0.getClassPriors();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation1.matthewsCorrelationCoefficient((-1028));
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.640912783780594
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      LinkedHashSet<Stacking> linkedHashSet0 = new LinkedHashSet<Stacking>();
      instances0.removeAll(linkedHashSet0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      instances0.enumerateInstances();
      intArray0[1] = (-2032);
      intArray0[2] = (-2);
      intArray0[1] = (-1);
      intArray0[4] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-919.76), intArray0, (-1));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.setMissing(1);
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.rootRelativeSquaredError();
      evaluation0.falseNegativeRate((-1));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.kappa();
      evaluation2.numFalsePositives(1);
      assertEquals(Double.NaN, evaluation2.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.589851348914725
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      LinkedList<DecisionStump> linkedList0 = new LinkedList<DecisionStump>();
      instances0.containsAll(linkedList0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      MockRandom mockRandom0 = new MockRandom((-1));
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TestInstances testInstances1 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities.forInstances(instances0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("weka/core/Capabilities.props");
      testInstances2.generate();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.getClassPriors();
      System.setCurrentTimeMillis((-2));
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.areaUnderROC((-2));
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6086207461851414
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      LinkedHashSet<AdaBoostM1> linkedHashSet0 = new LinkedHashSet<AdaBoostM1>();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      linkedHashSet0.add(adaBoostM1_0);
      evaluation1.m_NumClasses = 754;
      evaluation0.KBRelativeInformation();
      instances0.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        evaluation1.weightedRecall();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3417885226864823
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("@relation");
      attribute0.addRelation(instances0);
      Instances instances1 = new Instances(instances0, 2);
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[6];
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier1;
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier1;
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier3;
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      AdaBoostM1 adaBoostM1_1 = new AdaBoostM1();
      hashSet0.add(adaBoostM1_0);
      instances1.containsAll(instances0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double double0 = evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.m_ClassPriorsSum;
      double double2 = evaluation0.weightedFMeasure();
      IBk iBk0 = new IBk(1);
      iBk0.getOptions();
      double double3 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation0.truePositiveRate(2);
      assertEquals(0.0, double4, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double5 = evaluation0.weightedTruePositiveRate();
      assertEquals(double5, double0, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5743631318055766
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      IBk iBk0 = new IBk();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      AllFilter allFilter0 = new AllFilter();
      double double1 = evaluation0.m_SumAbsErr;
      double double2 = evaluation0.m_TotalCoverage;
      IBk iBk1 = new IBk();
      iBk1.getOptions();
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2997.81057686, intArray0, 2);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      double double3 = evaluation0.recall(987);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.trueNegativeRate(4);
      assertEquals(0.0, double4, 0.01);
      
      CostMatrix costMatrix0 = new CostMatrix(0);
      LinkedHashSet<VotedPerceptron> linkedHashSet0 = new LinkedHashSet<VotedPerceptron>();
      double double5 = evaluation0.totalCost();
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5199094519916123
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      LinkedHashSet<Stacking> linkedHashSet0 = new LinkedHashSet<Stacking>();
      AllFilter allFilter0 = new AllFilter();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getDiscardPredictions();
      evaluation0.weightedRecall();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.matthewsCorrelationCoefficient((-2));
      evaluation0.KBRelativeInformation();
      evaluation0.setNumericPriorsFromBuffer();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.equals(instances0);
      evaluation0.weightedFMeasure();
      evaluation0.weightedAreaUnderROC();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.178235655793613
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      textDirectoryLoader0.setRetrieval(539);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(539);
      int[] intArray0 = new int[2];
      intArray0[1] = 26;
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      adaBoostM1_0.setDebug(false);
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      hashSet0.add(adaBoostM1_0);
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setWordSeparators("-[> +G@5bZ0<");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.m_ClassPriorsSum;
      double double2 = evaluation0.m_SumPredicted;
      Instances instances1 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.weightedAreaUnderPRC();
      evaluation1.m_NumClasses = (-2);
      IBk iBk0 = new IBk((-981));
      iBk0.getOptions();
      // Undeclared exception!
      try { 
        evaluation1.weightedTrueNegativeRate();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.349421283797024
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumSqrClass;
      evaluation1.weightedAreaUnderPRC();
      double double1 = evaluation1.m_SumPriorAbsErr;
      double[] doubleArray0 = new double[5];
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.weightedPrecision();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2114.8719212));
      evaluation0.m_SumPriorEntropy = (-2277.395);
      AllFilter allFilter1 = new AllFilter();
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, doubleArray0);
      try { 
        evaluation1.updateStatsForPredictor(2.0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances1 = new Instances(instances0, (-188));
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.enumerateMeasures();
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[8];
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier2;
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier3;
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier4;
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier5;
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier0;
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier1;
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.0E-12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.134631643813234
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = 57.6623371045016;
      doubleArray0[1] = (-0.4375);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(57.6623371045016, doubleArray0);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2577553715818963
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      textDirectoryLoader0.setRetrieval(539);
      textDirectoryLoader0.setOutputFilename(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(539);
      int[] intArray0 = new int[2];
      intArray0[1] = 26;
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorAbsErr;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-156.882995), intArray0, 26);
      JRip jRip0 = new JRip();
      String string0 = Evaluation.getGlobalInfo(jRip0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(6);
      binarySparseInstance0.mergeInstance(binarySparseInstance0);
      Evaluation.makeOptionString(jRip0, true);
      evaluation0.toSummaryString(string0, true);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9999667730527455
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation1.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      hashSet0.stream();
      instances0.containsAll(hashSet0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.weightedAreaUnderPRC();
      evaluation1.weightedAreaUnderROC();
      evaluation1.weightedFMeasure();
      evaluation0.m_SumSqrClass = Double.NaN;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      MockRandom mockRandom0 = new MockRandom(394);
      HashSet<AdaBoostM1> hashSet1 = new HashSet<AdaBoostM1>();
      TestInstances testInstances0 = new TestInstances();
      HashSet<AdaBoostM1> hashSet2 = new HashSet<AdaBoostM1>();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String string0 = evaluation0.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.SFSchemeEntropy();
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.109677716098568
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      double double0 = evaluation1.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      hashSet0.stream();
      instances0.containsAll(hashSet0);
      double double1 = evaluation0.m_TotalCost;
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double2, double0, 0.01);
      
      evaluation1.weightedAreaUnderROC();
      evaluation1.weightedFMeasure();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      MockRandom mockRandom0 = new MockRandom(394);
      HashSet<AdaBoostM1> hashSet1 = new HashSet<AdaBoostM1>();
      TestInstances testInstances0 = new TestInstances();
      HashSet<AdaBoostM1> hashSet2 = new HashSet<AdaBoostM1>();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getNotCapabilities();
      evaluation0.weightedTrueNegativeRate();
      double double3 = evaluation0.matthewsCorrelationCoefficient((-1));
      evaluation0.numFalsePositives((-3104));
      evaluation0.incorrect();
      double double4 = evaluation1.trueNegativeRate(495);
      assertEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5852765003065
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getMinNo");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances1.forEach(consumer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SparseInstance sparseInstance0 = new SparseInstance((byte)15);
      instances0.add((Instance) sparseInstance0);
      AllFilter allFilter0 = new AllFilter();
      double double0 = evaluation0.m_SumSqrClass;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.matthewsCorrelationCoefficient(23);
      evaluation0.setPriors(instances0);
      assertEquals(3, instances0.classIndex());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.633415826601809
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      hashSet0.stream();
      instances0.containsAll(hashSet0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedFMeasure();
      MockRandom mockRandom0 = new MockRandom(394);
      HashSet<AdaBoostM1> hashSet1 = new HashSet<AdaBoostM1>();
      TestInstances testInstances0 = new TestInstances();
      HashSet<AdaBoostM1> hashSet2 = new HashSet<AdaBoostM1>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      HashSet<AdaBoostM1> hashSet3 = new HashSet<AdaBoostM1>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TestInstances testInstances1 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances.forCapabilities(capabilities1);
      evaluation0.KBMeanInformation();
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3655934560029954
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_SumSqrClass;
      SMO sMO0 = new SMO();
      MockRandom mockRandom0 = new MockRandom((-2072L));
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedFMeasure();
      try { 
        evaluation0.crossValidateModel((Classifier) sMO0, instances0, 0, (Random) mockRandom0, (Object[]) sMO0.TAGS_FILTER);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.361355783820657
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_SumSqrClass;
      SMO sMO0 = new SMO();
      MockRandom mockRandom0 = new MockRandom((-2072L));
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedFMeasure();
      try { 
        evaluation0.crossValidateModel((Classifier) sMO0, instances0, 378, (Random) mockRandom0, (Object[]) sMO0.TAGS_FILTER);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      IBk iBk0 = new IBk();
      textDirectoryLoader0.getStructure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.130702199106242
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Instances instances1 = new Instances(instances0, (-188));
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.enumerateMeasures();
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[8];
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier2;
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier3;
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier4;
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier5;
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier0;
      AbstractClassifier.makeCopies(attributeSelectedClassifier5, 3);
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier1;
      attributeSelectedClassifierArray0[6] = attributeSelectedClassifier0;
      AttributeSelectedClassifier attributeSelectedClassifier6 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[7] = attributeSelectedClassifier6;
      instances1.toArray(attributeSelectedClassifierArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MockRandom mockRandom0 = new MockRandom((-2161L));
      instances0.randomize(mockRandom0);
      IBk iBk0 = new IBk((-188));
      iBk0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.truePositiveRate(1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      assertEquals("If set to true, classifier may output additional info to the console.", regressionByDiscretization0.debugTipText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5181199368694513
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      AdaBoostM1 adaBoostM1_1 = new AdaBoostM1();
      hashSet0.add(adaBoostM1_1);
      instances0.containsAll(hashSet0);
      evaluation0.weightedAreaUnderROC();
      double double0 = evaluation1.m_ClassPriorsSum;
      evaluation1.weightedFMeasure();
      evaluation0.weightedAreaUnderPRC();
      IBk iBk0 = new IBk((byte)10);
      evaluation1.truePositiveRate(2);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@relation";
      stringArray0[3] = "ides";
      stringArray0[4] = "@relation";
      stringArray0[5] = ".arff";
      try { 
        Evaluation.evaluateModel((Classifier) adaBoostM1_0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.AdaBoostM1:
         // 
         // -P <num>
         // \tPercentage of weight mass to base training on.
         // \t(default 100, reduce to around 90 speed up)
         // -Q
         // \tUse resampling for boosting.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3307102464186924
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      textDirectoryLoader0.setRetrieval(539);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(539);
      int[] intArray0 = new int[2];
      intArray0[1] = 26;
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorAbsErr;
      evaluation0.m_SumSqrErr = 6774.610486;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(26, intArray0, 26);
      textDirectoryLoader0.setCharSet("FROM ");
      JRip jRip0 = new JRip();
      Evaluation.getGlobalInfo(jRip0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(6);
      evaluation0.trueNegativeRate(6);
      try { 
        evaluation0.evaluateModelOnce(2063.48224193, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2063
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.593768657627083
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      LinkedHashSet<Stacking> linkedHashSet0 = new LinkedHashSet<Stacking>();
      instances0.removeAll(linkedHashSet0);
      instances0.getRandomNumberGenerator(1L);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      double double0 = evaluation0.m_MinTarget;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AllFilter allFilter0 = new AllFilter();
      double double1 = evaluation0.m_SumSqrClass;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.matthewsCorrelationCoefficient((-2064));
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      try { 
        ConverterUtils.DataSource.read("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class weka.core.converters.ConverterUtils
         //
         verifyException("weka.core.converters.ConverterUtils$DataSource", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.790426109632593
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      LinkedHashSet<Stacking> linkedHashSet0 = new LinkedHashSet<Stacking>();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)37;
      testInstances0.setNoClass(true);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)111;
      byteArray0[8] = (byte) (-91);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.m_DiscardPredictions = true;
      AllFilter allFilter1 = new AllFilter();
      evaluation0.KBInformation();
      evaluation0.KBRelativeInformation();
      TestInstances testInstances1 = new TestInstances();
      // Undeclared exception!
      try { 
        Instances.mergeInstances(instances0, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: ' Nominal1' ' Class' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8688897147295798
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      instances0.containsAll(hashSet0);
      double double1 = evaluation0.m_TotalCost;
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.weightedAreaUnderROC();
      double double4 = evaluation0.weightedFMeasure();
      assertEquals(double4, double3, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(394);
      HashSet<AdaBoostM1> hashSet1 = new HashSet<AdaBoostM1>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      TestInstances testInstances0 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getNotCapabilities();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "randomSeedTipText");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.getClassPriors();
      System.setCurrentTimeMillis(394);
      double double5 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double5, double0, 0.01);
      
      double double6 = evaluation0.rootRelativeSquaredError();
      assertEquals(double6, double0, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9443130178907073
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      LinkedList<DecisionStump> linkedList0 = new LinkedList<DecisionStump>();
      instances0.containsAll(linkedList0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedFMeasure();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-1), Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.520492815474806
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation1.weightedAreaUnderROC();
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation1.weightedFMeasure();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      double double1 = evaluation0.m_SumClass;
      IBk iBk0 = new IBk((-1629));
      evaluation0.SFMeanPriorEntropy();
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1982020749289486
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      IBk iBk0 = new IBk((-1));
      CSVLoader cSVLoader0 = new CSVLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      Tag[] tagArray0 = new Tag[4];
      Tag tag0 = new Tag(5, ".xml");
      tagArray0[0] = tag0;
      evaluation0.toCumulativeMarginDistributionString();
      tag0.setReadable("7?md,%8\"{");
      tag0.getRevision();
      evaluation0.setDiscardPredictions(false);
      Tag tag1 = new Tag((-3670), "@data");
      tagArray0[1] = tag1;
      Tag tag2 = new Tag((-3670), " in the dictionary!", (String) null, false);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      SelectedTag selectedTag0 = wrapperSubsetEval0.getEvaluationMeasure();
      assertEquals("1", selectedTag0.toString());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.342043491976295
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toMatrixString(" ");
      evaluation0.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      testInstances0.setWordSeparators((String) null);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedAreaUnderROC();
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = evaluation0.makeDistribution(0.3183098861837907);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, (int[]) null, (-1));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2598.044826));
      double double1 = evaluation0.m_WithClass;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-2);
      doubleArray1[1] = (-2277.395);
      doubleArray1[2] = (double) (-1);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray1, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4775431275048834
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_SumSqrClass;
      evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.m_SumPriorAbsErr;
      double[] doubleArray0 = new double[5];
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 26;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3460.418, intArray0, 102);
      JRip jRip0 = new JRip();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Evaluation.getGlobalInfo(randomCommittee0);
      evaluation0.sizeOfPredictedRegions();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(659.7890010080744, intArray0, 652);
      binarySparseInstance1.mergeInstance(binarySparseInstance0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 6, 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2641261759865396
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      LinkedList<DecisionStump> linkedList0 = new LinkedList<DecisionStump>();
      instances0.containsAll(linkedList0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedAreaUnderROC();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate();
      boolean boolean0 = evaluation0.m_NoPriors;
      double double1 = evaluation0.m_TotalCost;
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      
      double double2 = evaluation1.m_SumSqrClass;
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.325004538331814
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      double double0 = evaluation0.m_WithClass;
      evaluation0.weightedAreaUnderPRC();
      Double double1 = new Double(0.0);
      evaluation1.weightedFMeasure();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      MockRandom mockRandom0 = new MockRandom(394);
      HashSet<AdaBoostM1> hashSet1 = new HashSet<AdaBoostM1>();
      TestInstances testInstances0 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      double double2 = evaluation0.m_TotalCost;
      Evaluation evaluation2 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation2.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7055793529108447
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "=K>\"4");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumSqrClass;
      evaluation0.m_SumErr = Double.NaN;
      evaluation1.weightedAreaUnderPRC();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double1 = evaluation1.m_SumPriorAbsErr;
      double[] doubleArray0 = new double[5];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-52);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.weightedPrecision();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2114.8719212));
      evaluation0.m_SumPriorEntropy = (-2277.395);
      evaluation1.KBMeanInformation();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.247206844974067
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      textDirectoryLoader0.setRetrieval(539);
      textDirectoryLoader0.setOutputFilename(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(539);
      int[] intArray0 = new int[2];
      intArray0[1] = 26;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      double double0 = evaluation0.m_SumPriorAbsErr;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-156.882995), intArray0, 26);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.m_SumPriorAbsErr;
      Instances instances1 = new Instances(instances0);
      instances1.equalHeaders(instances0);
      evaluation0.precision(815);
      evaluation0.numTruePositives(9);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 26;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.4809485629541723
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Instances instances1 = new Instances(instances0, (-188));
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.enumerateMeasures();
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[8];
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier2;
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier3;
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier4;
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier5;
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier0;
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier1;
      attributeSelectedClassifierArray0[6] = attributeSelectedClassifier0;
      AttributeSelectedClassifier attributeSelectedClassifier6 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[7] = attributeSelectedClassifier6;
      instances1.toArray(attributeSelectedClassifierArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances1);
      instances1.equalHeaders(instances0);
      Attribute attribute0 = new Attribute("getCheckErrorRgate", (-188));
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.380384851979536
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      LinkedHashSet<Stacking> linkedHashSet0 = new LinkedHashSet<Stacking>();
      HashSet<Stacking> hashSet0 = new HashSet<Stacking>();
      linkedHashSet0.addAll(hashSet0);
      instances0.removeAll(linkedHashSet0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DECIMAL");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      HashSet<AdaBoostM1> hashSet1 = new HashSet<AdaBoostM1>();
      evaluation0.m_SumAbsErr = 2255.643868067;
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      AdaBoostM1 adaBoostM1_1 = new AdaBoostM1();
      adaBoostM1_1.setDebug(false);
      hashSet1.add(adaBoostM1_1);
      testInstances0.setWordSeparators("\tBinary splits (convert nominal attrbutes o binary ones)");
      double double0 = evaluation0.m_Incorrect;
      double double1 = evaluation0.weightedAreaUnderROC();
      double double2 = evaluation0.m_ClassPriorsSum;
      double double3 = evaluation0.m_SumPredicted;
      double double4 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double4, double1, 0.01);
      
      IBk iBk0 = new IBk((-1));
      iBk0.getOptions();
      evaluation0.numFalseNegatives((-1));
      double double5 = evaluation0.falsePositiveRate((-281));
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.5043105622761024
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      LinkedHashSet<Stacking> linkedHashSet0 = new LinkedHashSet<Stacking>();
      instances0.removeAll(linkedHashSet0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      instances0.enumerateInstances();
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[1] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-919.76), intArray0, (-1));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.setMissing(1);
      evaluation0.toClassDetailsString(".arff");
      evaluation0.falseNegativeRate(0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance2 = null;
      try {
        binarySparseInstance2 = new BinarySparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1982020749289486
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      IBk iBk0 = new IBk((-1));
      CSVLoader cSVLoader0 = new CSVLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      Tag[] tagArray0 = new Tag[4];
      Tag tag0 = new Tag(5, ".xml");
      tagArray0[0] = tag0;
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.setDiscardPredictions(true);
      Tag tag1 = new Tag((-3670), "@data");
      tagArray0[1] = tag1;
      Tag tag2 = new Tag((-3670), " in the dictionary!", (String) null, false);
      tagArray0[2] = tag2;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      SelectedTag selectedTag0 = wrapperSubsetEval0.getEvaluationMeasure();
      int int0 = 1;
      tag2.getRevision();
      tag2.setID(int0);
      selectedTag0.getSelectedTag();
      int int1 = 459;
      PipedReader pipedReader0 = new PipedReader(int1);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("@relation");
      attribute0.addRelation(instances0);
      Instances instances1 = new Instances(instances0, 2);
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[6];
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      textDirectoryLoader0.getDataSet();
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier1;
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier1;
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier3;
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier4;
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier5;
      instances0.toArray(attributeSelectedClassifierArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances1.equalHeaders(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 0;
      double double0 = evaluation0.weightedAreaUnderROC();
      LinkedHashSet<VotedPerceptron> linkedHashSet0 = new LinkedHashSet<VotedPerceptron>();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numInstances();
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.7995749966735852
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      instances0.containsAll(hashSet0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedFMeasure();
      MockRandom mockRandom0 = new MockRandom(394);
      HashSet<AdaBoostM1> hashSet1 = new HashSet<AdaBoostM1>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      TestInstances testInstances0 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.getClassPriors();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      regressionByDiscretization0.setEstimatorType(selectedTag0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.unweightedMacroFmeasure();
      org.evosuite.runtime.Random.setNextRandom(1);
      evaluation0.correct();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9128646770098028
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      IBk iBk0 = new IBk();
      iBk0.getOptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.3, (int[]) null, 116);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation0.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.126088659982384
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      evaluation1.weightedRecall();
      evaluation1.weightedAreaUnderPRC();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setSeed((-2));
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.matthewsCorrelationCoefficient(71);
      textDirectoryLoader0.getOptions();
      costSensitiveClassifier0.toString();
      evaluation1.toCumulativeMarginDistributionString();
      evaluation0.getHeader();
      evaluation0.precision(2);
      double double0 = (-1.0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.134631643813234
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 15.0;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3099760230105293
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      boolean boolean0 = true;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3460.418;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-919.665804807803), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.171218111933964
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      IBk iBk0 = new IBk((-1));
      CSVLoader cSVLoader0 = new CSVLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedAreaUnderPRC();
      IBk iBk1 = new IBk();
      iBk1.getOptions();
      int[] intArray0 = new int[5];
      intArray0[1] = 21;
      intArray0[2] = 2;
      intArray0[3] = 2;
      Cobweb cobweb0 = new Cobweb();
      Capabilities capabilities0 = cobweb0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      double double0 = evaluation0.m_TotalCost;
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.4531966490993375
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.m_MinTarget;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)15;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AllFilter allFilter0 = new AllFilter();
      double double1 = evaluation0.m_SumSqrClass;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.matthewsCorrelationCoefficient(3617);
      try { 
        evaluation0.setPriors(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7500165734978617
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      AllFilter allFilter0 = new AllFilter();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      AdaBoostM1 adaBoostM1_1 = new AdaBoostM1();
      hashSet0.add(adaBoostM1_1);
      boolean boolean0 = evaluation1.m_CoverageStatisticsAvailable;
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation1.m_ClassPriorsSum;
      double double3 = evaluation1.weightedFMeasure();
      IBk iBk0 = new IBk(1);
      iBk0.getOptions();
      double double4 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double4, double3, 0.01);
      
      evaluation0.truePositiveRate(5);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double5 = evaluation1.weightedTruePositiveRate();
      assertEquals(double5, double0, 0.01);
      
      double double6 = evaluation0.weightedPrecision();
      assertEquals(double6, double3, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.1794706398561163
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      instances0.containsAll(hashSet0);
      evaluation1.weightedRecall();
      evaluation1.weightedAreaUnderPRC();
      evaluation1.weightedAreaUnderROC();
      evaluation0.meanAbsoluteError();
      evaluation1.weightedFMeasure();
      evaluation1.makeDistribution(Double.NaN);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      evaluation0.weightedPrecision();
      evaluation1.trueNegativeRate(1);
      evaluation1.confusionMatrix();
      evaluation0.numFalseNegatives(1134);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.4579060243395086
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toMatrixString(" ");
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      instances0.containsAll(hashSet0);
      evaluation0.weightedRecall();
      testInstances0.setWordSeparators((String) null);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedAreaUnderROC();
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.weightedFMeasure();
      evaluation0.makeDistribution(0.3183098861837907);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-4567.0), (int[]) null, (-1));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.setSeed(20);
      evaluation0.weightedPrecision();
      evaluation0.trueNegativeRate(1);
      evaluation0.confusionMatrix();
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.globalInfo();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-4567.0), (int[]) null, (-3443));
      assertEquals((-3443), binarySparseInstance1.numAttributes());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.704894589281409
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.makeOptionString((Classifier) null, true);
      double double0 = evaluation1.m_SumSqrClass;
      evaluation1.weightedAreaUnderPRC();
      double double1 = evaluation1.m_SumPriorAbsErr;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.weightedPrecision();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      additiveRegression0.getCapabilities();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      evaluation1.kappa();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      try { 
        evaluation1.evaluateModel((Classifier) costSensitiveClassifier2, instances0, (Object[]) costSensitiveClassifier1.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Instances instances1 = new Instances(instances0, (-188));
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.enumerateMeasures();
      attributeSelectedClassifier1.buildClassifier(instances0);
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[8];
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier2;
      attributeSelectedClassifier2.enumerateMeasures();
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier3;
      FileSystemHandling.shouldAllThrowIOExceptions();
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier4;
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier2;
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier0;
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier1;
      attributeSelectedClassifierArray0[6] = attributeSelectedClassifier0;
      int[] intArray0 = new int[5];
      intArray0[0] = (-188);
      intArray0[1] = (-2);
      intArray0[2] = (-1374);
      intArray0[3] = (-2);
      intArray0[4] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-919.665804807803), intArray0, (-1141));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.748040951319486
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toMatrixString(" ");
      evaluation0.weightedAreaUnderROC();
      AllFilter allFilter0 = new AllFilter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrixSource();
      int int0 = (-3153);
      costSensitiveClassifier0.setSeed(testInstances0.CLASS_IS_LAST);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.matthewsCorrelationCoefficient(int0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getOptions();
      costSensitiveClassifier0.toString();
      costSensitiveClassifier0.toString();
      evaluation0.getHeader();
      evaluation0.precision(costSensitiveClassifier0.MATRIX_ON_DEMAND);
      String string0 = "bP$-";
      try { 
        CostMatrix.parseMatlab(string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9249021811671243
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Instances instances1 = new Instances(instances0, (-213));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[8];
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier1;
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier2;
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier3;
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier4;
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier0;
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[7] = attributeSelectedClassifier5;
      instances1.toArray(attributeSelectedClassifierArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.kappa();
      // Undeclared exception!
      try { 
        evaluation0.precision((-213));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -213
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.7482346786242497
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("|G4(//vedClBF}Qz.o");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation1.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      instances0.containsAll(hashSet0);
      evaluation1.weightedAreaUnderPRC();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrixSource();
      int int0 = (-2);
      int int1 = (-3153);
      costSensitiveClassifier0.setSeed(int1);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.matthewsCorrelationCoefficient(int0);
      textDirectoryLoader0.getOptions();
      costSensitiveClassifier0.toString();
      evaluation0.getHeader();
      String string0 = "setKNN";
      try { 
        CostMatrix.parseMatlab(string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.989071492306497
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      LinkedHashSet<Stacking> linkedHashSet0 = new LinkedHashSet<Stacking>();
      instances0.removeAll(linkedHashSet0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      AdaBoostM1 adaBoostM1_1 = new AdaBoostM1();
      hashSet0.add(adaBoostM1_1);
      instances0.containsAll(linkedHashSet0);
      evaluation0.weightedRecall();
      testInstances0.setWordSeparators("\tBinary splits (convert nominal attributes to binary ones)");
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedAreaUnderROC();
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.weightedFMeasure();
      evaluation0.weightedAreaUnderPRC();
      IBk iBk0 = new IBk((-1));
      iBk0.getOptions();
      evaluation0.weightedTrueNegativeRate();
      int int0 = 5;
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.3424420559546864
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Instances instances1 = new Instances(instances0, (-188));
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier6 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier7 = new AttributeSelectedClassifier();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedAreaUnderROC();
      LinkedHashSet<VotedPerceptron> linkedHashSet0 = new LinkedHashSet<VotedPerceptron>();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.weightedFalseNegativeRate();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 66;
      intArray0[2] = (-188);
      intArray0[3] = (-619);
      intArray0[4] = (-619);
      intArray0[5] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-188), intArray0, 1406);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1080), (char[]) null, 1811);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.075027082389641
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WOakKO:8hlLRk;1g_*");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(" ");
      evaluation0.weightedAreaUnderROC();
      AllFilter allFilter0 = new AllFilter();
      boolean boolean0 = evaluation0.m_NoPriors;
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = 'A';
      charArray0[2] = 'N';
      charArray0[3] = '-';
      charArray0[4] = 'Q';
      evaluation0.num2ShortID(15, charArray0, 473);
      Instance instance0 = null;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      try { 
        inputMappedClassifier0.constructMappedInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.970016319282805
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      LinkedHashSet<AdaBoostM1> linkedHashSet0 = new LinkedHashSet<AdaBoostM1>();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      linkedHashSet0.add(adaBoostM1_0);
      AdaBoostM1 adaBoostM1_1 = new AdaBoostM1();
      AbstractClassifier.makeCopies(adaBoostM1_0, 2266);
      linkedHashSet0.add(adaBoostM1_1);
      instances0.containsAll(linkedHashSet0);
      double double1 = evaluation0.m_SumPredicted;
      double double2 = evaluation0.m_MaxTarget;
      evaluation0.weightedAreaUnderROC();
      double double3 = evaluation0.meanAbsoluteError();
      evaluation0.weightedFMeasure();
      double double4 = evaluation0.SFMeanEntropyGain();
      assertEquals(double4, double0, 0.01);
      
      evaluation0.weightedAreaUnderPRC();
      evaluation0.getClassPriors();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.unweightedMacroFmeasure();
      org.evosuite.runtime.Random.setNextRandom(97);
      double double5 = evaluation0.pctCorrect();
      assertEquals(double5, double3, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.8777786036184687
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      double double0 = evaluation1.weightedMatthewsCorrelation();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.m_SumSqrClass;
      double double2 = evaluation2.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double2, 0.01);
      
      textDirectoryLoader0.getDataSet();
      double double3 = evaluation0.matthewsCorrelationCoefficient(26);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      evaluation1.setPriors(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 26;
      doubleArray0[2] = (double) 26;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.7976931348623157E308), doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 6;
      intArray0[1] = 2406;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1892.3754228955), intArray0, 2406);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.errorRate();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-156.882995), intArray0, 26);
      double double4 = evaluation1.weightedAreaUnderROC();
      assertNotEquals(double4, double3, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.5832186802982138
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      AllFilter allFilter0 = new AllFilter();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      evaluation0.getDiscardPredictions();
      evaluation0.weightedRecall();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.matthewsCorrelationCoefficient((-8));
      evaluation0.KBRelativeInformation();
      evaluation0.setNumericPriorsFromBuffer();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.equals(inputMappedClassifier0);
      evaluation0.weightedFMeasure();
      evaluation0.weightedAreaUnderROC();
      evaluation0.avgCost();
      evaluation0.toSummaryString(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, 3);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.setMissing(1);
      binarySparseInstance1.toString((-34));
      evaluation0.falseNegativeRate(1);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance1, 363.9714769487);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.4647911061862717
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      double double0 = evaluation1.weightedMatthewsCorrelation();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".bsi";
      Instances.test(stringArray0);
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      instances0.containsAll(hashSet0);
      double double1 = evaluation0.m_TotalCost;
      double double2 = evaluation0.weightedAreaUnderPRC();
      double double3 = evaluation1.weightedAreaUnderROC();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation1.weightedFMeasure();
      assertEquals(double4, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 394;
      doubleArray0[4] = (-919.7580031174523);
      doubleArray0[5] = (double) 394;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 394;
      Tag[] tagArray0 = new Tag[1];
      Tag tag0 = new Tag(478, "gxW:XT0y;mr");
      tagArray0[0] = tag0;
      Tag.toOptionSynopsis(tagArray0);
      IBk iBk0 = new IBk(394);
      iBk0.getOptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      evaluation0.toMatrixString("ee.[jSc$;:u)u");
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.7165654449290018
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedAreaUnderPRC();
      evaluation1.weightedAreaUnderROC();
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation1.weightedFMeasure();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1141);
      intArray0[1] = (-1141);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.07500000298023224, intArray0, (-1094));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.unweightedMacroFmeasure();
      evaluation0.weightedFalseNegativeRate();
      System.setCurrentTimeMillis((-3558L));
      evaluation2.pctIncorrect();
      org.evosuite.runtime.Random.setNextRandom(84);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/yC4\\$n");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "main");
      int int0 = 1177;
      try { 
        Evaluation.handleCostOption("/yC4$n", 1177);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-935), (char[]) null, (-935));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.619085894695714
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation1.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_TotalCost;
      evaluation0.weightedAreaUnderPRC();
      evaluation1.weightedAreaUnderROC();
      evaluation1.weightedFMeasure();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@relation");
      MockRandom mockRandom0 = new MockRandom(394);
      int int0 = 17;
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      TestInstances testInstances0 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      TestInstances.forCapabilities(capabilities0);
      SparseInstance sparseInstance0 = new SparseInstance(17, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) additiveRegression0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.1077630153683318
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Instances instances1 = new Instances(instances0, (-188));
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.enumerateMeasures();
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[8];
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier2;
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier3;
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier4;
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier5;
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier0;
      AbstractClassifier.makeCopies(attributeSelectedClassifier5, 3);
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier1;
      attributeSelectedClassifierArray0[6] = attributeSelectedClassifier0;
      AttributeSelectedClassifier attributeSelectedClassifier6 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[7] = attributeSelectedClassifier6;
      instances1.toArray(attributeSelectedClassifierArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MockRandom mockRandom0 = new MockRandom((-2161L));
      instances0.randomize(mockRandom0);
      AbstractClassifier.makeCopy(attributeSelectedClassifier4);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances1);
      instances1.equalHeaders(instances0);
      Attribute attribute0 = new Attribute("getCheckErrorRgate", (-188));
      try { 
        evaluation0.evaluateModel((Classifier) attributeSelectedClassifier0, instances0, (Object[]) attributeSelectedClassifierArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.515995064350368
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      double double0 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".bsi";
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      instances0.containsAll(hashSet0);
      double double1 = evaluation0.m_TotalCost;
      double double2 = evaluation0.weightedAreaUnderPRC();
      double double3 = evaluation1.weightedAreaUnderROC();
      double double4 = evaluation1.weightedFMeasure();
      assertEquals(double4, double2, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      double double5 = evaluation0.falseNegativeRate((-723));
      assertNotEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.966472477862128
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getMinNo");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances1.forEach(consumer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AllFilter allFilter0 = new AllFilter();
      double double0 = evaluation0.m_SumSqrClass;
      evaluation0.weightedPrecision();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      PipedReader pipedReader0 = new PipedReader(121);
      try { 
        pipedReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.9522914293192217
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation1.weightedMatthewsCorrelation();
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = ".bsi";
      Instances.test(stringArray0);
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      instances0.containsAll(hashSet0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.weightedAreaUnderPRC();
      evaluation1.weightedAreaUnderROC();
      evaluation1.weightedFMeasure();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 394;
      evaluation0.matthewsCorrelationCoefficient(676);
      evaluation0.setPriors(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2243.279174), doubleArray0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.469607282976206
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumSqrClass;
      evaluation1.weightedAreaUnderPRC();
      double double1 = evaluation1.m_SumPriorAbsErr;
      double[] doubleArray0 = new double[5];
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.weightedPrecision();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2114.8719212));
      evaluation0.m_SumPriorEntropy = (-2277.395);
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("@relation");
      attribute0.addRelation(instances0);
      Instances instances1 = new Instances(instances0, 2);
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[6];
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier1;
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier1;
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier3;
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier4;
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier5;
      instances0.toArray(attributeSelectedClassifierArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances1.equalHeaders(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 0;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.4922963932744846
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation1.weightedMatthewsCorrelation();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".bsi";
      Instances.test(stringArray0);
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      instances0.containsAll(hashSet0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.weightedAreaUnderPRC();
      evaluation1.weightedAreaUnderROC();
      evaluation1.weightedFMeasure();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      int int0 = 2156;
      // Undeclared exception!
      try { 
        evaluation1.updateMargins(doubleArray0, 2156, (-919.7580031174523));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2156
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.171836029096047
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation1.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      instances0.containsAll(hashSet0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation1.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation1.weightedFMeasure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setSeed((-2));
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      double double3 = evaluation1.matthewsCorrelationCoefficient(1);
      assertNotEquals(double3, double2, 0.01);
      
      textDirectoryLoader0.getOptions();
      costSensitiveClassifier0.toString();
      evaluation1.getHeader();
      evaluation0.precision(1);
      int[] intArray0 = new int[6];
      intArray0[0] = 11;
      intArray0[1] = 11;
      intArray0[2] = 1;
      intArray0[3] = 11;
      intArray0[4] = 11;
      intArray0[5] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4.6, intArray0, 394);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      double double4 = evaluation0.recall(11);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.7921438247851262
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.m_SumSqrClass;
      double double2 = evaluation1.weightedAreaUnderPRC();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation1.m_SumPriorAbsErr;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.weightedTruePositiveRate();
      double double4 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double4, 0.01);
      
      evaluation0.areaUnderROC((-1176));
      double double5 = evaluation1.meanPriorAbsoluteError();
      assertEquals(double5, double0, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.9995255626558264
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = (-919.7580031174523);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumRelationalString((-2275));
      String string0 = evaluation0.toSummaryString(true);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.9133167498015595
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation1.weightedMatthewsCorrelation();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".bsi";
      Instances.test(stringArray0);
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      instances0.containsAll(hashSet0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.weightedAreaUnderPRC();
      evaluation1.weightedFMeasure();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      evaluation0.avgCost();
      evaluation0.toSummaryString(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-364.662178057), intArray0, 0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.setMissing(0);
      binarySparseInstance1.toString(2);
      evaluation0.falseNegativeRate(293);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance1, 68.13045201487);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.7198739643665535
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getDiscardPredictions();
      AllFilter allFilter0 = new AllFilter();
      evaluation1.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      instances0.containsAll(hashSet0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.weightedAreaUnderPRC();
      evaluation1.weightedAreaUnderROC();
      evaluation1.weightedFMeasure();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      MockRandom mockRandom0 = new MockRandom(394);
      HashSet<AdaBoostM1> hashSet1 = new HashSet<AdaBoostM1>();
      TestInstances testInstances0 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      IBk iBk0 = new IBk(Integer.MAX_VALUE);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation1.m_MinTarget;
      evaluation1.weightedPrecision();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.getClassPriors();
      System.setCurrentTimeMillis(5);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.7638558576407304
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setRetrieval((-1707));
      instances0.lastIndexOf(textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      hashSet0.add(adaBoostM1_0);
      instances0.containsAll(hashSet0);
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.matthewsCorrelationCoefficient(400);
      evaluation0.setPriors(instances0);
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, (String) null);
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "Standardizes all numeric attributes in the given dataset to have zero mean and unit variance (apart from the class attribute, if set).");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.592965132436166
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      hashSet0.stream();
      instances0.containsAll(hashSet0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedFMeasure();
      MockRandom mockRandom0 = new MockRandom(394);
      HashSet<AdaBoostM1> hashSet1 = new HashSet<AdaBoostM1>();
      TestInstances testInstances0 = new TestInstances();
      HashSet<AdaBoostM1> hashSet2 = new HashSet<AdaBoostM1>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("O3t&VhIY7h");
      findWithCapabilities0.getNotCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      evaluation0.getRevision();
      evaluation0.SFSchemeEntropy();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.0841329700201925
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Instances instances1 = new Instances(instances0, (-188));
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.enumerateMeasures();
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[8];
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier2;
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier3;
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier4;
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier5;
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier0;
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier1;
      attributeSelectedClassifierArray0[6] = attributeSelectedClassifier0;
      AttributeSelectedClassifier attributeSelectedClassifier6 = new AttributeSelectedClassifier();
      AbstractClassifier.runClassifier(attributeSelectedClassifier6, testInstances0.DEFAULT_WORDS);
      attributeSelectedClassifierArray0[7] = attributeSelectedClassifier6;
      instances1.toArray(attributeSelectedClassifierArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.kappa();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance(instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      MockRandom mockRandom0 = new MockRandom(394);
      HashSet<AdaBoostM1> hashSet1 = new HashSet<AdaBoostM1>();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.5850326244699575
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = new Instances(instances0, (-188));
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.enumerateMeasures();
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[8];
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier2;
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier3;
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier1;
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier2;
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier0;
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier1;
      attributeSelectedClassifierArray0[6] = attributeSelectedClassifier0;
      int[] intArray0 = new int[5];
      intArray0[0] = (-188);
      intArray0[1] = (-2);
      instances1.equalHeaders(instances0);
      Integer integer0 = new Integer(1198);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.priorEntropy();
      assertEquals(1.0, double0, 0.01);
      
      evaluation0.areaUnderPRC(80);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.SFPriorEntropy();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.8501349548823627
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      IBk iBk0 = new IBk((-1));
      CSVLoader cSVLoader0 = new CSVLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      Tag tag0 = new Tag(2, "t\"'hNp*O@[G9*.");
      Tag tag1 = new Tag(493, ".arff");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      MockRandom mockRandom0 = new MockRandom();
      iBk0.getTechnicalInformation();
      double double0 = evaluation0.m_SumSqrPredicted;
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.matthewsCorrelationCoefficient(1);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.unclassified();
      assertEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.515995064350368
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      instances0.add((Instance) sparseInstance0);
      AllFilter allFilter0 = new AllFilter();
      evaluation1.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_TotalCost;
      textDirectoryLoader0.setDebug(true);
      evaluation0.weightedAreaUnderPRC();
      evaluation1.weightedAreaUnderROC();
      evaluation1.weightedFMeasure();
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution((-10.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -10
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.5089130387241934
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      instances0.enumerateInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassPriorsSum = (double) (-1);
      evaluation0.numFalseNegatives((-1));
      CSVLoader cSVLoader0 = new CSVLoader();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.buildClassifier(instances0);
      String string0 = decisionTable0.printFeatures();
      assertEquals("1,2", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.4649816651854914
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AllFilter allFilter0 = new AllFilter();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getDiscardPredictions();
      evaluation0.weightedRecall();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.matthewsCorrelationCoefficient(123);
      evaluation0.KBRelativeInformation();
      evaluation0.setNumericPriorsFromBuffer();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.equals(inputMappedClassifier0);
      evaluation0.weightedFMeasure();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.weightedAreaUnderROC();
      evaluation0.toSummaryString(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1789.065457131, (int[]) null, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(6, doubleArray0, (int[]) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.9315257999231625
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      LinkedHashSet<Stacking> linkedHashSet0 = new LinkedHashSet<Stacking>();
      instances0.removeAll(linkedHashSet0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      hashSet0.add(adaBoostM1_0);
      instances0.containsAll(linkedHashSet0);
      double double0 = evaluation0.weightedRecall();
      testInstances0.setWordSeparators("\tBinary splits (convert nominal attributes to binary ones)");
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.m_ClassPriorsSum;
      evaluation0.weightedFMeasure();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double2, 0.01);
      
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      additiveRegression0.getCapabilities();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate();
      boolean boolean0 = evaluation0.m_NoPriors;
      assertFalse(boolean0);
      
      double double3 = evaluation0.m_TotalCost;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double4 = evaluation0.weightedAreaUnderROC();
      assertEquals(double4, double0, 0.01);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(385.123213727, (int[]) null, (-1));
      evaluation1.equals((Object) null);
      assertEquals(Double.NaN, evaluation1.weightedRecall(), 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.013073141098092
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.weightedMatthewsCorrelation();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier6 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier7 = new AttributeSelectedClassifier();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderROC();
      LinkedHashSet<VotedPerceptron> linkedHashSet0 = new LinkedHashSet<VotedPerceptron>();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation1.getClassPriors();
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.5743631318055766
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      IBk iBk0 = new IBk((-1));
      CSVLoader cSVLoader0 = new CSVLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      Tag[] tagArray0 = new Tag[4];
      Tag tag0 = new Tag(5, ".xml");
      tagArray0[0] = tag0;
      Tag tag1 = new Tag((-3670), "@data");
      tagArray0[1] = tag1;
      Tag tag2 = new Tag((-3670), " in the dictionary!", (String) null, false);
      tagArray0[2] = tag2;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      SelectedTag selectedTag0 = wrapperSubsetEval0.getEvaluationMeasure();
      int int0 = 1;
      tag2.setID(int0);
      Tag tag3 = selectedTag0.getSelectedTag();
      tagArray0[3] = tag3;
      SelectedTag selectedTag1 = new SelectedTag(instances0.ARFF_DATA, tagArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setCostMatrixSource(selectedTag0);
      int int1 = (-2677);
      double double1 = evaluation0.fMeasure(int1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.595471398100327
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      AllFilter allFilter0 = new AllFilter();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedMatthewsCorrelation();
      LinkedHashSet<AdaBoostM1> linkedHashSet0 = new LinkedHashSet<AdaBoostM1>();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      linkedHashSet0.add(adaBoostM1_0);
      instances0.containsAll(linkedHashSet0);
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.m_SumKBInfo;
      evaluation0.weightedFMeasure();
      double double2 = new Double(0.0);
      Version.MINOR = (-1461032992);
      double double3 = evaluation0.m_TotalCost;
      evaluation0.getClassPriors();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, (-1461032992));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("jId");
      Instances instances1 = new Instances(instances0, (-188));
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.enumerateMeasures();
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[8];
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier2;
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier3;
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier4;
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier5;
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier0;
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier1;
      attributeSelectedClassifierArray0[6] = attributeSelectedClassifier0;
      AttributeSelectedClassifier attributeSelectedClassifier6 = new AttributeSelectedClassifier();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.092883882347058
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.toSummaryString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.9280478396261032
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.toSummaryString("N", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.1458709982693738
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("@relation");
      attribute0.addRelation(instances0);
      Instances instances1 = new Instances(instances0, 2);
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[6];
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier1;
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier1;
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier3;
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier4;
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier5;
      instances0.toArray(attributeSelectedClassifierArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances1.equalHeaders(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 0;
      evaluation0.priorEntropy();
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.addNumericTrainClass(1, 3);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.4922963932744846
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      evaluation1.weightedMatthewsCorrelation();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".bsi";
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      instances0.containsAll(hashSet0);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.weightedAreaUnderPRC();
      evaluation1.weightedAreaUnderROC();
      evaluation1.weightedFMeasure();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      MockRandom mockRandom0 = new MockRandom(374);
      try { 
        evaluation1.crossValidateModel("_G", instances0, (-1434), stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: _G
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.9799151714181009
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "X0c8E)";
      stringArray0[1] = "getRevision";
      stringArray0[2] = "setReset";
      stringArray0[3] = "weka.classifiers.functions.SGDText";
      stringArray0[4] = "\tPreserves the order in the percentage split.\n";
      stringArray0[5] = "\tfrom the XML file.\n";
      stringArray0[6] = "distributionForInstance";
      stringArray0[7] = "n";
      stringArray0[8] = ".xml";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.2749372581977159
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      CostSensitiveClassifier.main(stringArray0);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureBDeuScore();
      bayesNet1.getMeasure("distributionForInstance");
      DecisionTable decisionTable0 = new DecisionTable();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominal(5);
      // Undeclared exception!
      try { 
        decisionTable0.printFeatures();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.DecisionTable", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.913737189449991
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashSet<AdaBoostM1> hashSet0 = new HashSet<AdaBoostM1>();
      TestInstances testInstances0 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      additiveRegression0.toString();
      additiveRegression0.setNumIterations((-1));
      additiveRegression0.setDebug(true);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.numTrueNegatives((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.8476047989039177
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("@relation");
      attribute0.addRelation(instances0);
      Instances instances1 = new Instances(instances0, 2);
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[6];
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier1;
      AttributeSelectedClassifier attributeSelectedClassifier2 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[2] = attributeSelectedClassifier2;
      AttributeSelectedClassifier attributeSelectedClassifier3 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[3] = attributeSelectedClassifier3;
      AttributeSelectedClassifier attributeSelectedClassifier4 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[4] = attributeSelectedClassifier4;
      AttributeSelectedClassifier attributeSelectedClassifier5 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[5] = attributeSelectedClassifier5;
      instances0.toArray(attributeSelectedClassifierArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances1.equalHeaders(instances0);
      attribute0.copy();
      evaluation0.toClassDetailsString(".bsi");
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\n=== Predictions on test data ===\n\n";
      stringArray0[1] = "measureSelectionTime";
      try { 
        Evaluation.evaluateModel("\n=== Predictions on test data ===\n\n", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name 
         // === Predictions on test data ===
         // 
         // .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("@relation");
      attribute0.addRelation(instances0);
      Instances instances1 = new Instances(instances0, 2);
      AttributeSelectedClassifier[] attributeSelectedClassifierArray0 = new AttributeSelectedClassifier[6];
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[0] = attributeSelectedClassifier0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      attributeSelectedClassifierArray0[1] = attributeSelectedClassifier1;
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 25);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", (-1));
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      int int0 = 46;
      try { 
        Evaluation.handleCostOption("vW5dXVr%A8[Mh.)C", 46);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("em_EtzK>[", arrayList0, 5);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BayesNet bayesNet0 = new BayesNet();
      CostMatrix costMatrix0 = new CostMatrix(46);
      int[] intArray0 = new int[6];
      intArray0[1] = 18;
      intArray0[2] = (-3);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1846926013);
      intArray0[1] = 10;
      intArray0[2] = 115;
      intArray0[3] = (-206797271);
      intArray0[4] = 2073;
      intArray0[5] = 658;
      int int0 = (-992);
      intArray0[6] = (-992);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.3, intArray0, (-992));
      binarySparseInstance0.dataset();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinearRegression[] linearRegressionArray0 = new LinearRegression[8];
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      linearRegressionArray0[0] = linearRegression0;
      LinearRegression linearRegression1 = new LinearRegression();
      linearRegressionArray0[1] = linearRegression1;
      LinearRegression linearRegression2 = new LinearRegression();
      linearRegressionArray0[2] = linearRegression2;
      LinearRegression linearRegression3 = new LinearRegression();
      linearRegressionArray0[3] = linearRegression3;
      LinearRegression linearRegression4 = new LinearRegression();
      linearRegressionArray0[4] = linearRegression4;
      LinearRegression linearRegression5 = new LinearRegression();
      linearRegressionArray0[5] = linearRegression5;
      LinearRegression linearRegression6 = new LinearRegression();
      linearRegressionArray0[6] = linearRegression6;
      LinearRegression linearRegression7 = new LinearRegression();
      linearRegressionArray0[7] = linearRegression7;
      instances0.toArray(linearRegressionArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
