/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 12:11:42 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setBins((-2134776641));
      discretize0.globalInfo();
      discretize0.makeBinaryTipText();
      discretize0.getBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2134776641));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4879215243073594
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      Locale.getISOLanguages();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ListIterator<Attribute> listIterator0 = arrayList0.listIterator();
      Instances instances0 = new Instances(")6Gg<d)5z{Xap~@r9hL", arrayList0, 519);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("-V", protectedProperties0);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      attribute0.equalsMsg(protectedProperties0);
      properties0.put(attribute0, listIterator0);
      discretize0.getBinRangesString(2);
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      PipedInputStream pipedInputStream0 = new PipedInputStream(400);
      attribute0.equalsMsg(pipedInputStream0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '-V' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.240212440623591
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 3131;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      discretize0.getCutPoints(3131);
      discretize0.getOptions();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.listIterator();
      Instances instances0 = new Instances("Randomized dataset:", arrayList1, 23);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@relation", protectedProperties0);
      arrayList1.add(attribute0);
      arrayList1.ensureCapacity(4);
      discretize0.getBinRangesString(519);
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.FRANCE;
      discretize0.setMakeBinary(false);
      locale0.getDisplayScript(locale1);
      Locale locale2 = Locale.ITALIAN;
      Locale locale3 = Locale.CHINA;
      discretize0.setInputFormat(instances0);
      MockFile mockFile0 = new MockFile("date", "relational");
      discretize0.findNumBinsTipText();
      arrayList1.add(attribute0);
      instances0.delete();
      discretize0.setOutputFormat();
      discretize0.makeBinaryTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.155323700044662
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(3131);
      Locale.getISOCountries();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      Instances instances0 = new Instances(")6g<d)5z{X~49hL", arrayList0, 23);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@relation", protectedProperties0);
      arrayList0.add(attribute0);
      discretize0.getBinRangesString(519);
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.PRC;
      locale0.getDisplayScript(locale1);
      Locale locale2 = Locale.ENGLISH;
      Locale locale3 = Locale.CHINA;
      locale2.getUnicodeLocaleAttributes();
      locale3.getScript();
      locale0.getDisplayLanguage();
      Locale locale4 = Locale.CHINA;
      locale1.getUnicodeLocaleAttributes();
      locale2.getUnicodeLocaleAttributes();
      Locale locale5 = Locale.GERMANY;
      locale3.getDisplayLanguage(locale1);
      Locale locale6 = Locale.UK;
      Locale locale7 = Locale.SIMPLIFIED_CHINESE;
      Locale locale8 = Locale.CHINESE;
      locale0.getUnicodeLocaleAttributes();
      Locale locale9 = Locale.ITALIAN;
      discretize0.batchFinished();
      String string0 = discretize0.getBinRangesString(0);
      assertEquals("All", string0);
      
      discretize0.listOptions();
      int[] intArray0 = new int[9];
      intArray0[2] = 0;
      intArray0[6] = 23;
      intArray0[4] = 2;
      intArray0[5] = 3;
      intArray0[6] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23, intArray0, 0);
      discretize0.convertInstance(binarySparseInstance0);
      assertTrue(discretize0.isNewBatch());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1668122751309116
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(3131);
      discretize0.getOptions();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.listIterator();
      Instances instances0 = new Instances(")6Gg<d)5z{Xap~49hL", arrayList1, 23);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@relation", protectedProperties0);
      arrayList1.add(attribute0);
      discretize0.getBinRangesString(519);
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.UK;
      locale0.getDisplayScript(locale1);
      Locale locale2 = Locale.ENGLISH;
      Locale locale3 = Locale.CHINA;
      locale2.getUnicodeLocaleAttributes();
      locale3.getScript();
      locale0.getDisplayLanguage();
      Locale locale4 = Locale.CHINA;
      locale1.getUnicodeLocaleAttributes();
      Locale locale5 = Locale.GERMANY;
      locale3.getDisplayLanguage(locale1);
      Locale locale6 = Locale.UK;
      Locale locale7 = Locale.SIMPLIFIED_CHINESE;
      Locale locale8 = Locale.ITALIAN;
      locale0.getUnicodeLocaleAttributes();
      Locale locale9 = Locale.ITALIAN;
      discretize0.batchFinished();
      discretize0.getBinRangesString(0);
      discretize0.listOptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1521);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1521
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.428398627602782
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      Locale.getISOCountries();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")6Gg<d)5z{Xap~@r9hL", arrayList0, 519);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@relation", 30);
      instances0.deleteWithMissing(attribute0);
      Attribute attribute1 = new Attribute("a", protectedProperties0);
      arrayList0.add(attribute1);
      arrayList0.add(attribute1);
      attribute1.equalsMsg(protectedProperties0);
      arrayList0.add(attribute1);
      Attribute attribute2 = new Attribute("string");
      discretize0.getBinRangesString(2);
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      discretize0.getBinRangesString(2);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'a' 'a' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.635337370766229
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("*ds\b", arrayList0, 2);
      StringTokenizer stringTokenizer0 = new StringTokenizer("@relation");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@relation", protectedProperties0);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("{v;ViX*H>o[8/Q");
      discretize0.getBinRangesString(3);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      discretize0.findNumBinsTipText();
      discretize1.setOutputFormat();
      discretize1.setFindNumBins(true);
      discretize1.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize1.findNumBins(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.56825281349035
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(10);
      Locale.getISOCountries();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ListIterator<Attribute> listIterator0 = arrayList0.listIterator();
      Instances instances0 = new Instances(")6Gg<d)5z{Xap~@r9hL", arrayList0, 519);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("a", protectedProperties0);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      instances0.add((Instance) binarySparseInstance0);
      attribute0.equalsMsg(protectedProperties0);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("string");
      properties0.put(attribute1, listIterator0);
      binarySparseInstance0.toString((-1933));
      discretize0.getBinRangesString(2);
      discretize0.getBinRangesString(2);
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      discretize0.findNumBins(1);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize("B");
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-0.1);
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-0.1);
      doubleArray2[1] = 6.7;
      doubleArray2[2] = (-0.1);
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (-1.7976931348623157E308);
      doubleArray2[5] = (-0.1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 6.7;
      doubleArray3[1] = (-1.7976931348623157E308);
      doubleArray3[2] = (-0.1);
      doubleArray3[3] = (-1.7976931348623157E308);
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 1.0;
      doubleArray3[6] = (-0.1);
      doubleArray3[7] = (-1.7976931348623157E308);
      doubleArray3[8] = (-0.1);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1094.197513492;
      doubleArray4[2] = (-1.7976931348623157E308);
      doubleArray4[3] = 6.7;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = (-1.7976931348623157E308);
      doubleArray5[2] = 6.7;
      doubleArray5[3] = 1094.197513492;
      doubleArray5[4] = 1094.197513492;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (-0.1);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (-1.7976931348623157E308);
      doubleArray8[1] = 1.0;
      doubleArray8[2] = 1094.197513492;
      doubleArray8[3] = 1.0;
      doubleArray8[4] = (-0.1);
      doubleArray8[5] = 1.0;
      doubleArray8[6] = 6.7;
      doubleArray8[7] = (-0.1);
      doubleArray8[8] = (-968.2685925);
      doubleArray0[7] = doubleArray8;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5883945557938897
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      Locale.getISOCountries();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")6Gg<d)5z{Xap~@r9hL", arrayList0, 519);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@relation");
      attribute0.addRelation(instances0);
      instances0.deleteWithMissing(attribute0);
      Attribute attribute1 = new Attribute("a", protectedProperties0);
      arrayList0.add(attribute1);
      arrayList0.add(attribute1);
      attribute1.equalsMsg(protectedProperties0);
      arrayList0.add(attribute1);
      Attribute attribute2 = new Attribute("string");
      discretize0.getBinRangesString(2);
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0419063484000435
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")6Gg<d)5z{Xap~49hL", arrayList0, 23);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@relation", protectedProperties0);
      arrayList0.add(attribute0);
      discretize0.getBinRangesString(519);
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale0.getDisplayScript(locale1);
      Locale locale2 = Locale.ENGLISH;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) null, locale_FilteringMode0);
      Locale.lookupTag(arrayList1, list0);
      Locale locale3 = Locale.ENGLISH;
      Locale locale4 = Locale.CHINA;
      locale1.getUnicodeLocaleAttributes();
      locale0.getScript();
      locale3.getDisplayLanguage();
      Locale locale5 = Locale.CHINESE;
      locale3.getUnicodeLocaleKeys();
      Locale locale6 = Locale.GERMANY;
      locale1.getDisplayLanguage(locale2);
      Locale locale7 = Locale.ITALY;
      Locale locale8 = Locale.CHINESE;
      Locale locale9 = Locale.KOREA;
      locale8.getUnicodeLocaleAttributes();
      Locale locale10 = Locale.ITALIAN;
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0786235855168136
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(3131);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")6Gg<d)5z{Xap~49hL", arrayList0, 23);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@relation", protectedProperties0);
      arrayList0.add(attribute0);
      discretize0.getBinRangesString(519);
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale0.getDisplayScript(locale1);
      Locale locale2 = Locale.ENGLISH;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) null, locale_FilteringMode0);
      Locale.lookupTag(arrayList1, list0);
      Locale locale3 = Locale.ENGLISH;
      Locale locale4 = Locale.CHINA;
      locale1.getUnicodeLocaleAttributes();
      locale0.getScript();
      locale3.getDisplayLanguage();
      Locale locale5 = Locale.CHINESE;
      locale3.getUnicodeLocaleKeys();
      Locale locale6 = Locale.GERMANY;
      locale1.getDisplayLanguage(locale2);
      Locale locale7 = Locale.ITALY;
      Locale locale8 = Locale.CHINESE;
      Locale locale9 = Locale.ITALIAN;
      locale8.getUnicodeLocaleAttributes();
      Locale locale10 = Locale.ITALIAN;
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1059));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1059
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7595628478079375
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(10);
      Locale.getISOLanguages();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ListIterator<Attribute> listIterator0 = arrayList0.listIterator();
      Instances instances0 = new Instances(")6Gg<d)5z{Xap~@r9hL", arrayList0, 519);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("-V", protectedProperties0);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("string");
      properties0.put(attribute1, listIterator0);
      binarySparseInstance0.toString((-1933));
      discretize0.getBinRangesString(2);
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(10);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6809758931039966
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(10);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)6;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-20);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")6Gg<d)5z{Xap~@r9hL", arrayList0, 519);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile2, ".bsi");
      Attribute attribute0 = new Attribute("zUV", protectedProperties0);
      arrayList0.add(attribute0);
      instances0.add((Instance) binarySparseInstance0);
      binarySparseInstance0.toString(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.getBinRangesString(2);
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.301215416668689
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = Locale.getISOCountries();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")6Gg<d)5z{Xap~@r9hL", arrayList0, 519);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@relation", 30);
      Instances instances1 = new Instances("yn&jX>K@>KH", arrayList0, 7);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Attribute attribute1 = new Attribute("numeric", protectedProperties1);
      arrayList0.add(attribute1);
      instances0.retainAll(arrayList0);
      SparseInstance sparseInstance0 = new SparseInstance(1259);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      binarySparseInstance0.toString(0);
      discretize0.getBinRangesString(519);
      discretize0.setInputFormat(instances0);
      Filter.runFilter(discretize0, stringArray0);
      discretize0.findNumBinsTipText();
      discretize0.setOutputFormat();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4522572435131544
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      Locale.getISOLanguages();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ListIterator<Attribute> listIterator0 = arrayList0.listIterator();
      Instances instances0 = new Instances(")6Gg<d)5z{Xap~@r9hL", arrayList0, 519);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("-V", protectedProperties0);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      attribute0.equalsMsg(protectedProperties0);
      Attribute attribute1 = new Attribute("string");
      properties0.put(attribute1, listIterator0);
      discretize0.getBinRangesString(2);
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")6Gg<d)5z{Xap~@r9hL", arrayList0, 519);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@data", 1682);
      instances0.deleteWithMissing(attribute0);
      Attribute attribute1 = new Attribute("relational", protectedProperties0);
      arrayList0.add(attribute1);
      arrayList0.add(attribute0);
      Integer integer0 = new Integer(3534);
      attribute1.equalsMsg(integer0);
      arrayList0.add(attribute1);
      Attribute attribute2 = new Attribute(".bsi");
      Discretize discretize0 = new Discretize("g96;`dmQAv3&_");
      discretize0.getBinRangesString(86);
      Instances instances1 = new Instances(instances0, 519);
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at g96;`dmQAv3&_
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.JAPANESE;
      locale0.getDisplayVariant(locale1);
      locale1.getDisplayVariant();
      Locale locale2 = Locale.KOREA;
      Locale locale3 = Locale.CHINA;
      locale0.getDisplayLanguage(locale2);
      Locale locale4 = Locale.ENGLISH;
      locale3.getDisplayName();
      locale4.toLanguageTag();
      locale0.getScript();
      locale2.getDisplayName();
      Locale locale5 = Locale.CHINA;
      locale3.getUnicodeLocaleKeys();
      Locale locale6 = Locale.ITALY;
      Locale locale7 = new Locale("");
      Locale locale8 = Locale.CANADA_FRENCH;
      Locale locale9 = new Locale("Chinese (China)", "");
      Locale locale10 = Locale.CHINA;
      Locale locale11 = Locale.JAPANESE;
      Locale locale12 = Locale.CANADA_FRENCH;
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-292.2298055484252);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1385.065959;
      doubleArray1[4] = 1.7976931348623157E308;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-292.2298055484252);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 1385.065959;
      doubleArray4[1] = (-292.2298055484252);
      doubleArray4[2] = (-247.7049);
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-247.7049);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (-292.2298055484252);
      doubleArray5[6] = 1.7976931348623157E308;
      doubleArray5[7] = 0.0;
      doubleArray5[8] = 4.6;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 4.6;
      doubleArray6[5] = (-292.2298055484252);
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 0.0;
      doubleArray6[8] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (-292.2298055484252);
      doubleArray7[2] = (-247.7049);
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 4.6;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (-1.0);
      doubleArray8[3] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      doubleArray9[0] = 0.0;
      doubleArray9[1] = 0.0;
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      Locale locale13 = Locale.ITALY;
      locale11.getDisplayScript(locale1);
      Locale locale14 = Locale.FRANCE;
      Locale locale15 = Locale.JAPANESE;
      Locale locale16 = Locale.CHINA;
      locale16.getUnicodeLocaleAttributes();
      Locale locale17 = Locale.GERMANY;
      locale16.getDisplayLanguage(locale8);
      Locale locale18 = Locale.UK;
      Locale locale19 = Locale.SIMPLIFIED_CHINESE;
      Locale locale20 = Locale.ITALIAN;
      locale6.getUnicodeLocaleAttributes();
      Locale locale21 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-1971));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1971
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[4];
      binarySparseInstance1.deleteAttributeAt(1607);
      binarySparseInstance0.copy();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Refresh in progress. Please wait...");
      doubleArray0[0] = (double) 10;
      AllFilter allFilter0 = new AllFilter();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Za`J>{xp6.X8m(yt";
      stringArray0[1] = "\u0001IRjL ]&_`fY;!]";
      stringArray0[2] = "jD/ohuYg;$W";
      stringArray0[3] = "-";
      stringArray0[4] = "Date class";
      stringArray0[5] = "K5y|N;7Rf8t)lx_Ji";
      stringArray0[6] = "S";
      stringArray0[7] = "of";
      Filter.runFilter(allFilter0, stringArray0);
      Filter.runFilter(allFilter0, stringArray0);
      Filter.runFilter(allFilter0, stringArray0);
      Discretize discretize0 = new Discretize("\tUse bin numbers rather than ranges for discretized attributes.");
      Locale locale0 = Locale.KOREAN;
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.576534609090467
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Wx6zIX(";
      stringArray0[1] = "";
      stringArray0[2] = "-B";
      stringArray0[3] = "'oMv)7dFJ";
      stringArray0[4] = "-F";
      stringArray0[5] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      Filter.runFilter(allFilter1, stringArray0);
      Filter.runFilter(allFilter0, stringArray0);
      Filter.runFilter(allFilter0, stringArray0);
      Discretize discretize0 = new Discretize("D{U %r");
      discretize0.setUseEqualFrequency(true);
      discretize0.setAttributeIndices("2YBM1fi");
      Locale locale0 = Locale.KOREAN;
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'oMv)7dFJ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      boolean boolean0 = discretize0.getFindNumBins();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.m_FindNumBins = true;
      discretize0.m_IgnoreClass = false;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-V";
      stringArray0[1] = "c6f&";
      stringArray0[2] = "e=t/cnKXl|?_iOL";
      stringArray0[3] = "4K";
      stringArray0[4] = "first-last";
      stringArray0[5] = "Please provide your username and password.";
      stringArray0[6] = "\tUse equal-frequency instead of equal-width discretization.";
      Filter.runFilter(discretize0, stringArray0);
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(7, stringArray1.length);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.68644405381145
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      MultiFilter multiFilter0 = new MultiFilter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("-R");
      String[] stringArray0 = new String[1];
      discretize0.m_FindNumBins = false;
      stringArray0[0] = "-R";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -R option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.getOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-120);
      discretize0.getAttributeIndices();
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.invertSelectionTipText();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      String[] stringArray0 = new String[1];
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2078421395831853
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(2);
      discretize0.setIgnoreClass(true);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      discretize0.isOutputFormatDefined();
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.PRC;
      String[] stringArray0 = discretize0.getOptions();
      locale0.getDisplayVariant(locale1);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Locale locale2 = Locale.CANADA_FRENCH;
      Locale locale3 = Locale.KOREA;
      locale2.getScript();
      locale1.getUnicodeLocaleKeys();
      Locale locale4 = Locale.ITALY;
      locale4.getUnicodeLocaleKeys();
      Locale locale5 = Locale.ROOT;
      Locale locale6 = Locale.KOREA;
      Locale locale7 = Locale.TAIWAN;
      locale5.getUnicodeLocaleKeys();
      Locale locale8 = Locale.ENGLISH;
      Locale locale9 = Locale.CHINESE;
      locale5.getDisplayScript(locale9);
      locale8.stripExtensions();
      locale8.getDisplayLanguage(locale6);
      Locale locale10 = Locale.TAIWAN;
      locale4.getUnicodeLocaleKeys();
      Locale locale11 = Locale.FRENCH;
      discretize0.setOptions(stringArray0);
      discretize0.setOutputFormat();
      assertTrue(discretize0.getIgnoreClass());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.listOptions();
      discretize0.m_DiscretizeCols = null;
      discretize0.setDesiredWeightOfInstancesPerInterval((-1.0));
      // Undeclared exception!
      try { 
        discretize0.getAttributeIndices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 44;
      discretize0.getBinRangesString(44);
      discretize0.m_UseBinNumbers = true;
      discretize0.getUseBinNumbers();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      Filter.runFilter(discretize0, stringArray0);
      SystemInUtil.addInputLine((String) null);
      discretize0.makeBinaryTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DiscretizeCols = null;
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.getBins();
      discretize0.getMakeBinary();
      discretize0.useBinNumbersTipText();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize("SlFF:zy_04bBC");
      int[] intArray0 = new int[1];
      discretize0.setAttributeIndicesArray(intArray0);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.deleteAttributeAt(10);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(10);
      int[] intArray0 = new int[6];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 10;
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((-1162.0), intArray0, 44);
      binarySparseInstance1.isMissing(10);
      binarySparseInstance0.setMissing((-1441));
      Discretize discretize0 = new Discretize("e>{G>%Z");
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "e>{G>%Z";
      stringArray0[1] = "e>{G>%Z";
      stringArray0[2] = "e>{G>%Z";
      stringArray0[3] = "-R";
      stringArray0[4] = "e>{G>%Z";
      stringArray0[5] = "e>{G>%Z";
      stringArray0[6] = "e>{G>%Z";
      Filter.runFilter(discretize1, stringArray0);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getUseEqualFrequency());
      
      String[] stringArray1 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(6, stringArray1.length);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", arrayList0, 2);
      StringTokenizer stringTokenizer0 = new StringTokenizer("@relation");
      Discretize discretize0 = new Discretize("@data");
      Instances instances1 = new Instances(instances0, 2);
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2430.6736);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1037.07417028843);
      doubleArray1[3] = (-2213.4);
      doubleArray1[4] = 1174.42;
      doubleArray1[5] = 607.196;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-153));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -153
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "bRexxSbwH";
      int[] intArray0 = new int[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.7976931348623157E308, intArray0, 2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2771), intArray0, 1);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("Y");
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = true;
      discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("'Rm'");
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[5];
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 10;
      binarySparseInstance0.s_numericAfterDecimalPoint = 10;
      doubleArray2[2] = (double) 10;
      doubleArray0[3] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 10;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.toString(10);
      binarySparseInstance2.toString((-978));
      double[] doubleArray4 = new double[3];
      doubleArray4[1] = (double) 10;
      binarySparseInstance2.mergeInstance(binarySparseInstance1);
      doubleArray4[2] = (double) 10;
      SparseInstance sparseInstance1 = new SparseInstance(10, doubleArray4);
      System.setCurrentTimeMillis(10);
      String string0 = discretize0.globalInfo();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2430.6736);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1037.07417028843);
      doubleArray0[3] = (-2213.4);
      doubleArray0[4] = 1174.42;
      doubleArray0[5] = 607.196;
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.US;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale0.getDisplayVariant(locale1);
      locale1.getDisplayVariant();
      Locale locale2 = Locale.KOREA;
      Locale locale3 = Locale.CHINA;
      locale0.getDisplayLanguage(locale1);
      Locale locale4 = Locale.ENGLISH;
      locale2.getDisplayName();
      locale2.toLanguageTag();
      locale0.getScript();
      locale2.getDisplayName();
      Locale locale5 = Locale.CHINA;
      locale2.getUnicodeLocaleKeys();
      Locale locale6 = Locale.ITALY;
      Locale locale7 = new Locale("");
      Locale locale8 = Locale.SIMPLIFIED_CHINESE;
      Locale locale9 = new Locale("ko-KR", "");
      Locale locale10 = Locale.CHINA;
      Locale locale11 = Locale.JAPANESE;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale3);
      Locale locale12 = Locale.ITALIAN;
      Locale locale13 = Locale.ITALY;
      locale8.getDisplayScript(locale6);
      Locale locale14 = Locale.FRANCE;
      Locale locale15 = Locale.JAPANESE;
      System.setCurrentTimeMillis((-2494L));
      Discretize discretize1 = new Discretize("");
      String[] stringArray0 = discretize1.getOptions();
      assertEquals(10, discretize1.getBins());
      assertEquals(4, stringArray0.length);
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("'Rm'");
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 10;
      binarySparseInstance0.s_numericAfterDecimalPoint = 10;
      doubleArray1[2] = (double) 10;
      binarySparseInstance1.deleteAttributeAt(10);
      doubleArray0[3] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 10;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(10);
      binarySparseInstance0.toString(10);
      binarySparseInstance2.toString((-978));
      double[] doubleArray3 = new double[3];
      binarySparseInstance3.s_numericAfterDecimalPoint = 10;
      doubleArray3[1] = (double) 10;
      binarySparseInstance2.mergeInstance(binarySparseInstance1);
      doubleArray3[2] = (double) 10;
      binarySparseInstance0.isMissing(77);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(1.0, doubleArray2);
      binarySparseInstance4.setWeight(10.0);
      SparseInstance sparseInstance1 = new SparseInstance(10, doubleArray3);
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.27103240667453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      discretize0.getCapabilities();
      discretize0.m_FindNumBins = false;
      discretize0.useBinNumbersTipText();
      discretize0.setAttributeIndices("      }\n");
      discretize0.getCapabilities();
      discretize0.findNumBinsTipText();
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      discretize0.setAttributeIndices("weka/core/Capabilities.props");
      discretize0.getAttributeIndices();
      discretize0.useEqualFrequencyTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.binsTipText();
      discretize0.getCapabilities();
      assertTrue(discretize0.getMakeBinary());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "      }\n";
      stringArray0[3] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[4] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[5] = "f-|O";
      stringArray0[6] = "weka/core/Capabilities.props";
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)";
      stringArray0[1] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      stringArray0[2] = "?k_RkwR*EVbnvlR";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zM{!]3Ow");
      stringArray0[3] = "j\"E=Hu";
      Discretize discretize0 = new Discretize("\nClasses:\n");
      String string0 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize("_7");
      discretize0.setDesiredWeightOfInstancesPerInterval(100.0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4K";
      stringArray0[1] = "";
      stringArray0[2] = "_7";
      stringArray0[3] = "_7";
      stringArray0[4] = "_7";
      stringArray0[5] = "_7";
      discretize0.setUseEqualFrequency(true);
      discretize0.makeBinaryTipText();
      discretize0.getRevision();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals(100.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize("%A-oi@");
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.");
      discretize0.setUseEqualFrequency(true);
      discretize0.getBinRangesString((-3379));
      discretize0.getMakeBinary();
      discretize0.setUseEqualFrequency(true);
      discretize0.listOptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getUseEqualFrequency();
      discretize0.getRevision();
      discretize0.setBins((-1505));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ix9Vjc0u?[{tQB_X>y";
      stringArray0[1] = "8964";
      stringArray0[2] = null;
      stringArray0[3] = "An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.";
      stringArray0[4] = "9W8<Xc>Aq";
      stringArray0[5] = "+?F$,]]'s6Eib";
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("'Rm'");
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[5];
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 10;
      binarySparseInstance0.s_numericAfterDecimalPoint = 10;
      doubleArray2[2] = (double) 10;
      binarySparseInstance1.deleteAttributeAt(10);
      doubleArray2[3] = (double) 10;
      doubleArray0[3] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 10;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(10);
      binarySparseInstance0.toString(10);
      binarySparseInstance2.toString((-986));
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) 10;
      doubleArray4[1] = (double) 10;
      doubleArray4[2] = (double) 10;
      SparseInstance sparseInstance1 = new SparseInstance(46.04616714813421, doubleArray4);
      sparseInstance1.isMissing((-959));
      sparseInstance1.toStringMaxDecimalDigits(10);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-4116.94), intArray0, 10);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      //  // Unstable assertion: assertEquals(115, AbstractInstance.s_numericAfterDecimalPoint);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 115;
      binarySparseInstance0.s_numericAfterDecimalPoint = 10;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(10);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance2);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      Filter.runFilter(allFilter1, (String[]) null);
      Filter.makeCopies(allFilter1, 104);
      Filter.runFilter(multiFilter0, (String[]) null);
      Filter.runFilter(allFilter0, (String[]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("8$z<Z(\"4sElr", arrayList0, 69);
      Discretize discretize0 = new Discretize("8$z<Z(\"4sElr");
      System.setCurrentTimeMillis(0L);
      discretize0.getCutPoints(4399);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("'Rm'");
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[5];
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[4];
      binarySparseInstance0.s_numericAfterDecimalPoint = 115;
      doubleArray2[2] = (double) 115;
      doubleArray0[3] = doubleArray2;
      double[] doubleArray3 = new double[4];
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(115);
      binarySparseInstance0.toString(115);
      binarySparseInstance2.toString((-978));
      double[] doubleArray4 = new double[3];
      doubleArray4[1] = (double) 115;
      Instance instance0 = binarySparseInstance2.mergeInstance(binarySparseInstance1);
      doubleArray4[2] = (double) 115;
      SparseInstance sparseInstance0 = new SparseInstance(115, doubleArray4);
      binarySparseInstance0.isMissing(77);
      instance0.isMissing(115);
      sparseInstance0.isMissing((-977));
      sparseInstance0.toStringMaxDecimalDigits(115);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(115);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(true);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale locale2 = Locale.KOREA;
      locale1.getScript();
      locale2.getUnicodeLocaleKeys();
      Locale locale3 = Locale.FRANCE;
      locale0.getUnicodeLocaleKeys();
      Locale locale4 = Locale.ROOT;
      Locale locale5 = Locale.KOREA;
      Locale locale6 = Locale.TAIWAN;
      locale3.getUnicodeLocaleKeys();
      Locale locale7 = Locale.ENGLISH;
      Locale locale8 = Locale.KOREA;
      Locale locale9 = Locale.ROOT;
      locale7.stripExtensions();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      Locale locale10 = Locale.CANADA_FRENCH;
      Locale locale11 = Locale.JAPAN;
      locale10.getDisplayScript(locale11);
      locale8.stripExtensions();
      Locale locale12 = Locale.JAPANESE;
      locale4.getDisplayLanguage(locale2);
      Locale locale13 = Locale.TAIWAN;
      Locale locale14 = Locale.SIMPLIFIED_CHINESE;
      Locale locale15 = Locale.TAIWAN;
      locale11.getUnicodeLocaleKeys();
      Locale locale16 = Locale.FRENCH;
      assertFalse(locale16.equals((Object)locale7));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "pLd{=cd|hr`\"";
      stringArray0[1] = "pLd{=cd|hr`\"";
      stringArray0[2] = "pLd{=cd|hr`\"";
      stringArray0[3] = "DGpx~q=(n'XX@";
      stringArray0[4] = "pLd{=cd|hr`\"";
      Discretize discretize0 = new Discretize("DGpx~q=(n'XX@");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1059));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\tSpecifies the desired weight of instances per bin for\n\tequal-freuency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)";
      stringArray0[1] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      stringArray0[2] = "?k_RkwR*EVbnvlR";
      stringArray0[3] = "j\"E=Hu";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0);
      Locale locale1 = Locale.KOREAN;
      Locale locale2 = Locale.UK;
      locale2.getDisplayVariant(locale0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode1);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Locale locale3 = Locale.CANADA_FRENCH;
      locale0.getDisplayName();
      locale3.getUnicodeLocaleKeys();
      locale2.getScript();
      locale0.getUnicodeLocaleKeys();
      Locale locale4 = Locale.ITALY;
      locale1.getUnicodeLocaleKeys();
      Locale locale5 = Locale.ROOT;
      Locale locale6 = Locale.KOREA;
      Locale locale7 = Locale.TAIWAN;
      locale1.getUnicodeLocaleKeys();
      locale2.stripExtensions();
      locale6.getDisplayScript();
      locale3.getDisplayScript(locale0);
      locale6.getDisplayLanguage(locale2);
      Locale locale8 = Locale.TAIWAN;
      locale0.getUnicodeLocaleKeys();
      locale3.stripExtensions();
      Locale locale9 = Locale.ROOT;
      locale9.getUnicodeLocaleAttributes();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      System.setCurrentTimeMillis((-100L));
      Discretize discretize0 = new Discretize("Korean");
      boolean boolean0 = discretize0.getFindNumBins();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = discretize0.m_DiscretizeCols;
      discretize0.m_DiscretizeCols = range0;
      discretize0.setUseEqualFrequency(false);
      discretize0.isFirstBatchDone();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(16);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.toString();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("Site:");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 115;
      binarySparseInstance0.s_numericAfterDecimalPoint = 115;
      doubleArray0[2] = (double) 115;
      binarySparseInstance1.deleteAttributeAt(115);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 115;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(115);
      binarySparseInstance0.toString(115);
      binarySparseInstance2.toString((-978));
      double[] doubleArray2 = new double[3];
      binarySparseInstance3.s_numericAfterDecimalPoint = 115;
      binarySparseInstance3.s_numericAfterDecimalPoint = 115;
      binarySparseInstance2.mergeInstance(binarySparseInstance1);
      doubleArray2[2] = (double) 115;
      SparseInstance sparseInstance1 = new SparseInstance(46.04616714813421, doubleArray2);
      String[] stringArray0 = new String[0];
      Filter.runFilter(discretize0, stringArray0);
      System.setCurrentTimeMillis(115);
      String string0 = discretize0.binsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("'Rm'");
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[5];
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 115;
      binarySparseInstance0.s_numericAfterDecimalPoint = 115;
      doubleArray2[2] = (double) 115;
      binarySparseInstance1.deleteAttributeAt(115);
      doubleArray2[3] = (double) 115;
      doubleArray0[3] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 115;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(115);
      binarySparseInstance0.toString(115);
      binarySparseInstance2.toString((-986));
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-612));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize("&yU- Jt:N[)");
      discretize0.getCapabilities();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.ITALIAN;
      locale0.getDisplayVariant(locale1);
      locale1.getDisplayVariant();
      Locale locale2 = Locale.JAPAN;
      Locale locale3 = Locale.CHINA;
      locale0.getDisplayLanguage(locale2);
      Locale locale4 = Locale.ENGLISH;
      locale3.getDisplayName();
      locale4.toLanguageTag();
      locale0.getScript();
      locale2.getDisplayName();
      Locale locale5 = Locale.ITALIAN;
      locale3.getUnicodeLocaleKeys();
      Locale locale6 = Locale.ITALY;
      Locale locale7 = new Locale("");
      Locale locale8 = Locale.CANADA_FRENCH;
      Locale locale9 = Locale.ITALIAN;
      Locale locale10 = Locale.CHINA;
      Locale locale11 = Locale.JAPANESE;
      Locale locale12 = Locale.CANADA_FRENCH;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-292.2298055484252);
      doubleArray0[1] = (-292.2298055484252);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1385.065959;
      doubleArray0[4] = 1.7976931348623157E308;
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-4116.94), intArray0, 10);
      SparseInstance sparseInstance0 = new SparseInstance(115);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 115;
      doubleArray0[1] = (double) 115;
      doubleArray0[2] = (double) 10;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(115, doubleArray0);
      Discretize discretize0 = new Discretize("Can't ignore class when changing F6e number of attribut5s!");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "pLd{=cd|hr`\"";
      stringArray0[1] = "pLd{=cd|hr`\"";
      stringArray0[2] = "pLd{=cd|hr`\"";
      stringArray0[3] = "DGpx~q=(n'XX@";
      stringArray0[2] = "pLd{=cd|hr`\"";
      Discretize discretize0 = new Discretize("{Uqf@sV}r\"o");
      discretize0.getInvertSelection();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(10);
      Discretize discretize0 = new Discretize("'Rm'");
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[5];
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 115;
      binarySparseInstance0.s_numericAfterDecimalPoint = 115;
      doubleArray2[2] = (double) 115;
      binarySparseInstance1.deleteAttributeAt(115);
      doubleArray2[3] = (double) 115;
      doubleArray0[3] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 115;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(115);
      binarySparseInstance0.toString(115);
      binarySparseInstance2.toString((-1032));
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) 115;
      doubleArray4[1] = (double) 115;
      doubleArray4[2] = (double) 115;
      SparseInstance sparseInstance1 = new SparseInstance(46.04616714813421, doubleArray4);
      sparseInstance1.isMissing((-959));
      sparseInstance1.toStringMaxDecimalDigits(115);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aFiHYz)?");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("aFiHYz)?");
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-2119594247));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "pLd{=cd|hr`\"";
      stringArray0[1] = "pLd{=cd|hr`\"";
      stringArray0[2] = "pLd{=cd|hr`\"";
      stringArray0[3] = "pLd{=cd|hr`\"";
      Discretize.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.deleteAttributeAt(115);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(115);
      binarySparseInstance1.toString(10);
      binarySparseInstance0.toString((-1073741822));
      binarySparseInstance3.mergeInstance(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      binarySparseInstance4.mergeInstance(binarySparseInstance2);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("'Rm'");
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[7];
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[4];
      binarySparseInstance0.s_numericAfterDecimalPoint = 115;
      doubleArray2[2] = (double) 115;
      doubleArray0[3] = doubleArray2;
      double[] doubleArray3 = new double[4];
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(115);
      binarySparseInstance0.toString(115);
      binarySparseInstance2.toString((-978));
      double[] doubleArray4 = new double[3];
      doubleArray4[1] = (double) 115;
      Instance instance0 = binarySparseInstance2.mergeInstance(binarySparseInstance1);
      doubleArray4[2] = (double) 115;
      SparseInstance sparseInstance0 = new SparseInstance(115);
      binarySparseInstance0.isMissing(77);
      instance0.isMissing(115);
      sparseInstance0.isMissing((-977));
      sparseInstance0.toStringMaxDecimalDigits(115);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(115);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[1] = "1NeG(+%urZKr-";
      stringArray0[2] = "4";
      stringArray0[3] = "B2q0|Fe";
      Discretize.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }
}
