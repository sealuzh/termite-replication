/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 12:31:27 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.supportVector.StringKernel;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.OneR;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.estimators.KernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.421915995785605
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      StringKernel stringKernel0 = new StringKernel();
      stringKernel0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      Instances instances1 = testInstances0.generate(",9n H\"w^d<8");
      File file0 = MockFile.createTempFile("@relation", "4n4/)c`_n{IcdoOLz=");
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.setStopwords(file0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getModelFile();
      naiveBayesMultinomialText0.toString();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      naiveBayesMultinomialText0.distributionForInstance(sparseInstance1);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      
      naiveBayesMultinomialText0.setOptions(testInstances1.DEFAULT_WORDS);
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.203745604147101
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate(" ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      Instances instances0 = testInstances0.generate(",9n H\"w^d<8");
      TestInstances testInstances1 = new TestInstances();
      instances0.getRandomNumberGenerator(120L);
      testInstances1.generate("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      instances0.deleteWithMissingClass();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      naiveBayesMultinomialText0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      naiveBayesMultinomialText0.distributionForInstance(sparseInstance1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      principalComponents0.setVarianceCovered(1);
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2268137824401837
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances1 = testInstances0.generate(",9n H\"w^d<8");
      File file0 = MockFile.createTempFile("@relation", "4n4/)c`_n{IcdoOLz=");
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate("");
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.setStopwords(file0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockFile mockFile0 = new MockFile("@data", ".bsi");
      naiveBayesMultinomialText0.toString();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      principalComponents1.setTransformBackToOriginal(false);
      PrincipalComponents principalComponents2 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.308262648856674
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate(" ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Instances instances0 = testInstances0.generate(",9n H\"w^d<8");
      File file0 = MockFile.createTempFile("@relation", "@data");
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      naiveBayesMultinomialText0.setStopwords(file0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockFile mockFile0 = new MockFile("@data", ".bsi");
      naiveBayesMultinomialText0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      naiveBayesMultinomialText0.distributionForInstance(sparseInstance1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3171222947833092
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      File file0 = sGDText0.getStopwords();
      File file1 = MockFile.createTempFile("s-l~n)w~v,R?>v)", "s-l~n)w~v,R?>v)", file0);
      file1.setReadable(false);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords(file1);
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      capabilities0.disableAllAttributeDependencies();
      KStar kStar0 = new KStar();
      Capabilities capabilities1 = kStar0.getCapabilities();
      capabilities1.assign(capabilities0);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      Capabilities capabilities2 = lWL1.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      lWL1.setDebug(false);
      Capabilities capabilities3 = capabilities2.getAttributeCapabilities();
      capabilities3.disableAllAttributeDependencies();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normTipText();
      testInstances0.generate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.368373327680306
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Stopwords stopwords0 = new Stopwords();
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      AbstractClassifier.makeCopy(sGDText0);
      AbstractClassifier.makeCopy(sGDText0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "  Precision  Recall";
      stringArray0[1] = "  Precision  Recall";
      stringArray0[2] = "-stemmer";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -stemmer option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.342877933514915
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "p#";
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(")rH{;v_jhfE");
      File file0 = MockFile.createTempFile(".arff", "@hs/^X-D51c");
      naiveBayesMultinomialText0.setStopwords(file0);
      TestInstances testInstances1 = new TestInstances();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      Capabilities capabilities1 = simpleLinearRegression0.getCapabilities();
      capabilities0.and(capabilities1);
      Instances instances1 = testInstances0.generate("@data");
      FileSystemHandling.shouldAllThrowIOExceptions();
      file0.toPath();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      instances0.spliterator();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      capabilities1.disableAllAttributeDependencies();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normTipText();
      TestInstances testInstances2 = new TestInstances();
      testInstances2.generate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = (-337);
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals((-337), int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8978657693160126
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setClassType((-1));
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("");
      testInstances1.setNoClass(false);
      capabilities0.disableAllAttributeDependencies();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      // Undeclared exception!
      try { 
        instances0.renameAttribute((-1), " ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-stemmer";
      stringArray0[2] = "&{{BkF\"o1.<c";
      KernelEstimator kernelEstimator0 = new KernelEstimator((-2012.13602));
      Capabilities capabilities0 = kernelEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("idu]m4hh");
      instances0.spliterator();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      File file0 = sGDText1.getStopwords();
      File file1 = MockFile.createTempFile("s-l~n)w~v,R?>v)", "s-l~n)w~v,R?>v)", file0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords(file1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1594.3), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("s-l~n)w~v,R?>v)", arrayList0, 1);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getCapabilities();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3323326745162434
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "cc/)";
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      File file1 = MockFile.createTempFile("cc/)", "!,7%(-%", file0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = 2899.8354956513613;
      naiveBayesMultinomialText0.setStopwords(file1);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("cc/)");
      instances0.spliterator();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setStopwords(file0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file2 = serializedClassifier0.getModelFile();
      naiveBayesMultinomialText0.setStopwords(file2);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("mgx/}#;");
      testInstances0.setNoClass(false);
      capabilities0.disableAllAttributeDependencies();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle numeric class!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.562916567237626
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      capabilities0.disableAllAttributeDependencies();
      KStar kStar0 = new KStar();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities1.enableDependency(capabilities_Capability0);
      capabilities1.assign(capabilities0);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      Capabilities capabilities2 = lWL1.getCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      stringKernel0.setPruningMethod(selectedTag0);
      lWL1.setDebug(true);
      Capabilities capabilities3 = capabilities2.getAttributeCapabilities();
      capabilities3.and(capabilities0);
      capabilities3.disableAllAttributeDependencies();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string0 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string0);
      
      naiveBayesMultinomialText0.normTipText();
      testInstances0.generate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      String string1 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t6.0\nclass2\t6.0\nclass3\t6.0\nclass4\t6.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\nover\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nthe\t2.718281828459045\t7.38905609893065\t7.38905609893065\t2.718281828459045\t\nThe\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nquick\t7.38905609893065\t7.38905609893065\t7.38905609893065\t2.718281828459045\t\nlazy\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\njumps\t7.38905609893065\t2.718281828459045\t2.718281828459045\t7.38905609893065\t\nbrown\t2.718281828459045\t7.38905609893065\t7.38905609893065\t7.38905609893065\t\ndog\t7.38905609893065\t2.718281828459045\t2.718281828459045\t7.38905609893065\t\nfox\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\n", string1);
      
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.LNormTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.730292338790394
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      File file0 = sGDText1.getStopwords();
      File file1 = MockFile.createTempFile("s-l~n)w~v,R?>v)", "s-l~n)w~v,R?>v)", file0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords(file1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((-12), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.107042147706763
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 657;
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNoClass(false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      KStar kStar0 = new KStar();
      Capabilities capabilities1 = kStar0.getCapabilities();
      capabilities1.assign(capabilities0);
      capabilities0.disableAllAttributeDependencies();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string0 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string0);
      
      String string1 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string1);
      
      testInstances0.generate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      naiveBayesMultinomialText0.periodicPruningTipText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.570466567670061
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "C4'K/7{}yc/mNgf";
      stringArray0[1] = "cc/)";
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      File file1 = MockFile.createTempFile("cc/)", "!,7%(-%", file0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords(file1);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("cc/)");
      instances0.spliterator();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.useStopListTipText();
      testInstances0.toString();
      naiveBayesMultinomialText0.stopwordsTipText();
      boolean boolean0 = naiveBayesMultinomialText0.getUseStopList();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.342877933514915
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "p#";
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(")rH{;v_jhfE");
      File file0 = MockFile.createTempFile(".arff", "@hs/^X-D51c");
      naiveBayesMultinomialText0.setStopwords(file0);
      TestInstances testInstances1 = new TestInstances();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      Capabilities capabilities1 = simpleLinearRegression0.getCapabilities();
      capabilities0.and(capabilities1);
      Instances instances1 = testInstances0.generate("@data");
      FileSystemHandling.shouldAllThrowIOExceptions();
      file0.toPath();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      instances0.spliterator();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      capabilities1.disableAllAttributeDependencies();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normTipText();
      TestInstances testInstances2 = new TestInstances();
      testInstances2.generate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9104046465989337
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-S$!";
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) alphabeticTokenizer0;
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "-P <# instances>";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.normTipText();
      MockFile mockFile0 = new MockFile("S1Y?jn", "-lnorm");
      mockFile0.getAbsoluteFile();
      Tokenizer.tokenize(naiveBayesMultinomialText0.m_tokenizer, stringArray0);
      mockFile0.setExecutable(false, false);
      mockFile0.toURI();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.stopwordsTipText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      assertEquals("/home/ubuntu/termite/projects/107_weka/S1Y?jn/-lnorm", file0.toString());
      
      naiveBayesMultinomialText0.setOptions(stringArray0);
      String string0 = naiveBayesMultinomialText0.globalInfo();
      assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string0);
      
      String string1 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals("Use word frequencies rather than binary bag of words representation", string1);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2163047277225036
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("");
      testInstances0.setNoClass(false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      KStar kStar0 = new KStar();
      Capabilities capabilities1 = kStar0.getCapabilities();
      capabilities1.assign(capabilities0);
      LWL lWL0 = new LWL();
      Capabilities capabilities2 = lWL0.getCapabilities();
      capabilities2.disableAllAttributeDependencies();
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string0);
      
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      String string1 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string1);
      
      testInstances0.generate();
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = (-1564);
      naiveBayesMultinomialText0.pruneDictionary();
      Random.setNextRandom((-1564));
      Random.setNextRandom((-1564));
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      OneR oneR0 = new OneR();
      Bagging bagging0 = new Bagging();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        AbstractClassifier.makeCopies(adaBoostM1_0, (-1857));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.AbstractClassifier", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = 651;
      naiveBayesMultinomialText0.m_periodicP = 651;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.650442143368543
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "C4'K/7{}yc/mNgf";
      stringArray0[1] = "cc/)";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "-{topwords");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile1;
      naiveBayesMultinomialText0.getOptions();
      Random.setNextRandom(30);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 1912);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      
      naiveBayesMultinomialText1.getCapabilities();
      naiveBayesMultinomialText1.setPeriodicPruning(2833);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      serializedClassifier0.getModelFile();
      int int0 = naiveBayesMultinomialText1.getPeriodicPruning();
      assertEquals(2833, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)30;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)30;
      SparseInstance sparseInstance0 = new SparseInstance((byte) (-12), doubleArray0, intArray0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance2);
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance0);
      DenseInstance denseInstance1 = (DenseInstance)denseInstance0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance3);
      binarySparseInstance0.deleteAttributeAt((-12));
      SparseInstance sparseInstance5 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance6 = new SparseInstance(sparseInstance3);
      DenseInstance denseInstance2 = (DenseInstance)denseInstance1.copy();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance1);
      DenseInstance denseInstance3 = new DenseInstance(denseInstance2);
      binarySparseInstance0.mergeInstance(denseInstance3);
      binarySparseInstance0.deleteAttributeAt((-2198));
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "C4'K/7{}yc/mNgf";
      stringArray0[1] = "cc/)";
      stringArray0[3] = "Nominal class";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)6;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)30;
      doubleArray0[1] = (double) (byte)1;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)6;
      intArray0[1] = (int) (byte)30;
      intArray0[2] = (int) (byte) (-11);
      intArray0[3] = (int) (byte) (-11);
      SparseInstance sparseInstance0 = new SparseInstance(22.0, doubleArray0, intArray0, (byte) (-11));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8255511919830596
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm((-3685.37));
      NullStemmer nullStemmer0 = (NullStemmer)naiveBayesMultinomialText0.m_stemmer;
      naiveBayesMultinomialText0.setStemmer(nullStemmer0);
      naiveBayesMultinomialText0.setNorm((-3685.37));
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setPeriodicPruning((-1));
      naiveBayesMultinomialText1.listOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.useWordFrequenciesTipText();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3685.37);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3685.37);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (-3685.37);
      doubleArray0[6] = (-1477.0026);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (-3685.37);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-3685.37), doubleArray0, intArray0, (-1));
      naiveBayesMultinomialText2.tokenizeInstance(sparseInstance0, false);
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setPeriodicPruning((-1));
      NaiveBayesMultinomialText.main((String[]) null);
      naiveBayesMultinomialText2.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      int[] intArray1 = new int[6];
      intArray1[1] = (-1);
      intArray1[2] = (-1);
      intArray1[3] = (-1);
      intArray1[4] = (-2);
      naiveBayesMultinomialText1.setNormalizeDocLength(false);
      intArray1[5] = (-2);
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(intArray1, instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)30;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)30;
      intArray0[1] = (int) (byte) (-12);
      SparseInstance sparseInstance0 = new SparseInstance((byte) (-12), doubleArray0, intArray0, (-12));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance2);
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance0);
      DenseInstance denseInstance1 = (DenseInstance)denseInstance0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance3);
      binarySparseInstance0.deleteAttributeAt((-12));
      SparseInstance sparseInstance5 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      SparseInstance sparseInstance6 = new SparseInstance(sparseInstance3);
      denseInstance1.copy();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance1);
      binarySparseInstance0.deleteAttributeAt((-2198));
      SparseInstance sparseInstance7 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(denseInstance1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((-12), doubleArray0);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance10 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance6, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.332391118161958
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      File file0 = sGDText1.getStopwords();
      File file1 = MockFile.createTempFile("!,7%(-%", "s-l~n)w~v,R?>v)", file0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords(file1);
      naiveBayesMultinomialText0.setStopwords(file0);
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("");
      instances0.spliterator();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setStopwords(file1);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getModelFile();
      naiveBayesMultinomialText0.setStopwords(file1);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7033356388108207
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)30;
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      capabilities0.disableAllAttributeDependencies();
      KStar kStar0 = new KStar();
      Capabilities capabilities1 = kStar0.getCapabilities();
      capabilities1.test(instances0);
      capabilities1.enableAllClassDependencies();
      capabilities0.assign(capabilities1);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      Capabilities capabilities2 = lWL0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      lWL0.setDebug(true);
      capabilities2.getAttributeCapabilities();
      capabilities2.disableAllAttributeDependencies();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normTipText();
      testInstances0.generate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      
      naiveBayesMultinomialText0.m_periodicP = 651;
      Random.setNextRandom(651);
      Random.setNextRandom((-1857));
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1762.1996684730948), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((-12), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(19.0, doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(4.0, doubleArray0);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance(sparseInstance2);
      BallNode ballNode0 = new BallNode(651, 651, (-270), sparseInstance2, (-1857));
      BallNode.calcPivot(ballNode0, ballNode0, (Instances) null);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance3, false);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.730292338790394
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      File file1 = MockFile.createTempFile("\tThe tokenizing algorihtm (classname plus parameters) to use.\n\t(default: ", "<Ex*:uZi>,0<JkQHzMK", file0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords(file1);
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-5668.822896538226);
      doubleArray0[3] = (double) (byte) (-12);
      doubleArray0[4] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(3.0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-1628.5942524282218), doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance1);
      binarySparseInstance0.setValue((-12), (double) (-12));
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance5);
      binarySparseInstance5.mergeInstance(binarySparseInstance4);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      BallNode ballNode0 = new BallNode((-270), (-12), (-12), binarySparseInstance2, 1);
      Instance instance0 = BallNode.calcPivot(ballNode0, ballNode0, (Instances) null);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(instance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "cc/)";
      stringArray0[3] = "";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.getAbsoluteFile();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFile mockFile2 = new MockFile(file0, "y\"}'-=G\"UO4r43WJ");
      mockFile2.getAbsoluteFile();
      mockFile2.getAbsolutePath();
      mockFile2.setReadable(false);
      MockFile mockFile3 = new MockFile("");
      file0.setReadOnly();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
      
      String string1 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getUseStopList();
      String string2 = naiveBayesMultinomialText1.normalizeDocLengthTipText();
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string2);
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.370318976568278
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "C4'K/7{}yc/mNgf";
      stringArray0[1] = "cc/)";
      stringArray0[3] = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      stringArray0[4] = "14th International Joint Conference on Articial Intelligence";
      stringArray0[5] = "";
      stringArray0[6] = "rn&axH+)i";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "BHPv5i/wV*NJ=e");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.setOptions(stringArray1);
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.270548742910856
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      File file0 = sGDText1.getStopwords();
      File file1 = MockFile.createTempFile("s-l~n)w~v,R?>v)", "s-l~n)w~v,R?>v)", file0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords(file1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((-12), doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-12);
      intArray0[2] = 0;
      intArray0[3] = (-12);
      intArray0[4] = (-12);
      intArray0[5] = (-12);
      intArray0[6] = 1;
      intArray0[7] = (-12);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(19.0, intArray0, 15);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance1);
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance3);
      SparseInstance sparseInstance5 = new SparseInstance((-12), doubleArray0, intArray0, 682);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance5);
      SparseInstance sparseInstance6 = new SparseInstance(sparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.921381470533654
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.m_t = 772.5;
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.m_leplace = 0.0;
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      int int0 = 1606;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      Random.setNextRandom(1606);
      naiveBayesMultinomialText0.setNorm(1606);
      try { 
        AbstractClassifier.forName("ezqF5(pGWd@", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: ezqF5(pGWd@
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.3098849832717785
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setDebug(true);
      MockFile mockFile0 = new MockFile("hV:lcw'T", "hV:lcw'T");
      mockFile0.toURI();
      mockFile0.delete();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.m_probOfClass = null;
      naiveBayesMultinomialText0.getNorm();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "hV:lcw'T";
      stringArray0[1] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[2] = "hV:lcw'T";
      stringArray0[3] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[4] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[5] = "-lnorm";
      stringArray0[6] = "hV:lcw'T";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, int0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0506636431758234
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      SGDText sGDText0 = new SGDText();
      sGDText0.getStemmer();
      naiveBayesMultinomialText0.setNorm(0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NullStemmer nullStemmer0 = (NullStemmer)naiveBayesMultinomialText1.m_stemmer;
      NullStemmer nullStemmer1 = (NullStemmer)naiveBayesMultinomialText1.m_stemmer;
      naiveBayesMultinomialText0.setStemmer(nullStemmer1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.setPeriodicPruning(0);
      naiveBayesMultinomialText1.listOptions();
      naiveBayesMultinomialText0.setLNorm(0);
      naiveBayesMultinomialText1.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText1.getTokenizer();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      NaiveBayesMultinomialText.main(stringArray0);
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      // Undeclared exception!
      try { 
        testInstances0.getRelationalFormat((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 741.6059880026148;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 741.6059880026148;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      int[] intArray0 = new int[9];
      intArray0[0] = 10000;
      intArray0[1] = (-8);
      intArray0[2] = 2858;
      intArray0[3] = 1;
      intArray0[4] = 2013265920;
      intArray0[5] = (-1843);
      intArray0[6] = 15000;
      intArray0[7] = (-2490);
      intArray0[8] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance(741.6059880026148, doubleArray0, intArray0, 10000);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.259263945228695
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-stemmer";
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      alphabeticTokenizer0.getRevision();
      naiveBayesMultinomialText0.setTokenizer(alphabeticTokenizer0);
      stringArray0[1] = "hA`|";
      stringArray0[2] = "&{{BkF\"o1.<c";
      stringArray0[3] = "0)";
      stringArray0[4] = "stopwords";
      stringArray0[5] = "/FN^?JkuV";
      stringArray0[6] = "  Precision  Recall";
      System.setCurrentTimeMillis((-1L));
      stringArray0[7] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = (-23);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning((-23));
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      AbstractClassifier.makeCopy(serializedClassifier0);
      serializedClassifier1.getModelFile();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      OneR oneR0 = new OneR();
      int int0 = 92;
      Bagging bagging0 = new Bagging();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 92;
      doubleArray0[1] = 5.0;
      DenseInstance denseInstance0 = new DenseInstance(5.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.649669942596342
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "C4'K/7{}yc/mNgf";
      stringArray0[1] = "cc/)";
      stringArray0[3] = "";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[4] = (byte)6;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringArray0[4] = "14th International Joint Conference on Articial Intelligence";
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, ")nVX");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      sGDText1.getStopwords();
      MockFile mockFile0 = new MockFile("Tin Kam Ho", "Tin Kam Ho");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.getLowercaseTokens();
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals("The stemming algorithm to use on the words.", string0);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "cc/)";
      stringArray0[3] = "";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      File file1 = MockFile.createTempFile("y\"}'-=G\"UO4r43WJ", (String) null, file0);
      MockFile mockFile0 = new MockFile(file1, "I'J*Vi");
      MockFile mockFile1 = new MockFile(mockFile0, "zwtJ_^QC[)5[[\"|");
      mockFile1.setReadable(true);
      MockFile mockFile2 = new MockFile("y\"}'-=G\"UO4r43WJ", "");
      mockFile1.setReadOnly();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords(mockFile1);
      MockFile mockFile3 = new MockFile("\nPC space transformed back to original space.\n(Note: can't evaluate attributes in the original space)\n");
      naiveBayesMultinomialText0.setStopwords(file1);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "C4'K/7{}yc/mNgf";
      stringArray0[1] = "cc/)";
      stringArray0[3] = "";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)6;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringArray0[4] = "14th International Joint Conference on Articial Intelligence";
      stringArray0[5] = "";
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, ")nVX");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "14th International Joint Conference on Articial Intelligence");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency((-679.0));
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      Random.setNextRandom((-1));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom((-1857));
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStemmer();
      OneR oneR0 = new OneR();
      Bagging bagging0 = new Bagging();
      AbstractClassifier.makeCopies(serializedClassifier0, 1224);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      try { 
        principalComponents1.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8413307336453153
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_stopwordsFile = null;
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 1555);
      naiveBayesMultinomialText0.m_minWordP = 0.0;
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.stemString(".RTF?&s");
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      naiveBayesMultinomialText0.setNorm(0.0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.3716100238072846
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-stemmer";
      stringArray0[1] = "hA`|";
      stringArray0[2] = "&{{BkF\"o1.<c";
      stringArray0[3] = "0)";
      stringArray0[4] = "stopwords";
      stringArray0[5] = "/FN^?JkuV";
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      stringArray0[6] = "  Precision  Recall";
      stringArray0[7] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8226867707962464
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-stemmer";
      stringArray0[1] = "hA`|";
      stringArray0[2] = "&{{BkF\"o1.<c";
      stringArray0[3] = "0)";
      stringArray0[4] = "stopwords";
      stringArray0[5] = "/FN^?JkuV";
      stringArray0[6] = "  Precision  Recall";
      int[] intArray0 = new int[4];
      intArray0[0] = 668;
      intArray0[1] = 2154;
      intArray0[2] = (-1108);
      intArray0[3] = 15;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-11.0), intArray0, (-1108));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.m_leplace = 5.0;
      naiveBayesMultinomialText1.m_periodicP = 5272;
      naiveBayesMultinomialText1.getOptions();
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3716100238072846
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      stringArray0[0] = "-stemmer";
      naiveBayesMultinomialText0.setNorm((-2023.5032296));
      stringArray0[1] = "hA`|";
      stringArray0[2] = "&{{BkF\"o1.<c";
      stringArray0[3] = "0)";
      stringArray0[4] = "stopwords";
      stringArray0[5] = "/FN^?JkuV";
      stringArray0[6] = "  Precision  Recall";
      stringArray0[7] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)30;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)30;
      SparseInstance sparseInstance0 = new SparseInstance((byte) (-12), doubleArray0, intArray0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance2);
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance0);
      DenseInstance denseInstance1 = (DenseInstance)denseInstance0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance3);
      binarySparseInstance0.deleteAttributeAt((-12));
      SparseInstance sparseInstance5 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance6 = new SparseInstance(sparseInstance3);
      DenseInstance denseInstance2 = (DenseInstance)denseInstance1.copy();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance1);
      DenseInstance denseInstance3 = new DenseInstance(denseInstance2);
      binarySparseInstance0.mergeInstance(denseInstance3);
      binarySparseInstance0.deleteAttributeAt((-2198));
      SparseInstance sparseInstance7 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(denseInstance1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((byte)30, intArray0, (-12));
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(sparseInstance3);
      SparseInstance sparseInstance8 = new SparseInstance(sparseInstance1);
      SparseInstance sparseInstance9 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance10 = new SparseInstance((-12), doubleArray0, intArray0, (-12));
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance11 = new SparseInstance((SparseInstance) binarySparseInstance5);
      sparseInstance10.isMissing((-12));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)30;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)30;
      intArray0[1] = (int) (byte) (-12);
      SparseInstance sparseInstance0 = new SparseInstance((byte) (-12), doubleArray0, intArray0, (-12));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance2);
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance0);
      DenseInstance denseInstance1 = (DenseInstance)denseInstance0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance3);
      binarySparseInstance0.deleteAttributeAt((-12));
      SparseInstance sparseInstance5 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance6 = new SparseInstance(sparseInstance3);
      DenseInstance denseInstance2 = (DenseInstance)denseInstance1.copy();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance1);
      DenseInstance denseInstance3 = new DenseInstance(denseInstance2);
      binarySparseInstance0.mergeInstance(denseInstance3);
      binarySparseInstance0.deleteAttributeAt((-2198));
      SparseInstance sparseInstance7 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(denseInstance1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((byte)30, intArray0, (-12));
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(sparseInstance3);
      SparseInstance sparseInstance8 = new SparseInstance(sparseInstance1);
      SparseInstance sparseInstance9 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance10 = new SparseInstance((-12), doubleArray0, intArray0, (-12));
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance11 = new SparseInstance((SparseInstance) binarySparseInstance5);
      sparseInstance8.isMissing((-12));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 122);
      naiveBayesMultinomialText0.m_normalize = true;
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      naiveBayesMultinomialText0.m_lnorm = (double) 122;
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.globalInfo();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.useStopListTipText();
      String string0 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.4868131519170964
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      capabilities0.disableAllAttributeDependencies();
      KStar kStar0 = new KStar();
      Capabilities capabilities1 = Capabilities.forInstances(instances0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities1.enableDependency(capabilities_Capability0);
      capabilities1.assign(capabilities0);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      Capabilities capabilities2 = lWL1.getCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      stringKernel0.setPruningMethod(selectedTag0);
      lWL1.setDebug(true);
      Capabilities capabilities3 = capabilities2.getAttributeCapabilities();
      capabilities3.and(capabilities0);
      capabilities3.disableAllAttributeDependencies();
      String string0 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string0);
      
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string1 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string1);
      
      String string2 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string2);
      
      testInstances0.generate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      String string3 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string3);
      
      String string4 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string4);
      
      naiveBayesMultinomialText0.stemmerTipText();
      String string5 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string5);
      
      String string6 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string6);
      
      String string7 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string7);
      
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.3716100238072846
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-stemmer";
      stringArray0[1] = "`|";
      stringArray0[2] = "`|";
      stringArray0[3] = "ca~TC]Dth-N=Tf?";
      stringArray0[4] = "stopwords";
      stringArray0[5] = "/FN^?JkuV";
      stringArray0[6] = "  Precision  Recall";
      naiveBayesMultinomialText0.setLNorm(1478.696439160691);
      stringArray0[7] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.2407560846182575
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "cc/)";
      stringArray0[3] = "";
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      File file1 = MockFile.createTempFile("y\"}'-=G\"UO4r43WJ", (String) null, file0);
      MockFile mockFile0 = new MockFile(file1, "I'J*Vi");
      file1.setReadable(true);
      MockFile mockFile1 = new MockFile("", "");
      mockFile0.setReadOnly();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords(file1);
      MockFile mockFile2 = new MockFile("");
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.2698986887396755
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)30;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)30;
      intArray0[1] = (int) (byte) (-12);
      SparseInstance sparseInstance0 = new SparseInstance((byte) (-12), doubleArray0, intArray0, (-12));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("", 2342);
      binarySparseInstance0.isMissing(attribute0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance0);
      denseInstance0.copy();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance0.deleteAttributeAt((-12));
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2342, intArray0, (-12));
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      SparseInstance sparseInstance5 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(2);
      SparseInstance sparseInstance6 = new SparseInstance((SparseInstance) binarySparseInstance6);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((Instance) sparseInstance3);
      binarySparseInstance3.deleteAttributeAt(36);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(1.0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(12, stringArray0.length);
      
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(11.0);
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.listOptions();
      assertEquals(11.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = new String[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[0] = "C4'K/7{}yc/mNgf";
      stringArray0[1] = "s&{m0_(76S*[XK2#";
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)30;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.createFolder(evoSuiteFile2);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      System.setCurrentTimeMillis((byte)30);
      Locale.getISOCountries();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      sGDText1.getStopwords();
      MockFile mockFile0 = new MockFile("s-l~n)w~v,R?>v)", "s-l~n)w~v,R?>v)");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(boolean0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.2698986887396755
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)30;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)30;
      intArray0[1] = (int) (byte) (-12);
      SparseInstance sparseInstance0 = new SparseInstance((byte) (-12), doubleArray0, intArray0, (-12));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("", 2342);
      binarySparseInstance0.isMissing(attribute0);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance1);
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance0);
      denseInstance0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance3);
      binarySparseInstance0.deleteAttributeAt((-12));
      SparseInstance sparseInstance5 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(100, intArray0, 1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance1);
      SparseInstance sparseInstance6 = new SparseInstance(sparseInstance3);
      SparseInstance sparseInstance7 = new SparseInstance(sparseInstance6);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(denseInstance0);
      binarySparseInstance5.deleteAttributeAt((-12));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      naiveBayesMultinomialText0.setTokenizer(nGramTokenizer0);
      naiveBayesMultinomialText0.setNorm((-1403.6151759606162));
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      try { 
        AbstractClassifier.forName("-stopwords", (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: -stopwords
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "C4'K/7{}yc/mNgf";
      stringArray0[1] = "cc/)";
      stringArray0[3] = "Nominal class";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-12);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)6;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")nVX");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.m_useStopList = false;
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.2567576795645348
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-stemmer";
      naiveBayesMultinomialText0.m_normalize = true;
      stringArray0[1] = "`|";
      stringArray0[2] = "`|";
      stringArray0[3] = "ca~TC]Dth-N=Tf?";
      stringArray0[4] = "stopwords";
      stringArray0[5] = "/FN^?JkuV";
      stringArray0[6] = "  Precision  Recall";
      stringArray0[7] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.4267173502315558
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "gt";
      stringArray0[1] = "\tThe tokenizing algorihtm (classname plus parameters) to use.\n\t(default: ";
      stringArray0[2] = "-W";
      stringArray0[3] = "";
      stringArray0[4] = "G1X";
      stringArray0[5] = "U3IuXPVZ/T4^tN";
      stringArray0[6] = "o3I";
      stringArray0[7] = "aa#Kwz^{IaB)Z";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }
}
