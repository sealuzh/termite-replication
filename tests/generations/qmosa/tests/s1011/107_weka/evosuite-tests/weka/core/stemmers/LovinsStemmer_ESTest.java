/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 22:45:11 GMT 2020
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1543918834050229
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stemString("M|[x");
      String string0 = lovinsStemmer0.stemString("L'pz#`iuR");
      assertEquals("l'pz#`iur", string0);
      
      String string1 = lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      assertEquals("invalis cv revis - not dot!", string1);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("v6olulid");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("^_$A [");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string3 = lovinsStemmer2.stemString("et");
      assertEquals("et", string3);
      
      lovinsStemmer2.stemString("v6olulis");
      lovinsStemmer3.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("Machine Learning");
      lovinsStemmer3.stemString("-]t7\"b/w");
      String string4 = lovinsStemmer2.stemString("umpt");
      assertEquals("um", string4);
      
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string5 = lovinsStemmer0.stemString("FX:#");
      assertEquals("fx:#", string5);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1536380360502165
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("0");
      lovinsStemmer2.toString();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.stemString("(4.");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer3.stemString("~/cumonsend");
      assertEquals("~/cumonsens", string0);
      
      lovinsStemmer2.stemString("idine");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string2 = lovinsStemmer4.stemString("(4.");
      assertEquals("(4.", string2);
      
      lovinsStemmer3.toString();
      String string3 = lovinsStemmer0.stemString("otide");
      assertEquals("ot", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0815281992325687
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")JvdaQOo$}m";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ond");
      lovinsStemmer0.stem(")JvdaQOo$}m");
      lovinsStemmer0.stemString("ons");
      lovinsStemmer0.stem("ons");
      lovinsStemmer0.stemString("documyt");
      lovinsStemmer0.stemString("G381)nP8E{c>gt");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray1 = new String[9];
      stringArray1[0] = "[FcIPN:I{Z8`ZzRt";
      stringArray1[1] = "ons";
      stringArray1[2] = "G381)nP8E{c>gt";
      lovinsStemmer2.stemString("ies");
      String string0 = lovinsStemmer0.stem("G381)nP8E{c>gt");
      lovinsStemmer1.stemString("metr");
      lovinsStemmer2.stemString("]8-?D([");
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.stemString("@mxjEg:s-'Gwd;?8");
      lovinsStemmer0.stemString("ously");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer2.stem("4");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1346164738480717
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stemString("L'pz#`iuR");
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.stemString("istr");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.stemString("invalis cv revis - not dot!");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer7.toString();
      lovinsStemmer7.globalInfo();
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer9 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer10 = new LovinsStemmer();
      lovinsStemmer10.stemString("mit");
      LovinsStemmer lovinsStemmer11 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer12 = new LovinsStemmer();
      lovinsStemmer12.globalInfo();
      LovinsStemmer lovinsStemmer13 = new LovinsStemmer();
      lovinsStemmer13.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0688041501839793
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[3];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ja4lud");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("ja4lus");
      assertEquals("ja4lus", string0);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer3.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string1);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer4.globalInfo();
      lovinsStemmer3.globalInfo();
      lovinsStemmer3.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer5.globalInfo();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      String string2 = lovinsStemmer7.stemString("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capit, as shown he; th standard styl conver to lower ca when nec.", string2);
      
      String string3 = lovinsStemmer6.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      String string4 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1295798795513128
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")JvdaQOo$}m";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ond");
      lovinsStemmer0.stem(")JvdaQOo$}m");
      lovinsStemmer0.stemString("ons");
      lovinsStemmer0.stem("ons");
      lovinsStemmer0.stemString("documyt");
      lovinsStemmer0.stemString("G381)nP8E{c>gt");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      String[] stringArray1 = new String[9];
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString(")jvdaqoo$}m");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.stemString("BMm!2;c)fQN0Lr&];");
      lovinsStemmer1.stemString("pK^UQ?6.f1<G{");
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("CZ");
      String string1 = lovinsStemmer2.stemString("^^2<?J-aPp");
      assertEquals("^^2<?j-ap", string1);
      
      lovinsStemmer1.toString();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.094577323706648
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("The International Standard Serial Number. Used to identify a journal.");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.stemString("cid");
      assertEquals("cis", string0);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("The International Standard Serial Number. Used to identify a journal.");
      assertEquals("th intern standard ser number. us to identif a journ.", string1);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.");
      lovinsStemmer3.stemString("th intern standard ser number. us to identif a journ.");
      lovinsStemmer4.stemString(":cO9$");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      String string2 = lovinsStemmer7.stemString("Key words used for searching or possibly for annotation.");
      assertEquals("key word us for search or pos for annot.", string2);
      
      String string3 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2905643605325423
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "F";
      stringArray0[1] = "F";
      stringArray0[2] = "F";
      stringArray0[3] = ">4=v6olu,|~`w/KD";
      stringArray0[4] = ">4=v6olu,|~`w/KD";
      stringArray0[5] = "F";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("isbnyt");
      assertEquals("isbnys", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("Tvn:R");
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString(">4=v6olu,|~`w/KD");
      assertEquals(">4=v6olu,|~`w/kd", string2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0848238566671489
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string1);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("");
      lovinsStemmer4.stemString("");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("Machine Learning");
      lovinsStemmer4.stemString("FkLuZkl`^.y");
      lovinsStemmer2.globalInfo();
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0753518036680003
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      String string0 = lovinsStemmer0.stemString("L'pz#`iuR");
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.stemString("invalid CVS revision - not dots!");
      lovinsStemmer4.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volum and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer1.globalInfo();
      lovinsStemmer3.getTechnicalInformation();
      String string1 = lovinsStemmer5.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1442788310952063
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("The price of the document.");
      assertEquals("th pric of th docum.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("th pric of th docum.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.stemString("th pr of th docum.");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1793378224100657
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer2.toString();
      String string1 = lovinsStemmer2.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("oM/+q%emD/");
      lovinsStemmer1.stemString("om/+q%emd/");
      String string2 = lovinsStemmer0.stemString(".xi9,i'/7<h+");
      assertEquals(".xi9,i'/7<h+", string2);
      
      lovinsStemmer1.stemString("mit");
      String string3 = lovinsStemmer0.stemString(",_JH[vwgg^*7");
      assertEquals(",_jh[vwg^*7", string3);
      
      String string4 = lovinsStemmer2.stemString("om/+q%emd/");
      assertEquals("om/+q%emd/", string4);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1125817740998791
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")JvdaQOo$}m";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ond");
      lovinsStemmer0.stem(")JvdaQOo$}m");
      lovinsStemmer0.stemString("ons");
      lovinsStemmer0.stem("ons");
      lovinsStemmer0.stemString("documyt");
      String string0 = lovinsStemmer0.stemString("G381)nP8E{c>gt");
      assertEquals("g381)np8{c>gt", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String[] stringArray1 = new String[9];
      stringArray1[0] = "[FcIPN:I{Z8`ZzRt";
      stringArray1[1] = "ons";
      stringArray1[2] = "G381)nP8E{c>gt";
      stringArray1[3] = "G381)nP8E{c>gt";
      stringArray1[5] = "on";
      lovinsStemmer2.stemString("8034onhesyt");
      stringArray1[6] = "G381)nP8E{c>gt";
      stringArray1[7] = ")JvdaQOo$}m";
      stringArray1[8] = "ond";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer1.stemString("ation");
      lovinsStemmer2.toString();
      lovinsStemmer2.toString();
      String string3 = lovinsStemmer0.stemString(":$mndT");
      assertEquals(":$mndt", string3);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1638487619498388
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("L'pz#`iuR");
      assertEquals("l'pz#`iur", string0);
      
      String string1 = lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      assertEquals("invalis cv revis - not dot!", string1);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.stemString("tex");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.stemString("lux");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string2 = lovinsStemmer5.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stemString("o^jf'3/#l=)QlZfUc^j");
      lovinsStemmer2.stemString("");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer5.stemString("4FBZsc:OxkbON");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      String string3 = lovinsStemmer7.stemString("antialness");
      assertEquals("anti", string3);
      
      lovinsStemmer3.stemString("4FHr{J#:n");
      String string4 = lovinsStemmer4.stemString("luc");
      assertEquals("luc", string4);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.109146968732627
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")JvdaQOo$}m";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("w3MC]B`");
      lovinsStemmer2.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("A work that is printed and bound, but without a named publisher or sponsoring institution.");
      lovinsStemmer2.stemString("a work that is print and bound, but without a nam publishes or sponsor institut.");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stemString(")JvdaQOo$}m");
      String string1 = lovinsStemmer1.stemString(")JvdaQOo$}m");
      assertEquals(")jvdaqo$}m", string1);
      
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1646885601454888
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("L'pz#`iuR");
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("ancies");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("\"}@XV3*pJyvlV/dx.$");
      String string0 = lovinsStemmer2.stemString("\"}@XV3*pJyvlV/dx.$");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("u50kly/x@zh9:");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer4.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.177044897163502
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[1] = "";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("$JDm0A$jC");
      assertEquals("$jdm0$jc", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("!=R.");
      lovinsStemmer0.stemString("<N9}+-+GY1mc@D_s ");
      lovinsStemmer0.stem("}Bp *zr-@At|[X<f)]");
      String string1 = lovinsStemmer1.stemString("iev");
      assertEquals("ief", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.toString();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1621382526727755
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[3];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("iN=0ZROdkiul");
      assertEquals("in=0zrodkiul", string1);
      
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      assertEquals("weka.core.stemmers.lovinsstemmer", string3);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0273431819867946
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "Key words used for searching or possibly for annotation.";
      String[] stringArray0 = new String[1];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("Key words used for searching or possibly for annotation.");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("iful");
      lovinsStemmer0.stemString("w3MC]B`");
      lovinsStemmer0.stemString("Get option -o: ");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.105113019571212
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "F";
      stringArray0[1] = "";
      stringArray0[2] = "N";
      stringArray0[3] = "N";
      stringArray0[4] = "F";
      stringArray0[5] = "N";
      stringArray0[6] = "";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      lovinsStemmer1.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1175948066396193
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[3];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ja4lud");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("ja4lus");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string0 = lovinsStemmer3.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string0);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer4.globalInfo();
      lovinsStemmer3.globalInfo();
      lovinsStemmer3.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer5.globalInfo();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("L'pz#`iuR");
      assertEquals("l'pz#`iur", string1);
      
      lovinsStemmer4.stemString(", editors, ");
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2019606040692377
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("K;?*./.WO249PzP");
      lovinsStemmer0.stemString("yz");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("4+LbQ5e.Q6");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("String should not finish with ");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("yz");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.194725925301723
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Key words used for searching or possibly for annotation.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("btvrud");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("xlblud");
      String string0 = lovinsStemmer0.stemString("xlblud");
      assertEquals("xlblus", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1841618159090215
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")JvdaQOo$}m";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("cisend");
      lovinsStemmer2.stemString(")JvdQOo$}m");
      String string0 = lovinsStemmer0.stemString("V[q!;:kL$GP");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1160452568871542
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer2.stemString("a)<%rMn?RQDB]KLMX6");
      lovinsStemmer2.stemString("?)/N0");
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer4.stemString("u001ondlux");
      assertEquals("u001ondluc", string1);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1073344972497108
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Key words used for searching or possibly for annotation.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("et");
      lovinsStemmer0.stemString("izable");
      lovinsStemmer0.stemString("ical");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1462021230038082
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("^(/^ciyO~^");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString(">9&JECar");
      lovinsStemmer1.stemString("w'nixg(}hlop{39dend");
      lovinsStemmer0.stemString("` oehova/erid");
      lovinsStemmer1.stemString("` oehova/erid");
      lovinsStemmer1.stemString("eC7<+lP:");
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "w'nixg(}hlop{39dend";
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1351800299106833
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Key words used for searching or possibly for annotation.");
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      lovinsStemmer0.stem("8034");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("key word us for search or pos for annot.");
      lovinsStemmer1.stemString("Illegal options: ");
      lovinsStemmer1.stem("ross quinlanet");
      lovinsStemmer0.stem("e<!Y=Pr");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1793378224100657
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer2.stemString("invalid CVS revision - not dots!");
      assertEquals("invalis cv revis - not dot!", string0);
      
      String string1 = lovinsStemmer3.stemString("Can't construct a path to file relative to user dir.");
      assertEquals("can't construc a path to fil rel to user dir.", string1);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("edition");
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer7.toString();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1015348638120517
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      String string0 = lovinsStemmer0.stemString("L'pz#`iuR");
      assertEquals("l'pz#`iur", string0);
      
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string3);
      
      lovinsStemmer1.stemString("kw{K03JeQkG1m<");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.stemString("Cn't add object to itself!");
      lovinsStemmer2.stemString("cn't ad object to itself!");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.stemString("kw{K03JeQkG1m<");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer4.stemString("cn't ad object to itself!");
      lovinsStemmer2.stemString("weka.core.stemmers.LovinsStemmer");
      String string4 = lovinsStemmer5.stemString("invalid CVS revision - not dots!");
      assertEquals("invalis cv revis - not dot!", string4);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1456243509013966
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stemString("8034onhesyt");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("A journal name. Abbreviations are provided for many journals.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("Can't find class called: ");
      lovinsStemmer0.stemString("et");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.toString();
      lovinsStemmer0.stemString("x>EtJ>PZo[O*(V}5R");
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.globalInfo();
      String string0 = lovinsStemmer0.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.137559500580129
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("mit");
      lovinsStemmer0.stemString("annotvad");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("mis");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stemString("annoterid");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("invalid CVS revision - not dots!");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1616535864288153
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("NeN7-,uKJwpoKad%gx");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("w3mcex");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("NeN7-,uKJwpoKad%gx");
      lovinsStemmer2.stemString("publisher");
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer3.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.2676896795909784
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "F";
      stringArray0[1] = "";
      stringArray0[2] = "N";
      stringArray0[3] = "N";
      stringArray0[4] = "<#CmmnrZ";
      stringArray0[5] = "<#CmmnrZ";
      stringArray0[6] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("?pzk~{f1BUxVPJ?");
      assertEquals("?pzk~{f1buxvpj?", string0);
      
      lovinsStemmer1.stemString("");
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.stemString("intmisenddex");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer1.stemString("dex");
      assertEquals("dic", string2);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9720934226166916
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("ev8mitix");
      String string0 = lovinsStemmer2.stemString("ev8mitic");
      assertEquals("ev8mis", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.136392953766493
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[1] = "";
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("iful");
      lovinsStemmer0.stemString("ishyz");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("An article from a journal or magazine.");
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.2918792824598198
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("8080ax");
      String string0 = lovinsStemmer0.stemString(":w/HFH%//");
      assertEquals(":w/hfh%//", string0);
      
      String string1 = lovinsStemmer0.stemString("T@KnBB");
      assertEquals("t@knb", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1531939053248463
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")JvdaQOo$}m";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("bex");
      String string0 = lovinsStemmer1.stemString("DbMIX?t):t9+PDk1");
      lovinsStemmer0.stemString("A classname has to be provided with the -W option!");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1721662998852407
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("ca0lux");
      String string0 = lovinsStemmer1.stemString("ca0ax");
      assertEquals("ca0ac", string0);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("m##Z!7U94|1SDEm");
      lovinsStemmer3.stemString("m##Z!7U94|1SDEm");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string1 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer6.toString();
      String string2 = lovinsStemmer2.stemString("A part of a book having its own title.");
      assertEquals("a part of a book hav it own titl.", string2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.166802240410834
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("annotend");
      String string0 = lovinsStemmer1.stemString("ar\tf;R`qLd");
      assertEquals("ar\tf;r`qld", string0);
      
      lovinsStemmer1.stemString("");
      String string1 = lovinsStemmer1.stemString("end");
      assertEquals("ens", string1);
      
      String string2 = lovinsStemmer0.stemString("annotens");
      assertEquals("annoten", string2);
      
      String string3 = lovinsStemmer0.stemString("entness");
      assertEquals("ent", string3);
      
      lovinsStemmer1.toString();
      String string4 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.228068094415548
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Key words used for searching or possibly for annotation.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("dP");
      lovinsStemmer0.stemString("alend");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1391588503441652
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[3];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ja4lud");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("ja4lus");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("cid");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer6.globalInfo();
      lovinsStemmer4.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.globalInfo();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer9 = new LovinsStemmer();
      String string0 = lovinsStemmer9.stemString("Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title field instead.");
      assertEquals("titl of a book, part of which is being cit. se th latic book for how to typ titl. for book entr, us th titl field instead.", string0);
      
      String string1 = lovinsStemmer1.stemString("appearher");
      assertEquals("appearhes", string1);
      
      String string2 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1160452568871542
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string0 = lovinsStemmer4.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer2.stemString("annotpand");
      String string1 = lovinsStemmer0.stemString("3&IdxcQ5squ[@/:u");
      assertEquals("3&idxcq5squ[@/:u", string1);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      lovinsStemmer3.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer4.toString();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      String string2 = lovinsStemmer7.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer7.stemString("4kLxZ");
      assertEquals("4klxz", string3);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.2893216521202953
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pand";
      stringArray0[1] = "23(U)X|0J6VQ VKd%";
      stringArray0[2] = "KLCcf++wD^~5";
      stringArray0[3] = "8034ex";
      stringArray0[4] = "u";
      stringArray0[5] = "month";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("month");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.stemString("23(U)X|0J6VQ VKd%");
      String string0 = lovinsStemmer0.stemString("23(u)x|0j6vq vkd%");
      assertEquals("23(u)x|0j6vq vkd%", string0);
      
      String string1 = lovinsStemmer1.stemString("ond");
      assertEquals("ons", string1);
      
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.toString();
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.120726115999937
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("icsmuad");
      String string0 = lovinsStemmer1.stemString("icsmbex");
      assertEquals("icsmbic", string0);
      
      String string1 = lovinsStemmer2.stemString("0cVK(hlDQ4c47e");
      assertEquals("0cvk(hldq4c47", string1);
      
      String string2 = lovinsStemmer0.stemString("icsmuas");
      assertEquals("icsmu", string2);
      
      lovinsStemmer0.stemString("nis");
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2799375547154466
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Key words used for searching or possibly for annotation.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("btvrud");
      lovinsStemmer0.stemString("ckew]c");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1383816939337545
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Key words.used for searching or possibly for antotation.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("\tUses lowercase strings.");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("year");
      lovinsStemmer1.stemString("G wXwg+h^ry`b");
      // Undeclared exception!
      try { 
        lovinsStemmer2.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1346164738480717
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("ond");
      String string0 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer4.stemString("[r'$=aTT");
      assertEquals("[r'$=at", string1);
      
      lovinsStemmer4.toString();
      lovinsStemmer2.stemString("U{Kb?v#}I=eh`");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1620611776170573
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[7];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("E>V|'J7cu2QdG~yZ");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("wek.cor.stemmer.lovinsstemmer");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.stemString("LWk");
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer2.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0874493775681013
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("L'pz#`iuR");
      assertEquals("l'pz#`iur", string0);
      
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string3);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("");
      lovinsStemmer4.stemString("");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("Machine Learning");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("pex");
      lovinsStemmer2.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer4.stemString("g<aYe.");
      String string4 = lovinsStemmer1.stemString("invalis cv revis - not dot!");
      assertEquals("inval cv rev - not dot!", string4);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1139301197902056
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      String string0 = lovinsStemmer0.stemString("L'pz#`iuR");
      assertEquals("l'pz#`iur", string0);
      
      String string1 = lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      assertEquals("invalis cv revis - not dot!", string1);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getRevision();
      String string3 = lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string3);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.stemString("invalid CVS revision - not dots!");
      lovinsStemmer3.stemString("lid");
      String string4 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string4);
      
      lovinsStemmer4.stemString("+U5hA+}q[1?bGe ");
      String string5 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string5);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1347793070305652
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Key words used for searching or possibly for annotation.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Key words used for searching or possibly for annotation.");
      assertEquals("key word us for search or pos for annot.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.stemString("N");
      lovinsStemmer0.stemString("ev8erid");
      String string1 = lovinsStemmer0.stemString("ev8mit");
      assertEquals("ev8mis", string1);
      
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.toString();
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1268716429784909
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      assertEquals("invalis cv revis - not dot!", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("a)<%rMn?RQDB]KLMX6");
      lovinsStemmer2.stemString("?)/N0");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("\"8\"3BD/\"K97=CWZ=h");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer3.stemString("invalis cv revis - not dot!");
      String string3 = lovinsStemmer0.stemString("inval cv rev - not dot!");
      assertEquals("inv cv rev - not dot!", string3);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.305995003030765
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "F";
      stringArray0[1] = "";
      stringArray0[2] = "N";
      stringArray0[3] = "N";
      lovinsStemmer0.stemString("h");
      lovinsStemmer0.stemString("agf}huWj57kuTJeQ");
      lovinsStemmer0.stemString("d03pl.");
      lovinsStemmer0.stemString("&Dn}*");
      lovinsStemmer0.stemString("N");
      lovinsStemmer0.stemString("4xuxCeGJ,C");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("F");
      LovinsStemmer.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1313068753804731
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "F";
      stringArray0[1] = "F";
      stringArray0[2] = "F";
      stringArray0[3] = ">4=v6olu,|~`w/KD";
      lovinsStemmer0.stemString("");
      stringArray0[4] = ">4=v6olu,|~`w/KD";
      stringArray0[5] = "F";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString(">4=v6olu,|~`w/KD");
      assertEquals(">4=v6olu,|~`w/kd", string0);
      
      String string1 = lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string1);
      
      String string2 = lovinsStemmer0.stemString(";%(xO'y\"y$JA4 wh");
      assertEquals(";%(xo'\"y$ja4 wh", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.05494962980403
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[3];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("F");
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer1.stemString("name(s) of editor(s), typed as indicated in the latex book. if there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.yt");
      String string1 = lovinsStemmer1.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.yt");
      assertEquals("nam(s) of edit(s), typ as ind in th lat book. if ther is al an author field, then th edit field giv th edit of th book or collect in which th refer appear.yt", string1);
      
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }
}
