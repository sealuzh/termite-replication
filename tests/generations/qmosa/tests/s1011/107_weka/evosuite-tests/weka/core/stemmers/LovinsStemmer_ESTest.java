/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 13:37:15 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6575444088557707
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("*$O1iSD");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("PROCEEDINGS");
      lovinsStemmer2.stemString("proceed");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("lux");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("arizable");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.stemString("proceed");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("NeN7-,uKJwpoKad%gx");
      lovinsStemmer2.stemString("7JSR");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.stemString("{YzU2?i");
      lovinsStemmer1.stemString("proceed");
      lovinsStemmer5.globalInfo();
      lovinsStemmer2.stemString("cidtextex");
      lovinsStemmer2.stemString("yUDh8e?16");
      lovinsStemmer0.stemString("JIHqi[q ");
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.636204828861591
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("ZnqfPHMeEN#&");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stemString("%3E-5R*Gz[$S2H");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer2.getTechnicalInformation();
      String string1 = lovinsStemmer2.stemString("Bl.z'56{X");
      assertEquals("bl.z'56{x", string1);
      
      lovinsStemmer2.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6139355522458039
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("invalis cv revis - not dot!");
      lovinsStemmer0.stemString("umpt");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5897753980088636
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      lovinsStemmer1.stemString("gtpther");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("T!+2Wq|2p8{J\"5< ");
      lovinsStemmer1.stemString(" *9t~dE5d");
      String string0 = lovinsStemmer4.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer2.stemString("icide");
      lovinsStemmer3.globalInfo();
      String string1 = lovinsStemmer4.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6421681730971391
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      stringArray0[1] = "";
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("$JDm0A$jC");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("Warning, unable to load properties file(s) from system resource (Utils.java): ");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer4.stemString("ev8mitix");
      lovinsStemmer0.stemString("$jdm0$jc");
      lovinsStemmer3.stemString("ev8mitic");
      lovinsStemmer2.stemString("");
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer4.stemString(" g^7\"bH:=W51`4");
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer4.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer4.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5978507016628865
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")JvdaQOo$}m";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ond");
      lovinsStemmer0.stem(")JvdaQOo$}m");
      lovinsStemmer0.stemString("ons");
      lovinsStemmer0.stem("ons");
      lovinsStemmer0.stemString("documyt");
      lovinsStemmer0.stemString("G381)nP8E{c>gt");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.stemString("g381)np8{c>gt");
      String[] stringArray1 = new String[9];
      stringArray1[0] = "[FcIPN:I{Z8`ZzRt";
      stringArray1[1] = "ons";
      stringArray1[2] = "G381)nP8E{c>gt";
      lovinsStemmer2.stemString("ies");
      lovinsStemmer0.stem("G381)nP8E{c>gt");
      lovinsStemmer1.stemString("metr");
      lovinsStemmer2.stemString("]8-?D([");
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.stemString("@mxjEg:s-'Gwd;?8");
      String string0 = lovinsStemmer0.stemString("ously");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer2.stem("4");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6464625540136721
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[0] = "F";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("j%G+WUK35#p'!|Y");
      assertEquals("j%g+wuk35#p'!|y", string0);
      
      lovinsStemmer1.stemString("istr");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6021125894415638
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[16];
      stringArray0[0] = "F";
      stringArray0[1] = "F";
      stringArray0[2] = "F";
      stringArray0[4] = ">4=Wv6olu,|~`w/KD";
      stringArray0[5] = "F";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString(">4=Wv6olu,|~`w/KD");
      assertEquals(">4=wv6olu,|~`w/kd", string0);
      
      String string1 = lovinsStemmer0.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string1);
      
      String string2 = lovinsStemmer0.stemString("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capit, as shown he; th standard styl conver to lower ca when nec.", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.584144458469355
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")JvdaQOo$}m";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("BP)x3oTg+Rijpp.");
      assertEquals("bp)x3otg+rijp.", string0);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.getTechnicalInformation();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer7.globalInfo();
      String string1 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer6.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.647764291838744
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("NeN7-,uKJwpoKad%gx");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmerpand");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("ax");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmerpans");
      String string0 = lovinsStemmer2.stemString("^erR");
      assertEquals("^er", string0);
      
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ax");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string1 = lovinsStemmer5.stemString("weka.core.stemmers.lovinsstemmerpand");
      assertEquals("wek.cor.stemmer.lovinsstemmerpans", string1);
      
      String string2 = lovinsStemmer2.stemString("ax");
      assertEquals("ax", string2);
      
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer6.globalInfo();
      lovinsStemmer5.stemString("wek.cor.stemmer.lovinsstemmerpan");
      lovinsStemmer4.stemString("^er");
      String string3 = lovinsStemmer5.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5827428277119884
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("");
      lovinsStemmer1.globalInfo();
      lovinsStemmer3.stemString("");
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("Machine Learning");
      assertEquals("mach learn", string2);
      
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer3.globalInfo();
      String string3 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.576638765086337
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stemString("L'pz#`iuR");
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer3.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volum and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer4.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer4.toString();
      String string3 = lovinsStemmer2.stemString("L'pz#`iuR");
      assertEquals("l'pz#`iur", string3);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6314022097796532
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("The price of the document.");
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("th pric of th docum.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.stemString("th pr of th docum.");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("mastersthesis");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "mastersthesis";
      stringArray1[1] = "th pr of th docum.";
      stringArray1[2] = "th pr of th docum.";
      stringArray1[3] = "The price of the document.";
      stringArray1[4] = "mastersthes";
      stringArray1[5] = "th pr of th docum.";
      LovinsStemmer.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6174920983902275
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("NeN7-,uKJwpoKad%gx");
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("arizable");
      lovinsStemmer1.stemString("NeN7-,uKJwpoKad%gx");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.stemString("weka.core.Option");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("lux");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.stemString("y");
      lovinsStemmer5.stemString("^S2:EihGGy,C,p++d");
      lovinsStemmer1.stemString("luc");
      lovinsStemmer2.stemString("weka.core.Option");
      lovinsStemmer4.stemString("y");
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6841587438969159
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "IRy5@=bK:/8!";
      stringArray1[1] = ",.&lSg#:F|k9";
      stringArray1[2] = "yt";
      stringArray1[3] = "\n\n";
      stringArray1[4] = "rudrud";
      stringArray1[5] = "LG4:D PUZR%P~b";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("as]hO!&@x");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString(",.&lSg#:F|k9");
      lovinsStemmer2.stemString("yt");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer3.stemString("yt");
      lovinsStemmer2.stemString("ation");
      lovinsStemmer1.stemString("as]hO!&@x");
      lovinsStemmer2.stemString("y.s;");
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6077695582643075
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")JvdaQOo$}m";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("w3MC]B`");
      lovinsStemmer2.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("A work that is printed and bound, but without a named publisher or sponsoring institution.");
      lovinsStemmer2.stemString("a work that is print and bound, but without a nam publishes or sponsor institut.");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stemString(")JvdaQOo$}m");
      String string1 = lovinsStemmer1.stemString(")JvdaQOo$}m");
      assertEquals(")jvdaqo$}m", string1);
      
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6131548707864378
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stemString("L'pz#`iuR");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("l'pz#`iur");
      String string1 = lovinsStemmer1.stemString("l'pz#`iur");
      assertEquals("l'pz#`iur", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string2);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.stemString("invalid CVS revision - not dots!");
      String string3 = lovinsStemmer4.stemString("KO:8hlL");
      assertEquals("ko:8hl", string3);
      
      LovinsStemmer.main(stringArray0);
      String string4 = lovinsStemmer3.stemString("yz");
      assertEquals("yz", string4);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer0.stemString("T5=7OH2>4|w@l");
      lovinsStemmer5.stemString("A part of a book having its own title.");
      String string5 = lovinsStemmer1.stemString("erid");
      assertEquals("eris", string5);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.62602496908913
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stemString("L'pz#`iuR");
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("9daKrX#hTjtT,");
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ancies");
      lovinsStemmer1.globalInfo();
      lovinsStemmer3.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7803802956647319
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[1] = "";
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("eriddex");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.stemString("<N9}+-+GY1mc@D_s ");
      lovinsStemmer1.stemString("elpand");
      lovinsStemmer2.stem(":");
      lovinsStemmer1.stem("}Bp *zr-@At|[X<f)]");
      lovinsStemmer2.stemString("iev");
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer0.stem("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer3.toString();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6593133939157134
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[3];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("iN=0ZROdkiul");
      assertEquals("in=0zrodkiul", string2);
      
      lovinsStemmer1.globalInfo();
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      assertEquals("weka.core.stemmers.lovinsstemmer", string4);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.602910376399406
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "F";
      stringArray0[1] = "";
      stringArray0[2] = "N";
      stringArray0[3] = "N";
      stringArray0[4] = "F";
      stringArray0[5] = "N";
      stringArray0[6] = "";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      lovinsStemmer1.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6625264339513102
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")JvdaQOo$}m";
      stringArray0[1] = ")JvdaQOo$}m";
      stringArray0[2] = ")JvdaQOo$}m";
      stringArray0[3] = ")JvdaQOo$}m";
      stringArray0[4] = "lisond";
      stringArray0[5] = ")JvdaQOo$}m";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "lisond";
      stringArray1[1] = ")JvdaQOo$}m";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("|m>e-L4ORtWdMD\"fm`");
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("Morgan Kaufmann Publishers");
      lovinsStemmer1.stemString("liduad");
      lovinsStemmer1.stemString("WB:cY(ME=SI");
      String string0 = lovinsStemmer2.stemString("K");
      lovinsStemmer0.stemString(")JvdaQOo$}m");
      lovinsStemmer1.stemString("k");
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5900861537466984
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("");
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer3.stemString("erisrud");
      lovinsStemmer1.stemString("erisrud");
      lovinsStemmer0.stemString("erisrus");
      lovinsStemmer2.toString();
      lovinsStemmer3.stemString("2#r%");
      lovinsStemmer3.stemString("weka.core.stemmers.LovinsStemmer");
      String string3 = lovinsStemmer3.stemString("erisrus");
      assertEquals("erisrus", string3);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.676722540184847
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")JvdaQOo$}m";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("w3MC]B`");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString(")JvdaQOo$}m");
      lovinsStemmer1.stemString("gtoptex");
      lovinsStemmer2.stemString("lus");
      String string0 = lovinsStemmer0.stemString("dex");
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6966974461745008
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("K;?*./.WO249PzP");
      lovinsStemmer0.stemString("yz");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("4+LbQ5e.Q6");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("String should not finish with ");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("yz");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6292566018501118
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "F";
      stringArray0[1] = "F";
      stringArray0[2] = "F";
      stringArray0[3] = ">4=v6olu,|~`w/KD";
      stringArray0[4] = ">4=v6olu,|~`w/KD";
      stringArray0[5] = "F";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString(">4=v6olu,|~`w/KD");
      String string0 = lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string0);
      
      lovinsStemmer0.stemString(";%(xO'y\"y$JA4 wh");
      String string1 = lovinsStemmer0.stemString(";%(xo'\"y$ja4 wh");
      assertEquals(";%(xo'\"y$ja4 wh", string1);
      
      lovinsStemmer0.stemString("8txplud");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.658360555522575
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[0] = "F";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("cisend");
      String string0 = lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6173728974287913
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[3];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("F");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("ical");
      lovinsStemmer0.stemString("f");
      lovinsStemmer2.stemString("");
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.toString();
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6313777800230584
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Key words.used for searching or possibly for antotation.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("\tUses lowercase strings.");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("Key words.used for searching or possibly for antotation.");
      assertEquals("key word.us for search or pos for antot.", string1);
      
      lovinsStemmer2.stemString("key word.us for search or pos for antot.");
      lovinsStemmer2.toString();
      String string2 = lovinsStemmer0.stemString("izations");
      assertEquals("izat", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5241990249008073
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Key words ued for searchingor possibly for annotation.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("NeN7-,uKJwpoKad%gx");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("arizable");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("nen7-,ukjwpokad%gx");
      String string0 = lovinsStemmer1.stemString("arizable");
      assertEquals("ar", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("lux");
      assertEquals("luc", string1);
      
      lovinsStemmer3.stemString("Key words ued for searchingor possibly for annotation.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("D]C1,F");
      lovinsStemmer2.stemString("The Mathematical Reviews number.");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      lovinsStemmer2.stemString("d]c1,f");
      lovinsStemmer3.stemString("invalis cv revis - not enough part separ by dot!");
      lovinsStemmer2.toString();
      String string2 = lovinsStemmer3.stemString("Key words ued for searchingor possibly for annotation.");
      assertEquals("key word ued for searchingor pos for annot.", string2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6324477894735248
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Key words used for searching or possibly for annotation.");
      assertEquals("key word us for search or pos for annot.", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      lovinsStemmer0.stem("8034");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("key word us for search or pos for annot.");
      lovinsStemmer1.stemString("IlHegal opzio~s: ");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stem("ross quinlanet");
      lovinsStemmer0.stem("e<!Y=Pr");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("");
      assertFalse(string3.equals((Object)string1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7108267151052032
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Key words used for searching or possibly for annotation.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("dP");
      lovinsStemmer0.stemString("alend");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.67696815416362
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.stemString("invalid CVS revision - not dots!");
      String string0 = lovinsStemmer3.stemString("Can't construct a path to file relative to user dir.");
      assertEquals("can't construc a path to fil rel to user dir.", string0);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer4.stemString("edition");
      assertEquals("edit", string1);
      
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer7.toString();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6002879810190342
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer4.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string2);
      
      String string3 = lovinsStemmer3.stemString("ISSN");
      assertEquals("issn", string3);
      
      String string4 = lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string4);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6421760750393277
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stemString("8034onhesyt");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A journal name. Abbreviations are provided for many journals.");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("Can't find class called: ");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("x>EtJ>PZo[O*(V}5R");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.62016127510998
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      String string0 = lovinsStemmer0.stemString("L'pz#`iuR");
      assertEquals("l'pz#`iur", string0);
      
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("EDITION");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title field instead.");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("vad");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("titl of a book, part of which is being cit. se th latic book for how to typ titl. for book entr, us th titl field instead.");
      lovinsStemmer4.stemString("INBOOK");
      lovinsStemmer4.globalInfo();
      lovinsStemmer3.globalInfo();
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7691837386990272
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")JvdaQOo$}m";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("lmex");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("ai_");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("uad");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.639447908759766
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Key words ued for searchingor possibly for annotation.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("NeN7-,uKJwpoKad%gx");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("arizable");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("nen7-,ukjwpokad%gx");
      lovinsStemmer1.stemString("arizable");
      String string0 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.stemString("nen7-,ukjwpokad%gx");
      String string1 = lovinsStemmer0.stemString("pudjdex");
      assertEquals("pudjdic", string1);
      
      String string2 = lovinsStemmer1.stemString("arizable");
      assertEquals("ar", string2);
      
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer1.toString();
      assertFalse(string4.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7035329152163488
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.stemString("titlix");
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.668035093084362
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Key words ued for searchingor possibly for annotation.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("wjR5");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("wjR5");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("wjr5");
      lovinsStemmer1.stemString("wjr5");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("lux");
      lovinsStemmer1.stemString("wjr5");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("wjr5");
      lovinsStemmer0.stemString("entyz");
      lovinsStemmer0.stemString("NeN7-,uKJwpoKad%gx");
      lovinsStemmer1.stemString("entlid");
      lovinsStemmer1.stemString("entys");
      lovinsStemmer3.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7120187731894898
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[1] = ">4=v6olu,|~`w/KD";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = ">4=v6olu,|~`w/KD";
      stringArray0[4] = ">4=v6olu,|~`w/KD";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("dBbO?T<W8='y3h}~");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6628285917577654
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.stemString("a)<%rMn?RQDB]KLMX6");
      lovinsStemmer2.stemString("?)/N0");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("P_g1:Ird");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("lucet");
      lovinsStemmer0.stemString("8C");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6111054930539552
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      String string0 = lovinsStemmer0.stemString("A part of a book, which may be a chapter (or section or whatever) and/or a range of pages.");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string2 = lovinsStemmer3.stemString("bex");
      assertEquals("bic", string2);
      
      String string3 = lovinsStemmer1.stemString("a part of a book, which may be a chapter (or sect or whatever) and/or a rang of pag.");
      assertTrue(string3.equals((Object)string0));
      
      String string4 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6261516351087522
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stemString("L'pz#`iuR");
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.stemString("l'pz#`iur");
      lovinsStemmer1.stemString("l'pz#`iur");
      String string1 = lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      String string2 = lovinsStemmer2.stemString("KO:8hlL");
      assertEquals("ko:8hl", string2);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString(")B{cBn<f#=0[");
      lovinsStemmer2.stemString("rudtex");
      lovinsStemmer1.stemString("rudtic");
      lovinsStemmer1.stemString("linguax");
      String string3 = lovinsStemmer1.stemString("N>FuZ]");
      assertEquals("n>fuz]", string3);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5658450471757412
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("bookher");
      lovinsStemmer2.stemString("bookher");
      String string0 = "name(s) of editor(s), typed as indicated in the latex book. if there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.yt";
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6140415660981535
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("invalis cv revis - not dot!");
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.stemString("nswcid");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer2.stemString("P~8nH>");
      assertEquals("p~8nh>", string1);
      
      String string2 = lovinsStemmer2.stemString("pand");
      assertEquals("pans", string2);
      
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.69722119943108
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[3];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("W}N5QrprFG6)J4Kr6");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("Nk^%'r`");
      assertEquals("nk^%'r`", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("eful");
      String string1 = lovinsStemmer0.stemString("titlicond");
      assertEquals("titlicons", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.stemString("2~xez]HKa)#");
      assertEquals("2~xez]hk)#", string2);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7656518404297323
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Key words used for searching or possibly for annotation.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("btvrud");
      lovinsStemmer0.stemString("ckew]c");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5967061733949612
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Key words ued for searchingor possibly for annotation.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("NeN7-,uKJwpoKad%gx");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("arizable");
      lovinsStemmer0.stemString("nen7-,ukjwpokad%gx");
      String string0 = lovinsStemmer0.stemString("arizable");
      assertEquals("ar", string0);
      
      lovinsStemmer0.stemString("lux");
      lovinsStemmer0.stemString("Key words ued for searchingor possibly for annotation.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("D]C1,F");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("invalFd CVS revision - not enough parts eparated by dots!");
      lovinsStemmer0.stemString("d]c1,f");
      lovinsStemmer0.stemString("invalfd cv revis - not enough part epar by dot!");
      lovinsStemmer0.stemString("Key words ued for searchingor possibly for annotation.");
      String string2 = lovinsStemmer0.stemString("Key words ued for searchingor possibly for annotation.");
      assertEquals("key word ued for searchingor pos for annot.", string2);
      
      String string3 = lovinsStemmer0.stemString("vk7uad");
      assertEquals("vk7uas", string3);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6974525470308486
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[3];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("W}N5QrprFG6)J4Kr6");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("NkJ%'r`");
      assertEquals("nkj%'r`", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("eful");
      String string1 = lovinsStemmer0.stemString("titlicond");
      assertEquals("titlicons", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.stemString("2~xez]HKa)#");
      assertEquals("2~xez]hk)#", string2);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6954784539734629
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("pex");
      String[] stringArray0 = new String[5];
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.601392416305283
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[3];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("F");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("F");
      lovinsStemmer1.stemString("j9:_rl");
      String string1 = lovinsStemmer1.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
      
      String string2 = lovinsStemmer1.stemString("end");
      assertEquals("ens", string2);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5536162964706965
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[3];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("F");
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      String string1 = lovinsStemmer0.stemString("name(s) of editor(s), typed as indicated in the latex book. if there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.yt");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.yt", string1);
      
      lovinsStemmer0.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.yt");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6034575720768953
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Key words ued for searchingor possibly for annotation.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Key words ued for searchingor possibly for annotation.");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.639645183743271
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("invalis cv revis - not dot!");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("inval cv rev - not dot!");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("inv cv rev - not dot!");
      lovinsStemmer4.stemString("_Xi#.z=sXXC*gd.s");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer5.toString();
      lovinsStemmer5.stemString("]2N\"vOWfL _kMaz#b7");
      lovinsStemmer5.stemString("_xi#.z=sxxc*gd.s");
      lovinsStemmer3.stemString("oI");
      lovinsStemmer5.stemString("S");
      lovinsStemmer2.stemString("lux");
      lovinsStemmer2.globalInfo();
      lovinsStemmer3.stemString("9npyb8uad");
      lovinsStemmer0.stemString("invalis cv revis - not dot!");
      lovinsStemmer3.stemString("_Xi#.z=sXXC*gd.s");
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5963147489940206
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A journal name. Abbreviations are provided for many journals.");
      assertEquals("a journ nam. abbrevi ar provid for man journ.", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6290237703576422
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "F";
      stringArray0[1] = "F";
      stringArray0[2] = "F";
      stringArray0[3] = ">4=v6olu,|~`w/KD";
      lovinsStemmer0.stemString("");
      stringArray0[4] = ">4=v6olu,|~`w/KD";
      stringArray0[5] = "F";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString(">4=v6olu,|~`w/KD");
      assertEquals(">4=v6olu,|~`w/kd", string0);
      
      String string1 = lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string1);
      
      lovinsStemmer0.stemString(";%(xO'y\"y$JA4 wh");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.4628988289724754
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[0] = "^(/^ciyO~^";
      stringArray0[1] = "";
      lovinsStemmer0.stem("");
      LovinsStemmer.main(stringArray0);
      stringArray0[2] = ": ";
      String string0 = lovinsStemmer0.stem("CONTENTS");
      assertEquals("content", string0);
      
      stringArray0[3] = "ings";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stem("7O;!$!");
      assertEquals("7o;!$!", string2);
  }
}
