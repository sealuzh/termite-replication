/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 11:12:56 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.lazy.IBk;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Properties properties0 = new Properties();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      linkedList0.clear();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>(arrayList1);
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Function<Object, DenseInstance> function0 = (Function<Object, DenseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Locale.LanguageRange, ? extends Instance>) function0);
      linkedList2.replaceAll(unaryOperator0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list1);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      linkedList1.add("");
      Instances instances0 = new Instances("%7p~B\"vRP9yU,IvG4", arrayList2, 78);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances1);
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("", linkedList1, (-893));
      linkedList3.add("integer");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 2501.15467, 2501.15467);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Properties properties0 = new Properties();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>(linkedList0);
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Instance> function0 = (Function<Object, Instance>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Locale.LanguageRange, ? extends Instance>) function0);
      linkedList0.replaceAll(unaryOperator0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("i#YkPw&,oa7nEmKWzn,", arrayList1, 78);
      SparseInstance sparseInstance0 = new SparseInstance(61);
      instances0.add((Instance) sparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances0);
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("One rule added: has positive? ", linkedList1, 1658);
      linkedList1.add(" rules are deleted");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances2, 3485.15678269, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.513924670975627
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9");
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.seedTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      jRip0.setDebug(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Instances instances0 = new Instances("The seed used for randomizing the data.", arrayList1, 1211);
      MockRandom mockRandom0 = new MockRandom();
      jRip0.optimizationsTipText();
      try { 
        jRip0.rulesetForOneClass(5.7, instances0, 64.0, 1211);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      SystemInUtil.addInputLine("");
      jRip0.seedTipText();
      jRip0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRandom mockRandom0 = new MockRandom();
      jRip0.getOptions();
      jRip0.debugTipText();
      jRip0.foldsTipText();
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")o??rY:o]1:uCcC";
      stringArray0[1] = "-E";
      stringArray0[2] = "w^-liWiZha";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "One rule found before pruning:";
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-511.3574134009);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list1, locale_FilteringMode0);
      Object object0 = new Object();
      properties0.put(protectedProperties0, object0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_ns$", arrayList2, 2261);
      Attribute attribute0 = new Attribute(".arff", instances0, 2261);
      Object object1 = arrayList2.clone();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      locale0.getDisplayVariant();
      Attribute attribute1 = new Attribute("real", "", protectedProperties0);
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance((-511.3574134009), doubleArray0);
      boolean boolean0 = jRip0.getDebug();
      Attribute attribute2 = new Attribute("'", 1);
      JRip jRip1 = new JRip();
      BiFunction<Object, Object, Attribute> biFunction0 = (BiFunction<Object, Object, Attribute>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      properties0.compute(object1, biFunction0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute2);
      RuleStats.partition(instances0, 1);
      boolean boolean1 = jRip_NominalAntd0.covers(sparseInstance0);
      assertTrue(boolean1 == boolean0);
      
      jRip_NominalAntd0.splitData(instances0, 1, (-2625.31197));
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip1.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("Error too large: ");
      Locale locale1 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      arrayList0.iterator();
      locale0.stripExtensions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>(arrayList1);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Error too large: ", arrayList2, 78);
      ArrayList<Instance> arrayList3 = new ArrayList<Instance>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(78);
      instances0.add((Instance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      Attribute attribute0 = new Attribute("0'W^OQa-2${rt@;G", 16);
      Attribute attribute1 = new Attribute("CfTf?M", list2, 1);
      binarySparseInstance0.setDataset(instances0);
      linkedList1.add("<S6B!VLQxcr$%6p1");
      JRip.NominalAntd jRip_NominalAntd0 = jRip2.new NominalAntd(attribute1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 3, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      Locale locale0 = Locale.forLanguageTag("Zk2\b8WXBH9t!U^.u");
      Locale locale1 = Locale.JAPANESE;
      locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      locale0.getUnicodeLocaleKeys();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("weka.classifiers.RandomizableClassifier", arrayList1);
      JRip jRip0 = new JRip();
      Locale locale2 = Locale.ROOT;
      arrayList0.add((Locale.LanguageRange) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.33680425888007
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-6);
      byteArray0[3] = (byte)111;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[3] = (byte)10;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P");
      byteArray0[5] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P");
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.seedTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("0jod:d?FyC[fA&l=P", arrayList0, 12);
      MockRandom mockRandom0 = new MockRandom();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)10);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      instances0.remove((Object) "P");
      try { 
        jRip0.rulesetForOneClass(0.5, instances0, 5.7, (-2899.5));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      linkedList1.add("Thenumber o> iterations to be perforsed.");
      linkedList1.poll();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      linkedList1.add("Thenumber o> iterations to be perforsed.");
      arrayList0.iterator();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Comparator<Locale.LanguageRange> comparator0 = (Comparator<Locale.LanguageRange>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList1.sort(comparator0);
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>(arrayList1);
      linkedList2.add((Locale.LanguageRange) null);
      linkedList2.offerFirst((Locale.LanguageRange) null);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list2);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("%7p~B\"vRP9yU,IvG4", arrayList2, 55);
      ArrayList<Instance> arrayList3 = new ArrayList<Instance>();
      SparseInstance sparseInstance0 = new SparseInstance(55);
      instances0.add((Instance) sparseInstance0);
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[0] = (byte) (-6);
      byteArray0[3] = (byte)111;
      byteArray0[3] = (byte)10;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P");
      byteArray0[5] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)10;
      intArray0[1] = (int) (byte) (-6);
      intArray0[2] = (-6);
      intArray0[3] = 105;
      byteArray0[1] = (byte)0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte) (-6), intArray0, 10);
      Attribute attribute0 = new Attribute("-1;Vh!>", 3869);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (double) (-6);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("?MVeIi/L<x;OGrynw", "date");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // date
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Properties properties0 = new Properties();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      linkedList0.clear();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>(arrayList1);
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Function<Object, DenseInstance> function0 = (Function<Object, DenseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Locale.LanguageRange, ? extends Instance>) function0);
      linkedList2.replaceAll(unaryOperator0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list1);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      linkedList1.add("");
      Instances instances0 = new Instances("%7p~B\"vRP9yU,IvG4", arrayList2, 78);
      SparseInstance sparseInstance0 = new SparseInstance(78);
      instances0.add((Instance) sparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances1);
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("", linkedList1, (-893));
      linkedList3.add("integer");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 2501.15467, 2501.15467);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.6931471805599453;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Locale locale0 = new Locale("_ns$", "_ns$");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_ns$", arrayList1, 2249);
      Attribute attribute0 = new Attribute(".arff", protectedProperties0);
      Attribute.typeToString(0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("numeric", list0);
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(3);
      instances0.add((Instance) sparseInstance0);
      Attribute attribute2 = new Attribute("'", 1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      attribute2.equals((Object) null);
      jRip_NumericAntd0.splitData(instances0, 0.0, 0);
      Attribute.typeToString(attribute0);
      Attribute.typeToString(attribute2);
      Random.setNextRandom(1);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("@attribute");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @attribute not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-1696.614));
      jRip0.setFolds(0);
      Attribute attribute0 = new Attribute("", 5);
      jRip_RipperRule0.toString(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(5);
      jRip_RipperRule0.covers(sparseInstance0);
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.hasAntds();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.33680425888007
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-6);
      byteArray0[3] = (byte)111;
      byteArray0[3] = (byte)10;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P");
      byteArray0[5] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P");
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.seedTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("The seed used for randomizing the data.", arrayList1, (byte)111);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer0);
      MockRandom mockRandom0 = new MockRandom();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)87);
      instances0.add((Instance) binarySparseInstance0);
      instances0.remove((Object) jRip0);
      try { 
        jRip0.rulesetForOneClass(1658, instances0, (byte) (-6), 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0337478959599906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9");
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.seedTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("The seed used for randomizing the data.", arrayList1, 1211);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        jRip0.rulesetForOneClass(5.7, instances0, 64.0, 1211);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      IBk iBk0 = decisionTable1.m_ibk;
      Object object0 = new Object();
      IBk iBk1 = decisionTable0.m_ibk;
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass((-2168.56826455), (Instances) null, 4887.4343, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")Z*Ia)u;=S=4,$)-", arrayList0, 1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("0%Yy,ZaP2'CxtD7)!E", arrayList1, 2261);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-1194.757532);
      doubleArray0[3] = (double) 1;
      int[] intArray0 = new int[18];
      intArray0[0] = 1;
      intArray0[1] = 1;
      doubleArray0[3] = (double) 1;
      intArray0[3] = 2261;
      intArray0[4] = 1;
      SparseInstance sparseInstance0 = new SparseInstance((-1194.757532), doubleArray0, intArray0, 38);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances1.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("0%Yy,ZaP2'CxtD7)!E", instances0, 2261);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance1);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1658;
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(1658, intArray0, 7);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      double double0 = jRip0.getMinNo();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9164055708047496
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      jRip0.setCheckErrorRate(false);
      stringArray0[0] = "pw@5?E90erO^&";
      jRip0.getOptions();
      stringArray0[1] = "wVV=<sh";
      stringArray0[2] = "The number of optimization runs.";
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("\nNo pruning: growing a rule ...", 95);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      Instances instances1 = null;
      try {
        instances1 = new Instances((Instances) null, 95, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      JRip jRip0 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-N <min. weights>");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.forLanguageTag("\tSet the ridge in the log-likelihood.");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set1);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList2, 2149);
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList3.clone();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("V[q!;:kL$GP", list0);
      JRip jRip1 = new JRip();
      Attribute attribute2 = new Attribute("string", 0);
      arrayList2.add(attribute1);
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd(attribute1);
      instances0.parallelStream();
      Instances instances1 = new Instances(instances0);
      jRip_NumericAntd0.splitData(instances1, 3, 4);
      try { 
        jRip2.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.471346413410988
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1\"*~&bFtLb";
      stringArray0[1] = "";
      stringArray0[2] = "";
      jRip0.setOptions(stringArray0);
      jRip0.usePruningTipText();
      Attribute attribute0 = new Attribute("", "", 1894);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      jRip_NumericAntd0.value = (double) 1;
      jRip_NumericAntd0.att = attribute0;
      jRip_NumericAntd0.value = (double) 4;
      intArray0[3] = 1;
      attribute0.formatDate(1);
      jRip0.setUsePruning(false);
      intArray0[4] = 4;
      jRip_NumericAntd0.accu = (double) 1;
      intArray0[5] = 2;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 1922);
      jRip0.getUsePruning();
      jRip0.getUsePruning();
      jRip0.minNoTipText();
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.toString();
      jRip0.toString();
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")Z*Ia)u;=S=4,$)-", arrayList0, 1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Integer integer0 = new Integer(1);
      Predicate.isEqual((Object) integer0);
      predicate1.test(instances0);
      arrayList0.removeIf(predicate1);
      Instances instances1 = new Instances("@relation", arrayList0, 1);
      Instances instances2 = instances0.resample((java.util.Random) null);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Instances instances3 = new Instances(instances0);
      try { 
        jRip0.buildClassifier(instances2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7040978714293633
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1\"*~&bFtLb";
      stringArray0[1] = "";
      stringArray0[2] = "implementation in aspects of accuracy, ruleset size and running time ";
      jRip0.setOptions(stringArray0);
      jRip0.usePruningTipText();
      Attribute attribute0 = new Attribute("implementation in aspects of accuracy, ruleset size and running time ", "", 1894);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      jRip_NumericAntd0.value = (double) 1;
      jRip_NumericAntd0.att = attribute0;
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      intArray0[7] = 4;
      intArray0[3] = 1;
      jRip0.foldsTipText();
      intArray0[4] = 4;
      jRip_NumericAntd0.accu = (double) 1;
      intArray0[5] = 2;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 1922);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      jRip0.getUsePruning();
      jRip0.minNoTipText();
      jRip_NumericAntd0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_ns$", arrayList1, 11);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList1);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      predicate1.test(properties1);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      arrayList1.removeIf(predicate3);
      Instances instances1 = new Instances("", arrayList1, 11);
      Attribute attribute0 = new Attribute("\n\tLinear model\n", instances0, 11);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.retainAll(instances0);
      arrayList1.clone();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Instances instances2 = new Instances(instances1);
      attribute0.setWeight(0.0);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("\n\tLinear model\n <= NaN", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-511.3574134009);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = new Locale("_ns$", "_ns$");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(" = ", arrayList1, 2168);
      Attribute attribute0 = new Attribute(");#;kCDoZai!4NR", instances0, 2261);
      arrayList1.clone();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("The default DL = ", list0);
      JRip jRip0 = new JRip();
      Attribute attribute2 = new Attribute("The default DL = ", 3);
      attribute0.indexOfValue("numeric");
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute1);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      instances0.parallelStream();
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      jRip_NumericAntd0.splitData(instances1, 2261, 3);
      jRip1.getDebug();
      jRip_NumericAntd0.splitData(instances1, 2, 0.0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      Properties properties0 = new Properties();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("Thenumber o> iterations to be perforsed.");
      linkedList0.poll();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ClassOrder[] classOrderArray0 = new ClassOrder[9];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      ClassOrder classOrder2 = new ClassOrder();
      ClassOrder classOrder3 = new ClassOrder();
      ClassOrder classOrder4 = new ClassOrder();
      ClassOrder classOrder5 = new ClassOrder();
      ClassOrder classOrder6 = new ClassOrder();
      ClassOrder classOrder7 = new ClassOrder();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute("Number of all possible conditions = ", protectedProperties1);
      jRip_RipperRule0.toString(attribute0);
      System.setCurrentTimeMillis(1);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, (-1560.2645600744536), (-802.5597282217241));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("-O <number of runs>");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.att = attribute0;
      jRip_NominalAntd0.toString();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, (-511.3574134009), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2240585736572336
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")Z*Ia)u;=S=4,$)-", arrayList0, 1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Integer integer0 = new Integer(1491);
      Attribute attribute0 = new Attribute("): ", instances0);
      Predicate.isEqual((Object) attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      predicate2.test(object0);
      arrayList0.removeIf(predicate0);
      Instances instances1 = new Instances("string", arrayList0, 41);
      Attribute attribute1 = new Attribute(",?", instances1);
      Instances instances2 = instances1.resample((java.util.Random) null);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Instances instances3 = new Instances(instances0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd1.splitData(instances2, (-966.0), 1);
      CoverTree coverTree0 = new CoverTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(attribute1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")Z*Ia)u;=S=4,$)-", arrayList0, 1);
      Instances instances1 = new Instances("0%Yy,ZaP2'CxtD7)!E", arrayList0, 2261);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-1194.757532);
      doubleArray0[3] = (double) 1;
      int[] intArray0 = new int[29];
      intArray0[0] = 1;
      intArray0[1] = 1;
      doubleArray0[3] = (double) 1;
      intArray0[3] = 2261;
      intArray0[4] = 1;
      ClassOrder classOrder0 = new ClassOrder();
      ClassOrder classOrder1 = new ClassOrder();
      ClassOrder classOrder2 = new ClassOrder();
      ClassOrder classOrder3 = new ClassOrder();
      ClassOrder classOrder4 = new ClassOrder();
      ClassOrder classOrder5 = new ClassOrder();
      ClassOrder classOrder6 = new ClassOrder();
      ClassOrder classOrder7 = new ClassOrder();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet0.measureMDLScore();
      JRip jRip1 = new JRip();
      try { 
        jRip0.rulesetForOneClass(1, instances0, 1, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.245308166203682
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1\"*~&bFtLb";
      stringArray0[1] = "";
      stringArray0[2] = "implementation in aspects of accuracy, ruleset size and running time ";
      jRip0.setOptions(stringArray0);
      jRip0.usePruningTipText();
      Attribute attribute0 = new Attribute("implementation in aspects of accuracy, ruleset size and running time ", "", 1894);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      jRip_NumericAntd0.att = attribute0;
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      intArray0[3] = 1;
      attribute0.formatDate(1);
      intArray0[4] = 4;
      jRip_NumericAntd0.accu = (double) 1;
      intArray0[5] = 2;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 1922);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      jRip0.getUsePruning();
      jRip_NumericAntd0.getSplitPoint();
      jRip0.getUsePruning();
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-845.155));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)78;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":`BE)0d%wuWj3P7>");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ") and ";
      stringArray0[1] = "";
      stringArray0[2] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n\t(use -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n";
      AbstractClassifier.runClassifier((Classifier) null, stringArray0);
      jRip0.getRevision();
      jRip0.minNoTipText();
      assertEquals((-845.155), jRip0.getMinNo(), 0.01);
      
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("]0Po=7cM%?N*", "", (-76));
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getMaxInfoGain();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale0 = Locale.CANADA;
      Locale.setDefault(locale_Category0, locale0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("1\"*~&bFtLb", arrayList2);
      JRip jRip0 = new JRip();
      Locale locale1 = Locale.ROOT;
      arrayList1.add((Locale.LanguageRange) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0, locale_FilteringMode0);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList1);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category1, locale0);
      Locale locale2 = Locale.CHINESE;
      locale2.getDisplayScript(locale1);
      jRip_RipperRule0.getRevision();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")Z*Ia)u;=S=4,$)-", arrayList0, 1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("0%y,ZaP2'CxtD7)!E", arrayList1, 2261);
      Attribute attribute0 = new Attribute("0%y,ZaP2'CxtD7)!E", instances0, 2261);
      arrayList1.retainAll(instances1);
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      jRip0.seedTipText();
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance1);
      //  // Unstable assertion: assertEquals(133, AbstractInstance.s_numericAfterDecimalPoint);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 133;
      doubleArray0[1] = (double) 133;
      binarySparseInstance0.s_numericAfterDecimalPoint = 133;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (-563.4);
      doubleArray0[5] = (-511.3574134009);
      SparseInstance sparseInstance2 = new SparseInstance(3, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 133;
      intArray0[1] = 4;
      sparseInstance1.s_numericAfterDecimalPoint = 2261;
      intArray0[4] = 2;
      intArray0[5] = 2261;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(133.0, intArray0, (-1171));
      AbstractInstance.s_numericAfterDecimalPoint = 1658;
      binarySparseInstance1.copy();
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.464791106186272
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      Properties properties0 = new Properties();
      jRip0.setOptions(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string0 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute("", arrayList0, protectedProperties0);
      Attribute attribute1 = new Attribute((String) null, arrayList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      int[] intArray0 = new int[5];
      intArray0[0] = (-3232);
      intArray0[1] = 3;
      intArray0[2] = (-3232);
      intArray0[3] = 0;
      intArray0[4] = 3122;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2551.9839688), intArray0, (-3232));
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      boolean boolean1 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertTrue(boolean1 == boolean0);
      
      double double0 = jRip_RipperRule0.getConsequent();
      assertEquals((-1.0), double0, 0.01);
      assertFalse(jRip1.getDebug());
      assertTrue(jRip1.getUsePruning());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "2\\qp7YvStX2=sI";
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      BiFunction<Object, Object, ClassOrder> biFunction0 = (BiFunction<Object, Object, ClassOrder>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis((-1257L));
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("World Scientifsc", "World Scientifsc");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // World Scientifsc
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-511.3574134009);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Class implementing the KDTree search algorithm for nearest neighbour search.\nThe connection to dataset is only a reference. For the tree structure the indexes are stored in an array. \nBuilding the tree:\nIf a node has <maximal-inst-number> (option -L) instances no further splitting is done. Also if the split would leave one side empty, the branch is not split any further even if the instances in the resulting node are more than <maximal-inst-number> instances.\n**PLEASE NOTE:** The algorithm can not handle missing values, so it is advisable to run ReplaceMissingValues filter if there are any missing values in the dataset.\n\nFor more information see:\n\n", arrayList0, 2261);
      Attribute attribute0 = new Attribute("@data", instances0, (-3024));
      arrayList0.clone();
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      jRip_NominalAntd0.splitData(instances0, (-511.3574134009), 59.0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties1 = new Properties();
      IBk iBk0 = new IBk();
      Properties properties2 = new Properties();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        properties1.merge(classOrder0, "Class implementing the KDTree search algorithm for nearest neighbour search.\nThe connection to dataset is only a reference. For the tree structure the indexes are stored in an array. \nBuilding the tree:\nIf a node has <maximal-inst-number> (option -L) instances no further splitting is done. Also if the split would leave one side empty, the branch is not split any further even if the instances in the resulting node are more than <maximal-inst-number> instances.\n**PLEASE NOTE:** The algorithm can not handle missing values, so it is advisable to run ReplaceMissingValues filter if there are any missing values in the dataset.\n\nFor more information see:\n\n", (BiFunction<? super Object, ? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)61;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-Z*Iu;=S4,$,-", arrayList1, (byte)0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      instances0.addAll((Collection<? extends Instance>) instances0);
      jRip_RipperRule0.prune(instances0, false);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      jRip0.setSeed(3215L);
      Instances instances0 = null;
      try {
        instances0 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-18);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")Z*Ia)u;=S=4,$)-", arrayList0, 1);
      Attribute attribute0 = new Attribute("0%y,ZaP2'CxtD7)!E", instances0, (int) (byte)7);
      arrayList0.retainAll(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 133;
      sparseInstance0.s_numericAfterDecimalPoint = 133;
      binarySparseInstance0.copy();
      binarySparseInstance0.s_numericAfterDecimalPoint = 133;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (-511.3574134009);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 133;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      String string0 = jRip_NumericAntd0.toString();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals("0%y,ZaP2'CxtD7)!E <= NaN", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      
      Attribute attribute0 = new Attribute("?Y+I'e*{A{A</", "", (-1));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttr();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8643344851244983
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Whether pruning is performed.";
      stringArray0[1] = "Whether pruning is performed.";
      stringArray0[2] = "Whether pruning is performed.";
      stringArray0[3] = "Whether pruning is performed.";
      stringArray0[4] = "Whether pruning is performed.";
      stringArray0[5] = "Whether pruning is performed.";
      stringArray0[6] = "Whether pruning is performed.";
      jRip0.setOptions(stringArray0);
      jRip0.toString();
      jRip0.setUsePruning(false);
      jRip0.setDebug(false);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      Attribute attribute0 = new Attribute("Whether pruning is performed.", list0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      boolean boolean0 = jRip0.getDebug();
      assertFalse(jRip0.getUsePruning());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")Z*Ia)u;=S=4,$)-", arrayList0, 1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList1);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.or(predicate0);
      arrayList0.removeIf(predicate1);
      Instances instances1 = new Instances("@relation", arrayList1, 1);
      Attribute attribute0 = new Attribute("@data", instances0, 1);
      arrayList1.retainAll(instances1);
      arrayList0.clone();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Instances instances2 = new Instances(instances0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances1, (-3167.144797), 3);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8agiTqgz!Jsr&=8Plv");
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", 2205);
      attribute0.setStringValue("s@2Ey=%wLa A3");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.att = attribute0;
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      Properties properties0 = new Properties();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("Thenumber o> iterations to be perforsed.");
      linkedList0.poll();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ClassOrder[] classOrderArray0 = new ClassOrder[9];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder1;
      classOrderArray0[2] = classOrder1;
      ClassOrder classOrder2 = new ClassOrder();
      classOrderArray0[8] = classOrder2;
      ClassOrder classOrder3 = new ClassOrder();
      ClassOrder classOrder4 = new ClassOrder();
      classOrderArray0[5] = classOrder4;
      ClassOrder classOrder5 = new ClassOrder();
      classOrderArray0[2] = classOrder5;
      ClassOrder classOrder6 = new ClassOrder();
      classOrderArray0[7] = classOrder6;
      ClassOrder classOrder7 = new ClassOrder();
      Attribute attribute0 = new Attribute("Thenumber o> iterations to be perforsed.", 1);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      attribute0.copy();
      SparseInstance sparseInstance0 = new SparseInstance(92);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertFalse(jRip0.getDebug());
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Thenumber o> iterations to be perforsed.");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.4435896416877303
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds(2);
      jRip0.checkErrorRateTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Instances instances0 = new Instances("Whether check for error rate >= 1/2 is included in stopping criterion.", arrayList1, 11);
      Attribute attribute0 = new Attribute("Whether check for error rate >= 1/2 is included in stopping criterion.", instances0, (-1059));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 1862.667787005, 4);
      jRip0.getFolds();
      jRip_NominalAntd0.getAccuRate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      int[] intArray0 = new int[8];
      intArray0[0] = (-2699);
      intArray0[1] = 4;
      intArray0[2] = 11;
      intArray0[3] = 11;
      intArray0[4] = 4;
      intArray0[5] = 3;
      intArray0[6] = 2;
      intArray0[7] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1279.01283754), intArray0, 7);
      arrayList0.listIterator();
      try { 
        principalComponents0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.695600427808076
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-6);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)57;
      int[] intArray0 = new int[5];
      intArray0[0] = (-2472);
      intArray0[1] = (-2472);
      intArray0[2] = (int) (byte)57;
      intArray0[3] = (int) (byte)57;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G}<9d\"8bL~qsM.1`][");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";r-}j;%=@z");
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jRip0.setOptions(stringArray0);
      try { 
        jRip0.rulesetForOneClass(1254.2177471188145, (Instances) null, (byte)57, (byte)57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      String string0 = "1\"*=<&bFtpb";
      String string1 = "implementation in aspects of accuracy, ruleset size and running time ";
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[1];
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7039917864324616
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-511.3574134009);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.forLanguageTag("_ns$");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_ns$", arrayList2, 2261);
      Attribute attribute0 = new Attribute(".arff", instances0, 2261);
      arrayList2.clone();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("numeric", list0);
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(3);
      instances0.add((Instance) sparseInstance0);
      Attribute attribute2 = new Attribute("'", 1);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      instances0.parallelStream();
      Instances instances1 = new Instances(instances0, 4);
      jRip_NumericAntd0.splitData(instances0, 0.0, 0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.6931471805599453;
      Locale locale0 = new Locale("_ns$", "_ns$");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_ns$", arrayList1, 2249);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_ns$";
      JRip.main(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      Properties properties0 = new Properties();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("Thenumber o> iterations to be perforsed.");
      linkedList0.poll();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ClassOrder[] classOrderArray0 = new ClassOrder[9];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder1;
      ClassOrder classOrder2 = new ClassOrder();
      classOrderArray0[2] = classOrder2;
      ClassOrder classOrder3 = new ClassOrder();
      classOrderArray0[8] = classOrder3;
      ClassOrder classOrder4 = new ClassOrder();
      classOrderArray0[4] = classOrder4;
      ClassOrder classOrder5 = new ClassOrder();
      classOrderArray0[5] = classOrder5;
      ClassOrder classOrder6 = new ClassOrder();
      classOrderArray0[2] = classOrder6;
      ClassOrder classOrder7 = new ClassOrder();
      classOrderArray0[7] = classOrder7;
      ClassOrder classOrder8 = new ClassOrder();
      classOrderArray0[8] = classOrder8;
      linkedList2.toArray(classOrderArray0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Thenumber o> iterations to be perforsed.", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(78);
      instances0.add((Instance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      Attribute attribute0 = new Attribute("J@Q:B}d+K2x4", 2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 4, (-2758.53553581));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)2;
      jRip0.setCheckErrorRate(false);
      byteArray0[2] = (byte) (-34);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((byte) (-34));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale.getISOLanguages();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.ENGLISH;
      locale0.getUnicodeLocaleKeys();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.hasAntds();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3302);
      pipedInputStream0.skip((-1684));
      pipedInputStream0.mark((-1684));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream(pipedInputStream0);
      int int0 = 2584;
      pipedOutputStream1.close();
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream((PipedOutputStream) null, 3302);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-18);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")Z*Ia)u;=S=4,$)-", arrayList0, 1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("0%y,ZaP2'CxtD7)!E", instances0, (int) (byte)7);
      arrayList1.retainAll(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 133;
      sparseInstance0.s_numericAfterDecimalPoint = 133;
      binarySparseInstance0.s_numericAfterDecimalPoint = 133;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (-511.3574134009);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(133);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 133;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(boolean0);
      
      String string0 = jRip0.getRevision();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("8118", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      linkedList1.add("Thenumber o> iterations to be perforsed.");
      linkedList1.poll();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      linkedList1.add("Thenumber o> iterations to be perforsed.");
      arrayList0.iterator();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Comparator<Locale.LanguageRange> comparator0 = (Comparator<Locale.LanguageRange>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList1.sort(comparator0);
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>(arrayList1);
      linkedList2.add((Locale.LanguageRange) null);
      linkedList2.offerFirst((Locale.LanguageRange) null);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list2);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("%7p~B\"vRP9yU,IvG4", arrayList2, 55);
      ArrayList<Instance> arrayList3 = new ArrayList<Instance>();
      SparseInstance sparseInstance0 = new SparseInstance(55);
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y. j.R");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip jRip1 = new JRip();
      System.setCurrentTimeMillis((byte)10);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, (byte)10);
      PushbackInputStream pushbackInputStream1 = null;
      try {
        pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream0, (-1496));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "@T@>+RwL";
      stringArray0[5] = "t_fx0$BR";
      stringArray0[6] = "H#wOT3FS";
      stringArray0[7] = "";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.globalInfo();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals("8118", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")Z*Ia)u;=S=4,$)-", arrayList0, 1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Integer integer0 = new Integer(1);
      Predicate.isEqual((Object) integer0);
      predicate1.test(instances0);
      arrayList0.removeIf(predicate1);
      Instances instances1 = new Instances("@relation", arrayList0, 1);
      Attribute attribute0 = new Attribute("@relation", instances1);
      instances1.delete();
      instances0.resample((java.util.Random) null);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Instances.mergeInstances(instances0, instances0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.splitData(instances1, (-3166.004762277519), 3);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk0 = decisionTable0.m_ibk;
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("`iz");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAccu();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      Instances instances1 = null;
      try {
        instances1 = new Instances((Instances) null, 2, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Utils.log2 = (-511.3574134009);
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-18);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")Z*Ia)u;=S=4,$)-", arrayList0, 1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("0%y,ZaP2'CxtD7)!E", instances0, (int) (byte)7);
      arrayList1.retainAll(instances0);
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 133;
      sparseInstance0.s_numericAfterDecimalPoint = 133;
      doubleArray0[4] = (double) 133;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (-511.3574134009);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(133);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 133;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals("0%y,ZaP2'CxtD7)!E <= NaN", string0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(68);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("LXf(:\"Rc)^*w5_>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LXf(:\"Rc)^*w5_> not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      Locale locale0 = Locale.forLanguageTag("Zk2\b8WXBH9t!U^.u");
      Locale locale1 = Locale.JAPANESE;
      locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      locale0.getUnicodeLocaleKeys();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("weka.classifiers.RandomizableClassifier", arrayList1);
      JRip jRip0 = new JRip();
      Locale locale2 = Locale.ROOT;
      arrayList0.add((Locale.LanguageRange) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList3);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category1, locale0);
      Locale locale3 = Locale.CHINESE;
      locale0.getDisplayScript(locale3);
      Locale locale4 = Locale.KOREA;
      // Undeclared exception!
      try { 
        jRip0.getMeasure("QVpj/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // QVpj/ not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")Z*Ia)u;=S=4,$)-", arrayList0, (byte)87);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ")Z*Ia)u;=S=4,$)-");
      Predicate<Object> predicate1 = predicate0.negate();
      Integer integer0 = new Integer((-1916));
      Predicate<String> predicate2 = Predicate.isEqual((Object) predicate0);
      predicate1.test((Object) null);
      predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      arrayList0.removeIf(predicate3);
      Attribute attribute0 = new Attribute("+3\"H6Gu|X6cD`rjqz >", instances0);
      instances0.delete();
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = instances0.resample(mockRandom0);
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Instances.mergeInstances(instances1, instances1);
      mockRandom0.nextGaussian();
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances1, (-34.195792194975425), (-1284.6));
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      predicate1.negate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Properties properties0 = new Properties();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate2);
      predicate1.and(predicate4);
      BiFunction<Object, Object, Locale> biFunction0 = (BiFunction<Object, Object, Locale>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      properties0.compute(predicate1, biFunction0);
      jRip0.getSeed();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances1, 2, 0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Uh@";
      stringArray0[1] = "";
      jRip0.setOptimizations((-471));
      stringArray0[2] = "";
      stringArray0[3] = "N";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "1\"*~&bFtLb";
      stringArray1[1] = "not a valid date format";
      stringArray1[2] = "implementation in aspects of accuracy, ruleset size and running time ";
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.setConsequent((-3656.0254));
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      // Undeclared exception!
      try { 
        protectedProperties2.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")Z*Ia)u;=S=4,$)-", arrayList0, 1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("0%Yy,ZaP2'CxtD7)!E", arrayList1, 2261);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-1194.757532);
      doubleArray0[3] = (double) 1;
      int[] intArray0 = new int[18];
      intArray0[0] = 1;
      intArray0[1] = 1;
      doubleArray0[3] = (double) 1;
      intArray0[3] = 2261;
      intArray0[4] = 1;
      SparseInstance sparseInstance0 = new SparseInstance((-1194.757532), doubleArray0, intArray0, 38);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances1.add((Instance) sparseInstance1);
      Attribute attribute0 = new Attribute("0%Yy,ZaP2'CxtD7)!E", instances0, 2261);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance0);
      attribute0.value(133);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance3);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 133;
      doubleArray1[1] = (double) 133;
      binarySparseInstance0.s_numericAfterDecimalPoint = 133;
      doubleArray1[4] = (-563.4);
      doubleArray1[5] = 0.6931471805599453;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance3);
      int[] intArray1 = new int[6];
      intArray1[0] = 1;
      intArray1[1] = 133;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(133.0, intArray1, (-1171));
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance2);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      
      double double0 = jRip0.getMinNo();
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u~$&");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FDlY8K0'GMs|@^Nfb");
      jRip0.setDebug(true);
      try { 
        jRip0.rulesetForOneClass((-1862.5334280123977), (Instances) null, (-3527.2232753922476), 1619.955038);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-6);
      byteArray0[3] = (byte)111;
      byteArray0[3] = (byte)10;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P");
      byteArray0[5] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)10;
      intArray0[1] = (int) (byte)87;
      intArray0[3] = (int) (byte) (-6);
      jRip0.setFolds(79);
      byteArray0[5] = (byte)10;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)87, intArray0, 10);
      AbstractInstance.s_numericAfterDecimalPoint = 133;
      Attribute attribute0 = new Attribute("<\"#i{3kk%$y4Gq", 3860);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      attribute0.copy();
      jRip_NumericAntd0.value = (double) 87;
      jRip_NumericAntd0.covers(binarySparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "date");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("?MVeIli/L<x;OGrynw", ">~(-sm?YO ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // >~(-sm?YO 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("XOt6,P0#EU");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getCover();
      jRip0.setFolds((-3948));
      attribute0.setStringValue("A_gsny#*");
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2655.0), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Properties properties0 = new Properties();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      linkedList1.poll();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>(arrayList1);
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      Function<Object, DenseInstance> function0 = (Function<Object, DenseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Locale.LanguageRange, ? extends Instance>) function0);
      linkedList2.replaceAll(unaryOperator0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list1);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      SparseInstance sparseInstance0 = new SparseInstance(78);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk0 = decisionTable0.m_ibk;
      DecisionTable decisionTable1 = (DecisionTable)AbstractClassifier.makeCopy(decisionTable0);
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      IBk iBk1 = decisionTable1.m_ibk;
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = decisionTable3.m_dtInstances;
      bayesNet0.getBIFHeader();
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-6);
      byteArray0[3] = (byte)111;
      byteArray0[1] = (byte)10;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteArray0[0] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "WB87g.?59Q'p3reFQ";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      try { 
        jRip0.rulesetForOneClass((-1442.569), (Instances) null, (-1696.614), (-454.7));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk0 = decisionTable0.m_ibk;
      DecisionTable decisionTable1 = (DecisionTable)AbstractClassifier.makeCopy(decisionTable0);
      IBk iBk1 = decisionTable1.m_ibk;
      SelectedTag selectedTag0 = decisionTable0.getEvaluationMeasure();
      decisionTable1.setEvaluationMeasure(selectedTag0);
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.measureMDLScore();
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      Locale locale0 = Locale.forLanguageTag("Zk2\b8WXBH9t!U^.u");
      Locale locale1 = Locale.JAPANESE;
      locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      locale0.getUnicodeLocaleKeys();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("weka.classifiers.RandomizableClassifier", arrayList1);
      Locale locale2 = Locale.ROOT;
      arrayList0.add((Locale.LanguageRange) null);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList3);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category1, locale0);
      Locale locale3 = Locale.CHINESE;
      Locale locale4 = Locale.KOREA;
      locale4.getDisplayScript(locale3);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      Locale locale0 = Locale.forLanguageTag("Zk2\b8WXBH9t!U^.u");
      Locale locale1 = Locale.JAPANESE;
      locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      locale0.getUnicodeLocaleKeys();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("weka.classifiers.RandomizableClassifier", arrayList1);
      JRip jRip0 = new JRip();
      Locale locale2 = Locale.ROOT;
      arrayList0.add((Locale.LanguageRange) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList3);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      jRip_RipperRule0.copy();
      Locale.setDefault(locale_Category1, locale0);
      Locale locale3 = Locale.CHINESE;
      locale0.getDisplayScript(locale3);
      Locale locale4 = Locale.KOREA;
      locale4.getDisplayScript(locale3);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      System.setCurrentTimeMillis((-1115L));
      JRip jRip0 = new JRip();
      jRip0.getCheckErrorRate();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      StringReader stringReader0 = new StringReader("*mh&<PnD.a");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 5);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      assertFalse(bufferedReader1.equals((Object)bufferedReader0));
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-1696.614));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("L(v^R}vE:xsSc0}Wi>]", linkedList0, (-8));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 64.0;
      doubleArray0[2] = (double) 0;
      int[] intArray0 = new int[7];
      attribute0.addStringValue((Attribute) null, 87);
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 3;
      intArray0[3] = 0;
      intArray0[4] = (-6);
      intArray0[5] = 2;
      intArray0[6] = 3;
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0, intArray0, (-6));
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals((-1696.614), jRip0.getMinNo(), 0.01);
      assertTrue(boolean0);
  }
}
