/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 13:36:34 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.util.Enumeration;
import java.util.function.Consumer;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultAttribute;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.048820325203473
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      sAXReader0.setIgnoreComments(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//home/ubuntu/termite/projects/62_dom4j/!.}CkRUuj$Z/!JCQ/r&_yQ");
      sAXReader0.setEntityResolver(sAXReader_SAXEntityResolver0);
      String string0 = "//home/ubuntu/termite/projects/62_dom4j/!.}CkRUuj$Z/!JCQ/r&_yQ";
      sAXReader_SAXEntityResolver0.uriPrefix = "//home/ubuntu/termite/projects/62_dom4j/!.}CkRUuj$Z/!JCQ/r&_yQ";
      sAXReader0.createDefaultEntityResolver((String) null);
      sAXReader0.getXMLReader();
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      sAXReader0.getDocumentFactory();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.isIncludeExternalDTDDeclarations();
      try { 
        sAXReader0.setXMLReaderClassName("//home/ubuntu/termite/projects/62_dom4j/!.}CkRUuj$Z/!JCQ/r&_yQ");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //home/ubuntu/termite/projects/62_dom4j/!.}CkRUuj$Z/!JCQ/r&_yQ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2473399979120656
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      xMLFilterImpl0.setContentHandler(defaultHandler0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      pipedOutputStream0.close();
      pipedInputStream0.close();
      pipedOutputStream0.flush();
      pipedInputStream0.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.markSupported();
      // Undeclared exception!
      try { 
        sAXReader0.read("Error on line ");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2481121986842663
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      namespaceStack0.clear();
      defaultDocumentFactory0.createPattern("http://xml.org/sax/features/namespaces");
      defaultDocumentFactory0.createPattern("http://xml.org/sax/features/namespaces");
      defaultDocumentFactory0.createEntity("]q@Tfv", "O@GxrFU8o");
      namespaceStack0.getDefaultNamespace();
      NamespaceStack namespaceStack1 = new NamespaceStack(documentFactory0);
      namespaceStack0.clear();
      Namespace namespace0 = namespaceStack1.addNamespace("]q@Tfv", "http://xml.org/sax/features/namespaces");
      namespaceStack1.addNamespace("O@GxrFU8o", "oF>fC&mhs```QG|gn");
      namespaceStack0.clear();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Namespace namespace1 = Namespace.get((String) null, "]q@Tfv");
      namespace1.getPath();
      Namespace namespace2 = new Namespace("kOpK)XE5", "//home/ubuntu/termite/projects/62_dom4j/1 X=t");
      QName.get("^", namespace0, "Error on line ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HandlerBase handlerBase0 = new HandlerBase();
      HandlerBase handlerBase1 = new HandlerBase();
      handlerBase1.resolveEntity("Zj/KB<LN1$", "NOTATION_NODE");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setEntityResolver(handlerBase0);
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4189303209052606
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Pb\"/[5Z%Qw e");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sAXReader_SAXEntityResolver0.uriPrefix = "Pb\"/[5Z%Qw e";
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      mockFile0.createNewFile();
      mockFile0.getAbsoluteFile();
      mockFile0.toURL();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.clear();
      namespaceStack0.contains(namespace0);
      namespace0.getPath();
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      namespace1.toString();
      namespace1.getName();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace2 = Namespace.XML_NAMESPACE;
      defaultDocumentFactory0.createQName("namespace::*[name()='']", namespace2);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream0.markSupported();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("V,F^WqA");
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "//home/ubuntu/termite/projects/62_dom4j/Z2Vq/!JCQ/r&_yQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"V,F^WQA\". Nested exception: Invalid encoding name \"V,F^WQA\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6220886946271573
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      sAXReader0.setDispatchHandler(dispatchHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      xMLFilterImpl0.startPrefixMapping("", "");
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      locatorImpl2.setLineNumber(1107);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl3);
      locatorImpl0.getPublicId();
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl2);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      String string0 = "http://xml.org/sax/features/validation";
      sAXReader0.setEncoding("http://xml.org/sax/features/validation");
      sAXReader0.setEncoding("http://xml.org/sax/features/validation");
      sAXReader0.isValidating();
      sAXReader0.setFeature("http://xml.org/sax/features/validation", false);
      sAXReader0.getErrorHandler();
      sAXReader0.isStringInternEnabled();
      sAXReader0.getXMLReader();
      sAXReader0.isStringInternEnabled();
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"HTTP://XML.ORG/SAX/FEATURES/VALIDATION\". Nested exception: Invalid encoding name \"HTTP://XML.ORG/SAX/FEATURES/VALIDATION\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createQName("A+nZ9gOzV}@:J]yY");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory2);
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      defaultDocumentFactory5.createNamespace("j[MBdZ>kw{K03Je", "K6");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.618333059508028
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.getDocumentFactory();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      xMLFilterImpl0.setContentHandler(xMLReaderAdapter0);
      sAXReader0.getXMLReader();
      sAXReader0.getEncoding();
      XMLFilter xMLFilter0 = sAXReader0.getXMLFilter();
      sAXReader0.createContentHandler(xMLFilter0);
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, "org.jaxen.saxpath.base.TokenTypes");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.401586530460972
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("!JCQ/r&_yQ");
      sAXReader0.setStripWhitespaceText(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockFile mockFile0 = new MockFile("!JCQ/r&_yQ", "");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "//home/ubuntu/termite/projects/62_dom4j/.O@$OA1|wI6GL<m`xG.");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.setEncoding("//home/ubuntu/termite/projects/62_dom4j/.O@$OA1|wI6GL<m`xG.");
      mockFile0.setWritable(false);
      mockFile0.createNewFile();
      mockFile0.toPath();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockFile0.deleteOnExit();
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"//HOME/UBUNTU/TERMITE/PROJECTS/62_DOM4J/.O@$OA1|WI6GL<M`XG.\". Nested exception: Invalid encoding name \"//HOME/UBUNTU/TERMITE/PROJECTS/62_DOM4J/.O@$OA1|WI6GL<M`XG.\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory1);
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory1);
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      String string1 = "\\9-Y";
      Namespace namespace0 = defaultDocumentFactory2.createNamespace("9-Y", "");
      defaultDocumentFactory2.createQName("uB#.:", namespace0);
      QName qName0 = QName.get("", namespace0);
      QName.get("9-Y", "uB#.:");
      defaultDocumentFactory0.createElement(qName0);
      sAXReader0.setFeature("http://xml.org/sax/features/namespaces", false);
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      ElementStack elementStack0 = new ElementStack();
      // Undeclared exception!
      try { 
        sAXModifyElementHandler0.onEnd(elementStack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.dom4j.io.SAXModifyElementHandler", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.471853918106659
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      StringReader stringReader0 = new StringReader("{LhI/");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.068792830800453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      HandlerBase handlerBase0 = new HandlerBase();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      sAXReader0.setErrorHandler(handlerBase0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.setIgnoreComments(false);
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl1);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader1.setEncoding("/");
      boolean boolean0 = sAXReader0.isIgnoreComments();
      SAXContentHandler sAXContentHandler0 = sAXReader1.createContentHandler(xMLReader0);
      sAXReader1.configureReader(xMLFilterImpl1, sAXContentHandler0);
      sAXReader1.setIgnoreComments(false);
      sAXReader1.getErrorHandler();
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isMergeAdjacentText());
      
      boolean boolean1 = sAXReader0.isValidating();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      locator2Impl2.getLineNumber();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      xMLFilterImpl1.startPrefixMapping((String) null, (String) null);
      Object object0 = new Object();
      Object object1 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, object2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("!JCQ/r&_yQ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      locator2Impl0.getPublicId();
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      MockFile mockFile0 = new MockFile((String) null, "O");
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      mockFile0.toURL();
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.6129906360689112
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl3);
      locatorImpl0.getPublicId();
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl2);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.setDocumentLocator((Locator) null);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("P5;#>|?G)b&zS$1,Bz");
      sAXReader0.isValidating();
      sAXReader0.getErrorHandler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      stringReader0.skip((-2849L));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9549478780836425
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endElement(":", ":", "  _y #bD");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//home/ubuntu/termite/projects/62_dom4j/!JCQ/r&_yQ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity(":", ":");
      sAXReader_SAXEntityResolver0.resolveEntity("  _y #bD", "  _y #bD");
      sAXReader_SAXEntityResolver0.resolveEntity("JlsS[a^'!D", "JlsS[a^'!D");
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity(":", ":");
      assertNotSame(inputSource1, inputSource0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.560882114507032
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      sAXReader0.setDispatchHandler(dispatchHandler0);
      String string0 = "";
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      xMLFilterImpl0.startPrefixMapping("", "");
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl3);
      locatorImpl0.getPublicId();
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl2);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setEncoding("http://xml.org/sax/features/validation");
      defaultHandler2_0.setDocumentLocator((Locator) null);
      sAXReader0.setErrorHandler(defaultHandler2_0);
      StringReader stringReader0 = new StringReader("");
      sAXReader0.isValidating();
      try { 
        sAXReader0.read((Reader) stringReader0, "org.jaxen.expr.DefaultNameStep");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^N");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      MockFile mockFile0 = new MockFile("}}EudRI-*s8?7R");
      mockFile0.createNewFile();
      mockFile0.toPath();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockFile0.setWritable(false, true);
      mockFile0.deleteOnExit();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.getXMLReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertNotNull(xMLReader0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4611724583363683
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl2);
      sAXContentHandler0.setDocumentLocator(locatorImpl2);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("");
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4871282675082766
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl3);
      locatorImpl0.getPublicId();
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl2);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      try { 
        sAXReader0.read(" is in scope on: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol:  is in scope on:  Nested exception: no protocol:  is in scope on: 
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl3);
      sAXContentHandler0.setDocumentLocator(locatorImpl3);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("");
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.getErrorHandler();
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertTrue(boolean0);
      
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      MockFile mockFile0 = new MockFile("w[uQ+", "w[uQ+");
      URL uRL0 = mockFile0.toURL();
      MockURL.URL(uRL0, "X)");
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/w[uQ+/w[uQ+ (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/w[uQ+/w[uQ+ (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLReader(xMLFilterImpl0);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      namespaceStack0.getAttributeQName("~>$Qb>C5:NU", "org.dom4j.dom.DOMEntityReference", "org.dom4j.dom.DOMEntityReference");
      QName qName0 = QName.get("~>$Qb>C5:NU", (Namespace) null);
      BeanElement beanElement0 = new BeanElement(qName0);
      beanElement0.addElement("~>$Qb>C5:NU", "~>$Qb>C5:NU");
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXModifyElementHandler0.getModifiedElement();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "~>$Qb>C5:NU";
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, (-45));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.ElementStack", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader();
      QName qName0 = QName.get(" : ", " : ");
      qName0.getDocumentFactory();
      QName.get("[ lhs: ", (Namespace) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " : ");
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      locator2Impl2.getLineNumber();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      xMLFilterImpl1.startPrefixMapping((String) null, (String) null);
      Object object0 = new Object();
      Object object1 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      Object object2 = new Object();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      DefaultAttribute defaultAttribute0 = new DefaultAttribute("http://xml.org/sax/properties/lexical-handler", "KqC=9W'#?;z'*Yj", (Namespace) null);
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", defaultAttribute0);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/lexical-handler' cannot be casted to org.xml.sax.ext.LexicalHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2975883560528287
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endElement(":", ":", "  _y #bD");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      DOMDocument dOMDocument0 = new DOMDocument(":");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      pipedInputStream0.markSupported();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "F");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@3e2fde4f Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@3e2fde4f Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.218655583840207
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      pipedInputStream0.mark(3149);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      pipedInputStream0.markSupported();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, sAXContentHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@6d098482 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 58);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream1, 900);
      PipedInputStream pipedInputStream3 = null;
      try {
        pipedInputStream3 = new PipedInputStream(pipedOutputStream1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "";
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endElement(":", ":", "  _y #bD");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.getContentHandler();
      xMLFilterImpl2.endPrefixMapping("whaQ:fw_g!8VqL7");
      xMLFilterImpl1.processingInstruction("whaQ:fw_g!8VqL7", "whaQ:fw_g!8VqL7");
      xMLFilterImpl2.getDTDHandler();
      xMLFilterImpl1.endDocument();
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl((XMLReader) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("whaQ:fw_g!8VqL7", "whaQ:fw_g!8VqL7", "whaQ:fw_g!8VqL7", 236);
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "pXt\"k>aL", "<LE7FL69*Ms_CR", (-98));
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/use-locator2", false);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // Feature 'http://xml.org/sax/features/use-locator2' is read only.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("[(DefaultCommentNodeStep): ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("//tmp/aaT-M/_pr;zj&pD0aaT-M/_pr;zj&pD", "//tmp/aaT-M/_pr;zj&pD0aaT-M/_pr;zj&pD");
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("[(DefaultCommentNodeStep): ", "[(DefaultCommentNodeStep): ");
      assertNotSame(inputSource1, inputSource0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("!.CkRUuj$Z/!JCQ/r&_yQ");
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("!.CkRUuj$Z/!JCQ/r&_yQ");
      EvoSuiteFile evoSuiteFile3 = null;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      String string0 = "!JCQ/r&_yQ";
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "!JCQ/r&_yQ");
      String string1 = "//tmp/]CW/%u]K2k _0\"4/!JCQ/r&_yQ";
      MockFile mockFile0 = new MockFile("!.CkRUuj$Z", "//tmp/]CW/%u]K2k _0\"4/!JCQ/r&_yQ");
      EvoSuiteFile evoSuiteFile4 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!JCQ/r&_yQ");
      sAXReader0.setStringInternEnabled(true);
      try { 
        mockFile0.createNewFile();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.4208121818995942
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      defaultDocumentFactory0.createEntity("http://xml.org/sax/features/string-interning", "7P?KPU]X tfED}");
      HandlerBase handlerBase0 = new HandlerBase();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      sAXReader0.setErrorHandler(handlerBase0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("$[8/cUvSW}>3{dO");
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Pb\"/[5Z%Qw e");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack0.clear();
      Namespace namespace0 = namespaceStack1.addNamespace(" : ", "RF+I.C^");
      NamespaceStack namespaceStack2 = new NamespaceStack();
      namespaceStack2.contains(namespace0);
      namespaceStack1.getDefaultNamespace();
      Namespace namespace1 = namespaceStack2.addNamespace("http://xml.org/sa{/features/namespace-prefixes", "P.>v;{Ho%bRAfiR");
      namespace0.getPath();
      namespaceStack2.getDefaultNamespace();
      QName qName0 = QName.get("namespace:: : ", namespace0, "<![CDATA[");
      Namespace namespace2 = Namespace.XML_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement(qName0, 61);
      namespace1.matches("Pb\"/[5Z%Qw e");
      namespace0.asXPathResult(dOMElement0);
      Namespace namespace3 = Namespace.XML_NAMESPACE;
      namespace3.toString();
      SAXReader sAXReader0 = new SAXReader();
      HandlerBase handlerBase0 = new HandlerBase();
      DefaultAttribute defaultAttribute0 = new DefaultAttribute(dOMElement0, qName0, " : ");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2786004072646815
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      namespaceStack0.clear();
      defaultDocumentFactory0.createPattern("http://xml.org/sax/features/namespaces");
      namespaceStack0.getDefaultNamespace();
      NamespaceStack namespaceStack1 = new NamespaceStack(documentFactory0);
      Namespace namespace0 = namespaceStack1.addNamespace("", "");
      namespace0.getXPathNameStep();
      namespace0.getPath();
      QName.get("", (Namespace) null, "http://xml.org/sax/features/namespaces");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack2 = new NamespaceStack(defaultDocumentFactory0);
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      StringReader stringReader0 = new StringReader("");
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2610316958599697
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endElement(":", ":", "  _y #bD");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      pipedOutputStream1.close();
      pipedOutputStream1.flush();
      pipedInputStream0.close();
      pipedInputStream0.markSupported();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      try { 
        sAXReader0.setXMLReaderClassName("//home/ubuntu/termite/projects/62_dom4j/org.jaxen.function.PositionFunction/name() requires zero or one argument./org.jaxen.function.PositionFunction0org.jaxen.function.PositionFunction");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //home/ubuntu/termite/projects/62_dom4j/org.jaxen.function.PositionFunction/name() requires zero or one argument./org.jaxen.function.PositionFunction0org.jaxen.function.PositionFunction not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.setEncoding("");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"\". Nested exception: Invalid encoding name \"\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8250860201041013
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      Object object0 = new Object();
      sAXReader0.getErrorHandler();
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter();
      SAXReader sAXReader1 = new SAXReader(parserAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader1.createContentHandler(parserAdapter0);
      sAXReader1.configureReader(parserAdapter0, sAXContentHandler0);
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      boolean boolean0 = false;
      sAXReader1.setMergeAdjacentText(false);
      sAXReader0.isMergeAdjacentText();
      sAXReader0.getDispatchHandler();
      DefaultDocumentFactory.getInstance();
      sAXReader0.getDispatchHandler();
      sAXReader0.removeHandler("http://xml.org/sax/properties/lexical-handler");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      try { 
        defaultDocumentFactory0.createXPath("_e+>au*qPYHoNUs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XPath expression: _e+>au*qPYHoNUs Unexpected '>'
         //
         verifyException("org.dom4j.xpath.DefaultXPath", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8250860201041013
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      Object object0 = new Object();
      sAXReader0.getErrorHandler();
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter();
      SAXReader sAXReader1 = new SAXReader(parserAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader1.createContentHandler(parserAdapter0);
      sAXReader1.configureReader(parserAdapter0, sAXContentHandler0);
      sAXReader0.setMergeAdjacentText(false);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      boolean boolean0 = false;
      sAXReader1.setMergeAdjacentText(false);
      sAXReader0.isMergeAdjacentText();
      sAXReader0.getDispatchHandler();
      DefaultDocumentFactory.getInstance();
      sAXReader0.getDispatchHandler();
      sAXReader0.removeHandler("http://xml.org/sax/properties/lexical-handler");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      try { 
        defaultDocumentFactory0.createXPath("_e+>au*qPYHoNUs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XPath expression: _e+>au*qPYHoNUs Unexpected '>'
         //
         verifyException("org.dom4j.xpath.DefaultXPath", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockFile mockFile0 = new MockFile("");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.endElement("//home/ubuntu/termite/projects/62_dom4j/!JCQ/r&_yQ", "4~Ldt-y+}c", "4~Ldt-y+}c");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      DOMDocument dOMDocument0 = new DOMDocument("4~Ldt-y+}c");
      xMLFilterImpl1.endPrefixMapping("org.dom4j.bean.BeanMetaData");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4~Ldt-y+}c");
      sAXReader0.installXMLFilter(xMLFilterImpl1);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      XMLReader xMLReader1 = sAXReader0.getXMLReader();
      assertSame(xMLReader1, xMLReader0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.getXMLReader();
      sAXReader0.setStripWhitespaceText(false);
      try { 
        sAXReader0.setXMLReaderClassName("orgdom4j.io.SAXReader");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class orgdom4j.io.SAXReader not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      ElementModifier elementModifier0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      SAXModifyElementHandler sAXModifyElementHandler1 = new SAXModifyElementHandler((ElementModifier) null);
      BeanElement beanElement0 = new BeanElement("Text", namespace0, sAXModifyElementHandler1);
      String string0 = null;
      StringReader stringReader0 = new StringReader("org.jaxen.function.ext.LocaleFunctionSupport");
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("H|K6M|H>?-<PM1D%7>");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Namespace namespace0 = new Namespace("H|K6M|H>?-<PM1D%7>", "H|K6M|H>?-<PM1D%7>");
      namespaceStack0.push(namespace0);
      sAXReader0.createXMLReader();
      Namespace namespace1 = namespaceStack0.addNamespace("H|K6M|H>?-<PM1D%7>", "//home/ubuntu/termite/projects/62_dom4j/V,F^WqA/+C& :'/?3\f'vMU70V,F^WqA");
      namespaceStack0.getDefaultNamespace();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      NamespaceStack namespaceStack2 = new NamespaceStack();
      NamespaceStack namespaceStack3 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack3.clear();
      NamespaceStack namespaceStack4 = new NamespaceStack();
      namespaceStack1.addNamespace("Ta", "Ta");
      NamespaceStack namespaceStack5 = new NamespaceStack();
      namespaceStack0.contains(namespace1);
      namespaceStack5.getDefaultNamespace();
      String string0 = "Da5`IZ2vtW\\U/C@~";
      Namespace namespace2 = namespaceStack3.addNamespace("", "Da5`IZ2vtWU/C@~");
      NamespaceStack namespaceStack6 = new NamespaceStack();
      namespaceStack6.getDefaultNamespace();
      Namespace namespace3 = Namespace.XML_NAMESPACE;
      // Undeclared exception!
      try { 
        namespace2.matches("/k/f~Vtyp2_KX K$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XPath expression: /k/f~Vtyp2_KX K$ Unexpected '~Vtyp2_KX K$'
         //
         verifyException("org.dom4j.xpath.DefaultXPath", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      StringReader stringReader0 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/org.jaxen.function.PositionFunction/name() requires zero or one argument./org.jaxen.function.PositionFunction0org.jaxen.function.PositionFunction");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@31e2555b Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@31e2555b Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.getDTDHandler();
      xMLFilterImpl0.endDocument();
      xMLFilterImpl0.endDocument();
      SAXReader sAXReader0 = new SAXReader(false);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDefaultHandler(pruningDispatchHandler0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.2969629651835355
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@3718d09d Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@3718d09d Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Pb\"/[5Z%Qw e");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.addNamespace("l+Fzh2}pl9l\"aH", "l+Fzh2}pl9l\"aH");
      namespaceStack0.getDefaultNamespace();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack0.clear();
      Namespace namespace0 = namespaceStack1.addNamespace(" : ", "RF+I.C^");
      NamespaceStack namespaceStack2 = new NamespaceStack();
      namespaceStack2.contains(namespace0);
      namespaceStack1.getDefaultNamespace();
      Namespace namespace1 = namespaceStack2.addNamespace("http://xml.org/sa{/features/namespace-prefixes", "P.>v;{Ho%bRAfiR");
      namespaceStack2.getDefaultNamespace();
      Namespace namespace2 = Namespace.XML_NAMESPACE;
      namespace1.matches("Pb\"/[5Z%Qw e");
      DOMNamespace dOMNamespace0 = new DOMNamespace("Pb\"/[5Z%Qw e", "http://xml.org/sa{/features/namespace-prefixes");
      Namespace namespace3 = Namespace.XML_NAMESPACE;
      namespace3.toString();
      namespace3.toString();
      SAXReader sAXReader0 = new SAXReader();
      HandlerBase handlerBase0 = new HandlerBase();
      MockFile mockFile0 = new MockFile("", "-qEkcP$5s%");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl3);
      locatorImpl0.getPublicId();
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl2);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.setDocumentLocator((Locator) null);
      sAXReader0.setErrorHandler(defaultHandler2_0);
      sAXReader0.isValidating();
      sAXReader0.getErrorHandler();
      sAXReader0.isStringInternEnabled();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertNotNull(xMLReader0);
      
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createEntity("", "=");
      defaultDocumentFactory0.createDocument("");
      defaultDocumentFactory0.createQName("//home/ubuntu/termite/projects/62_dom4j/http:/xml.org/sax/properties/declaration-handler/!JCQ/r&_yQ", "l)=3C:");
      defaultDocumentFactory0.createPattern("http://xml.org/sax/features/namespaces");
      namespaceStack0.getDefaultNamespace();
      NamespaceStack namespaceStack1 = new NamespaceStack(documentFactory0);
      namespaceStack1.clear();
      Namespace namespace0 = namespaceStack1.addNamespace("//tmp/ [ProcessingInstruction: &0/home/ubuntu/termite/projects/62_dom4j/!JCQ/r&_yQ", "");
      QName.get("", (Namespace) null, "");
      namespace0.toString();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DocumentFactory documentFactory1 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory1, false);
      sAXReader0.getDocumentFactory();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.io.SAXReader$SAXEntityResolver");
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("!JCQ/r&_yQ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream2);
      pipedInputStream0.markSupported();
      StringReader stringReader0 = new StringReader("{]z4)z?)");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, true);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIgnoreComments(true);
      sAXReader0.isIgnoreComments();
      String string0 = "";
      sAXReader0.setEncoding("");
      String string1 = "PFx%m-IES*,K-MKe'>";
      try { 
        sAXReader0.setXMLReaderClassName("PFx%m-IES*,K-MKe'>");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class PFx%m-IES*,K-MKe'> not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.getXMLFilter();
      sAXReader0.addHandler("", dispatchHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'o';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = 'e';
      charArray0[5] = '';
      charArray0[6] = '$';
      charArray0[7] = 'U';
      xMLFilterImpl0.characters(charArray0, (-2114), 0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      sAXReader0.setMergeAdjacentText(false);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.909886099701744
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      HandlerBase handlerBase0 = new HandlerBase();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      sAXReader0.setErrorHandler(handlerBase0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("$[8/cUvSW}>3{dO");
      sAXReader_SAXEntityResolver0.resolveEntity("", "?]5=UwBK*,kZ=Gv");
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.setIgnoreComments(false);
      sAXReader0.installXMLFilter((XMLReader) null);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader0.isIgnoreComments();
      SAXContentHandler sAXContentHandler0 = sAXReader1.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader1.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.4445705777155124
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '\"';
      charArray0[2] = 'C';
      charArray0[3] = 'w';
      charArray0[4] = 'C';
      charArray0[5] = '6';
      charArray0[6] = 'q';
      charArray0[7] = 'I';
      charArray0[8] = ';';
      defaultHandler0.ignorableWhitespace(charArray0, 91, 91);
      sAXReader0.setEntityResolver(defaultHandler0);
      sAXReader0.addHandler("9", (ElementHandler) null);
      sAXReader0.isIgnoreComments();
      sAXReader0.getEntityResolver();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      byte[] byteArray0 = new byte[0];
      bufferedInputStream0.read(byteArray0);
      StringReader stringReader0 = new StringReader("AlPxy>e?f");
      try { 
        sAXReader0.read((Reader) stringReader0, "9");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/9 : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.addHandler("//home/ubuntu/termite/projects/62_dom4j/!JCQ/r&_yQ/!JCQ/r&_yQ", dispatchHandler0);
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      sAXReader0.getEncoding();
      MockFile.createTempFile("//home/ubuntu/termite/projects/62_dom4j/(1sJW?SmN,w}~/(1sJW?SmN,w}~0.tmp", "//home/ubuntu/termite/projects/62_dom4j/!JCQ/r&_yQ/uN;6$4)c&@X)C");
      mockFile0.toURL();
      DefaultDocument defaultDocument0 = new DefaultDocument("");
      String string1 = "\\~>$Qb>C5:NU";
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      QName qName0 = QName.get("~>$Qb>C5:NU", (Namespace) null);
      BeanElement beanElement0 = new BeanElement(qName0);
      beanElement0.addElement("~>$Qb>C5:NU", "~>$Qb>C5:NU");
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXModifyElementHandler0.getModifiedElement();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "~>$Qb>C5:NU";
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, (-45));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.ElementStack", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1064, (byte)77);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)77);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      namespaceStack0.clear();
      defaultDocumentFactory0.createPattern("http://xml.org/sax/features/namespaces");
      defaultDocumentFactory0.createPattern("http://xml.org/sax/features/namespaces");
      defaultDocumentFactory0.createEntity("]q@Tfv", "O@GxrFU8o");
      namespaceStack0.clear();
      namespaceStack0.getDefaultNamespace();
      NamespaceStack namespaceStack1 = new NamespaceStack(documentFactory0);
      namespaceStack0.clear();
      Namespace namespace0 = namespaceStack1.addNamespace("http://xml.org/sax/features/namespaces", "http://xml.org/sax/features/namespaces");
      namespaceStack1.clear();
      namespaceStack1.contains(namespace0);
      namespace0.getPath();
      QName.get("Error on line ", namespace0, ".G8qfhj2DH]<%=w");
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      namespace1.toString();
      StringReader stringReader0 = new StringReader("org.dom4j.Namespace@7469e3c8 [Namespace: prefix xml mapped to URI \"http://www.w3.org/XML/1998/namespace\"]");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setValidation(true);
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      ElementModifier elementModifier0 = null;
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      sAXModifyElementHandler0.getModifiedElement();
      SAXModifyElementHandler sAXModifyElementHandler1 = new SAXModifyElementHandler((ElementModifier) null);
      ElementStack elementStack0 = new ElementStack();
      // Undeclared exception!
      try { 
        sAXModifyElementHandler0.onEnd(elementStack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.dom4j.io.SAXModifyElementHandler", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.removeHandler("http://xml.org/sax/features/string-interning");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      QName qName0 = QName.get("~>$Qb>C5:NU", (Namespace) null);
      BeanElement beanElement0 = new BeanElement(qName0);
      beanElement0.addElement("~>$Qb>C5:NU", "~>$Qb>C5:NU");
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXModifyElementHandler0.getModifiedElement();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "~>$Qb>C5:NU";
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, (-45));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.ElementStack", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "wz(Qc=Kc2";
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      ElementModifier elementModifier0 = null;
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.setFeature("wz(Qc=Kc2", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'wz(Qc=Kc2' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      sAXReader0.installXMLFilter((XMLReader) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      String string0 = "Al,z";
      String string1 = "g)sNT?";
      // Undeclared exception!
      try { 
        namespaceStack0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      String string0 = "";
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl3);
      locatorImpl0.getPublicId();
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl2);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.setDocumentLocator((Locator) null);
      sAXReader0.setErrorHandler(defaultHandler2_0);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      ElementStack elementStack0 = new ElementStack();
      sAXReader0.getDispatchHandler();
      // Undeclared exception!
      try { 
        sAXModifyElementHandler0.onEnd(elementStack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.dom4j.io.SAXModifyElementHandler", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.resetHandlers();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "Tt6)4");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      sAXModifyElementHandler0.getModifiedElement();
      SAXModifyElementHandler sAXModifyElementHandler1 = new SAXModifyElementHandler((ElementModifier) null);
      ElementStack elementStack0 = new ElementStack();
      elementStack0.reallocate(2674);
      // Undeclared exception!
      try { 
        sAXModifyElementHandler0.onEnd(elementStack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.dom4j.io.SAXModifyElementHandler", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile("", "");
      SAXReader sAXReader0 = new SAXReader(false);
      assertFalse(sAXReader0.isValidating());
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      MockFile mockFile2 = new MockFile("et[E3hmdv=cQr*{>k", " of document ");
      DOMDocument dOMDocument0 = new DOMDocument(" of document ");
      sAXReader0.configureReader(xMLFilterImpl0, (DefaultHandler) null);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.createDefaultEntityResolver("y@8Ggu");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.createDefaultEntityResolver("//home/ubuntu/termite/projects/62_dom4j!JCQ/r&_yQ");
      sAXReader0.getEntityResolver();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.6195259631210703
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Pb\"/[5Z%Qw e");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack1 = new NamespaceStack(defaultDocumentFactory0);
      namespaceStack0.clear();
      Namespace namespace0 = namespaceStack1.addNamespace(" : ", "RF+I.C^");
      NamespaceStack namespaceStack2 = new NamespaceStack();
      namespaceStack2.contains(namespace0);
      namespaceStack1.getDefaultNamespace();
      Namespace namespace1 = namespaceStack2.addNamespace("http://xml.org/sa{/features/namespace-prefixes", "P.>v;{Ho%bRAfiR");
      namespace0.getPath();
      namespaceStack2.getDefaultNamespace();
      QName qName0 = QName.get("namespace:: : ", namespace0, "<![CDATA[");
      Namespace namespace2 = Namespace.XML_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement(qName0, 61);
      namespace1.matches("Pb\"/[5Z%Qw e");
      namespace0.asXPathResult(dOMElement0);
      Namespace namespace3 = Namespace.XML_NAMESPACE;
      namespace3.toString();
      SAXReader sAXReader0 = new SAXReader();
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("http://xml.org/sa{/features/namespace-prefixes", "");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endElement(":", ":", "  _y #bD");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      DOMDocument dOMDocument0 = new DOMDocument(":");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      pipedInputStream0.markSupported();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("F");
      sAXReader_SAXEntityResolver0.resolveEntity("The Attribute already has an existing parent \"", "http://xml.org/sax/features/validation");
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("The Attribute already has an existing parent \"");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class The Attribute already has an existing parent \" not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      locator2Impl2.getLineNumber();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      xMLFilterImpl1.startPrefixMapping((String) null, (String) null);
      Object object0 = new Object();
      Object object1 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      Object object2 = new Object();
      try { 
        sAXReader0.read("Yc#J");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/Yc (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/Yc (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      ElementModifier elementModifier0 = null;
      sAXReader0.isStripWhitespaceText();
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      sAXModifyElementHandler0.getModifiedElement();
      SAXModifyElementHandler sAXModifyElementHandler1 = new SAXModifyElementHandler((ElementModifier) null);
      ElementStack elementStack0 = new ElementStack();
      // Undeclared exception!
      try { 
        sAXModifyElementHandler1.onEnd(elementStack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.dom4j.io.SAXModifyElementHandler", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      StackTraceElement stackTraceElement0 = new StackTraceElement("//home/ubuntu/termite/projects/62_dom4j/!.CkRUuj$Z/home/ubuntu/termite/projects/62_dom4j/org.jaxen.function.PositionFunction/name() requires zero or one argument./org.jaxen.function.PositionFunction0org.jaxen.function.PositionFunction", "//home/ubuntu/termite/projects/62_dom4j/!.CkRUuj$Z/home/ubuntu/termite/projects/62_dom4j/org.jaxen.function.PositionFunction/name() requires zero or one argument./org.jaxen.function.PositionFunction0org.jaxen.function.PositionFunction/home/ubuntu/termite/projects/62_dom4j/!.CkRUuj$Z/home/ubuntu/termite/projects/62_dom4j/org.jaxen.function.PositionFunction/name() requires zero or one argument./org.jaxen.function.PositionFunction0org.jaxen.function.PositionFunction/wFp'1wFp'", "ZQfsyr", 737);
      StackTraceElement stackTraceElement1 = new StackTraceElement("h0!}:Tc", "ZQfsyr", "//home/ubuntu/termite/projects/62_dom4j/http:/xml.org/sax/features/namespaces/http:/xml.org/sax/features/namespaces", 56);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertTrue(sAXReader0.isValidating());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DOMElement dOMElement0 = new DOMElement("/T&|e|l");
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument((String) null, dOMElement0, dOMDocumentType0);
      dOMDocument0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      try { 
        sAXReader0.setProperty("ends-ith() requires two arguments.", "ends-ith() requires two arguments.");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'ends-ith() requires two arguments.' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)46;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)46;
      byteArray0[4] = (byte)58;
      pipedOutputStream0.write(byteArray0);
      pipedOutputStream0.close();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream1);
      pipedInputStream1.close();
      pipedInputStream1.markSupported();
      pipedInputStream1.mark((byte)58);
      pipedInputStream1.skip(0L);
      pipedInputStream0.markSupported();
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("!JCQ/r&_yQ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      MockFile mockFile0 = new MockFile("!JCQ/r&_yQ");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      MockURL.getFileExample();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("//tmp/]CW/%u]K2k _0", "To0%sA`3~i", "To0%sA`3~i");
      BeanElement beanElement0 = new BeanElement(qName0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 47);
      PipedOutputStream pipedOutputStream2 = null;
      try {
        pipedOutputStream2 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("z,PJ''OiDRDm{xV}", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class z,PJ''OiDRDm{xV} not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string0 = "  _y #bD";
      xMLFilterImpl0.endElement("", "", "  _y #bD");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Namespace namespace0 = namespaceStack0.addNamespace("/18J$FS_", "  _y #bD");
      namespace0.getPath();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string1 = null;
      InputSource inputSource0 = new InputSource("");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      String string2 = "//tmp/aaT-M/_pr;zj&pD0aaT-M/_pr;zj&pD";
      xMLFilterImpl1.resolveEntity("//tmp/aaT-M/_pr;zj&pD0aaT-M/_pr;zj&pD", "");
      // Undeclared exception!
      try { 
        xMLFilterImpl1.parse((InputSource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No parent for filter
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }
}
