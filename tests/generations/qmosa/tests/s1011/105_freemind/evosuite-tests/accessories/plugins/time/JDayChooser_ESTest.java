/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 12:48:05 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import freemind.modes.MindIcon;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.common.plugins.MapNodePositionHolderBase;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.io.File;
import java.text.DateFormatSymbols;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.help.ForwardAction;
import javax.swing.AbstractButton;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.event.RowSorterEvent;
import javax.swing.filechooser.FileSystemView;
import javax.swing.plaf.basic.BasicToolBarUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.css.engine.CSSContext;
import org.apache.batik.css.engine.CSSEngine;
import org.apache.batik.dom.AbstractStylableDocument;
import org.apache.batik.dom.svg.SVGOMDocument;
import org.apache.batik.dom.svg12.SVG12DOMImplementation;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.DOMTreeManager;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.DefaultImageHandler;
import org.apache.batik.svggen.ExtensionHandler;
import org.apache.batik.svggen.ImageHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.processor.ProcessorCharacters;
import org.apache.xalan.templates.ElemIf;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.mock.javax.swing.filechooser.MockFileSystemView;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentType;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2978893000399134
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.setMonth((-843));
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MockDate mockDate0 = new MockDate(68, 5, (-325), 14, 4, (-325));
      jDayChooser0.setSelectableDateRange(date0, mockDate0);
      MockDate mockDate1 = new MockDate(944L);
      MockDate mockDate2 = new MockDate();
      jDayChooser0.setMaxSelectableDate(date1);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2603771771757026
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVisibleRect();
      jDayChooser0.drawDays();
      jDayChooser0.firePropertyChange("day", 0.0F, 0.0F);
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.setMonth(3);
      jDayChooser0.getComponentPopupMenu();
      MockDate mockDate0 = new MockDate((-1648), 609, (-834), 608, 608, 608);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont((String) null, 568, 609);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setFont(font0);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      int int0 = jDayChooser2.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser2.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser2.getMaxDayCharacters());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2504583016530955
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addNotify();
      jDayChooser0.getVisibleRect();
      jDayChooser0.drawDays();
      jDayChooser0.firePropertyChange("org.apache.batik.dom.svg.SVGOMAElement", (float) (-848), (float) (-848));
      jDayChooser0.getPropertyChangeListeners("org.apache.batik.dom.svg.SVGOMAElement");
      jDayChooser0.setMonth((-848));
      jDayChooser0.setMaxDayCharacters((-848));
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      JButton jButton0 = new JButton("accessories.plugins.time.JDayChoser", imageIcon0);
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.setYear((-1166));
      jDayChooser0.setDecorationBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      SVGOMDocument sVGOMDocument0 = new SVGOMDocument((DocumentType) null, sVG12DOMImplementation0);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGraphics2D.buildSVGGeneratorContext(sVGOMDocument0, defaultImageHandler0, defaultExtensionHandler0);
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      bridgeContext0.setDynamic(false);
      CSSEngine cSSEngine0 = sVG12DOMImplementation0.createCSSEngine((AbstractStylableDocument) sVGOMDocument0, (CSSContext) bridgeContext0);
      sVGOMDocument0.setCSSEngine(cSSEngine0);
      ImageHandler imageHandler0 = sVGGeneratorContext0.getImageHandler();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGOMDocument0, imageHandler0, defaultExtensionHandler0, false);
      jDayChooser0.setDay(3);
      jDayChooser0.getSelectedDay();
      assertEquals(3, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1700989912782065
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-40), "I2S)");
      actionEvent0.paramString();
      jDayChooser0.setToolTipText("I2S)");
      actionEvent0.paramString();
      Color color0 = Color.ORANGE;
      JTable jTable0 = new JTable((TableModel) null);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      JComponent.isLightweightComponent(jTableHeader0);
      jDayChooser0.setMonth(6);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMonth(0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3791536400466717
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DebugGraphics.flashColor();
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      MindIcon.factory("day", imageIcon0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.firePropertyChange("*!_1r1U", (byte)4, (byte)37);
      jDayChooser1.getSundayForeground();
      jDayChooser1.setMaxDayCharacters((-1));
      jDayChooser1.setFocus();
      jDayChooser0.getDay();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setDecorationBordersVisible(true);
      jDayChooser0.setDecorationBordersVisible(true);
      JDayChooser jDayChooser3 = new JDayChooser();
      boolean boolean0 = new Boolean(false);
      jDayChooser3.getSelectedDay();
      jDayChooser2.setEnabled(true);
      Locale locale0 = Locale.CANADA_FRENCH;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      jDayChooser2.setCalendar(calendar0);
      assertTrue(jDayChooser2.isDecorationBordersVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.167758575133943
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      jDayChooser0.transferFocusDownCycle();
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      float[] floatArray0 = new float[9];
      systemColor0.getRGBComponents(floatArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      floatArray0[0] = (-946.9F);
      floatArray0[1] = 2297.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-2932.559F);
      floatArray0[4] = 1248.9897F;
      floatArray0[5] = 255.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1942.7451F;
      floatArray0[8] = (-314.0198F);
      systemColor0.getRGBColorComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.265536600894359
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.getDefaultLocale();
      jDayChooser0.drawDays();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser1 = new JDayChooser();
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      ActionEvent actionEvent0 = new ActionEvent(rowSorterEvent_Type0, 9, "Windows");
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke((-1245), 9);
      actionEvent0.setSource(aWTKeyStroke0);
      String string0 = AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY;
      Color color0 = Color.ORANGE;
      Color color1 = Color.ORANGE;
      JTable jTable0 = new JTable((TableModel) null);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      jTableHeader0.transferFocusBackward();
      JComponent.isLightweightComponent(jDayChooser1);
      jTable0.getTableHeader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u0001HT");
      jDayChooser1.setMonth((-1245));
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser1.setMonth(354);
      jDayChooser1.getDaysInMonth();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(591);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2114919974299245
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      jDayChooser0.createImage((-40), 838);
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.isRequestFocusEnabled();
      jDayChooser0.getDay();
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      sVG12DOMImplementation0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser1.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.317535705776153
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DebugGraphics.flashColor();
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      MindIcon.factory("day", imageIcon0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.firePropertyChange("*!_1r1U", (byte)4, (byte)37);
      jDayChooser1.getSundayForeground();
      jDayChooser1.setMaxDayCharacters((-1));
      jDayChooser1.setFocus();
      jDayChooser0.getDay();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setDecorationBordersVisible(true);
      jDayChooser0.setDecorationBordersVisible(true);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.isDecorationBordersVisible();
      jDayChooser3.getSelectedDay();
      jDayChooser2.setDay((-3585));
      // Undeclared exception!
      try { 
        jDayChooser2.addListeners(312);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2308802695494605
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("org.apache.batik.dom.svg.SVGOMAElement", (float) (-863), (float) (-863));
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.setMonth((-863));
      jDayChooser0.getComponentPopupMenu();
      StyleContext.getDefaultStyleContext();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(3366);
      jDayChooser0.addListeners(0);
      jDayChooser0.initDecorations();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVisibleRect();
      jDayChooser0.drawDays();
      ActionEvent actionEvent0 = new ActionEvent("org.apache.batik.dom.svg.SVGOMAElement", 0, "org.apache.batik.dom.svg.SVGOMAElement", 0);
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      actionEvent0.setSource(rowSorterEvent_Type0);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.231659612100955
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DebugGraphics.flashColor();
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      MindIcon.factory("day", imageIcon0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.firePropertyChange("*!_1r1U", (byte)4, (byte)37);
      jDayChooser1.getSundayForeground();
      jDayChooser0.setMaxDayCharacters(1814);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 8249);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.272009424638559
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = JComponent.getDefaultLocale();
      jDayChooser0.drawDays();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 27, (-2554L), 1001, 40, 'O');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.keyPressed(keyEvent0);
      Document document0 = null;
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-163);
      jDayChooser0.setMonth((-163));
      jDayChooser0.setLocale(locale0);
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D((Document) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // domFactory should not be null
         //
         verifyException("org.apache.batik.svggen.SVGGeneratorContext", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MapNodePositionHolderBase.getMapLocationIcon();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2056, (-1362L), 45, 2056, 'b');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.133754759903554
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBackground();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isPaintingForPrint();
      jDayChooser0.setMonth(331);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(31, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.164789965657869
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVisibleRect();
      jDayChooser0.drawDays();
      ActionEvent actionEvent0 = new ActionEvent("org.apache.balik.dom.svg.SVGOMAElement", 0, "org.apache.balik.dom.svg.SVGOMAElement", 0);
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      actionEvent0.setSource(rowSorterEvent_Type0);
      String string0 = AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY;
      Color color0 = Color.ORANGE;
      Color color1 = Color.ORANGE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.drawDays();
      jDayChooser0.setToolTipText("accessories.plugins.time.JDayChooser$DecoratorButton");
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      MindIcon.factory("keystroke_find", imageIcon0);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals((-6029312), color0.getRGB());
      
      jDayChooser0.setDecorationBordersVisible(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 28);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1345674325171218
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxDayCharacters();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StringContent stringContent0 = new StringContent(0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      BrowseMode browseMode0 = new BrowseMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.320139906518719
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ForwardAction forwardAction0 = new ForwardAction((Object) null);
      jDayChooser0.removeMouseListener(forwardAction0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getY();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setWeekOfYearVisible(true);
      jDayChooser1.isDecorationBackgroundVisible();
      jDayChooser1.getMaxDayCharacters();
      Color color0 = Color.cyan;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1768.973F;
      Color.RGBtoHSB(0, 0, 0, floatArray0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser2.setWeekOfYearVisible(false);
      jDayChooser2.isDecorationBordersVisible();
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      
      jDayChooser1.isWeekOfYearVisible();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3302733517943532
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      Color color0 = Color.cyan;
      float[] floatArray0 = new float[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      floatArray0[0] = (float) 0;
      floatArray0[1] = 1768.973F;
      jDayChooser0.drawWeeks();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setWeekOfYearVisible(true);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.23080938526805
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.X;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL, "day", (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB);
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser0, 552, "org.apache.balik.dom.svg.SVGOMAElement");
      Object object0 = new Object();
      actionEvent1.setSource(object0);
      String string0 = AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY;
      Color color0 = Color.ORANGE;
      Color color1 = Color.ORANGE;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, (int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_ANGLE);
      JTable jTable0 = new JTable(defaultTableModel0);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      jTableHeader0.transferFocusBackward();
      JComponent.isLightweightComponent(jTableHeader0);
      jTableHeader0.getTable();
      MockDate mockDate0 = new MockDate((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL, 552, (-1526), (-101), (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_LTR, 238);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      styleContext0.getFont("5_ga|$0g/(/", (-781), (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL);
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(2787);
      jDayChooser0.getDayPanel();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.170041907787893
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DebugGraphics.flashColor();
      PDFResources pDFResources0 = new PDFResources(777);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      pDFDocumentGraphics2D0.getFontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, (FontInfo) null, pDFDocument0, pDFResourceContext0, "day", "ISO-8859-1", 777);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImageIcon imageIcon0 = new ImageIcon();
      JButton jButton0 = jDayChooser0.selectedDay;
      jDayChooser0.setYear(34);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.133834698693281
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.X;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL, "day", (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB);
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ActionEvent actionEvent1 = new ActionEvent(actionEvent0, 38, "Metal");
      Object object0 = new Object();
      actionEvent1.setSource("org.apache.balik.dom.svg.SVGOMAElement");
      String string0 = AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY;
      Color color0 = Color.ORANGE;
      Color color1 = Color.ORANGE;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(9, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL);
      JTable jTable0 = new JTable(defaultTableModel0);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      jTableHeader0.transferFocusBackward();
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      File file0 = fileUtil0.canonicalFile("contentAreaFilled");
      FileSystemView fileSystemView0 = MockFileSystemView.getFileSystemView();
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser(file0, fileSystemView0);
      JComponent.isLightweightComponent(mockJFileChooser0);
      JTable jTable1 = jTableHeader0.getTable();
      jTable1.getTableHeader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setMonth(19);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMonth((-1437625606));
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setDay(9);
      assertEquals(9, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.296136129879879
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = DebugGraphics.flashColor();
      jDayChooser0.setFocusTraversalKeysEnabled(true);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setYear(8192);
      jDayChooser0.setDecorationBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      SVGOMDocument sVGOMDocument0 = new SVGOMDocument((DocumentType) null, sVG12DOMImplementation0);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGOMDocument0);
      DOMTreeManager dOMTreeManager0 = sVGGraphics2D0.getDOMTreeManager();
      ExtensionHandler extensionHandler0 = dOMTreeManager0.getExtensionHandler();
      SVGGraphics2D.buildSVGGeneratorContext(sVGOMDocument0, defaultImageHandler0, extensionHandler0);
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      UserAgentAdapter userAgentAdapter1 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter1);
      bridgeContext0.setDynamic(false);
      CSSEngine cSSEngine0 = sVG12DOMImplementation0.createCSSEngine((AbstractStylableDocument) sVGOMDocument0, (CSSContext) bridgeContext0);
      sVGOMDocument0.setCSSEngine(cSSEngine0);
      DefaultImageHandler defaultImageHandler1 = new DefaultImageHandler();
      SVGGraphics2D sVGGraphics2D1 = new SVGGraphics2D(sVGOMDocument0, defaultImageHandler1, extensionHandler0, false);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setDay((-700594196));
      jDayChooser0.getSelectedDay();
      jDayChooser0.getDecorationBackgroundColor();
      System.setCurrentTimeMillis(38);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.X;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL, "day", (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB);
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser0, 552, "org.apache.balik.dom.svg.SVGOMAElement");
      Object object0 = new Object();
      actionEvent1.setSource(object0);
      String string0 = AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY;
      Color color0 = Color.ORANGE;
      Color color1 = Color.ORANGE;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, (int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_ANGLE);
      JTable jTable0 = new JTable(defaultTableModel0);
      basicToolBarUI0.getFloatingColor();
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.16480169407465
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-40), "accessories.plugins.time.JDayChooser$DecoratorButton");
      actionEvent0.paramString();
      jDayChooser0.setToolTipText("accessories.plugins.time.JDayChooser$DecoratorButton");
      String string0 = AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY;
      Color color0 = Color.ORANGE;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, (-40), 40, (-40), 'g');
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      jDayChooser0.setMonth((-1168));
      jDayChooser0.getTreeLock();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setDay(40);
      jDayChooser0.drawDays();
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.240235895383868
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, (-3515), 12, 12, 12);
      ActionEvent actionEvent0 = new ActionEvent(date1, (-3515), "day", 12);
      actionEvent0.setSource(date1);
      jDayChooser0.getMouseWheelListeners();
      MapDialog mapDialog0 = new MapDialog();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(12);
      MockLocalDate.now((ZoneId) zoneOffset0);
      MockDate mockDate0 = new MockDate(1, 10085, (-3515), 1, 1);
      MockDate mockDate1 = new MockDate(1);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2978677995185257
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.setMonth(1270);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MockDate mockDate0 = new MockDate(5, 4, (-1831), 4, (-334), (-130049));
      jDayChooser0.setSelectableDateRange(date1, date1);
      MockDate mockDate1 = new MockDate(4);
      MockDate mockDate2 = new MockDate();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1287280798819306
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-40), "I2S)");
      actionEvent0.paramString();
      jDayChooser0.setToolTipText("I2S)");
      actionEvent0.paramString();
      jDayChooser0.getPropertyChangeListeners("unknown type,cmd=I2S),when=0,modifiers=");
      jDayChooser0.setMonth((-40));
      jDayChooser0.getComponentPopupMenu();
      jDayChooser0.setDay((-40));
      MouseEvent mouseEvent0 = null;
      try {
        mouseEvent0 = new MouseEvent((Component) null, (-40), (-2020L), (-40), 47, 0, 1005, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1327209648816816
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      Color color0 = Color.ORANGE;
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10, 0L, 10, (-2759), '(');
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      ElemIf elemIf0 = new ElemIf();
      assertNull(elemIf0.getActualEncoding());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2688514408999025
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      BasicToolBarUI basicToolBarUI0 = new BasicToolBarUI();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.X;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL, "day", (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_TTB);
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser0, 552, "org.apache.balik.dom.svg.SVGOMAElement");
      Object object0 = new Object();
      actionEvent1.setSource(object0);
      String string0 = AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY;
      Color color0 = Color.ORANGE;
      Color color1 = Color.ORANGE;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, (int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_ANGLE);
      Stack<JButton> stack0 = new Stack<JButton>();
      defaultTableModel0.addRow((Vector) stack0);
      JTable jTable0 = new JTable(defaultTableModel0);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      jTableHeader0.transferFocusBackward();
      JComponent.isLightweightComponent(jTableHeader0);
      defaultTableModel0.setColumnCount((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE);
      JTable jTable1 = jTableHeader0.getTable();
      jTable1.getTableHeader();
      jDayChooser0.setFocus();
      jDayChooser0.getKeyListeners();
      jDayChooser0.setEnabled(false);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setMonth(173);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("L6s", 'i', 'r');
      jDayChooser0.getToolkit();
      jDayChooser0.getToolkit();
      jDayChooser0.getBaseline(460, 460);
      jDayChooser0.firePropertyChange("filter_not", 0.0F, (float) 460);
      jDayChooser0.setFocusCycleRoot(true);
      jDayChooser0.repaint((-659L));
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setToolTipText("");
      long long0 = 90L;
      jDayChooser0.getToolkit();
      MockDate mockDate0 = new MockDate(90L);
      jDayChooser0.defaultMinSelectableDate = (Date) mockDate0;
      jDayChooser0.getWeekdayForeground();
      mockDate0.toInstant();
      // Undeclared exception!
      try { 
        MockDate.parse("1zt.G@~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2979982076961214
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.setMonth(1270);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      MockDate mockDate0 = new MockDate(5, 4, (-1831), 4, (-334), (-130049));
      jDayChooser0.setSelectableDateRange(date1, date1);
      MockDate mockDate1 = new MockDate(4);
      MockDate mockDate2 = new MockDate();
      jDayChooser0.setMaxSelectableDate(mockDate1);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.205497927762563
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DebugGraphics.flashColor();
      jDayChooser0.getRootPane();
      Color.getColor("day");
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 1558, 1749L, 1558, 1558, 39, (-1074), 1558, (-5334), false, 1069, (-5334), 39, 1069);
      jDayChooser0.dispatchEvent(mouseWheelEvent0);
      jDayChooser0.setMonth((-2092));
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      jDayChooser0.setDayBordersVisible(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2515346521337136
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = DebugGraphics.flashColor();
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor(color0);
      SystemColor systemColor0 = SystemColor.textInactiveText;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 5.0F;
      floatArray0[5] = (-436.516F);
      floatArray0[6] = 96.0F;
      floatArray0[7] = 2191.0F;
      floatArray0[8] = 0.0F;
      systemColor0.getRGBComponents(floatArray0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1962674566168174
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVisibleRect();
      jDayChooser0.drawDays();
      ActionEvent actionEvent0 = new ActionEvent("org.apache.balik.dom.svg.SVGOMAElement", 0, "org.apache.balik.dom.svg.SVGOMAElement", 0);
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      actionEvent0.setSource(rowSorterEvent_Type0);
      String string0 = AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY;
      Color color0 = Color.ORANGE;
      Color color1 = Color.ORANGE;
      JTable jTable0 = new JTable((TableModel) null);
      jTable0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      jTableHeader0.transferFocusBackward();
      JComponent.isLightweightComponent(jTable0);
      MockDate mockDate0 = new MockDate(0, 0, 23, 2097151, 2081, 4);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      MockDate mockDate1 = new MockDate(2097151);
      MockDate mockDate2 = new MockDate();
      MockDate mockDate3 = new MockDate();
      jDayChooser0.setMaxSelectableDate(mockDate3);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2456107430960563
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      MindIcon.factory("day", imageIcon0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser1 = new JDayChooser();
      byte byte0 = (byte)4;
      jDayChooser0.firePropertyChange("vx", (byte)4, (byte)94);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setFocus();
      jDayChooser1.getDay();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "icons.list");
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setMonth((byte)94);
      ImageHandler imageHandler0 = null;
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      // Undeclared exception!
      try { 
        processorCharacters0.getStylesheetComposed();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.208313128881091
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMenu jMenu0 = new JMenu("89}C");
      KeyEvent keyEvent0 = new KeyEvent(jMenu0, 40, 9L, 40, 862, 'r');
      jDayChooser0.getClientProperty("89}C");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      keyEvent0.setSource(mockGregorianCalendar0);
      jDayChooser0.keyPressed(keyEvent0);
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("3");
      MockCalendar.getInstance(timeZone0, locale0);
      SchemeMode schemeMode0 = new SchemeMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(schemeMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 8575, "accessories.plugins.time.JDayChooser$DecoratorButton");
      actionEvent0.setSource("accessories.plugins.time.JDayChooser$DecoratorButton");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
