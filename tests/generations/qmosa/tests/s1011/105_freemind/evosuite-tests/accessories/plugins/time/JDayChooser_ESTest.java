/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 21:58:59 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.common.plugins.MapNodePositionHolderBase;
import freemind.modes.filemode.FileMode;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.PrintStream;
import java.sql.Time;
import java.text.DateFormatSymbols;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.help.ForwardAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JTabbedPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.ColorUIResource;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.css.engine.CSSContext;
import org.apache.batik.css.engine.CSSEngine;
import org.apache.batik.dom.AbstractStylableDocument;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.dom.svg.SVGOMDocument;
import org.apache.batik.dom.svg12.SVG12DOMImplementation;
import org.apache.batik.gvt.RootGraphicsNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.DefaultImageHandler;
import org.apache.batik.svggen.ImageHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.DOMImplementationImpl;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFFontTrueType;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.processor.ProcessorCharacters;
import org.apache.xalan.processor.ProcessorStylesheetDoc;
import org.apache.xalan.templates.ElemIf;
import org.apache.xalan.templates.ElemTemplateElement;
import org.apache.xalan.transformer.TransformerIdentityImpl;
import org.apache.xerces.dom.ASDOMImplementationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.DocumentType;
import plugins.collaboration.socket.MindMapClient;
import plugins.map.MapNodePositionHolder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JComponent.getDefaultLocale();
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      System.setCurrentTimeMillis((byte) (-96));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JTabbedPane jTabbedPane0 = null;
      try {
        jTabbedPane0 = new JTabbedPane(42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7017652912416006
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.day = 811;
      JButton jButton0 = new JButton();
      jDayChooser0.updateUI();
      jDayChooser0.getSelectedDay();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Locale locale0 = JComponent.getDefaultLocale();
      jDayChooser0.setMonth(18);
      jDayChooser0.setLocale(locale0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.maxDayCharacters = (-1621);
      jDayChooser0.setMonth(0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      PDFDocument pDFDocument0 = pDFDocumentGraphics2D0.getPDFDocument();
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8348152419460035
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton jButton0 = new JButton();
      jDayChooser0.updateUI();
      jDayChooser0.getSelectedDay();
      jDayChooser0.setDay(5);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem((Action) null);
      jCheckBoxMenuItem0.getAncestorListeners();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem((Action) null);
      jCheckBoxMenuItem0.setArmed(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHOW_ENTITY_REFERENCE");
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      Locale locale0 = Locale.ENGLISH;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getDaysInMonth();
      Cursor cursor0 = Cursor.getPredefinedCursor(5);
      jCheckBoxMenuItem1.setCursor(cursor0);
      JYearChooser jYearChooser0 = new JYearChooser();
      Color color0 = jYearChooser0.darkGreen;
      jDayChooser0.setForeground(color0);
      MenuElement[] menuElementArray0 = new MenuElement[3];
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem1;
      menuElementArray0[2] = (MenuElement) jCheckBoxMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jCheckBoxMenuItem0, 5, 0L, 5, (-1467), '+', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMonth((-1024));
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.drawDays();
      assertEquals(5, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6266116706270757
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = (-1621);
      jDayChooser0.maxDayCharacters = (-1621);
      jDayChooser0.setLocation(0, 0);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxDayCharacters(0);
      // Undeclared exception!
      try { 
        InputEvent.getMaskForButton(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // button doesn't exist 0
         //
         verifyException("java.awt.event.InputEvent", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.72927684348108
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawDays();
      jDayChooser0.setFocus();
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertEquals(14, jDayChooser0.getDay());
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = new Boolean(false);
      FileMode fileMode0 = new FileMode();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      pDFDocumentGraphics2D0.getPDFDocument();
      PDFResources pDFResources0 = new PDFResources((-1774));
      PDFPage pDFPage0 = new PDFPage(pDFResources0, (-1774), 26);
      pDFPage0.setObjectNumber(26);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFFontTrueType pDFFontTrueType0 = new PDFFontTrueType("", "day", fileMode0);
      pDFResources0.addFont(pDFFontTrueType0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, (FontInfo) null, (PDFDocument) null, pDFResourceContext0, "ISO-8859-1", "]x-Wyn~:CSr1a5+D", 870.42914F);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      fopImage_ImageInfo0.height = 5;
      ElemIf elemIf0 = new ElemIf();
      jDayChooser0.setDay(0);
      jDayChooser0.isDecorationBackgroundVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.updateUI();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getDaysInMonth();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7272463499302098
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-45);
      byteArray0[1] = (byte)25;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)92;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      Time time0 = new Time(0L);
      time0.clone();
      jDayChooser0.setSelectableDateRange(time0, time0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setForeground((Color) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3237), (byte)25, (byte)36, (byte) (-78), 'T');
      keyEvent0.setSource(time0);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setDay((byte)92);
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 1777, (String) null, (-1L), (byte)92);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.635484863709782
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.maxDayCharacters = (-1621);
      jDayChooser0.setMonth((-1621));
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      Locale locale0 = new Locale("day");
      RootGraphicsNode rootGraphicsNode0 = new RootGraphicsNode();
      Locale.lookupTag(rootGraphicsNode0, rootGraphicsNode0);
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Windows");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(5381);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.669576756952125
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      Color color0 = Color.ORANGE;
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      SVGOMDocument sVGOMDocument0 = new SVGOMDocument((DocumentType) null, sVG12DOMImplementation0);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGraphics2D.buildSVGGeneratorContext(sVGOMDocument0, defaultImageHandler0, defaultExtensionHandler0);
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      SVGOMDocument sVGOMDocument1 = new SVGOMDocument((DocumentType) null, sVG12DOMImplementation0);
      CSSEngine cSSEngine0 = sVG12DOMImplementation0.createCSSEngine((AbstractStylableDocument) sVGOMDocument1, (CSSContext) bridgeContext0);
      sVGOMDocument0.setCSSEngine(cSSEngine0);
      SVGGeneratorContext.createDefault(sVGOMDocument0);
      sVGGeneratorContext0.doubleString(0);
      ImageHandler imageHandler0 = sVGGeneratorContext0.getImageHandler();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGOMDocument1, imageHandler0, defaultExtensionHandler0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(sVGGraphics2D0);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6527697871323417
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      sVGDOMImplementation0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      jDayChooser0.setOpaque(true);
      jDayChooser0.updateUI();
      jDayChooser0.setAlwaysFireDayProperty(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = new Boolean(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 5, 5, 16, (-3058), ':');
      keyEvent0.setKeyChar('G');
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      StringContent stringContent0 = new StringContent(16);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(stringContent0, styleContext0);
      Element element0 = defaultStyledDocument1.getParagraphElement(5);
      LabelView labelView0 = new LabelView(element0);
      labelView0.getFont();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      ActionEvent actionEvent0 = new ActionEvent(styleContext0, (-2906), "day");
      actionEvent0.paramString();
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(9998);
      jDayChooser0.setDayBordersVisible(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9998, 10043, 9998, (-40), 2541);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=9998,MONTH=10043,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=9998,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-40,HOUR_OF_DAY=-40,MINUTE=2541,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6695767569521247
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      Color color0 = Color.ORANGE;
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      SVGOMDocument sVGOMDocument0 = new SVGOMDocument((DocumentType) null, sVG12DOMImplementation0);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGraphics2D.buildSVGGeneratorContext(sVGOMDocument0, defaultImageHandler0, defaultExtensionHandler0);
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      SVGOMDocument sVGOMDocument1 = new SVGOMDocument((DocumentType) null, sVG12DOMImplementation0);
      CSSEngine cSSEngine0 = sVG12DOMImplementation0.createCSSEngine((AbstractStylableDocument) sVGOMDocument1, (CSSContext) bridgeContext0);
      sVGOMDocument0.setCSSEngine(cSSEngine0);
      SVGGeneratorContext.createDefault(sVGOMDocument0);
      sVGGeneratorContext0.doubleString(0);
      sVGGeneratorContext0.getImageHandler();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.addListeners(16);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      jDayChooser0.initialized = false;
      jDayChooser0.setOpaque(true);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.updateUI();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      jDayChooser0.setOpaque(true);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.updateUI();
      jDayChooser0.setAlwaysFireDayProperty(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.repaint();
      Boolean boolean0 = new Boolean(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 5, 5, (-13), (-3058), '<');
      keyEvent0.setKeyChar('<');
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      StringContent stringContent0 = new StringContent((-13));
      jDayChooser0.setAlwaysFireDayProperty(true);
      TimeZone.getTimeZone("day");
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("DFAUa6ZN7}]q~g1", (DateFormatSymbols) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6949609648298773
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.US;
      jDayChooser0.drawDays();
      jDayChooser0.setFocus();
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertEquals(14, jDayChooser0.getDay());
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = new Boolean(true);
      FileMode fileMode0 = new FileMode();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      pDFDocumentGraphics2D0.getPDFDocument();
      PDFResources pDFResources0 = new PDFResources((-1774));
      PDFPage pDFPage0 = new PDFPage(pDFResources0, (-1774), 20);
      pDFPage0.setObjectNumber((-2418));
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, (PDFDocument) null, pDFResourceContext0, "ISO-8859-1", "", 870.42914F);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_MEDIAL;
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      ElemIf elemIf0 = new ElemIf();
      jDayChooser0.setDay(0);
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.834577696076204
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.revalidate();
      jDayChooser0.getY();
      JComponent.isLightweightComponent(jDayChooser0);
      jDayChooser0.firePropertyChange("WFRfy<vMv`<", 0L, 0L);
      jDayChooser0.getLocale();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.drawWeeks();
      SystemColor systemColor0 = SystemColor.window;
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8207401466147575
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ForwardAction forwardAction0 = new ForwardAction((Object) null);
      jDayChooser0.removeMouseListener(forwardAction0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getY();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setWeekOfYearVisible(true);
      boolean boolean0 = jDayChooser1.isDecorationBackgroundVisible();
      jDayChooser1.getMaxDayCharacters();
      Color color0 = Color.cyan;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1768.973F;
      Color.RGBtoHSB(0, 0, 0, floatArray0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser2.setWeekOfYearVisible(false);
      jDayChooser2.isDecorationBordersVisible();
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      
      boolean boolean1 = jDayChooser1.isWeekOfYearVisible();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.76639130174906
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      jDayChooser0.setOpaque(true);
      jDayChooser0.updateUI();
      jDayChooser0.setAlwaysFireDayProperty(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = new Boolean(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 5, 5, (-13), (-3058), '<');
      keyEvent0.setKeyChar('<');
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      StringContent stringContent0 = new StringContent((-13));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(stringContent0, styleContext0);
      stringContent0.length();
      defaultStyledDocument1.getCharacterElement(5);
      Element element0 = defaultStyledDocument1.getParagraphElement(5);
      defaultStyledDocument1.getProperty(element0);
      LabelView labelView0 = new LabelView(element0);
      labelView0.getFont();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.setMaxDayCharacters(5);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jDayChooser0.setDayBordersVisible(true);
      Object object0 = jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(object0, 5, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Component$AWTTreeLock cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6527697871323417
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "[null]");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JComponent.getDefaultLocale();
      jDayChooser0.setMonth((-1));
      jDayChooser0.setMaxDayCharacters((byte) (-60));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6717601208463124
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear((-40));
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setDecorationBordersVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      SVGOMDocument sVGOMDocument0 = new SVGOMDocument((DocumentType) null, sVG12DOMImplementation0);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGraphics2D.buildSVGGeneratorContext(sVGOMDocument0, defaultImageHandler0, defaultExtensionHandler0);
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      CSSEngine cSSEngine0 = sVG12DOMImplementation0.createCSSEngine((AbstractStylableDocument) sVGOMDocument0, (CSSContext) bridgeContext0);
      sVGOMDocument0.setCSSEngine(cSSEngine0);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(sVGOMDocument0);
      ImageHandler imageHandler0 = sVGGeneratorContext0.getImageHandler();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGOMDocument0, imageHandler0, defaultExtensionHandler0, true);
      jDayChooser_DecoratorButton0.paint(sVGGraphics2D0);
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7911905550592473
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addNotify();
      jDayChooser0.getVisibleRect();
      jDayChooser0.drawDays();
      jDayChooser0.firePropertyChange("org.apache.batik.dom.svg.SVGOMAElement", (float) (-848), (float) (-848));
      jDayChooser0.getPropertyChangeListeners("org.apache.batik.dom.svg.SVGOMAElement");
      jDayChooser0.setMonth((-848));
      jDayChooser0.getComponentPopupMenu();
      jDayChooser0.setMaxDayCharacters((-848));
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      JButton jButton0 = new JButton("accessories.plugins.time.JDayChooser", imageIcon0);
      jDayChooser0.selectedDay = jButton0;
      MenuElement[] menuElementArray0 = new MenuElement[3];
      menuElementArray0[0] = (MenuElement) null;
      menuElementArray0[1] = (MenuElement) null;
      menuElementArray0[2] = (MenuElement) null;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1, 1, (-1166), 0, 'I', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6717601208463133
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange(".", '2', '2');
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/replication/scripts/projects/105_freemind");
      FileSystemHandling.createFolder(evoSuiteFile0);
      jDayChooser0.dayBordersVisible = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.xpath.operations.Mod");
      mockPrintStream0.println(6.283185307179586);
      jDayChooser0.list((PrintStream) mockPrintStream0, 406);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setForeground(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(228, color0.getGreen());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5876788665337553
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.GVT_FONT_FAMILIES;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (-1024), "Metal");
      actionEvent0.paramString();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setToolTipText("Metal");
      actionEvent0.paramString();
      MindMapClient mindMapClient0 = new MindMapClient();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "unknown type,cmd=Metal,when=0,modifiers=");
      MindMapClient mindMapClient1 = new MindMapClient();
      mindMapClient1.getRole();
      ActionEvent actionEvent1 = new ActionEvent("Metal", (-1), "plugins/collaboration/socket/socket_slave_starter_plugin");
      JDayChooser jDayChooser1 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7039446318508733
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      Color color0 = Color.ORANGE;
      Color color1 = Color.ORANGE;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setForeground(color1);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundColor(color0);
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      SVGOMDocument sVGOMDocument0 = new SVGOMDocument((DocumentType) null, sVG12DOMImplementation0);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGraphics2D.buildSVGGeneratorContext(sVGOMDocument0, defaultImageHandler0, defaultExtensionHandler0);
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      SVGOMDocument sVGOMDocument1 = new SVGOMDocument((DocumentType) null, sVG12DOMImplementation0);
      CSSEngine cSSEngine0 = sVG12DOMImplementation0.createCSSEngine((AbstractStylableDocument) sVGOMDocument0, (CSSContext) bridgeContext0);
      sVGOMDocument0.setCSSEngine(cSSEngine0);
      BridgeContext.getGlobalBridgeExtensions();
      SVGGeneratorContext.createDefault(sVGOMDocument0);
      sVGGeneratorContext0.doubleString(2);
      SVGGeneratorContext sVGGeneratorContext1 = SVGGraphics2D.buildSVGGeneratorContext(sVGOMDocument0, defaultImageHandler0, defaultExtensionHandler0);
      sVGGeneratorContext1.getImageHandler();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_MEDIAL;
      DefaultExtensionHandler defaultExtensionHandler1 = new DefaultExtensionHandler();
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7325637712329622
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setLocation(27, (-4401));
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setAlwaysFireDayProperty(true);
      TimeZone timeZone0 = TimeZone.getTimeZone("1");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(27, 40, 44, 901, (-2973));
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar();
      mockGregorianCalendar2.getGregorianChange();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setMinSelectableDate(date0);
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6344753508465937
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Color color0 = Color.ORANGE;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1390), 0L, 1951, 985, 'E');
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      DefaultExtensionHandler defaultExtensionHandler1 = new DefaultExtensionHandler();
      ElemIf elemIf0 = new ElemIf();
      assertNull(elemIf0.getSystemId());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7743379459057973
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      Color color0 = Color.white;
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 18, 0L, 0, 18, 'E');
      jDayChooser0.keyPressed(keyEvent0);
      BrowseMode browseMode0 = new BrowseMode();
      browseMode0.getController();
      FileMode fileMode0 = new FileMode();
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("http://www.w3.org/2000/svg", (String) null, "1.8.0_201");
      SVGOMDocument sVGOMDocument0 = new SVGOMDocument(genericDocumentType0, sVGDOMImplementation0);
      // Undeclared exception!
      try { 
        sVGDOMImplementation0.createCSSEngine((AbstractStylableDocument) sVGOMDocument0, (CSSContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 519L, (-2009), 1392, '4');
      KeyEvent.getKeyModifiersText(38);
      jDayChooser0.keyPressed(keyEvent0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7039446318508733
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      Color color0 = Color.ORANGE;
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      SVGOMDocument sVGOMDocument0 = new SVGOMDocument((DocumentType) null, sVG12DOMImplementation0);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      DOMImplementation dOMImplementation0 = ASDOMImplementationImpl.getDOMImplementation();
      SVGOMDocument sVGOMDocument1 = new SVGOMDocument((DocumentType) null, dOMImplementation0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getMinSelectableDate();
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      sVG12DOMImplementation0.createCSSEngine((AbstractStylableDocument) sVGOMDocument1, (CSSContext) bridgeContext0);
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      ProcessorStylesheetDoc processorStylesheetDoc0 = new ProcessorStylesheetDoc();
      processorCharacters0.removeChild((ElemTemplateElement) processorStylesheetDoc0);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7234701836273554
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDoubleBuffered();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getMaxDayCharacters();
      Color color0 = Color.cyan;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 1768.973F;
      // Undeclared exception!
      try { 
        Color.RGBtoHSB(0, 0, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.white;
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JComponent.getDefaultLocale();
      jDayChooser1.setMonth((byte)32);
      jDayChooser0.setDay(21);
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6304318051332745
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      Color color0 = Color.ORANGE;
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      SVGOMDocument sVGOMDocument0 = new SVGOMDocument((DocumentType) null, sVG12DOMImplementation0);
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGraphics2D.buildSVGGeneratorContext(sVGOMDocument0, defaultImageHandler0, defaultExtensionHandler0);
      PDFResources pDFResources0 = new PDFResources(12);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, 90, 12);
      pDFPage0.setObjectNumber(12);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFFontTrueType pDFFontTrueType0 = new PDFFontTrueType("] not in expected format.", "", (Object) null);
      pDFResources0.addFont(pDFFontTrueType0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      pDFDocumentGraphics2D0.getPDFDocument();
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, (FontInfo) null, (PDFDocument) null, pDFResourceContext0, "day", "BYh", 12);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_MEDIAL;
      DefaultExtensionHandler defaultExtensionHandler1 = new DefaultExtensionHandler();
      ElemIf elemIf0 = new ElemIf();
      jDayChooser0.setDay(48);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6344753508465937
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D();
      TransformerIdentityImpl transformerIdentityImpl0 = new TransformerIdentityImpl();
      transformerIdentityImpl0.getOutputProperties();
      MapNodePositionHolder mapNodePositionHolder0 = new MapNodePositionHolder();
      MapNodePositionHolder mapNodePositionHolder1 = new MapNodePositionHolder();
      // Undeclared exception!
      try { 
        mapNodePositionHolder1.getTooltipFile(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapNodePositionHolder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setToolTipText("");
      long long0 = 90L;
      jDayChooser0.getToolkit();
      MockDate mockDate0 = new MockDate(90L);
      jDayChooser0.defaultMinSelectableDate = (Date) mockDate0;
      jDayChooser0.getWeekdayForeground();
      mockDate0.toInstant();
      // Undeclared exception!
      try { 
        MockDate.parse("1zt.G@~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.659905439740437
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      jDayChooser0.setOpaque(true);
      jDayChooser0.updateUI();
      jDayChooser0.setAlwaysFireDayProperty(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = new Boolean(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 5, 5, (-13), (-3058), '<');
      keyEvent0.setKeyChar('<');
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      StringContent stringContent0 = new StringContent((-13));
      PDFResources pDFResources0 = new PDFResources((-1369));
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFFontTrueType pDFFontTrueType0 = new PDFFontTrueType("X)fG#`_B,97hAGBGx", (String) null, defaultStyledDocument0);
      pDFResources0.addFont(pDFFontTrueType0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      PDFDocument pDFDocument0 = pDFDocumentGraphics2D0.getPDFDocument();
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, (FontInfo) null, pDFDocument0, pDFResourceContext0, "B%A]0:", "B%A]0:", (-3058));
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_MEDIAL;
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      ElemIf elemIf0 = new ElemIf();
      jDayChooser0.setDay((-864));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(true);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setMonth(4);
      jDayChooser0.setDayBordersVisible(false);
      int int0 = jDayChooser0.getDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.593621512459067
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(4300);
      jDayChooser0.getSundayForeground();
      // Undeclared exception!
      try { 
        jDayChooser0.remove(4300);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 4300
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      Color color0 = Color.ORANGE;
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      DOMImplementationImpl dOMImplementationImpl0 = new DOMImplementationImpl();
      DocumentType documentType0 = dOMImplementationImpl0.createDocumentType("day", (String) null, "COXU1O%lnh");
      DOMImplementation dOMImplementation0 = ASDOMImplementationImpl.getDOMImplementation();
      SVGOMDocument sVGOMDocument0 = null;
      try {
        sVGOMDocument0 = new SVGOMDocument(documentType0, dOMImplementation0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // The given node (type: 9, name: #document) was not created by the current document.
         //
         verifyException("org.apache.batik.dom.AbstractNode", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      Color.getColor("6~iD5f^&Ph0", (Color) colorUIResource0);
      jDayChooser0.setSundayForeground(colorUIResource0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMonth((-1621));
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6266116706270752
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setLocation((-1621), (-2202));
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      GenericDOMImplementation genericDOMImplementation0 = new GenericDOMImplementation();
      // Undeclared exception!
      try { 
        genericDOMImplementation0.createDocumentType((String) null, "day", "day");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Doctype not supported
         //
         verifyException("org.apache.batik.dom.GenericDOMImplementation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-50);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem((Action) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem((Action) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBordersVisible();
      jCheckBoxMenuItem0.setArmed(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SHOW_ENTITY_REFERENCE");
      MenuSelectionManager.defaultManager();
      // Undeclared exception!
      try { 
        Cursor.getPredefinedCursor(1258);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal cursor type
         //
         verifyException("java.awt.Cursor", e);
      }
  }
}
