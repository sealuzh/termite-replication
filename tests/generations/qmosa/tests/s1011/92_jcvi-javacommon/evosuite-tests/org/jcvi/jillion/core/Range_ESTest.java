/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 11:31:41 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.8203513959522515
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.intersects(range0);
      Range range1 = Range.of(1165L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.ofLength(616L);
      Range range2 = Range.of(399L, 9223372036854775807L);
      range0.startsBefore(range1);
      Long long0 = new Long((-1L));
      Long.getLong("GuEU,BTVX", 9223372036854775807L);
      Object object0 = new Object();
      range2.equals((Object) null);
      Long long1 = new Long((-1763L));
      Object object1 = new Object();
      range1.equals(object1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of((-792L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.9083743295381272
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.ofLength(144L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 144L, 144L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range1 = range0.asRange();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      Object object4 = new Object();
      Range.of((-4028L));
      Object object5 = new Object();
      Object object6 = new Object();
      range1.equals(range0);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Long long0 = new Long(9223372036854775553L);
      Object object10 = new Object();
      Range.of((-1844L), (-1844L));
      Object object11 = new Object();
      range0.equals(object11);
      Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=4.065331944728943
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L), (-1L));
      Range range2 = Range.of((-1L), 9223372034707292161L);
      range2.getLength();
      range2.complement(range1);
      Object object0 = new Object();
      Range range3 = range0.asRange();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range2.equals((Object) null);
      Object object4 = new Object();
      range2.complement(range3);
      Range range4 = Range.of(9223372034707292163L);
      Object object5 = new Object();
      Range range5 = Range.of(9223372034707292163L);
      range4.equals(range2);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      range5.isSubRangeOf(range2);
      Long.valueOf(9223372034707292163L);
      Object object9 = new Object();
      Long long0 = new Long((-1L));
      try { 
        Long.parseUnsignedLong("2s>u]", (-989));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -989 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.809965385620648
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(9223372036854775806L);
      Range range1 = Range.of(126L, 9223372036854775806L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = range1.asRange();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(range0);
      Object object3 = new Object();
      range2.complement(range1);
      Range.of(126L);
      Object object4 = new Object();
      Object object5 = new Object();
      range1.equals(object5);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      long long0 = 551L;
      Long long1 = new Long(2147483672L);
      Object object9 = new Object();
      // Undeclared exception!
      try { 
        Range.of(2080L, 551L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.060137045285047
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-336L);
      Range range1 = Range.of(range_CoordinateSystem0, (-336L), (-1L));
      range1.complement(range0);
      Object object0 = new Object();
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range range2 = Range.of((-32768L), 2192L);
      range0.equals(range2);
      Range.ofLength(739L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range2.getBegin(range_CoordinateSystem2);
      Range.of((-345L), 739L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 691L, (-1803L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.6496909590563766
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.ofLength(65534L);
      Range range1 = Range.of(65534L);
      Range range2 = Range.of(65534L);
      Object object0 = new Object();
      range1.intersects(range0);
      range1.getBegin();
      long long0 = 320L;
      Range.ofLength(320L);
      range2.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(65534L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.shift(65534L);
      Range range3 = range_Builder1.build();
      Range.CoordinateSystem.values();
      range3.intersection(range0);
      Range.ofLength(65534L);
      Object object1 = new Object();
      Object object2 = new Object();
      Long long1 = new Long(91L);
      Object object3 = new Object();
      range3.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("FpmzY]:Qw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.FpmzY]:Qw
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.8598686684717736
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(65534L);
      Range range1 = Range.of(65534L);
      Range range2 = Range.of(65534L);
      Object object0 = new Object();
      boolean boolean0 = range1.intersects(range0);
      range1.getBegin();
      Range range3 = Range.ofLength(320L);
      range2.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(65534L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.shift(65534L);
      Range range4 = range_Builder1.build();
      Range.CoordinateSystem.values();
      Range range5 = range4.intersection(range0);
      assertTrue(range5.isEmpty());
      
      Range range6 = Range.ofLength(65534L);
      Range.Builder range_Builder2 = new Range.Builder(0L);
      range_Builder1.expandBegin(320L);
      Object object1 = new Object();
      boolean boolean1 = range4.isSubRangeOf(range6);
      assertFalse(boolean1);
      
      Long.valueOf((-689L));
      Object object2 = new Object();
      boolean boolean2 = range1.equals(range4);
      assertFalse(range4.isEmpty());
      assertTrue(boolean2 == boolean0);
      
      range3.spliterator();
      Range range7 = Range.of(9223372036854775807L);
      Range range8 = range1.intersection(range7);
      assertFalse(range1.isEmpty());
      assertTrue(range8.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.9071916348901046
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(620L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range range1 = Range.of(620L, 620L);
      Range.ofLength(620L);
      Range.Comparators.values();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long.valueOf(2147483647L);
      Range range2 = Range.of(4818L);
      range1.equals(range2);
      Range range3 = Range.ofLength(620L);
      range3.spliterator();
      assertFalse(range3.isEmpty());
      assertSame(range3, range0);
      
      Range range4 = range2.intersection(range1);
      assertTrue(range4.isEmpty());
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.7013049565544653
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L), (-1L));
      Long long0 = new Long((-1L));
      range0.intersects(range1);
      range0.complement(range0);
      range0.equals(range1);
      long long1 = (-1501L);
      range1.equals(range0);
      Range range2 = range1.intersection(range0);
      range2.intersection(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((long) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.7318300890031235
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.intersects(range0);
      Long long0 = new Long(2147483647L);
      Range range1 = Range.of(2147483647L);
      range1.endsBefore(range0);
      range0.intersects(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      range0.startsBefore(range2);
      Range range3 = Range.ofLength(1165L);
      Long long1 = new Long(1165L);
      range0.equals((Object) null);
      Object object0 = new Object();
      Range.of(1165L);
      Object object1 = new Object();
      Range range4 = Range.ofLength(9985L);
      range4.equals(range1);
      Object object2 = new Object();
      Object object3 = new Object();
      range3.equals(object0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 1096L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=4.017158097485818
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      linkedList0.spliterator();
      long long0 = range1.getLength();
      assertEquals(0L, long0);
      
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range1.complementFrom(linkedList0);
      assertTrue(list1.equals((Object)list0));
      
      Range.of(155L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.add(range1);
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem.values();
      Range range2 = Range.of(0L);
      range2.equals(linkedList0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range1.isSubRangeOf(range2);
      assertTrue(boolean0);
      
      Long.valueOf(9223372036854775807L);
      Object object4 = new Object();
      Object object5 = new Object();
      range2.equals(object5);
      range1.spliterator();
      Range.of(155L);
      Range range3 = range0.intersection(range2);
      assertFalse(range3.isEmpty());
      assertSame(range2, range3);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.03806388909478
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 556L, 4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long.valueOf(9223372036854775807L);
      Range range3 = Range.of(4294967295L);
      range2.equals(object3);
      range1.spliterator();
      Range.ofLength(9223372036854775807L);
      range0.complement(range3);
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
  }

  /**
  //Test case number: 12
  /*Coverage entropy=4.289982598153771
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 32767L;
      Range.Builder range_Builder0 = new Range.Builder((-1L), 32767L);
      range_Builder0.expandBegin((-1L));
      Range range0 = range_Builder0.build();
      List<Range> list0 = range0.split(32767L);
      range0.complementFrom(list0);
      range_Builder0.expandBegin(32767L);
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.Comparators.values();
      Range range2 = Range.ofLength(32767L);
      List<Range> list1 = range2.split(9223372036854775807L);
      range2.spliterator();
      range2.complementFrom(list1);
      Range range3 = Range.of(3256L, 3256L);
      range3.isSubRangeOf(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Comparators.values();
      Range.of((-534L), (-534L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, (-4619L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4620 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4409197450558957
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      long long0 = 0L;
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-1432L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1433 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.9936524994895897
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1295L, 1295L);
      range1.endsBefore(range0);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      Range range2 = Range.of(1L, 1L);
      Range range3 = Range.ofLength(1L);
      range1.endsBefore(range3);
      Object object0 = new Object();
      range1.equals(range1);
      assertFalse(range1.isEmpty());
      
      Object object1 = new Object();
      Range range4 = Range.of((-4662L));
      Object object2 = new Object();
      range0.equals(range4);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range3.equals(range2);
      range0.spliterator();
      Range range5 = Range.ofLength(146L);
      Range.of((-4662L));
      Range range6 = range0.intersection(range2);
      assertTrue(range6.isEmpty());
      assertFalse(range0.equals((Object)range5));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.9229997335830724
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      range0.intersects(range0);
      Long long1 = new Long(2147483647L);
      Range range1 = Range.of(1165L, 2147483647L);
      Range range2 = Range.of(2147483647L);
      range2.endsBefore(range1);
      range0.intersects(range2);
      Range range3 = Range.ofLength(9223372036854775807L);
      range0.startsBefore(range3);
      Range range4 = range3.asRange();
      Long long2 = new Long(1165L);
      range1.equals((Object) null);
      Object object0 = new Object();
      Range.of(1165L);
      Object object1 = new Object();
      Range range5 = Range.ofLength(9985L);
      range5.equals(range2);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range4.equals(object4);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 1096L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=4.299328375296693
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3665L), 2147483647L);
      range1.complement(range0);
      List<Range> list0 = range1.split(2147483647L);
      range0.spliterator();
      range0.endsBefore(range1);
      range0.complementFrom(list0);
      range1.isSubRangeOf(range0);
      Range.Comparators.values();
      Range.of(2147483647L, 9223372036854775806L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 1402L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.772255575719469
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      Range range2 = Range.of(9223372036854775807L, 9223372036854775807L);
      range2.endsBefore(range1);
      range1.split(9223372036854775807L);
      Range range3 = Range.of(275047L);
      String string0 = "org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of(275047L, (-151L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.9226899389789676
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(9223372036854775807L);
      Range range3 = Range.of(9223372036854775807L, 9223372036854775807L);
      range2.equals(range3);
      Range.ofLength(2281L);
      Object object0 = new Object();
      Object object1 = new Object();
      List<Range> list0 = range0.complement(range2);
      Range.of(1L);
      Object object2 = new Object();
      Range range4 = Range.of(0L);
      assertFalse(range4.isEmpty());
      
      Object object3 = new Object();
      range1.equals(range_CoordinateSystem0);
      Object object4 = new Object();
      Object object5 = new Object();
      Long.valueOf(0L);
      Object object6 = new Object();
      range1.equals(range3);
      assertTrue(range1.isEmpty());
      
      Range.ofLength(9223372036854775807L);
      range2.spliterator();
      List<Range> list1 = range3.complementFrom(list0);
      assertSame(range3, range2);
      assertFalse(list0.contains(range4));
      assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.987530048996097
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.endsBefore(range0);
      Long long0 = new Long(2147483647L);
      range0.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 2147483647L;
      Range range1 = Range.of(range_CoordinateSystem1, (-1466L), 2147483647L);
      range1.complement(range0);
      Object object0 = new Object();
      long long2 = new Long((-1466L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem2);
      range1.isSubRangeOf(range1);
      range0.getBegin(range_CoordinateSystem0);
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-1465L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=4.045734734503776
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.shift(9223372036854775807L);
      Range range1 = range_Builder0.build();
      Range range2 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range3 = range_Builder2.build();
      range3.isSubRangeOf(range2);
      range2.getLength();
      range1.intersects(range2);
      range0.complement(range2);
      Range.Builder range_Builder3 = new Range.Builder();
      Object object0 = new Object();
      range2.equals(range_Builder2);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.ofLength(399L);
      Range range4 = Range.of(2147483648L, 9223372036854775807L);
      range0.startsBefore(range4);
      Long long0 = new Long(9223372036854775807L);
      Long.getLong("", 2581L);
      Object object1 = new Object();
      range2.equals(object1);
      Long long1 = new Long(9223372036854775807L);
      range4.equals(range0);
      Range.Comparators.values();
      Range.of(399L, 399L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.805469567452622
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(144L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 144L, 144L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(object3);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Range range2 = Range.of(144L);
      Object object4 = new Object();
      Range range3 = Range.of(144L);
      Object object5 = new Object();
      range0.equals(object5);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      range0.equals(object4);
      range3.spliterator();
      //  // Unstable assertion: assertFalse(range3.equals((Object)range0));
      
      Range range4 = Range.ofLength(65535L);
      Range range5 = range1.intersection(range4);
      //  // Unstable assertion: assertTrue(range5.equals((Object)range2));
      //  // Unstable assertion: assertNotSame(range5, range3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.887080983749474
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = (-33L);
      Range range0 = Range.of((-33L));
      long long1 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      long long2 = 9223372036854775807L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.complement(range0);
      Object object0 = new Object();
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem2);
      Range range1 = Range.of(1295L, 9223372036854775807L);
      range1.equals(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.ofLength((-33L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.8557124315330635
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range2 = range0.asRange();
      range0.complementFrom(linkedList1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(linkedList0);
      Object object3 = new Object();
      long long0 = (-1420L);
      range1.complement(range2);
      Range range3 = Range.of(9223372036854775807L);
      Object object4 = new Object();
      range2.equals(object1);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Long long1 = new Long(4294967295L);
      Object object8 = new Object();
      range3.equals(object0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("{zp*,-t~>P~h^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.{zp*,-t~>P~h^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.9004906928622334
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1295L, 1295L);
      range1.endsBefore(range0);
      range0.intersects(range0);
      Range.of(1L, 1L);
      Range range2 = Range.ofLength(1L);
      range1.endsBefore(range2);
      Object object0 = new Object();
      range1.equals(range1);
      Object object1 = new Object();
      Range range3 = Range.of((-4662L));
      Object object2 = new Object();
      Object object3 = new Object();
      range3.equals(object3);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long0 = new Long(1L);
      Object object7 = new Object();
      Object object8 = new Object();
      range0.equals(object8);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("FpmzY]:Qw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.FpmzY]:Qw
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=4.05569606059604
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(1784L);
      Range range3 = Range.of(9223372036854775807L, 9223372036854775807L);
      range2.equals(range3);
      Range.ofLength(2281L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Object object1 = new Object();
      range0.complement(range2);
      Range.of(1L);
      Object object2 = new Object();
      Range.of(1784L);
      Object object3 = new Object();
      range1.equals(range_CoordinateSystem0);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long.valueOf(0L);
      Object object7 = new Object();
      range1.equals(range3);
      Range.ofLength(1784L);
      range2.spliterator();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.5804345374855417
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = 2147483677L;
      Range range0 = Range.ofLength(2147483677L);
      range0.isEmpty();
      long long1 = 2790L;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Range range1 = range0.intersection(range0);
      linkedList0.addAll((Collection<? extends Range>) list0);
      Range range2 = Range.of(2147483677L);
      range2.startsBefore(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      range0.complementFrom(linkedList0);
      range0.toString(range_CoordinateSystem0);
      Range.Comparators.values();
      range1.equals((Object) null);
      Long long2 = new Long(289L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3208290208488016
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3208290208488016
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      long long0 = 0L;
      Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=4.063301307327276
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.intersects(range0);
      Range range1 = Range.of(1165L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = range0.asRange();
      range1.complementFrom(linkedList0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(range1);
      Object object3 = new Object();
      range2.complement(range1);
      Range.of((-1420L));
      Object object4 = new Object();
      range1.equals(range2);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Long long0 = new Long(2147483647L);
      Object object8 = new Object();
      range1.equals(object8);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("FpmzY]:Qw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.FpmzY]:Qw
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2644652013938043
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      Long long0 = new Long(2147483647L);
      range0.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 2147483647L, 2147483647L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.9809715868965565
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      Long long0 = new Long(2147483647L);
      range0.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-1466L);
      Range range1 = Range.of(range_CoordinateSystem1, (-1466L), 2147483647L);
      range1.complement(range0);
      Object object0 = new Object();
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem2);
      range1.equals(range_CoordinateSystem1);
      range0.getBegin(range_CoordinateSystem0);
      Range range2 = range1.intersection(range0);
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals(object2);
      // Undeclared exception!
      try { 
        Range.ofLength((-1466L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.043509994119136
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.isEmpty();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = range0.intersection(range0);
      range1.complementFrom(linkedList0);
      Range range2 = Range.ofLength(1407L);
      range1.isSubRangeOf(range0);
      Object object0 = new Object();
      range0.equals(range1);
      range2.spliterator();
      Range range3 = Range.ofLength(1141L);
      range0.complement(range3);
      Range.of((-1122L), 1407L);
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.050753921007877
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(9223372036854775806L);
      Range range1 = Range.of(9223372036854775806L);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = range0.asRange();
      boolean boolean0 = range0.endsBefore(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(range2);
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean1 = range1.equals((Object) null);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      Range.of(32767L, 9223372036854775806L);
      Range range3 = Range.ofLength(0L);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
      
      List<Range> list0 = range2.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      range2.complementFrom(linkedList0);
      Range.of((-102L), 32767L);
      boolean boolean2 = range1.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean2);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.541405899995361
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = 65534L;
      Range range0 = Range.ofLength(65534L);
      Range range1 = Range.of(65534L);
      Range range2 = Range.of(65534L);
      range2.endsBefore(range0);
      Object object0 = new Object();
      range1.intersects(range0);
      range1.getBegin();
      Range.ofLength(320L);
      range2.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.9928847269906695
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      linkedList0.offerFirst(range0);
      linkedList0.add(range0);
      linkedList0.spliterator();
      range0.getLength();
      linkedList0.add(range0);
      range0.complement(range0);
      range0.complementFrom(linkedList0);
      range0.intersects(range0);
      Range.of((-32768L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long.valueOf(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("mP4AFw;`~X.0:SJdEl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.mP4AFw;`~X.0:SJdEl
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.775737103611121
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(144L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 144L, 144L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range2 = range1.asRange();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals((Object) null);
      Object object3 = new Object();
      range0.complement(range1);
      Object object4 = new Object();
      range2.equals("org.jcvi.jillion.core.Range$Comparators");
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      String string0 = "%3";
      range0.equals("%3");
      range1.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-633L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.875344595967025
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L), (-1L));
      Long long0 = new Long((-1L));
      range0.intersects(range1);
      range0.complement(range0);
      range1.equals(range1);
      range1.equals(range0);
      Range range2 = range1.intersection(range0);
      Range range3 = range2.intersection(range1);
      Object object0 = new Object();
      range0.equals("Pe|w567C7e");
      Object object1 = new Object();
      range3.complement(range0);
      Range.of((-1L));
      Object object2 = new Object();
      Range.of((-1L));
      Object object3 = new Object();
      range1.equals((Object) null);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long.valueOf(158L);
      Object object7 = new Object();
      Range range4 = Range.ofLength(4294967295L);
      range4.equals(object0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1501L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.9640384639589747
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.intersects(range0);
      range0.complement(range0);
      Object object0 = new Object();
      range0.equals(object0);
      range0.getBegin();
      range0.equals((Object) null);
      Range range1 = Range.ofLength(0L);
      Object object1 = new Object();
      range0.equals((Object) null);
      Object object2 = new Object();
      range0.complement(range1);
      Range.of(0L);
      Object object3 = new Object();
      Range range2 = Range.of((-4099L));
      Object object4 = new Object();
      range0.equals(object4);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Long.valueOf(158L);
      Object object8 = new Object();
      range2.equals(object3);
      Range range3 = Range.ofLength(4294967295L);
      range3.spliterator();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.4319459813753617
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = 620L;
      Range range0 = Range.of(620L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.7561987137345985
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = (-2140L);
      long long1 = 2629L;
      Range range0 = Range.of((-2140L), 2629L);
      Range range1 = Range.of((-2140L));
      range1.intersection(range0);
      range1.endsBefore(range0);
      Range.of((-2140L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854775806L, 9223372036854775806L);
      // Undeclared exception!
      try { 
        range1.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=4.114684016476487
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      Range range1 = Range.of(1165L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = range0.asRange();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range2.equals(object4);
      Object object5 = new Object();
      range0.complement(range1);
      Range.of((-1771L));
      Object object6 = new Object();
      Range range3 = Range.of(0L);
      range3.equals((Object) null);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Long.valueOf(2147483647L);
      Object object10 = new Object();
      range3.equals(linkedList0);
      range2.spliterator();
      Range.ofLength(1165L);
      range1.complement(range0);
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
  }

  /**
  //Test case number: 42
  /*Coverage entropy=4.060248919020024
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1295L);
      Range range2 = Range.of(1295L);
      boolean boolean0 = range2.endsBefore(range0);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.ofLength(1L);
      range0.startsBefore(range3);
      Long long0 = new Long(1L);
      boolean boolean1 = range3.equals(range1);
      Range.of((-3882L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, (-2147483645L), 2341L);
      Range.of(140L, 1295L);
      boolean boolean2 = range1.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean2 == boolean1);
      
      Range.Builder range_Builder0 = new Range.Builder((-2147483646L), 140L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.copy();
      Range range5 = range4.intersection(range1);
      assertSame(range1, range5);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=4.186319433646968
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3665L), 2147483611L);
      range1.complement(range0);
      range1.split(2147483611L);
      List<Range> list0 = new LinkedList<Range>();
      range0.spliterator();
      range0.complementFrom(list0);
      range1.isSubRangeOf(range0);
      Range.Comparators.values();
      Range.of(2147483611L, 9223372036854775806L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483611L, 1402L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1330801806596518
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = 1295L;
      Range range0 = Range.ofLength(1295L);
      Range.ofLength(1L);
      Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      Object object0 = new Object();
      range0.equals(range1);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-1055L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.731631932719897
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(126L);
      Range range1 = Range.of(126L, 126L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = range1.asRange();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(range0);
      Object object3 = new Object();
      range2.complement(range1);
      Range.of(126L);
      Object object4 = new Object();
      Object object5 = new Object();
      range1.equals(object5);
      Object object6 = new Object();
      Object object7 = new Object();
      long long0 = 551L;
      Long long1 = new Long(2147483672L);
      Object object8 = new Object();
      // Undeclared exception!
      try { 
        Range.of(2080L, 551L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.548628617971861
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1295L, 1295L);
      Range.ofLength(1L);
      long long1 = 2147483647L;
      long long2 = 179L;
      range1.split(179L);
      range0.split(1L);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      String string0 = "can not parse ";
      // Undeclared exception!
      try { 
        Range.parseRange("can not parse ", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.757086618786206
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = 9223372036854775773L;
      Range range0 = Range.ofLength(9223372036854775773L);
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin(9223372036854775628L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775773L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -71 would make range [9223372036854775773 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.7335447342304477
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(620L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.of(620L, 620L);
      Range.ofLength(620L);
      Range.Comparators.values();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = Long.valueOf(2147483647L);
      long long1 = 4818L;
      Object object4 = new Object();
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("FpmzY]:Qw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.FpmzY]:Qw
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.8796275023480966
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-306L), (-306L));
      Range range1 = Range.of((-306L));
      Long long0 = new Long((-306L));
      range0.intersects(range1);
      range0.complement(range0);
      range1.equals(range1);
      long long1 = (-1501L);
      range1.equals(range0);
      Range range2 = Range.of((-1501L));
      range2.intersection(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((long) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.9672067469772423
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.intersects(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = range0.asRange();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(range0);
      Object object3 = new Object();
      range1.complement(range0);
      Range.of((-1420L));
      Object object4 = new Object();
      range0.equals(range1);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Long long0 = new Long(2147483647L);
      Object object8 = new Object();
      range0.equals(object8);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("FpmzY]:Qw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.FpmzY]:Qw
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=4.013858177392466
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      range0.getLength();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1L);
      range0.split(9223372036854775628L);
      range_Builder0.contractBegin((-3355L));
      Range.Builder range_Builder2 = range_Builder0.contractBegin(360L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range1.intersection(range0);
      range_Builder2.expandEnd((-3355L));
      Range.of(1096L, 1576L);
      Range range3 = Range.of(1L, 1L);
      range2.intersects(range0);
      Range.of(1469L, 9223372036854775807L);
      Range.of(4294967295L);
      range2.intersects(range3);
      Range.Builder range_Builder4 = new Range.Builder(4294967295L);
      // Undeclared exception!
      try { 
        range_Builder1.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.848627656460383
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-2147483648L));
      range0.complement(range1);
      range0.equals("Y]d(sZ[/7?");
      Long long0 = new Long((-2147483648L));
      range1.equals(long0);
      range1.intersection(range0);
      Range.Builder range_Builder1 = new Range.Builder((-2147483648L), (-2147483648L));
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-590L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.9668755192097382
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = 2147483677L;
      Range range0 = Range.ofLength(2147483677L);
      range0.isEmpty();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      linkedList0.listIterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(linkedList0);
      range0.equals(object1);
      Object object2 = new Object();
      Range range1 = Range.of((-9223372036854775808L));
      range0.complement(range1);
      Range range2 = Range.of(2147483677L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range2.equals(object5);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Long long1 = new Long(2147483672L);
      Object object9 = new Object();
      long long2 = (-320L);
      // Undeclared exception!
      try { 
        Range.of(255L, (-320L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=4.015157507525653
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775791L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      linkedList0.offerFirst(range0);
      linkedList0.add(range0);
      linkedList0.spliterator();
      range0.getLength();
      linkedList0.add(range0);
      range0.complement(range0);
      range0.complementFrom(linkedList0);
      range0.intersects(range0);
      long long0 = (-32768L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-1434L));
      Range range1 = Range.of(9223372036854775791L, 9223372036854775791L);
      long long1 = (-669L);
      Range range2 = Range.of((-669L));
      range2.intersects(range1);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.95636120554022
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-4099L));
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.intersects(range0);
      range0.complement(range0);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Range range1 = range0.asRange();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.iterator();
      Object object5 = new Object();
      Range range2 = Range.ofLength(1089L);
      assertFalse(range2.isEmpty());
      
      range1.equals(object5);
      Object object6 = new Object();
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      Range range3 = Range.of(2147483646L);
      Object object7 = new Object();
      Range range4 = Range.of((-4099L));
      range0.equals(object1);
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      boolean boolean1 = range0.isSubRangeOf(range4);
      assertFalse(boolean1 == boolean0);
      
      Long.valueOf((-4647L));
      Object object11 = new Object();
      range1.equals(object4);
      range3.spliterator();
      Range.of((-128L));
      range1.intersection(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.200767051101671
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = 126L;
      Range range0 = Range.of(126L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.649093547020355
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.ofLength(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.9865268387997417
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      linkedList0.spliterator();
      range1.getLength();
      range0.complement(range0);
      range1.complementFrom(linkedList0);
      range1.isSubRangeOf(range0);
      Range.of((-32768L));
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=4.032909733230722
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(9223372036854775806L);
      Range range1 = Range.of(9223372036854775806L);
      range0.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(9223372036854775806L, 9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-564L), (-564L));
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-564L));
      range_Builder1.contractBegin((-32768L));
      Range.Builder range_Builder2 = new Range.Builder(range2);
      range1.intersection(range0);
      range_Builder1.expandEnd(26L);
      Range range3 = Range.of((-1603L), 1195L);
      Range.of(1318L, 2147483647L);
      range3.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 26L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.9232597100836477
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Long long0 = new Long((-1L));
      range0.intersects(range1);
      range0.complement(range0);
      range1.equals(range1);
      long long1 = (-1501L);
      range1.equals(range0);
      Range range2 = Range.of((-1501L));
      range2.intersection(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((long) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.68953680911414
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L), (-1L));
      Long long0 = new Long((-1L));
      range0.intersects(range1);
      range0.complement(range0);
      range1.equals(range1);
      long long1 = (-1501L);
      range1.equals(range0);
      Range range2 = range1.intersection(range0);
      range2.intersection(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((long) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.5298181799802166
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-3931L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3931 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.67737900955379
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(0L);
      linkedList0.remove((Object) long0);
      Range range2 = range0.asRange();
      range1.complementFrom(linkedList0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(object3);
      Object object4 = new Object();
      range0.complement(range1);
      long long1 = 9223372036854743041L;
      Range.of(9223372036854743041L);
      Object object5 = new Object();
      range2.equals(object2);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Long long2 = new Long(1L);
      Object object9 = new Object();
      range2.equals(object1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.982385483420267
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      linkedList0.spliterator();
      range1.getLength();
      range0.complement(range0);
      range1.complementFrom(linkedList0);
      range1.isSubRangeOf(range0);
      range1.complementFrom(list0);
      Range.of((-3198L));
      // Undeclared exception!
      try { 
        Range.of((-3198L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=4.012005458711313
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      Range.ofLength(1295L);
      Range range1 = Range.of(1295L);
      range1.endsBefore(range0);
      range1.intersects(range0);
      Range range2 = Range.of((-3441L), 1295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      List<Range> list1 = range2.complementFrom(list0);
      range1.complementFrom(list1);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range range3 = range_Builder0.build();
      range_Builder0.contractBegin(1L);
      range_Builder0.contractEnd(1295L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.ofLength(1068L);
      range3.intersection(range1);
      range_Builder0.expandEnd(4294967295L);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 1180L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.9406549875982138
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-2458L));
      range0.spliterator();
      Range range1 = Range.ofLength(146L);
      Range range2 = Range.of(146L);
      assertFalse(range2.isEmpty());
      
      Range.of((-2458L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 146L, 146L);
      assertTrue(range3.isEmpty());
      
      Range range4 = range1.intersection(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.865473083257651
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.ofLength(144L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 144L, 144L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(object3);
      Object object4 = new Object();
      range0.complement(range1);
      Object object5 = new Object();
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Range range2 = Range.of((-3406L));
      assertFalse(range2.isEmpty());
      
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Long long0 = new Long((-1420L));
      Object object10 = new Object();
      range1.equals("");
      Range.of((-1053L));
      range1.intersection(range0);
      assertFalse(range0.isEmpty());
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.752827474527879
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854774513L, 9223372036854775807L);
      long long0 = 1L;
      Range range1 = Range.ofLength(1L);
      Range range2 = range0.intersection(range1);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Object object0 = new Object();
      range2.equals(object0);
      Range.parseRange("[ 9223372036854774513 .. 9223372036854775806 ]/0B", range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range2.getBegin(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("#bM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.#bM
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=4.058052880812039
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.isEmpty();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Range range1 = range0.intersection(range0);
      List<Range> list0 = range1.complementFrom(linkedList0);
      Range range2 = Range.ofLength(1407L);
      range2.intersection(range0);
      range2.startsBefore(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      range0.complementFrom(list0);
      range0.toString(range_CoordinateSystem0);
      Range.Comparators.values();
      Range range3 = Range.ofLength(2790L);
      range0.complement(range1);
      range3.getLength();
      Range.parseRange("[ 0 .. 2147483646 ]/0B");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.6462633481949775
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.ofLength(9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-3665L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("9h=\"1<<YIi]f+<*&v", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 9h=\"1<<YIi]f+<*&v into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.8834264375919756
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = 2629L;
      Range range0 = Range.of((-2140L), 2629L);
      Range range1 = Range.of((-2140L));
      range1.intersection(range0);
      range1.endsBefore(range0);
      Range range2 = Range.of((-2140L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder((-2140L), (-601L));
      Range.Builder range_Builder1 = new Range.Builder(2629L);
      Range.Builder range_Builder2 = new Range.Builder(range2);
      long long1 = (-1L);
      Range range3 = Range.of((-2651L), 2147483647L);
      Range.of((-1008L));
      range3.getEnd();
      range_Builder1.expandBegin((-1L));
      // Undeclared exception!
      try { 
        Range.of((-1L), (-601L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.6061025514684695
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-4662L), (-4662L));
      Range range1 = Range.of((-4662L));
      Range range2 = range0.intersection(range1);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range2.getEnd(range_CoordinateSystem0);
      assertSame(range2, range0);
      assertEquals((-4661L), long0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.771507454011475
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(65534L);
      Range range1 = Range.of(65534L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 65534L, 65534L);
      range2.isEmpty();
      long long0 = 2790L;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      Range range3 = Range.of(2790L);
      range0.intersection(range3);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      range2.complementFrom(list0);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2790L, 1929L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.928318104502866
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(599L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(599L, 599L);
      Range range2 = Range.ofLength(599L);
      Range.Comparators.values();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long.valueOf(2147483647L);
      Object object4 = new Object();
      Object object5 = new Object();
      range1.isSubRangeOf(range2);
      Long.valueOf(1L);
      Object object6 = new Object();
      Object object7 = new Object();
      range1.equals(object7);
      Range.of(2147483647L);
      range1.intersection(range2);
      // Undeclared exception!
      try { 
        Range.of(2141L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.2511090266895506
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of(9223372036854775807L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range.of(3760L);
      // Undeclared exception!
      try { 
        Range.ofLength((-568L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.9174422766076566
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(9223372036854775806L);
      Range range1 = Range.of(9223372036854775806L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(9223372036854775806L, 9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-564L), (-564L));
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-564L));
      range_Builder0.contractEnd((-2026L));
      range_Builder1.contractBegin((-32768L));
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range range3 = range1.intersection(range0);
      range3.getBegin();
      range_Builder1.expandEnd(26L);
      Range.of((-1603L), 1195L);
      Range.of(1318L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 26L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.46084979500237
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(638L);
      range0.intersects(range0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 638L, 638L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.960594938748587
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(2147483677L);
      range0.isEmpty();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Range range1 = range0.intersection(range0);
      linkedList0.addAll((Collection<? extends Range>) list0);
      Range range2 = Range.of(2147483677L);
      range2.startsBefore(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      range0.complementFrom(linkedList0);
      Range.of(range_CoordinateSystem0, (-6718L), 2147483647L);
      Range.Comparators.values();
      Range.of(1407L, 2147483677L);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of(2790L, 320L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.9129759291251363
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-4099L));
      Range range0 = range_Builder0.build();
      range0.intersects(range0);
      range0.complement(range0);
      Object object0 = new Object();
      range0.equals((Object) null);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of(9983L);
      Object object4 = new Object();
      Object object5 = new Object();
      Range.of((-4099L), 9983L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.850829227837432
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = 126L;
      Range range0 = Range.ofLength(126L);
      Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(126L, 126L);
      range_Builder0.expandEnd(1822L);
      Range range1 = Range.of((-32768L), (-2378L));
      range_Builder0.copy();
      Range.of((-2378L), (-1856L));
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775612L), 1450L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=4.008296986976464
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(144L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 144L, 144L);
      range1.complement(range0);
      Long long0 = new Long(2030L);
      long long1 = 1L;
      Range.Builder range_Builder0 = new Range.Builder((-1832L), 2030L);
      range_Builder0.build();
      range_Builder0.contractBegin((-1282L));
      Range.Builder range_Builder1 = range_Builder0.contractEnd(144L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range2 = Range.ofLength(4294967295L);
      range1.intersection(range2);
      long long2 = 4294965888L;
      range_Builder1.expandEnd(1L);
      Range.of(144L, 4294967295L);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-1832L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.481747356036589
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 5L, 5L);
      Range.of(5L);
      Long long0 = new Long(5L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.96248018403837
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.isEmpty();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Range range1 = range0.intersection(range0);
      List<Range> list0 = range1.complementFrom(linkedList0);
      long long0 = 1407L;
      Range range2 = Range.ofLength(1407L);
      range2.toString();
      range2.startsBefore(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      range0.complementFrom(list0);
      range0.toString(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.ofLength(2790L);
      range0.complement(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1849L, 1407L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1540L), (-1540L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("byte array can not be null", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse byte array can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.963810822813847
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-2147483648L));
      range0.complement(range1);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.contractBegin((-2147483648L));
      Range.Builder range_Builder2 = range_Builder0.contractBegin(2937L);
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      range0.intersection(range1);
      range_Builder0.expandEnd(1848L);
      Range.of((-2147483648L), 1848L);
      range0.getBegin();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder5 = new Range.Builder(1061L, 1849L);
      range_Builder5.expandBegin(2790L);
      // Undeclared exception!
      try { 
        Range.of((-456L), (-943L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.9756718838690572
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2147483647L;
      Range range1 = Range.of(range_CoordinateSystem0, (-3665L), 2147483647L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 275424L, 274668L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.3882662201220213
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-4099L);
      range_Builder0.shift((-4099L));
      Range range0 = range_Builder0.build();
      range0.intersects(range0);
      range0.complement(range0);
      Object object0 = new Object();
      range0.equals(object0);
      range0.getBegin();
      Object object1 = null;
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-4099L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.490907388203489
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-3L), 1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=4.143822311942233
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3665L), 2147483647L);
      List<Range> list0 = new LinkedList<Range>();
      range0.complement(range1);
      List<Range> list1 = range0.complement(range1);
      range0.spliterator();
      range0.complementFrom(list1);
      range1.isSubRangeOf(range0);
      Range.Comparators.values();
      Range.of(2147483647L, 9223372036854775806L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 1402L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.687316444374103
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = 2629L;
      Range range0 = Range.of((-2140L), 2629L);
      Range range1 = range0.intersection(range0);
      range1.equals(range0);
      range0.endsBefore(range0);
      Range range2 = Range.of((-2140L));
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder((-2140L), (-601L));
      Range.Builder range_Builder1 = new Range.Builder(2629L);
      Range.Builder range_Builder2 = new Range.Builder(range2);
      long long1 = (-1L);
      range_Builder1.expandBegin((-1L));
      // Undeclared exception!
      try { 
        Range.of((-1L), (-601L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.489905775129635
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      linkedList0.spliterator();
      range0.getLength();
      range0.split(4294967295L);
      range0.complementFrom(linkedList0);
      Range.ofLength(255L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(3896L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=4.003846061404518
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L), (-1L));
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of((-1L), 9223372034707292161L);
      long long0 = range2.getLength();
      assertEquals(9223372034707292163L, long0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long((-3541L));
      range2.equals(long1);
      Object object4 = new Object();
      List<Range> list0 = range2.complement(range0);
      assertTrue(list0.contains(range2));
      
      Object object5 = new Object();
      List<Range> list1 = new LinkedList<Range>();
      Range.of(65535L);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Long long2 = new Long((-3406L));
      Object object10 = new Object();
      range0.equals(object6);
      Range range3 = Range.of((-1L));
      assertFalse(range3.isEmpty());
      
      Range range4 = range2.intersection(range0);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.805949088757174
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = (-2147483648L);
      Range range1 = Range.of((-2147483648L));
      range0.complement(range1);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.contractBegin((-2147483648L));
      range0.split(436L);
      range1.isSubRangeOf(range0);
      range_Builder0.contractBegin(2937L);
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      long long1 = (-59L);
      // Undeclared exception!
      try { 
        range0.split((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.8255907440488297
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = 9223372036854775806L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 2147483647L;
      Range range0 = Range.of(range_CoordinateSystem0, (-3665L), 2147483647L);
      range0.split(2147483647L);
      // Undeclared exception!
      range0.split(126L);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.796200425535124
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      Long long0 = new Long(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 1L);
      Range range1 = range_Builder0.build();
      long long1 = 4294967295L;
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.contractEnd(4294967295L);
      Range.ofLength(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      long long2 = 37L;
      Range.ofLength(37L);
      range0.intersection(range1);
      range_Builder1.expandEnd(4294965888L);
      range_Builder1.shift(1L);
      Range.of(255L, 9223372032559809088L);
      // Undeclared exception!
      try { 
        Range.of(1293L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=4.003728300657674
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 9223372034707292161L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1411L));
      range_Builder0.contractEnd((-1411L));
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range1 = Range.ofLength(1L);
      range0.intersection(range1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      long long0 = 2489L;
      range_Builder1.shift(2489L);
      Range.of((-1411L), 4294967295L);
      // Undeclared exception!
      try { 
        Range.of(255L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.762403587738903
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      Long long0 = new Long(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 1L);
      Range range1 = range_Builder0.build();
      long long1 = 4294967295L;
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.ofLength(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      long long2 = 37L;
      Range.ofLength(37L);
      range0.intersection(range1);
      range_Builder1.expandEnd(4294965888L);
      Range.Builder range_Builder3 = new Range.Builder(1L);
      Range.of(255L, 9223372032559809088L);
      // Undeclared exception!
      try { 
        Range.of(1293L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.952783958319514
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 11L, 11L);
      Range range1 = Range.of(11L);
      Long long0 = new Long(11L);
      range0.intersects(range1);
      range0.complement(range0);
      Range.ofLength(11L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-4330L), (-7L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, (-7L), 11L);
      String string0 = "17";
      // Undeclared exception!
      try { 
        Range.parseRange("17", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 17 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=4.163853831501221
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1295L, 1295L);
      range1.endsBefore(range0);
      range0.intersects(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Range range2 = Range.ofLength(1L);
      linkedList0.add(range1);
      Range range3 = range0.intersection(range2);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.addAll((Collection<? extends Range>) linkedList0);
      Range.of(1374L);
      range3.startsBefore(range2);
      Range range4 = Range.of((-9223372036854775808L));
      range2.isSubRangeOf(range4);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      range1.complementFrom(linkedList1);
      range3.toString(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.ofLength(2068L);
      range0.complement(range3);
      // Undeclared exception!
      try { 
        Range.of(3581L, 2068L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.952575747779666
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of((-33L));
      long long0 = (-1499L);
      Range range1 = Range.of((-1499L), 2368L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.asRange();
      range0.complementFrom(linkedList0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(object0);
      Object object3 = new Object();
      range1.complement(range0);
      Range range2 = Range.of(2368L);
      Object object4 = new Object();
      range2.equals((Object) null);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Long long1 = new Long((-2147483648L));
      Object object8 = new Object();
      range0.equals(object2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("FpmzY]:Qw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.FpmzY]:Qw
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.2680213313857913
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775805L, 9223372036854775805L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(9223372036854775806L, long0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.9208336825896164
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.ofLength(144L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 144L, 144L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.asRange();
      range0.endsBefore(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      long long0 = 1117L;
      Range.ofLength(1117L);
      Object object3 = new Object();
      Object object4 = new Object();
      range1.equals(range0);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-128L), 2032L);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775792L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.9152685568644814
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 11L, 11L);
      Range range1 = Range.of(11L);
      Long long0 = new Long(11L);
      range0.intersects(range1);
      range0.complement(range0);
      range1.equals(range1);
      range1.equals(range0);
      Range range2 = Range.of((-1501L));
      range2.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder((long) long0);
      Range.Builder range_Builder1 = new Range.Builder(range2);
      long long1 = 255L;
      range_Builder1.shift((-1501L));
      long long2 = (-1L);
      long long3 = (-2652L);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-2652L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.63510202839416
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-3L), 1L);
      Range range2 = range1.intersection(range0);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("fTdIH,#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.fTdIH,#
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.9083904319911498
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.isSubRangeOf(range1);
      Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = Range.ofLength(37L);
      Range range3 = range0.intersection(range1);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      range_Builder1.shift(4294967295L);
      long long0 = 65535L;
      Range.of(9973L, 65535L);
      Range.of(65535L, 9223372036854775807L);
      range2.intersects(range3);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372032559808516 would make range [4294967295 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.8757010763134394
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-4099L));
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.intersects(range0);
      assertFalse(boolean0);
      
      range0.complement(range0);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Range range1 = range0.asRange();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range1.equals(object5);
      Object object6 = new Object();
      range1.complement(range0);
      Range range2 = Range.of(2147483646L);
      Object object7 = new Object();
      Range range3 = Range.of((-4099L));
      range0.equals(object1);
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      boolean boolean1 = range0.isSubRangeOf(range3);
      assertFalse(range3.isEmpty());
      
      Long.valueOf((-4647L));
      Object object11 = new Object();
      boolean boolean2 = range1.equals(object4);
      assertFalse(boolean2 == boolean1);
      
      range2.spliterator();
      Range.of((-128L));
      range1.intersection(range0);
      assertFalse(range0.equals((Object)range3));
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.8758770059547416
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.intersects(range0);
      Range range1 = Range.of(1165L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = range0.asRange();
      Range range3 = range2.intersection(range0);
      List<Range> list0 = range2.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      range3.complementFrom(linkedList0);
      Range.Comparators.values();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      range1.intersection(range3);
      //  // Unstable assertion: assertSame(range3, range2);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.361445543503274
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.4095895437966823
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-1501L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      long long0 = 255L;
      range_Builder0.shift((-1501L));
      long long1 = (-1L);
      long long2 = (-2652L);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-2652L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=4.039178079279683
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range range0 = Range.of((-1506L));
      Object object6 = new Object();
      range0.equals((Object) null);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Range range1 = Range.ofLength(382L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      Object object10 = new Object();
      Object object11 = new Object();
      Range.of(255L, 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1617L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.4570051543519553
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(2147483677L);
      range0.isEmpty();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Range range1 = range0.intersection(range0);
      linkedList0.addAll((Collection<? extends Range>) list0);
      Range range2 = Range.of(2147483677L);
      range2.startsBefore(range1);
      range1.isSubRangeOf(range0);
      range1.endsBefore(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 4186L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4186L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.6710841883237975
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-611L), 0L);
      Range range1 = Range.of(range_CoordinateSystem0, (-611L), 0L);
      Range.of(0L, 0L);
      range1.isSubRangeOf(range0);
      range_CoordinateSystem0.getAbbreviatedName();
      range_CoordinateSystem0.getAbbreviatedName();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-4566L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.8576181658046553
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = 2629L;
      Range range0 = Range.of((-2140L), 2629L);
      Range range1 = Range.of((-2140L));
      range1.intersection(range0);
      range1.endsBefore(range0);
      Range range2 = Range.of((-2140L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range2.equals(range0);
      range1.getEnd();
      Range.Builder range_Builder0 = new Range.Builder((-2140L), (-601L));
      Range.Builder range_Builder1 = new Range.Builder(2629L);
      Range.Builder range_Builder2 = new Range.Builder(range2);
      long long1 = (-28L);
      Range.of((-2651L), 2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(2629L);
      // Undeclared exception!
      try { 
        Range.of((-28L), (-601L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.8109121100434584
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(0L);
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      Range range2 = range1.intersection(range0);
      range0.complementFrom(linkedList0);
      long long0 = 3710L;
      Range range3 = Range.ofLength(3710L);
      range2.startsBefore(range1);
      range2.getEnd();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.endsBefore(range2);
      range1.isSubRangeOf(range3);
      range0.startsBefore(range2);
      range3.getBegin();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 179L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.5540167697650964
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals("J}RV%Q-oQK5i|0");
      Object object4 = new Object();
      Range.of(255L);
      Object object5 = new Object();
      range0.equals(object5);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.7843028492947086
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-558L), (-7L));
      Range.of((-7L), 3863L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 343L, 343L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.E
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.411408876906673
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      long long1 = 1L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.ofLength(1L);
      long long2 = 4294967295L;
      Range.Builder range_Builder1 = range_Builder0.contractBegin(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=4.078104925738394
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = (-2147483627L);
      Range range1 = Range.of((-2147483627L));
      List<Range> list0 = range0.complement(range1);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.contractBegin((-2147483627L));
      range_Builder0.contractBegin(2937L);
      range_Builder0.contractBegin(0L);
      range1.spliterator();
      range1.complementFrom(list0);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Comparators.values();
      Range.of(277L, 32767L);
      Range.of(range_CoordinateSystem0, (-30L), 9223372036854501265L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("?Qfdl .W?!6f8p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.?Qfdl .W?!6f8p
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.558753480902163
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.isEmpty();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = range0.intersection(range0);
      List<Range> list0 = range1.complementFrom(linkedList0);
      Range range2 = Range.ofLength(1407L);
      range2.startsBefore(range1);
      range1.isSubRangeOf(range0);
      range1.endsBefore(range0);
      range0.complementFrom(list0);
      range1.complementFrom(linkedList0);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.5779677144618263
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(620L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      Consumer<Range> consumer1 = (Consumer<Range>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer1);
      linkedList0.addAll((Collection<? extends Range>) list0);
      Range range1 = Range.of(620L);
      List<Range> list1 = range0.complementFrom(linkedList0);
      boolean boolean0 = range1.startsBefore(range0);
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertTrue(boolean1);
      
      boolean boolean2 = range0.endsBefore(range1);
      assertTrue(boolean2 == boolean0);
      
      range0.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(621L, long0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.360538514024816
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = new Object();
      Range.ofLength(37L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-793L), 117L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.240804857920011
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-44L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long.valueOf((-44L));
      Object object4 = new Object();
      range0.spliterator();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.432232405342495
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.of(1165L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1165L, 1436L);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(4186L);
      range_Builder0.expandBegin(4186L);
      Range.Builder range_Builder1 = new Range.Builder();
      long long0 = 0L;
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("fae}R1tMn&gm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.fae}R1tMn&gm
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.of(638L, 638L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.of((-3406L));
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Long long0 = new Long((-1420L));
      Object object10 = new Object();
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(4186L);
      range_Builder0.expandBegin((-1741L));
      range_Builder0.expandBegin(4186L);
      range_Builder0.shift((-5L));
      long long0 = 0L;
      range_Builder0.shift(0L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("fae}R1tMn&gm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.fae}R1tMn&gm
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
