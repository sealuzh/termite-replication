/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 10:46:55 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.Instant;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalUnit;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdWholeReadItem;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PositionSequence positionSequence0 = null;
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd("", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null, (Map<String, String>) null);
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence1).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("ea::Lv,e/%\"", nucleotideSequence0, qualitySequence1);
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PositionSequence positionSequence0 = null;
      DefaultPhd defaultPhd0 = new DefaultPhd("org.jcvi.jillion.core.qual.RunLengthEncodedQualityCodec", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      PhdBuilder phdBuilder1 = phdBuilder0.peaks((PositionSequence) null);
      PhdBuilder phdBuilder2 = phdBuilder0.fakePeaks();
      phdBuilder2.fakePeaks();
      // Undeclared exception!
      try { 
        phdBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.ArtificialPhd", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      String string0 = "A`|$\\JS4I.8oyRW=!6[(";
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("A`|$JS4I.8oyRW=!6[(", nucleotideSequence0, qualitySequence0);
      Instant instant0 = MockInstant.now();
      long long0 = 0L;
      Instant instant1 = MockInstant.plusNanos(instant0, 0L);
      MockInstant.plusNanos(instant1, 0L);
      TemporalUnit temporalUnit0 = null;
      MockInstant.ofEpochMilli(0L);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-3475), (-3475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("2K+&W", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(1403, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence1).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("iwIoC7\"u", nucleotideSequence1, qualitySequence1);
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      String string0 = "";
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks();
      phdBuilder0.build();
      long long0 = 90L;
      Clock clock0 = null;
      Instant instant0 = MockInstant.ofEpochSecond(90L, 90L);
      Instant instant1 = MockInstant.minusNanos(instant0, 1031L);
      long long1 = (-1L);
      Instant instant2 = MockInstant.minusMillis(instant1, 90L);
      Instant instant3 = MockInstant.plusSeconds(instant0, 90L);
      MockInstant.with(instant3, (TemporalAdjuster) instant2);
      TemporalUnit temporalUnit0 = null;
      // Undeclared exception!
      try { 
        MockInstant.plus((Instant) null, 1L, (TemporalUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence1).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("iwIoC7\"u", nucleotideSequence1, qualitySequence1);
      System.setCurrentTimeMillis((-994L));
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks(1842, 1842);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      String string0 = "";
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks();
      phdBuilder0.build();
      long long0 = 90L;
      Clock clock0 = null;
      // Undeclared exception!
      try { 
        MockInstant.now((Clock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // clock
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      String string0 = "";
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      phdBuilder0.build();
      long long0 = 90L;
      Clock clock0 = null;
      // Undeclared exception!
      try { 
        MockInstant.now((Clock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // clock
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("54B]w", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      phdBuilder0.wholeReadItems(linkedList0);
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.plusSeconds(instant0, (-710L));
      long long0 = 792L;
      Instant instant2 = MockInstant.plusMillis(instant1, (-710L));
      Instant instant3 = MockInstant.from(instant2);
      long long1 = 0L;
      Instant instant4 = MockInstant.plusSeconds(instant3, 0L);
      TemporalAmount temporalAmount0 = mock(TemporalAmount.class, new ViolatedAssumptionAnswer());
      doReturn((Temporal) null).when(temporalAmount0).subtractFrom(any(java.time.temporal.Temporal.class));
      MockInstant.minus(instant4, temporalAmount0);
      TemporalAmount temporalAmount1 = mock(TemporalAmount.class, new ViolatedAssumptionAnswer());
      doReturn((Temporal) null).when(temporalAmount1).subtractFrom(any(java.time.temporal.Temporal.class));
      MockInstant.minus(instant0, temporalAmount1);
      long long2 = 4294967295L;
      // Undeclared exception!
      try { 
        MockInstant.with(instant1, (TemporalField) null, 4294967295L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.Instant", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("ApJ:", nucleotideSequence1, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte byte0 = (byte)30;
      String string0 = "";
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("", (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte byte0 = (byte)30;
      String string0 = "";
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, (NucleotideSequence) null, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      String string0 = "A`|$\\JS4I.8oyRW=!6[(";
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("A`|$JS4I.8oyRW=!6[(", nucleotideSequence0, qualitySequence0);
      phdBuilder0.peaks((PositionSequence) null);
      MockInstant.now();
      long long0 = 0L;
      // Undeclared exception!
      try { 
        MockInstant.plusNanos((Instant) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(list1);
      List<String> list2 = defaultPhdWholeReadItem0.getLines();
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(list3);
      LinkedList<DefaultPhdWholeReadItem> linkedList1 = new LinkedList<DefaultPhdWholeReadItem>();
      LinkedList<DefaultPhdWholeReadItem> linkedList2 = new LinkedList<DefaultPhdWholeReadItem>();
      LinkedList<DefaultPhdWholeReadItem> linkedList3 = new LinkedList<DefaultPhdWholeReadItem>();
      linkedList3.add(defaultPhdWholeReadItem1);
      LinkedList<DefaultPhdWholeReadItem> linkedList4 = new LinkedList<DefaultPhdWholeReadItem>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(list1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(list0);
      DefaultPhdWholeReadItem[] defaultPhdWholeReadItemArray0 = new DefaultPhdWholeReadItem[0];
      linkedList4.toArray(defaultPhdWholeReadItemArray0);
      LinkedList<DefaultPhdReadTag> linkedList5 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList6 = new LinkedList<DefaultPhdReadTag>();
      List<String> list4 = defaultPhdWholeReadItem0.getLines();
      linkedList6.removeAll(list4);
      LinkedList<DefaultPhdReadTag> linkedList7 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList8 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList9 = new LinkedList<DefaultPhdReadTag>();
      linkedList6.add((DefaultPhdReadTag) null);
      LinkedList<DefaultPhdReadTag> linkedList10 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList11 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList12 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList13 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList14 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<PhdReadTag> linkedList15 = new LinkedList<PhdReadTag>();
      System.setCurrentTimeMillis((-1319L));
      PhdBuilder phdBuilder0 = new PhdBuilder(":|", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.readTags(linkedList15);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      NucleotideSequence nucleotideSequence2 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence2).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("ea:Lv,e/%\"", nucleotideSequence2, qualitySequence0);
      phdBuilder0.peaks((PositionSequence) null);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      long long0 = 1346L;
      MockDate mockDate0 = new MockDate(1346L);
      Instant instant0 = mockDate0.toInstant();
      TemporalAmount temporalAmount0 = mock(TemporalAmount.class, new ViolatedAssumptionAnswer());
      Instant instant1 = MockInstant.plusSeconds(instant0, 1346L);
      TemporalAmount temporalAmount1 = mock(TemporalAmount.class, new ViolatedAssumptionAnswer());
      doReturn((Temporal) null).when(temporalAmount1).subtractFrom(any(java.time.temporal.Temporal.class));
      MockInstant.minus(instant1, temporalAmount1);
      phdBuilder0.copy();
      TemporalUnit temporalUnit0 = mock(TemporalUnit.class, new ViolatedAssumptionAnswer());
      TemporalAmount temporalAmount2 = mock(TemporalAmount.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MockInstant.minus((Instant) null, temporalAmount2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(list1);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(list2);
      LinkedList<DefaultPhdWholeReadItem> linkedList2 = new LinkedList<DefaultPhdWholeReadItem>();
      LinkedList<DefaultPhdWholeReadItem> linkedList3 = new LinkedList<DefaultPhdWholeReadItem>();
      linkedList3.add(defaultPhdWholeReadItem1);
      LinkedList<DefaultPhdWholeReadItem> linkedList4 = new LinkedList<DefaultPhdWholeReadItem>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(list1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(list0);
      linkedList4.stream();
      DefaultPhdWholeReadItem[] defaultPhdWholeReadItemArray0 = new DefaultPhdWholeReadItem[0];
      linkedList4.toArray(defaultPhdWholeReadItemArray0);
      LinkedList<DefaultPhdReadTag> linkedList5 = new LinkedList<DefaultPhdReadTag>();
      LinkedList<DefaultPhdReadTag> linkedList6 = new LinkedList<DefaultPhdReadTag>();
      DefaultPhd defaultPhd0 = new DefaultPhd("", nucleotideSequence0, qualitySequence0, (PositionSequence) null);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      phdBuilder0.peaks((PositionSequence) null);
      PhdBuilder phdBuilder1 = null;
      try {
        phdBuilder1 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd("$-xVmRzJMa<GE)&'cC~", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence1).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("iwIoC7\"u", nucleotideSequence1, qualitySequence1);
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("id can not be null", "id can not be null");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      hashMap2.put("Ne|>o$5}QZ~R", "Ne|>o$5}QZ~R");
      hashMap1.put("id can not be null", "peaks and qualities have unequal lengths");
      hashMap0.put("Ne|>o$5}QZ~R", "cbR%FMD#9gKa/");
      PhdBuilder phdBuilder1 = phdBuilder0.copy();
      assertNotSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("id can not be null", "id can not be null");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      hashMap2.put("Ne|>o$5}QZ~R", "Ne|>o$5}QZ~R");
      hashMap1.put("id can not be null", "peaks and qualities have unequal lengths");
      hashMap2.put("Ne|>o$5}QZ~R", "cbR%FMD#9gKa/");
      PhdBuilder phdBuilder1 = phdBuilder0.comments(hashMap0);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("id can not be null", "id can not be null");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap1.put("]", "peaks and qualities have unequal lengths");
      hashMap2.put("Ne|>o$5}QZ~R", "cbR%FMD#9gKa/");
      PhdBuilder phdBuilder1 = phdBuilder0.comments(hashMap0);
      assertSame(phdBuilder0, phdBuilder1);
  }
}
