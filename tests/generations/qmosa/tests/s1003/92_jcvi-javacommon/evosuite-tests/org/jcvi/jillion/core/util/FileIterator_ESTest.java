/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 12:45:47 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.85212075507573
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      File file0 = fileIterator0.next();
      fileIterator0.getNextFile();
      file0.setLastModified(0L);
      file0.setExecutable(true);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      fileIterator0.updateFileIterator(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(false);
      fileIterator0.iterator();
      fileIterator0.next();
      mockFile0.setLastModified(0L);
      fileIterator0.hasNext();
      fileIterator0.iterator();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.iterator();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder3.build();
      // Undeclared exception!
      try { 
        fileIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.650711269457763
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/org.jcvi.jillion.core.util.iter.IteratorUtil0");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-89);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile.createTempFile("org.jcvi.jillion.core.util.iter.IteratorUtil", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter1);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.getNextFile();
      fileIterator0.next();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.7151603488484204
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.next();
      fileIterator0.getNextFile();
      MockFile mockFile1 = new MockFile("", "");
      mockFile1.getAbsolutePath();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator0.getNextFile();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      // Undeclared exception!
      try { 
        fileIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.9432785092837466
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.next();
      fileIterator0.getNextFile();
      MockFile mockFile1 = new MockFile("", "");
      mockFile1.getAbsolutePath();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      multipleFileFilter0.accept(mockFile0);
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator0.iterator();
      fileIterator_FileIteratorBuilder2.fileFilter(multipleFileFilter0);
      MockFile mockFile2 = new MockFile("/", "/");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder3.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder3.includeHiddenFiles(false);
      fileIterator0.iterator();
      fileIterator1.iterator();
      FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.850849614914229
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      File file0 = fileIterator0.next();
      fileIterator0.getNextFile();
      MockFile mockFile1 = new MockFile("", "");
      file0.getAbsolutePath();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      file0.setReadable(true, false);
      fileIterator0.setUpInitialState(file0);
      File file1 = MockFile.createTempFile("/home", "", (File) mockFile1);
      FileIterator.createBreadthFirstFileIteratorBuilder(file1);
      fileIterator0.updateFileIterator(mockFile0);
      fileIterator0.iterator();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      fileIterator1.iterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder1.build();
      assertTrue(fileIterator2.hasNext());
      
      fileIterator1.setUpInitialState(file1);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEach(consumer0);
      fileIterator2.setUpInitialState(file1);
      MockFile mockFile2 = new MockFile(file1, "org.jcvi.jillion.core.util.MultipleFileFilter");
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder2.build();
      fileIterator0.updateFileIterator(file0);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      File file2 = fileIterator3.next();
      assertFalse(file2.equals((Object)file0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.610861630446992
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      mockFile1.getAbsolutePath();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MockFile.createTempFile("org.jcvi.jillion.core.util.iter.IteratorUtil", (String) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      mockFile0.setWritable(false);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      File file0 = fileIterator0.getNextFile();
      assertNotNull(file0);
      assertEquals("/tmp", file0.getParent());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3377885947307058
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("?M");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?M");
      mockFile0.delete();
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonDirectoryFileFilter", (String) null, (File) mockFile0);
      MockFile mockFile1 = new MockFile("");
      mockFile1.getAbsolutePath();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<FileFilter> unaryOperator1 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator1);
      Function<Object, FileFilter> function2 = (Function<Object, FileFilter>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, FileFilter> function3 = unaryOperator0.andThen((Function<? super Object, ? extends FileFilter>) function2);
      unaryOperator1.compose((Function<? super Object, ? extends FileFilter>) function3);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      UnaryOperator<FileFilter> unaryOperator2 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator2);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      Integer integer0 = new Integer((-1));
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5241954266817004
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      mockFile0.setReadable(true, true);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.iter.IteratorUtil", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      assertNotSame(fileIterator_FileIteratorBuilder2, fileIterator_FileIteratorBuilder0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.5563962687091775
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      MockFile mockFile1 = new MockFile("");
      fileIterator0.getNextFile();
      MockFile mockFile2 = new MockFile("", "");
      mockFile2.getAbsolutePath();
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      fileIterator0.updateFileIterator(mockFile2);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder3.build();
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.9534240763013058
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileFilter[] fileFilterArray0 = new FileFilter[4];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      multipleFileFilter4.accept(mockFile1);
      multipleFileFilter3.accept(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(fileFilterArray0[3]);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.iterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter2);
      fileIterator0.getNextFile();
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder2.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.setUpInitialState(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder3.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEach(consumer0);
      fileIterator1.setUpInitialState(mockFile0);
      MockFile mockFile2 = new MockFile(mockFile1, "org.jcvi.jillion.core.util.FileIterator$FileNameComparator");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder4.build();
      fileIterator2.updateFileIterator(mockFile2);
      assertFalse(fileIterator2.hasNext());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3927624603085786
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      Function<Object, Object> function1 = Function.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      function5.compose((Function<? super String, ?>) function0);
      function3.compose((Function<? super Object, ?>) function1);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = unaryOperator2.compose((Function<? super Object, ? extends String>) function7);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function8);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ?>) function6);
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function10 = unaryOperator3.compose((Function<? super Object, ? extends String>) function9);
      Function<Object, String> function11 = unaryOperator3.compose((Function<? super Object, ? extends String>) function10);
      function11.andThen((Function<? super String, ? extends Integer>) function6);
      function10.andThen((Function<? super String, ? extends Integer>) function5);
      unaryOperator3.compose((Function<? super Object, ? extends String>) function10);
      unaryOperator3.compose((Function<? super Object, ? extends String>) function11);
      Integer integer0 = new Integer((-6));
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.8519663089581195
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.next();
      fileIterator0.getNextFile();
      MockFile mockFile1 = new MockFile("", "");
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator0.updateFileIterator(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(false);
      fileIterator0.iterator();
      fileIterator0.hasNext();
      fileIterator0.iterator();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder3.build();
      // Undeclared exception!
      try { 
        fileIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.848408471176128
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      boolean boolean0 = true;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.next();
      fileIterator0.getNextFile();
      MockFile mockFile1 = new MockFile("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile1.getAbsolutePath();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator0.updateFileIterator(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder3.includeDirectories(true);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      fileIterator0.iterator();
      fileIterator0.next();
      fileIterator0.hasNext();
      fileIterator0.iterator();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder3.build();
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder4.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fileIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5564977057336913
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
      
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.next();
      fileIterator0.getNextFile();
      MockFile mockFile1 = new MockFile("", "");
      mockFile1.getAbsolutePath();
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator0.updateFileIterator(mockFile1);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder3.build();
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.766733128089481
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      MockFile mockFile1 = new MockFile("", "");
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.setUpInitialState(mockFile1);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator0.updateFileIterator(mockFile0);
      fileIterator_FileIteratorBuilder3.includeDirectories(true);
      fileIterator0.iterator();
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2861577621904576
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder3.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      MockFile mockFile1 = new MockFile("", "");
      mockFile1.getAbsolutePath();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      fileIterator_FileIteratorBuilder2.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder3.build();
      mockFile1.toPath();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator0.setUpInitialState((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7457394139710076
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      MockFile mockFile1 = new MockFile("", "");
      mockFile1.getAbsolutePath();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter0);
      fileIterator_FileIteratorBuilder2.build();
      // Undeclared exception!
      try { 
        fileIterator0.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.521628917373221
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      MockFile mockFile1 = new MockFile("");
      MockFile mockFile2 = new MockFile("", "");
      mockFile2.getAbsolutePath();
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      fileIterator0.updateFileIterator(mockFile2);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      assertTrue(fileIterator0.hasNext());
      
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder3.build();
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.8493523813928103
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      MockFile mockFile1 = new MockFile("", "");
      mockFile1.getAbsolutePath();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder3.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = fileIterator_FileIteratorBuilder4.includeHiddenFiles(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder5.build();
      assertTrue(fileIterator1.hasNext());
      
      fileIterator0.getNextFile();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4450047939551998
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      UnaryOperator<FileFilter> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      UnaryOperator.identity();
      Function<Object, FileFilter> function0 = (Function<Object, FileFilter>) mock(Function.class, new ViolatedAssumptionAnswer());
      linkedList0.replaceAll(unaryOperator0);
      FileFilter[] fileFilterArray0 = new FileFilter[7];
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[5] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[6] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.replaceAll(unaryOperator0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      Integer integer0 = new Integer(1576);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3927624603085786
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      Function<Object, Object> function1 = Function.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function7 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function6);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function8 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      function7.compose((Function<? super String, ?>) function0);
      function7.compose((Function<? super Object, ?>) function1);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function10 = unaryOperator2.compose((Function<? super Object, ? extends String>) function9);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function10);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ?>) function8);
      Function<Object, String> function11 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function12 = unaryOperator3.compose((Function<? super Object, ? extends String>) function11);
      Function<Object, String> function13 = unaryOperator3.compose((Function<? super Object, ? extends String>) function12);
      function13.andThen((Function<? super String, ? extends Integer>) function8);
      function12.andThen((Function<? super String, ? extends Integer>) function5);
      unaryOperator3.compose((Function<? super Object, ? extends String>) function12);
      unaryOperator3.compose((Function<? super Object, ? extends String>) function13);
      Integer integer0 = new Integer((-2246));
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2743627145740812
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[17];
      fileFilterArray0[3] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      UnaryOperator<FileFilter> unaryOperator0 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator0);
      linkedList0.add((FileFilter) multipleFileFilter5);
      linkedList0.add((FileFilter) multipleFileFilter1);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      Object object0 = new Object();
      linkedList1.removeFirstOccurrence(linkedList1);
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) multipleFileFilter2);
      linkedList1.pollFirst();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "");
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList0);
      Predicate.isEqual((Object) multipleFileFilter7);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      predicate1.negate();
      linkedList0.removeIf(predicate0);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList1);
      linkedList1.offer(multipleFileFilter0);
      linkedList1.retainAll(linkedList0);
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(fileFilterArray0);
      linkedList1.add((FileFilter) multipleFileFilter10);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(fileFilterArray0);
      linkedList2.add((FileFilter) multipleFileFilter11);
      linkedList2.add((FileFilter) multipleFileFilter5);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(linkedList1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2140666558065463
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      function5.compose((Function<? super Object, ?>) function5);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      unaryOperator0.apply(function6);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      unaryOperator1.andThen((Function<? super String, ?>) function7);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function9 = unaryOperator1.compose((Function<? super Object, ? extends String>) function8);
      Function<Object, String> function10 = unaryOperator1.compose((Function<? super Object, ? extends String>) function9);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function10);
      Function<Object, String> function11 = unaryOperator1.compose((Function<? super Object, ? extends String>) function10);
      Function<Object, String> function12 = unaryOperator1.compose((Function<? super Object, ? extends String>) function11);
      Function<Object, Object> function13 = Function.identity();
      function10.compose((Function<? super Object, ?>) function13);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function10);
      function0.andThen((Function<? super Object, ? extends String>) function12);
      Integer integer0 = new Integer(1402);
      Integer integer1 = new Integer(1402);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.8812270638030215
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.next();
      fileIterator0.getNextFile();
      MockFile mockFile1 = new MockFile("", "");
      mockFile1.getAbsolutePath();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator0.updateFileIterator(mockFile1);
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      fileIterator0.iterator();
      fileIterator0.next();
      fileIterator0.iterator();
      fileIterator_FileIteratorBuilder2.build();
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      Function<Object, Object> function1 = Function.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function7 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function6);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function8 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      function7.compose((Function<? super String, ?>) function0);
      function7.compose((Function<? super Object, ?>) function1);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function10 = unaryOperator2.compose((Function<? super Object, ? extends String>) function9);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function10);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ?>) function8);
      Function<Object, String> function11 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function12 = unaryOperator3.compose((Function<? super Object, ? extends String>) function11);
      Function<Object, String> function13 = unaryOperator3.compose((Function<? super Object, ? extends String>) function12);
      function13.andThen((Function<? super String, ? extends Integer>) function8);
      function12.andThen((Function<? super String, ? extends Integer>) function5);
      unaryOperator3.compose((Function<? super Object, ? extends String>) function12);
      unaryOperator3.compose((Function<? super Object, ? extends String>) function13);
      Integer integer0 = new Integer((-2246));
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) function0);
      Function<Object, Object> function1 = Function.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function7 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      function3.compose((Function<? super Object, ?>) function6);
      Function<Object, Integer> function8 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function6);
      unaryOperator1.apply(function7);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ?>) function8);
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function10 = unaryOperator2.compose((Function<? super Object, ? extends String>) function9);
      Function<Object, String> function11 = unaryOperator2.compose((Function<? super Object, ? extends String>) function10);
      Function<Object, String> function12 = unaryOperator2.compose((Function<? super Object, ? extends String>) function11);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function12);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function11);
      function1.andThen((Function<? super Object, ? extends String>) function11);
      Integer integer0 = new Integer(1413);
      Integer integer1 = new Integer(1413);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      function2.compose((Function<? super Object, ?>) function5);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      unaryOperator1.apply(function6);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function7 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      unaryOperator2.andThen((Function<? super String, ?>) function7);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function9 = unaryOperator2.compose((Function<? super Object, ? extends String>) function8);
      Function<Object, String> function10 = unaryOperator2.compose((Function<? super Object, ? extends String>) function9);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function10);
      Function<Object, String> function11 = unaryOperator2.compose((Function<? super Object, ? extends String>) function10);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function11);
      Function<Object, Object> function12 = Function.identity();
      function10.compose((Function<? super Object, ?>) function12);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function10);
      function0.andThen((Function<? super Object, ? extends String>) function10);
      Integer integer0 = new Integer(1402);
      Integer integer1 = new Integer(1402);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b", "b");
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      function2.compose((Function<? super Object, ?>) function5);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      unaryOperator1.apply(function6);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function7 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      unaryOperator2.andThen((Function<? super String, ?>) function7);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function9 = unaryOperator2.compose((Function<? super Object, ? extends String>) function8);
      Function<Object, String> function10 = unaryOperator2.compose((Function<? super Object, ? extends String>) function9);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function10);
      Function<Object, String> function11 = unaryOperator2.compose((Function<? super Object, ? extends String>) function10);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function11);
      Function<Object, Object> function12 = Function.identity();
      function10.compose((Function<? super Object, ?>) function12);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function10);
      function0.andThen((Function<? super Object, ? extends String>) function10);
      Integer integer0 = new Integer(1402);
      Integer integer1 = new Integer(1402);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.274362714574081
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      assertSame(fileIterator_FileIteratorBuilder1, fileIterator_FileIteratorBuilder0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "org.jcvi.jillion.core.util.FileIterator$NonDirectoryFileFilter";
      String string1 = "";
      MockFile mockFile0 = new MockFile("org.jcvi.jillion.core.util.FileIterator$NonDirectoryFileFilter", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }
}
