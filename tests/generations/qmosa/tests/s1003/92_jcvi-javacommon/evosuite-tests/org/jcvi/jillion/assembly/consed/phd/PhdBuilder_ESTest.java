/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 12:26:38 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdWholeReadItem;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannelGroup;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = null;
      DefaultPhd defaultPhd0 = new DefaultPhd("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null, (Map<String, String>) null);
      defaultPhd0.getReadTags();
      defaultPhd0.getWholeReadItems();
      defaultPhd0.toString();
      defaultPhd0.toString();
      defaultPhd0.getReadTags();
      defaultPhd0.getReadTags();
      defaultPhd0.getWholeReadItems();
      defaultPhd0.getWholeReadItems();
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-i$Oj`;", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("-i$Oj`;", "p");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap0.replace((String) null, "6S.n9rpN5wGa", "can not have index beyond length");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap5.put("-i$Oj`;", (String) null);
      hashMap5.putIfAbsent("chromatogram can not be null", "6S.n9rpN5wGa");
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap1.keySet();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      ZoneId.getAvailableZoneIds();
      hashMap7.put((String) null, "id can not be null");
      hashMap0.put(" corresponds to encodedIndex ", "index ");
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      hashMap7.put("", "chromatogram can not be null");
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("e(&#", nucleotideSequence0, qualitySequence0);
      byte[] byteArray0 = new byte[1];
      short[] shortArray0 = new short[0];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel0.equals("e(&#");
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      short[] shortArray1 = new short[0];
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel3.equals(defaultChannel1);
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel3.equals("e(&#");
      defaultChannel3.equals(defaultChannel0);
      defaultChannel0.equals((Object) null);
      Object object0 = new Object();
      defaultChannel3.equals(defaultChannel1);
      defaultChannel3.equals(defaultChannel1);
      DefaultChannel defaultChannel5 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel1, defaultChannel1, defaultChannel5, defaultChannel1);
      defaultChannel1.equals((Object) null);
      Object object1 = new Object();
      defaultChannel2.equals(defaultChannel0);
      defaultChannel3.equals(defaultChannel2);
      Object object2 = new Object();
      defaultChannel5.equals(defaultChannel0);
      DefaultChannel defaultChannel6 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannel defaultChannel7 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel0.equals(defaultChannelGroup0);
      defaultChannel3.equals(defaultChannel5);
      DefaultChannelGroup defaultChannelGroup1 = new DefaultChannelGroup(defaultChannel4, defaultChannel0, defaultChannel0, defaultChannel6);
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("e(&#", nucleotideSequence0, qualitySequence0);
      byte[] byteArray0 = new byte[1];
      short[] shortArray0 = new short[0];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel0.equals("e(&#");
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel1.equals("e(&#");
      short[] shortArray1 = new short[0];
      Object object0 = new Object();
      Object object1 = new Object();
      defaultChannel1.equals(object1);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals(defaultChannel1);
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals(defaultChannel3);
      defaultChannel2.equals("e(&#");
      defaultChannel2.equals(defaultChannel0);
      defaultChannel0.equals(defaultChannel1);
      Object object2 = new Object();
      defaultChannel2.equals(defaultChannel1);
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel1, defaultChannel1, defaultChannel4, defaultChannel1);
      defaultChannel1.equals((Object) null);
      Object object3 = new Object();
      defaultChannel1.equals(defaultChannel0);
      defaultChannel2.equals(defaultChannel1);
      Object object4 = new Object();
      defaultChannel0.equals(object1);
      defaultChannel4.equals(defaultChannel0);
      DefaultChannel defaultChannel5 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannel defaultChannel6 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals(defaultChannel4);
      DefaultChannelGroup defaultChannelGroup1 = new DefaultChannelGroup(defaultChannel3, defaultChannel0, defaultChannel0, defaultChannel5);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(1821, (-834));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-i$Oj`;", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.putIfAbsent("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", "");
      hashMap0.put("~fMP4TLYxj;z|7", "");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.replace((String) null, "c0CdTf,;AZ1", "RoBXLT[y/?[_4l3");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap1.put("-i$Oj`;", (String) null);
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap0.put((String) null, "-i$Oj`;");
      hashMap0.keySet();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap6.put("c0CdTf,;AZ1", "");
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap4.put((String) null, "-i$Oj`;");
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap0.put("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", "");
      hashMap6.put((String) null, "org.jcvi.jillion.assembly.consed.phd.PhdBuilder");
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-i$Oj`;", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.putIfAbsent("A-_?", "");
      hashMap0.put("~fMP4TLYxj;z|7", "");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.replace((String) null, "c0CdTf,;AZ1", "RoBXLT[y/?[_4l3");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap1.put("-i$Oj`;", (String) null);
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap0.put((String) null, "-i$Oj`;");
      hashMap0.keySet();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap6.put("c0CdTf,;AZ1", "");
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap4.put((String) null, "-i$Oj`;");
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap0.put((String) null, "");
      hashMap6.put((String) null, "A-_?");
      System.setCurrentTimeMillis((-1L));
      PhdBuilder phdBuilder1 = phdBuilder0.comments(hashMap0);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      phdBuilder0.peaks((PositionSequence) null);
      byte[] byteArray0 = new byte[0];
      short[] shortArray0 = new short[0];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel0.equals((Object) null);
      defaultChannel0.equals("");
      defaultChannel0.equals("");
      short[] shortArray1 = new short[0];
      Object object0 = new Object();
      defaultChannel0.equals(object0);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals(defaultChannel0);
      defaultChannel2.equals(defaultChannel0);
      defaultChannel2.equals("");
      defaultChannel0.equals("");
      Object object1 = new Object();
      defaultChannel2.equals(object1);
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel0, defaultChannel0, defaultChannel3, defaultChannel0);
      defaultChannel3.equals(defaultChannelGroup0);
      defaultChannel3.equals(defaultChannel1);
      defaultChannel3.equals(object1);
      Object object2 = new Object();
      defaultChannel3.equals(defaultChannel0);
      defaultChannel0.equals(object2);
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray0, shortArray1);
      defaultChannel4.equals(defaultChannelGroup0);
      DefaultChannelGroup defaultChannelGroup1 = new DefaultChannelGroup(defaultChannel0, defaultChannel0, defaultChannel0, defaultChannel4);
      assertTrue(defaultChannelGroup1.equals((Object)defaultChannelGroup0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("peaks and qualities have unequal lengths", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(list0);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      PhdBuilder phdBuilder1 = phdBuilder0.wholeReadItems(linkedList0);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      byte[] byteArray0 = new byte[0];
      short[] shortArray0 = new short[0];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel1.equals("");
      short[] shortArray1 = new short[0];
      Object object0 = new Object();
      defaultChannel1.equals(object0);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel3.equals(defaultChannel1);
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel3.equals(defaultChannel4);
      defaultChannel3.equals("");
      defaultChannel0.equals("");
      defaultChannel3.equals(defaultChannel0);
      defaultChannel3.equals(defaultChannel1);
      Object object1 = new Object();
      defaultChannel3.equals(object1);
      DefaultChannel defaultChannel5 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel1, defaultChannel1, defaultChannel5, defaultChannel1);
      defaultChannel5.equals(defaultChannelGroup0);
      Object object2 = new Object();
      defaultChannel5.equals(defaultChannel2);
      defaultChannel5.equals(object2);
      Object object3 = new Object();
      defaultChannel5.equals(defaultChannel0);
      defaultChannel1.equals(object3);
      DefaultChannel defaultChannel6 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannel defaultChannel7 = new DefaultChannel(byteArray0, shortArray1);
      defaultChannel0.equals(object3);
      DefaultChannelGroup defaultChannelGroup1 = new DefaultChannelGroup(defaultChannel7, defaultChannel7, defaultChannel6, defaultChannel1);
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      PhdBuilder phdBuilder1 = phdBuilder0.readTags(linkedList0);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("e(&#", nucleotideSequence0, qualitySequence0);
      byte[] byteArray0 = new byte[1];
      short[] shortArray0 = new short[0];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel0.equals("e(&#");
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      short[] shortArray1 = new short[0];
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel3.equals(defaultChannel1);
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel3.equals("e(&#");
      defaultChannel3.equals(defaultChannel0);
      defaultChannel0.equals((Object) null);
      Object object0 = new Object();
      defaultChannel3.equals(defaultChannel1);
      defaultChannel3.equals(defaultChannel1);
      DefaultChannel defaultChannel5 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel1, defaultChannel1, defaultChannel5, defaultChannel1);
      defaultChannel1.equals((Object) null);
      Object object1 = new Object();
      defaultChannel2.equals(defaultChannel0);
      defaultChannel3.equals(defaultChannel2);
      Object object2 = new Object();
      defaultChannel5.equals(defaultChannel0);
      DefaultChannel defaultChannel6 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannel defaultChannel7 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel3.equals(defaultChannel5);
      DefaultChannelGroup defaultChannelGroup1 = new DefaultChannelGroup(defaultChannel4, defaultChannel0, defaultChannel0, defaultChannel6);
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-i$Oj`;", nucleotideSequence0, qualitySequence0);
      phdBuilder0.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("-i$Oj`;", "sequence and qualities have unequal lengths");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap4.replace("ORDINAL_VALUES", "-i$Oj`;", "_bE0+uir`D");
      hashMap0.putIfAbsent("", "");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap2.keySet();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      ZoneId.getAvailableZoneIds();
      hashMap8.put("sequence and qualities have unequal lengths", "");
      hashMap8.put("# !SU5(", "sequence and qualities have unequal lengths");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      hashMap7.put("=@gjMI", "");
      hashMap5.put("sequence and qualities have unequal lengths", "");
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      hashMap12.put((String) null, "");
      String string0 = hashMap12.put("9o", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-i$Oj`;", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks();
      phdBuilder0.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.replace("0LVLG", "", (String) null);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("", "-i$Oj`;");
      hashMap2.put("", (String) null);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap0.keySet();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap0.keySet();
      hashMap1.put("su?M!@C+E#jI*0|", "HMy>\"iEaf6;su\"=6`8.");
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap9.put((String) null, "");
      System.setCurrentTimeMillis(233L);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-i$Oj`;", nucleotideSequence0, qualitySequence0);
      phdBuilder0.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("-i$Oj`;", "sequnce andqualities have unequal lengths");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap4.replace("ORDINAL_VALUES", "-i$Oj`;", "_bE0+uir`D");
      hashMap0.putIfAbsent("", "");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap2.keySet();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      ZoneId.getAvailableZoneIds();
      hashMap8.put("sequnce andqualities have unequal lengths", "");
      hashMap8.put("# !SU5(", "sequence and qualities have unequal lengths");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      hashMap7.put("=@gjMI", "");
      hashMap5.put("sequence and qualities have unequal lengths", "");
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      hashMap12.put((String) null, "D");
      String string0 = hashMap12.put("9o", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PositionSequence positionSequence0 = null;
      DefaultPhd defaultPhd0 = new DefaultPhd("<JWw0L:(EWV{^\"?n$s", nucleotideSequence0, qualitySequence0, (PositionSequence) null);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      phdBuilder0.fakePeaks();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel(qualitySequence1, (PositionSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // positions can not be null
         //
         verifyException("org.jcvi.jillion.internal.trace.chromat.DefaultChannel", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis(152L);
      String string0 = "";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      int int0 = (-3050);
      ArtificialPhd artificialPhd0 = new ArtificialPhd("", nucleotideSequence0, (QualitySequence) null, (-3050));
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, nucleotideSequence0, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.putIfAbsent("-i$Oj`;", "");
      hashMap0.put("A-_?", "can not start before reference: ");
      hashMap0.replace("qualities can not be null", "", (String) null);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put((String) null, "h");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.keySet();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap1.put((String) null, "-i$Oj`;");
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap0.put("?*D_\"|,C", "-i$Oj`;");
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap7.put((String) null, "-i$Oj`;");
      System.setCurrentTimeMillis((-1L));
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("7z`+,", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-i$Oj`;", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("-i$Oj`;", "-i$Oj`;");
      hashMap0.put("peak spacing must be >0", (String) null);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap0.replace("~~LP!NW7'{\"u2t(|Z1k", "<V0f4X1\"XsW N*Y", "<V0f4X1\"XsW N*Y");
      hashMap2.putIfAbsent("RreWxlhM ;&potVXY", "unable to mkdir for ");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      hashMap4.keySet();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      ZoneId.getAvailableZoneIds();
      hashMap2.put((String) null, "");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      hashMap11.put((String) null, "");
      hashMap11.put("<V0f4X1\"XsW N*Y", "SHK19n|X");
      hashMap10.put("", "RreWxlhM ;&potVXY");
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-461), 200);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-i$Oj`;", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.keySet();
      hashMap0.put("-1.<6>Z8J(zd1I`6>S", "}.j1hYp'eb$cK");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap4.put("-1.<6>Z8J(zd1I`6>S", (String) null);
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      hashMap0.replace("first peak position must be >0", "&#jJ[9FhL#%J.^D?", "}.j1hYp'eb$cK");
      hashMap2.putIfAbsent("}.j1hYp'eb$cK", "");
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap2.keySet();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      ZoneId.getAvailableZoneIds();
      hashMap3.put("", "peaks and qualities have unequal lengths");
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      hashMap4.put((String) null, "ZiLC:%yuX1kP'KxcI6");
      System.setCurrentTimeMillis((-877L));
      System.setCurrentTimeMillis((-57L));
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks(4201, 4201);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-i$Oj`;", nucleotideSequence0, qualitySequence0);
      phdBuilder0.copy();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      System.setCurrentTimeMillis(4584L);
      System.setCurrentTimeMillis((byte) (-127));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1753L));
      System.setCurrentTimeMillis((-2616L));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-25L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(255L);
      long long0 = (-577L);
      System.setCurrentTimeMillis((-577L));
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("i+0C7[Rd", (NucleotideSequence) null, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }
}
