/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 11:15:00 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.738349834105354
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 1146L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add((Range) null);
      Range range1 = Range.of(1146L);
      linkedList0.add(range0);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        range1.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5816650572671307
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 4574L;
      Range range0 = Range.of(range_CoordinateSystem0, 4574L, 4574L);
      Range range1 = Range.of(4574L, 4574L);
      range1.equals(range0);
      range1.split(4574L);
      range0.intersects(range1);
      range0.getBegin(range_CoordinateSystem0);
      range0.intersects(range1);
      range0.spliterator();
      range0.split(4574L);
      range0.split(4574L);
      range1.split(4574L);
      long long1 = 255L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(4574L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.828018862658838
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      List<Range> list0 = range0.split(243L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.contains(range0));
      
      Range range1 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range.Comparators.values();
      range1.iterator();
      range1.complement(range0);
      //  // Unstable assertion: assertSame(range1, range0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.579681940848052
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object0);
      Range.of((-3784L));
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals((Object) null);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.539944447652212
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 4294967320L;
      Range range0 = Range.ofLength(4294967320L);
      long long1 = 481L;
      range0.split(4294967320L);
      Long long2 = new Long((-1L));
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-1201L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.980589631327044
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range1 = Range.of((-9223372036854775808L));
      Range range2 = Range.of((-4294967320L));
      linkedList0.add(range2);
      range0.endsBefore(range2);
      range1.complementFrom(linkedList0);
      String string0 = "u<_wCFL";
      // Undeclared exception!
      try { 
        Range.parseRange("u<_wCFL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse u<_wCFL into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6460239543173136
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = (-13L);
      Range.of((-13L), (-13L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-13L), (-13L));
      long long1 = (-2275L);
      range_Builder1.expandBegin((-2275L));
      range_Builder0.shift((-2274L));
      Range.of((-2274L));
      Range range0 = Range.of((-2274L));
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.41901450290512
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.getEnd();
      Range.of(4294965627L, 4294965627L);
      Object object0 = new Object();
      Range range1 = Range.of(4294967295L, 4294967295L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range1.equals(range0);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.41901450290512
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(2147483671L);
      range0.getEnd();
      Range.of(4294965627L, 4294965627L);
      Object object0 = new Object();
      Range range1 = Range.of(4294967295L, 4294967295L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range1.equals(range0);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.9516140493130463
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 481L, 481L);
      Range range1 = Range.of(481L);
      range0.equals(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Long.min(131L, 4294967320L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem2, (-128L), 1317L);
      Range range2 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem3, (-1336L), 153L);
      range1.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem4, 4294967320L, 9223372036854775327L);
      Range.of((-128L));
      range0.intersection(range2);
      Object object2 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.531489165433431
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(4294967295L);
      Long.getLong("SPACE_BASED", long1);
      range0.getLength();
      Range range1 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range1.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(10028L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertNotSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.723440308062859
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Long long0 = new Long(2244L);
      Long long1 = new Long(2244L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2244L, 2244L);
      Range range1 = Range.of(2244L);
      range0.complement(range1);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(2244L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=4.298147171377874
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2275L), 36L);
      List<Range> list0 = range0.split(224L);
      range1.complementFrom(list0);
      range1.complement(range1);
      Range range2 = Range.of(4623L);
      Range range3 = Range.of((-2275L), (-2275L));
      List<Range> list1 = range1.complement(range2);
      range2.complementFrom(list1);
      Range range4 = Range.of(32767L);
      range0.isSubRangeOf(range4);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.startsBefore(range3);
      range3.split(32767L);
      Range range5 = range3.intersection(range4);
      range5.complement(range3);
      range2.endsBefore(range3);
      Range range6 = Range.of(36L);
      range4.toString(range_CoordinateSystem1);
      List<Range> list2 = range2.split(32767L);
      range3.complementFrom(list2);
      range6.endsBefore(range2);
      Range.of((-128L));
      range5.intersects(range6);
      Range range7 = range1.asRange();
      range7.equals(range3);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.9822981257135437
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Long long0 = new Long(2244L);
      Long long1 = new Long(2244L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Long long2 = new Long((-3812L));
      Long.getLong("ey>bifF`]<", long2);
      Long long3 = new Long((-3812L));
      Range range0 = Range.of((-6321L));
      Range range1 = Range.of((-6321L), 1L);
      range0.equals(range1);
      Range range2 = Range.of(20L, 9223372034707292160L);
      Long.min(4294967322L, (-1776L));
      range2.complement(range1);
      Long.min((-3812L), 2147484795L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder4 = new Range.Builder(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range1.intersection(range0);
      range_Builder2.build();
      Range.Builder range_Builder5 = new Range.Builder();
      Range.Builder range_Builder6 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder7 = range_Builder2.copy();
      range_Builder2.copy();
      range_Builder7.copy();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=4.087251823654774
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 481L, 481L);
      Range range1 = Range.of(481L);
      range0.equals(range1);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Long.min(481L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem2, (-2147473666L), 4294967295L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem4, 131L, 153L);
      range1.complement(range0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem5 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem5, 2831L, 9223372036854775327L);
      Range.of(1L);
      Range range3 = Range.of(range_CoordinateSystem3, (-1336L), 153L);
      Range range4 = range3.intersection(range2);
      Range.Comparators.values();
      Range range5 = range_Builder1.build();
      assertFalse(range5.equals((Object)range4));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.8665254369149173
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Range range1 = Range.of((-2217L), 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals((Object) null);
      Range range2 = range0.intersection(range1);
      Object object4 = new Object();
      Object object5 = new Object();
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 4294965627L);
      range_Builder0.copy();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7640030423937705
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 1468L);
      Range range1 = Range.ofLength(127L);
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.split((-3697L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.889943182180903
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-353L), 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = range_Builder0.shift((-353L));
      range_Builder0.expandBegin((-353L));
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, 83L, 2355L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range1.getEnd(range_CoordinateSystem0);
      range0.split(83L);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      range0.asRange();
      range1.getLength();
      Range range2 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range2.toString(range_CoordinateSystem2);
      range_Builder2.build();
      Range.Comparators.valueOf(string0);
      long long0 = (-4587L);
      Range.of(long0);
      long long1 = 0L;
      Range.of(long0, long1);
      long long2 = (-3110L);
      Range.of(long2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4812779459286247
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Range range0 = range_Builder1.build();
      long long0 = 234L;
      Long long1 = new Long(234L);
      Long.min(234L, (-2308L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5573969191982906
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = range_Builder4.copy();
      range_Builder5.copy();
      Range range2 = Range.of((-1L), 127L);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.218148288459608
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4294967295L);
      Long long0 = new Long(4294967295L);
      Long.getLong("", long0);
      range0.getLength();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long.min((-749L), 4294967295L);
      Long long1 = new Long(4294967295L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals((Object) null);
      Range.Builder range_Builder1 = new Range.Builder();
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.865853872842929
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(9223372036854775807L);
      Long.getLong((String) null, long0);
      range1.getLength();
      Range.of(255L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 2040L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 2040L, 2040L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, 255L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range2.split(9223372036854775807L);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 255, -9223372036854775555 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.7762291158089956
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long0 = new Long((-1891L));
      Long.getLong("BZ-;g-G}er", long0);
      Long long1 = new Long((-1891L));
      range0.equals((Object) null);
      Range range1 = Range.of(2453L, 2453L);
      Long.min(2147483647L, (-321L));
      Long.min(56L, (-128L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range0.intersection(range1);
      range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder5 = range_Builder4.copy();
      range_Builder4.copy();
      range_Builder5.copy();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.760504489713795
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      List<Range> list0 = range0.split(243L);
      range0.complementFrom(list0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.894542004415883
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4294967320L);
      Long long0 = new Long((-4982L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Long long1 = new Long((-6321L));
      Long.getLong("5aGh/-2|'7<eW/(-", long1);
      Long long2 = new Long(4294967320L);
      range0.equals(long0);
      Range range1 = Range.of(2453L, 9223372036854775807L);
      Long.min((-4982L), (-4982L));
      Long.min(2453L, 2453L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range range2 = range1.intersection(range0);
      range_Builder0.build();
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      range_Builder3.copy();
      range_Builder1.copy();
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range2.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.848588730575608
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 4294967320L;
      Range range0 = Range.ofLength(4294967320L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 481L;
      Range range1 = Range.of(range_CoordinateSystem0, 481L, 4294967320L);
      range0.complement(range1);
      Long long2 = new Long((-1L));
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-1201L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.48309177138793
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.getEnd();
      Range.of(4294965627L, 4294965627L);
      Object object0 = new Object();
      Range.of(4294967295L, 4294967295L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals((Object) null);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.8660884843132566
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4294967320L);
      Long long0 = new Long((-4982L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Long long1 = new Long((-6321L));
      Long.getLong("5aGh/-2|'7<eW/(-", long1);
      Long long2 = new Long(4294967320L);
      range0.equals(long0);
      Range range1 = Range.of(2453L, 9223372036854775807L);
      Long.min((-4982L), (-4982L));
      Long.min(2453L, 2453L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertFalse(range2.equals((Object)range1));
      
      range_Builder0.build();
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder4.shift(2147483647L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      range_Builder3.copy();
      range_Builder1.copy();
      Range.Builder range_Builder6 = range_Builder2.copy();
      Range range3 = range_Builder6.build();
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=4.153260376219324
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4294967295L);
      Long long0 = new Long(4294967295L);
      Long.getLong("", long0);
      range0.getLength();
      long long1 = (-2485L);
      Range range1 = Range.of((-2485L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      List<Range> list0 = range0.split(2147483167L);
      range1.complementFrom(list0);
      Range.CoordinateSystem.values();
      long long2 = 941L;
      Range.ofLength(941L);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("X&],ncb<Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.X&],ncb<Q
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.841071236947991
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(range0);
      Range range1 = Range.of(range_CoordinateSystem0, 243L, 243L);
      Range.Builder range_Builder0 = new Range.Builder(243L, 243L);
      Range range2 = range_Builder0.build();
      Range range3 = range0.intersection(range1);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range2.equals(object2);
      range3.complement(range1);
      Range.Comparators.values();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.0349329828228795
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = 4623L;
      Range range0 = Range.ofLength(4623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2275L), 36L);
      Object object0 = new Object();
      Range range2 = range0.intersection(range1);
      Range range3 = range1.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList0.add(range0);
      linkedList0.add(range1);
      range2.endsBefore(range3);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.of(1L, (-1655L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.594096700533368
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-13L), (-13L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-13L));
      range_Builder1.expandBegin((-2275L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 232L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.8937986176943666
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-1L), 0L);
      range0.spliterator();
      Range range1 = range0.intersection(range0);
      Range range2 = range0.asRange();
      range1.endsBefore(range2);
      Range range3 = Range.of((-1L), 1L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range2.intersects(range1);
      boolean boolean1 = range0.equals(range3);
      assertFalse(boolean1 == boolean0);
      
      Range.Comparators.values();
      List<Range> list0 = range1.complement(range2);
      assertSame(range2, range1);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.105680784697107
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-1L), 0L);
      range0.spliterator();
      Range range1 = range0.intersection(range0);
      Range range2 = range0.asRange();
      range1.endsBefore(range2);
      Range range3 = Range.of((-1L), (-1L));
      range2.startsBefore(range0);
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range3);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Object object1 = new Object();
      boolean boolean1 = range2.intersects(range1);
      //  // Unstable assertion: assertTrue(boolean1);
      
      range0.equals(range3);
      Range.Builder range_Builder0 = new Range.Builder(range3);
      Long.min(324L, 324L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range4 = Range.of(0L, 324L);
      List<Range> list0 = range4.complement(range1);
      range2.complementFrom(list0);
      Range.Builder range_Builder3 = new Range.Builder(range3);
      Range range5 = range1.intersection(range2);
      Range range6 = range_Builder1.build();
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(range_Builder0);
      range_Builder2.expandBegin(0L);
      Range.Builder range_Builder6 = range_Builder2.copy();
      Range.Builder range_Builder7 = new Range.Builder(range_Builder6);
      range_Builder2.copy();
      range_Builder2.copy();
      Range.Comparators.values();
      range6.intersection(range1);
      Range range7 = range_Builder1.build();
      range7.intersection(range5);
      //  // Unstable assertion: assertNotSame(range5, range2);
      //  // Unstable assertion: assertTrue(range0.equals((Object)range1));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.501309132026187
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2957L, 243L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.771060034297992
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(range0);
      Range range2 = Range.of(range_CoordinateSystem0, 243L, 243L);
      Range.Builder range_Builder0 = new Range.Builder(243L, 243L);
      range_Builder0.build();
      range1.intersection(range2);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.878464393796419
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2275L), 36L);
      range0.complement(range0);
      Range range1 = Range.of((-2275L), (-2275L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      range1.complementFrom(linkedList0);
      Range range2 = Range.of((-399L), 623L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      range0.intersection(range2);
      range_Builder0.expandBegin((-2275L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.107878527151834
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.ofLength(4294967320L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4176L), (-4176L));
      Range range1 = Range.of(4294967320L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range2 = Range.of(4366L);
      linkedList0.add(range0);
      range2.endsBefore(range1);
      range2.complementFrom(linkedList0);
      Range range3 = range0.intersection(range2);
      Range.CoordinateSystem.values();
      long long0 = (-1797L);
      Range range4 = Range.of((-1797L));
      range1.intersects(range3);
      range4.isSubRangeOf(range1);
      range2.intersection(range3);
      long long1 = 3283L;
      // Undeclared exception!
      try { 
        Range.of(596L, (-2222L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.3496747609802844
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      Range range1 = Range.of(36L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of(36L, (-653L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.9294726782090437
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4294967320L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 481L, 4294967320L);
      range0.complement(range1);
      range1.equals((Object) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = 2930L;
      Range.of(459L, 2930L);
      Long.min(481L, 501L);
      Long.min(4294967320L, 1130L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.9205636201318432
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      List<Range> list0 = range1.complement(range0);
      long long0 = 32767L;
      long long1 = 1990L;
      Range range2 = Range.of(1990L);
      range0.complement(range2);
      range1.complementFrom(list0);
      Range.of(1185L);
      range0.isSubRangeOf(range2);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(6899L, 243L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3961615429663747
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1681L, 1681L);
      Range range0 = Range.of(range_CoordinateSystem0, 1681L, (-9223372036854775808L));
      range0.equals(range0);
      String string0 = "S{3[x:v^_";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("g-xZ^4n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.g-xZ^4n
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.8193550393679203
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 4294965627L;
      Range range0 = Range.of(4294965627L, 4294965627L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, 119747L, 9223372036854775807L);
      range0.complement(range1);
      long long1 = 2004L;
      Range.of(2004L);
      Range.of(2004L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2004L, 1185L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.754459943196873
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = 245L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(245L);
      Range range1 = Range.of(245L, 245L);
      range0.complement(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long1 = 9223372032559808488L;
      Range.of(9223372032559808488L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long2 = (-1L);
      long long3 = 9223372036854775807L;
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775807L, (-2275L));
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2275 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.662203496524129
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1681L;
      Range.of(range_CoordinateSystem0, 1681L, 1681L);
      long long1 = (-9223372036854775808L);
      Range range0 = Range.of(range_CoordinateSystem0, 1681L, (-9223372036854775808L));
      Object object0 = new Object();
      Range range1 = Range.of((-2192L), 81L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("numb#r of entries must be <=nInteger.=AX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.numb#r of entries must be <=nInteger.=AX_VALUE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.8130513511993747
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range1.equals(object2);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Comparators.values();
      range_CoordinateSystem0.getAbbreviatedName();
      range0.iterator();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=4.066996105774083
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-1L), 0L);
      range0.spliterator();
      Range range1 = range0.intersection(range0);
      Range range2 = range0.asRange();
      boolean boolean0 = range1.endsBefore(range2);
      Object object0 = new Object();
      boolean boolean1 = range0.isSubRangeOf(range2);
      //  // Unstable assertion: assertTrue(boolean1);
      
      Object object1 = new Object();
      range2.intersects(range1);
      boolean boolean2 = range0.equals(range0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Long.min((-1L), (-1L));
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range3 = Range.of(0L, 0L);
      List<Range> list0 = range3.complement(range1);
      List<Range> list1 = range2.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.contains(range3));
      
      Range.Builder range_Builder3 = new Range.Builder(range1);
      range1.intersection(range2);
      Range range4 = range_Builder1.build();
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder6 = range_Builder1.copy();
      Range.Builder range_Builder7 = new Range.Builder(range_Builder5);
      range_Builder6.copy();
      range_Builder0.copy();
      Range.Comparators.values();
      range3.intersection(range4);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.7730472764992884
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1681L;
      Range.of(range_CoordinateSystem0, 1681L, 1681L);
      Range.of(range_CoordinateSystem0, 1681L, (-9223372036854775808L));
      Object object0 = new Object();
      Range.of((-2192L), 81L);
      Range.of((-2192L));
      // Undeclared exception!
      try { 
        Range.ofLength((-1394L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.6420207825101873
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of((-1712L));
      Range.of((-128L));
      Range range0 = Range.of((-5251L), (-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals((Object) null);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.7512619951182504
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-5412L));
      Long.min((-1386L), 127L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.288140181544074
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      range0.intersection(range0);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=4.033746810854633
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Long long0 = new Long((-6321L));
      range_Builder0.copy();
      Long long1 = new Long(1L);
      Long long2 = new Long((-6321L));
      range0.equals(long2);
      Range.CoordinateSystem.values();
      Range range1 = Range.of(1L);
      range0.intersects(range1);
      Range range2 = Range.of(1L);
      range0.isSubRangeOf(range2);
      Range range3 = range2.intersection(range1);
      Range range4 = Range.of(1L, 0L);
      range0.complement(range4);
      range1.intersection(range4);
      range0.intersection(range4);
      Range.of((-128L));
      // Undeclared exception!
      try { 
        range3.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=4.112999643506596
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 245L, 245L);
      Range range0 = Range.ofLength(245L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(245L, 245L);
      List<Range> list0 = range0.complement(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.equals(range0);
      range1.forEach(consumer0);
      range0.complementFrom(list0);
      range0.split(245L);
      range0.startsBefore(range1);
      range1.getEnd(range_CoordinateSystem1);
      range0.isSubRangeOf(range1);
      range0.getEnd(range_CoordinateSystem1);
      range0.getEnd(range_CoordinateSystem0);
      range1.spliterator();
      Range range2 = range_Builder0.build();
      range1.complementFrom(list0);
      Range range3 = range_Builder0.build();
      Range.Comparators.values();
      range2.isEmpty();
      range0.split(244L);
      Range range4 = range1.intersection(range0);
      range1.complement(range2);
      range2.endsBefore(range4);
      Range.ofLength(9223372036854743041L);
      range1.endsBefore(range3);
      // Undeclared exception!
      try { 
        range4.split((-1412L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.8621592847852257
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-13L), (-13L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-13L));
      range_Builder1.expandBegin((-2275L));
      range_Builder0.shift((-2274L));
      Range range1 = Range.of((-2274L), (-2275L));
      Range.of((-2274L));
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.of((-2147483648L));
      range0.complementFrom(linkedList0);
      range1.equals(linkedList1);
      Range.of((-2275L), (-486L));
      long long0 = (-527L);
      Long.min((-527L), (-13L));
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-527L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.0901672022308966
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.ofLength(4461L);
      Range.ofLength(4461L);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("OO&(_U5Tfyn:2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.OO&(_U5Tfyn:2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=4.167195564580942
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 2147483647L;
      range_Builder0.expandBegin(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.shift((-3095L));
      Range range0 = Range.ofLength(2147483647L);
      range0.toString();
      List<Range> list0 = range0.split(2147483647L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3095L), 9223372034707292161L);
      Object object0 = new Object();
      range1.equals(range_Builder1);
      Range.parseRange("[ 0 .. 2147483646 ]/0B");
      range0.complement(range1);
      // Undeclared exception!
      try { 
        range1.split(9223372034707292161L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4294970391 would make range [9223372034707289065 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=4.058619220484219
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.ofLength(4294967295L);
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-4176L), 4294967295L);
      Range range2 = Range.of((-128L));
      Range range3 = Range.of(32766L);
      range0.endsBefore(range3);
      Range range4 = range0.intersection(range2);
      Range.CoordinateSystem.values();
      range1.intersects(range0);
      range4.intersects(range3);
      range2.isSubRangeOf(range3);
      range0.intersection(range4);
      long long0 = 1728L;
      long long1 = (-1L);
      // Undeclared exception!
      try { 
        Range.of(1728L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.8776887411885355
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of((-13L), (-13L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-2274L));
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.of((-2147483648L));
      range0.complementFrom(linkedList0);
      Range range2 = Range.of(9223372036854775807L);
      range1.isSubRangeOf(range0);
      range0.isEmpty();
      range2.split(9223372036854775807L);
      // Undeclared exception!
      try { 
        range2.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -13 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=4.326113914547699
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2275L), 36L);
      Object object0 = new Object();
      List<Range> list0 = range0.split(243L);
      range1.complementFrom(list0);
      range1.complement(range1);
      Range range2 = Range.of(4623L);
      Range range3 = Range.of(32767L);
      List<Range> list1 = range1.complement(range2);
      range2.complementFrom(list1);
      Range range4 = Range.of(32767L);
      range0.isSubRangeOf(range4);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.split(32767L);
      Range range5 = range3.intersection(range4);
      range5.complement(range3);
      range2.endsBefore(range3);
      Range.of(36L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.6930862586819297
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder((-37390L), 1910L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Long long0 = new Long((-37390L));
      Long long1 = new Long(124L);
      Long.getLong("UTF-8", long1);
      Long long2 = new Long(124L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(2453L, 9223372036854775807L);
      Long.min(2453L, 9223372036854775807L);
      Long.min(2453L, (-1657L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      range0.intersection(range1);
      range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(65535L, 1910L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.5356154433232074
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(38988L);
      long long0 = (-6321L);
      Long long1 = new Long((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder((-6321L), 38988L);
      Long long2 = new Long((-6321L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("5aGh/-2|'7<eW/(-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 5aGh/-2|'7<eW/(- into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.8389890064695176
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Long long0 = new Long(2244L);
      Long long1 = new Long(2244L);
      Long.getLong("I76|0gKUyG5x", long1);
      Range range0 = Range.of(65535L);
      Long.min(2244L, 2244L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range range1 = Range.of((-128L), (-128L));
      Range range2 = range0.intersection(range1);
      Object object2 = new Object();
      range2.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(9223372036854736820L, (-3201L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=4.052879757148036
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-4176L), 4294967295L);
      Range range3 = Range.of((-128L));
      Range range4 = Range.of(32766L);
      range1.endsBefore(range4);
      range1.intersection(range3);
      Range.CoordinateSystem.values();
      range2.intersects(range1);
      range1.isSubRangeOf(range0);
      range3.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 239L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.57578709372303
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1681L;
      Range.of(range_CoordinateSystem0, 1681L, 1681L);
      Range range0 = Range.of(range_CoordinateSystem0, 1681L, 1681L);
      Range range1 = Range.of((-2192L), 82L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("numb#r of entries must be <=nInteger.=AX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.numb#r of entries must be <=nInteger.=AX_VALUE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.5562503445255986
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Long long0 = new Long(2244L);
      Long long1 = new Long(2244L);
      Long.getLong("I76|0gKUyG5x", long1);
      Range range0 = Range.of(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long2 = (-2147483648L);
      Range range1 = Range.of(65535L);
      range1.complementFrom(linkedList0);
      range0.equals(long1);
      long long3 = (-486L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-3132L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3132 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-1105L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-1105L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1105 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.538066222217316
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483640L, 2147483640L);
      Range.of(127L, 127L);
      long long0 = (-353L);
      // Undeclared exception!
      try { 
        Range.ofLength((-353L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.3680844525519404
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4294967295L);
      Long long0 = new Long(4294967295L);
      Long long1 = new Long(4294967295L);
      Long.getLong("SHORTEST_TO_LONGEST", long1);
      Long long2 = new Long(44L);
      Long long3 = new Long(4294967295L);
      range0.equals(long3);
      long long4 = 3245L;
      // Undeclared exception!
      try { 
        Range.of(3245L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.893353935328808
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      boolean boolean0 = range0.equals("QMNq4?x,_Yo>3~K");
      Range range1 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range range2 = range0.intersection(range1);
      boolean boolean1 = range2.endsBefore(range1);
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem.values();
      boolean boolean2 = range1.isSubRangeOf(range2);
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      Range range3 = Range.of((-1826L), 1345L);
      Range range4 = range1.intersection(range0);
      assertSame(range4, range0);
      
      Range range5 = Range.of(1345L);
      boolean boolean3 = range3.startsBefore(range5);
      assertFalse(range5.isEmpty());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=4.171360496474662
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2275L), 36L);
      long long0 = 224L;
      List<Range> list0 = range0.split(224L);
      range1.complementFrom(list0);
      range1.complement(range1);
      Range range2 = Range.of(4623L);
      Range.of((-2275L), (-2275L));
      List<Range> list1 = range1.complement(range2);
      range2.complementFrom(list1);
      Range.of(32767L);
      long long1 = (-399L);
      Range.of((-399L), 623L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2341L, (-573L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.8419477509615447
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Long long0 = new Long((-6321L));
      Range.Builder range_Builder3 = range_Builder0.copy();
      Long long1 = new Long(1L);
      Long long2 = new Long((-6321L));
      range0.equals(long2);
      Range range1 = Range.of(32767L, 2147483647L);
      Long.min(2147483647L, 2147483647L);
      Long.min((-1L), 2147483647L);
      range1.intersection(range0);
      range_Builder1.expandBegin(643L);
      range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder6 = new Range.Builder(1L);
      // Undeclared exception!
      try { 
        range_Builder6.contractBegin(9223372036854710273L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3742251429245567
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Long long0 = new Long((-3819L));
      Long long1 = new Long(127L);
      Long.getLong("X$F+XY@+n[s`#q,", long0);
      Long long2 = new Long((-2147483648L));
      Long long3 = new Long(3012L);
      Range range0 = Range.of(233L);
      range0.equals((Object) null);
      long long4 = (-904L);
      // Undeclared exception!
      try { 
        Range.of(0L, (-904L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.6218544908027246
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1681L;
      Range range0 = Range.of(range_CoordinateSystem0, 1681L, 1681L);
      long long1 = (-4982L);
      Long long2 = new Long((-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      Long long3 = new Long(2196L);
      Long long4 = new Long((-9223372036854775561L));
      Long.getLong("IOc!U{Fal#Q;9DV5T", long4);
      Long long5 = new Long((-4982L));
      Range range1 = Range.ofLength(1578L);
      range1.equals(long3);
      long long6 = 325L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 325L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=4.065070722367211
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(246L);
      Range range1 = Range.of(246L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 32766L;
      Range range2 = Range.of(range_CoordinateSystem0, (-4176L), 32766L);
      Range range3 = Range.of((-4176L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range4 = Range.of(246L);
      linkedList0.add(range4);
      range1.endsBefore(range2);
      range3.complementFrom(linkedList0);
      range0.intersection(range2);
      Range.CoordinateSystem.values();
      Range range5 = Range.of((-1797L));
      range1.intersects(range5);
      range0.isSubRangeOf(range5);
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        Range.of(3283L, 596L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.687638681994418
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1146L;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 1146L);
      long long1 = (-106L);
      Range range1 = Range.of((-106L));
      range1.isSubRangeOf(range0);
      long long2 = (-32768L);
      Range range2 = Range.of((-32768L), (-32768L));
      range2.startsBefore(range2);
      Range.CoordinateSystem.values();
      range0.isSubRangeOf(range2);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("number of entries must be <= Integer.MAX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.number of entries must be <= Integer.MAX_VALUE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=4.380153563792715
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2275L), 36L);
      List<Range> list0 = range0.split(224L);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(1, list1.size());
      assertEquals(21, list0.size());
      
      List<Range> list2 = range1.complement(range1);
      assertEquals(0, list2.size());
      
      Range range2 = Range.of(4623L);
      Range range3 = Range.of((-2275L), (-2275L));
      List<Range> list3 = range1.complement(range2);
      range2.complementFrom(list3);
      Range range4 = Range.of(32767L);
      range0.isSubRangeOf(range4);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.startsBefore(range3);
      range3.split(32767L);
      Range range5 = range3.intersection(range4);
      range5.complement(range3);
      range2.endsBefore(range3);
      Range range6 = Range.of(36L);
      String string0 = range4.toString(range_CoordinateSystem1);
      assertEquals("[ 32768 .. 32768 ]/RB", string0);
      
      List<Range> list4 = range2.split(32767L);
      range6.iterator();
      range3.complementFrom(list4);
      boolean boolean0 = range6.endsBefore(range2);
      assertTrue(boolean0);
      
      Range.of((-128L));
      range5.intersects(range6);
      assertTrue(range5.isEmpty());
      
      Range range7 = range1.asRange();
      range7.equals(range3);
      assertFalse(range3.equals((Object)range1));
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Comparators.values();
      Range range8 = Range.parseRange("[ 32768 .. 32768 ]/RB");
      assertFalse(range8.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.9445665538941768
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4294967320L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 481L;
      Range range1 = Range.of(range_CoordinateSystem0, 481L, 4294967320L);
      range0.complement(range1);
      range_Builder0.build();
      Long long1 = new Long((-1L));
      range_Builder0.shift(481L);
      range_Builder0.expandBegin(9223372036854775326L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-1201L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.375054067088315
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      range_Builder0.contractEnd(0L);
      long long0 = 234L;
      range_Builder0.expandEnd((-1800L));
      Long long1 = new Long(234L);
      long long2 = (-2308L);
      range_Builder0.shift((-2308L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.640659101552445
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 481L, 481L);
      range0.equals(range0);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Long.min(481L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem2, (-2147473666L), 4294967295L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 153L;
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem4, 131L, 153L);
      long long1 = 2831L;
      // Undeclared exception!
      try { 
        Range.of(2831L, 131L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.6056850377323997
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Long long0 = new Long(2244L);
      Long.getLong("", (Long) null);
      Range.of(1736L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Long.min(1736L, 1736L);
      Long long1 = new Long(869L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Comparators.values();
      Range range1 = range_Builder1.build();
      //  // Unstable assertion: assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.4450152569392896
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      long long0 = range0.getEnd();
      assertEquals(2147483647L, long0);
      
      Object object0 = new Object();
      Range range1 = Range.of(2147483647L, 2147483647L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(range0);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean0 = range0.equals(object6);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.8555775563438535
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(4294965627L, 4294965627L);
      Object object0 = new Object();
      Object object1 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range1.equals(object5);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      range1.complement(range0);
      range0.intersection(range1);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.673684069176403
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5250L), (-5250L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      long long0 = 255L;
      Range.of(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(66L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.7714918095516348
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(1146L, 1146L);
      String string0 = "numb#x of entries must be <= Integer.MHX_VALUE";
      Range range1 = Range.of((-106L));
      range1.isSubRangeOf(range0);
      Range range2 = Range.of((-32768L), (-32768L));
      range1.endsBefore(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-3140L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.57210526273416
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(2244L, 2244L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(2244L);
      range0.intersects(range1);
      range0.isSubRangeOf(range0);
      Range range2 = Range.of(2244L, 2244L);
      range1.endsBefore(range2);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=4.366977754246685
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of((-2275L), 36L);
      Object object0 = new Object();
      List<Range> list0 = range0.split(243L);
      range1.complementFrom(list0);
      range1.complement(range1);
      Range range2 = Range.of(4623L);
      Range range3 = Range.of(32767L);
      List<Range> list1 = range1.complement(range2);
      range2.complementFrom(list1);
      Range range4 = Range.of(32767L);
      range0.isSubRangeOf(range4);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.isEmpty();
      range3.split(32767L);
      Range range5 = range3.intersection(range4);
      range5.complement(range3);
      range2.endsBefore(range3);
      Range range6 = Range.of(36L);
      range4.toString(range_CoordinateSystem1);
      Range.parseRange("[ 32768 .. 32768 ]/RB", range_CoordinateSystem0);
      range5.intersects(range6);
      Range range7 = range1.asRange();
      assertFalse(range7.equals((Object)range4));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.9592147641990585
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4294967320L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 481L;
      Range range1 = Range.of(range_CoordinateSystem0, 481L, 4294967320L);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-1615L);
      Range.of(range_CoordinateSystem1, (-1615L), (-1590L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=4.145762580436689
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1681L, 1681L);
      Range range1 = Range.of(range_CoordinateSystem0, 1681L, (-9223372036854775808L));
      Object object0 = new Object();
      Range range2 = Range.of((-2192L), 81L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range2.endsBefore(range1);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
      
      Range range3 = range0.intersection(range2);
      assertTrue(range3.isEmpty());
      
      Range.CoordinateSystem.values();
      Range range4 = Range.of(9975L);
      range1.intersects(range2);
      boolean boolean0 = range1.isSubRangeOf(range4);
      assertFalse(boolean0);
      
      Range range5 = range1.intersection(range0);
      Range.of((-2192L), 9975L);
      List<Range> list1 = range1.complement(range0);
      assertFalse(list1.equals((Object)list0));
      
      Range range6 = range1.intersection(range0);
      Range range7 = range5.intersection(range1);
      Range range8 = Range.of((-1L));
      assertFalse(range8.isEmpty());
      
      boolean boolean1 = range2.endsBefore(range5);
      assertTrue(boolean1);
      
      Range.of((-1335L));
      range1.startsBefore(range7);
      assertSame(range5, range6);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.7717699349862057
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1656L, 4294967307L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1656L);
      Long long0 = new Long((-1072L));
      range_Builder1.shift(4294967295L);
      Range.Builder range_Builder2 = range_Builder0.shift(4294967295L);
      range_Builder2.contractEnd((-3039L));
      range_Builder0.expandEnd((-128L));
      Long long1 = new Long((-1L));
      Range.of((-1L), (-1L));
      range_Builder2.expandBegin((-128L));
      Range.Builder range_Builder3 = new Range.Builder(4294967295L);
      Range.of(range_CoordinateSystem0, (-3039L), 1656L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("bitset can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.bitset can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.7071709923283307
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = 245L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(245L);
      Range range1 = Range.of(245L, 245L);
      range0.complement(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("^KT;W4~u@RD?ulB0R@U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.^KT;W4~u@RD?ulB0R@U
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.236113898595251
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.isEmpty();
      range0.intersection(range0);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.5420031921755073
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1317L, 1317L);
      Range range0 = range_Builder0.build();
      long long0 = (-573L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1317L, 2147483647L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 189L, (-269L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.5806012096066855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = (-13L);
      Range range0 = Range.of((-13L), (-13L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long1 = new Long((-6321L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Long long2 = new Long((-6321L));
      range_Builder1.shift((-3019L));
      Long long3 = new Long((-4982L));
      Long.getLong("!}=1nB<L", long3);
      Long long4 = new Long((-13L));
      range0.equals("!}=1nB<L");
      // Undeclared exception!
      try { 
        Range.of(255L, (-6321L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.6725630468542816
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.of(4294965627L, 4294965627L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-128L));
      Range.ofLength(4294965627L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.492382843786985
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      long long0 = 0L;
      Range range1 = Range.of(0L, 4294965627L);
      range0.intersects(range1);
      String string0 = "\\^T;W4~u@RD?lB0R@U";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("^T;W4~u@RD?lB0R@U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.^T;W4~u@RD?lB0R@U
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.77329988264066
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2275L), 36L);
      range0.split(4623L);
      Long long0 = new Long((-2275L));
      Long.getLong("5aGh/-2|'7<eW/(-", long0);
      Long long1 = new Long(36L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      Long.min(2453L, 2453L);
      Long.min(4294967295L, 36L);
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-1515L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.6934098337116787
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.spliterator();
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.intersection(range1);
      Range range2 = range0.asRange();
      range0.endsBefore(range2);
      // Undeclared exception!
      try { 
        Range.of(265L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.289603279784674
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-13L), (-13L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getEnd();
      Range.of((-13L), 1L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 2043L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.5832546208645075
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = 245L;
      Range.Builder range_Builder0 = new Range.Builder(245L);
      Range range0 = Range.ofLength(245L);
      Range range1 = Range.of(245L, 245L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.equals(range0);
      range0.forEach(consumer0);
      Object object0 = new Object();
      long long1 = 2453L;
      long long2 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 245L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.3077736496255974
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-1469L));
      List<Range> list0 = range0.split(686L);
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.2009388382289825
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2703L), (-2703L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.5286440843863107
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.of(4294965627L, 4294965627L);
      Range.of((-3257L), 4294965627L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.9480248206906197
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      range0.equals("QMNq4?x,_Yo>3~K");
      Range range1 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range range2 = range0.intersection(range1);
      boolean boolean0 = range2.endsBefore(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      range1.isSubRangeOf(range2);
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      Range.of((-1826L), 1345L);
      Range range3 = range1.intersection(range0);
      Range range4 = Range.of(65535L);
      range4.startsBefore(range1);
      range3.iterator();
      assertFalse(range3.isEmpty());
      assertSame(range3, range1);
      assertSame(range3, range0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.9394333178926115
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-1L), 0L);
      range0.spliterator();
      range0.getEnd();
      Range range1 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.endsBefore(range1);
      range1.complementFrom(linkedList0);
      Range range2 = range1.intersection(range0);
      range0.intersects(range0);
      range2.isSubRangeOf(range0);
      range2.intersection(range0);
      long long0 = 596L;
      // Undeclared exception!
      try { 
        Range.of(596L, 237L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.7732129871433546
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-1L), 0L);
      range0.spliterator();
      Range range1 = range0.intersection(range0);
      Range range2 = range0.asRange();
      range1.endsBefore(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Range range3 = Range.of((-1088L), 2994L);
      range3.endsBefore(range0);
      range3.endsBefore(range2);
      Range.CoordinateSystem.values();
      range3.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.324647836540123
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(4294965627L, 4294965627L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4294965628L, long0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.4272626239323625
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 4294967295L;
      Range.of(2244L, 4294967295L);
      long long1 = (-1233L);
      long long2 = (-1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=4.1634164638065565
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin(0L);
      range_Builder0.copy();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(265L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range_Builder0.expandBegin(0L);
      range0.complement(range0);
      Range.of(265L, 888L);
      Range range1 = Range.of((-3234L));
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range_CoordinateSystem0.toString();
      range1.equals("Residue Based");
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-3234L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.473260319839181
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-2147483652L), (-2147483652L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object0);
      Long.min(4560L, (-5964L));
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.736696827251106
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 1146L);
      String string0 = "numb#x of entries must be <= Integer.MHX_VALUE";
      Range range1 = Range.of((-106L));
      range1.isSubRangeOf(range0);
      Range range2 = Range.of((-32768L), (-32768L));
      range1.endsBefore(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-3140L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.8573074188671477
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(1705L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of((-2831L), (-1L));
      range2.endsBefore(range0);
      Range.ofLength(32767L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("numb#x of entries must be <= Integer.MHX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.numb#x of entries must be <= Integer.MHX_VALUE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=4.124136367813358
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-2147483648L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 1146L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range1 = Range.of(1146L);
      linkedList0.add(range0);
      range0.endsBefore(range1);
      range1.complementFrom(linkedList0);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem.values();
      Range range3 = Range.of((-76L));
      range1.intersects(range3);
      range1.isSubRangeOf(range2);
      range2.intersection(range3);
      long long1 = 239L;
      Range.of((-76L), 2147483647L);
      // Undeclared exception!
      try { 
        Range.of((-76L), (-3324L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=4.20970733513554
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 4294967320L;
      Range range0 = Range.ofLength(4294967320L);
      long long1 = 32766L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32766L, 32766L);
      Range range2 = Range.of((-2220L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.endsBefore(range1);
      range0.complementFrom(linkedList0);
      Range range3 = range1.intersection(range2);
      Range.CoordinateSystem.values();
      Range range4 = Range.of(9223372036854775617L);
      range4.intersects(range2);
      range0.isSubRangeOf(range3);
      range1.intersection(range0);
      long long2 = 3283L;
      Range range5 = Range.of((-2220L), 4294967320L);
      range4.complement(range5);
      // Undeclared exception!
      try { 
        range4.intersection(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2220 would make range [9223372036854775617 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.7912178824189966
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of((-1L), 0L);
      range0.spliterator();
      Range range1 = range0.intersection(range0);
      Range.of(0L, 0L);
      range0.intersection(range1);
      range1.endsBefore(range0);
      Range.CoordinateSystem.values();
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of((-1L), (-1826L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.7857997555907996
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      range0.equals("QMNq4?x,_Yo>3~K");
      Range range1 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range range2 = range0.intersection(range1);
      range2.endsBefore(range1);
      Range.CoordinateSystem.values();
      range1.isSubRangeOf(range2);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range range3 = Range.of((-1826L), 1345L);
      range1.intersection(range0);
      range3.equals(range0);
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=4.153673535685106
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2503L), 1146L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range1 = Range.of(1146L);
      linkedList0.add(range0);
      range0.endsBefore(range1);
      range1.complementFrom(linkedList0);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem.values();
      range0.isSubRangeOf(range2);
      range2.intersection(range0);
      Range range3 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, (-256L), 984L);
      range4.complement(range0);
      Range range5 = range3.intersection(range2);
      range5.intersection(range0);
      Range.of(1790L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.067648843266804
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder1.build();
      Object object0 = new Object();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.958614458198605
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Comparators.values();
      Range range1 = Range.of(1680L);
      range1.complement(range0);
      range0.intersection(range1);
      Range range2 = Range.of(243L, 243L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 32767L, 2034L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.8655528197027276
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Long long0 = new Long((-6321L));
      range_Builder0.copy();
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of((-971L), 4294967295L);
      Long.min(2147483647L, 9223372034707292161L);
      Long.min(2147483647L, 0L);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder5 = new Range.Builder(range0);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder(range_CoordinateSystem0, 65535L, (-6321L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.3045552631822366
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1741L), 228L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.526050523701461
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(191L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range_Builder0.copy();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.8944573431928102
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Long long0 = new Long(2244L);
      Long long1 = new Long(2244L);
      Range range0 = Range.of(65535L);
      Long.min(2244L, 2244L);
      Range range1 = Range.of((-2341L), 32767L);
      Long.min(2244L, 1L);
      Long.min(65535L, (-2341L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range1.intersection(range0);
      range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder2.copy();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.221202695425514
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Long long0 = new Long(2244L);
      Long long1 = new Long(2244L);
      Long.getLong("I76|0gKUyG5x", long1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range range0 = Range.of(255L);
      Range range1 = Range.of(255L);
      range1.intersection(range0);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=4.109327004353968
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2275L), 36L);
      List<Range> list0 = range0.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range1 = Range.of(36L);
      linkedList0.add(range1);
      range1.endsBefore(range0);
      List<Range> list1 = range1.complementFrom(list0);
      range1.complementFrom(list1);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem.values();
      Range range3 = Range.of((-2275L));
      range1.intersects(range3);
      range0.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.1786334995603744
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2816L, 2816L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.3420661016778452
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.of((-1L), 4459L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long((-2147483648L));
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.5357784144472673
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), 1146L);
      Range.of((-106L));
      Range.of((-865L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.550880272319648
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      long long0 = 234L;
      Long long1 = new Long(234L);
      Long.min(234L, (-2308L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("po{N$@YO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse po{N$@YO into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.8649947637691917
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = 36L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-2275L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2275L), 36L);
      range0.complement(range0);
      Range range1 = Range.of((-2275L), (-2275L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range2 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.3789175864086456
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(4294965627L, 4294965627L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, 4294967295L);
      range_Builder0.copy();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.370071500373355
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1146L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem1, 3620L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.395360901388643
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-2147483648L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 1146L);
      String string0 = "qx";
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.553472495649658
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      range_Builder1.build();
      Long long0 = new Long(234L);
      Long.min(234L, (-2308L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("po{N$@YO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse po{N$@YO into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.9968760220161785
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-13L), (-13L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-13L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range_Builder1.expandBegin((-2275L));
      long long0 = (-2274L);
      range_Builder0.shift((-2274L));
      Range.of((-2274L), (-2275L));
      Range.of((-2274L));
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.ofLength(932L);
      // Undeclared exception!
      try { 
        Range.of((-13L), (-1020L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.9985309973749548
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.ofLength(4294967295L);
      Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-4176L), 4294967295L);
      Range range0 = Range.of((-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(32766L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of((-106L), 32767L);
      range1.endsBefore(range2);
      Range.ofLength(65535L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.709562165727644
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = 245L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(245L);
      range0.getBegin();
      Range range1 = Range.of(245L, 245L);
      range0.complement(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.intersects(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("^KT;W4~u@RD?ulB0R@U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.^KT;W4~u@RD?ulB0R@U
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.245905362460896
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-3448L));
      // Undeclared exception!
      try { 
        range0.split((-3448L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.326895299571161
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.split(2147483647L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object3));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.535915651844651
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 4294967320L;
      Range.ofLength(4294967320L);
      Long long1 = new Long((-4982L));
      range_Builder0.copy();
      Long long2 = new Long((-6321L));
      Long.getLong("5aGh/-2|'7<eW/(-", long2);
      // Undeclared exception!
      try { 
        Range.of(4294967320L, (-4982L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=4.312916371212352
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2275L), 36L);
      List<Range> list0 = range0.split(224L);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      List<Range> list2 = range1.complement(range1);
      //  // Unstable assertion: assertFalse(list2.isEmpty());
      
      Range range2 = Range.of(4623L);
      Range range3 = Range.of((-2275L), (-2275L));
      List<Range> list3 = range1.complement(range2);
      range2.complementFrom(list3);
      Range range4 = Range.of(32767L);
      range0.isSubRangeOf(range4);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.startsBefore(range3);
      range3.split(32767L);
      Range range5 = range3.intersection(range4);
      range5.complement(range3);
      range2.endsBefore(range3);
      Range range6 = Range.of(36L);
      String string0 = range4.toString(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals("[ 32768 .. 32768 ]/RB", string0);
      
      List<Range> list4 = range2.split(32767L);
      List<Range> list5 = range3.complementFrom(list4);
      //  // Unstable assertion: assertTrue(list5.contains(range2));
      
      boolean boolean0 = range6.endsBefore(range2);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range.of((-128L));
      range5.intersects(range6);
      range1.asRange();
      Range.Builder range_Builder0 = new Range.Builder(range2);
      range_Builder0.copy();
      range_Builder0.copy();
      Range.Comparators.values();
      String string1 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 0 .. 4622 ]/0B", string1);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.7013718167464837
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.6745056774746474
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1656L, 4294967307L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1656L);
      Long long0 = new Long((-1072L));
      range_Builder1.shift(4294967295L);
      Range.Builder range_Builder2 = range_Builder0.shift(4294967295L);
      range_Builder0.expandEnd((-128L));
      Long long1 = new Long((-1L));
      Range.of((-1L), (-1L));
      range_Builder2.expandBegin((-128L));
      Range.Builder range_Builder3 = new Range.Builder(4294967295L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("bitset can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.bitset can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of(range_CoordinateSystem0, (-282L), (-282L));
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.3755268803270857
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(245L);
      Range.of(245L, 245L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.611777573924172
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Long long0 = new Long(89L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(9223372036854775553L);
      Range.Builder range_Builder1 = new Range.Builder(1485L);
      range_Builder0.contractBegin((-128L));
      range_Builder1.copy();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-1881L), (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.722293958292037
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(1185L);
      Range.of((-9223372036854775808L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(243L, 1185L);
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-9223372036854775808L), 243L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.0677597716741
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(255L);
      range_Builder0.expandBegin(0L);
      range_Builder0.build();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.301215416668689
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "Sl<NEgkT9XYL0>";
      Long long0 = new Long((-6344L));
      Long long1 = new Long(1L);
      Long.max(1L, (-6344L));
      Long.max(2326L, 2326L);
      Long.getLong("Sl<NEgkT9XYL0>", long1);
      Long long2 = new Long((-6344L));
      Long.min(2147483647L, 2147483647L);
      Range.of(2673L, 32767L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2147483647L, (-6344L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.2440381018682913
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      Range range1 = Range.of(36L);
      range1.intersection(range0);
      range1.getBegin();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$RangeIterator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$RangeIterator
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.347367941794885
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 1146L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("number of entries must be <= Integer.MAX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.number of entries must be <= Integer.MAX_VALUE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-2147483648L), 482L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Long.getLong("._jz/kT9T");
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }
}
