/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 13:16:49 GMT 2019
 */

package net.sourceforge.schemaspy.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import net.sourceforge.schemaspy.Config;
import net.sourceforge.schemaspy.model.ForeignKeyConstraint;
import net.sourceforge.schemaspy.model.Table;
import net.sourceforge.schemaspy.model.TableColumn;
import net.sourceforge.schemaspy.model.xml.SchemaMeta;
import net.sourceforge.schemaspy.model.xml.TableColumnMeta;
import net.sourceforge.schemaspy.view.DefaultSqlFormatter;
import net.sourceforge.schemaspy.view.SqlFormatter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForeignKeyConstraint_ESTest extends ForeignKeyConstraint_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2743681249427015
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 0, 0);
      foreignKeyConstraint0.isCascadeOnDelete();
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      assertTrue(boolean0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      foreignKeyConstraint0.getDeleteRuleAlias();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BQ>NIr");
      FileSystemHandling.shouldAllThrowIOExceptions();
      foreignKeyConstraint0.getDeleteRuleAlias();
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals(0, int0);
      
      foreignKeyConstraint0.getParentColumns();
      String string1 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Cascade on delete", string1);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6052468509647115
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "DESC", 3218, 0);
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cascade on delete:\n Deletion of parent deletes child");
      FileSystemHandling.shouldAllThrowIOExceptions();
      foreignKeyConstraint0.getDeleteRule();
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string1);
      assertEquals(3218, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5982538439717047
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "net.sourceforge.schemaspy.model.Database", 1066, 3);
      System.setCurrentTimeMillis(0L);
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleName();
      System.setCurrentTimeMillis(1066);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "X", 2, (-25));
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals((-25), int0);
      assertEquals(2, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 2, (-9));
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "`n&4!z\"", 96, 1846);
      int int0 = foreignKeyConstraint1.compareTo(foreignKeyConstraint0);
      assertEquals(96, foreignKeyConstraint1.getUpdateRule());
      assertEquals(1846, foreignKeyConstraint1.getDeleteRule());
      assertEquals(7, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1066);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "1#<J.d", 3, 3);
      foreignKeyConstraint0.getParentTable();
      assertEquals(3, foreignKeyConstraint0.getUpdateRule());
      assertEquals("R", foreignKeyConstraint0.getDeleteRuleAlias());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4118090007716961
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Null on delete:\n Foreign key to parent set to NULL when parent deleted", 981, (-14));
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint0);
      assertEquals(0, int0);
      
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "Cascade on delete:\n Deletion of parent deletes child", 621, (-148));
      int int1 = foreignKeyConstraint1.compareTo(foreignKeyConstraint0);
      assertEquals((-148), foreignKeyConstraint1.getDeleteRule());
      assertEquals((-11), int1);
      assertEquals(621, foreignKeyConstraint1.getUpdateRule());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2578501017122745
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 994, 1);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", 1, 1);
      int int0 = new Integer(1);
      foreignKeyConstraint0.getDeleteRuleAlias();
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals(994, foreignKeyConstraint0.getUpdateRule());
      assertEquals("R", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = ",\\s*";
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, ",s*", 1073, 0);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.setShortType(",s*");
      linkedList0.add(tableColumn0);
      ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      String string1 = "OZ]=VNsCY'JFd/";
      String string2 = "";
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, ">wRS@=", 2192, 2192);
      foreignKeyConstraint0.isNullOnDelete();
      Config config0 = new Config();
      ResourceBundle.Control resourceBundle_Control0 = null;
      String string0 = "/";
      String string1 = "";
      // Undeclared exception!
      try { 
        ResourceBundle.getBundle("", (ResourceBundle.Control) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      Config config0 = Config.getInstance();
      config0.setMeta("UTF-8");
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      // Undeclared exception!
      try { 
        ForeignKeyConstraint.toString((List<TableColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4636829326031657
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, ",@(*", 1073, 1073);
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getParentColumns();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", (-9), 0);
      foreignKeyConstraint1.getName();
      foreignKeyConstraint0.getParentColumns();
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      foreignKeyConstraint0.isRestrictDelete();
      boolean boolean1 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean1 == boolean0);
      
      foreignKeyConstraint0.getDeleteRuleName();
      System.setCurrentTimeMillis(0L);
      String string0 = foreignKeyConstraint1.getDeleteRuleDescription();
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string0);
      
      foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals(1073, foreignKeyConstraint0.getDeleteRule());
      
      foreignKeyConstraint1.getChildColumns();
      assertFalse(foreignKeyConstraint1.isRestrictDelete());
      assertEquals((-9), foreignKeyConstraint1.getUpdateRule());
      assertTrue(foreignKeyConstraint1.isCascadeOnDelete());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "B";
      int int0 = 2201;
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "B", 2201, (-17));
      foreignKeyConstraint0.isCascadeOnDelete();
      String string1 = "='VM]w^s|0";
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      ResourceBundle.Control resourceBundle_Control0 = ResourceBundle.Control.getNoFallbackControl(list0);
      Locale locale0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        resourceBundle_Control0.needsReload("B", (Locale) null, "FYcHxq2Ju0=L(t8$", classLoader1, (ResourceBundle) null, (-17));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$Control", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 981, 1);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", 641, 1);
      int int0 = new Integer(1);
      Config config0 = new Config();
      Config config1 = Config.getInstance();
      Config.getInstance();
      Config.setInstance(config1);
      foreignKeyConstraint1.isRestrictDelete();
      // Undeclared exception!
      try { 
        config1.asList();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Required parameter '-u' was not specified.
         //
         verifyException("net.sourceforge.schemaspy.Config", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5280883009539776
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ojGVzp^nl>z~+ ");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Z*yW?9uv-k;FJO", 1073, 3);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean0);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "view");
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals(1073, foreignKeyConstraint0.getUpdateRule());
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"V\"%Sbx1f");
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8298249359591239
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, ",s*", 1073, 2);
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      assertTrue(boolean0);
      
      boolean boolean1 = foreignKeyConstraint0.isRestrictDelete();
      assertFalse(boolean1);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w2J;.;M6z_1@j.");
      System.setCurrentTimeMillis(1073);
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("N", string0);
      assertEquals(1073, foreignKeyConstraint0.getUpdateRule());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, ",s*", 1073, 2);
      foreignKeyConstraint0.getDeleteRuleName();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, ">wRS@=", 620, 620);
      foreignKeyConstraint0.addParentColumn((TableColumn) null);
      Config config0 = Config.getInstance();
      DatabaseMetaData databaseMetaData0 = null;
      config0.setMeta("UTF-8");
      config0.setMeta("TIMEZONE_HOUR");
      DefaultSqlFormatter defaultSqlFormatter0 = (DefaultSqlFormatter)config0.getSqlFormatter();
      defaultSqlFormatter0.getKeywords((DatabaseMetaData) null);
      defaultSqlFormatter0.getKeywords((DatabaseMetaData) null);
      config0.setSqlFormatter((SqlFormatter) defaultSqlFormatter0);
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("_Q*,", ">wRS@=", "'. Must be one of: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"_Q*,\" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.setIsAutoUpdated(true);
      tableColumn0.setIsAutoUpdated(true);
      tableColumn0.unlinkParents();
      tableColumn0.removeParent((TableColumn) null);
      tableColumn0.setIsAutoUpdated(true);
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      tableColumn0.removeChild((TableColumn) null);
      tableColumn0.setType((String) null);
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn0.setShortType("?e@iyVM neg~_UZQ)J");
      tableColumn1.removeChild((TableColumn) null);
      tableColumn1.unlinkParents();
      tableColumn0.unlinkParents();
      tableColumn1.removeChild(tableColumn0);
      tableColumn0.setShortType((String) null);
      tableColumn1.setIsAutoUpdated(true);
      tableColumn0.unlinkChildren();
      tableColumn0.removeParent(tableColumn0);
      tableColumn0.setComments((String) null);
      tableColumn0.unlinkParents();
      tableColumn1.setComments("^,N~fE)9(=ey`q!B");
      tableColumn0.unlinkParents();
      tableColumn1.setShortType("^,N~fE)9(=ey`q!B");
      tableColumn0.setType((String) null);
      tableColumn1.setComments((String) null);
      tableColumn1.setType((String) null);
      tableColumn1.setShortType((String) null);
      tableColumn0.unlinkParents();
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint((TableColumn) null, tableColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "B", 2192, 2192);
      Config config0 = new Config();
      config0.getCharset();
      Config.getInstance();
      Config config1 = new Config();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      Config config2 = new Config();
      Config config3 = Config.getInstance();
      config3.setMeta("UTF-8");
      config0.setFont("UTF-8");
      foreignKeyConstraint0.getUpdateRule();
      // Undeclared exception!
      try { 
        config3.asList();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Required parameter '-u' was not specified.
         //
         verifyException("net.sourceforge.schemaspy.Config", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "fB~)rp!CL5q|", (-14), (-14));
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals((-14), foreignKeyConstraint0.getDeleteRule());
      assertEquals((-14), int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1073;
      int int1 = 2;
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, ",s*", 1073, 2);
      foreignKeyConstraint0.getDeleteRuleDescription();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("Null on delete:\n Foreign key to parent set to NULL when parent deleted", "o@", "Null on delete:\n Foreign key to parent set to NULL when parent deleted");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"Null on delete:
         //  Foreign key to parent set to NULL when parent deleted\" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "X", 46, 1);
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals(1, int0);
      assertEquals(46, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "_schema", 621, 621);
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(databaseMetaData0).getNumericFunctions();
      doReturn((String) null).when(databaseMetaData0).getSQLKeywords();
      doReturn((String) null).when(databaseMetaData0).getStringFunctions();
      doReturn((String) null).when(databaseMetaData0).getSystemFunctions();
      doReturn((String) null).when(databaseMetaData0).getTimeDateFunctions();
      defaultSqlFormatter0.getKeywords(databaseMetaData0);
      DatabaseMetaData databaseMetaData1 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      defaultSqlFormatter0.getKeywords((DatabaseMetaData) null);
      foreignKeyConstraint0.getChildTable();
      String string0 = "7RY^D\\u_*CTOVh4GB2";
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("gsXF", string0, "c; ZQ[E(bKI|paUG+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"gsXF\" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 981, 1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals(981, foreignKeyConstraint0.getUpdateRule());
      assertEquals("Restrict delete", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "gU= *:I~CnZVcmj89n", 981, 1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals(981, foreignKeyConstraint0.getUpdateRule());
      assertEquals("Restrict delete", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2629783068404796
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 1051, 1);
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleDescription();
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string0);
      assertEquals(1051, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.remove((Object) null);
      linkedList0.sort((Comparator<? super TableColumn>) null);
      String string0 = ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 994, 1);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", 641, 1);
      // Undeclared exception!
      try { 
        foreignKeyConstraint1.compareTo((ForeignKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "83BEHZ&pc", (-9), (-9));
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "83BEHZ&pc", (-9), (-9));
      // Undeclared exception!
      try { 
        foreignKeyConstraint1.compareTo(foreignKeyConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "B";
      int int0 = 2201;
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "B", 2201, (-17));
      foreignKeyConstraint0.isNullOnDelete();
      String string1 = "='VM]w^s|0";
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      ResourceBundle.Control resourceBundle_Control0 = ResourceBundle.Control.getNoFallbackControl(list0);
      Locale locale0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        resourceBundle_Control0.needsReload("B", (Locale) null, "FYcHxq2Ju0=L(t8$", classLoader1, (ResourceBundle) null, (-17));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$Control", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.setIsAutoUpdated(true);
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      tableColumn0.setIsAutoUpdated(true);
      tableColumn0.unlinkParents();
      tableColumn0.removeParent(tableColumn0);
      tableColumn0.setIsAutoUpdated(true);
      TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta2).getComments();
      doReturn((String) null).when(tableColumnMeta2).getDefaultValue();
      doReturn(0).when(tableColumnMeta2).getDigits();
      doReturn((String) null).when(tableColumnMeta2).getId();
      doReturn((String) null).when(tableColumnMeta2).getName();
      doReturn(0).when(tableColumnMeta2).getSize();
      doReturn((String) null).when(tableColumnMeta2).getType();
      doReturn(false).when(tableColumnMeta2).isAutoUpdated();
      doReturn(false).when(tableColumnMeta2).isNullable();
      tableColumn0.removeChild(tableColumn0);
      tableColumn0.setType((String) null);
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta2);
      tableColumn0.setShortType("e#\"ea nWghZQ]J");
      tableColumn1.removeChild(tableColumn0);
      tableColumn1.unlinkParents();
      tableColumn0.unlinkParents();
      tableColumn0.setShortType("FROM");
      tableColumn1.setIsAutoUpdated(true);
      tableColumn0.unlinkChildren();
      tableColumn0.unlinkParents();
      tableColumn0.removeParent(tableColumn0);
      tableColumn0.setComments((String) null);
      tableColumn0.unlinkParents();
      tableColumn1.setComments("");
      tableColumn0.unlinkParents();
      tableColumn1.setShortType("");
      tableColumn0.setType("R");
      tableColumn1.setComments((String) null);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn1, tableColumn0, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 0, 3);
      foreignKeyConstraint0.getName();
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
      assertTrue(foreignKeyConstraint0.isRestrictDelete());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "dq", 1220, (-14));
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.addChildColumn((TableColumn) null);
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5094580946436333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, ",@(6*", 1073, 1073);
      foreignKeyConstraint0.getName();
      foreignKeyConstraint0.getParentColumns();
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      boolean boolean1 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean1 == boolean0);
      
      foreignKeyConstraint0.getDeleteRuleName();
      System.setCurrentTimeMillis(0L);
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getChildColumns();
      assertEquals(1073, foreignKeyConstraint0.getDeleteRule());
      assertEquals(1073, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "B", 1, (-8));
      foreignKeyConstraint0.isImplied();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "B";
      stringArray0[1] = "B";
      stringArray0[2] = "B";
      stringArray0[3] = "B";
      stringArray0[4] = "B";
      stringArray0[5] = "n#iZ\"uym";
      stringArray0[6] = "B";
      stringArray0[7] = "B";
      Config config0 = new Config(stringArray0);
      Config config1 = new Config(stringArray0);
      config1.isLowQuality();
      Config config2 = new Config(stringArray0);
      config1.setPassword("B");
      Config config3 = new Config(stringArray0);
      Config config4 = new Config(stringArray0);
      Config config5 = new Config(stringArray0);
      Config config6 = new Config(stringArray0);
      Config config7 = new Config();
      Config.getInstance();
      // Undeclared exception!
      try { 
        config5.asList();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Required parameter '-u' was not specified.
         //
         verifyException("net.sourceforge.schemaspy.Config", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 994, 1);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", 641, 1);
      // Undeclared exception!
      try { 
        foreignKeyConstraint1.compareTo(foreignKeyConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "B";
      int int0 = (-17);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "B", 2201, (-17));
      foreignKeyConstraint0.isReal();
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      ResourceBundle.Control.getNoFallbackControl(list0);
      String string1 = null;
      Locale locale0 = Locale.PRC;
      String string2 = "I1YkU";
      ClassLoader.getSystemClassLoader();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-100));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.setIsAutoUpdated(true);
      tableColumn0.setIsAutoUpdated(true);
      tableColumn0.unlinkParents();
      tableColumn0.removeParent(tableColumn0);
      tableColumn0.setIsAutoUpdated(true);
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      tableColumn0.removeChild(tableColumn0);
      tableColumn0.setType((String) null);
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn0.setShortType("?eZi\"ea nWgjZQ)J");
      tableColumn0.removeChild((TableColumn) null);
      tableColumn1.unlinkParents();
      tableColumn0.unlinkParents();
      tableColumn1.removeChild(tableColumn0);
      tableColumn0.setShortType((String) null);
      tableColumn1.setIsAutoUpdated(true);
      tableColumn0.unlinkChildren();
      tableColumn0.removeParent(tableColumn0);
      tableColumn0.setComments((String) null);
      tableColumn0.unlinkParents();
      tableColumn1.setComments("D_86[*qmx>EA");
      tableColumn0.unlinkParents();
      tableColumn1.setShortType("D_86[*qmx>EA");
      tableColumn0.setType("R");
      tableColumn1.setComments((String) null);
      tableColumn1.setType("R");
      tableColumn1.setShortType("uuJK5#");
      tableColumn0.unlinkParents();
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn0, tableColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }
}
