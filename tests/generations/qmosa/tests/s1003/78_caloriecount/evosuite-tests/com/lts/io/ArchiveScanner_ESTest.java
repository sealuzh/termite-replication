/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 10:35:18 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Comparator;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" pVsJ%aBZ\\BjGieC/ pVsJ%aBZ\\BjGieC");
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\"<9eIn&{_DUx^<&-f");
      byteArray0[2] = (byte)83;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"<9eIn&{_DUx^<&-f";
      stringArray0[1] = "\"<9eIn&{_DUx^<&-f";
      stringArray0[2] = "\"<9eIn&{_DUx^<&-f";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"<9eIn&{_DUx^<&-f");
      stringArray0[3] = "\"<9eIn&{_DUx^<&-f";
      stringArray0[4] = "7Z:Kr%Uz";
      stringArray0[5] = "\"<9eIn&{_DUx^<&-f";
      stringArray0[6] = "\"<9eIn&{_DUx^<&-f";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[7] = "\"<9eIn&{_DUx^<&-f";
      stringArray0[8] = "\"<9eIn&{_DUx^<&-f";
      archiveScanner0.setIncludes(stringArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(" pVsJ%aBZ\\BjGieC");
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "\"<9eIn&{_DUx^<&-f");
      archiveScanner0.excludes = stringArray0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"<9eIn&{_DUx^<&-f");
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector0;
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "\"<9eIn&{_DUx^<&-f");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      archiveScanner0.processDirectory((File) null, "7Z:Kr%Uz", true);
      assertEquals(1, ArchiveScanner.DIRECTORY);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      ListIterator<Object> listIterator0 = vector0.listIterator();
      Vector<String> vector1 = new Vector<String>();
      vector1.removeAllElements();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector1.sort((Comparator<? super String>) null);
      vector1.sort((Comparator<? super String>) null);
      archiveScanner0.dirsNotIncluded = vector0;
      vector1.add("oeaSM9w:NJZz{");
      vector1.remove((Object) listIterator0);
      vector0.add((Object) "oeaSM9w:NJZz{");
      vector1.add("Error -uring repository cleanup.\nContinueJstartup?.jZr");
      vector1.add("oeaSM9w:NJZz{");
      Object object0 = new Object();
      Iterator<Object> iterator0 = vector0.iterator();
      vector0.removeElement((Object) null);
      vector0.removeElement((Object) null);
      vector0.add((Object) null);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.clear();
      vector0.sort(comparator1);
      vector0.add((Object) iterator0);
      Object object1 = new Object();
      vector0.remove((Object) vector1);
      vector0.clear();
      Object object2 = new Object();
      vector0.add(object2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "oeaSM9w:NJZz{";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.55213793531794
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.listIterator();
      Vector<String> vector1 = new Vector<String>();
      vector1.removeAllElements();
      archiveScanner0.dirsNotIncluded = vector0;
      vector1.add("jo(_Bq`");
      vector0.ensureCapacity((-304998067));
      vector0.remove((Object) "Lk<r2p_,*[_yN");
      Iterator<Object> iterator0 = vector0.iterator();
      vector0.removeElement((Object) null);
      vector0.removeElement(iterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      Object object0 = new Object();
      vector0.remove((Object) vector1);
      Object object1 = new Object();
      vector0.add(object1);
      archiveScanner0.setBasedir((File) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".arkD.jar";
      archiveScanner0.setIncludes(stringArray0);
      ImprovedFile improvedFile0 = new ImprovedFile("la", "Error trying to open file, ");
      improvedFile0.createTempDir();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("la/Error trying to open file, /tempdir0");
      FileSystemHandling.createFolder(evoSuiteFile0);
      archiveScanner0.scandir(improvedFile0, "la", true);
      DirectoryScanner.matchPath("t[^vVyV(tI", "!");
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" pVsJ%aBZ\\BjGieC/ pVsJ%aBZ\\BjGieC");
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = " pVsJ%aBZBjGieC";
      stringArray0[1] = " pVsJ%aBZBjGieC";
      stringArray0[2] = " pVsJ%aBZBjGieC";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " pVsJ%aBZBjGieC");
      stringArray0[3] = " pVsJ%aBZBjGieC";
      stringArray0[4] = "7Z:Kr%Uz";
      DirectoryScanner.matchPatternStart(" pVsJ%aBZBjGieC", " pVsJ%aBZBjGieC");
      stringArray0[5] = " pVsJ%aBZBjGieC";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[6] = " pVsJ%aBZBjGieC";
      stringArray0[7] = " pVsJ%aBZBjGieC";
      stringArray0[8] = " pVsJ%aBZBjGieC";
      archiveScanner0.setIncludes(stringArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(" pVsJ%aBZ\\BjGieC/ pVsJ%aBZ\\BjGieC");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "ob");
      archiveScanner0.excludes = stringArray0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, " pVsJ%aBZBjGieC");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " pVsJ%aBZBjGieC");
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "7Z:Kr%Uz", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      ListIterator<Object> listIterator0 = vector0.listIterator();
      Vector<String> vector1 = new Vector<String>();
      vector1.removeAllElements();
      archiveScanner0.dirsNotIncluded = vector0;
      vector1.add("LVip.jar");
      vector1.remove((Object) listIterator0);
      vector1.add("Error during repository cleanup.\nContinue startup?.jar");
      vector0.remove((Object) "Lk<r2p_,*[_yN");
      vector1.add("Lk<r2p_,*[_yN");
      Object object0 = new Object();
      Iterator<Object> iterator0 = vector0.iterator();
      vector0.removeElement((Object) null);
      vector0.removeElement(iterator0);
      vector0.add((Object) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.stream();
      vector0.sort(comparator0);
      Object object1 = new Object();
      vector0.remove((Object) vector1);
      Object object2 = new Object();
      vector0.add(object2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".[rkD.jar";
      archiveScanner0.setIncludes(stringArray0);
      MockFile mockFile0 = new MockFile("6v1U");
      try { 
        archiveScanner0.processDirectory(mockFile0, "I]s|N=z*", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/6v1U
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.haveSlowResults = true;
      archiveScanner0.dirsExcluded = vector1;
      archiveScanner0.dirsNotIncluded = vector0;
      vector0.ensureCapacity((-304998067));
      vector0.remove((Object) ",#EU:NE61QxL_!n");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",#EU:NE61QxL_!n";
      stringArray0[1] = ",#EU:NE61QxL_!n";
      Object object0 = new Object();
      stringArray0[2] = ",#EU:NE61QxL_!n";
      String string0 = ".arkD.jar";
      stringArray0[3] = ".arkD.jar";
      stringArray0[4] = ",#EU:NE61QxL_!n";
      stringArray0[5] = ";h`2^!CE9";
      Vector<Object> vector2 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector2;
      stringArray0[6] = "`Es9?zoZ.nt;H5q2*v";
      stringArray0[7] = ",#EU:NE61QxL_!n";
      stringArray0[8] = ".arkD.jar";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "`Es9?zoZ.nt;H5q2*v", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<BufferedInputStream> vector0 = new Vector<BufferedInputStream>();
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "QV{kDW??";
      stringArray0[1] = "QV{kDW??";
      stringArray0[2] = "QV{kDW??";
      stringArray0[3] = "QV{kDW??";
      stringArray0[4] = "QV{kDW??";
      stringArray0[5] = "QV{kDW??";
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1829);
      Vector<BufferedInputStream> vector1 = new Vector<BufferedInputStream>();
      Vector<BufferedInputStream> vector2 = new Vector<BufferedInputStream>();
      bufferedInputStream0.markSupported();
      archiveScanner0.isExcluded("QV{kDW??");
      Vector<Object> vector3 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector3;
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      UnaryOperator<BufferedInputStream> unaryOperator0 = UnaryOperator.identity();
      pipedInputStream0.mark(1966);
      vector0.replaceAll(unaryOperator0);
      sequenceInputStream0.read();
      Consumer<BufferedInputStream> consumer0 = (Consumer<BufferedInputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      byte[] byteArray0 = new byte[3];
      bufferedInputStream0.read(byteArray0);
      bufferedInputStream0.markSupported();
      bufferedInputStream0.skip(1829);
      sequenceInputStream0.read(byteArray0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "QV{kDW??", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<BufferedInputStream> vector0 = new Vector<BufferedInputStream>();
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "QV{kW??";
      stringArray0[1] = "QV{kW??";
      stringArray0[2] = "QV{kW??";
      stringArray0[3] = "QV{kW??";
      stringArray0[4] = "QV{kW??";
      stringArray0[5] = "QV{kW??";
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1829);
      Vector<BufferedInputStream> vector1 = new Vector<BufferedInputStream>();
      Vector<BufferedInputStream> vector2 = new Vector<BufferedInputStream>();
      bufferedInputStream0.markSupported();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "QV{kW??";
      archiveScanner0.setExcludes(stringArray1);
      vector0.add(bufferedInputStream0);
      Vector<Object> vector3 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector3;
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      UnaryOperator<BufferedInputStream> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      sequenceInputStream0.read();
      Consumer<BufferedInputStream> consumer0 = (Consumer<BufferedInputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      bufferedInputStream0.markSupported();
      byteArray0[1] = (byte)114;
      sequenceInputStream0.read(byteArray0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "QV{kW??", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<String> vector0 = new Vector<String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1CU(x,Q");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "1CU(x,Q";
      stringArray0[0] = "1CU(x,Q";
      stringArray0[2] = "1CU(x,Q";
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/tmp4backup");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "1CU(x,Q";
      stringArray1[1] = "1CU(x,Q";
      archiveScanner0.includes = stringArray1;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, stringArray0[5]);
      stringArray0[3] = "1CU(x,Q";
      stringArray1[4] = "1CU(x,Q";
      stringArray0[8] = stringArray0[6];
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "E>ror trying to rem?ve arc\"ive staZing direc6ory, ");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)92;
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector1;
      byteArray1[2] = (byte) (-3);
      byteArray1[3] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.processFile("1CU(x,Q");
      assertEquals(1, ArchiveScanner.DIRECTORY);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<String> vector0 = new Vector<String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1CU(x,Q");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "1CU(x,Q";
      stringArray0[0] = "1CU(x,Q";
      stringArray0[2] = "1CU(x,Q";
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/tmp4backup");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "1CU(x,Q";
      stringArray1[1] = "1CU(x,Q";
      archiveScanner0.includes = stringArray1;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, stringArray0[5]);
      stringArray0[3] = "1CU(x,Q";
      stringArray1[4] = "1CU(x,Q";
      stringArray0[6] = "1CU(x,Q";
      stringArray0[8] = "1CU(x,Q";
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/tmp1backup");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "1CU(x,Q");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "E>ror trying to rem?ve arc\"ive staZing direc6ory, ");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)92;
      byteArray1[2] = (byte) (-3);
      byteArray1[3] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      archiveScanner0.excludes = stringArray0;
      ImprovedFile.createTempImprovedFile("iph9*Us[>Q)Pmk6eX", "E>ror trying to rem?ve arc\"ive staZing direc6ory, ", (File) null);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("1CU(x,Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" pVsJ%aBZ\\BjGieC/ pVsJ%aBZ\\BjGieC");
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = " pVsJ%aBZBjGieC";
      stringArray0[1] = " pVsJ%aBZBjGieC";
      stringArray0[2] = " pVsJ%aBZBjGieC";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " pVsJ%aBZBjGieC");
      stringArray0[3] = " pVsJ%aBZBjGieC";
      stringArray0[4] = "7Z:Kr%Uz";
      stringArray0[5] = " pVsJ%aBZBjGieC";
      stringArray0[6] = " pVsJ%aBZBjGieC";
      stringArray0[7] = " pVsJ%aBZBjGieC";
      stringArray0[8] = " pVsJ%aBZBjGieC";
      archiveScanner0.setIncludes(stringArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/tmp1backup");
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.filesExcluded = vector0;
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "ob");
      ImprovedFile improvedFile0 = new ImprovedFile(" pVsJ%aBZBjGieC", " pVsJ%aBZBjGieC");
      archiveScanner0.excludes = stringArray0;
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, " pVsJ%aBZBjGieC");
      improvedFile0.toURL();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " pVsJ%aBZBjGieC");
      archiveScanner0.processArchive(improvedFile0, "7Z:Kr%Uz");
      assertFalse(improvedFile0.exists());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Q{kW??";
      stringArray0[1] = "Q{kW??";
      stringArray0[2] = "Q{kW??";
      stringArray0[3] = "Q{kW??";
      stringArray0[4] = "Q{kW??";
      stringArray0[5] = "Q{kW??";
      stringArray0[6] = "Q{kW??";
      stringArray0[7] = "Q{kW??";
      stringArray0[8] = "Error crating archive file, ";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer0 = new Integer(0);
      vector1.add(integer0);
      vector1.listIterator();
      Integer integer1 = new Integer(1);
      vector1.set(0, integer1);
      Vector<Integer> vector2 = new Vector<Integer>();
      archiveScanner0.filesIncluded = vector2;
      Integer integer2 = new Integer((-263621018));
      Integer integer3 = new Integer((-263621018));
      vector1.add(integer3);
      archiveScanner0.setBasedir(".ear");
      archiveScanner0.isExcluded("Q{kW??");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1176);
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("Error crating archive file, ", ":", (File) null);
      ImprovedFile improvedFile1 = improvedFile0.tempBackup();
      improvedFile1.tempBackup();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "Q{kW??");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<BufferedInputStream> vector0 = new Vector<BufferedInputStream>();
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "QV{kW??";
      stringArray0[1] = "QV{kW??";
      stringArray0[2] = "QV{kW??";
      stringArray0[3] = "QV{kW??";
      stringArray0[4] = "QV{kW??";
      stringArray0[5] = "QV{kW??";
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1829);
      Vector<BufferedInputStream> vector1 = new Vector<BufferedInputStream>();
      Vector<BufferedInputStream> vector2 = new Vector<BufferedInputStream>();
      bufferedInputStream0.markSupported();
      vector0.add(bufferedInputStream0);
      Vector<Object> vector3 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector3;
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      UnaryOperator<BufferedInputStream> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      sequenceInputStream0.read();
      Consumer<BufferedInputStream> consumer0 = (Consumer<BufferedInputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      byte[] byteArray0 = new byte[3];
      bufferedInputStream0.read(byteArray0);
      byteArray0[0] = (byte)114;
      bufferedInputStream0.markSupported();
      byteArray0[1] = (byte)114;
      sequenceInputStream0.read(byteArray0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "QV{kW??");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "QGkWj??";
      stringArray0[1] = "QGkWj??";
      stringArray0[2] = "QGkWj??";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QGkWj??");
      stringArray0[3] = "QGkWj??";
      stringArray0[4] = "Error trying to remLve archive staging direcsory, ";
      stringArray0[5] = "QGkWj??";
      stringArray0[6] = "QGkWj??";
      stringArray0[7] = "QGkWj??";
      stringArray0[8] = "p";
      archiveScanner0.setIncludes(stringArray0);
      boolean boolean0 = archiveScanner0.haveSlowResults;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/tmp1backup");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".EAR");
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("ih9*Uts[>Q)Pmk6eX", "Error trying to remLve archive staging direcsory, ", (File) null);
      ImprovedFile improvedFile1 = improvedFile0.tempBackup();
      ImprovedFile improvedFile2 = improvedFile0.tempBackup();
      improvedFile1.deleteOnExit();
      MockFile.createTempFile(".jar", "QGkWj??");
      ImprovedFile.copyFromToDir(improvedFile0, improvedFile2);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsExcluded = vector0;
      improvedFile2.getCanonicalFile();
      improvedFile2.toURL();
      improvedFile0.setWritable(false);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile2, "Error trying to remLve archive staging direcsory, ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<BufferedInputStream> vector0 = new Vector<BufferedInputStream>();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "QV{kW,?";
      stringArray0[1] = "QV{kW,?";
      stringArray0[2] = "QV{kW,?";
      stringArray0[3] = "QV{kW,?";
      stringArray0[4] = "QV{kW,?";
      stringArray0[5] = "QV{kW,?";
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1829);
      pipedInputStream0.markSupported();
      Vector<BufferedInputStream> vector1 = new Vector<BufferedInputStream>();
      bufferedInputStream0.markSupported();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "QV{kW,?";
      archiveScanner0.setExcludes(stringArray1);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.available();
      sequenceInputStream0.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      UnaryOperator<BufferedInputStream> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      sequenceInputStream0.read();
      Consumer<BufferedInputStream> consumer0 = (Consumer<BufferedInputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      byte[] byteArray0 = new byte[3];
      bufferedInputStream0.available();
      bufferedInputStream1.read(byteArray0);
      bufferedInputStream0.markSupported();
      bufferedInputStream0.skip((-2042L));
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "QV{kW,?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      ListIterator<Object> listIterator0 = vector0.listIterator();
      Vector<String> vector1 = new Vector<String>();
      vector1.removeAllElements();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector1.sort((Comparator<? super String>) null);
      vector1.sort((Comparator<? super String>) null);
      archiveScanner0.dirsNotIncluded = vector0;
      vector1.remove((Object) listIterator0);
      vector0.add((Object) "oeaSM9w:NJZz{");
      vector0.removeElement((Object) null);
      vector1.add("Error -uring repository cleanup.\nContinueJstartup?.jZr");
      vector1.add("oeaSM9w:NJZz{");
      Object object0 = new Object();
      Iterator<Object> iterator0 = vector0.iterator();
      vector0.removeElement((Object) null);
      vector0.removeElement((Object) null);
      vector0.add((Object) null);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      vector0.sort(comparator1);
      vector0.add((Object) iterator0);
      vector0.remove((Object) vector1);
      vector0.clear();
      Object object1 = new Object();
      vector0.trimToSize();
      vector0.add(object1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "oeaSM9w:NJZz{";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      ListIterator<Object> listIterator0 = vector0.listIterator();
      Vector<String> vector1 = new Vector<String>();
      vector1.removeAllElements();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector1.sort((Comparator<? super String>) null);
      vector1.sort((Comparator<? super String>) null);
      archiveScanner0.dirsNotIncluded = vector0;
      vector1.add("Lk<r2p_,*[_yN");
      vector1.remove((Object) listIterator0);
      vector0.add((Object) "Lk<r2p_,*[_yN");
      vector1.add("Error -uring repository cleanup.\nContinueJstartup?.jZr");
      vector1.add("Lk<r2p_,*[_yN");
      Object object0 = new Object();
      Iterator<Object> iterator0 = vector0.iterator();
      vector0.removeElement((Object) null);
      vector0.removeElement(iterator0);
      vector0.add((Object) null);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.clear();
      vector0.sort(comparator1);
      vector0.add((Object) iterator0);
      Object object1 = new Object();
      vector0.remove((Object) vector1);
      vector0.clear();
      Object object2 = new Object();
      vector0.trimToSize();
      vector0.add(object2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Lk<r2p_,*[_yN";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processDirectory((File) null, "\"y-t.jar", true);
      assertEquals(1, ArchiveScanner.DIRECTORY);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<BufferedInputStream> vector0 = new Vector<BufferedInputStream>();
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "QV{1fkW??";
      stringArray0[1] = "QV{1fkW??";
      stringArray0[2] = "QV{1fkW??";
      stringArray0[3] = "QV{1fkW??";
      stringArray0[4] = "QV{1fkW??";
      stringArray0[5] = "QV{1fkW??";
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1871);
      Vector<BufferedInputStream> vector1 = new Vector<BufferedInputStream>();
      bufferedInputStream0.mark((-3115));
      sequenceInputStream0.close();
      Vector<BufferedInputStream> vector2 = new Vector<BufferedInputStream>();
      bufferedInputStream0.markSupported();
      Vector<Object> vector3 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector3;
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      UnaryOperator<BufferedInputStream> unaryOperator0 = UnaryOperator.identity();
      pipedInputStream0.mark(1955);
      vector0.replaceAll(unaryOperator0);
      sequenceInputStream0.read();
      Consumer<BufferedInputStream> consumer0 = (Consumer<BufferedInputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis((-1));
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("QV{1fkW??");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<BufferedInputStream> vector0 = new Vector<BufferedInputStream>();
      archiveScanner0.filesIncluded = vector0;
      Vector<String> vector1 = new Vector<String>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".ear";
      stringArray0[1] = ".ear";
      stringArray0[2] = ".ear";
      stringArray0[3] = ".ear";
      archiveScanner0.addDefaultExcludes();
      stringArray0[4] = ".ear";
      stringArray0[5] = ".ear";
      stringArray0[6] = ".ear";
      stringArray0[7] = "QV{kW??";
      stringArray0[8] = ".ear";
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ArchiveScanner archiveScanner1 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.getBasedir();
      archiveScanner0.processFile(".ear");
      assertEquals(1, ArchiveScanner.DIRECTORY);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".ear";
      stringArray0[1] = ".ear";
      stringArray0[2] = ".ear";
      stringArray0[3] = ".ear";
      archiveScanner0.addDefaultExcludes();
      stringArray0[4] = ".ear";
      stringArray0[5] = ".ear";
      stringArray0[6] = ".ear";
      stringArray0[7] = "QV{kW??";
      stringArray0[8] = ".ear";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.filesExcluded = vector1;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ArchiveScanner archiveScanner1 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner1.filesNotIncluded = archiveScanner0.filesExcluded;
      archiveScanner1.addDefaultExcludes();
      archiveScanner0.getBasedir();
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(".ear");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.listIterator();
      Vector<String> vector1 = new Vector<String>();
      vector1.removeAllElements();
      archiveScanner0.dirsNotIncluded = vector0;
      vector0.ensureCapacity((-304998067));
      vector0.remove((Object) "Lk<r2p_,*[_yN");
      Object object0 = new Object();
      Iterator<Object> iterator0 = vector0.iterator();
      vector0.removeElement((Object) null);
      vector0.removeElement(iterator0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      Object object1 = new Object();
      vector0.remove((Object) vector1);
      Object object2 = new Object();
      vector0.add(object2);
      String[] stringArray0 = new String[1];
      Vector<Integer> vector2 = new Vector<Integer>();
      archiveScanner0.filesExcluded = vector2;
      stringArray0[0] = ".arkD.jar";
      archiveScanner0.setIncludes(stringArray0);
      vector0.add((Object) vector1);
      Vector<Object> vector3 = new Vector<Object>();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "O1R}FO'hSd_:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[0];
      archiveScanner0.setIncludes(stringArray0);
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-823));
      vector1.add(integer0);
      vector1.listIterator();
      Integer integer2 = new Integer(7);
      Integer integer3 = new Integer((-304082247));
      Integer integer4 = new Integer(3);
      vector1.add(integer4);
      Integer integer5 = new Integer(3);
      vector1.add(integer0);
      Integer integer6 = new Integer(2147483645);
      Integer integer7 = new Integer(2147483645);
      Integer integer8 = new Integer((-304082247));
      Vector<InputStream> vector2 = new Vector<InputStream>();
      archiveScanner0.filesNotIncluded = vector2;
      Integer integer9 = new Integer(7);
      Vector<Integer> vector3 = new Vector<Integer>();
      Integer integer10 = new Integer((-304082247));
      vector3.add(integer10);
      vector3.add(integer5);
      archiveScanner0.processFile("E4 l");
      System.setCurrentTimeMillis(7);
      archiveScanner0.processArchive((File) null, ".jar");
      System.setCurrentTimeMillis(3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<BufferedInputStream> vector0 = new Vector<BufferedInputStream>();
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "QV{kW??";
      stringArray0[1] = "QV{kW??";
      stringArray0[2] = "QV{kW??";
      stringArray0[3] = "QV{kW??";
      stringArray0[4] = "QV{kW??";
      stringArray0[5] = "QV{kW??";
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1829);
      Vector<BufferedInputStream> vector1 = new Vector<BufferedInputStream>();
      Vector<BufferedInputStream> vector2 = new Vector<BufferedInputStream>();
      bufferedInputStream0.markSupported();
      vector0.add(bufferedInputStream0);
      Vector<Object> vector3 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector3;
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      UnaryOperator<BufferedInputStream> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      sequenceInputStream0.read();
      Consumer<BufferedInputStream> consumer0 = (Consumer<BufferedInputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      byte[] byteArray0 = new byte[3];
      bufferedInputStream0.read(byteArray0);
      byteArray0[0] = (byte)114;
      bufferedInputStream0.markSupported();
      byteArray0[1] = (byte)114;
      sequenceInputStream0.read(byteArray0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "QV{kW??", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<BufferedInputStream> vector0 = new Vector<BufferedInputStream>();
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "QV{kW??";
      stringArray0[1] = "QV{kW??";
      stringArray0[2] = "QV{kW??";
      stringArray0[3] = "QV{kW??";
      stringArray0[4] = "QV{kW??";
      stringArray0[5] = "QV{kW??";
      archiveScanner0.setIncludes(stringArray0);
      vector0.add((BufferedInputStream) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1829);
      Vector<BufferedInputStream> vector1 = new Vector<BufferedInputStream>();
      Vector<BufferedInputStream> vector2 = new Vector<BufferedInputStream>();
      bufferedInputStream0.markSupported();
      vector0.add(bufferedInputStream0);
      Vector<Object> vector3 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector3;
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      UnaryOperator<BufferedInputStream> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      sequenceInputStream0.read();
      Consumer<BufferedInputStream> consumer0 = (Consumer<BufferedInputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      byte[] byteArray0 = new byte[3];
      bufferedInputStream0.read(byteArray0);
      bufferedInputStream0.markSupported();
      sequenceInputStream0.read(byteArray0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "ZKe8GJXJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<BufferedInputStream> vector0 = new Vector<BufferedInputStream>();
      archiveScanner0.addDefaultExcludes();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "QV{kW??";
      stringArray0[1] = "QV{kW??";
      stringArray0[2] = "QV{kW??";
      stringArray0[3] = "QV{kW??";
      stringArray0[4] = "QV{kW??";
      stringArray0[5] = "QV{kW??";
      archiveScanner0.setIncludes(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1829);
      Vector<BufferedInputStream> vector1 = new Vector<BufferedInputStream>();
      Vector<BufferedInputStream> vector2 = new Vector<BufferedInputStream>();
      bufferedInputStream0.markSupported();
      vector0.add(bufferedInputStream0);
      Vector<Object> vector3 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector3;
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      UnaryOperator<BufferedInputStream> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      sequenceInputStream0.read();
      Consumer<BufferedInputStream> consumer0 = (Consumer<BufferedInputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      byte[] byteArray0 = new byte[3];
      bufferedInputStream0.read(byteArray0);
      byteArray0[0] = (byte)114;
      bufferedInputStream0.markSupported();
      byteArray0[1] = (byte)114;
      sequenceInputStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ImprovedFile improvedFile0 = new ImprovedFile("&x|H&O8.jar", "&x|H&O8.jar");
      improvedFile0.toURI();
      improvedFile0.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(">&x|H&O8.jar/Nl&281320.z;TcvVr4_-8v5fQk\\.jar");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".ZIP");
      MockFile mockFile0 = new MockFile(improvedFile0, "Quit application?");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setIncludes((String[]) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer((-1));
      vector0.add(integer2);
      vector0.listIterator();
      Integer integer3 = new Integer(0);
      Integer integer4 = new Integer((-1));
      Integer integer5 = new Integer((-1));
      Integer integer6 = new Integer(0);
      Integer integer7 = new Integer((-2309));
      vector0.add(integer7);
      Integer integer8 = new Integer((-10384350));
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer9 = new Integer(1);
      vector1.add((Integer) null);
      MockFile mockFile1 = new MockFile(".ZIP");
      boolean boolean0 = archiveScanner0.isArchive(mockFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      ListIterator<Object> listIterator0 = vector0.listIterator();
      Vector<String> vector1 = new Vector<String>();
      vector1.removeAllElements();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector1.sort((Comparator<? super String>) null);
      vector1.sort((Comparator<? super String>) null);
      archiveScanner0.dirsNotIncluded = vector0;
      vector1.remove((Object) listIterator0);
      vector0.add((Object) "oeaSM9w:NJZz{");
      vector0.removeElement((Object) null);
      vector1.add("Error -uring repository cleanup.\nContinueJstartup?.jZr");
      vector1.add("oeaSM9w:NJZz{");
      Object object0 = new Object();
      Iterator<Object> iterator0 = vector0.iterator();
      vector0.removeElement((Object) null);
      vector0.removeElement((Object) null);
      vector0.add((Object) null);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      vector0.sort(comparator1);
      vector0.add((Object) iterator0);
      vector0.remove((Object) vector1);
      vector0.clear();
      Object object1 = new Object();
      vector0.trimToSize();
      vector0.add(object1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "oeaSM9w:NJZz{";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("Error -uring repository cleanup.\nContinueJstartup?.jZr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(16);
      vector0.add(integer0);
      Integer integer1 = new Integer(16);
      vector0.add(integer1);
      Integer integer2 = new Integer(16);
      Integer integer3 = new Integer(16);
      vector0.add((Integer) null);
      Integer integer4 = new Integer(16);
      Integer integer5 = new Integer(16);
      vector0.add(integer0);
      Integer integer6 = new Integer(16);
      Integer integer7 = new Integer(16);
      vector0.add(integer7);
      vector0.add(integer1);
      Integer integer8 = new Integer(16);
      Integer integer9 = new Integer(16);
      Integer integer10 = new Integer(16);
      vector0.add(integer9);
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer11 = new Integer(16);
      vector0.add(integer5);
      Integer integer12 = new Integer(16);
      Integer integer13 = new Integer(16);
      Integer integer14 = new Integer(16);
      Integer integer15 = new Integer(16);
      Integer integer16 = new Integer(16);
      Integer integer17 = new Integer(16);
      vector0.add(integer17);
      vector1.add(integer16);
      Integer integer18 = new Integer(16);
      vector1.add(integer4);
      Integer integer19 = new Integer(1565);
      vector0.add(integer8);
      ImprovedFile improvedFile0 = new ImprovedFile("}cgYx9");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, "}cgYx9", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/}cgYx9
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer((-30));
      vector0.add(integer0);
      Integer integer1 = new Integer((-30));
      vector0.add(integer1);
      Integer integer2 = new Integer((-30));
      Integer integer3 = new Integer((-30));
      vector0.add(integer3);
      Integer integer4 = new Integer((-30));
      Integer integer5 = new Integer((-30));
      vector0.add(integer4);
      Integer integer6 = new Integer((-30));
      Integer integer7 = new Integer((-30));
      Integer integer8 = new Integer((-30));
      Integer integer9 = new Integer((-30));
      vector0.add(integer9);
      Integer integer10 = new Integer(2840);
      vector0.add(integer8);
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer11 = new Integer((-30));
      Integer integer12 = new Integer(1124);
      Integer integer13 = new Integer((-30));
      Integer integer14 = new Integer(4);
      Integer integer15 = new Integer((-1454));
      Integer integer16 = new Integer(6);
      vector0.add(integer16);
      Integer integer17 = new Integer((-1454));
      vector0.add(integer17);
      ImprovedFile improvedFile0 = new ImprovedFile("jcp|gY@^9A", "jcp|gY@^9A");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, "SdL!WjVo*", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/jcp|gY@^9A/jcp|gY@^9A
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ImprovedFile improvedFile0 = new ImprovedFile("&x|H&O8.jar", ".|&D");
      ImprovedFile.createTempFileName("pk", ".|&D", improvedFile0);
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0, "BI]'dp^6\"Oj]aN");
      ImprovedFile improvedFile2 = improvedFile1.createTempDir();
      improvedFile2.setReadable(true, true);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(">&x|H&O8.jar/Nl&281320.z;TcvVr4_-8v5fQk\\.jar");
      FileSystemHandling.createFolder(evoSuiteFile1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile2);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile1, "&x|H&O8.jar", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer0 = new Integer((-10));
      vector1.add(integer0);
      Integer integer1 = new Integer((-10));
      vector1.add(integer1);
      Integer integer2 = new Integer((-10));
      Integer integer3 = new Integer((-10));
      vector1.add(integer3);
      Integer integer4 = new Integer((-10));
      Integer integer5 = new Integer((-10));
      Integer integer6 = new Integer((-10));
      vector1.add(integer6);
      Integer integer7 = new Integer((-10));
      Integer integer8 = new Integer((-10));
      Integer integer9 = new Integer((-10));
      Integer integer10 = new Integer((-10));
      vector1.add(integer9);
      Vector<Integer> vector2 = new Vector<Integer>();
      Integer integer11 = new Integer((-10));
      Integer integer12 = new Integer(1112);
      Integer integer13 = new Integer((-10));
      Integer integer14 = new Integer(4);
      Integer integer15 = new Integer((-208046556));
      Integer integer16 = new Integer((-10));
      Integer integer17 = new Integer((-208046556));
      vector1.add(integer17);
      vector1.add(integer16);
      Integer integer18 = new Integer((-208046556));
      vector1.add(integer18);
      ImprovedFile improvedFile0 = new ImprovedFile("jcpgY@^9A", "jcpgY@^9A");
      improvedFile0.createTempDir("jcpgY@^9A", (String) null);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".zip");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      PushbackInputStream pushbackInputStream1 = null;
      try {
        pushbackInputStream1 = new PushbackInputStream(inputStream0, int0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer((-8));
      Integer integer1 = new Integer((-8));
      vector0.add(integer1);
      Integer integer2 = new Integer((-8));
      vector0.add(integer2);
      Integer integer3 = new Integer((-8));
      Integer integer4 = new Integer((-8));
      vector0.add(integer4);
      Integer integer5 = new Integer((-8));
      Integer integer6 = new Integer((-8));
      Integer integer7 = new Integer((-8));
      vector0.add(integer7);
      Integer integer8 = new Integer((-8));
      vector0.add(integer8);
      Integer integer9 = new Integer((-8));
      vector0.add(integer2);
      Integer integer10 = new Integer((-8));
      Integer integer11 = new Integer((-8));
      Integer integer12 = new Integer((-8));
      vector0.add(integer10);
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer13 = new Integer((-8));
      Integer integer14 = new Integer((-8));
      Integer integer15 = new Integer((-8));
      Integer integer16 = new Integer((-8));
      Integer integer17 = new Integer((-8));
      Integer integer18 = new Integer((-8));
      Integer integer19 = new Integer((-8));
      vector0.add(integer19);
      vector1.add(integer18);
      Integer integer20 = new Integer((-8));
      vector0.add(integer20);
      ImprovedFile improvedFile0 = new ImprovedFile("}cgYi9");
      improvedFile0.createTempDir("}cgYi9", "}cgYi9");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer((-8));
      vector0.add((Integer) null);
      Integer integer1 = new Integer((-8));
      vector0.add(integer1);
      Integer integer2 = new Integer((-8));
      vector0.add(integer2);
      Integer integer3 = new Integer((-8));
      Integer integer4 = new Integer((-8));
      vector0.add(integer4);
      Integer integer5 = new Integer((-8));
      Integer integer6 = new Integer((-8));
      Integer integer7 = new Integer((-8));
      vector0.add((Integer) null);
      Integer integer8 = new Integer((-8));
      vector0.add(integer8);
      Integer integer9 = new Integer((-8));
      vector0.add(integer2);
      Integer integer10 = new Integer((-8));
      Integer integer11 = new Integer((-8));
      Integer integer12 = new Integer((-8));
      vector0.add(integer10);
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer13 = new Integer((-8));
      Integer integer14 = new Integer((-8));
      Integer integer15 = new Integer((-8));
      Integer integer16 = new Integer((-8));
      Integer integer17 = new Integer((-8));
      Integer integer18 = new Integer((-8));
      Integer integer19 = new Integer((-8));
      vector0.add(integer19);
      vector1.add(integer18);
      Integer integer20 = new Integer((-8));
      vector0.add(integer20);
      ImprovedFile improvedFile0 = new ImprovedFile("xgYq:", "xgYq:");
      improvedFile0.createTempDir("xgYq:", "xgYq:");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "xgYq:", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".zip");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.toFileType(improvedFile0);
      InputStream inputStream0 = null;
      InputStream inputStream1 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream1);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      PipedOutputStream pipedOutputStream0 = null;
      int int0 = (-232354986);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".zip");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.toFileType(improvedFile0);
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      PipedOutputStream pipedOutputStream0 = null;
      int int0 = 63;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<String> vector0 = new Vector<String>();
      Vector<Object> vector1 = new Vector<Object>();
      vector0.add(".jar");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "kJ<` @L{p#kE4 l";
      stringArray0[1] = "E:s7ivvVZU5x4";
      stringArray0[2] = ".jar";
      stringArray0[3] = "n\"kiamL%hEJLWZb2c";
      stringArray0[4] = "n\"kiamL%hEJLWZb2c";
      stringArray0[5] = ".jar";
      archiveScanner0.setIncludes(stringArray0);
      Vector<Integer> vector2 = new Vector<Integer>();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(1465);
      vector2.add(integer1);
      vector2.listIterator();
      Integer integer2 = new Integer((-10384350));
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer((-2230));
      Integer integer5 = new Integer((-2230));
      vector2.add(integer5);
      Integer integer6 = new Integer((-644));
      Vector<Integer> vector3 = new Vector<Integer>();
      Integer integer7 = new Integer((-228914825));
      vector2.add(integer7);
      MockFile mockFile0 = new MockFile("kJ<` @L{p#kE4 l");
      boolean boolean0 = archiveScanner0.isArchive(mockFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      ListIterator<Object> listIterator0 = vector0.listIterator();
      Vector<String> vector1 = new Vector<String>();
      vector1.removeAllElements();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector1.sort((Comparator<? super String>) null);
      vector1.sort((Comparator<? super String>) null);
      archiveScanner0.dirsNotIncluded = vector0;
      vector1.remove((Object) listIterator0);
      vector0.add((Object) "oeaSM9w:NJZz{");
      vector0.removeElement((Object) null);
      vector1.add("Error -uring repository cleanup.\nContinueJstartup?.jZr");
      vector1.add("oeaSM9w:NJZz{");
      Object object0 = new Object();
      Iterator<Object> iterator0 = vector0.iterator();
      vector0.removeElement((Object) null);
      vector0.removeElement((Object) null);
      vector0.add((Object) null);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      vector0.sort(comparator1);
      vector0.add((Object) iterator0);
      vector0.remove((Object) vector1);
      vector0.clear();
      Object object1 = new Object();
      vector0.trimToSize();
      vector0.add(object1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "oeaSM9w:NJZz{";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer((-10));
      vector0.add(integer0);
      Integer integer1 = new Integer((-10));
      vector0.add((Integer) null);
      Integer integer2 = new Integer((-10));
      vector0.add(integer2);
      Integer integer3 = new Integer((-10));
      vector0.add(integer3);
      Integer integer4 = new Integer((-10));
      Integer integer5 = new Integer((-10));
      Integer integer6 = new Integer((-10));
      vector0.add(integer6);
      Integer integer7 = new Integer((-10));
      Integer integer8 = new Integer((-10));
      Integer integer9 = new Integer((-10));
      Integer integer10 = new Integer((-10));
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer11 = new Integer((-10));
      Integer integer12 = new Integer(1072);
      Integer integer13 = new Integer((-10));
      vector0.add((Integer) null);
      Integer integer14 = new Integer((-1904));
      Integer integer15 = new Integer((-208046556));
      Integer integer16 = new Integer((-10));
      Integer integer17 = new Integer((-208046556));
      vector0.add(integer17);
      vector0.add(integer16);
      Integer integer18 = new Integer(1072);
      vector0.add(integer18);
      ImprovedFile improvedFile0 = new ImprovedFile("jc[gY@^$qA", "jc[gY@^$qA");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/jc[gY@^$qA/jc[gY@^$qA
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      ListIterator<Object> listIterator0 = vector0.listIterator();
      Vector<String> vector1 = new Vector<String>();
      vector1.removeAllElements();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector1.sort((Comparator<? super String>) null);
      vector1.sort((Comparator<? super String>) null);
      archiveScanner0.dirsNotIncluded = vector0;
      vector1.spliterator();
      vector1.remove((Object) listIterator0);
      vector0.add((Object) "oeaSM9w:NJZz{");
      vector0.removeElement((Object) null);
      vector1.add("Error -uring repository cleanup.\nContinueJstartup?.jZr");
      vector1.add("oeaSM9w:NJZz{");
      Object object0 = new Object();
      Iterator<Object> iterator0 = vector0.iterator();
      vector0.removeElement((Object) null);
      vector0.removeElement((Object) null);
      vector0.add((Object) null);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      vector0.sort(comparator1);
      vector0.add((Object) iterator0);
      vector0.remove((Object) vector1);
      vector0.clear();
      Object object1 = new Object();
      vector0.add(object1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "oeaSM9w:NJZz{";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }
}
