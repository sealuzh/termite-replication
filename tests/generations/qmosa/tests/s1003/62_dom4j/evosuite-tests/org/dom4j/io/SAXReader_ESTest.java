/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 12:26:46 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.nio.CharBuffer;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.NodeType;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.dom.DOMProcessingInstruction;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.DefaultAttribute;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.DefaultProcessingInstruction;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.IndexedElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5378431160136046
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.getDispatchHandler();
      sAXReader0.setMergeAdjacentText(false);
      sAXReader0.setEncoding("//tmp/S3&|u07p");
      try { 
        sAXReader0.read("//tmp/-S3&|u07p");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/-S3&|u07p Nested exception: no protocol: //tmp/-S3&|u07p
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "org.dom4j.io.SAXReader";
      QName qName0 = QName.get("org.dom4j.io.SAXReader");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      StringReader stringReader0 = new StringReader("Ujyc");
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      sAXReader0.setEncoding("@\"snw");
      try { 
        sAXReader0.read((Reader) stringReader0, "O9<dPH");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document O9<dPH : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.420295386033961
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("sr@}MS7NM+}*_J|*S");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(":");
      sAXReader_SAXEntityResolver0.resolveEntity(":", ":");
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1194);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      try { 
        pipedInputStream0.connect(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3597473990481395
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1194);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      pipedInputStream0.connect(pipedOutputStream0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertNotNull(xMLReader0);
      
      sAXReader0.setFeature("http://xml.org/sax/features/namespaces", true);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      Object object0 = new Object();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Object object1 = new Object();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl2);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      locator2Impl2.setColumnNumber(2147483645);
      locator2Impl2.setEncoding("h");
      locator2Impl4.setSystemId("h");
      locator2Impl4.setSystemId("Zt");
      locator2Impl0.setLineNumber(774);
      Locator2Impl locator2Impl5 = new Locator2Impl(locatorImpl1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      locator2Impl1.setSystemId("//tmp/tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D09M*^stCOT5e");
      MockFile mockFile0 = new MockFile("Q%}oX=O\"", "h");
      mockFile0.mkdir();
      String string0 = null;
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.333443371183037
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "G";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("G");
      String string1 = "|6";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|6");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("e", "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " : ");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.processingInstruction("KIYHSCmiv\"w", "e");
      defaultHandler2_0.resolveEntity("_`H?62#uoMq2", (String) null);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setEntityResolver(sAXReader_SAXEntityResolver0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EntityResolver entityResolver0 = sAXReader0.createDefaultEntityResolver("#");
      sAXReader0.setEntityResolver(entityResolver0);
      StringReader stringReader0 = new StringReader("#");
      try { 
        sAXReader0.read((Reader) stringReader0, "#");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/# : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      QName.get("^`U!B");
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.isValidating();
      MockFile.createTempFile("^`U!B", "^`U!B");
      try { 
        sAXReader0.setXMLReaderClassName("=;} ocDO:`");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class =;} ocDO:` not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setEncoding(" mapped to URI \"");
      String string0 = "S8&FN`";
      StringReader stringReader0 = new StringReader("S8&FN`");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Object object0 = new Object();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl1);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl1);
      LocatorImpl locatorImpl2 = new LocatorImpl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locator2Impl locator2Impl6 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl8 = new Locator2Impl(locator2Impl7);
      Locator2Impl locator2Impl9 = new Locator2Impl();
      Locator2Impl locator2Impl10 = new Locator2Impl();
      locator2Impl10.setColumnNumber((-115));
      Locator2Impl locator2Impl11 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl12 = new Locator2Impl(locator2Impl7);
      Locator2Impl locator2Impl13 = new Locator2Impl(locator2Impl12);
      Locator2Impl locator2Impl14 = new Locator2Impl(locator2Impl7);
      locator2Impl5.getLineNumber();
      Locator2Impl locator2Impl15 = new Locator2Impl(locator2Impl13);
      Locator2Impl locator2Impl16 = new Locator2Impl(locator2Impl10);
      Locator2Impl locator2Impl17 = new Locator2Impl(locator2Impl7);
      Locator2Impl locator2Impl18 = new Locator2Impl();
      String string0 = null;
      Locator2Impl locator2Impl19 = new Locator2Impl(locator2Impl6);
      Locator2Impl locator2Impl20 = new Locator2Impl();
      Locator2Impl locator2Impl21 = new Locator2Impl(locator2Impl15);
      Locator2Impl locator2Impl22 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl23 = new Locator2Impl(locator2Impl7);
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4901524846261744
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      char[] charArray0 = new char[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[0] = '/';
      charArray0[1] = '3';
      charArray0[2] = '+';
      charArray0[3] = 'T';
      charArray0[4] = 'd';
      xMLFilterImpl1.characters(charArray0, 0, 0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      sAXReader0.getEncoding();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.isIncludeExternalDTDDeclarations();
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          URI uRI0 = MockURI.aFTPURI;
          sAXReader0.setEncoding("OFI9Ai8(K7buvM");
          URL uRL0 = MockURI.toURL(uRI0);
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      sAXReader0.setStripWhitespaceText(true);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      dispatchHandler0.addHandler("Comment", (ElementHandler) null);
      ElementStack elementStack0 = new ElementStack();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      BaseElement baseElement0 = new BaseElement(" PUBLIC \"", (Namespace) null);
      baseElement0.element("VsFIiE2A,Jxiyg?&'");
      QName qName0 = namespaceStack0.getQName("org.dom4j.QName.singleton.strategy", "", " of document ");
      BeanElement beanElement0 = new BeanElement(qName0);
      dispatchHandler0.resetHandlers();
      sAXReader0.isStripWhitespaceText();
      sAXReader0.getDocumentFactory();
      assertTrue(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          String string0 = null;
          URI uRI0 = MockURI.aFTPURI;
          URL uRL0 = MockURI.toURL(uRI0);
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2796666627182685
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-104);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("G");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/yn#M.G'W2VH=L0.tmp");
      sAXReader_SAXEntityResolver0.resolveEntity("G", "|6");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " : ");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset("//tmp/yn#M.G'W2VH=L0.tmp", " : ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = "5}[Gc-WX^O)/D";
      StringReader stringReader0 = new StringReader("5}[Gc-WX^O)/D");
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getDocumentFactory();
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.6873395279027155
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.resetHandlers();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.resetHandlers();
      dispatchHandler0.removeHandler((String) null);
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setIgnoreComments(true);
      handlerBase0.resolveEntity((String) null, (String) null);
      handlerBase0.startDocument();
      handlerBase0.endElement("");
      sAXReader0.setErrorHandler(handlerBase0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.getXMLFilter();
      sAXReader0.isIgnoreComments();
      sAXReader0.isStringInternEnabled();
      sAXReader0.resetHandlers();
      sAXReader0.addHandler("JFc\"7S[X)'k", (ElementHandler) null);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.addHandler("JFc\"7S[X)'k", (ElementHandler) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputSource inputSource0 = new InputSource("");
      inputSource0.setCharacterStream((Reader) null);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl2);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl7 = new Locator2Impl();
      Locator2Impl locator2Impl8 = new Locator2Impl(locator2Impl5);
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl10 = new Locator2Impl(locatorImpl1);
      Locator2Impl locator2Impl11 = new Locator2Impl();
      Locator2Impl locator2Impl12 = new Locator2Impl();
      Locator2Impl locator2Impl13 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl14 = new Locator2Impl(locator2Impl5);
      Locator2Impl locator2Impl15 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl16 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl17 = new Locator2Impl(locator2Impl7);
      Locator2Impl locator2Impl18 = new Locator2Impl(locator2Impl13);
      Locator2Impl locator2Impl19 = new Locator2Impl();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl5);
      Locator2Impl locator2Impl20 = new Locator2Impl(locator2Impl7);
      Locator2Impl locator2Impl21 = new Locator2Impl();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      locator2Impl17.setXMLVersion("Fi[R5]Kh3n0WM*l");
      Locator2Impl locator2Impl22 = new Locator2Impl(locator2Impl13);
      Locator2Impl locator2Impl23 = new Locator2Impl();
      Locator2Impl locator2Impl24 = new Locator2Impl(locator2Impl14);
      Locator2Impl locator2Impl25 = new Locator2Impl();
      Locator2Impl locator2Impl26 = new Locator2Impl(locator2Impl10);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      File file0 = MockFile.createTempFile("yn#M.G'W2VH=L", "yn#M.G'W2VH=L");
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)18, (byte) (-4));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      documentFactory0.createQName("//tmp/l}Td0gf}Ci", "yn#M.G'W2VH=L");
      sequenceInputStream0.skip((-2123L));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, (byte)24);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      file0.getAbsolutePath();
      mockFileInputStream0.read(byteArray0);
      mockFileInputStream0.skip(534L);
      mockFileInputStream0.skip((byte)21);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, (byte)21);
      HandlerBase handlerBase0 = new HandlerBase();
      InputSource inputSource0 = new InputSource("yn#M.G'W2VH=L");
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0, false);
      XMLFilter xMLFilter0 = sAXReader0.getXMLFilter();
      sAXReader1.installXMLFilter(xMLFilter0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.4383740327894543
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      File file0 = MockFile.createTempFile("yn#M.G'W2VH=L", "yn#M.G'W2VH=L");
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)18, (byte) (-4));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      byteArrayInputStream0.mark((byte) (-6));
      sequenceInputStream0.skip((-2123L));
      sAXReader0.setEncoding("f|(Bbai3e5`1");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.read(byteArray0);
      mockFileInputStream0.read();
      mockFileInputStream0.skip(534L);
      mockFileInputStream0.skip((byte)21);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, (byte)21);
      try { 
        sAXReader0.read((InputStream) null, "yn#M.G'W2VH=L");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/yn (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/yn (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      QName qName0 = QName.get("^`U!B");
      QName qName1 = QName.get("xySA<_V^", "7p");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      BeanElement beanElement0 = new BeanElement(qName1, "cy");
      Element element0 = beanElement0.createCopy("//tmp/WJI*y/U*|Qu3,j0]60![@5");
      QName qName2 = defaultDocumentFactory0.createQName("//tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D/org.dom4j.QName@f9cf668b [name: yn#M.G'W2VH=L namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]/reh&,D#`$0CcY+~V0Error on line ", "7p", "7p");
      qName2.toString();
      defaultDocumentFactory0.createAttribute(element0, qName2, "0D0");
      qName0.getQualifiedName();
      element0.getQualifiedName();
      QName qName3 = defaultDocumentFactory0.createQName("vnNFV,q1>2pr,m\"", "^`U!B", "&l7-MP'jS{1#{Xg1 ;V");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction("$~*D5\u0000cjW;u1/", "7p");
      defaultDocumentFactory0.createElement(qName3);
      MockFile.createTempFile("//tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D/org.dom4j.QName@f9cf668b [name: yn#M.G'W2VH=L namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]/reh&,D#`$0CcY+~V0Error on line ", "7p");
      SAXReader sAXReader0 = new SAXReader((String) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("$~*D5\u0000cjW;u1/");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/Joh3$30`<jp", "org.dom4j.QName@4a226f25 [name: //tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D/org.dom4j.QName@f9cf668b [name: yn#M.G'W2VH=L namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]/reh&,D#`$0CcY+~V0Error on line  namespace: \"org.dom4j.Namespace@babe [Namespace: prefix 7p mapped to URI \"7p\"]\"]");
      Document document0 = ((DefaultElement) element0).getDocument();
      assertNull(document0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QName qName0 = QName.get("^`U!B");
      QName qName1 = QName.get("xySA<_V^", "7p");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName.get("=#3GY,7WritbR");
      BeanElement beanElement0 = new BeanElement(qName1, "cy");
      DOMNamespace dOMNamespace0 = new DOMNamespace("//tmp/WJI*y/U*|Qu3,j0]60![@5", "2-m%*g7I?L`=u");
      beanElement0.elements("xySA<_V^", (Namespace) dOMNamespace0);
      beanElement0.addEntity((String) null, "^`U!B");
      Element element0 = beanElement0.createCopy("//tmp/WJI*y/U*|Qu3,j0]60![@5");
      QName qName2 = defaultDocumentFactory0.createQName("//tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D/org.dom4j.QName@f9cf668b [name: yn#M.G'W2VH=L namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]/reh&,D#`$0CcY+~V0Error on line ", "7p", "7p");
      beanElement0.content();
      element0.elementByID("//tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D/org.dom4j.QName@f9cf668b [name: yn#M.G'W2VH=L namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]/reh&,D#`$0CcY+~V0Error on line ");
      qName1.equals(qName2);
      defaultDocumentFactory0.createAttribute(element0, qName2, "0D0");
      qName0.getQualifiedName();
      QName qName3 = defaultDocumentFactory0.createQName("cy");
      Object object0 = new Object();
      qName3.equals(object0);
      Namespace namespace0 = new Namespace("XBaSH", "-Sa3&|k");
      QName.get("cy", namespace0);
      defaultDocumentFactory0.createElement(qName3);
      SAXReader sAXReader0 = new SAXReader((String) null);
      MockFile.createTempFile(":lED;(SHx", "//tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D/org.dom4j.QName@f9cf668b [name: yn#M.G'W2VH=L namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]/reh&,D#`$0CcY+~V0Error on line ");
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      pipedInputStream0.close();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.setColumnNumber(30);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl3);
      Locator2Impl locator2Impl8 = new Locator2Impl(locator2Impl6);
      Locator2Impl locator2Impl9 = new Locator2Impl();
      Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl11 = new Locator2Impl(locator2Impl6);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl12 = new Locator2Impl(locator2Impl11);
      Locator2Impl locator2Impl13 = new Locator2Impl();
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl14 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl15 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl16 = new Locator2Impl();
      Locator2Impl locator2Impl17 = new Locator2Impl();
      Locator2Impl locator2Impl18 = new Locator2Impl();
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.083122122960416
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      SAXParseException sAXParseException0 = new SAXParseException("vfIgoaY?G(rr0", locator2Impl0);
      SAXParseException sAXParseException1 = new SAXParseException("//tmp/-Sa3@|N07p", "//tmp/-Sa3@|N07p", "http://xml.org/sax/features/namespace-prefixes", 58, 58, sAXParseException0);
      xMLFilterImpl1.error(sAXParseException1);
      sAXReader0.configureReader(xMLFilterImpl1, (DefaultHandler) null);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.createContentHandler(parserAdapter0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-104);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("G");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|6");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("e", "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " : ");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3872942996011255
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      Reader reader0 = null;
      SAXReader sAXReader0 = new SAXReader();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      try { 
        sAXReader0.read("s;");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/s; (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/s; (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      StringReader stringReader0 = new StringReader("[ prefix: ");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@6f63a3dc Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@6f63a3dc Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.312129845596213
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.resetHandlers();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.resetHandlers();
      dispatchHandler0.setDefaultHandler(dispatchHandler0);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.notationDecl((String) null, (String) null, (String) null);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      handlerBase0.resolveEntity("org.dom4j.tree.FlyweightText", (String) null);
      handlerBase0.resolveEntity((String) null, (String) null);
      handlerBase0.startDocument();
      handlerBase0.endElement("");
      sAXReader0.setErrorHandler(handlerBase0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.getXMLFilter();
      sAXReader0.isIgnoreComments();
      sAXReader0.isStringInternEnabled();
      EntityResolver entityResolver0 = sAXReader0.createDefaultEntityResolver("JFc\"7S[X)'k");
      sAXReader0.resetHandlers();
      sAXReader0.addHandler("JFc\"7S[X)'k", dispatchHandler0);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.addHandler("JFc\"7S[X)'k", dispatchHandler0);
      sAXReader0.getErrorHandler();
      try { 
        sAXReader0.setProperty("org.dom4j.tree.AbstractAttribute", entityResolver0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'org.dom4j.tree.AbstractAttribute' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      try { 
        pipedInputStream0.connect(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.installXMLFilter((XMLReader) null);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      Object object0 = new Object();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Object object1 = new Object();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl5 = new Locator2Impl();
      locator2Impl2.setColumnNumber(2147483645);
      locator2Impl4.setSystemId("h");
      locator2Impl4.setSystemId("Zt");
      locator2Impl0.setLineNumber(774);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl5);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      locator2Impl1.setSystemId("//tmp/tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D09M*^stCOT5e");
      MockFile mockFile0 = new MockFile("Q%}oX=O\"", "h");
      mockFile0.mkdir();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 774);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      try { 
        sAXReader0.read((InputStream) pushbackInputStream0, "//tmp/tmp/yn#M.G'W2VH=L0/tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D0org.dom4j.io.SAXReader$SAXEntityResolver");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = new Object();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Object object1 = new Object();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl5);
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl6);
      Locator2Impl locator2Impl8 = new Locator2Impl();
      Locator2Impl locator2Impl9 = new Locator2Impl();
      Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl9);
      locator2Impl10.setColumnNumber((-783));
      locatorImpl0.setSystemId(" of document ");
      Locator2Impl locator2Impl11 = new Locator2Impl(locator2Impl3);
      locator2Impl11.setSystemId("//tmp/$~*D5\u0000cjW;u1/07p");
      locator2Impl6.setLineNumber((-783));
      Locator2Impl locator2Impl12 = new Locator2Impl(locator2Impl10);
      Locator2Impl locator2Impl13 = new Locator2Impl();
      Locator2Impl locator2Impl14 = new Locator2Impl(locator2Impl11);
      Locator2Impl locator2Impl15 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl16 = new Locator2Impl();
      locator2Impl1.setSystemId("F:");
      locator2Impl16.setSystemId("");
      locator2Impl11.setPublicId("F:");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Object object2 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity(" of document ", "//tmp/Namespace0(*y8n");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      pipedInputStream0.close();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream2 = null;
      try {
        pipedInputStream2 = new PipedInputStream(pipedOutputStream0, 2232);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      Object object0 = new Object();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.setSystemId("$^");
      locator2Impl1.setLineNumber(1161);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      SAXParseException sAXParseException0 = new SAXParseException("Q", locator2Impl1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      locatorImpl0.setPublicId("$^");
      sAXReader0.createContentHandler(xMLFilterImpl0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      QName qName0 = QName.get("^`U!B");
      QName qName1 = QName.get("xySA<_V^", "7p");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      IndexedElement indexedElement0 = new IndexedElement("//tmp/tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D/org.dom4j.QName@f9cf668b [name: yn#M.G'W2VH=L namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]/reh&,D#`$0CcY+~V0Error on line 0!\"");
      qName1.equals(qName0);
      QName qName2 = defaultDocumentFactory0.createQName("cy");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      Namespace namespace0 = new Namespace("XBaSH", "-Sa3&|k");
      QName.get("cy", namespace0);
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction("7p", "7p");
      defaultDocumentFactory0.createElement(qName2);
      MockFile.createTempFile("//tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D/org.dom4j.QName@f9cf668b [name: yn#M.G'W2VH=L namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]/reh&,D#`$0CcY+~V0Error on line ", "7p");
      SAXReader sAXReader0 = new SAXReader((String) null);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertTrue(boolean0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createDefaultEntityResolver("");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      int int0 = 0;
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, (-1693));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Object object0 = new Object();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl2);
      locatorImpl0.getColumnNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl1);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl4);
      Locator2Impl locator2Impl5 = new Locator2Impl(locatorImpl1);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl0);
      locator2Impl1.setColumnNumber(47);
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl4);
      locator2Impl10.getSystemId();
      locator2Impl10.setSystemId("F:");
      locator2Impl2.getLineNumber();
      locator2Impl5.setLineNumber((-3143));
      Locator2Impl locator2Impl11 = new Locator2Impl(locator2Impl6);
      Locator2Impl locator2Impl12 = new Locator2Impl();
      locator2Impl1.setLineNumber(58);
      Locator2Impl locator2Impl13 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl14 = new Locator2Impl(locator2Impl5);
      Locator2Impl locator2Impl15 = new Locator2Impl();
      MockFile.createTempFile("log?CJBe9q=FV87Ke)%", (String) null);
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("log?CJBe9q=FV87Ke)%");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class log?CJBe9q=FV87Ke)% not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("ayM@H967nUm-\"g", "Validation not supported for XMLReader: ");
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      StringReader stringReader0 = new StringReader("iLJKaZgX]");
      stringReader0.read();
      sAXReader0.isIncludeInternalDTDDeclarations();
      DOMDocument dOMDocument0 = new DOMDocument("iLJKaZgX]");
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      sAXReader0.setStripWhitespaceText(true);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      dispatchHandler0.addHandler("Comment", (ElementHandler) null);
      ElementStack elementStack0 = new ElementStack();
      Element[] elementArray0 = new Element[2];
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      BaseElement baseElement0 = new BaseElement(" PUBLIC \"", (Namespace) null);
      baseElement0.element("iLJKaZgX]");
      elementArray0[0] = null;
      QName qName0 = namespaceStack0.getQName("D/\"VKnp=v}w%", " PUBLIC \"", "//tmp/l}Td0l}Td");
      BeanElement beanElement0 = new BeanElement(qName0);
      elementArray0[1] = (Element) beanElement0;
      elementStack0.stack = elementArray0;
      dispatchHandler0.resetHandlers();
      assertEquals(0, dispatchHandler0.getActiveHandlerCount());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.addHandler("//tmp/).'S#`tK*S(Hi0.tmp", sAXModifyElementHandler0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.removeHandler("//tmp/yn#M.G'W2VH=L0 attributes: ");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)5;
      byte byte0 = (byte)111;
      byteArray0[2] = (byte)92;
      byte byte1 = (byte)53;
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      StringReader stringReader0 = new StringReader("/K#");
      try { 
        sAXReader0.read((Reader) stringReader0, "/K#");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///K# : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl3);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl2);
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl6 = new Locator2Impl();
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl6);
      Locator2Impl locator2Impl8 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl9 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl10 = new Locator2Impl();
      locator2Impl2.setColumnNumber((-115));
      Locator2Impl locator2Impl11 = new Locator2Impl();
      Locator2Impl locator2Impl12 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl13 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl14 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl15 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl16 = new Locator2Impl(locator2Impl11);
      Locator2Impl locator2Impl17 = new Locator2Impl();
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl17);
      Locator2Impl locator2Impl18 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl19 = new Locator2Impl();
      Locator2Impl locator2Impl20 = new Locator2Impl(locator2Impl19);
      Locator2Impl locator2Impl21 = new Locator2Impl(locator2Impl12);
      Locator2Impl locator2Impl22 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      locator2Impl15.setXMLVersion("Fi[R5n]Kh3n0WM*l");
      Locator2Impl locator2Impl23 = new Locator2Impl(locator2Impl12);
      Locator2Impl locator2Impl24 = new Locator2Impl();
      Locator2Impl locator2Impl25 = new Locator2Impl(locator2Impl15);
      Locator2Impl locator2Impl26 = new Locator2Impl(locator2Impl17);
      Object object0 = new Object();
      try { 
        sAXReader0.read("Fi[R5n]Kh3n0WM*l");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: Fi[R5n]Kh3n0WM*l Nested exception: no protocol: Fi[R5n]Kh3n0WM*l
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      QName qName0 = QName.get("cy", "cy", "^`U!B");
      QName qName1 = QName.get("xHSA<_V^", "7p");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      BeanElement beanElement0 = new BeanElement(qName1);
      Element element0 = beanElement0.createCopy("^`U!B");
      QName.get("^`U!B", "quot", "cy");
      QName qName2 = defaultDocumentFactory0.createQName("xHSA<_V^");
      defaultDocumentFactory0.createQName("cy", "7p");
      Namespace namespace0 = Namespace.get("xHSA<_V^", "rsfcs]A=%n");
      QName.get("]q1", namespace0);
      defaultDocumentFactory0.createAttribute(element0, qName2, "-indentSize");
      qName0.getQualifiedName();
      QName qName3 = defaultDocumentFactory0.createQName("cy");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      qName3.getQualifiedName();
      Namespace namespace1 = new Namespace("//tmp/l}Td0l}Td", "//tmp/tmp/Namespace0(*y80Joh3A3");
      qName3.equals("//tmp/tmp/Namespace0(*y80Joh3A3");
      qName3.getQualifiedName();
      QName.get("OiJ=hn$T8HrA0", namespace1);
      Namespace namespace2 = new Namespace("XBaSOl#", "-S3&|u");
      QName.get("cy", namespace2);
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("//tmp/l}Td0l}Td", "^`U!B");
      defaultDocumentFactory0.createElement(qName3);
      SAXReader sAXReader0 = new SAXReader((String) null);
      StringReader stringReader0 = new StringReader("This ProcessingInstruction is read only");
      try { 
        sAXReader0.read((Reader) stringReader0, "IVL");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/IVL : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName0 = QName.get("3Z95LtUdd%", "No modification allowed");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DOMNamespace dOMNamespace0 = new DOMNamespace("//tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D", "No modification allowed");
      defaultDocumentFactory0.createQName("http://xml.org/sax/features/validation", (Namespace) null);
      qName0.getQualifiedName();
      defaultDocumentFactory0.createQName("P7h*i3`", "P7h*i3`", "reh&,D#`$0CcY+~V");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createProcessingInstruction("P7h*i3`", "K3&bwec^h'>eV&u");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory4.createElement(qName0);
      try { 
        sAXReader0.setFeature("LGTp95yt\"1", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'LGTp95yt\"1' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.596637968520938
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.resetHandlers();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.resetHandlers();
      dispatchHandler0.removeHandler((String) null);
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      handlerBase0.resolveEntity((String) null, (String) null);
      handlerBase0.startDocument();
      handlerBase0.endElement("");
      sAXReader0.setErrorHandler(handlerBase0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.getXMLFilter();
      sAXReader0.isIgnoreComments();
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.createDefaultEntityResolver("JFc\"7S[X)'k");
      sAXReader0.resetHandlers();
      sAXReader0.addHandler("JFc\"7S[X)'k", (ElementHandler) null);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.addHandler("JFc\"7S[X)'k", (ElementHandler) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputSource inputSource0 = new InputSource("");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLReader((XMLReader) null);
      Object object0 = new Object();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Object object1 = new Object();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl3);
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl6 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.4659347197057815
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      sAXReader1.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader1.setXMLFilter(xMLFilterImpl0);
      SAXReader sAXReader2 = new SAXReader();
      try { 
        sAXReader1.read((Reader) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory.getInstance();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setValidation(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocType("//tmp/tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D/org.dom4j.QName@f9cf668b [name: yn#M.G'W2VH=L namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]/reh&,D#`$0CcY+~V0Error on line 0pH", "gKz9ODu>", "//tmp/WJI*y/U*|Qu3,j0/tmp/yn#M.G'W2VH=L0yn#M.G'W2VH=L");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultDocumentFactory0.createQName("org.dom4j.tree.DefaultNamespace");
      defaultDocumentFactory0.createProcessingInstruction("org.dom4j.tree.DefaultNamespace", "http://xml.org/sax/features/string-interning");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      sAXReader0.isValidating();
      MockFile.createTempFile("yn#M.G'W2VH=L", "yn#M.G'W2VH=L");
      DOMDocument dOMDocument0 = new DOMDocument("yn#M.G'W2VH=L");
      assertEquals(NodeType.DOCUMENT_NODE, dOMDocument0.getNodeTypeEnum());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.333443371183037
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      QName qName0 = QName.get("^`U!B");
      QName.get("xySA<_V^", "7p");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      qName0.getQualifiedName();
      QName qName1 = defaultDocumentFactory0.createQName("vnNFV,q1>2pr,m\"", "^`U!B", "&l7-MP'jS{1#{Xg1 ;V");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.pop("hh|Y:h<Qs0S{^9");
      QName.get("xySA<_V^", (Namespace) null);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createProcessingInstruction("$~*D5\u0000cjW;u1/", "org.dom4j.tree.AbstractEntity");
      defaultDocumentFactory0.createElement(qName1);
      MockFile mockFile0 = new MockFile("+(-Kvz~3fj$]aTQ~c-l");
      URL uRL0 = mockFile0.toURL();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory1, false);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/+(-Kvz~3fj$]aTQ~c-l (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/+(-Kvz~3fj$]aTQ~c-l (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '3';
      charArray0[2] = '+';
      charArray0[3] = 'T';
      charArray0[4] = 'd';
      xMLFilterImpl0.characters(charArray0, 0, 0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getEncoding();
      sAXReader0.setStringInternEnabled(true);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)96;
      byteArray1[1] = (byte)27;
      byteArray1[2] = (byte)69;
      byteArray1[3] = (byte) (-104);
      byteArray1[4] = (byte)70;
      byteArray1[5] = (byte) (-104);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("G");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|6");
      sAXReader_SAXEntityResolver0.resolveEntity("e", "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " : ");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      SAXReader sAXReader0 = new SAXReader((String) null);
      MockFile mockFile0 = new MockFile("b");
      mockFile0.getAbsolutePath();
      mockFile0.setExecutable(false, false);
      mockFile0.mkdir();
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.getDispatchHandler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DOMDocument dOMDocument0 = new DOMDocument();
      int int0 = 1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)5;
      byte byte0 = (byte)111;
      byteArray0[2] = (byte)92;
      byte byte1 = (byte)53;
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("/KRQsJ.J62?s]G", (String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStripWhitespaceText(false);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Object object0 = new Object();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      locator2Impl3.getLineNumber();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl8 = new Locator2Impl();
      Locator2Impl locator2Impl9 = new Locator2Impl();
      Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl1);
      locator2Impl2.getColumnNumber();
      locator2Impl1.setColumnNumber(0);
      Locator2Impl locator2Impl11 = new Locator2Impl(locatorImpl0);
      locator2Impl0.setLineNumber(438);
      Locator2Impl locator2Impl12 = new Locator2Impl(locatorImpl1);
      Locator2Impl locator2Impl13 = new Locator2Impl(locator2Impl2);
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl11);
      locatorImpl2.setLineNumber(438);
      Locator2Impl locator2Impl14 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl15 = new Locator2Impl();
      locator2Impl4.getColumnNumber();
      String string0 = "//tmp/JlT&z0n!|+/\\u `\")kt6ZM+T";
      locator2Impl0.setSystemId(string0);
      locator2Impl3.setPublicId("I<L_p,9^1;L>UGC]Qe");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Object object1 = new Object();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("I<L_p,9^1;L>UGC]Qe");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/Kn(%GV?oGoh0/tmp/[uZrInWD=].1O*2W0RgXvJt#R{g<N", string0);
      try { 
        sAXReader0.setProperty("I<L_p,9^1;L>UGC]Qe", locator2Impl9);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'I<L_p,9^1;L>UGC]Qe' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("cy");
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl5 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      Locator2Impl locator2Impl7 = new Locator2Impl();
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl9 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl10 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl11 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl12 = new Locator2Impl(locator2Impl10);
      Locator2Impl locator2Impl13 = new Locator2Impl(locatorImpl1);
      Locator2Impl locator2Impl14 = new Locator2Impl();
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl5);
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl12);
      Locator2Impl locator2Impl15 = new Locator2Impl(locatorImpl4);
      Locator2Impl locator2Impl16 = new Locator2Impl(locator2Impl13);
      Locator2Impl locator2Impl17 = new Locator2Impl();
      LocatorImpl locatorImpl5 = new LocatorImpl();
      Locator2Impl locator2Impl18 = new Locator2Impl(locator2Impl6);
      Locator2Impl locator2Impl19 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl20 = new Locator2Impl();
      Locator2Impl locator2Impl21 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl22 = new Locator2Impl(locator2Impl21);
      Locator2Impl locator2Impl23 = new Locator2Impl();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      try { 
        sAXReader0.setXMLReaderClassName(",\")");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class ,\") not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName.get("3Z95LtUdd%", "No modification allowed");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DOMNamespace dOMNamespace0 = new DOMNamespace("//tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D", "No modification allowed");
      QName qName0 = QName.get("1p");
      QName.get("3Z95LtUdd%", "//tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      qName0.getQualifiedName();
      String string0 = "n!|+/\\u `\")kt6ZM+T";
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      documentFactory0.createProcessingInstruction("org.jaxen.expr.iter.IterableDescendantAxis", "]60![@5");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      defaultDocumentFactory5.createElement(qName0);
      File file0 = MockFile.createTempFile("Jl&z", string0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.getEncoding();
      sAXReader0.setEncoding("Error on line ");
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)53);
      sAXReader0.getDispatchHandler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 4457);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getErrorHandler();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-124);
      byteArray0[0] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-124), (byte) (-124));
      DefaultDocument defaultDocument0 = new DefaultDocument();
      sAXReader0.getXMLReader();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      sAXReader0.createContentHandler(xMLReader0);
      try { 
        sAXReader0.setFeature("/text()", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '/text()' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.3660231847196305
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((Reader) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStringInternEnabled(true);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.createXMLReader();
      try { 
        sAXReader0.setXMLReaderClassName("8##SEt][JE");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class 8##SEt][JE not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName.get("3Z95LtUdd%", "No modification allowed");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DOMNamespace dOMNamespace0 = new DOMNamespace("//tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D", "No modification allowed");
      QName qName0 = QName.get("1p");
      QName.get("3Z95LtUdd%", "//tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      qName0.getQualifiedName();
      String string0 = "n!|+/\\u `\")kt6ZM+T";
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      defaultDocumentFactory5.createElement(qName0);
      File file0 = MockFile.createTempFile("Jl&z", string0);
      assertTrue(file0.isFile());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIgnoreComments());
      
      sAXReader0.setIgnoreComments(true);
      assertTrue(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl2);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl7 = new Locator2Impl();
      Locator2Impl locator2Impl8 = new Locator2Impl(locator2Impl5);
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl10 = new Locator2Impl(locatorImpl1);
      Locator2Impl locator2Impl11 = new Locator2Impl();
      Locator2Impl locator2Impl12 = new Locator2Impl();
      Locator2Impl locator2Impl13 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl14 = new Locator2Impl(locator2Impl5);
      Locator2Impl locator2Impl15 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl16 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl17 = new Locator2Impl(locator2Impl15);
      Locator2Impl locator2Impl18 = new Locator2Impl(locator2Impl9);
      Locator2Impl locator2Impl19 = new Locator2Impl();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl11);
      Locator2Impl locator2Impl20 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl21 = new Locator2Impl(locator2Impl20);
      Locator2Impl locator2Impl22 = new Locator2Impl();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      Locator2Impl locator2Impl23 = new Locator2Impl(locator2Impl5);
      Locator2Impl locator2Impl24 = new Locator2Impl(locator2Impl13);
      Locator2Impl locator2Impl25 = new Locator2Impl();
      Locator2Impl locator2Impl26 = new Locator2Impl(locator2Impl5);
      Locator2Impl locator2Impl27 = new Locator2Impl();
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null, true);
      try { 
        sAXReader1.setXMLReaderClassName("//tmp/-S3&|u0pp");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/-S3&|u0pp not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      try { 
        sAXReader0.read((Reader) null, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      QName qName0 = QName.get("^`U!B");
      QName qName1 = QName.get("xySA<_V^", "7p");
      BeanElement beanElement0 = new BeanElement(qName1, "cy");
      DOMNamespace dOMNamespace0 = new DOMNamespace("//tmp/WJI*y/U*|Qu3,j0]60![@5", "2-m%*g7I?L`=u");
      beanElement0.elements("xySA<_V^", (Namespace) dOMNamespace0);
      beanElement0.addEntity((String) null, "^`U!B");
      Element element0 = beanElement0.createCopy("//tmp/WJI*y/U*|Qu3,j0]60![@5");
      beanElement0.content();
      element0.elementByID("//tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D/org.dom4j.QName@f9cf668b [name: yn#M.G'W2VH=L namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]\"]/reh&,D#`$0CcY+~V0Error on line ");
      DefaultAttribute defaultAttribute0 = new DefaultAttribute(beanElement0, "7p", "xySA<_V^", dOMNamespace0);
      qName0.getQualifiedName();
      Object object0 = new Object();
      Namespace namespace0 = new Namespace("XBaSH", "-Sa3&|k");
      QName.get("cy", namespace0);
      SAXReader sAXReader0 = new SAXReader((String) null);
      try { 
        sAXReader0.read("//tmp/tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D/org.dom4j.QName@f9cf668b [name: yn#M.G'W2VH=L namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI\"\"]\"]/reh&,D#`$0CcY+~V0Error on line 07p");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D/org.dom4j.QName@f9cf668b [name: yn#M.G'W2VH=L namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI\"\"]\"]/reh&,D#`$0CcY+~V0Error on line 07p Nested exception: no protocol: //tmp/tmp/gh\"(*A)~Z0{wO@wVrEL\"iP_D/org.dom4j.QName@f9cf668b [name: yn#M.G'W2VH=L namespace: \"org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI\"\"]\"]/reh&,D#`$0CcY+~V0Error on line 07p
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1194);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      try { 
        pipedInputStream0.connect(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl1);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl1);
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl6 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl8 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl5);
      Locator2Impl locator2Impl11 = new Locator2Impl();
      Locator2Impl locator2Impl12 = new Locator2Impl();
      Locator2Impl locator2Impl13 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl14 = new Locator2Impl(locator2Impl11);
      Locator2Impl locator2Impl15 = new Locator2Impl(locator2Impl11);
      Locator2Impl locator2Impl16 = new Locator2Impl(locator2Impl7);
      Locator2Impl locator2Impl17 = new Locator2Impl(locator2Impl14);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl4);
      Locator2Impl locator2Impl18 = new Locator2Impl(locator2Impl7);
      Locator2Impl locator2Impl19 = new Locator2Impl();
      Locator2Impl locator2Impl20 = new Locator2Impl(locator2Impl17);
      Locator2Impl locator2Impl21 = new Locator2Impl(locator2Impl14);
      Locator2Impl locator2Impl22 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl23 = new Locator2Impl(locator2Impl15);
      Locator2Impl locator2Impl24 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl25 = new Locator2Impl();
      Locator2Impl locator2Impl26 = new Locator2Impl(locator2Impl19);
      Locator2Impl locator2Impl27 = new Locator2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader1 = new SAXReader(parserAdapter0);
      // Undeclared exception!
      try { 
        sAXReader1.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      QName.get("^`U!B");
      String string0 = "7p";
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl8 = new Locator2Impl();
      Locator2Impl locator2Impl9 = new Locator2Impl();
      Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl8);
      Locator2Impl locator2Impl11 = new Locator2Impl(locator2Impl6);
      Locator2Impl locator2Impl12 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl13 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl14 = new Locator2Impl(locator2Impl10);
      Locator2Impl locator2Impl15 = new Locator2Impl(locator2Impl7);
      Locator2Impl locator2Impl16 = new Locator2Impl();
      LocatorImpl locatorImpl2 = new LocatorImpl();
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl2);
      Locator2Impl locator2Impl17 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl18 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl19 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl20 = new Locator2Impl(locator2Impl16);
      Locator2Impl locator2Impl21 = new Locator2Impl(locator2Impl10);
      Locator2Impl locator2Impl22 = new Locator2Impl();
      Locator2Impl locator2Impl23 = new Locator2Impl(locator2Impl21);
      Locator2Impl locator2Impl24 = new Locator2Impl();
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader(",\")", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class ,\") not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }
}
