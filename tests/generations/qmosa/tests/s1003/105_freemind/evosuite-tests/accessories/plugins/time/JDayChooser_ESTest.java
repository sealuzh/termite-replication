/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 12:13:12 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTEventMulticaster;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.TextArea;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.sql.Time;
import java.text.DateFormatSymbols;
import java.text.Format;
import java.text.ParsePosition;
import java.time.format.DateTimeParseException;
import java.util.Date;
import java.util.Locale;
import java.util.concurrent.Callable;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import javax.help.ForwardAction;
import javax.help.plaf.basic.BasicContentViewerUI;
import javax.swing.ActionMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableModel;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.SVGSVGElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.css.parser.Parser;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.script.InterpreterPool;
import org.apache.batik.util.ParsedURL;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.pdf.PDFInfo;
import org.apache.xalan.processor.StylesheetHandler;
import org.apache.xalan.processor.TransformerFactoryImpl;
import org.apache.xalan.processor.XSLTSchema;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xml.dtm.ref.CoroutineManager;
import org.apache.xml.dtm.ref.IncrementalSAXSource_Filter;
import org.apache.xml.utils.ListingErrorHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Session;
import org.hsqldb.lib.FileUtil;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2108945527858195
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(true);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.getActionMap();
      ActionMap actionMap0 = new ActionMap();
      actionMap0.keys();
      actionMap0.getParent();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0);
      Callable<Format.Field> callable0 = (Callable<Format.Field>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      scheduledThreadPoolExecutor0.schedule(callable0, (long) 1, timeUnit0);
      CoroutineManager coroutineManager0 = new CoroutineManager();
      IncrementalSAXSource_Filter incrementalSAXSource_Filter0 = new IncrementalSAXSource_Filter(coroutineManager0, 4);
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      scheduledThreadPoolExecutor0.execute(incrementalSAXSource_Filter0);
      MindMapMode mindMapMode0 = new MindMapMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2402476238006486
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      jDayChooser_DecoratorButton0.paint(graphics2D0);
      jDayChooser0.setMonth(140);
      BasicScrollBarUI basicScrollBarUI0 = new BasicScrollBarUI();
      JMenu jMenu0 = new JMenu();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jMenu0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      JMenu jMenu1 = new JMenu("day");
      jMenu1.isOpaque();
      FileUtil.getDefaultInstance();
      jMenu0.getItem(0);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.164813263462051
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getGraphics();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      fopImage_ImageInfo0.dpiHorizontal = (double) 0;
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo0);
      fopImage_ImageInfo1.str = "@}<JFk[m((p*PW+S";
      jpegImage1.load(1541);
      FopImage.ImageInfo fopImage_ImageInfo2 = new FopImage.ImageInfo();
      jpegImage1.getColorSpace();
      BasicScrollBarUI basicScrollBarUI0 = new BasicScrollBarUI();
      JPanel jPanel0 = new JPanel(basicScrollBarUI0);
      Color.RGBtoHSB(74, 0, 9, (float[]) null);
      jDayChooser0.setDay(40);
      jDayChooser0.setFocus();
      jDayChooser0.setMonth(0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1337304777448702
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JPasswordField jPasswordField0 = new JPasswordField("day");
      jDayChooser0.init();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo1);
      jpegImage1.load(0);
      FopImage.ImageInfo fopImage_ImageInfo2 = new FopImage.ImageInfo();
      JpegImage jpegImage2 = new JpegImage(fopImage_ImageInfo2);
      jpegImage1.load((-155));
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.SMALL_CAPS;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)SVGSVGElementBridge.TEXT_COMPOUND_DELIMITER;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (-155), (String) null, 0);
      Integer integer1 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_ALL;
      Integer.compareUnsigned(0, 0);
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser_DecoratorButton0, 0, (String) null, (-3621L), 40);
      actionEvent1.setSource(jDayChooser_DecoratorButton0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.16480169407465
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      bufferedImage0.getSource();
      jDayChooser0.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      jDayChooser_DecoratorButton0.paint(graphics2D0);
      jDayChooser0.setMonth(2136);
      BasicScrollBarUI basicScrollBarUI0 = new BasicScrollBarUI();
      JPanel jPanel0 = new JPanel(basicScrollBarUI0);
      JMenu jMenu0 = new JMenu();
      jMenu0.getItem(451);
      jDayChooser0.initDecorations();
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.169980761415708
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-102);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-783), false);
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "day";
      jDayChooser0.getCursor();
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.setSundayForeground(color0);
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.166096497161088
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      System.setCurrentTimeMillis(0L);
      SystemColor systemColor1 = SystemColor.textHighlight;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, (DocumentLoader) null);
      FlowLayout flowLayout0 = new FlowLayout(0, 0, 2);
      JPanel jPanel0 = new JPanel(flowLayout0);
      JMenu jMenu0 = new JMenu();
      JMenuItem jMenuItem0 = new JMenuItem();
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      PDFInfo pDFInfo0 = new PDFInfo();
      MockDate mockDate0 = new MockDate(0, 0, 0);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      parsePosition0.setErrorIndex((-1993));
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      MockSimpleDateFormat mockSimpleDateFormat1 = new MockSimpleDateFormat("day");
      Date date0 = mockSimpleDateFormat1.parse("|yZ", parsePosition0);
      assertNull(date0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1247934888088933
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo1);
      jpegImage1.load(0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-620.957999), (-620.957999), 0.0);
      GraphicContext graphicContext0 = new GraphicContext(affineTransform0);
      graphicContext0.getRenderingHints();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      BasicScrollBarUI basicScrollBarUI0 = new BasicScrollBarUI();
      CardLayout cardLayout0 = new CardLayout(0, 37);
      JPanel jPanel0 = new JPanel(cardLayout0);
      JMenu jMenu0 = new JMenu();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      ParsePosition parsePosition0 = new ParsePosition((-1870));
      ParsePosition parsePosition1 = new ParsePosition(240);
      parsePosition1.setErrorIndex(0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      MockSimpleDateFormat mockSimpleDateFormat1 = null;
      try {
        mockSimpleDateFormat1 = new MockSimpleDateFormat("org.apache.xml.utils.BoolStack");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      System.setCurrentTimeMillis(0L);
      SystemColor systemColor1 = SystemColor.textHighlight;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, (DocumentLoader) null);
      FlowLayout flowLayout0 = new FlowLayout(0, 0, 2);
      JPanel jPanel0 = new JPanel(flowLayout0);
      JMenu jMenu0 = new JMenu();
      jMenu0.getItem(40);
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(userAgentAdapter0, 1054, "28", 1054, 1576);
      actionEvent0.paramString();
      jDayChooser0.setMonth(203);
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo1);
      jpegImage1.load(6);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getDecorationBackgroundColor();
      ActionEvent actionEvent0 = new ActionEvent(fopImage_ImageInfo0, 32, (String) null, 32);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.202126450032692
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jDayChooser0.setEnabled(true);
      jDayChooser0.getLocale();
      JMenu jMenu0 = new JMenu();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.load(3180);
      jpegImage0.load(0);
      jpegImage0.getColorSpace();
      System.setCurrentTimeMillis(0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1777463326500266
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 32;
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      ActionMap actionMap1 = jDayChooser0.getActionMap();
      actionMap1.keys();
      jDayChooser0.setActionMap(actionMap0);
      Parser parser0 = new Parser();
      parser0.getLocale();
      jDayChooser0.setMaxDayCharacters(32);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2401873239899905
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 47);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWeekdayForeground();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      int int0 = 12;
      ParsePosition parsePosition0 = new ParsePosition(12);
      parsePosition0.setIndex(12);
      parsePosition0.setErrorIndex(12);
      parsePosition0.setIndex(1364);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.getSundayForeground();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getSelectedDay();
      long long0 = (-74L);
      int int1 = (-946);
      ClassLoader.getSystemClassLoader();
      try { 
        MockURL.URL("day");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: day
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.297856834966921
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(1584);
      boolean boolean0 = true;
      jDayChooser0.setDecorationBackgroundVisible(true);
      Color color0 = Color.BLUE;
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      TransformerFactoryImpl transformerFactoryImpl0 = new TransformerFactoryImpl();
      StylesheetHandler stylesheetHandler0 = new StylesheetHandler(transformerFactoryImpl0);
      XSLTSchema xSLTSchema0 = stylesheetHandler0.getSchema();
      ListingErrorHandler listingErrorHandler0 = new ListingErrorHandler();
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(xSLTSchema0, listingErrorHandler0);
      stylesheetRoot0.getOutputComposed();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.setFocus();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2, 1, 983, 1584, 'p');
      jDayChooser0.keyReleased(keyEvent0);
      ParsePosition parsePosition0 = new ParsePosition(983);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("org/apache/xalan/res/XSLTInfo.properties");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1345640533967067
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JPasswordField jPasswordField0 = new JPasswordField("day");
      Locale locale0 = Locale.PRC;
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo0);
      jpegImage1.load(0);
      FopImage.ImageInfo fopImage_ImageInfo2 = new FopImage.ImageInfo();
      JpegImage jpegImage2 = new JpegImage(fopImage_ImageInfo2);
      FlowLayout flowLayout0 = new FlowLayout(8786, 0, (-155));
      JPanel jPanel0 = new JPanel(flowLayout0);
      JMenu jMenu0 = new JMenu();
      jMenu0.getItem(3306);
      JDayChooser jDayChooser1 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 25, " ORDER BY PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, KEY_SEQ", 1576, 34);
      ActionEvent actionEvent1 = new ActionEvent("28", 29, " ORDER BY PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, KEY_SEQ", 1576);
      actionEvent1.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.240224004636059
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = true;
      jDayChooser0.firePropertyChange("{", false, true);
      Color color0 = jDayChooser0.getSundayForeground();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1647), (-2372), 33);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-178.8393F);
      floatArray1[1] = (-178.8393F);
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-178.8393F);
      floatArray1[4] = (-178.8393F);
      color0.getColorComponents(floatArray1);
      jDayChooser0.sundayForeground = color0;
      floatArray0[1] = (-178.8393F);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.isDecorationBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2359212217022537
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JPasswordField jPasswordField0 = new JPasswordField("day");
      jDayChooser0.init();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo1);
      FopImage.ImageInfo fopImage_ImageInfo2 = new FopImage.ImageInfo();
      JpegImage jpegImage2 = new JpegImage(fopImage_ImageInfo2);
      jpegImage1.load((-155));
      jDayChooser0.getDecorationBackgroundColor();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.SMALL_CAPS;
      ActionEvent actionEvent0 = new ActionEvent(integer0, 40, "14", 13);
      Integer integer1 = StrokingTextPainter.WRITING_MODE_TTB;
      Integer.getInteger("%?", 42);
      ActionEvent actionEvent1 = new ActionEvent(integer1, 0, "Metal", 0, 16);
      SystemColor systemColor0 = SystemColor.controlText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      Locale locale0 = Locale.CHINESE;
      locale0.hasExtensions();
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3076269798118125
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      jDayChooser0.getDaysInMonth();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      float[] floatArray0 = new float[5];
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1003.1F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1346.19F);
      floatArray0[4] = (-2186.859F);
      color0.getRGBComponents(floatArray0);
      jDayChooser0.setSundayForeground(color0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      jDayChooser0.focusLost((FocusEvent) null);
      jDayChooser0.updateUI();
      System.setCurrentTimeMillis(28);
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = (-783);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-783));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -783
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      float[] floatArray0 = new float[7];
      jpegImage0.load(419);
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 7;
      floatArray0[2] = (float) 1;
      fopImage_ImageInfo0.dpiVertical = 8.64;
      floatArray0[3] = (float) 419;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = 20.0F;
      Color.RGBtoHSB(419, (-275), 419, floatArray0);
      jpegImage0.load(4);
      SystemColor systemColor0 = SystemColor.controlShadow;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3076269798118125
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      ActionMap actionMap1 = jDayChooser0.getActionMap();
      actionMap1.keys();
      actionMap0.getParent();
      jDayChooser0.setActionMap((ActionMap) null);
      jDayChooser0.getActionMap();
      jDayChooser0.drawWeeks();
      Time time0 = new Time(1809L);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setMonth(1552);
      jDayChooser0.setAlwaysFireDayProperty(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.getSundayForeground();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.init();
      jDayChooser0.drawDays();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      JMonthChooser jMonthChooser1 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser1);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      jDayChooser0.setMonth(35);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1016774865834456
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis(539L);
      JDayChooser jDayChooser0 = new JDayChooser();
      Character.valueOf('T');
      Character.getName(460);
      Color color0 = Color.getHSBColor((-826.9F), 0.0721F, 0.0F);
      jDayChooser0.setForeground(color0);
      int int0 = JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
      TextArea textArea0 = null;
      try {
        textArea0 = new TextArea();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.205497927762563
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("{", false, true);
      Color color0 = jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-178.8393F);
      floatArray1[1] = (-178.8393F);
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-178.8393F);
      floatArray1[4] = (-178.8393F);
      color0.getColorComponents(floatArray1);
      jDayChooser0.sundayForeground = color0;
      floatArray0[1] = (-178.8393F);
      floatArray0[2] = 1950.0F;
      floatArray0[3] = (-1203.718F);
      floatArray0[4] = 1958.8638F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-2699.0625F);
      color0.getRGBComponents(floatArray0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setMinSelectableDate((Date) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      System.setCurrentTimeMillis(0L);
      SystemColor systemColor0 = SystemColor.textHighlight;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, (DocumentLoader) null);
      SVGColorProfileElementBridge sVGColorProfileElementBridge1 = new SVGColorProfileElementBridge();
      // Undeclared exception!
      try { 
        sVGColorProfileElementBridge0.createICCColorSpaceExt(bridgeContext0, (Element) null, "day");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.bridge.SVGColorProfileElementBridge", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SystemColor systemColor0 = SystemColor.control;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isWeekOfYearVisible();
      Color.getColor(stringArray0[0], (Color) systemColor0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2130.0F;
      floatArray0[1] = 9.0F;
      floatArray0[2] = (float) 0;
      jpegImage0.getColorSpace();
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1390048668717827
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      SystemColor systemColor0 = SystemColor.textHighlight;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      userAgentAdapter0.getExternalResourceSecurity((ParsedURL) null, (ParsedURL) null);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, (DocumentLoader) null);
      SVGColorProfileElementBridge sVGColorProfileElementBridge1 = new SVGColorProfileElementBridge();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDayBordersVisible();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1609096373188827
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("9", 27);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInputMap();
      jDayChooser0.hasFocus();
      jDayChooser0.setMaxDayCharacters(40);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1286651860090515
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      actionMap0.keys();
      ActionMap actionMap1 = new ActionMap();
      actionMap1.keys();
      actionMap0.getParent();
      Rectangle rectangle0 = jDayChooser0.getVisibleRect();
      jDayChooser0.setActionMap((ActionMap) null);
      jDayChooser0.getActionMap();
      jDayChooser0.setDay(32);
      MindMapMode mindMapMode0 = new MindMapMode();
      mindMapMode0.activate();
      MindMapMode mindMapMode1 = new MindMapMode();
      MindMapMode mindMapMode2 = new MindMapMode();
      mindMapMode2.activate();
      ActionEvent actionEvent0 = new ActionEvent(rectangle0, 48, "day", 37);
      jDayChooser0.isDecorationBackgroundVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Rectangle cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2514735057615276
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setEnabled(true);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo1);
      FopImage.ImageInfo fopImage_ImageInfo2 = new FopImage.ImageInfo();
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo2);
      jpegImage1.load(0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getDecorationBackgroundColor();
      // Undeclared exception!
      try { 
        MockZonedDateTime.parse((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.164728819285683
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo1);
      jpegImage1.load(0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-620.957999), (-620.957999), 0.0);
      GraphicContext graphicContext0 = new GraphicContext(affineTransform0);
      graphicContext0.getRenderingHints();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      BasicScrollBarUI basicScrollBarUI0 = new BasicScrollBarUI();
      CardLayout cardLayout0 = new CardLayout(0, 37);
      JPanel jPanel0 = new JPanel(cardLayout0);
      JMenu jMenu0 = new JMenu();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay((-667));
      Class<BasicContentViewerUI> class0 = BasicContentViewerUI.class;
      jDayChooser0.getListeners(class0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.getSelectedDay();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.181574881785031
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-783));
      jDayChooser0.getActionMap();
      ActionMap actionMap0 = new ActionMap();
      jDayChooser0.setDay((-783));
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, "}}>");
      MindMapMode mindMapMode0 = new MindMapMode();
      int int0 = 43;
      Font font0 = new Font("&qC=Mwa=yaW1j~", 4, 43);
      Font.getFont("day");
      jDayChooser0.setFont(font0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Color color0 = jDayChooser0.decorationBackgroundColor;
      jDayChooser0.setWeekdayForeground(color0);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 22, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@341b86d2
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1699680061509725
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      java.sql.Date date0 = new java.sql.Date(333L);
      jDayChooser0.minSelectableDate = (Date) date0;
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getLocale();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 333L;
      // Undeclared exception!
      try { 
        color0.getRGBComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("{", false, true);
      jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-178.8393F);
      floatArray1[1] = (-178.8393F);
      floatArray1[2] = (-1.0F);
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      TransformerFactoryImpl transformerFactoryImpl0 = new TransformerFactoryImpl();
      StylesheetHandler stylesheetHandler0 = new StylesheetHandler(transformerFactoryImpl0);
      StylesheetHandler stylesheetHandler1 = new StylesheetHandler(transformerFactoryImpl0);
      XSLTSchema xSLTSchema0 = stylesheetHandler1.getSchema();
      ListingErrorHandler listingErrorHandler0 = new ListingErrorHandler();
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(xSLTSchema0, listingErrorHandler0);
      stylesheetRoot0.getOutputComposed();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      Color color0 = Color.MAGENTA;
      float[] floatArray2 = new float[4];
      floatArray2[0] = (float) 2;
      floatArray2[1] = (float) 1;
      floatArray2[2] = (float) 3;
      jDayChooser0.setForeground(color0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getActionMap();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getDecorationBackgroundColor();
      // Undeclared exception!
      try { 
        MockZonedDateTime.parse((CharSequence) "day");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'day' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.21823851167998
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(false);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      FopImage.ImageInfo fopImage_ImageInfo2 = new FopImage.ImageInfo();
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.load(6);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getDecorationBackgroundColor();
      // Undeclared exception!
      try { 
        MockZonedDateTime.parse((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.208313128881091
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo1);
      jpegImage1.load(0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-620.957999), (-620.957999), 0.0);
      GraphicContext graphicContext0 = new GraphicContext(affineTransform0);
      graphicContext0.getRenderingHints();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      BasicScrollBarUI basicScrollBarUI0 = new BasicScrollBarUI();
      CardLayout cardLayout0 = new CardLayout(0, 37);
      JPanel jPanel0 = new JPanel(cardLayout0);
      JMenu jMenu0 = new JMenu();
      jMenu0.getItem(1390);
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, (-1308), 0L, 1849, 37, '8');
      jMenu0.getItem(1630);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2050253724772264
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10020, 10020, 10020, 3, 'X', 0);
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Center";
      stringArray0[1] = "Center";
      stringArray0[2] = "Center";
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.load(0);
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      BasicScrollBarUI basicScrollBarUI0 = new BasicScrollBarUI();
      JPanel jPanel0 = new JPanel(basicScrollBarUI0);
      Color.RGBtoHSB(3, (-10), 0, (float[]) null);
      jDayChooser0.setDay(0);
      jDayChooser0.setFocus();
      jDayChooser0.setMonth(74);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2442337276763165
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-783));
      jDayChooser0.getActionMap();
      ActionMap actionMap0 = new ActionMap();
      jDayChooser0.setDay((-783));
      MindMapMode mindMapMode0 = new MindMapMode();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      JpegImage jpegImage1 = new JpegImage(fopImage_ImageInfo1);
      jpegImage0.load(1518);
      FopImage.ImageInfo fopImage_ImageInfo2 = new FopImage.ImageInfo();
      BasicScrollBarUI basicScrollBarUI0 = new BasicScrollBarUI();
      CardLayout cardLayout0 = new CardLayout((-1241), 0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      JPanel jPanel0 = new JPanel(cardLayout0);
      Color.RGBtoHSB(0, 2010, 4, (float[]) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDay(43);
      jDayChooser1.setFocus();
      jDayChooser1.setMonth(0);
      jDayChooser1.getWeekdayForeground();
      assertEquals(31, jDayChooser1.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1647413942639915
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDay((-275));
      jDayChooser0.setYear((-275));
      jDayChooser0.setAlwaysFireDayProperty(true);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      float[] floatArray0 = new float[7];
      jpegImage0.load(419);
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 7;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 419;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = 20.0F;
      float[] floatArray1 = Color.RGBtoHSB(419, (-275), 419, floatArray0);
      jpegImage0.getColorSpace();
      SystemColor systemColor0 = SystemColor.controlShadow;
      // Undeclared exception!
      try { 
        systemColor0.getComponents((ColorSpace) null, floatArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      SystemColor systemColor0 = SystemColor.controlShadow;
      Color.getColor("day", (Color) systemColor0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 459;
      floatArray0[2] = 1484.23F;
      floatArray0[3] = (float) 0;
      Color.RGBtoHSB(459, 419, (-2177), floatArray0);
      fopImage_ImageInfo0.str = "";
      jpegImage0.getColorSpace();
      // Undeclared exception!
      try { 
        systemColor0.getComponents((ColorSpace) null, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1876022213266
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-783));
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      ActionMap actionMap1 = new ActionMap();
      actionMap1.keys();
      actionMap1.getParent();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getActionMap();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Date date0 = jDayChooser1.getMaxSelectableDate();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("w4G{", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition(873);
      ParsePosition parsePosition1 = new ParsePosition(317);
      mockSimpleDateFormat0.parse("", parsePosition1);
      jDayChooser1.setMaxSelectableDate(date0);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0541253627192235
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      ActionMap actionMap1 = jDayChooser0.getActionMap();
      actionMap1.keys();
      actionMap0.getParent();
      jDayChooser0.setActionMap((ActionMap) null);
      jDayChooser0.getActionMap();
      jDayChooser0.setDay(32);
      jDayChooser0.addListeners(32);
      jDayChooser0.drawWeeks();
      ForwardAction forwardAction0 = new ForwardAction(actionMap1);
      jDayChooser0.addMouseListener(forwardAction0);
      Time time0 = new Time(1809L);
      // Undeclared exception!
      try { 
        time0.toInstant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2683882965439777
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      actionMap0.keys();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getActionMap();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setDay(0);
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.addListeners(0);
      jDayChooser0.drawWeeks();
      ForwardAction forwardAction0 = new ForwardAction((Object) null);
      Time time0 = new Time(1809L);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.init();
      jDayChooser0.drawDays();
      jDayChooser0.setMaxDayCharacters(0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1097005470161
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-783));
      jDayChooser0.getActionMap();
      ActionMap actionMap0 = new ActionMap();
      actionMap0.keys();
      actionMap0.getParent();
      actionMap0.getParent();
      jDayChooser0.setActionMap((ActionMap) null);
      jDayChooser0.getActionMap();
      jDayChooser0.setDay((-783));
      MindMapMode mindMapMode0 = new MindMapMode();
      MindMapMode mindMapMode1 = new MindMapMode();
      mindMapMode1.activate();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }
}
