/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 12:47:01 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.LockingPolicy;
import org.apache.derby.iapi.store.raw.Transaction;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.RowLocation;
import org.apache.derby.impl.services.reflect.ReflectClassesJava2;
import org.apache.derby.impl.services.reflect.ReflectGeneratedClass;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.AlterTableNode;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.HalfOuterJoinNode;
import org.apache.derby.impl.sql.compile.HasVariantValueNodeVisitor;
import org.apache.derby.impl.sql.compile.ParameterNode;
import org.apache.derby.impl.sql.compile.QueryTreeNode;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.sql.execute.rts.ResultSetStatistics;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.apache.derby.impl.store.access.btree.index.B2INoLocking;
import org.apache.derby.impl.store.access.btree.index.B2IUndo;
import org.apache.derby.impl.store.access.heap.HeapRowLocation;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.GDSException;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl;
import org.firebirdsql.gds.impl.jni.EventHandleImp;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 44;
      DBDataType dBDataType0 = DBDataType.getInstance(44, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string0 = "--";
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "--", true, ":]NMPKeH,#>9NkwoE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column ':]NMPKeH,#>9NkwoE' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\t", (DBTable) null, (-60519912), "\t");
      defaultDBColumn0.setDoc("\t");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      Integer integer0 = new Integer((-60519912));
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      // Undeclared exception!
      try { 
        internalTransactionCoordinator0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, 1350, "QHvD@|`C${5!");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getMaxRows();
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      // Undeclared exception!
      try { 
        internalTransactionCoordinator0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9496928612711248
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = ")]6}lL2 ";
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      dBCatalog0.getSchemas();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")]6}lL2 ", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      dBSchema0.setOwner(dBCatalog0);
      stringArray0[1] = ")]6}lL2 ";
      stringArray0[2] = ")]6}lL2 ";
      stringArray0[3] = ")]6}lL2 ";
      stringArray0[4] = null;
      stringArray0[5] = ")]6}lL2 ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string1 = null;
      dBForeignKeyConstraint0.columnReferencedBy((String) null, true);
      dBCatalog0.getTable(", ", false);
      dBForeignKeyConstraint0.setTable((DBTable) null);
      SQLUtil.typeAndName(dBForeignKeyConstraint0);
      SQLUtil.isQuery("update");
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string2 = "setObject(String,Object,int)";
      String string3 = "H>W<C;bK5p2:^GHqNw<";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("H>W<C;bK5p2:^GHqNw<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("UGaKR$5,}W97Q|~");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("AEy", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(606, "'t.");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("UGaKR$5,}W97Q|~", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("[1h6pe#]-Rb<!gAWD");
      StringBuilder stringBuilder1 = stringBuilder0.insert(8, (long) 606);
      StringBuilder stringBuilder2 = new StringBuilder(606);
      StringBuilder stringBuilder3 = stringBuilder1.insert(8, (Object) "UGaKR$5,}W97Q|~");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder3);
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      SQLUtil.renderValue(dBCatalog0);
      Random.setNextRandom(34);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.598852876798625
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("D005");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-1.0);
      SQLUtil.renderNumber(streamTokenizer0);
      System.setCurrentTimeMillis((-4));
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".Zcj:doOU~O~";
      stringArray0[1] = null;
      stringArray0[2] = "- 1";
      stringArray0[3] = "v4ev>S%";
      stringArray0[4] = null;
      stringArray0[5] = "v4ev>S%";
      stringArray0[6] = "- 1";
      stringArray0[7] = "v4ev>S%";
      stringArray0[8] = "v4ev>S%";
      SQLUtil.join("D005", "v4ev>S%", stringArray0, "cbk1_~", "v4ev>S%", stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DBUniqueIndex dBUniqueIndex0 = null;
      try {
        dBUniqueIndex0 = new DBUniqueIndex(".Q.dnJ", true, (DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueIndex", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter session");
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("zGGREG@ATE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar(6);
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 29.0;
      streamTokenizer2.whitespaceChars((-4), 64);
      streamTokenizer2.eolIsSignificant(true);
      SQLUtil.renderNumber(streamTokenizer0);
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("Ou");
      dBCatalog0.toString();
      dBCatalog0.getSequences();
      dBCatalog0.setName(" =*z");
      dBCatalog0.getSchema("yF4sn06");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = VersionNumber.valueOf("L005");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("j)`oiP:LH", "j)`oiP:LH", versionNumber0);
      defaultDatabase0.getCatalogs();
      dBCatalog0.setDatabase(defaultDatabase0);
      defaultDatabase0.equals(dBCatalog0);
      defaultDatabase0.getTable("Ou", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tablese", (DBTable) null, (-3497), "truncate");
      defaultDBColumn0.setDefaultValue("select into");
      SQLUtil.renderColumn(defaultDBColumn0);
      Random.setNextRandom((-2038));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("exceutehgstjt4qi");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      genericDescriptorList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.402886181440778
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$COSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ";
      String string0 = SQLUtil.renderColumnListWithTableName("select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$COSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ", stringArray0);
      String string1 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$COSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition(string0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.50065988387882
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.mutatesDataOrStructure("\n/* direct lookup */");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter materialized viewsetnclob(string, reader, long)";
      SQLUtil.renderColumnListWithTableName(" = ", stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      AlterTableNode alterTableNode0 = new AlterTableNode();
      AlterTableNode alterTableNode1 = new AlterTableNode();
      AlterTableNode alterTableNode2 = new AlterTableNode();
      TableDescriptor tableDescriptor0 = alterTableNode2.baseTable;
      // Undeclared exception!
      try { 
        alterTableNode0.checkReliability("insert`+1$z63%knw&dgaw51", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3638159780372976
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      String[] stringArray0 = new String[5];
      stringArray0[3] = "SELE * FROM ";
      SQLUtil.isDDL("SELE * FROM ");
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringBuilder0.append("SELE * FROM ");
      System.setCurrentTimeMillis(240518168576L);
      SQLUtil.mutatesDataOrStructure("vcTG<=j1(4iS.`Rp(");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      System.setCurrentTimeMillis(29L);
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("P7");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NwV8e)M5'DN!");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "P7";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "P7";
      stringArray0[4] = "bFQa+";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setName(stringArray0[1]);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      Random.setNextRandom((-1615724747));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("delete");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      dBCatalog0.toString();
      DBDataType dBDataType0 = DBDataType.getInstance(620, "'t.");
      dBCatalog0.getComponents();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("[1h6pe#]fRK!gAWD");
      stringBuilder0.append((long) 620);
      StringBuilder stringBuilder1 = new StringBuilder("[1h6pe#]fRK!gAWD");
      StringBuilder stringBuilder2 = new StringBuilder(620);
      stringBuilder0.insert(8, (Object) "delete");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3251892804900773
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("altertabl9setnclb(string reader, long)");
      assertNull(boolean0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      byte[] byteArray0 = new byte[8];
      isc_stmt_handle_impl0.ensureCapacity((byte)0);
      byte[][] byteArray1 = new byte[9][4];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      Boolean boolean1 = SQLUtil.mutatesStructure("callhr[fg}<rnp:n");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3079770904508345
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLUtil.isQuery("drop materialized view");
      StringBuilder stringBuilder0 = new StringBuilder("drop materialized view");
      DBSchema dBSchema0 = new DBSchema("drop materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create unique indexcbk1_~vc", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop materialized view", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "KiJ", false, (String[]) null);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter(1587);
      StringWriter stringWriter1 = stringWriter0.append('q');
      stringWriter1.append('q');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("qqcreate table drop materialized view (,\n\tPRIMARY KEY (),\n\tUNIQUE ()\n)", stringWriter1.toString());
      
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      SQLUtil.normalize("drop materialized view", true);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop materialized view");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2890713983064828
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = new Boolean("VHq//^2<");
      Boolean boolean1 = new Boolean(";+");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance(39, "VHq//^2<");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("[YJ@AT}=Vip4jhy", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("[YJ@AT}=Vip4jhy : VHQ//^2<(0,0)", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[YJ@AT}=Vip4jhy : VHQ//^2<(0,0)";
      stringArray0[1] = ";+";
      stringArray0[2] = "[YJ@AT}=Vip4jhy : VHQ//^2<(0,0)";
      stringArray0[3] = "[YJ@AT}=Vip4jhy : VHQ//^2<(0,0)";
      stringArray0[4] = "[YJ@AT}=Vip4jhy";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = ",as ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "[YJ@AT}=Vip4jhy : VHQ//^2<(0,0)", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("d`op (", true, dBPrimaryKeyConstraint0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("[YJ@AT}=Vip4jhy", defaultDBTable0, dBDataType0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("[YJ@AT}=Vip4jhy, [YJ@AT}=Vip4jhy, [YJ@AT}=Vip4jhy, [YJ@AT}=Vip4jhy, [YJ@AT}=Vip4jhy", string1);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(";+", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ;+ FOREIGN KEY ([YJ@AT}=Vip4jhy : VHQ//^2<(0,0), ;+, [YJ@AT}=Vip4jhy : VHQ//^2<(0,0), [YJ@AT}=Vip4jhy : VHQ//^2<(0,0), [YJ@AT}=Vip4jhy, , , ,as ) REFERENCES null([YJ@AT}=Vip4jhy : VHQ//^2<(0,0), ;+, [YJ@AT}=Vip4jhy : VHQ//^2<(0,0), [YJ@AT}=Vip4jhy : VHQ//^2<(0,0), [YJ@AT}=Vip4jhy, , , ,as )", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.96499144667373
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLUtil.mutatesStructure("exceutehY94tjTq");
      SQLUtil.isDDL("dVv%,`");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exceutehY94tjTq");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "smallint)";
      stringArray0[1] = "smallint)";
      stringArray0[2] = "smallint)";
      stringArray0[3] = "smallint)";
      stringArray0[4] = "LlUbP7I-J3CQ";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "smallint)";
      stringArray1[1] = "smallint)";
      stringArray1[2] = "LlUbP7I-J3CQ";
      stringArray1[3] = "smallint)";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("smallint)", stringArray0, "smallint)", "smallint)", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.114104041498252
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      defaultDBTable0.getIndex("gq8yN$4`w(}:$j+~");
      dBSchema0.getTriggers();
      String[] stringArray0 = new String[0];
      defaultDBTable0.getIndexes();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "n;NgTbP&*Qy", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT n;NgTbP&*Qy UNIQUE ()", string0);
      
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec2);
      assertEquals("PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = 0L;
      int int0 = 3;
      StringBuilder stringBuilder0 = new StringBuilder(3);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EventHandleImp eventHandleImp0 = new EventHandleImp("alter tablesenclo:(strng, reder, long)");
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      GDSException gDSException0 = new GDSException((String) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("OdQ)fUZB*f5Sd", "alter tablesenclo:(strng, reder, long)", (String) null, 101);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Results cannot be retrieved from a CallableStatement before it is executed.", "<ZnB)%*|", "constraint", 101);
      stackTraceElementArray0[1] = stackTraceElement1;
      gDSException0.setStackTrace(stackTraceElementArray0);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2383497075834473
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "create table ";
      stringArray0[1] = "update";
      stringArray0[2] = "AGGREGATE";
      stringArray0[3] = "Lw$4aX";
      stringArray0[4] = "Lw$4aX";
      stringArray0[5] = "AGGREGATE";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Lw$4aX", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintStream mockPrintStream0 = new MockPrintStream("create table ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT Lw$4aX ", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5061206329699606
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLUtil.isQuery("PRIMARY KEY ");
      StringBuilder stringBuilder0 = new StringBuilder("drop materialized view");
      DBSchema dBSchema0 = new DBSchema("drop materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("PRIMARY KEY ", dBSchema0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('q');
      stringWriter1.write(1587);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "PRIMARY KEY ";
      SQLUtil.join("3Ff-Y'c;sG,q.2", "3Ff-Y'c;sG,q.2", stringArray0, stringArray0[0], "drop materialized view", stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop materialized view", true, stringArray0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec1);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getObjectID();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys((UUID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 987;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, 987, "");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", defaultDBTable0, (-470637837), "");
      TableContainer tableContainer0 = new TableContainer(" ADD ");
      tableContainer0.addTable(defaultDBTable0);
      tableContainer0.getTable("");
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("o\"h-+5?q4BY:+", (DBTable) null, (-154), "(>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (>
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6270866719173012
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("??_=", defaultDBTable0, 2528, "??_=");
      TableContainer tableContainer0 = new TableContainer("??_=");
      tableContainer0.getTable("--");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop materialized view", (DBTable) null, 2528, "r{b_11f$A");
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-35);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "36/c(wI~";
      stringArray0[1] = "F@-vY!PLs-_[";
      stringArray0[2] = "36/c(wI~";
      stringArray0[3] = ":positionAware=";
      stringArray0[4] = "F@-vY!PLs-_[";
      String string0 = SQLUtil.normalize("MyZj!t3fjxsEi{-\\*e", false);
      assertEquals("MyZj ! t3fjxsEi { - \\ * e", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("<J5.Y2szO*@A::c", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("<J5.Y2szO*@A::c", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("<J5.Y2szO*@A::c", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      String string0 = SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      assertEquals("<J5.Y2szO*@A::c.<J5.Y2szO*@A::c", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "insert";
      stringArray0[1] = "insert";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("B#");
      String[] stringArray1 = new String[7];
      stringArray1[0] = "insert";
      stringArray1[1] = "sYa6^mPBq;o";
      stringArray1[2] = "Lw$4aX";
      stringArray1[3] = "Lw$4aX";
      stringArray1[4] = "`W";
      stringArray1[5] = "B#";
      stringArray1[6] = "insert";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Lw$4aX", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(90072, "DATABASE_CLOSING");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,rK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NgME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$COSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFE1RABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ");
      boolean boolean1 = SQLUtil.isDDL("drop materialized viewaltertabl9setnclb(string reader, long)");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLUtil.mutatesStructure("alter tablesenclo:(strng, re5er, lonwa");
      EventHandleImp eventHandleImp0 = new EventHandleImp("alter tablesenclo:(strng, re5er, lonwa");
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("OdQ)fUZB*f5Sd", "alter tablesenclo:(strng, re5er, lonwa", (String) null, 101);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Results cannot be retrieved from a CallableStatement before it is executed.", "<ZnB)%*|", "constraint", 101);
      stackTraceElementArray0[1] = stackTraceElement1;
      isc_stmt_handle_impl0.removeRows();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      // Undeclared exception!
      try { 
        xSQLVAR1.decodeString((byte[]) null, "constraint", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("zGJGREG@ATE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      Boolean boolean0 = new Boolean("zGJGREG@ATE");
      Boolean.logicalXor(true, true);
      Boolean.getBoolean("[I;kj[3Qeem");
      Boolean.logicalAnd(false, false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments((boolean) boolean0);
      streamTokenizer1.slashSlashComments(false);
      boolean boolean1 = SQLUtil.isQuery("select into");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.253774989473246
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("drop indexwjlx{ntz3@k'p");
      StringBuilder stringBuilder0 = new StringBuilder();
      VersionNumber versionNumber0 = VersionNumber.valueOf("###RowLocationToUpdate");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", " (", versionNumber0);
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.leftJoin("-?LB{j6eojU0F", stringArray0, ",MfQ?MiAgk/MKkMgu", "execute%8+ye8w", stringArray0);
      assertEquals("left join ,MfQ?MiAgk/MKkMgu as execute%8+ye8w on -?LB{j6eojU0F.null = execute%8+ye8w.null", string0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("");
      assertTrue(boolean1.equals((Object)boolean0));
      
      String string1 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("", string1);
      
      SQLUtil.isProcedureCall("Scanning heap, but we have a full match on a unique key.");
      boolean boolean2 = SQLUtil.isDDL("g");
      assertFalse(boolean2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'6qkN";
      stringArray0[1] = "'6qkN";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "U(?6q%~&*Y)";
      stringArray1[1] = "'6qkN";
      stringArray1[2] = "-A2D";
      stringArray1[3] = "truncate";
      stringArray1[4] = "'6qkN";
      stringArray1[5] = "-A2D";
      stringArray1[6] = "U(?6q%~&*Y)";
      stringArray1[7] = "-A2D";
      stringArray1[8] = "-A2D";
      String string0 = SQLUtil.leftJoin("'6qkN", stringArray0, "U(?6q%~&*Y)", "-A2D", stringArray1);
      assertEquals("left join U(?6q%~&*Y) as -A2D on '6qkN.'6qkN = -A2D.U(?6q%~&*Y) and '6qkN.'6qkN = -A2D.'6qkN", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2623477045221727
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "WK";
      stringArray0[1] = "drop tableexec";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "drop tableexec";
      objectArray0[1] = (Object) "drop tableexec";
      objectArray0[2] = (Object) "drop tableexec";
      objectArray0[3] = (Object) "drop tableexec";
      objectArray0[1] = (Object) "WK";
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("WK = 'drop tableexec' AND drop tableexec = 'WK'", string0);
      
      Object[] objectArray1 = new Object[9];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "drop tableexec";
      objectArray1[2] = (Object) "drop tableexec";
      objectArray1[4] = (Object) "drop tableexec";
      objectArray1[5] = (Object) "WK";
      objectArray1[6] = (Object) "drop tableexec";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "P9", false, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT P9 PRIMARY KEY (WK, drop tableexec)", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "insert";
      stringArray0[1] = "insert";
      stringArray0[1] = ".C'";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5719549218038606
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLUtil.mutatesDataOrStructure("exceutehgstjt4qi");
      SQLUtil.mutatesStructure("exceutehgstjt4qi");
      Boolean.compare(false, true);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("(FB;f", (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tablesenclo:(strng, re5er, lonwa");
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("OdQ)fUZB*f5Sd", "alter tablesenclo:(strng, re5er, lonwa", (String) null, 101);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Results cannot be retrieved from a CallableStatement before it is executed.", "<ZnB)%*|", "constraint", 101);
      stackTraceElementArray0[1] = stackTraceElement1;
      isc_stmt_handle_impl0.removeRows();
      assertFalse(isc_stmt_handle_impl0.isValid());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.postgresql.jdbc3.AbstractJdbc3Blob", true);
      assertEquals("org.postgresql.jdbc3.AbstractJdbc3Blob", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Boolean boolean0 = new Boolean("VHq//^2<");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VHq//^2<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = SQLUtil.normalize("VHq//^2<", false);
      assertEquals("VHq / / ^ 2 <", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.1950865325403197
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$COSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ");
      EventHandleImp eventHandleImp0 = new EventHandleImp("tZtJ~?1w.");
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      GDSException gDSException0 = new GDSException("SYSCS_SET_XPLAIN_MODE");
      StackTraceElement stackTraceElement0 = new StackTraceElement("SYSCS_SET_XPLAIN_MODE", "tZtJ~?1w.", "SYSCS_SET_XPLAIN_MODE", (-193));
      StackTraceElement stackTraceElement1 = new StackTraceElement("deletegji6i6!.wk-dk", " ADD ", "Results cannot be retrieved from a CallableStatement before it is executed.", (-193));
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement2 = new StackTraceElement("3Z+vClD4=p-J", "5x_<[pNDJb", "Results cannot be retrieved from a CallableStatement before it is executed.", 101);
      stackTraceElementArray0[0] = stackTraceElement2;
      gDSException0.setStackTrace(stackTraceElementArray0);
      gDSException0.getNext();
      // Undeclared exception!
      try { 
        isc_stmt_handle_impl0.addWarning(gDSException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "insertcatalog null";
      StringBuilder stringBuilder0 = new StringBuilder("delete");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insertcatalog null");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      VersionNumber.valueOf("insertcatalog null");
      boolean boolean1 = SQLUtil.isDML("insertcatalog null");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7802980886663002
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLUtil.isProcedureCall("CBk1_~VC");
      SQLUtil.isQuery("CBk1_~VC");
      SQLUtil.mutatesStructure("CBk1_~VC");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "EXz";
      stringArray0[1] = ".";
      stringArray0[2] = "CBk1_~VC";
      stringArray0[3] = "SELE * FROM ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "pk_name", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc(".");
      dBPrimaryKeyConstraint0.isIdentical((DBObject) null);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      SQLUtil.isDDL("pk_name");
      dBPrimaryKeyConstraint0.toString();
      StringBuilder stringBuilder0 = new StringBuilder();
      dBPrimaryKeyConstraint0.isIdentical((DBObject) null);
      StringBuilder stringBuilder1 = stringBuilder0.append("pk_name");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9231941212104875
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLUtil.isProcedureCall("CBL1_~VC");
      SQLUtil.isQuery("CBL1_~VC");
      SQLUtil.mutatesStructure("CBL1_~VC");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "SELE * FROM ";
      stringArray0[2] = "CBL1_~VC";
      stringArray0[3] = "SELE * FROM ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SELE * FROM ", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical((DBObject) null);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      SQLUtil.isDDL("SELE * FROM ");
      dBPrimaryKeyConstraint0.toString();
      dBPrimaryKeyConstraint0.setName("CBL1_~VC");
      dBPrimaryKeyConstraint0.addColumnName("SELE * FROM ");
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      dBPrimaryKeyConstraint0.setDoc("SELE * FROM ");
      dBPrimaryKeyConstraint0.isIdentical((DBObject) null);
      dBPrimaryKeyConstraint0.setDoc("CBL1_~VC");
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("Resource Exception. ");
      dBPrimaryKeyConstraint0.equals(jMXPrincipal0);
      stringBuilder0.append("SELE * FROM ");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("SELE * FROM CONSTRAINT CBL1_~VC ", stringBuilder0.toString());
      
      System.setCurrentTimeMillis(240518168576L);
      SQLUtil.mutatesDataOrStructure("vcTG<=j1(4iS.`Rp(");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      System.setCurrentTimeMillis(29L);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      boolean boolean0 = SQLUtil.isDML("exec");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "JQ/&J[";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" WHERE ", true, "6!x7?#v=", " WHERE ");
      int int0 = 3;
      StringBuilder stringBuilder0 = new StringBuilder(3);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(3, (float) 3);
      int int1 = 940;
      stringBuilder1.deleteCharAt(3);
      long long0 = (-685L);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(541, (-685L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 541
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("altertabl9setnclb(string reader, long)");
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.810795917431007
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("AGGREGATE");
      DBCatalog dBCatalog0 = new DBCatalog("AGGREGATE");
      dBCatalog0.setName((String) null);
      dBCatalog0.getSchema((String) null);
      dBCatalog0.getComponents();
      dBCatalog0.getSchema("pVI|^1-*YXSH");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertNotNull(string0);
      assertEquals("catalog null", string0);
      
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = new StringBuilder("gn");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("catalog null");
      assertNull(boolean0);
      
      System.setCurrentTimeMillis(3123L);
      System.setCurrentTimeMillis(3123L);
      boolean boolean1 = SQLUtil.isDML("insert;#~,/6");
      assertTrue(boolean1);
      
      System.setCurrentTimeMillis((-1L));
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "gn";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, gn)", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "exec", (String[]) null, (String) null, "69sj*", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("exceutehh94t");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("cbk1_~", "cbk1_~", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("cbk1_~");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("cbk1_~", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("derby.<torag(.checkp)intInterva>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".checkp\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("crate]unizeidxalte tLlesetLco:(strig, eedor5Il)ng$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"strig\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.3458240980466787
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-55);
      Locale locale0 = Locale.TAIWAN;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",";
      stringArray0[1] = "ma)N.s%qr!=tT\u0006|87";
      stringArray0[2] = "0[X9S7cQ[Ri'{>SD";
      stringArray0[3] = "K\"]9ev";
      stringArray0[4] = "2057c01b-0103-0e39-b8e7-00000010f010";
      stringArray0[5] = "SYSXPLAIN_SCAN_PROPS";
      stringArray0[6] = "alter index";
      stringArray0[7] = "isf";
      stringArray0[8] = "where";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE , = ',' AND ma)N.s%qr!=tT\u0006|87 = 'ma)N.s%qr!=tT\u0006|87' AND 0[X9S7cQ[Ri'{>SD = '0[X9S7cQ[Ri'{>SD' AND K\"]9ev = 'K\"]9ev' AND 2057c01b-0103-0e39-b8e7-00000010f010 = '2057c01b-0103-0e39-b8e7-00000010f010' AND SYSXPLAIN_SCAN_PROPS = 'SYSXPLAIN_SCAN_PROPS' AND alter index = 'alter index' AND isf = 'isf' AND where = 'where'", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "smallint)";
      stringArray0[2] = "smallint)";
      String string0 = "drop table";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "smallint)";
      stringArray1[1] = "smallint)";
      stringArray1[2] = "smallint)";
      stringArray1[3] = "isp";
      stringArray1[4] = "bFQaa";
      stringArray1[5] = "smallint)";
      stringArray1[6] = "smallint)";
      // Undeclared exception!
      try { 
        SQLUtil.join("isp", "smallint)", stringArray1, "smallint)", "smallint)", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLUtil.isQuery("select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ");
      Boolean boolean0 = Boolean.FALSE;
      VersionNumber versionNumber0 = VersionNumber.valueOf("select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ");
      assertNotNull(versionNumber0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7413926873721288
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "l;p56i\\]";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("l;p56i]");
      int int0 = 5;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.COMMIT;
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(5);
      stringBuilder0.append(5);
      stringBuilder0.append((double) 5);
      SQLUtil.isProcedureCall("callwjlx{ntz3@ok*'p");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "callwjlx{ntz3@ok*'p";
      stringArray0[1] = "?";
      stringArray0[2] = null;
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      boolean boolean0 = new Boolean(true);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getDataDescriptorGenerator();
      TableDescriptor tableDescriptor0 = null;
      String string1 = "drop index";
      boolean boolean1 = false;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)37;
      byte byte0 = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)34;
      byte byte1 = (byte)28;
      byteArray0[5] = (byte)28;
      byte byte2 = (byte)0;
      byteArray0[6] = (byte)0;
      byte byte3 = (byte)94;
      byteArray0[7] = (byte)94;
      BasicUUID basicUUID0 = null;
      try {
        basicUUID0 = new BasicUUID(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.derby.impl.services.uuid.BasicUUID", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "S3(V0g:CP52S]aZ*bf";
      String string1 = "left";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("S3(V0g:CP52S]aZ*bf", (String[]) null, "S3(V0g:CP52S]aZ*bf", "left", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLUtil.normalize("fZ\"Gf+k", false);
      Random.setNextRandom(6);
      Random.setNextRandom(40);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$COSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ";
      String string0 = SQLUtil.normalize("selectaltertabl9setnclb(string reader, long)", true);
      assertEquals("selectaltertabl9setnclb (string reader, long)", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-4));
      streamTokenizer2.pushBack();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(pipedReader0);
      streamTokenizer3.ttype = (-4);
      streamTokenizer0.commentChar((-4));
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.pushBack();
      streamTokenizer4.quoteChar((-2965));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(pipedReader0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = " WHERE ";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("insertcatalog null", true, "JQ/&J[", " WHERE ");
      StringBuilder stringBuilder0 = new StringBuilder(3);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint((-479));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("!", stringBuilder0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.122107306207944
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "43Y52.U";
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-47);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[1] = "43Y52.U";
      stringArray0[2] = "K";
      stringArray0[3] = "K";
      stringArray0[4] = "43Y52.U";
      stringArray0[5] = "K";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("43Y52.U", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint1, nameSpec1);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "alter index";
      stringArray1[1] = "CONSTRAINT 43Y52.U FOREIGN KEY (43Y52.U, 43Y52.U, K, K, 43Y52.U, K) REFERENCES null(43Y52.U, 43Y52.U, K, K, 43Y52.U, K)";
      stringArray1[2] = "g\":5FyN!aq`SrE}y";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("R0z!>&<>*", stringArray0, "", "alter index", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "WK";
      stringArray0[0] = "WK";
      stringArray0[1] = "drop tableexec";
      String string1 = "SunJCE";
      // Undeclared exception!
      try { 
        SQLUtil.join("drop tableexec", "SunJCE", stringArray0, "drop tableexec", "WK", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "insert";
      stringArray0[2] = "insert";
      stringArray0[3] = "insert";
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-4280L));
      String[] stringArray1 = new String[9];
      stringArray1[0] = "zKfX";
      stringArray1[1] = "bFQa+";
      stringArray1[2] = "zKfX";
      stringArray1[3] = "Expected but did not recieve a row update count";
      stringArray1[4] = "bfqa+";
      stringArray1[5] = "bfqa+";
      stringArray1[6] = "executescanning heap, but we have a full match on a unique key.";
      stringArray1[7] = "insert";
      stringArray1[8] = "G^ry46|8x8CC*TA11";
      String string0 = SQLUtil.innerJoin("insert", stringArray0, "zKfX", "bfqa+", stringArray1);
      assertEquals("zKfX as bfqa+ on insert.null = bfqa+.zKfX and insert.insert = bfqa+.bFQa+ and insert.insert = bfqa+.zKfX and insert.insert = bfqa+.Expected but did not recieve a row update count and insert.null = bfqa+.bfqa+ and insert.null = bfqa+.bfqa+", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = true;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("insertcatalog null", true, "JQJ", " WHERE ");
      StringBuilder stringBuilder0 = new StringBuilder(3424);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-479), (float) (-479));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -479
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("V!\"KU5Rs%C'[x#", (DBTable) null, 2633, "V!\"KU5Rs%C'[x#");
      Boolean boolean0 = Boolean.TRUE;
      defaultDBColumn0.setVersionColumn(true);
      defaultDBColumn0.toString();
      defaultDBColumn0.setVersionColumn(false);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "JQ/&J[";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("insertcatalog null", false, "JQ/&J[", " WHERE ");
      StringBuilder stringBuilder0 = new StringBuilder(3);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-479), (float) (-479));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -479
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("11K6/%L1((z");
      SQLUtil.addRequiredCondition("11K6/%L1((z", stringBuilder0);
      BTreeController bTreeController0 = new BTreeController();
      BTreeController bTreeController1 = new BTreeController();
      LockingPolicy lockingPolicy0 = mock(LockingPolicy.class, new ViolatedAssumptionAnswer());
      B2INoLocking b2INoLocking0 = new B2INoLocking((Transaction) null, (-129226557), lockingPolicy0, bTreeController0, bTreeController1);
      BTreeController bTreeController2 = new BTreeController();
      bTreeController2.getXactMgr();
      FileSystemHandling.shouldAllThrowIOExceptions();
      bTreeController1.getContainer();
      bTreeController2.getLockingPolicy();
      B2IUndo b2IUndo0 = new B2IUndo();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.removeRows();
      isc_stmt_handle_impl0.clearRows();
      assertEquals(0, isc_stmt_handle_impl0.getRsrId());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      byte byte0 = (byte) (-110);
      ResultSetStatistics resultSetStatistics0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k3~Xh&QhzNuilyv%", (DBTable) null, 2633, "k3~Xh&QhzNuilyv%");
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.toString();
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("j_");
      assertNotNull(versionNumber0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FromVTI fromVTI0 = new FromVTI();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 687;
      intArray0[4] = 0;
      intArray0[5] = 2;
      fromVTI0.setHashKeyColumns(intArray0);
      fromVTI0.getProperties();
      TableContainer tableContainer0 = new TableContainer(" join ");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertNotNull(string0);
      assertEquals("container  join ", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)40;
      SQLUtil.typeAndName((DBObject) null);
      ReflectClassesJava2 reflectClassesJava2_0 = new ReflectClassesJava2();
      Class<JMXPrincipal> class0 = JMXPrincipal.class;
      ReflectGeneratedClass reflectGeneratedClass0 = new ReflectGeneratedClass(reflectClassesJava2_0, class0, class0);
      try { 
        reflectGeneratedClass0.getMethod("inner");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Method inner() does not exist in generated class javax.management.remote.JMXPrincipal.
         //
         verifyException("org.apache.derby.iapi.error.StandardException", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("");
      dBCatalog0.toString();
      dBCatalog0.getSequences();
      dBCatalog0.setName(" =*z");
      dBCatalog0.getSchema("yF4sn06");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = VersionNumber.valueOf("L005");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("j)`oiP:LH", "j)`oiP:LH", versionNumber0);
      defaultDatabase0.getCatalogs();
      dBCatalog0.setDatabase(defaultDatabase0);
      defaultDatabase0.equals(dBCatalog0);
      defaultDatabase0.getTable("", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tablese", (DBTable) null, (-3497), "truncate");
      SQLUtil.normalize("", false);
      Random.setNextRandom((-2038));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte) (-79);
      byteArray0[8] = (byte)40;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create unique index", 2);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string0 = SQLUtil.normalize("alter materialized viewwjlx{ntz3@ok*'p", false);
      assertEquals("alter materialized viewwjlx { ntz3 @ ok * 'p'", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.8688245196701632
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = new Boolean("VHq//^2<");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(",", true, ",", "C2MHd");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      ConstantActionActivation constantActionActivation2 = new ConstantActionActivation();
      constantActionActivation1.getLanguageConnectionContext();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.5553415252763094
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "AGGREGATE";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("AGGREGATE");
      String[] stringArray0 = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("AGGREGATE", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      String string1 = "";
      DBDataType dBDataType0 = DBDataType.getInstance(5, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CONSTRAINT AGGREGATE FOREIGN KEY () REFERENCES AGGREGATE()", defaultDBTable0, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      defaultDBTable0.getUniqueConstraint((String[]) null);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "AGGREGATE";
      stringArray1[2] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("alter index", true, defaultDBTable0, stringArray1, defaultDBTable0, (String[]) null);
      SQLUtil.constraintSpec(dBForeignKeyConstraint1, nameSpec0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumnListWithTableName("AGGREGATE", stringArray1);
      String string2 = "org.apache.derby.iapi.sql.dictionary.DependencyDescriptor";
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((CharSequence) stringArray1[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.6480950586435879
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized view", (DBTable) null, 872, ".c'");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer1);
      defaultDBColumn0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop materialized view";
      stringArray0[1] = "derby.storage.initialPages";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("zGJGREG@ATE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      Boolean boolean0 = new Boolean("zGJGREG@ATE");
      stringReader0.reset();
      Boolean.logicalXor(true, true);
      Boolean.logicalAnd(false, false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.nextToken();
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.commentChar(8);
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "TY][/rVBP<Hs!7c", versionNumber0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("left");
      jMXPrincipal0.equals(streamTokenizer2);
      defaultDatabase0.equals(jMXPrincipal0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      VersionNumber versionNumber1 = new VersionNumber(linkedList0);
      versionNumber0.compareTo(versionNumber1);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer2.ordinaryChar(13);
      streamTokenizer2.parseNumbers();
      versionNumber0.toString();
      defaultDatabase0.getTable("Z`", false);
      streamTokenizer0.commentChar(918);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("zGJGREG@ATE", (DBTable) null, (-4), "p&t1D");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("zGJGREG@ATE P&T1D NULL", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      jdbcClob jdbcClob0 = new jdbcClob("zGGREG@ATE");
      StringReader stringReader0 = new StringReader("zGGREG@ATE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.commentChar(29);
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(true);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      SQLUtil.parseColumnTypeAndSize("call");
      String string1 = SQLUtil.renderValue("call");
      assertEquals("'call'", string1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("jCcD]j=", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("11K6/%L1((z", stringBuilder0);
      BTreeController bTreeController0 = new BTreeController();
      BTreeController bTreeController1 = new BTreeController();
      LockingPolicy lockingPolicy0 = mock(LockingPolicy.class, new ViolatedAssumptionAnswer());
      B2INoLocking b2INoLocking0 = new B2INoLocking((Transaction) null, (-129226557), lockingPolicy0, bTreeController0, bTreeController1);
      BTreeController bTreeController2 = new BTreeController();
      HeapRowLocation heapRowLocation0 = new HeapRowLocation();
      try { 
        bTreeController2.lockRow((RowLocation) heapRowLocation0, (-631), true, 6);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unimplemented feature.
         //
         verifyException("org.apache.derby.iapi.error.StandardException", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Character.valueOf('(');
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.substituteMarkers("select", "$.TQT1sCq^4>)'!!:S", (Object) null);
      System.setCurrentTimeMillis((-1650L));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder0 = new StringBuilder();
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      Character character0 = Character.valueOf('&');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'&'", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "dery.<torag(.NheckpointInterva>";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.isDML("alter materialMzed viewwjlx{ntz3@ok*jp");
      SQLUtil.mutatesStructure("alter materialMzed viewwjlx{ntz3@ok*jp");
      SQLUtil.isDDL("create materialized viewg&qwap`qzh)(1^w8h");
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, (String[]) null, "callg&qwap`qzh)(1^w8h", "callg&qwap`qzh)(1^w8h", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getTargetVTI();
      constantActionActivation0.getContextManager();
      Locale locale0 = Locale.KOREA;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("alter table", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("V!\"K75Rs%C'[x#", (DBTable) null, 2633, "V!\"K75Rs%C'[x#");
      Boolean boolean0 = new Boolean("VHq//^2<");
      defaultDBColumn0.setVersionColumn(true);
      String string0 = defaultDBColumn0.toString();
      assertEquals("V!\"K75Rs%C'[x# : V!\"K75RS%C'[X#", string0);
      
      defaultDBColumn0.setVersionColumn(false);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.setDefaultValue("from");
      defaultDBColumn0.setVersionColumn(false);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("V!\"K75Rs%C'[x#, V!\"K75Rs%C'[x#, V!\"K75Rs%C'[x#, V!\"K75Rs%C'[x#, V!\"K75Rs%C'[x#, V!\"K75Rs%C'[x#, V!\"K75Rs%C'[x#, V!\"K75Rs%C'[x#", string1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("Re4JF_tx");
      tableContainer0.getTable("executealter table");
      DBDataType dBDataType0 = DBDataType.getInstance(13, "executealter table");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Re4JF_tx", (DBTable) null, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("EXECUTEALTER TABLE(3,1)", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "dery.<torag(.NheckpointInterva>";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("dery.<torag(.NheckpointInterva>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: dery.<torag(.NheckpointInterva>
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[23];
      stringArray0[1] = "\u0001\u00D0";
      // Undeclared exception!
      try { 
        SQLUtil.removeComments(stringArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.removeComments("");
      FromVTI fromVTI0 = new FromVTI();
      assertFalse(fromVTI0.isDerbyStyleTableFunction());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "update";
      stringArray0[1] = "alter sessionexceutehgstjt4qi";
      stringArray0[2] = "NZnf91ni>?9nF(R@P";
      stringArray0[3] = "bKtgi@WsN$6`";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(update, alter sessionexceutehgstjt4qi, NZnf91ni>?9nF(R@P, bKtgi@WsN$6`)", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("zGJGREG@ATE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      Boolean boolean0 = new Boolean("zGJGREG@ATE");
      stringReader0.reset();
      Boolean.logicalXor(true, true);
      Boolean.logicalAnd(false, false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.nextToken();
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.commentChar(8);
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pipedReader0);
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "TY][/rVBP<Hs!7c", versionNumber0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("left");
      jMXPrincipal0.equals(streamTokenizer2);
      defaultDatabase0.equals(jMXPrincipal0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      VersionNumber versionNumber1 = new VersionNumber(linkedList0);
      versionNumber0.compareTo(versionNumber1);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer2.ordinaryChar(1);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "bfqa+";
      stringArray0[1] = "5`:$n=?Iu$\u0007Hg<V\"";
      stringArray0[2] = "'9O@&.qfS";
      stringArray0[3] = "org.h2.command.ddl.AlterView";
      stringArray0[4] = ">T";
      stringArray0[5] = ")";
      stringArray0[6] = "alter sessionselect intodefault";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.h2.command.ddl.AlterView";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "bfqa+";
      stringArray0[1] = "5`:$n=?Iu$\u0007Hg<V\"";
      stringArray0[2] = "bfqa+";
      stringArray0[3] = "org.h2.command.ddl.AlterView";
      stringArray0[4] = ">T";
      stringArray0[5] = ")";
      stringArray0[6] = "alter sessionselect intodefault";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.h2.command.ddl.AlterView";
      String string0 = SQLUtil.substituteMarkers(")", ")", "org.h2.command.ddl.AlterView");
      assertEquals("'org.h2.command.ddl.AlterView'", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("V!\"K75Rs%C'[x#", (DBTable) null, 2633, "V!\"K75Rs%C'[x#");
      Boolean boolean0 = new Boolean("VHq//^2<");
      defaultDBColumn0.toString();
      defaultDBColumn0.setVersionColumn(false);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("W[sh^^(Q)\"%5wGC>6");
      VersionNumber versionNumber0 = VersionNumber.valueOf("org.firebirdsql.jdbc.AbstractConnection");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("C$VBL9#-9Pk5Q{`cLw", "", versionNumber0);
      defaultDatabase0.getTable("ALTER TABLE ", false);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("zGJGREGTE");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("RC-:q,dD");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zGJGREGTE", (DBSchema) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("RC-:q,dD");
      char[] charArray0 = new char[0];
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SQLUtil.removeComments("UATUy");
      FromVTI fromVTI0 = new FromVTI();
      HalfOuterJoinNode halfOuterJoinNode0 = new HalfOuterJoinNode();
      HasVariantValueNodeVisitor hasVariantValueNodeVisitor0 = new HasVariantValueNodeVisitor();
      fromVTI0.accept(hasVariantValueNodeVisitor0);
      ParameterNode parameterNode0 = new ParameterNode();
      // Undeclared exception!
      try { 
        QueryTreeNode.bindOffsetFetch(parameterNode0, parameterNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DBUniqueConstraint dBUniqueConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      boolean boolean0 = SQLUtil.isProcedureCall("eceutehhtj4q");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("exceutehh94t");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("cbk1_~", "cbk1_~", versionNumber0);
      defaultDatabase0.getCatalog("\u0001\u0172");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "altertablesetnclb(string, reader, long)";
      SQLUtil.mutatesDataOrStructure("altertablesetnclb(string, reader, long)");
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[23];
      stringArray0[3] = "KE`g8U~xC$S=3(w";
      stringArray0[4] = "KE`g8U~xC$S=3(w";
      stringArray0[5] = "KE`g8U~xC$S=3(w";
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("TYPE_SCROLL_SENSITIVE => TYPE_SCROLL_SENSITIVE");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringReader stringReader0 = new StringReader("zGJGREGTE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      Boolean boolean0 = new Boolean("zGJGREGTE");
      Boolean.logicalOr(false, false);
      Boolean.getBoolean("[I;kj[3Qeem");
      Boolean.logicalAnd(false, false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments((boolean) boolean0);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.nextToken();
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.commentChar(8);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer2.quoteChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.wordChars(3735, (-4));
      streamTokenizer0.ordinaryChars(1356, (-4));
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer3.slashSlashComments(false);
      streamTokenizer3.eolIsSignificant(true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBSchema dBSchema0 = new DBSchema(",tablePermsUUID=");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      int int0 = 25;
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(25);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 25, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "sm|allint)";
      stringArray0[2] = "sm|allint)";
      SQLUtil.join("bFQaa", "sm|allint)", stringArray0, "_S`p-A[v", (String) null, stringArray0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      BTreeController bTreeController0 = new BTreeController();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      String string0 = "yt@N)v}D:%l$;B[6l ";
      // Undeclared exception!
      try { 
        MockCalendar.getInstance((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }
}
