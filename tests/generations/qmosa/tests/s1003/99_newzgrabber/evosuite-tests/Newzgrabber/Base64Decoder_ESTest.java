/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 10:30:51 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.Base64Decoder;
import Newzgrabber.BufferedCustomInputStream;
import Newzgrabber.Newzgrabber;
import java.io.File;
import java.io.InputStream;
import java.io.PrintStream;
import javax.swing.DebugGraphics;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64Decoder_ESTest extends Base64Decoder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7332075259206667
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[2] = (byte) (-87);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)60;
      byteArray0[7] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MockFile mockFile0 = new MockFile("The following are the lines from the base64 decode", "");
      File file0 = MockFile.createTempFile("The following are the lines from the base64 decode", "The following are the lines from the base64 decode", (File) mockFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.println((long) (byte)0);
      mockFile0.deleteOnExit();
      mockFileOutputStream0.release();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
      base64Decoder0.ProgressSet = true;
      base64Decoder0.setBegin(false);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      //  // Unstable assertion: assertEquals((-19999), mockFileInputStream0.available());
      //  // Unstable assertion: assertEquals(1L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.5432367107743351
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockFile mockFile0 = new MockFile("he following are the lines fro the base64decode", "");
      File file0 = MockFile.createTempFile("he following are the lines fro the base64decode", "he following are the lines fro the base64decode", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("he following are the lines fro the base64decode/he following are the lines fro the base64decode0he following are the lines fro the base64decode");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "he following are the lines fro the base64decode");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      char[] charArray0 = new char[7];
      charArray0[6] = '\u008B';
      charArray0[0] = 'b';
      mockFile0.setReadable(true);
      charArray0[3] = 'Y';
      mockPrintStream0.print((Object) file0);
      charArray0[4] = 'B';
      charArray0[5] = '?';
      mockPrintStream0.println(charArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.println((long) 'Y');
      mockFileOutputStream0.release();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, 61);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream1);
      base64Decoder0.setBegin(false);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(2L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.7713027640159048
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockFile mockFile0 = new MockFile("he following are the lines fro the base64decode", "");
      File file0 = MockFile.createTempFile("he following are the lines fro the base64decode", "he following are the lines fro the base64decode", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      char[] charArray0 = new char[7];
      charArray0[6] = '\u008B';
      charArray0[6] = 'b';
      charArray0[3] = '\u008B';
      char[] charArray1 = new char[2];
      charArray1[0] = 'b';
      mockPrintStream0.println(charArray1);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, true);
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(mockFileInputStream0);
      BufferedCustomInputStream bufferedCustomInputStream2 = new BufferedCustomInputStream(bufferedCustomInputStream1);
      BufferedCustomInputStream bufferedCustomInputStream3 = new BufferedCustomInputStream(mockFileInputStream0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream3, mockPrintStream0);
      BufferedCustomInputStream bufferedCustomInputStream4 = new BufferedCustomInputStream(bufferedCustomInputStream3);
      bufferedCustomInputStream0.closeTemp();
      BufferedCustomInputStream bufferedCustomInputStream5 = new BufferedCustomInputStream(mockFileInputStream0);
      bufferedCustomInputStream5.markSupported();
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream1, mockPrintStream0);
      Newzgrabber.IsBatch = true;
      base64Decoder1.decodeStream();
      Base64Decoder base64Decoder2 = new Base64Decoder(bufferedCustomInputStream2, mockPrintStream0);
      base64Decoder2.decodeStream();
      BufferedCustomInputStream bufferedCustomInputStream6 = new BufferedCustomInputStream(bufferedCustomInputStream1, 2767);
      Base64Decoder base64Decoder3 = new Base64Decoder(bufferedCustomInputStream6, mockPrintStream0);
      base64Decoder0.decodeStream();
      //  // Unstable assertion: assertEquals((-29998), mockFileInputStream0.available());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6868359830561608
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[2] = (byte) (-87);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)60;
      byteArray0[7] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MockFile mockFile0 = new MockFile("The following are the lines from the base64 decode", "");
      File file0 = MockFile.createTempFile("The following are the lines from the base64 decode", "The following are the lines from the base64 decode", (File) mockFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, false);
      mockFileInputStream0.read(byteArray0, (int) (byte)44, (int) (byte)60);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.println((long) (byte)0);
      mockFileOutputStream0.release();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
      base64Decoder0.setBegin(false);
      base64Decoder0.decodeStream();
      assertEquals((-10000), mockFileInputStream0.available());
      assertEquals(1L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.7046360973492382
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[2] = (byte) (-87);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)60;
      byteArray0[7] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MockFile mockFile0 = new MockFile("The following are the lines from the base64 decode", "");
      File file0 = MockFile.createTempFile("The following are the lines from the base64 decode", "The following are the lines from the base64 decode", (File) mockFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.println((long) (byte)0);
      mockFileOutputStream0.release();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
      base64Decoder0.setBegin(true);
      base64Decoder0.decodeStream();
      //  // Unstable assertion: assertEquals((-9999), mockFileInputStream0.available());
      //  // Unstable assertion: assertEquals(1L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.036019355145124
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream((InputStream) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("X-1H uDZAObE:z,7WA", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)5;
      bufferedCustomInputStream0.markSupported();
      byteArray0[4] = (byte)25;
      mockFileOutputStream0.write(byteArray0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      Newzgrabber.verbose = true;
      base64Decoder0.decodeStream();
      Object[][] objectArray0 = new Object[4][3];
      Object[] objectArray1 = new Object[0];
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[1];
      objectArray2[0] = (Object) (byte)5;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[8];
      objectArray3[0] = (Object) base64Decoder0;
      objectArray3[1] = (Object) (byte) (-53);
      objectArray3[2] = (Object) (byte) (-53);
      objectArray3[3] = (Object) mockFileOutputStream0;
      objectArray3[4] = (Object) mockFileOutputStream0;
      objectArray3[5] = (Object) (byte)25;
      Object object0 = new Object();
      objectArray3[6] = object0;
      objectArray3[7] = (Object) (byte)25;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[3];
      objectArray4[0] = (Object) bufferedCustomInputStream0;
      objectArray4[1] = (Object) (byte) (-53);
      objectArray4[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = objectArray4;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray3);
      base64Decoder0.setStatusObject(defaultTableModel0);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(0L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BufferedCustomInputStream bufferedCustomInputStream0 = null;
      PrintStream printStream0 = DebugGraphics.logStream();
      Base64Decoder base64Decoder0 = new Base64Decoder((BufferedCustomInputStream) null, printStream0);
      // Undeclared exception!
      try { 
        base64Decoder0.decodeStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.Base64Decoder", e);
      }
  }
}
