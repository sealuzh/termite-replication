/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 12:51:57 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.net.Proxy;
import java.net.Socket;
import java.sql.BatchUpdateException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.util.HashMap;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Predicate;
import javax.swing.table.DefaultTableModel;
import messages.global.JoinAckMsg;
import messages.round.BombExplodedMsg;
import messages.round.RoundTimeOverMsg;
import messages.session.SessionParticipationMsg;
import messages.session.SessionScoreMsg;
import org.apache.log4j.helpers.Loader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import server.ExplosionBounds;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      MockThread.dumpStack();
      BomberClient bomberClient0 = BomberClient.getInstance();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket1 = new MockSocket(proxy0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket1, bomberClient0);
      Vector<Integer> vector0 = new Vector<Integer>();
      String string0 = "log4j: ";
      int int0 = 1;
      int int1 = 1;
      int int2 = (-622);
      ExplosionBounds explosionBounds0 = new ExplosionBounds(int0, int1, int0, int2);
      int int3 = 1;
      Vector<Integer> vector1 = new Vector<Integer>();
      Stack<Integer> stack0 = new Stack<Integer>();
      boolean boolean0 = true;
      BombExplodedMsg bombExplodedMsg0 = new BombExplodedMsg(int3, vector1, vector0, stack0, boolean0);
      bombExplodedMsg0.setExplosionBounds(explosionBounds0);
      bomberClient0.setPlayerName(string0);
      SessionParticipationMsg sessionParticipationMsg0 = new SessionParticipationMsg(boolean0, int2, string0);
      clientMsgReceiver0.processMsg(sessionParticipationMsg0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) defaultTableModel0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate4);
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate0);
      Predicate<Object> predicate9 = predicate0.or(predicate5);
      Predicate<Object> predicate10 = predicate9.or(predicate1);
      Predicate<Object> predicate11 = predicate9.and(predicate1);
      Predicate<Object> predicate12 = predicate0.negate();
      predicate9.or(predicate12);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate13 = predicate1.and(predicate0);
      Predicate<Object> predicate14 = predicate11.negate();
      Predicate<Object> predicate15 = predicate7.or(predicate4);
      Predicate<Object> predicate16 = predicate5.and(predicate6);
      Predicate<Object> predicate17 = predicate7.negate();
      Predicate<Object> predicate18 = predicate17.negate();
      predicate18.and(predicate3);
      predicate7.negate();
      Predicate<Object> predicate19 = predicate3.and(predicate14);
      Predicate<Object> predicate20 = predicate10.negate();
      Predicate.isEqual((Object) predicate2);
      predicate16.negate();
      Predicate<Object> predicate21 = predicate13.and(predicate6);
      predicate21.test(predicate13);
      Predicate<Object> predicate22 = predicate10.and(predicate15);
      predicate21.and(predicate19);
      predicate22.or(predicate20);
      Predicate.isEqual((Object) predicate13);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      JoinAckMsg joinAckMsg0 = new JoinAckMsg(false, 376);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(joinAckMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      MockThread.dumpStack();
      BomberClient bomberClient0 = BomberClient.getInstance();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket1 = new MockSocket(proxy0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket1, bomberClient0);
      int int0 = (-2662);
      Vector<Integer> vector0 = new Vector<Integer>();
      long long0 = (-1375L);
      System.setCurrentTimeMillis(long0);
      MockThread.dumpStack();
      boolean boolean0 = true;
      JoinAckMsg joinAckMsg0 = new JoinAckMsg(boolean0, int0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(joinAckMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.BomberClient", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      Vector<Integer> vector0 = new Vector<Integer>();
      long long0 = (-1L);
      System.setCurrentTimeMillis(long0);
      Stack<Integer> stack0 = new Stack<Integer>();
      RoundTimeOverMsg roundTimeOverMsg0 = new RoundTimeOverMsg();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) roundTimeOverMsg0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate2.or(predicate4);
      predicate2.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      predicate6.or(predicate5);
      Predicate<Object> predicate7 = predicate6.and(predicate4);
      Predicate<Object> predicate8 = predicate7.and(predicate4);
      predicate6.and(predicate3);
      predicate3.and(predicate7);
      Predicate<Integer> predicate9 = Predicate.isEqual((Object) predicate2);
      Predicate<Integer> predicate10 = predicate9.or(predicate0);
      Predicate<Integer> predicate11 = predicate10.negate();
      Predicate<Integer> predicate12 = predicate11.and(predicate8);
      boolean boolean0 = vector0.removeIf(predicate12);
      Vector<Integer> vector1 = new Vector<Integer>();
      int int0 = (-1607);
      Stack<Integer> stack1 = new Stack<Integer>();
      BombExplodedMsg bombExplodedMsg0 = new BombExplodedMsg(int0, stack1, stack0, stack0, boolean0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      clientMsgReceiver0.processMsg(roundTimeOverMsg0);
      //  // Unstable assertion: assertFalse(clientMsgReceiver0.isDaemon());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Vector<Integer> vector0 = new Vector<Integer>();
      System.setCurrentTimeMillis(2L);
      Stack<Integer> stack0 = new Stack<Integer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) defaultTableModel0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate0);
      predicate0.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate5.or(predicate4);
      predicate0.or(predicate7);
      Predicate<Object> predicate8 = predicate2.and(predicate6);
      Predicate<Object> predicate9 = predicate6.and(predicate8);
      Predicate<Object> predicate10 = predicate6.and(predicate8);
      Predicate<Object> predicate11 = predicate9.and(predicate5);
      predicate9.and(predicate11);
      Predicate<Object> predicate12 = predicate7.and(predicate0);
      Predicate<Object> predicate13 = predicate5.or(predicate4);
      SessionScoreMsg sessionScoreMsg0 = new SessionScoreMsg((HashMap<String, Integer>) null);
      Predicate<Integer> predicate14 = Predicate.isEqual((Object) sessionScoreMsg0);
      Predicate<Integer> predicate15 = predicate14.negate();
      Predicate<Integer> predicate16 = predicate15.and(predicate15);
      Predicate<Integer> predicate17 = predicate16.or(predicate10);
      predicate17.and(predicate13);
      vector0.removeIf(predicate12);
      Vector<Integer> vector1 = new Vector<Integer>();
      Stack<Integer> stack1 = new Stack<Integer>();
      BombExplodedMsg bombExplodedMsg0 = new BombExplodedMsg(0, vector1, vector0, vector0, false);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(sessionScoreMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Socket socket0 = null;
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver(socket0, bomberClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      System.setCurrentTimeMillis((-1375L));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("I", batchUpdateException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("I", "CONNECTION LOST", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      FileSystemHandling.shouldAllThrowIOExceptions();
      sQLInvalidAuthorizationSpecException1.getLocalizedMessage();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`S&>jM {\"%", "CONNECTION LOST", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLInvalidAuthorizationSpecException1);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("no player", 12345);
      mockSocket0.setSoLinger(true, 0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Unknown message type: ");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress2 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress2);
      byte byte0 = (byte)0;
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Loader.getResource("Vb7n=mK!]33");
      byteArray0[2] = (byte)0;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
