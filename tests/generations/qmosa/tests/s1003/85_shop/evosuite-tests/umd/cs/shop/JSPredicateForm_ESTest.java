/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 11:13:46 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(P ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0068967152315558
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(P y");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8212146057008812
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("195;t8ihdKW62!xRm");
      SystemInUtil.addInputLine("195;t8ihdKW62!xRm");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function3 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      stringReader0.markSupported();
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) jSTerm0);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      Function.identity();
      CharBuffer.wrap((CharSequence) "195;t8ihdKW62!xRm");
      boolean boolean1 = jSTerm0.equals((JSPredicateForm) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "()\"HS_da`x%y";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("()\"HS_da`x%y");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!3EvW");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9297061990576545
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(!vW");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemInUtil.addInputLine("(Szpn&4{|)Nz{");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(Szpn&4{|)Nz{");
      jSPredicateForm0.print();
      StringReader stringReader0 = new StringReader("(Szpn&4{|)Nz{");
      StringReader stringReader1 = new StringReader("(Szpn&4{|)Nz{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("$r");
      StringReader stringReader3 = new StringReader("");
      stringReader0.ready();
      StringReader stringReader4 = new StringReader(">1I3E");
      stringReader4.markSupported();
      StringReader stringReader5 = new StringReader("$r");
      stringReader2.skip((-4));
      stringReader4.markSupported();
      stringReader0.reset();
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      stringReader4.read(charArray0);
      stringReader0.reset();
      StringReader stringReader6 = new StringReader(" 5`PZlt/");
      SystemInUtil.addInputLine((String) null);
      stringReader6.skip(133L);
      stringReader4.skip(8L);
      stringReader2.close();
      SystemInUtil.addInputLine((String) null);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm(streamTokenizer0);
      System.setCurrentTimeMillis(4L);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6858900691152602
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemInUtil.addInputLine("(Szpn&4{|)Nz{");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(Szpn&4{|)Nz{");
      StringReader stringReader0 = new StringReader("(Szpn&4{|)Nz{");
      StringReader stringReader1 = new StringReader("(Szpn&4{|)Nz{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("");
      stringReader0.ready();
      StringReader stringReader3 = new StringReader(">1I3E");
      stringReader3.markSupported();
      StringReader stringReader4 = new StringReader("$r");
      stringReader0.skip((-4));
      stringReader3.markSupported();
      stringReader0.reset();
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      jSPredicateForm0.capacity();
      stringReader0.reset();
      SystemInUtil.addInputLine("p5");
      StringReader stringReader5 = new StringReader("pedtcfok.print(): 0 elemens");
      SystemInUtil.addInputLine("NNZ~<T");
      SystemInUtil.addInputLine(" 5`PZlt/");
      stringReader5.skip(0L);
      stringReader5.skip(0L);
      stringReader4.skip(0L);
      StringReader stringReader6 = new StringReader(" 5`PZlt/");
      stringReader6.close();
      stringReader6.close();
      SystemInUtil.addInputLine("(Szpn&4{|)Nz{");
      System.setCurrentTimeMillis(10);
      jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("195;t8ihdKW62!xRm");
      StringReader stringReader1 = new StringReader("8sU!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function1 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function0);
      streamTokenizer0.sval = "JSPredicateForm";
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function1);
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function1);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super Integer, ? extends String>) function2);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ? extends Integer>) function1);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      unaryOperator2.andThen((Function<? super Integer, ?>) unaryOperator3);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super Integer, ? extends String>) function3);
      jSTerm0.replaceAll(unaryOperator2);
      streamTokenizer0.ordinaryChars((-1137), 3567);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0194810901268747
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("195;t8ihdKW62!xRm");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function2 = unaryOperator0.compose((Function<? super String, ? extends Integer>) function1);
      Function<String, Integer> function3 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function2);
      unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function3);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, Integer> function5 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super Integer, ? extends String>) function6);
      unaryOperator0.compose((Function<? super JSTerm, ? extends Integer>) function5);
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function7);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function8);
      jSTerm0.replaceAll(unaryOperator0);
      Function<Object, JSTerm> function9 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.andThen((Function<? super Integer, ? extends JSTerm>) function9);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      stringReader0.markSupported();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.print();
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
      
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      assertTrue(jSPredicateForm3.equals((Object)jSPredicateForm2));
      assertNotSame(jSPredicateForm3, jSPredicateForm0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1109599684818052
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("195;t8ihdKW62!xRm");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function2 = unaryOperator0.compose((Function<? super String, ? extends Integer>) function1);
      Function<String, Integer> function3 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function3);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function5 = unaryOperator1.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, Integer> function6 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Integer, String> function7 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ?>) function7);
      Function.identity();
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function9 = function6.andThen((Function<? super Integer, ? extends String>) function8);
      Function<String, String> function10 = Function.identity();
      Function<Object, Integer> function11 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super Integer, ? extends String>) function9);
      function9.andThen((Function<? super String, ? extends String>) function5);
      function9.andThen((Function<? super String, ? extends String>) function10);
      Function<Object, String> function12 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function13 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function9.andThen((Function<? super String, ? extends String>) function13);
      jSTerm0.add((Object) jSTerm0);
      unaryOperator1.andThen((Function<? super String, ? extends String>) function9);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Function.identity();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm1));
      
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertEquals("[195.0, [195.0]]", jSPredicateForm0.toString());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "(vV";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(vV");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3_5gy_[['Gb?<2-/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.sval = "3_5gy_[['Gb?<2-/";
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-2), (-2));
      streamTokenizer1.ttype = (-2);
      streamTokenizer0.ordinaryChar((-3012));
      streamTokenizer0.whitespaceChars((-2), (-2));
      streamTokenizer1.ordinaryChar((-2));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.commentChar((-2));
      streamTokenizer0.wordChars((-2), (-2));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.whitespaceChars((-2068004049), (-1634698280));
      streamTokenizer2.pushBack();
      streamTokenizer2.pushBack();
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(%!vW");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 3L;
      System.setCurrentTimeMillis(3L);
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7413926873721288
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i+L7l[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      jSTerm0.clone();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "i+L7l[");
      stringReader0.read(charBuffer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.addElement(stringReader0);
      jSPredicateForm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      jSPredicateForm0.toStr();
      streamTokenizer0.parseNumbers();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(Poy");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4102453456579889
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "pok");
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1043L);
      SystemInUtil.addInputLine((String) null);
      System.setCurrentTimeMillis(0L);
      SystemInUtil.addInputLine((String) null);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      SystemInUtil.addInputLine((String) null);
      System.setCurrentTimeMillis(1805L);
      SystemInUtil.addInputLine("wvw");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(153L);
      SystemInUtil.addInputLine("wvw");
      System.setCurrentTimeMillis(0L);
      jSPredicateForm0.add((Object) jSPredicateForm1);
      jSPredicateForm1.toStr();
      System.setCurrentTimeMillis(1408L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "Expecting Term";
      SystemInUtil.addInputLine("Expecting Term");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      System.setCurrentTimeMillis((-22L));
      SystemInUtil.addInputLine("Expecting Term");
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function1 = unaryOperator0.compose((Function<? super String, ? extends Integer>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = function1.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function1);
      Function<String, Integer> function4 = unaryOperator0.compose((Function<? super String, ? extends Integer>) function1);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function6 = function3.andThen((Function<? super Integer, ? extends String>) function5);
      Function<Object, Integer> function7 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      function6.compose((Function<? super Object, ?>) function7);
      function4.compose((Function<? super Object, ? extends String>) function6);
      function7.andThen((Function<? super Integer, ? extends Integer>) function3);
      Function<Object, String> function8 = unaryOperator1.compose((Function<? super Object, ? extends String>) function6);
      Function<Object, Integer> function9 = function1.compose((Function<? super Object, ? extends String>) function6);
      Function<Object, JSTerm> function10 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      function9.andThen((Function<? super Integer, ? extends JSTerm>) function10);
      unaryOperator0.andThen((Function<? super Integer, ?>) function8);
      Function<Object, String> function11 = function3.andThen((Function<? super Integer, ? extends String>) function6);
      Function.identity();
      function4.andThen((Function<? super Integer, ? extends Integer>) function7);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function11);
      function9.andThen((Function<? super Integer, ? extends String>) function6);
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-321));
      jSTerm0.add((Object) integer0);
      unaryOperator1.andThen((Function<? super String, ? extends String>) function6);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Predictefom.print(): 0 elemens");
      jSTerm0.add((Object) "Predictefom.print(): 0 elemens");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSTerm0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1064801542156266
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "(SwOzpn&4{|)Nz{";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(SwOzpn&4{|)Nz{");
      jSPredicateForm0.add((Object) "(SwOzpn&4{|)Nz{");
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(830L);
      System.setCurrentTimeMillis(3099L);
      System.setCurrentTimeMillis(512L);
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("195;t8ihdKW62!xRm");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-1124));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function2 = unaryOperator0.compose((Function<? super String, ? extends Integer>) function1);
      Function<String, Integer> function3 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function3);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function4);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function5);
      jSTerm0.replaceAll(unaryOperator0);
      streamTokenizer0.ordinaryChars((-1124), (-2));
      jSTerm0.call();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis((-1124));
      System.setCurrentTimeMillis(1128L);
      System.setCurrentTimeMillis((-1124));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("195;t8ihdKW62!xRm");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function2 = unaryOperator0.compose((Function<? super String, ? extends Integer>) function1);
      Function<String, Integer> function3 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function2);
      function3.andThen((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function3);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Integer integer0 = new Integer((-1124));
      jSTerm0.add((Object) integer0);
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) function4);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Integer, ? extends Integer>) unaryOperator2);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.apply((Integer) (-2));
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function5);
      jSTerm0.replaceAll(unaryOperator0);
      streamTokenizer0.ordinaryChars((-1124), (-1124));
      JSTerm jSTerm1 = jSTerm0.call();
      streamTokenizer0.quoteChar((-1124));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.pushBack();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function1 = unaryOperator0.compose((Function<? super String, ? extends Integer>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = function1.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<String, Integer> function4 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function3);
      streamTokenizer0.ttype = (-1982585444);
      Function<String, Integer> function5 = unaryOperator0.compose((Function<? super String, ? extends Integer>) function4);
      Function<Integer, String> function6 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = function3.andThen((Function<? super Integer, ? extends String>) function6);
      Function<Object, Integer> function8 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function9 = function5.compose((Function<? super Object, ? extends String>) function7);
      Function<Object, String> function10 = unaryOperator1.compose((Function<? super Object, ? extends String>) function7);
      Function<Object, Integer> function11 = function5.compose((Function<? super Object, ? extends String>) function10);
      function3.andThen((Function<? super Integer, ? extends Integer>) function8);
      unaryOperator0.andThen((Function<? super Integer, ?>) function10);
      function11.andThen((Function<? super Integer, ? extends String>) function7);
      Function.identity();
      function4.andThen((Function<? super Integer, ? extends Integer>) function9);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function10);
      function9.andThen((Function<? super Integer, ? extends String>) function10);
      jSTerm0.add((Object) null);
      unaryOperator1.andThen((Function<? super String, ? extends String>) function7);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(>h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("% ");
      SystemInUtil.addInputLine("(>h");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("% ");
      StringReader stringReader3 = new StringReader("% ");
      stringReader1.ready();
      stringReader1.markSupported();
      StringReader stringReader4 = new StringReader("Dh");
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '0';
      stringReader0.markSupported();
      stringReader4.reset();
      charArray0[2] = '\'';
      stringReader4.read(charArray0);
      stringReader0.reset();
      StringReader stringReader5 = new StringReader("predictefom.print(): 0 elemens");
      stringReader1.skip((-4));
      stringReader4.skip(0L);
      stringReader1.close();
      SystemInUtil.addInputLine((String) null);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predictefom.print(): 0 elemens");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("195;t8ihdKW62!xRm");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function2 = unaryOperator0.compose((Function<? super String, ? extends Integer>) function1);
      Function<String, Integer> function3 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function3);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function5 = unaryOperator1.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, Integer> function6 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Integer, String> function7 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ?>) function7);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super Integer, ? extends String>) function8);
      unaryOperator0.compose((Function<? super JSTerm, ? extends Integer>) function6);
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function.identity();
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function5);
      jSTerm0.replaceAll(unaryOperator0);
      Function<Integer, JSTerm> function10 = (Function<Integer, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super Integer, ? extends JSTerm>) function10);
      jSTerm0.add((Object) null);
      unaryOperator1.andThen((Function<? super String, ? extends String>) function5);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Predictefom.print(): 0 elemens");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSTerm0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.addElement("Predictefom.print(): 0 elemens");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      long long0 = 1L;
      System.setCurrentTimeMillis(1L);
      jSPredicateForm0.add((Object) null);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3_5gy_[['Gb?<2-/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.sval = "3_5gy_[['Gb?<2-/";
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-326114488));
      streamTokenizer2.ttype = (-4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar((-3012));
      streamTokenizer0.whitespaceChars((-67), (-4));
      streamTokenizer2.ordinaryChar((-326114488));
      streamTokenizer3.slashStarComments(true);
      streamTokenizer1.ttype = (-4);
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer4.lowerCaseMode(false);
      streamTokenizer4.resetSyntax();
      streamTokenizer4.pushBack();
      streamTokenizer1.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UnaryOperator.identity();
      int int0 = 1683;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.2346791997877273
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(Szpn&4{|)Nz{");
      StringReader stringReader0 = new StringReader("(Szpn&4{|)Nz{");
      StringReader stringReader1 = new StringReader("(Szpn&4{|)Nz{");
      stringReader0.skip((-1435L));
      StringReader stringReader2 = new StringReader("");
      stringReader0.ready();
      StringReader stringReader3 = new StringReader(">1I3E");
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm0.size();
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(>h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("DuN%T");
      StringReader stringReader2 = new StringReader("DuN%T");
      stringReader0.ready();
      stringReader0.markSupported();
      StringReader stringReader3 = new StringReader("Dh");
      char[] charArray0 = new char[3];
      stringReader3.markSupported();
      stringReader0.read(charArray0);
      stringReader0.markSupported();
      stringReader3.read(charArray0);
      stringReader3.reset();
      charArray0[2] = '\'';
      stringReader3.reset();
      stringReader3.read(charArray0);
      stringReader3.mark(2);
      stringReader0.ready();
      StringReader stringReader4 = new StringReader("predictefom.print(): 0 elemens");
      stringReader3.skip(3);
      stringReader0.close();
      SystemInUtil.addInputLine((String) null);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3_5g]y?Z_[['Gb?<2-/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.sval = "3_5g]y?Z_[['Gb?<2-/";
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer2.ttype = (-4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.ordinaryChars(1067, (-4));
      streamTokenizer3.resetSyntax();
      streamTokenizer3.wordChars((-4), 37);
      streamTokenizer3.nval = (double) (-4);
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.sval = "3_5g]y?Z_[['Gb?<2-/";
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      streamTokenizer2.slashSlashComments(true);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3_5g]y?Z_[['Gb?<2-/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.sval = "3_5g]y?Z_[['Gb?<2-/";
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer2.ttype = (-4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.ordinaryChars(1027, (-4));
      streamTokenizer3.resetSyntax();
      streamTokenizer3.wordChars((-4), 37);
      streamTokenizer3.ttype = (-4);
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.sval = null;
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.quoteChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0, (JSSubstitution) null);
      assertTrue(jSSubstitution0.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3_5g]y?Z_[['Gb?<2-/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.sval = "3_5g]y?Z_[['Gb?<2-/";
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer2.ttype = (-4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.ordinaryChars(1027, (-4));
      streamTokenizer3.resetSyntax();
      streamTokenizer3.wordChars((-4), 37);
      streamTokenizer3.nval = (double) (-4);
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.sval = null;
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.quoteChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      jSTerm1.add((Object) streamTokenizer2);
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0, (JSSubstitution) null);
      assertEquals(0, jSSubstitution0.size());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3_5gy_[['Gb?<2-/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.sval = "3_5gy_[['Gb?<2-/";
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-326114488));
      streamTokenizer2.ttype = (-4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar((-3012));
      streamTokenizer0.whitespaceChars((-67), (-4));
      streamTokenizer2.ordinaryChar((-326114488));
      streamTokenizer3.slashStarComments(true);
      streamTokenizer0.ttype = (-4);
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer4.lowerCaseMode(false);
      streamTokenizer4.resetSyntax();
      streamTokenizer4.pushBack();
      streamTokenizer1.pushBack();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3_5g]y?d_[['Gb?<2-/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.sval = "3_5g]y?d_[['Gb?<2-/";
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.slashSlashComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-326114488));
      streamTokenizer2.ttype = (-4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar((-3012));
      streamTokenizer3.nval = (double) (-4);
      streamTokenizer3.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer4.eolIsSignificant(true);
      streamTokenizer4.lowerCaseMode(false);
      streamTokenizer4.resetSyntax();
      streamTokenizer4.pushBack();
      streamTokenizer1.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) "UV,");
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3_5g]y?d_[['Gb?<2-/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), 3042);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.sval = "3_5g]y?d_[['Gb?<2-/";
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.slashSlashComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ttype = (-4);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChar((-3012));
      streamTokenizer4.nval = (double) (-4);
      streamTokenizer4.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer2.parseNumbers();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer5.eolIsSignificant(true);
      streamTokenizer5.resetSyntax();
      streamTokenizer2.sval = "3_5g]y?d_[['Gb?<2-/";
      streamTokenizer5.pushBack();
      streamTokenizer2.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis((-748L));
      System.setCurrentTimeMillis(3L);
      System.setCurrentTimeMillis(3L);
      System.setCurrentTimeMillis(3L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(4100L);
      System.setCurrentTimeMillis((-748L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(4765L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(4765L);
      System.setCurrentTimeMillis(3L);
      System.setCurrentTimeMillis((-748L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(3860L);
      System.setCurrentTimeMillis(3860L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(3L);
      System.setCurrentTimeMillis((-1288L));
      System.setCurrentTimeMillis(2204L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3_5g]y?d_[['Gb?<2-/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.wordChars((-4), 3042);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.ttype = (-1646);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer2.ttype = (-4);
      streamTokenizer2.slashSlashComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ttype = (-4);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer2.commentChar((-4));
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer4.pushBack();
      streamTokenizer4.eolIsSignificant(true);
      jSTerm0.listIterator();
      streamTokenizer3.pushBack();
      streamTokenizer2.sval = null;
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8sU!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      SystemInUtil.addInputLine("8sU!");
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function1 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function0);
      unaryOperator0.compose((Function<? super String, ? extends Integer>) function1);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function1);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.apply("vPdbc@m{8n{*@");
      function1.andThen((Function<? super Integer, ? extends String>) function2);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ? extends Integer>) function1);
      UnaryOperator.identity();
      SystemInUtil.addInputLine("8sU!");
      Function.identity();
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator3.andThen((Function<? super Integer, ? extends String>) function3);
      jSTerm0.replaceAll(unaryOperator3);
      streamTokenizer0.ordinaryChars((-1126), 3567);
      System.setCurrentTimeMillis(3567);
      System.setCurrentTimeMillis(3567);
      System.setCurrentTimeMillis((-618L));
      System.setCurrentTimeMillis((-124L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2076L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1524L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-2076L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-310L));
      System.setCurrentTimeMillis(1551L);
      System.setCurrentTimeMillis((-1244L));
      System.setCurrentTimeMillis((-1244L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-2076L));
      System.setCurrentTimeMillis((-407L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1244L));
      jSPredicateForm0.print();
      assertEquals(10, jSPredicateForm0.capacity());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "PedtefoK.print(): 0 elemens");
      jSTerm0.add((Object) "PedtefoK.print(): 0 elemens");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSTerm0;
      Object object0 = new Object();
      jSTerm0.add((Object) "PedtefoK.print(): 0 elemens");
      Object object1 = new Object();
      jSTerm0.add(object1);
      SystemInUtil.addInputLine("PedtefoK.print(): 0 elemens");
      objectArray0[1] = object0;
      jSTerm0.clear();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.clear();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addElements(jSSubstitution1);
      jSSubstitution2.remove((Object) "call");
      jSSubstitution2.assignFailure();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      long long0 = 0L;
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.remove((Object) "call");
      jSSubstitution2.assignFailure();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SystemInUtil.addInputLine("3_5g]y?d_[['Gb?<2-/");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      System.setCurrentTimeMillis((-12L));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis((-748L));
      System.setCurrentTimeMillis((-12L));
      System.setCurrentTimeMillis((-12L));
      System.setCurrentTimeMillis((-12L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(4100L);
      System.setCurrentTimeMillis((-748L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-748L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-748L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-12L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(2189L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2189L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer(4568);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Integer integer1 = new Integer((-1296));
      SystemInUtil.addInputLine("not");
      UnaryOperator.identity();
      Integer integer2 = new Integer((-1296));
      UnaryOperator.identity();
      Integer integer3 = new Integer((-1094999318));
      Integer integer4 = new Integer((-1079435483));
      unaryOperator0.apply(integer4);
      Integer integer5 = new Integer((-170768857));
      UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer6 = new Integer((-163928245));
      unaryOperator1.apply(integer6);
      Integer integer7 = new Integer((-170768857));
      Integer integer8 = new Integer((-68256823));
      Integer integer9 = new Integer((-244));
      unaryOperator0.apply(integer9);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("P ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(Poh");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
