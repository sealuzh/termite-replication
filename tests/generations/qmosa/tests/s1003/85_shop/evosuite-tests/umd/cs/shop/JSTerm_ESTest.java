/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 05:20:33 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.ListIterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0330001999799117
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N`f~naa2SL&LDDY3VK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-4557.4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm0.isEval());
      
      jSTerm0.makeEval(true);
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.matches(jSTerm0);
      jSTerm1.call();
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "";
      jSTerm0.setSize(3365);
      jSTerm0.add((Object) "");
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StringReader stringReader1 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm0.isEval());
      
      stringReader1.ready();
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[2] = '=';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("d");
      stringReader2.read();
      stringReader0.read();
      stringReader2.read();
      jSTerm0.makeEval(true);
      stringReader2.reset();
      stringReader0.mark(3);
      stringReader0.markSupported();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      streamTokenizer0.slashSlashComments(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEval();
      jSTerm0.standardizerTerm();
      jSTerm0.standardizerTerm();
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.159731616075493
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StringReader stringReader1 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader1.ready();
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[2] = '=';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("3gcK]F");
      stringReader2.read();
      stringReader2.markSupported();
      stringReader2.reset();
      stringReader2.read();
      stringReader2.reset();
      stringReader0.mark(3);
      stringReader0.markSupported();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSSubstitution2.isEmpty());
      assertFalse(jSTerm1.isConstant());
      
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer0);
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[nil]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[?L3Fk.|S0f4]", jSTerm0.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm2.isVariable());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3316643102930148
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3nr0Ts`Ju");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.containsAll(jSPredicateForm0);
      stringReader0.read();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      int int0 = 1222;
      int int1 = 0;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "3nr0Ts`Ju", 1222, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9561874676604514
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 98;
      streamTokenizer0.whitespaceChars(0, 98);
      streamTokenizer0.ttype = 0;
      StringReader stringReader1 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader2 = new StringReader("gcK]%");
      stringReader2.skip(0);
      stringReader2.close();
      streamTokenizer1.slashSlashComments(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1146299722481476
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      JSJshopVars.flagLevel = (-1551);
      JSJshopVars.exclamation = 20;
      StringReader stringReader0 = new StringReader("KtY??lKl");
      jSSubstitution2.iterator();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer0.wordChars(20, (-3));
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSTerm0.add((Object) jSTerm2);
      JSJshopVars.semicolon = 20;
      jSTerm1.listIterator();
      jSTerm0.isGround();
      jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertEquals("[[], [?%%%]]", jSTerm0.toString());
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.666332585328325
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.168155236015967
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate0.negate();
      predicate2.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Object> predicate6 = predicate5.and(predicate1);
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      Predicate<String> predicate8 = Predicate.isEqual((Object) predicate2);
      Predicate<String> predicate9 = predicate8.negate();
      predicate9.test("w");
      Predicate<String> predicate10 = predicate9.and(predicate7);
      Predicate<String> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate7.or(predicate5);
      Predicate<String> predicate13 = predicate11.or(predicate8);
      predicate13.negate();
      Predicate<Object> predicate14 = predicate4.and(predicate12);
      Predicate<Object> predicate15 = predicate2.negate();
      predicate14.or(predicate1);
      predicate14.or(predicate15);
      Predicate<String> predicate16 = predicate10.and(predicate4);
      predicate16.or(predicate6);
      predicate6.negate();
      predicate3.negate();
      predicate13.negate();
      System.setCurrentTimeMillis(41);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm2.equals(jSTerm1);
      boolean boolean0 = jSTerm3.equals(jSTerm1);
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertEquals("[?L3Fk.|S0f40]", jSTerm3.toString());
      assertFalse(boolean0);
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?L3Fk.|S0f4]", jSTerm1.toString());
      assertNotSame(jSTerm1, jSTerm2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9803317612376334
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "k06_90{'zlI");
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.trimToSize();
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean1);
      
      jSTerm0.listIterator();
      jSSubstitution0.containsAll(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.equals((JSPredicateForm) jSTerm0);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.addElement(jSTerm3);
      System.setCurrentTimeMillis(635L);
      jSTerm2.print();
      assertTrue(jSTerm2.isFunction());
      
      jSTerm1.print();
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9184277849930977
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      Function<String, String> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super Integer, ? extends String>) function1);
      Function.identity();
      jSTerm0.replaceAll(unaryOperator1);
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.listIterator();
      jSTerm0.toStr();
      System.setCurrentTimeMillis((-929L));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      function0.compose((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function.identity();
      Function<String, String> function4 = function0.compose((Function<? super String, ? extends String>) unaryOperator0);
      function0.apply("?");
      function4.compose((Function<? super JSSubstitution, ? extends String>) function3);
      jSTerm0.add((Object) null);
      jSTerm0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function.identity();
      Function<String, String> function1 = unaryOperator0.andThen((Function<? super String, ? extends String>) function0);
      function1.andThen((Function<? super String, ?>) function0);
      Function<String, String> function2 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ?>) function1);
      function0.andThen((Function<? super String, ? extends String>) function1);
      function2.apply("");
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) function2);
      jSTerm0.listIterator();
      jSTerm0.toStr();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.121089729127308
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm1.trimToSize();
      JSJshopVars.exclamation = 20;
      StringReader stringReader0 = new StringReader("KtY??lKl");
      jSSubstitution2.iterator();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(20, (-4));
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSTerm0.add((Object) jSTerm2);
      JSJshopVars.semicolon = 20;
      jSTerm1.listIterator();
      jSTerm0.isGround();
      jSTerm1.cloneT();
      jSTerm0.standardizerTerm();
      assertEquals("[[], [%%%]]", jSTerm0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Function<JSSubstitution, JSSubstitution> function1 = Function.identity();
      Function.identity();
      Function<Object, Object> function2 = Function.identity();
      Function<Object, Object> function3 = Function.identity();
      Function<Object, Object> function4 = Function.identity();
      Function<String, String> function5 = Function.identity();
      Function<String, String> function6 = Function.identity();
      Function.identity();
      function4.compose((Function<? super String, ?>) function2);
      function2.compose((Function<? super String, ?>) function6);
      Function.identity();
      Function<Object, Object> function7 = function3.andThen((Function<? super Object, ?>) function2);
      Function<Integer, String> function8 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function9 = function5.compose((Function<? super Integer, ? extends String>) function8);
      function2.compose((Function<? super Object, ?>) function7);
      Function<String, String> function10 = function6.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function11 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super String, ?>) function3);
      function5.compose((Function<? super Integer, ? extends String>) function9);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) function10);
      jSTerm0.addElement(function1);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$50/735229508 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super Object, ? extends String>) function1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      StringReader stringReader0 = new StringReader("%I1");
      StringReader stringReader1 = new StringReader("%I1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.wordChars(700, (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("zl Mdt5Jp<9BF1/Rz2K");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply("0~x9~_(ZdW");
      unaryOperator2.apply("0~x9~_(ZdW");
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator2.apply("0~x9~_(ZdW");
      unaryOperator1.apply("");
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.apply((String) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.apply("zl Mdt5Jp<9BF1/Rz2K");
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator3.apply(unaryOperator5);
      unaryOperator1.apply("+ ");
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator6.apply("+ ");
      unaryOperator6.apply(unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(ebpk[G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.nval = 0.0;
      streamTokenizer2.whitespaceChars((-4), 67);
      streamTokenizer2.ttype = (-4);
      streamTokenizer3.ordinaryChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      streamTokenizer4.whitespaceChars((-4), 40);
      streamTokenizer4.whitespaceChars((-4), 2);
      streamTokenizer4.wordChars(2551, (-4));
      streamTokenizer3.quoteChar((-4));
      streamTokenizer4.whitespaceChars(590, (-4));
      System.setCurrentTimeMillis((-4));
      streamTokenizer1.wordChars(40, (-4));
      streamTokenizer3.nval = 0.0;
      streamTokenizer3.quoteChar((-4));
      streamTokenizer3.resetSyntax();
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2285907167590837
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      jSTerm1.trimToSize();
      JSJshopVars.exclamation = 39;
      StringReader stringReader0 = new StringReader("KtY??lKl");
      jSSubstitution3.iterator();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(39, (-4));
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution4);
      jSTerm0.add((Object) jSTerm2);
      JSJshopVars.semicolon = 39;
      jSTerm1.listIterator();
      jSTerm0.isGround();
      jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm3.print();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      assertEquals("[[], [%%%]]", jSTerm0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.apply("zl Mdt5Jp<9BF1/Rz2K");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) unaryOperator0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply("0~x9~_(ZdW");
      Function<JSSubstitution, JSSubstitution> function0 = Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator2.apply("&X");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.apply("&X");
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator3.apply("+ ");
      unaryOperator5.apply("&X");
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator6.apply(unaryOperator3);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Object, ?>) unaryOperator4);
      UnaryOperator.identity();
      jSTerm0.add((Object) function0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$50/735229508 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Function<JSSubstitution, JSSubstitution> function1 = Function.identity();
      Function<Integer, Integer> function2 = Function.identity();
      Integer integer0 = new Integer((-3));
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function4 = function2.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, Object> function5 = Function.identity();
      Function<Object, Object> function6 = Function.identity();
      Function.identity();
      function6.apply(function2);
      Function<String, String> function7 = Function.identity();
      function6.compose((Function<? super String, ?>) function0);
      Function.identity();
      Function<Object, Object> function8 = function5.andThen((Function<? super Object, ?>) function6);
      Function<Integer, String> function9 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function9).apply(anyInt());
      Function<Integer, String> function10 = function0.compose((Function<? super Integer, ? extends String>) function9);
      function10.apply((Integer) null);
      Function<Object, Integer> function11 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.apply(function8);
      Function<Object, String> function12 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function13 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function14 = function5.andThen((Function<? super Object, ? extends String>) function13);
      Function<Object, Object> function15 = function5.compose((Function<? super Object, ?>) function12);
      function10.apply(integer0);
      Function<Object, String> function16 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) function15);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) function14);
      function7.compose((Function<? super Integer, ? extends String>) function4);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) function1);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$50/735229508 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7917594692280554
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "?L3Fk.|S0f4)Q|nGw{a";
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.798652206252129
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm1.trimToSize();
      JSJshopVars.exclamation = 20;
      jSSubstitution2.iterator();
      jSSubstitution2.add((Object) jSTerm1);
      Integer integer0 = new Integer(20);
      jSTerm0.add((Object) integer0);
      jSTerm1.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator2.andThen((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator4);
      jSTerm0.add((Object) jSSubstitution1);
      StringReader stringReader0 = new StringReader("(XcGIJ._{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-3));
      jSTerm0.add((Object) unaryOperator3);
      jSTerm0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8460525146995628
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Function.identity();
      Function<Integer, Integer> function1 = Function.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-3));
      function1.apply(integer0);
      Function<Object, Object> function3 = Function.identity();
      Function<Object, Object> function4 = Function.identity();
      Function.identity();
      function4.apply(function1);
      Function.identity();
      function4.compose((Function<? super String, ?>) function0);
      Function.identity();
      function3.andThen((Function<? super Object, ?>) function4);
      Function<Integer, String> function5 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function5).apply(anyInt());
      Function<Integer, String> function6 = function0.compose((Function<? super Integer, ? extends String>) function5);
      function6.apply((Integer) null);
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.compose((Function<? super Object, ? extends Integer>) function7);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.andThen((Function<? super Object, ? extends String>) function9);
      function3.compose((Function<? super Object, ?>) function8);
      function6.apply(integer0);
      Function<String, String> function10 = function0.andThen((Function<? super String, ? extends String>) function2);
      Function<Object, String> function11 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function10.compose((Function<? super Object, ? extends String>) function11);
      function10.andThen((Function<? super String, ?>) function3);
      function10.compose((Function<? super Integer, ? extends String>) function6);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) function10);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$53/446233589 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      function0.compose((Function<? super String, ? extends String>) unaryOperator0);
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function2);
      Function.identity();
      function1.apply("pp3ph9rM");
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator2.andThen((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator<JSTerm> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super JSTerm, ?>) unaryOperator4);
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator5);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution2);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.listIterator();
      jSTerm1.listIterator();
      UnaryOperator<JSTerm> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator<JSTerm> unaryOperator7 = UnaryOperator.identity();
      unaryOperator7.andThen((Function<? super JSTerm, ?>) unaryOperator6);
      Object object0 = new Object();
      System.setCurrentTimeMillis(666L);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|Sf4)Q|)nGw{a");
      StringReader stringReader1 = new StringReader("?L3Fk.|Sf4)Q|)nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader1.ready();
      stringReader1.ready();
      stringReader1.read();
      char[] charArray0 = new char[8];
      stringReader0.mark(81);
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("gcK]F");
      stringReader2.read();
      stringReader2.markSupported();
      char[] charArray1 = new char[7];
      charArray1[0] = '+';
      charArray1[1] = 'I';
      charArray1[2] = '4';
      charArray1[4] = '<';
      charArray1[5] = ',';
      charArray1[6] = '(';
      stringReader0.read(charArray1);
      stringReader2.reset();
      stringReader1.mark(7);
      stringReader0.read();
      stringReader2.reset();
      stringReader0.mark(7);
      stringReader0.markSupported();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1390858946957136
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "~J/PR");
      jSSubstitution0.add((Object) jSTerm0);
      JSJshopVars.greaterT = (-3894);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.trimToSize();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm0.trimToSize();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.equals(jSTerm1);
      jSTerm0.listIterator();
      jSTerm2.cloneT();
      jSTerm1.removeAll(jSSubstitution1);
      jSTerm3.isEmpty();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.1390858946957136
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.trimToSize();
      jSTerm1.remove((Object) jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.listIterator();
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.304143737461093
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.isGround();
      jSTerm3.equals(jSTerm1);
      jSTerm4.matches(jSTerm2, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.055586143763578
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      Object object0 = new Object();
      jSSubstitution2.add(object0);
      jSTerm1.trimToSize();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm3.matches(jSTerm1, jSSubstitution3);
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.022456924203762
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isVariable());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm2, jSSubstitution1);
      assertFalse(jSSubstitution3.fail());
      
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      predicate2.negate();
      predicate1.or(predicate2);
      Predicate.isEqual((Object) jSSubstitution5);
      Predicate<Object> predicate5 = predicate2.and(predicate1);
      Predicate<Object> predicate6 = predicate5.and(predicate3);
      Predicate<Object> predicate7 = predicate2.and(predicate1);
      Predicate<Object> predicate8 = predicate2.and(predicate7);
      Predicate<String> predicate9 = predicate0.or(predicate3);
      Predicate<String> predicate10 = predicate9.and(predicate3);
      jSTerm2.clear();
      Predicate<Object> predicate11 = predicate4.and(predicate7);
      predicate8.and(predicate11);
      predicate9.test("");
      predicate9.or(predicate5);
      predicate3.negate();
      Predicate<String> predicate12 = Predicate.isEqual((Object) null);
      predicate0.and(predicate12);
      Predicate<String> predicate13 = predicate10.negate();
      predicate13.or(predicate6);
      assertEquals(1, jSTerm1.size());
      
      predicate12.or(predicate0);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm3);
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "k06_90{'zlI";
      jSTerm0.add((Object) "k06_90{'zlI");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.trimToSize();
      jSTerm1.isFunction();
      jSSubstitution0.containsAll(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Function<Integer, Integer> function1 = Function.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function3).apply(any());
      Function<Object, Integer> function4 = function1.compose((Function<? super Object, ? extends Integer>) function3);
      Integer integer0 = new Integer((-3));
      Integer integer1 = function1.apply(integer0);
      Function<Integer, Integer> function5 = function1.compose((Function<? super Integer, ? extends Integer>) function4);
      Function<Object, Object> function6 = Function.identity();
      function6.apply(function1);
      function0.apply("PeV(i%R^d");
      function4.apply(integer1);
      Function<Integer, String> function7 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = function4.andThen((Function<? super Integer, ? extends String>) function7);
      Function.identity();
      function6.compose((Function<? super String, ?>) function0);
      function6.andThen((Function<? super Object, ?>) function2);
      Function<Integer, String> function9 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function9).apply(anyInt());
      Function<Integer, String> function10 = function0.compose((Function<? super Integer, ? extends String>) function9);
      Function<Integer, String> function11 = function10.compose((Function<? super Integer, ? extends Integer>) function4);
      function11.andThen((Function<? super String, ? extends Integer>) function4);
      Function.identity();
      function0.andThen((Function<? super String, ?>) function8);
      Function.identity();
      function11.andThen((Function<? super String, ? extends Integer>) function4);
      function10.andThen((Function<? super String, ?>) function6);
      function11.apply(integer1);
      function10.compose((Function<? super Integer, ? extends Integer>) function5);
      function11.apply((Integer) null);
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("-HP2e]dx");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8848713335781608
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.trimToSize();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9895083403510019
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.trimToSize();
      JSJshopVars.exclamation = 39;
      StringReader stringReader0 = new StringReader("KtY??lKl");
      jSSubstitution1.iterator();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(39, (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSTerm0.add((Object) jSTerm1);
      JSJshopVars.semicolon = 39;
      jSTerm0.listIterator();
      jSTerm0.isGround();
      jSTerm0.cloneT();
      jSTerm0.standardizerTerm();
      assertEquals("[[], [%%%]]", jSTerm0.toString());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function2 = Function.identity();
      Function<String, String> function3 = function0.andThen((Function<? super String, ? extends String>) function1);
      function3.andThen((Function<? super String, ?>) function2);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function5 = function0.compose((Function<? super Object, ? extends String>) function4);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) function3);
      function0.compose((Function<? super Integer, ? extends String>) function5);
      function2.compose((Function<? super Object, ?>) function5);
      Function<String, String> function6 = function3.andThen((Function<? super String, ? extends String>) function5);
      function0.andThen((Function<? super String, ?>) function6);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6326309271543518
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StringReader stringReader1 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader2 = new StringReader("gcK]%");
      StringReader stringReader3 = new StringReader("dk,0-pRb7rP.owD;63K");
      stringReader3.read();
      jSTerm0.clear();
      stringReader3.skip(0L);
      StringReader stringReader4 = new StringReader("dk,0-pRb7rP.owD;63K");
      stringReader4.close();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7170759801988817
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 98;
      streamTokenizer0.whitespaceChars(0, 0);
      streamTokenizer0.ttype = 0;
      StringReader stringReader1 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.mark(0);
      StringReader stringReader2 = new StringReader("47)?");
      stringReader1.skip(0);
      stringReader0.close();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0316900029887046
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2545));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis((-778L));
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      boolean boolean1 = jSTerm3.equals(jSTerm5);
      assertFalse(boolean1);
      
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      jSTerm0.isConstant();
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0330001999799117
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("q1%g'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(2764, 566);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      ListIterator listIterator0 = jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.trimToSize();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSSubstitution0.add((Object) "q1%g'");
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) listIterator0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate2);
      predicate4.or(predicate3);
      predicate0.or(predicate4);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate2);
      predicate7.or(predicate2);
      predicate0.or(predicate3);
      Predicate<String> predicate8 = predicate0.negate();
      predicate8.test(" Expected (");
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate6);
      predicate8.and(predicate9);
      jSTerm1.removeIf(predicate2);
      jSTerm0.parallelStream();
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      jSTerm4.equals((JSPredicateForm) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm4.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.whitespaceChars(1, 108);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashStarComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.resetSyntax();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar(2382);
      streamTokenizer3.wordChars(1079, 42);
      streamTokenizer2.quoteChar(1079);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer8.quoteChar(2551);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer7);
      jSTerm0.isVariable();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[?L3Fk.|S0f4]", jSTerm0.toString());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0592293789763123
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y)?RBSsOY$#Bc3g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      stringReader0.mark(41);
      JSJshopVars.leftPar = 41;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      streamTokenizer0.pushBack();
      JSJshopVars.interrogation = 75;
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm2.equals(jSTerm0);
      jSTerm1.cloneT();
      System.setCurrentTimeMillis(41);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(ebpk[G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.nval = 0.0;
      streamTokenizer2.whitespaceChars((-4), 67);
      streamTokenizer2.ttype = (-4);
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.nval = (double) (-4);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), 2);
      streamTokenizer3.ordinaryChars((-4), (-1434881251));
      streamTokenizer3.wordChars((-4), (-4));
      streamTokenizer3.quoteChar((-4));
      streamTokenizer2.whitespaceChars(590, (-4));
      System.setCurrentTimeMillis((-4));
      streamTokenizer3.wordChars((-4), (-4));
      streamTokenizer3.quoteChar((-4));
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8734517375545654
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.nval = (-956.1744047104705);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars((-4), (-538));
      StringReader stringReader1 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[2] = '=';
      stringReader1.read(charArray0);
      streamTokenizer0.resetSyntax();
      StringReader stringReader2 = new StringReader("gcK]%");
      stringReader2.read();
      stringReader2.reset();
      stringReader2.skip(3);
      StringReader stringReader3 = new StringReader("gcK]%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      streamTokenizer2.eolIsSignificant(false);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis((-4));
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals(41, streamTokenizer0.ttype);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeAllElements();
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.remove((-1927));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1927
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StringReader stringReader1 = new StringReader("?l8fk.|s<f4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.quoteChar(2366);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.whitespaceChars(60, 30);
      streamTokenizer1.ordinaryChar(30);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.wordChars(123, 42);
      streamTokenizer0.quoteChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean0);
      assertEquals("[?L3Fk.|S0f4]", jSTerm0.toString());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.slashStarComments(true);
      StringReader stringReader1 = new StringReader("");
      stringReader0.reset();
      stringReader0.reset();
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator2.andThen((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator3);
      jSTerm0.isConstant();
      Integer integer0 = new Integer((-17));
      assertEquals((-17), (int)integer0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.349792396172401
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("q1%g'");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.trimToSize();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "q1%g'");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) jSSubstitution3);
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      predicate3.and(predicate5);
      Object object0 = jSTerm0.clone();
      Predicate.isEqual(object0);
      predicate3.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      predicate1.and(predicate6);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator2);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ? extends String>) unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Object, ?>) unaryOperator4);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = 1777;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator0.apply("zl Mdt5Jp<9BF1/Rz2K");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply("0~x9~_(ZdW");
      unaryOperator1.apply(":*r}");
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator1.apply("&X");
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.apply("&X");
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator3.apply(unaryOperator5);
      unaryOperator2.apply("+ ");
      unaryOperator5.apply("&X");
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator6.apply(unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8989267893363286
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      function0.compose((Function<? super String, ? extends String>) unaryOperator0);
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control parameters: ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) stringReader0);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.trimToSize();
      boolean boolean1 = jSTerm2.equals(jSTerm1);
      assertFalse(boolean1 == boolean0);
      
      jSTerm0.listIterator();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm1.equals((JSPredicateForm) jSTerm2);
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm4.replaceAll(unaryOperator0);
      JSTerm jSTerm5 = jSTerm3.standardizerTerm();
      assertFalse(jSTerm5.isEval());
      assertTrue(jSTerm5.isConstant());
      assertNotSame(jSTerm5, jSTerm3);
      
      boolean boolean2 = jSTerm0.equals(jSTerm2);
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.slash = 1;
      jSTerm0.makeVariable();
      JSJshopVars.greaterT = 1;
      jSTerm0.isGround();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Function.identity();
      Function<Integer, Integer> function1 = Function.identity();
      Integer integer0 = new Integer((-1643));
      Integer integer1 = function1.apply(integer0);
      Function<Object, Object> function2 = Function.identity();
      Function<Object, Object> function3 = Function.identity();
      Function<Object, Object> function4 = Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      function2.apply(jSSubstitution0);
      Function<String, String> function5 = Function.identity();
      function2.compose((Function<? super String, ?>) function5);
      Function.identity();
      function3.andThen((Function<? super Object, ?>) function2);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function6).apply(any());
      Function<Integer, String> function7 = function5.compose((Function<? super Integer, ? extends String>) function6);
      function7.apply(integer0);
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function9 = function7.compose((Function<? super Object, ? extends Integer>) function8);
      Function<Object, Object> function10 = Function.identity();
      Function<Object, String> function11 = function10.andThen((Function<? super Object, ? extends String>) function9);
      function2.compose((Function<? super Object, ?>) function4);
      function7.apply(integer1);
      Function<String, String> function12 = function0.andThen((Function<? super String, ? extends String>) function9);
      Function<Object, String> function13 = function12.compose((Function<? super Object, ? extends String>) function11);
      Function<String, String> function14 = Function.identity();
      function12.andThen((Function<? super String, ?>) function14);
      function12.compose((Function<? super Integer, ? extends String>) function13);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) function3);
      jSTerm0.listIterator();
      StringReader stringReader0 = new StringReader("f$V<x}zI");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      assertEquals(1, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate2);
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      predicate5.or(predicate1);
      predicate5.and(predicate4);
      Predicate<Object> predicate6 = predicate1.and(predicate3);
      Predicate<String> predicate7 = predicate0.or(predicate5);
      Predicate<String> predicate8 = predicate7.and(predicate1);
      predicate0.test("HE'hx~b");
      predicate7.or(predicate6);
      Predicate<Object> predicate9 = predicate4.negate();
      Predicate<String> predicate10 = predicate8.and(predicate9);
      predicate10.or(predicate5);
      // Undeclared exception!
      try { 
        jSTerm2.elementAt(54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 54 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5941666991180168
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|Sf4)Q|)nGw{a");
      StringReader stringReader1 = new StringReader("?L3Fk.|Sf4)Q|)nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader1.ready();
      stringReader1.read();
      char[] charArray0 = new char[8];
      stringReader0.mark(81);
      charArray0[2] = '\u0000';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("gcK]F");
      stringReader2.read();
      stringReader2.markSupported();
      stringReader2.reset();
      stringReader0.read();
      stringReader2.reset();
      stringReader0.mark(7);
      stringReader0.markSupported();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      streamTokenizer0.quoteChar(63);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) "?L3Fk.|Sf4)Q|)nGw{a");
      jSTerm0.call();
      assertEquals("[?L3Fk.|Sf4, ?L3Fk.|Sf4)Q|)nGw{a]", jSTerm0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) unaryOperator0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.apply("*U 6N$7HwmQ{f).<>? ");
      unaryOperator4.andThen((Function<? super String, ? extends String>) unaryOperator3);
      unaryOperator1.apply("not");
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.apply(unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator7.apply(unaryOperator3);
      unaryOperator6.andThen((Function<? super Object, ?>) unaryOperator7);
      System.setCurrentTimeMillis((-976));
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Function.identity();
      Function<Integer, Integer> function1 = Function.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function3).apply(any());
      Function<Object, Integer> function4 = function1.compose((Function<? super Object, ? extends Integer>) function3);
      Integer integer0 = new Integer((-3));
      Integer integer1 = function1.apply(integer0);
      Function<Object, Object> function5 = Function.identity();
      function5.apply(function1);
      Function<String, String> function6 = Function.identity();
      function5.compose((Function<? super String, ?>) function0);
      Function<Object, Object> function7 = function5.andThen((Function<? super Object, ?>) function2);
      Function<Integer, String> function8 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function8).apply(anyInt());
      Function<Integer, String> function9 = function0.compose((Function<? super Integer, ? extends String>) function8);
      Function<Integer, String> function10 = function9.compose((Function<? super Integer, ? extends Integer>) function4);
      function10.apply((Integer) null);
      Function<Object, String> function11 = function9.compose((Function<? super Object, ? extends Integer>) function4);
      Function<Object, String> function12 = function5.andThen((Function<? super Object, ? extends String>) function11);
      function7.compose((Function<? super Object, ?>) function11);
      Function<Integer, String> function13 = function9.compose((Function<? super Integer, ? extends Integer>) function4);
      function0.compose((Function<? super Object, ? extends String>) function12);
      function9.apply(integer0);
      Integer integer2 = new Integer((-3));
      function10.apply(integer1);
      function0.andThen((Function<? super String, ? extends String>) function6);
      function12.andThen((Function<? super String, ? extends Integer>) function4);
      function6.andThen((Function<? super String, ?>) function11);
      function0.compose((Function<? super Integer, ? extends String>) function13);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7721393884375285
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StringReader stringReader1 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader1.ready();
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[2] = '=';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("gcK]F");
      stringReader2.read();
      stringReader2.markSupported();
      stringReader2.reset();
      stringReader2.read();
      stringReader2.reset();
      stringReader0.mark(3);
      stringReader0.markSupported();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      assertEquals(1, jSSubstitution1.size());
      
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertEquals("[?L3Fk.|S0f4]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.ordinaryChars(61, 61);
      streamTokenizer0.ttype = 98;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ? extends String>) unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ?>) unaryOperator3);
      Function.identity();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.4287691203187398
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(ebpk[G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.nval = 0.0;
      streamTokenizer2.whitespaceChars((-4), 67);
      streamTokenizer2.ttype = (-4);
      streamTokenizer3.ordinaryChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      streamTokenizer4.whitespaceChars((-4), 40);
      streamTokenizer4.whitespaceChars((-4), 2);
      streamTokenizer4.wordChars(2551, (-4));
      streamTokenizer3.quoteChar((-4));
      stringReader0.markSupported();
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.slashSlashComments(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer4);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.055844954677049
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSSubstitution0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm2.trimToSize();
      JSTerm jSTerm3 = new JSTerm();
      boolean boolean0 = jSTerm3.equals(jSTerm0);
      jSTerm0.listIterator();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm2.equals((JSPredicateForm) jSTerm3);
      JSTerm jSTerm5 = jSTerm4.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm6 = jSTerm5.standardizerTerm();
      assertFalse(jSTerm6.isEmpty());
      
      boolean boolean1 = jSTerm2.equals(jSTerm6);
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm6.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm6.isConstant());
      assertFalse(jSTerm4.isFunction());
      assertNotSame(jSTerm6, jSTerm5);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|Sf4)Q|)nGw{a");
      StringReader stringReader1 = new StringReader("?L3Fk.|Sf4)Q|)nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[?L3Fk.|Sf4]", jSTerm0.toString());
      
      stringReader1.ready();
      stringReader1.read();
      char[] charArray0 = new char[8];
      stringReader0.mark(81);
      charArray0[0] = '5';
      charArray0[2] = '5';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("gcK]F");
      stringReader2.read();
      stringReader2.markSupported();
      stringReader2.reset();
      stringReader0.read();
      stringReader2.reset();
      stringReader0.mark(7);
      stringReader0.markSupported();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[nil]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|Sf4)Q|)nGw{a");
      StringReader stringReader1 = new StringReader("?L3Fk.|Sf4)Q|)nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader1.ready();
      stringReader1.read();
      char[] charArray0 = new char[8];
      stringReader0.mark(81);
      charArray0[2] = '\u0000';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("gcK]F");
      stringReader2.read();
      stringReader2.markSupported();
      char[] charArray1 = new char[7];
      charArray1[0] = '+';
      charArray1[1] = 'I';
      charArray1[2] = '4';
      charArray1[3] = '<';
      charArray1[5] = ',';
      charArray1[6] = '(';
      stringReader0.read(charArray1);
      stringReader2.reset();
      stringReader0.read();
      stringReader2.reset();
      stringReader0.mark(7);
      stringReader0.markSupported();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5810937501718236
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("((e<pk[G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(2168);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.whitespaceChars(1, (-2914));
      streamTokenizer0.ordinaryChar((-549));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer2.resetSyntax();
      StringReader stringReader1 = new StringReader("%%%");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer3.quoteChar((-2914));
      StringReader stringReader2 = new StringReader("%%%");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StringReader stringReader1 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader1.ready();
      streamTokenizer0.lowerCaseMode(true);
      stringReader1.read();
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[2] = '5';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("gcK]F");
      stringReader2.read();
      stringReader2.markSupported();
      stringReader2.reset();
      stringReader0.read();
      stringReader2.read();
      stringReader2.reset();
      stringReader0.mark(3);
      stringReader0.markSupported();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("?L3Fk.|S0f4 ", stringBuffer0.toString());
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.5982695885852573
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply((String) null);
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.apply("?l3fk.|s0f4");
      UnaryOperator.identity();
      UnaryOperator<JSTerm> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.apply((String) null);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.apply("k.&wrv<WWA");
      unaryOperator1.apply("k.&wrv<WWA");
      unaryOperator2.apply(unaryOperator3);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      Object object0 = new Object();
      unaryOperator5.apply(object0);
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator6.andThen((Function<? super Object, ?>) unaryOperator7);
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("3mlAmdNu.7!W[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(4, stringBuffer0.length());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ? extends String>) unaryOperator1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ? extends String>) unaryOperator4);
      Function.identity();
      unaryOperator1.apply("L@W/.mn6oQ*wH,isv8");
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator3.apply("L<_UHB:t");
      UnaryOperator.identity();
      unaryOperator1.apply("nil");
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.apply("?l8fk.|s<f40");
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator6.andThen((Function<? super Object, ?>) unaryOperator5);
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.listIterator();
      jSTerm0.ensureCapacity(40);
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.apply("&X");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.apply("&X");
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      Integer integer0 = new Integer(1);
      unaryOperator5.apply(integer0);
      unaryOperator0.apply("_`Esm^Bf");
      unaryOperator1.apply("&X");
      UnaryOperator.identity();
      unaryOperator2.apply((Object) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("sx");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|Sf4)Q|)nGw{a");
      StringReader stringReader1 = new StringReader("?L3Fk.|Sf4)Q|)nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader1.ready();
      stringReader1.read();
      char[] charArray0 = new char[8];
      stringReader0.mark(81);
      charArray0[2] = '\u0000';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("gcK]F");
      stringReader2.read();
      stringReader2.markSupported();
      char[] charArray1 = new char[7];
      charArray1[0] = '+';
      charArray1[1] = 'I';
      charArray1[2] = '4';
      charArray1[4] = '<';
      charArray1[5] = ',';
      charArray1[6] = '(';
      stringReader0.read(charArray1);
      stringReader2.reset();
      stringReader1.mark(7);
      stringReader0.read();
      stringReader2.reset();
      stringReader0.mark(7);
      stringReader0.markSupported();
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.print();
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[?L3Fk.|Sf4]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(ebpk[G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), 67);
      streamTokenizer2.ttype = (-4);
      streamTokenizer3.ordinaryChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      streamTokenizer4.whitespaceChars((-4), (-4));
      streamTokenizer4.whitespaceChars((-4), 2);
      stringReader0.close();
      streamTokenizer4.wordChars((-4), (-4));
      streamTokenizer3.quoteChar((-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.whitespaceChars(590, (-4));
      System.setCurrentTimeMillis((-4));
      streamTokenizer5.wordChars((-4), (-4));
      streamTokenizer3.quoteChar((-4));
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer5);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.0318275984086087
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "k06_90{'zlI");
      jSTerm0.equals(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.trimToSize();
      jSTerm0.makeConstant();
      jSTerm0.equals(jSTerm1);
      jSTerm0.listIterator();
      jSSubstitution0.containsAll(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.equals((JSPredicateForm) jSTerm0);
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.standardizerTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator2);
      unaryOperator2.andThen((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      unaryOperator3.apply((String) null);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super String, ? extends String>) unaryOperator3);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator6.andThen((Function<? super Object, ?>) unaryOperator5);
      Function.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.9911388966130941
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Function.identity();
      Function<Integer, Integer> function1 = Function.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function3 = Function.identity();
      Function<Object, Object> function4 = Function.identity();
      Function.identity();
      function4.apply(function1);
      Function.identity();
      function4.compose((Function<? super String, ?>) function0);
      Function.identity();
      function3.andThen((Function<? super Object, ?>) function4);
      Function<Integer, String> function5 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function5).apply(anyInt());
      Function<Integer, String> function6 = function0.compose((Function<? super Integer, ? extends String>) function5);
      function6.apply((Integer) null);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.andThen((Function<? super Object, ? extends String>) function8);
      function3.compose((Function<? super Object, ?>) function7);
      Function<String, String> function9 = function0.andThen((Function<? super String, ? extends String>) function2);
      Function<Object, String> function10 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function9.compose((Function<? super Object, ? extends String>) function10);
      function9.andThen((Function<? super String, ?>) function3);
      function9.compose((Function<? super Integer, ? extends String>) function6);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "2.JAjtkn";
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      Function<Integer, Integer> function1 = Function.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function3).apply(any());
      Function<Object, Integer> function4 = function1.compose((Function<? super Object, ? extends Integer>) function3);
      Integer integer0 = new Integer((-3));
      Integer integer1 = function1.apply(integer0);
      Function<Integer, Integer> function5 = function1.compose((Function<? super Integer, ? extends Integer>) function4);
      Function<Object, Object> function6 = Function.identity();
      function6.apply(function1);
      function0.apply("PeV(i%R^d");
      function4.apply(integer1);
      Function<Integer, String> function7 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = function4.andThen((Function<? super Integer, ? extends String>) function7);
      Function.identity();
      function6.compose((Function<? super String, ?>) function0);
      function6.andThen((Function<? super Object, ?>) function2);
      Function<Integer, String> function9 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function9).apply(anyInt());
      Function<Integer, String> function10 = function0.compose((Function<? super Integer, ? extends String>) function9);
      Function<Integer, String> function11 = function10.compose((Function<? super Integer, ? extends Integer>) function4);
      function11.andThen((Function<? super String, ? extends Integer>) function4);
      Function.identity();
      function0.andThen((Function<? super String, ?>) function8);
      Function.identity();
      function11.andThen((Function<? super String, ? extends Integer>) function4);
      function10.andThen((Function<? super String, ?>) function6);
      function11.apply(integer1);
      function10.compose((Function<? super Integer, ? extends Integer>) function5);
      function11.apply((Integer) null);
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(";-HP2e]dx");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 994;
      JSJshopVars.whiteSpace = 994;
      JSJshopVars.leftPar = 994;
      JSJshopVars.plus = 994;
      jSTerm0.makeEval(false);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("((e<pk[G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.whitespaceChars(1, (-2930));
      streamTokenizer0.ordinaryChar(2382);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer2.slashStarComments(true);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.resetSyntax();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChar((-2930));
      streamTokenizer4.wordChars(2551, (-4));
      streamTokenizer4.quoteChar((-3));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.quoteChar(1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("((e<pk[G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer0.commentChar((-4));
      streamTokenizer2.ttype = (-4);
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer3.whitespaceChars(4041, (-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.pushBack();
      streamTokenizer1.whitespaceChars((-4), 4041);
      streamTokenizer2.sval = null;
      streamTokenizer3.slashSlashComments(false);
      streamTokenizer1.commentChar((-4));
      streamTokenizer3.wordChars((-4), (-4));
      streamTokenizer3.commentChar(1);
      streamTokenizer2.whitespaceChars((-4), (-4));
      streamTokenizer3.quoteChar((-4));
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.ordinaryChars(2611, (-4));
      streamTokenizer2.quoteChar(1978);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1269287948006759
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("zl Mdt5Jp<9BF1/Rz2K");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply("0~x9~_(ZdW");
      unaryOperator2.apply(":*r}");
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator2.apply("0~x9~_(ZdW");
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.apply("zl Mdt5Jp<9BF1/Rz2K");
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator4.apply(unaryOperator6);
      unaryOperator3.apply("+ ");
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator7.apply("+ ");
      unaryOperator7.apply(unaryOperator3);
      UnaryOperator.identity();
      unaryOperator6.apply(unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("P nbb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("zl Mdt5Jp<9BF1/Rz2K");
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply("0~x9~_(ZdW");
      unaryOperator2.apply(":*r}");
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator2.apply("0~x9~_(ZdW");
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator5.apply("zl Mdt5Jp<9BF1/Rz2K");
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      unaryOperator4.apply(unaryOperator6);
      unaryOperator3.apply("+ ");
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      unaryOperator7.apply("+ ");
      unaryOperator7.apply(unaryOperator3);
      UnaryOperator.identity();
      unaryOperator6.apply(unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
