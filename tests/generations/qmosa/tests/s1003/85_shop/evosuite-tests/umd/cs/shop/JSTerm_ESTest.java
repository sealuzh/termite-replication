/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 12:13:04 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.ListIterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4087497803125397
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super String, ? extends String>) unaryOperator1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm1.makeEval(true);
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$49/489362368 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1425230615188013
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(",");
      StringReader stringReader1 = new StringReader(",");
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = '1';
      charArray0[2] = 'p';
      charArray0[3] = 'h';
      charArray0[4] = '\\';
      charArray0[5] = 'L';
      charArray0[6] = 'a';
      jSTerm0.removeAllElements();
      charArray0[7] = 'w';
      jSTerm0.makeEval(true);
      charArray0[8] = 'y';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader(",");
      jSTerm0.add((Object) stringReader2);
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9471865956069645
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(OSFo");
      int int0 = 40;
      stringReader0.mark(40);
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      stringReader0.read(charArray0);
      charArray0[0] = 'c';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeEval(true);
      stringReader0.read(charArray0);
      streamTokenizer0.slashSlashComments(false);
      StringReader stringReader1 = new StringReader(": unexpected EOF");
      jSTerm0.add((Object) ": unexpected EOF");
      JSTerm jSTerm1 = jSTerm0.call();
      stringReader1.close();
      streamTokenizer0.ttype = (-1);
      StringReader stringReader2 = new StringReader("Error flag1 : ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.parseNumbers();
      jSTerm0.equals(jSTerm1);
      streamTokenizer0.ordinaryChar(2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.421178665637587
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(",");
      StringReader stringReader1 = new StringReader(",");
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = '1';
      charArray0[2] = 'p';
      charArray0[3] = 'h';
      charArray0[4] = '\\';
      charArray0[5] = 'L';
      charArray0[6] = 'a';
      charArray0[7] = 'L';
      jSTerm0.makeEval(true);
      charArray0[8] = 'y';
      stringReader1.read(charArray0);
      CharBuffer.wrap(charArray0);
      CharBuffer charBuffer0 = CharBuffer.allocate(',');
      charBuffer0.mark();
      jSTerm0.add((Object) stringReader1);
      jSTerm0.listIterator();
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      jSTerm0.cloneT();
      jSTerm0.cloneT();
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6808546283808763
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I+:n.{@IH17{`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.stream();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.isEmpty();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.standardizerTerm();
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.forEach(consumer0);
      jSTerm1.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6524149428441044
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "$g");
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm1);
      ListIterator listIterator0 = jSTerm0.listIterator();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate3);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate3.test(listIterator0);
      Predicate<Object> predicate7 = predicate6.and(predicate4);
      predicate6.test(predicate2);
      Predicate<Object> predicate8 = predicate7.and(predicate6);
      predicate3.and(predicate8);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate10 = predicate3.and(predicate9);
      predicate10.test(predicate1);
      predicate9.negate();
      jSTerm2.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm3.makeEval(true);
      jSTerm1.toStr();
      // Undeclared exception!
      try { 
        jSTerm3.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7616857769478873
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3FkS=.|mS0f)Q|nGw{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[eD>rI-n&Y`S+X*KbXz");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) "[eD>rI-n&Y`S+X*KbXz");
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<String> predicate4 = Predicate.isEqual((Object) "?L3FkS=.|mS0f)Q|nGw{");
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate5.and(predicate0);
      Predicate<String> predicate7 = predicate5.and(predicate3);
      Predicate<String> predicate8 = predicate6.or(predicate4);
      predicate0.test(predicate5);
      Predicate<String> predicate9 = predicate7.negate();
      predicate8.test("?L3FkS=.|mS0f)Q|nGw{");
      predicate3.negate();
      predicate4.test("[eD>rI-n&Y`S+X*KbXz");
      predicate4.test(": unexpected EOF");
      predicate9.test("->");
      Predicate.isEqual((Object) jSTerm0);
      predicate9.negate();
      Integer integer0 = new Integer((-76097763));
      Predicate<String> predicate10 = Predicate.isEqual((Object) integer0);
      predicate10.negate();
      Predicate.isEqual((Object) "?L3FkS=.|mS0f)Q|nGw{");
      jSTerm3.removeIf(predicate1);
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      JSTerm jSTerm5 = jSTerm4.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm5.isVariable());
      assertFalse(jSTerm5.isEval());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals("[?L3FkS=0|mS0f]", jSTerm0.toString());
      assertEquals("[?L3FkS=0|mS0f0]", jSTerm5.toString());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.274842682442605
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      jSSubstitution1.add((Object) null);
      jSSubstitution1.ensureCapacity(43);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSSubstitution3.cloneS();
      jSSubstitution2.ensureCapacity(1);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      Object object0 = jSTerm1.firstElement();
      jSSubstitution7.add(object0);
      jSSubstitution6.parallelStream();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "tp%jg");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.firstElement();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.spliterator();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8608280099024177
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3FkS=.|mS0f)Q|nGw{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[eD>rIn&Y`S+X*KbYz");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      Predicate<String> predicate2 = Predicate.isEqual((Object) "?L3FkS=.|mS0f)|nGw{");
      Predicate<String> predicate3 = predicate2.negate();
      predicate0.test(predicate1);
      Predicate<String> predicate4 = predicate3.and(predicate0);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate4.negate();
      predicate0.test(predicate3);
      Predicate<String> predicate7 = predicate5.negate();
      predicate6.test("?L3FkS=.|mS0f)Q|nGw{");
      predicate2.test("[eD>rIn&Y`S+X*KbYz");
      predicate2.test("[eD>rIn&Y`S+X*KbYz");
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate8.or(predicate1);
      Predicate<String> predicate10 = predicate4.or(predicate9);
      predicate7.test("JkyVsx23*:HB");
      predicate0.negate();
      Predicate<String> predicate11 = predicate10.negate();
      predicate8.or(predicate1);
      predicate11.and(predicate0);
      predicate11.negate();
      predicate1.negate();
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(boolean0);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm2.isVariable());
      assertEquals("[?L3FkS=0|mS0f0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      
      jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm1, jSTerm3);
      assertFalse(jSTerm3.isFunction());
      assertEquals(1, jSSubstitution1.size());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.59411549687557
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      char[] charArray0 = new char[10];
      charArray0[2] = '\u0000';
      charArray0[4] = '^';
      jSSubstitution3.add((Object) jSSubstitution1);
      charArray0[4] = 'r';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      JSJshopVars.rightBrac = 372;
      jSSubstitution3.ensureCapacity(43);
      jSSubstitution3.parallelStream();
      charBuffer0.put("sf");
      charBuffer0.rewind();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.listIterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.ensureCapacity((-4608));
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution5);
      jSSubstitution4.parallelStream();
      jSSubstitution3.add((Object) jSSubstitution4);
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm3.toStr();
      assertEquals("[[], [[]]]", jSTerm0.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.remove((Object) "tp%jg");
      jSSubstitution0.add((Object) "tp%jg");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("C)>jjdt&9X@");
      stringReader0.ready();
      jSTerm0.add((Object) "C)>jjdt&9X@");
      jSTerm0.firstElement();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.274842682442605
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.removeElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution2.ensureCapacity(43);
      jSTerm1.add((Object) null);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = jSSubstitution3.cloneS();
      jSSubstitution5.ensureCapacity(43);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution4.add((Object) "ofo");
      jSSubstitution6.parallelStream();
      Integer integer0 = new Integer(75);
      jSSubstitution6.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm1.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5054513218768513
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Integer, Integer> function2 = Function.identity();
      Function<String, String> function3 = Function.identity();
      Function<String, String> function4 = function3.compose((Function<? super String, ? extends String>) unaryOperator0);
      Function<String, String> function5 = unaryOperator0.compose((Function<? super String, ? extends String>) function3);
      function4.compose((Function<? super String, ? extends String>) unaryOperator0);
      function3.apply("%Z*73");
      function3.andThen((Function<? super String, ?>) function5);
      unaryOperator0.andThen((Function<? super String, ?>) function4);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super Integer, ? extends String>) function6);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function3);
      Function<Object, Object> function7 = Function.identity();
      Function<Integer, Integer> function8 = Function.identity();
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function8.andThen((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function10 = function8.compose((Function<? super Object, ? extends Integer>) function9);
      Function.identity();
      Function.identity();
      Function<Object, Integer> function11 = function2.compose((Function<? super Object, ? extends Integer>) function10);
      function7.andThen((Function<? super Object, ? extends Integer>) function11);
      Function.identity();
      Function<Integer, Integer> function12 = function8.compose((Function<? super Integer, ? extends Integer>) function10);
      Function<Object, Object> function13 = function7.compose((Function<? super Object, ?>) function1);
      function7.compose((Function<? super Integer, ?>) function12);
      Function.identity();
      function13.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      Function.identity();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%Z*73");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Predicate<Object> predicate5 = predicate2.or(predicate3);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate6.negate();
      Predicate<String> predicate7 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate8 = predicate7.and(predicate4);
      Predicate<String> predicate9 = predicate8.negate();
      predicate4.or(predicate2);
      predicate8.test("<=");
      Predicate<String> predicate10 = predicate9.or(predicate7);
      Predicate<String> predicate11 = predicate10.negate();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate<Object> predicate12 = Predicate.isEqual((Object) jSSubstitution3);
      Predicate<Object> predicate13 = predicate12.and(predicate5);
      predicate11.and(predicate13);
      Predicate.isEqual((Object) jSSubstitution3);
      predicate1.negate();
      predicate3.or(predicate0);
      Predicate<String> predicate14 = predicate11.and(predicate7);
      predicate14.negate();
      Predicate.isEqual((Object) "zw");
      jSTerm0.removeIf(predicate11);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      System.setCurrentTimeMillis((-1433965340));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.285831693431616
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      jSTerm1.makeEval(true);
      String string0 = "Expecting Term";
      jSTerm1.applySubstitutionT(jSSubstitution2);
      jSTerm0.cloneT();
      StringReader stringReader0 = new StringReader("Expecting Term");
      int int0 = 833;
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      jSTerm0.replaceAll(unaryOperator0);
      charArray0[1] = 'I';
      charArray0[2] = '+';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 833, 833);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(OSFo");
      stringReader0.markSupported();
      stringReader0.mark(40);
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      stringReader0.read(charArray0);
      charArray0[0] = '^';
      charArray0[1] = 'K';
      stringReader0.read(charArray0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function<Integer, String> function2 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function3 = function1.compose((Function<? super Integer, ? extends String>) function2);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function4).apply(any());
      Function<String, Integer> function5 = function1.andThen((Function<? super String, ? extends Integer>) function4);
      JSTerm jSTerm0 = new JSTerm();
      function5.andThen((Function<? super Integer, ?>) function3);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = function1.compose((Function<? super Object, ? extends String>) function6);
      function1.compose((Function<? super String, ? extends String>) function7);
      jSTerm0.add((Object) "(OSFo");
      function5.apply("(OSFo");
      function5.apply("A9G");
      Function.identity();
      jSTerm0.clone();
      jSTerm0.lastElement();
      jSTerm0.add((Object) "(OSFo");
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(OSFo");
      stringReader0.markSupported();
      stringReader0.mark(40);
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      stringReader0.read(charArray0);
      charArray0[0] = '^';
      charArray0[1] = '^';
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("(OSFo");
      stringReader1.read();
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      charBuffer0.order();
      stringReader1.read(charBuffer0);
      stringReader1.read();
      stringReader1.ready();
      stringReader0.reset();
      StringReader stringReader2 = new StringReader("(OSFo");
      stringReader0.mark(2);
      stringReader1.ready();
      char[] charArray1 = new char[1];
      stringReader2.read(charBuffer0);
      stringReader0.read(charBuffer0);
      stringReader2.read(charBuffer0);
      stringReader2.read(charBuffer0);
      stringReader2.mark(2);
      stringReader2.ready();
      stringReader2.reset();
      stringReader2.read(charArray1);
      stringReader2.read();
      stringReader2.read(charArray1);
      StringReader stringReader3 = new StringReader("(OSFo");
      stringReader2.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      stringReader2.read();
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5621431145341327
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      char[] charArray0 = new char[10];
      charArray0[2] = '\u0000';
      jSSubstitution3.add((Object) jSSubstitution1);
      charArray0[4] = 'r';
      jSSubstitution3.ensureCapacity(43);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.cloneS();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution5);
      jSSubstitution4.removeElements(jSSubstitution3);
      jSSubstitution4.ensureCapacity((-4608));
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution6);
      jSSubstitution3.add((Object) jSSubstitution4);
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      jSTerm1.cloneT();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis(43);
      jSTerm0.cloneT();
      jSTerm0.print();
      assertEquals("[[[]], [[[]]]]", jSTerm0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution1);
      jSSubstitution2.spliterator();
      JSJshopVars.percent = (-1433965340);
      jSSubstitution2.add((Object) "zw");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      StringReader stringReader0 = new StringReader("vs");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.whitespaceChars((-1472), 0);
      streamTokenizer0.pushBack();
      streamTokenizer0.pushBack();
      StringReader stringReader1 = new StringReader("(");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(OSFo");
      stringReader0.markSupported();
      stringReader0.mark(40);
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      stringReader0.read(charArray0);
      charArray0[0] = '^';
      charArray0[1] = 'K';
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("(OSFo");
      stringReader1.read();
      CharBuffer.allocate(1);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<String, Integer> function1 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function0);
      JSTerm jSTerm0 = new JSTerm();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function3);
      jSTerm0.add((Object) function3);
      function1.apply(") ");
      Function.identity();
      Object object0 = new Object();
      jSTerm0.clone();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1674001516425654
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) "(");
      String string0 = null;
      jSSubstitution2.add((Object) null);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function3 = Function.identity();
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function5 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function6).apply(any());
      Function<String, Integer> function7 = function3.andThen((Function<? super String, ? extends Integer>) function6);
      JSTerm jSTerm0 = new JSTerm();
      function1.compose((Function<? super Object, ? extends String>) function4);
      Function<String, String> function8 = unaryOperator0.compose((Function<? super String, ? extends String>) function3);
      function8.compose((Function<? super String, ? extends String>) function3);
      function7.apply("L6U`");
      jSTerm0.add((Object) function3);
      function7.apply("A9G");
      Function.identity();
      Object object0 = new Object();
      jSTerm0.clone();
      jSTerm0.add((Object) "A9G");
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3115997768638548
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      char[] charArray0 = new char[6];
      charArray0[2] = '\u0000';
      charArray0[3] = '^';
      charArray0[4] = 'r';
      charArray0[5] = '(';
      StringReader stringReader0 = new StringReader("'");
      int int0 = 2837;
      Integer integer0 = new Integer(2837);
      jSTerm0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.iterator();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function2 = function0.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function4 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super Integer, ? extends String>) function4);
      Function.identity();
      function2.compose((Function<? super JSSubstitution, ? extends String>) function3);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function6 = function2.andThen((Function<? super String, ? extends Integer>) function5);
      JSTerm jSTerm0 = new JSTerm();
      function2.compose((Function<? super String, ? extends String>) unaryOperator0);
      jSTerm0.add((Object) function2);
      jSTerm0.listIterator();
      jSTerm0.toStr();
      jSTerm0.listIterator();
      jSTerm0.toStr();
      jSTerm0.add((Object) function6);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$53/139380232 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6256041113950195
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      char[] charArray0 = new char[10];
      charArray0[2] = '\u0000';
      jSSubstitution3.add((Object) jSSubstitution1);
      charArray0[4] = 'r';
      jSSubstitution3.ensureCapacity(43);
      jSSubstitution0.standarizerSubs();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.cloneS();
      jSSubstitution4.ensureCapacity((-4608));
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.add((Object) jSTerm1);
      jSSubstitution3.add((Object) jSSubstitution5);
      jSSubstitution4.parallelStream();
      jSSubstitution3.add((Object) jSSubstitution4);
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      jSTerm0.add((Object) "");
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) "");
      jSTerm0.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) null);
      int int0 = (-1433965340);
      jSSubstitution1.add((Object) null);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.482643123605121
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm3.matches(jSTerm2, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3663528150596425
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      char[] charArray0 = new char[6];
      charArray0[2] = '\u0000';
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution2);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<String> predicate5 = Predicate.isEqual((Object) null);
      Predicate<String> predicate6 = predicate5.or(predicate4);
      Predicate<String> predicate7 = predicate5.negate();
      Predicate<String> predicate8 = predicate5.and(predicate2);
      predicate8.negate();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Integer integer0 = new Integer((-3));
      Predicate.isEqual((Object) predicate6);
      predicate6.negate();
      predicate7.negate();
      predicate5.negate();
      Predicate.isEqual((Object) integer0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.removeIf(predicate8);
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6279747835846026
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.trimToSize();
      jSTerm1.remove((Object) jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.listIterator();
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      UnaryOperator<JSTerm> unaryOperator1 = UnaryOperator.identity();
      Function<JSTerm, JSSubstitution> function2 = (Function<JSTerm, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super JSTerm, ?>) function2);
      jSTerm0.replaceAll(unaryOperator1);
      jSTerm0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.661550489351476
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      char[] charArray0 = new char[10];
      charArray0[2] = '\u0000';
      jSSubstitution3.add((Object) jSSubstitution1);
      charArray0[4] = 'r';
      jSSubstitution3.ensureCapacity(43);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.cloneS();
      jSSubstitution4.ensureCapacity((-4608));
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution5);
      jSSubstitution4.parallelStream();
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm1.matches(jSTerm2, jSSubstitution6);
      assertEquals("[[], [[]]]", jSTerm0.toString());
      assertNotSame(jSTerm1, jSTerm3);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6466193660987503
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      char[] charArray0 = new char[6];
      charArray0[2] = '\u0000';
      charArray0[3] = '^';
      charArray0[4] = 'r';
      jSTerm1.removeAllElements();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm0, jSSubstitution3);
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution4);
      JSTerm jSTerm3 = new JSTerm();
      System.setCurrentTimeMillis(269L);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.standardizerTerm();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5372549209246005
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean0 = jSTerm1.isFunction();
      assertTrue(boolean0);
      
      ListIterator listIterator0 = jSTerm0.listIterator();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      assertTrue(jSTerm3.isFunction());
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      JSTerm jSTerm4 = new JSTerm();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) jSTerm4);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate5 = predicate4.or(predicate3);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate3.test(listIterator0);
      predicate6.and(predicate4);
      predicate6.test(predicate2);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate3.and(predicate7);
      predicate1.and(predicate0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate10 = predicate3.and(predicate9);
      Predicate<Object> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate11.and(predicate9);
      predicate3.negate();
      Predicate<Object> predicate13 = predicate12.negate();
      predicate13.and(predicate10);
      predicate0.or(predicate1);
      Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate14 = predicate2.and(predicate3);
      predicate14.negate();
      Predicate<Object> predicate15 = Predicate.isEqual((Object) "w");
      jSTerm4.removeIf(predicate15);
      JSTerm jSTerm5 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm5.isFunction());
      assertNotSame(jSTerm1, jSTerm5);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.3631322031433784
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      char[] charArray0 = new char[10];
      charArray0[2] = '\u0000';
      jSSubstitution3.add((Object) jSSubstitution1);
      charArray0[4] = 'r';
      jSSubstitution3.ensureCapacity(43);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.cloneS();
      jSSubstitution4.ensureCapacity((-4608));
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution5);
      jSSubstitution4.parallelStream();
      jSSubstitution3.add((Object) jSSubstitution4);
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function.identity();
      Function<String, String> function2 = function0.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, String> function4 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super Integer, ? extends String>) function4);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function5).apply(any());
      Function<String, Integer> function6 = function2.andThen((Function<? super String, ? extends Integer>) function5);
      JSTerm jSTerm0 = new JSTerm();
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super Object, ? extends String>) function7);
      function2.compose((Function<? super String, ? extends String>) unaryOperator0);
      function6.apply("L6U`");
      jSTerm0.add((Object) function2);
      function6.apply("A9G");
      Function.identity();
      Object object0 = new Object();
      jSTerm0.clone();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.526106287808407
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.clear();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5237534950521967
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2545));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis((-778L));
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      boolean boolean1 = jSTerm3.equals(jSTerm5);
      assertFalse(jSTerm3.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(boolean1);
      
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      jSTerm0.isConstant();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.2609919264893628
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 0;
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.wordChars((-4083), 0);
      jSTerm0.equals(jSTerm1);
      jSTerm0.retainAll(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7947627599233087
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3FkS=.|mS0f)Q|nGw{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[eD>rI-n&Y`S+X*KbYz");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = Predicate.isEqual((Object) "?L3FkS=.|mS0f)Q|nGw{");
      Predicate<String> predicate4 = predicate3.negate();
      predicate0.test(predicate1);
      Predicate<String> predicate5 = predicate4.and(predicate0);
      Predicate<String> predicate6 = predicate4.and(predicate2);
      Predicate<String> predicate7 = predicate5.negate();
      predicate0.test(predicate4);
      Predicate<String> predicate8 = predicate6.negate();
      predicate7.test("?L3FkS=.|mS0f)Q|nGw{");
      predicate2.negate();
      predicate3.test("[eD>rI-n&Y`S+X*KbYz");
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate9.or(predicate1);
      predicate5.or(predicate10);
      predicate8.test("JkyVsx23*:HB");
      Predicate<Object> predicate11 = predicate0.negate();
      predicate8.negate();
      Integer integer0 = new Integer((-76097763));
      Predicate<String> predicate12 = predicate7.negate();
      predicate0.negate();
      predicate12.negate();
      predicate11.negate();
      jSTerm2.removeIf(predicate0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm3.isEval());
      assertEquals("[?L3FkS=0|mS0f0]", jSTerm3.toString());
      assertTrue(jSTerm3.isVariable());
      
      JSTerm jSTerm4 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm4, jSSubstitution1);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm4.isFunction());
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm4.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7597631621918186
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3FkS=.|mS0f)Q|nGw{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      assertEquals(1, jSSubstitution1.size());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[eD>rIn&Y`S+X*KbYz");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = Predicate.isEqual((Object) "?L3FkS=.|mS0f)|nGw{");
      Predicate<String> predicate4 = predicate3.negate();
      predicate0.test(predicate1);
      Predicate<String> predicate5 = predicate4.and(predicate0);
      Predicate<String> predicate6 = predicate5.negate();
      predicate4.negate();
      predicate0.test(predicate4);
      Predicate<String> predicate7 = predicate6.negate();
      jSTerm0.isVariable();
      predicate2.negate();
      predicate3.test("[eD>rIn&Y`S+X*KbYz");
      predicate3.test("[eD>rIn&Y`S+X*KbYz");
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate0.negate();
      Predicate<String> predicate10 = predicate5.or(predicate9);
      predicate7.test("JkyVsx23*:HB");
      Predicate<Object> predicate11 = predicate0.negate();
      Predicate<String> predicate12 = predicate10.negate();
      predicate8.or(predicate1);
      predicate12.and(predicate0);
      Predicate<String> predicate13 = predicate12.negate();
      predicate1.negate();
      predicate13.negate();
      predicate11.negate();
      jSTerm1.removeIf(predicate0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isVariable());
      assertEquals("[?L3FkS=0|mS0f0]", jSTerm2.toString());
      
      JSTerm jSTerm3 = jSTerm0.cloneT();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertNotSame(jSTerm3, jSTerm1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.832019000946976
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar(62);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.isEval();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      jSTerm4.isGround();
      jSTerm1.equals(jSTerm0);
      jSTerm1.equals(jSTerm4);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.retainAll(jSTerm4);
      jSTerm3.equals(jSTerm5);
      jSTerm2.matches(jSTerm4);
      jSTerm1.parseList(streamTokenizer0);
      JSTerm jSTerm6 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm6.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.494864273962274
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "?L3FkS=.|mS0f)Q|nGw{";
      StringReader stringReader0 = new StringReader("?L3FkS=.|mS0f)Q|nGw{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) "9q?@<(WV*[");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "9q?@<(WV*[");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm1.trimToSize();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm1.listIterator();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm1.call();
      jSTerm3.firstElement();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.7010817132098164
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3FkS=.|mS0f)Q|nGw{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.stream();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.isEmpty();
      JSTerm jSTerm4 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      jSTerm2.removeAllElements();
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm5);
      jSTerm1.matches(jSTerm4, jSSubstitution4);
      JSTerm jSTerm6 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm6.applySubstitutionT(jSSubstitution4);
      JSTerm jSTerm7 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm8 = new JSTerm();
      JSTerm jSTerm9 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm9.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1088214033448285
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis(41);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeAllElements();
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.remove((-1927));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1927
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.4784942410158313
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3FkS=.|mS0f)Q|nGw{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElements(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      Integer integer0 = new Integer(41);
      jSTerm1.add((Object) integer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution2.add((Object) streamTokenizer0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity(93);
      Integer integer1 = new Integer(43);
      jSTerm2.add((Object) integer1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.cloneS();
      jSSubstitution4.ensureCapacity(41);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution2);
      jSSubstitution3.parallelStream();
      jSSubstitution2.add((Object) stringReader0);
      jSTerm2.isGround();
      jSTerm2.standardizerTerm();
      jSTerm2.cloneT();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "?";
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.511345813092651
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm1.isEmpty();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertTrue(jSTerm2.isFunction());
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<String> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate0.and(predicate1);
      Predicate<Object> predicate7 = predicate5.and(predicate3);
      predicate5.test(predicate1);
      Predicate<Object> predicate8 = predicate7.and(predicate5);
      predicate0.test("");
      Predicate<Object> predicate9 = predicate2.and(predicate8);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate11 = predicate3.negate();
      predicate11.test(predicate0);
      Predicate<Object> predicate12 = predicate9.negate();
      predicate12.and(predicate2);
      Predicate<Object> predicate13 = predicate12.and(predicate10);
      Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate14 = predicate13.negate();
      Predicate<Object> predicate15 = predicate14.and(predicate11);
      predicate13.or(predicate15);
      predicate14.and(predicate13);
      predicate14.and(predicate11);
      Predicate<String> predicate16 = predicate6.negate();
      predicate16.test("");
      Predicate<Object> predicate17 = Predicate.isEqual((Object) predicate0);
      predicate6.negate();
      predicate0.and(predicate7);
      predicate17.negate();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm3.isFunction());
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertNotSame(jSTerm1, jSTerm3);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSSubstitution2.fail());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[eD>rI-%&Y`S+X*KbYz");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      boolean boolean0 = predicate0.test(predicate1);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate2.or(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Integer integer0 = new Integer((-76097763));
      predicate0.negate();
      predicate3.negate();
      boolean boolean1 = jSTerm0.isConstant();
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3573993612254074
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      Object object0 = new Object();
      jSSubstitution2.add(object0);
      jSSubstitution2.removeAll(jSSubstitution0);
      jSTerm1.trimToSize();
      StringReader stringReader0 = new StringReader("KXD??lKl");
      jSSubstitution1.add((Object) null);
      Object object1 = jSTerm1.firstElement();
      jSSubstitution1.add(object1);
      jSTerm1.isEmpty();
      jSSubstitution2.iterator();
      jSSubstitution0.removeElements(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 62;
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.applySubstitutionT(jSSubstitution3);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1649L));
      System.setCurrentTimeMillis(54L);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      function0.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super Object, ? extends String>) function2);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) function1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(OSFo");
      stringReader0.mark(40);
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      stringReader0.read(charArray0);
      charArray0[0] = 'h';
      charArray0[1] = 'K';
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("(OSFo");
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      charBuffer0.codePoints();
      stringReader1.read();
      stringReader1.read(charBuffer0);
      stringReader1.read();
      stringReader1.ready();
      stringReader0.mark(2);
      StringReader stringReader2 = new StringReader("(OSFo");
      stringReader1.mark(40);
      stringReader2.read(charBuffer0);
      stringReader1.skip(1750L);
      stringReader2.read(charBuffer0);
      stringReader1.ready();
      char[] charArray1 = new char[1];
      stringReader2.ready();
      stringReader2.read(charArray1);
      stringReader2.read(charArray1);
      StringReader stringReader3 = new StringReader("(OSFo");
      StringReader stringReader4 = new StringReader("(OSFo");
      stringReader0.skip(0);
      stringReader4.skip((-3L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader4);
      stringReader4.mark(1);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+0'W}K");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7048561013731942
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6w;(U");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.containsAll(jSTerm1);
      streamTokenizer0.parseNumbers();
      JSJshopVars.coma = (-2);
      JSJshopVars.greaterT = (-1914);
      streamTokenizer0.sval = "6w;(U";
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm2.addAll((-2), (Collection) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -2
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.417081986935427
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "$g");
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      ListIterator listIterator0 = jSTerm0.listIterator();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.makeVariable();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate3);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate3.test(listIterator0);
      Predicate<Object> predicate7 = predicate6.and(predicate4);
      predicate6.test(predicate2);
      Predicate<Object> predicate8 = predicate7.and(predicate6);
      predicate3.and(predicate8);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate5);
      predicate4.test(predicate1);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate10.and(predicate8);
      Predicate<Object> predicate11 = predicate10.and(predicate9);
      Predicate<Object> predicate12 = predicate11.negate();
      predicate12.and(predicate11);
      // Undeclared exception!
      try { 
        predicate7.and((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(24, 24);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.4316490614703996
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0gc]zJ-+[h)C|9I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[eD>rIn&r`S+X*KbYz");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = Predicate.isEqual((Object) "?L3FkS=.|mS0f)|nGw{");
      Predicate<String> predicate4 = predicate3.negate();
      jSTerm0.isFunction();
      Predicate<String> predicate5 = predicate4.and(predicate0);
      Predicate<String> predicate6 = predicate5.negate();
      Predicate<String> predicate7 = predicate5.negate();
      predicate0.test(predicate4);
      Predicate<String> predicate8 = predicate6.negate();
      predicate7.test("0gc]zJ-+[h)C|9I");
      predicate2.negate();
      predicate3.test("[eD>rIn&r`S+X*KbYz");
      predicate3.test("[eD>rIn&r`S+X*KbYz");
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate9.or(predicate1);
      Predicate<String> predicate11 = predicate5.or(predicate10);
      predicate8.test("JkyVsx23*:HB");
      Predicate<Object> predicate12 = predicate0.negate();
      Predicate<String> predicate13 = predicate11.negate();
      predicate9.or(predicate1);
      predicate13.and(predicate0);
      Predicate<String> predicate14 = predicate13.negate();
      predicate1.negate();
      predicate14.negate();
      predicate12.negate();
      jSTerm1.removeIf(predicate0);
      assertTrue(jSTerm1.isConstant());
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      
      JSTerm jSTerm3 = jSTerm0.cloneT();
      assertFalse(jSTerm3.isVariable());
      assertEquals("[0.0]", jSTerm0.toString());
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm0, jSTerm2);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.927276471897604
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3FkS=.|mS0f)Q|nGw{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      assertEquals(1, jSSubstitution1.size());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[eD>rIn&Y`S+X*KbYz");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = Predicate.isEqual((Object) "?L3FkS=.|mS0f)|nGw{");
      predicate0.test(predicate1);
      Predicate<String> predicate4 = predicate3.and(predicate0);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate4.negate();
      predicate0.test(predicate3);
      Predicate<String> predicate7 = predicate5.negate();
      predicate6.test("?L3FkS=.|mS0f)Q|nGw{");
      predicate2.negate();
      predicate3.test("[eD>rIn&Y`S+X*KbYz");
      predicate3.test("[eD>rIn&Y`S+X*KbYz");
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate8.or(predicate1);
      Predicate<String> predicate10 = predicate4.or(predicate9);
      predicate7.test("JkyVsx23*:HB");
      Predicate<Object> predicate11 = predicate0.negate();
      Predicate<String> predicate12 = predicate10.negate();
      predicate8.or(predicate1);
      predicate12.and(predicate0);
      Predicate<String> predicate13 = predicate12.negate();
      predicate1.negate();
      predicate13.negate();
      predicate11.negate();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertEquals("[?L3FkS=0|mS0f0]", jSTerm2.toString());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSTerm jSTerm4 = jSTerm1.call();
      assertTrue(jSTerm4.isVariable());
      assertNotSame(jSTerm1, jSTerm3);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.removeElements(jSSubstitution0);
      JSTerm jSTerm0 = new JSTerm();
      String string0 = null;
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("()?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.whitespaceChars(1, (-851));
      streamTokenizer0.pushBack();
      Object object0 = jSTerm0.clone();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "=de<&k[G");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate0.negate();
      JSJshopVars.semicolon = (-3381);
      predicate4.and(predicate1);
      Predicate<String> predicate6 = Predicate.isEqual((Object) "=de<&k[G");
      Predicate<String> predicate7 = predicate6.or(predicate5);
      Predicate<String> predicate8 = predicate7.negate();
      Integer integer0 = new Integer((-851));
      predicate3.test(integer0);
      Predicate<String> predicate9 = predicate8.and(predicate5);
      predicate0.and(predicate1);
      predicate8.negate();
      Predicate<String> predicate10 = predicate9.negate();
      Predicate.isEqual((Object) "()?");
      predicate10.negate();
      Predicate<String> predicate11 = predicate10.negate();
      Predicate<String> predicate12 = predicate11.and(predicate7);
      Predicate.isEqual((Object) predicate1);
      predicate12.negate();
      Predicate.isEqual((Object) predicate8);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution1);
      JSJshopVars.percent = (-1433965340);
      jSSubstitution2.add((Object) "zw");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.6027306293002797
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isEmpty();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<String> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<String> predicate6 = predicate0.and(predicate1);
      Predicate<Object> predicate7 = predicate5.and(predicate3);
      predicate5.test(predicate1);
      Predicate<Object> predicate8 = predicate7.and(predicate5);
      predicate0.test("");
      Predicate<Object> predicate9 = predicate2.and(predicate8);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate11 = predicate3.negate();
      predicate2.or(predicate5);
      predicate11.test(predicate0);
      Predicate<Object> predicate12 = predicate9.negate();
      Predicate<Object> predicate13 = predicate12.and(predicate2);
      Predicate<Object> predicate14 = predicate12.and(predicate10);
      Predicate<Object> predicate15 = Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate16 = predicate14.negate();
      predicate12.test(predicate13);
      predicate16.and(predicate11);
      predicate15.negate();
      predicate16.and(predicate11);
      Predicate<String> predicate17 = predicate6.negate();
      predicate17.test("");
      Predicate<Object> predicate18 = Predicate.isEqual((Object) predicate0);
      predicate18.or(predicate9);
      predicate6.negate();
      predicate0.and(predicate7);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm3);
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm3, jSTerm1);
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.0018442867649786
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(",");
      StringReader stringReader1 = new StringReader(",");
      char[] charArray0 = new char[9];
      stringReader0.ready();
      jSTerm0.add((Object) stringReader1);
      jSTerm0.firstElement();
      jSTerm0.print();
      StringReader stringReader2 = new StringReader("vsf");
      StringReader stringReader3 = new StringReader("w");
      StringReader stringReader4 = new StringReader("list");
      StringReader stringReader5 = new StringReader("w");
      stringReader5.read();
      stringReader1.read(charArray0);
      StringReader stringReader6 = new StringReader(".");
      StringReader stringReader7 = new StringReader("s/8,fd3H!cA.");
      StringReader stringReader8 = new StringReader("7Ch6[F@RvLyKSvbabPJ");
      StringReader stringReader9 = new StringReader("sfo");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      streamTokenizer0.nextToken();
      streamTokenizer0.nextToken();
      streamTokenizer0.resetSyntax();
      StringReader stringReader10 = new StringReader(",");
      StringReader stringReader11 = new StringReader("d~kw;n:6.");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.9136176051672247
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(OSFo");
      stringReader0.mark(40);
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      stringReader0.read(charArray0);
      charArray0[0] = '^';
      charArray0[1] = 'K';
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("(OSFo");
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      stringReader1.read(charBuffer0);
      stringReader1.read();
      stringReader0.read(charBuffer0);
      stringReader1.ready();
      StringReader stringReader2 = new StringReader("(OSFo");
      stringReader1.ready();
      char[] charArray1 = new char[1];
      stringReader2.ready();
      stringReader2.read(charArray1);
      stringReader2.read(charArray1);
      StringReader stringReader3 = new StringReader("(OSFo");
      StringReader stringReader4 = new StringReader("(OSFo");
      stringReader1.skip(2);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      streamTokenizer1.ordinaryChar((-938));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.320323920172374
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.trimToSize();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.5506462116893918
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.trimToSize();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      ListIterator listIterator0 = jSTerm0.listIterator();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertTrue(jSTerm2.isFunction());
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate3);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate3.test(listIterator0);
      predicate6.and(predicate4);
      predicate6.test(predicate2);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate3.and(predicate7);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate10 = predicate3.and(predicate9);
      predicate10.test(predicate1);
      Predicate<Object> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate11.and(predicate9);
      Predicate<Object> predicate13 = predicate12.negate();
      predicate13.and(predicate10);
      predicate0.or(predicate1);
      predicate3.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate14 = predicate2.and(predicate3);
      predicate14.negate();
      Predicate<Object> predicate15 = Predicate.isEqual((Object) "w");
      jSTerm0.removeIf(predicate15);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.5187144856941974
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I+:n.{@IH17{`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "I+:n.{@IH17{`");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate3);
      Predicate<Object> predicate6 = predicate5.negate();
      Integer integer0 = new Integer((-3521));
      Predicate<String> predicate7 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate8 = predicate3.and(predicate6);
      Predicate<String> predicate9 = Predicate.isEqual((Object) predicate8);
      Predicate<String> predicate10 = predicate9.or(predicate0);
      predicate0.negate();
      Predicate<String> predicate11 = predicate7.negate();
      Integer integer1 = new Integer((-428));
      predicate1.test((Object) null);
      predicate10.and(predicate7);
      Predicate<Object> predicate12 = predicate5.and(predicate6);
      predicate3.negate();
      predicate12.test(predicate11);
      Predicate<String> predicate13 = predicate9.negate();
      Predicate<String> predicate14 = predicate13.and(predicate11);
      predicate11.negate();
      predicate3.negate();
      predicate14.negate();
      predicate12.negate();
      jSTerm0.removeIf(predicate4);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Integer, Integer> function2 = Function.identity();
      Function<String, String> function3 = Function.identity();
      Function<String, String> function4 = function3.compose((Function<? super String, ? extends String>) unaryOperator0);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.apply("");
      function4.apply("LbrAq0\"El{Wd'n ");
      function4.andThen((Function<? super String, ? extends Integer>) function5);
      Function<String, String> function6 = unaryOperator0.compose((Function<? super String, ? extends String>) function3);
      Function<Integer, String> function7 = function6.compose((Function<? super Integer, ? extends String>) function1);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      Function<Object, String> function8 = function4.compose((Function<? super Object, ? extends String>) function1);
      Function<Integer, String> function9 = function6.compose((Function<? super Integer, ? extends String>) function8);
      Function<Object, Object> function10 = Function.identity();
      function10.apply(function3);
      function2.andThen((Function<? super Integer, ?>) function7);
      Function<Integer, Integer> function11 = Function.identity();
      Function<Object, Integer> function12 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function13 = function11.compose((Function<? super Object, ? extends Integer>) function12);
      function10.andThen((Function<? super Object, ? extends Integer>) function13);
      Function.identity();
      function2.compose((Function<? super Integer, ? extends Integer>) function11);
      Function<Object, Object> function14 = function10.compose((Function<? super Object, ?>) function1);
      function14.compose((Function<? super Integer, ?>) function9);
      Function.identity();
      function14.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      Function.identity();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("<=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("()?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.625261809442237
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("()?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.whitespaceChars(1, (-851));
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "=de<&k[G");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      predicate2.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate3.negate();
      JSJshopVars.semicolon = (-3381);
      predicate4.and(predicate1);
      Predicate<String> predicate6 = Predicate.isEqual((Object) "=de<&k[G");
      Predicate<String> predicate7 = predicate6.or(predicate5);
      Predicate<String> predicate8 = predicate7.negate();
      Integer integer0 = new Integer((-851));
      jSTerm1.equals(jSTerm0);
      Predicate<String> predicate9 = predicate8.and(predicate5);
      predicate0.and(predicate1);
      predicate9.negate();
      Predicate<String> predicate10 = predicate6.negate();
      Predicate.isEqual((Object) "()?");
      predicate10.negate();
      Predicate<String> predicate11 = predicate10.negate();
      Predicate<String> predicate12 = predicate11.and(predicate7);
      Predicate.isEqual((Object) predicate1);
      predicate12.negate();
      Predicate.isEqual((Object) predicate8);
      jSTerm0.removeIf(predicate5);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5174813970648213
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "JSUtil>>stringTokenizer is returning %%%";
      StringReader stringReader0 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3FkS=.|mS0f)Q|nGw{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[eD>rIn&Y`S+X*KbYz");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<String> predicate2 = Predicate.isEqual((Object) "?L3FkS=.|mS0f)|nGw{");
      predicate0.test(predicate0);
      Predicate<String> predicate3 = predicate2.and(predicate0);
      Predicate<String> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate3.negate();
      predicate2.test("?L3FkS=.|mS0f)Q|nGw{");
      predicate0.test(predicate2);
      Predicate<String> predicate6 = predicate4.negate();
      predicate5.test("?L3FkS=.|mS0f)Q|nGw{");
      predicate1.negate();
      predicate2.test("[eD>rIn&Y`S+X*KbYz");
      predicate2.test("[eD>rIn&Y`S+X*KbYz");
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate7.or(predicate0);
      Predicate<String> predicate9 = predicate3.or(predicate8);
      predicate6.test("JkyVsx23*:HB");
      Predicate<Object> predicate10 = predicate0.negate();
      Predicate<String> predicate11 = predicate9.negate();
      predicate7.or(predicate0);
      predicate11.and(predicate0);
      Predicate<String> predicate12 = predicate11.negate();
      predicate0.negate();
      predicate12.negate();
      predicate10.negate();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[nil]", jSTerm1.toString());
      assertEquals("[?L3FkS=0|mS0f]", jSTerm0.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.4195083775528823
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3FkS=.|mS0f)Q|nGw{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Function.identity();
      Function.identity();
      Function<String, String> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, String> function2 = function0.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super Integer, ? extends String>) function3);
      Function<Integer, Integer> function4 = Function.identity();
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super JSSubstitution, ? extends String>) function5);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ? extends Integer>) function6);
      JSTerm jSTerm0 = new JSTerm();
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super Object, ? extends String>) function7);
      function0.compose((Function<? super String, ? extends String>) function2);
      jSTerm0.add((Object) function4);
      jSTerm0.toStr();
      jSTerm0.listIterator();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(61, stringBuffer0.length());
      
      System.setCurrentTimeMillis(0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.firstElement();
      jSTerm0.add((Object) "?L3FkS=0|mS0f");
      StringBuffer stringBuffer1 = jSTerm1.toStr();
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(14, stringBuffer1.length());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Integer, Integer> function2 = Function.identity();
      Function<String, String> function3 = Function.identity();
      Function<String, String> function4 = function3.compose((Function<? super String, ? extends String>) unaryOperator0);
      Function<String, String> function5 = unaryOperator0.compose((Function<? super String, ? extends String>) function3);
      Function<String, String> function6 = function4.compose((Function<? super String, ? extends String>) unaryOperator0);
      function3.apply(".");
      function3.andThen((Function<? super String, ?>) function5);
      Function<String, Object> function7 = unaryOperator0.andThen((Function<? super String, ?>) function4);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super String, ?>) function3);
      function3.compose((Function<? super Integer, ? extends String>) function1);
      Function.identity();
      Function<String, String> function9 = unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      function3.compose((Function<? super Object, ? extends String>) function8);
      Function<Integer, String> function10 = function3.compose((Function<? super Integer, ? extends String>) function1);
      Function<Object, Object> function11 = Function.identity();
      function11.apply(function7);
      function2.andThen((Function<? super Integer, ?>) function11);
      Function<Integer, Integer> function12 = Function.identity();
      Function<Object, Integer> function13 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function14 = function12.compose((Function<? super Object, ? extends Integer>) function13);
      function11.andThen((Function<? super Object, ? extends Integer>) function14);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      function4.compose((Function<? super Integer, ? extends String>) function10);
      unaryOperator0.compose((Function<? super String, ? extends String>) function9);
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.apply(".");
      Function<String, String> function15 = unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator0);
      assertNotSame(function15, function9);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.8602694272780225
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "[eD>rIn&Y`S+X*KbYz");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = Predicate.isEqual((Object) "?L3FkS=.|mS0f)|nGw{");
      Predicate<String> predicate4 = predicate3.negate();
      predicate0.test(predicate1);
      Predicate<String> predicate5 = predicate4.and(predicate0);
      Predicate<String> predicate6 = predicate5.negate();
      predicate5.negate();
      predicate0.test(predicate4);
      Predicate<String> predicate7 = predicate6.negate();
      predicate2.negate();
      predicate3.test("[eD>rIn&Y`S+X*KbYz");
      predicate3.test("[eD>rIn&Y`S+X*KbYz");
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate8.or(predicate1);
      Predicate<String> predicate10 = predicate5.or(predicate9);
      predicate7.test("JkyVsx23*:HB");
      Predicate<Object> predicate11 = predicate0.negate();
      Predicate<String> predicate12 = predicate10.negate();
      predicate8.or(predicate1);
      predicate12.and(predicate0);
      predicate12.negate();
      predicate1.negate();
      predicate11.negate();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?L3FkS=.|mS0f)|nGw{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals("[., [?L3FkS=0|mS0f], [nil]]", jSTerm1.toString());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(OSFo");
      stringReader0.mark(40);
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      stringReader0.read(charArray0);
      charArray0[0] = '^';
      charArray0[1] = 'K';
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("(OSFo");
      stringReader1.read();
      stringReader1.ready();
      StringReader stringReader2 = new StringReader("(OSFo");
      stringReader1.ready();
      char[] charArray1 = new char[1];
      stringReader2.ready();
      stringReader2.read(charArray1);
      stringReader2.read(charArray1);
      stringReader1.skip((-3L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      streamTokenizer0.ordinaryChar(1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis((-2638L));
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8203806314665187
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I+:n.{@IH17{`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-51), 718);
      streamTokenizer0.pushBack();
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String string0 = "?L3FkS=.|mS0f)Q|nGw{";
      StringReader stringReader0 = new StringReader(",");
      StringReader stringReader1 = new StringReader("?L3FkS=.|mS0f)Q|nGw{");
      stringReader1.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) stringReader0);
      jSTerm0.firstElement();
      jSTerm0.print();
      StringReader stringReader2 = new StringReader(",");
      StringReader stringReader3 = new StringReader("6.0");
      String string1 = "Y";
      StringReader stringReader4 = new StringReader("Y");
      StringReader stringReader5 = new StringReader("?L3FkS=.|mS0f)Q|nGw{");
      stringReader1.read();
      // Undeclared exception!
      try { 
        stringReader3.read((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Integer, Integer> function2 = Function.identity();
      Function<String, String> function3 = Function.identity();
      Function<String, String> function4 = function3.compose((Function<? super String, ? extends String>) unaryOperator0);
      Function<String, String> function5 = unaryOperator0.compose((Function<? super String, ? extends String>) function3);
      Function<String, String> function6 = function4.compose((Function<? super String, ? extends String>) unaryOperator0);
      function3.andThen((Function<? super String, ?>) function5);
      Function<String, Object> function7 = unaryOperator0.andThen((Function<? super String, ?>) function4);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super String, ?>) function3);
      function4.apply("<=");
      unaryOperator0.andThen((Function<? super String, ?>) function5);
      function3.compose((Function<? super Integer, ? extends String>) function1);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      Function<Object, String> function9 = function3.compose((Function<? super Object, ? extends String>) function8);
      function3.compose((Function<? super Integer, ? extends String>) function1);
      Function<Object, Object> function10 = Function.identity();
      function10.apply(function7);
      function2.andThen((Function<? super Integer, ?>) function10);
      Function<Integer, Integer> function11 = Function.identity();
      Function<Object, Integer> function12 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function13 = function11.compose((Function<? super Object, ? extends Integer>) function12);
      function10.andThen((Function<? super Object, ? extends Integer>) function13);
      Function<Integer, Integer> function14 = function11.compose((Function<? super Integer, ? extends Integer>) function2);
      Function<Object, Object> function15 = function10.compose((Function<? super Object, ?>) function9);
      function15.compose((Function<? super Integer, ?>) function14);
      Function.identity();
      function15.andThen((Function<? super Object, ? extends String>) function9);
      Function.identity();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      StringReader stringReader0 = new StringReader(",");
      StringReader stringReader1 = new StringReader(",");
      StringReader stringReader2 = new StringReader(",");
      stringReader2.reset();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(2161L);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("()?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.parseNumbers();
      streamTokenizer0.whitespaceChars(37, (-4));
      streamTokenizer0.ordinaryChars((-4), 62);
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer1.sval = null;
      stringReader0.read();
      streamTokenizer0.wordChars(44, (-1787));
      streamTokenizer0.commentChar(2906);
      JSJshopVars.percent = (-392);
      streamTokenizer1.resetSyntax();
      StringReader stringReader1 = new StringReader("()?");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("C+o8]*#Mmcrmi!q");
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = '`';
      stringReader0.skip((-2545));
      charArray0[2] = 'O';
      stringReader1.read(charArray0);
      stringReader1.read();
      StringReader stringReader2 = new StringReader("P|BikV|ar");
      StringReader stringReader3 = new StringReader("notequal");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(OBFo");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
      streamTokenizer0.nextToken();
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar(40);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.782019572767355
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("P)?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis(41);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.whitespaceChars(1743, (-1093554708));
      streamTokenizer1.parseNumbers();
      streamTokenizer0.ordinaryChars((-4), 62);
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.slashStarComments(false);
      streamTokenizer1.sval = null;
      streamTokenizer2.parseNumbers();
      streamTokenizer2.pushBack();
      streamTokenizer2.wordChars(1063, (-887));
      stringReader0.read();
      streamTokenizer2.wordChars(10, (-1189));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.resetSyntax();
      StringReader stringReader1 = new StringReader("2#P'q;Hh'l]K{R");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      assertFalse(streamTokenizer4.equals((Object)streamTokenizer3));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Integer, Integer> function2 = Function.identity();
      Function<String, String> function3 = Function.identity();
      Function<String, String> function4 = function3.compose((Function<? super String, ? extends String>) unaryOperator0);
      Function<String, String> function5 = unaryOperator0.compose((Function<? super String, ? extends String>) function3);
      Function<String, String> function6 = function4.compose((Function<? super String, ? extends String>) unaryOperator0);
      function3.apply("$#");
      function3.andThen((Function<? super String, ?>) function5);
      unaryOperator0.andThen((Function<? super String, ?>) function4);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super String, ?>) function3);
      unaryOperator0.andThen((Function<? super String, ?>) function5);
      function3.compose((Function<? super Integer, ? extends String>) function1);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      Function<Object, String> function8 = function3.compose((Function<? super Object, ? extends String>) function7);
      function3.compose((Function<? super Integer, ? extends String>) function1);
      Function<Object, Object> function9 = Function.identity();
      Object object0 = new Object();
      function2.andThen((Function<? super Integer, ?>) function9);
      Function<Integer, Integer> function10 = Function.identity();
      Function<Object, Integer> function11 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function12 = function10.compose((Function<? super Object, ? extends Integer>) function11);
      function9.andThen((Function<? super Object, ? extends Integer>) function12);
      Function.identity();
      Function<Integer, Integer> function13 = function10.compose((Function<? super Integer, ? extends Integer>) function2);
      Function<Object, Object> function14 = function9.compose((Function<? super Object, ?>) function8);
      function14.compose((Function<? super Integer, ?>) function13);
      Function.identity();
      function14.andThen((Function<? super Object, ? extends String>) function8);
      Function.identity();
      Function.identity();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Integer, Integer> function2 = Function.identity();
      Function<String, String> function3 = Function.identity();
      Function<String, String> function4 = function3.compose((Function<? super String, ? extends String>) unaryOperator0);
      Function<String, String> function5 = unaryOperator0.compose((Function<? super String, ? extends String>) function3);
      Function<String, String> function6 = function4.compose((Function<? super String, ? extends String>) unaryOperator0);
      function3.apply("%Z*73");
      function3.andThen((Function<? super String, ?>) function5);
      Function<String, Object> function7 = unaryOperator0.andThen((Function<? super String, ?>) function4);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super String, ?>) function3);
      unaryOperator0.andThen((Function<? super String, ?>) function5);
      function3.compose((Function<? super Integer, ? extends String>) function1);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      Function<Object, String> function9 = function3.compose((Function<? super Object, ? extends String>) function8);
      function3.compose((Function<? super Integer, ? extends String>) function1);
      Function<Object, Object> function10 = Function.identity();
      function10.apply(function7);
      function2.andThen((Function<? super Integer, ?>) function10);
      Function<Integer, Integer> function11 = Function.identity();
      Function<Object, Integer> function12 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function13 = function11.compose((Function<? super Object, ? extends Integer>) function12);
      function10.andThen((Function<? super Object, ? extends Integer>) function13);
      Function.identity();
      Function<Integer, Integer> function14 = function11.compose((Function<? super Integer, ? extends Integer>) function2);
      Function<Object, Object> function15 = function10.compose((Function<? super Object, ?>) function9);
      function15.compose((Function<? super Integer, ?>) function14);
      Function.identity();
      Function.identity();
      Function.identity();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }
}
