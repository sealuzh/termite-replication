/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 12:00:56 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 0, 0);
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[7] = true;
      booleanArray0[0] = true;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      mockPrintWriter0.print('\u0086');
      mockPrintWriter0.print((float) 0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      printWriter0.println(0);
      printWriter0.print(0);
      mockPrintWriter0.print(0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      printWriter0.print(13);
      mockPrintWriter1.println();
      mockPrintWriter0.println((-1030));
      mockPrintWriter0.write(" tto bound ");
      mockPrintWriter0.print(3213);
      printWriter0.write("", 1453, (-1030));
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      matrix0.print((PrintWriter) mockPrintWriter1, (NumberFormat) null, 0);
      booleanArray0[2] = true;
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("\t");
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
      assertNotSame(doubleArray1, doubleArray2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Test any release possible ...");
      stringReader0.skip((-2569L));
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      bufferedReader0.skip(2253);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 1817);
      bufferedReader0.read();
      bufferedReader1.readLine();
      bufferedReader1.readLine();
      bufferedReader0.ready();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2253;
      doubleArray0[1] = (double) 29L;
      doubleArray0[2] = (double) 2253;
      doubleArray0[3] = (double) 29L;
      doubleArray0[4] = (double) (-2569L);
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, true, (boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2506.8527346;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = (-3382.606599);
      doubleArray1[3] = 1461.779014;
      doubleArray1[5] = 1.0000000000000009;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-3382.606599);
      doubleArray2[1] = 2506.8527346;
      doubleArray2[2] = (-3382.606599);
      doubleArray2[4] = 91.800982;
      doubleArray2[6] = (-3382.606599);
      doubleArray0[1] = doubleArray2;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 3422, 3422);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 0, 0);
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[1] = true;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      mockPrintWriter0.print('\u0086');
      mockPrintWriter0.print((float) 0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      printWriter0.println(0);
      printWriter0.print(0);
      mockPrintWriter0.print(0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      printWriter0.print(13);
      mockPrintWriter1.println();
      mockPrintWriter0.println((-1030));
      mockPrintWriter1.println((-1L));
      mockPrintWriter0.write(" tto boun$d ");
      mockPrintWriter0.print(3213);
      printWriter0.write("", (-1030), (-1030));
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      matrix0.print((PrintWriter) mockPrintWriter1, (NumberFormat) null, 0);
      booleanArray0[2] = true;
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("Gd");
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 0, 0);
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[7] = true;
      booleanArray0[5] = true;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      mockPrintWriter0.print((float) 0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      printWriter0.println(0);
      printWriter0.print(0);
      mockPrintWriter0.print(0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      printWriter0.print(13);
      mockPrintWriter1.println();
      mockPrintWriter0.println((-1030));
      mockPrintWriter0.write(" tto bound ");
      printWriter0.write("", 1453, (-1030));
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      matrix0.print((PrintWriter) mockPrintWriter1, (NumberFormat) null, 0);
      booleanArray0[2] = true;
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("\t");
      Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
      Random.setNextRandom((-1));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity(0, 0);
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      mockPrintWriter0.print((float) 0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      printWriter0.println(0);
      printWriter0.print(0);
      mockPrintWriter0.print(0);
      printWriter0.write(")...\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.append((CharSequence) ")...\n");
      mockPrintWriter1.print('');
      printWriter0.print((int) '');
      mockPrintWriter1.println();
      mockPrintWriter0.println((-1030));
      printWriter0.print(0);
      printWriter0.write("", 1447, (-1030));
      Object object0 = new Object();
      printWriter0.print((double) 0);
      mockPrintWriter0.print(object0);
      booleanArray0[2] = true;
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(")...\n");
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-T8Q848P");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("-T8Q848P");
      stringReader1.skip(1344L);
      BufferedReader bufferedReader0 = new BufferedReader(stringReader1);
      stringReader1.markSupported();
      bufferedReader0.skip(0L);
      bufferedReader0.readLine();
      BufferedReader bufferedReader1 = new BufferedReader(stringReader1, 1407);
      CharBuffer charBuffer0 = CharBuffer.allocate(92);
      bufferedReader0.read(charBuffer0);
      bufferedReader0.read();
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader1);
      bufferedReader0.skip(1344L);
      bufferedReader2.readLine();
      bufferedReader0.markSupported();
      bufferedReader2.readLine();
      bufferedReader2.ready();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, false, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Random.setNextRandom((-278));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Random.setNextRandom(41);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix((double[][]) null, 41, 41);
      double[] doubleArray0 = new double[0];
      boolean[] booleanArray0 = new boolean[0];
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 0, 0);
      boolean[] booleanArray0 = new boolean[9];
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockFile mockFile0 = new MockFile("WG}88Xc11o#R1nPcm");
      mockFile0.setExecutable(false);
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      char[] charArray0 = new char[7];
      charArray0[1] = 'X';
      charArray0[2] = '.';
      charArray0[3] = 'X';
      Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      Random.setNextRandom(0);
      Random.setNextRandom(0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Random.setNextRandom((-1481));
      weka.core.matrix.Matrix matrix0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1481);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      doubleArray0[1] = (double) (-1481);
      doubleArray0[2] = (double) (-1481);
      doubleArray0[3] = (double) (-1481);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean1 = false;
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, false, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2806483581169434
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(1337);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(200);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.elementAt(0);
      assertEquals(0, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.addElement((-1335));
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.removeAllElements();
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 91.800982;
      boolean boolean0 = false;
      StringReader stringReader0 = new StringReader("8076");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 89);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 89);
      BufferedReader bufferedReader2 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader1);
      weka.core.matrix.Matrix matrix0 = null;
      try {
        matrix0 = new weka.core.matrix.Matrix(bufferedReader3);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Line 1: expected number of columns
         //
         verifyException("weka.core.matrix.Matrix", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(1);
      optimization_DynamicIntArray0.addElement(2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      optimization_DynamicIntArray0.addElement(24);
      assertEquals(2, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.size();
      String string0 = "\"o:UvW|_Eg<GYw}/";
      StringReader stringReader0 = new StringReader("\"o:UvW|_Eg<GYw}/");
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(3259);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(1083);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(1083);
      optimization_DynamicIntArray0.size();
      assertEquals(1, optimization_DynamicIntArray0.size());
      
      optimization_DynamicIntArray0.removeElementAt(0);
      assertEquals(0, optimization_DynamicIntArray0.size());
  }
}
