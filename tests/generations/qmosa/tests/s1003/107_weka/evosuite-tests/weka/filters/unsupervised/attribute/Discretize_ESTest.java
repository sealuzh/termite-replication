/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 13:04:01 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Properties;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.052219715212107
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SystemInUtil.addInputLine("F\"|%^");
      arrayList0.stream();
      Instances instances0 = new Instances("$Revision: 8964 $", arrayList0, 2267);
      Attribute attribute0 = new Attribute("@relation");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      arrayList0.add(attribute0);
      instances0.deleteStringAttributes();
      Discretize discretize1 = new Discretize();
      discretize1.getRevision();
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2267);
      instances0.add((Instance) binarySparseInstance0);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      discretize0.getRevision();
      MultiFilter multiFilter0 = new MultiFilter();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2407.9, doubleArray0);
      binarySparseInstance1.toString();
      binarySparseInstance0.deleteAttributeAt(attribute0.NUMERIC);
      discretize0.setInputFormat(instances1);
      System.setCurrentTimeMillis(attribute0.DATE);
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      Attribute.typeToString(attribute0);
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.537006424058823
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String string0 = "F\"|%^";
      SystemInUtil.addInputLine("F\"|%^");
      arrayList0.stream();
      Instances instances0 = new Instances("$Revision: 8964 $", arrayList0, 2267);
      Attribute attribute0 = new Attribute("@relation");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      instances0.add((Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      MockRandom mockRandom0 = new MockRandom();
      Discretize discretize0 = new Discretize();
      arrayList0.add(attribute0);
      instances0.deleteStringAttributes();
      Discretize discretize1 = new Discretize();
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2267);
      instances0.add((Instance) binarySparseInstance1);
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '@relation' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.515016633484322
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 5.3;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 919.5096950426936;
      doubleArray1[3] = 2.0;
      doubleArray1[4] = 3576.445;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = (-3086.8);
      doubleArray0[0] = doubleArray1;
      discretize0.getBinRangesString(41);
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 5.3;
      doubleArray2[4] = 2.0;
      doubleArray2[5] = 5.3;
      doubleArray2[6] = 5.3;
      doubleArray2[7] = 2.0;
      doubleArray0[2] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(1);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("(-inf-5.3],(5.3-2],(2-919.509695],(919.509695-2],(2-3576.445],(3576.445-NaN],(NaN--3086.8],(-3086.8-inf)", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("n-", arrayList0, 2298);
      Attribute attribute0 = new Attribute("@relation");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      instances0.iterator();
      Attribute.typeToString(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      String string0 = "3sz";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "3sz");
      arrayList0.add(attribute0);
      instances0.deleteStringAttributes();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2298);
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = true;
      discretize0.m_FindNumBins = true;
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bin number optimization in conjunction with equal-frequency binning not implemented.
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1507242029323885
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 200);
      Attribute attribute0 = new Attribute(".arff");
      instances0.iterator();
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.toString();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2);
      binarySparseInstance3.setValueSparse((-595), 3485.761033);
      binarySparseInstance0.deleteAttributeAt((-595));
      Attribute.typeToString((-595));
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2);
      Discretize discretize1 = new Discretize("");
      discretize0.setMakeBinary(true);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance2);
      Instances instances1 = new Instances(instances0, 0);
      discretize1.setInputFormat(instances1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize1.batchFinished();
      MultiFilter multiFilter0 = new MultiFilter();
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(200);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.907994938968512
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 200);
      Attribute attribute0 = new Attribute(".arff");
      instances0.iterator();
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.toString();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2);
      binarySparseInstance3.setValueSparse((-595), 3485.761033);
      binarySparseInstance0.deleteAttributeAt((-595));
      binarySparseInstance1.toString();
      binarySparseInstance2.deleteAttributeAt((-1517));
      boolean boolean0 = discretize0.setInputFormat(instances0);
      discretize0.getIgnoreClass();
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertEquals(1, instances1.numAttributes());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{}";
      stringArray0[2] = "{}";
      stringArray0[3] = "relational";
      stringArray0[4] = "No first input file given.\n";
      discretize1.setInputFormat(instances1);
      assertEquals("/S>9[ce~OJU\"J~:&w'-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
      
      boolean boolean1 = discretize1.m_IgnoreClass;
      boolean boolean2 = discretize1.batchFinished();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0112095852513443
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[ceUOJU\"J~:&w'", arrayList0, 2275);
      Attribute attribute0 = new Attribute("@relation");
      Attribute.typeToString((-3));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Attribute.typeToString(attribute0);
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      arrayList1.add(attribute0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      arrayList1.add(attribute0);
      int[] intArray0 = new int[7];
      Attribute attribute1 = new Attribute("/>H5.o", (-2013265917));
      attribute0.addStringValue(attribute1, (-2013265917));
      intArray0[0] = 2;
      intArray0[1] = 0;
      doubleArray0[2] = (double) 4;
      attribute0.addStringValue("numeric");
      intArray0[3] = 2275;
      intArray0[3] = 1;
      doubleArray0[2] = (double) 4;
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.m_UseEqualFrequency = true;
      boolean boolean0 = discretize0.m_IgnoreClass;
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0118498314197004
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SystemInUtil.addInputLine("F\"|%^");
      arrayList0.stream();
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 2275);
      Attribute attribute0 = new Attribute("@relation");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRandom mockRandom0 = new MockRandom(2);
      instances0.resample(mockRandom0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      instances0.iterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.add(attribute0);
      instances0.deleteStringAttributes();
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "string";
      stringArray0[1] = " <";
      stringArray0[2] = "real";
      discretize0.getIgnoreClass();
      Filter filter0 = Filter.makeCopy(discretize0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      instances0.add((Instance) sparseInstance0);
      Filter.useFilter(instances0, filter0);
      MultiFilter multiFilter0 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4904032277870636
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 2275);
      Attribute attribute0 = new Attribute("@relation");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      instances0.iterator();
      Attribute.typeToString(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      arrayList0.add(attribute0);
      instances0.deleteStringAttributes();
      arrayList0.listIterator();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2275);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "numeric");
      instances0.clear();
      discretize0.setInputFormat(instances0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      arrayList0.add((Attribute) null);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.537006424058823
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String string0 = "F\"|%^";
      SystemInUtil.addInputLine("F\"|%^");
      arrayList0.stream();
      Instances instances0 = new Instances("$Revision: 8964 $", arrayList0, 2267);
      Attribute attribute0 = new Attribute("@relation");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      arrayList0.add(attribute0);
      MockRandom mockRandom0 = new MockRandom();
      Discretize discretize0 = new Discretize();
      arrayList0.add(attribute0);
      instances0.deleteStringAttributes();
      Discretize discretize1 = new Discretize();
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2267);
      instances0.add((Instance) binarySparseInstance0);
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '@relation' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.065636621474618
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 200);
      Attribute attribute0 = new Attribute(".arff");
      instances0.iterator();
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance0.toString();
      binarySparseInstance0.setValueSparse((-595), (-438.5613104));
      binarySparseInstance0.deleteAttributeAt(1);
      discretize0.setInputFormat(instances0);
      discretize0.input((Instance) null);
      discretize0.batchFinished();
      boolean boolean0 = discretize0.input(binarySparseInstance1);
      assertFalse(discretize0.isNewBatch());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/S>9[c=~OJU\"?~:`wW'");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[c=~OJU\"?~:`wW'", arrayList0, 2257);
      Attribute attribute0 = new Attribute("@data");
      Attribute.typeToString(3);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Iterator<Instance> iterator0 = instances0.iterator();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.spliterator();
      Object object0 = attribute0.copy();
      arrayList2.add((Attribute) object0);
      arrayList2.add(attribute0);
      arrayList2.add(attribute0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Attribute.typeToString(89);
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>(1);
      arrayList4.add(attribute0);
      attribute0.isInRange(3);
      arrayList4.trimToSize();
      Attribute attribute1 = new Attribute("@attribute", instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      arrayList0.remove((Object) iterator0);
      Discretize discretize0 = new Discretize("numeric");
      discretize0.setMakeBinary(true);
      binarySparseInstance0.toString();
      discretize0.getMakeBinary();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0123723030246317
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 200);
      Attribute attribute0 = new Attribute(".arff");
      instances0.iterator();
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.toString();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2);
      binarySparseInstance2.setValueSparse((-595), 3485.761033);
      binarySparseInstance0.deleteAttributeAt((-595));
      binarySparseInstance0.toString();
      binarySparseInstance1.deleteAttributeAt((-1517));
      discretize0.setInputFormat(instances0);
      discretize0.getIgnoreClass();
      Filter.makeCopy(discretize0);
      binarySparseInstance1.setValue((-3119), (double) (-595));
      Filter.useFilter(instances0, discretize0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{}";
      stringArray0[2] = "{}";
      stringArray0[3] = "relational";
      stringArray0[4] = "No first input file given.\n";
      stringArray0[5] = "real";
      stringArray0[6] = "@end";
      discretize0.calculateCutPoints();
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // null
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.05592522077561
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("F'T\"K*qhpDu", arrayList0, 2283);
      Attribute attribute0 = new Attribute("@relation");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      instances0.iterator();
      Attribute.typeToString(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "3szI");
      arrayList0.add(attribute0);
      instances0.deleteStringAttributes();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2283);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "numeric");
      instances0.clear();
      discretize0.setInputFormat(instances0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.batchFinished();
      MultiFilter multiFilter0 = new MultiFilter();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
      
      discretize0.batchFinished();
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.091939703917201
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("c!Z'T/T$f", arrayList0, 2292);
      Attribute attribute0 = new Attribute(".bsi");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)94;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Attribute.typeToString(10);
      arrayList0.add(attribute0);
      instances0.deleteStringAttributes();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      MultiFilter multiFilter0 = new MultiFilter();
      discretize0.outputPeek();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 200);
      Attribute attribute0 = new Attribute(".arff");
      instances0.iterator();
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.toString();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2);
      binarySparseInstance3.setValueSparse((-595), 3485.761033);
      binarySparseInstance0.deleteAttributeAt((-595));
      Attribute.typeToString((-595));
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2);
      Discretize discretize1 = new Discretize("");
      discretize0.setMakeBinary(true);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance2);
      binarySparseInstance5.toString();
      binarySparseInstance2.deleteAttributeAt((-1750));
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.438582241210896
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 2275);
      Attribute attribute0 = new Attribute("v");
      Attribute.typeToString(3);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      instances0.iterator();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute0);
      Attribute.typeToString(attribute0);
      arrayList0.add(attribute0);
      arrayList2.add(attribute0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>(1);
      arrayList4.add(attribute0);
      Attribute.typeToString(1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(23);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      Discretize discretize1 = new Discretize("integer");
      discretize0.findNumBins(0);
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "real";
      stringArray0[1] = "nominal";
      stringArray0[2] = "relational";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: real nominal relational 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "return result;");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4n?/}hmO5{HN_{F(");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 3902.2367655;
      doubleArray2[1] = (-651.83091457497);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1936.803985);
      doubleArray2[4] = 65.972968;
      doubleArray2[5] = (-0.1);
      doubleArray2[6] = (-1.0);
      doubleArray2[7] = (-1283.5);
      doubleArray2[8] = 4429.562383;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-0.1);
      doubleArray3[1] = (-1936.803985);
      doubleArray3[2] = (-154.04846215933614);
      doubleArray3[3] = (-0.1);
      doubleArray3[4] = 3902.2367655;
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = (-1283.5);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-154.04846215933614);
      doubleArray4[1] = (-1936.803985);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = 3902.2367655;
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = (-651.83091457497);
      doubleArray4[6] = (-1283.5);
      doubleArray4[7] = (-651.83091457497);
      doubleArray4[8] = 4429.562383;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = 65.972968;
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = (-154.04846215933614);
      doubleArray6[4] = (-651.83091457497);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 540.83519;
      doubleArray7[1] = 3902.2367655;
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d&h5a$");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(2147483645);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483645
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1033997406036247
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 200;
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 200);
      Attribute attribute0 = new Attribute(".arff");
      instances0.iterator();
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance0.toString();
      binarySparseInstance0.setValueSparse((-595), (-438.5613104));
      binarySparseInstance0.deleteAttributeAt(1);
      binarySparseInstance0.toString();
      binarySparseInstance1.deleteAttributeAt(1);
      discretize0.setInputFormat(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      discretize0.batchFinished();
      MultiFilter multiFilter1 = new MultiFilter();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-595));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5006362672431495
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 2275);
      Attribute attribute0 = new Attribute("@relation");
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      instances0.iterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      arrayList0.add(attribute0);
      instances0.deleteStringAttributes();
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "string";
      stringArray0[1] = " <";
      stringArray0[2] = "real";
      discretize0.getIgnoreClass();
      Filter filter0 = Filter.makeCopy(discretize0);
      try { 
        Filter.useFilter(instances0, filter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '@relation' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.503209043565531
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[ceUOJU\"J~:&w'", arrayList0, 2275);
      Attribute attribute0 = new Attribute("@relation");
      Attribute.typeToString((-3));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Attribute.typeToString(attribute0);
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      arrayList1.add(attribute0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      arrayList1.add(attribute0);
      int[] intArray0 = new int[7];
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Attribute> function0 = (Function<Object, Attribute>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends Attribute>) function0);
      arrayList1.replaceAll(unaryOperator0);
      Attribute attribute1 = new Attribute("@end", instances0);
      Attribute.typeToString(0);
      arrayList1.remove(0);
      attribute0.addStringValue(attribute1, 0);
      intArray0[6] = 2;
      intArray0[1] = 2;
      doubleArray0[2] = (double) 4;
      intArray0[3] = 2275;
      intArray0[3] = 1;
      doubleArray0[2] = (double) 4;
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.m_UseEqualFrequency = true;
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '@relation' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.428715181307695
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate2);
      arrayList0.removeIf(predicate3);
      SystemInUtil.addInputLine("F\"|%^");
      arrayList0.stream();
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 2275);
      Attribute attribute0 = new Attribute("@relation");
      arrayList0.add(attribute0);
      MockRandom mockRandom0 = new MockRandom(2);
      Instances instances1 = instances0.resample(mockRandom0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      instances0.iterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances1.sort(comparator0);
      arrayList0.add(attribute0);
      instances1.deleteStringAttributes();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      discretize0.getIgnoreClass();
      Filter.makeCopy(discretize0);
      try { 
        Filter.useFilter(instances1, discretize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '@relation' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1235685850760224
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 200);
      Attribute attribute0 = new Attribute(".arff");
      instances0.iterator();
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance0.toString();
      binarySparseInstance0.setValueSparse((-595), (-438.5613104));
      binarySparseInstance0.deleteAttributeAt(1);
      binarySparseInstance0.toString();
      binarySparseInstance1.deleteAttributeAt(1);
      discretize0.setInputFormat(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      discretize0.batchFinished();
      MultiFilter multiFilter1 = new MultiFilter();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-595));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6467142775717116
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize("_");
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      discretize0.useBinNumbersTipText();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9526349322853993
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SystemInUtil.addInputLine("F\"|%^");
      arrayList0.stream();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)115;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 2275);
      Attribute attribute0 = new Attribute("@relation");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRandom mockRandom0 = new MockRandom(2);
      Instances instances1 = instances0.resample(mockRandom0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.trimToSize();
      instances0.iterator();
      arrayList0.add(attribute0);
      instances0.deleteStringAttributes();
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(611);
      instances0.add((Instance) binarySparseInstance0);
      Filter.useFilter(instances0, discretize0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/S>9[ce~OJU\"J~:&w'");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Filter filter0 = Filter.makeCopy(discretize0);
      Filter.useFilter(instances1, filter0);
      AllFilter allFilter0 = new AllFilter();
      assertTrue(allFilter0.isNewBatch());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[ceUOJU\"J~:&w'", arrayList0, 2275);
      Attribute attribute0 = new Attribute("@relation");
      Attribute.typeToString((-3));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Attribute.typeToString(attribute0);
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      arrayList1.add(attribute0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      arrayList1.add(attribute0);
      Attribute attribute1 = new Attribute(".arff");
      arrayList0.add(attribute1);
      MockRandom mockRandom0 = new MockRandom(5132L);
      Instances instances1 = instances0.resample(mockRandom0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      arrayList0.add(attribute0);
      instances1.deleteStringAttributes();
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize("string");
      try { 
        discretize1.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at string
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[ce~dU\"J~:&w'", arrayList0, 2275);
      Attribute attribute0 = new Attribute("@relation");
      instances0.iterator();
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.toString();
      binarySparseInstance2.setValueSparse((-1908874351), 3363.4);
      binarySparseInstance1.deleteAttributeAt(16);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0430592162457075
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SystemInUtil.addInputLine("F\"|%^");
      arrayList0.stream();
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 2275);
      Attribute attribute0 = new Attribute("@relation");
      arrayList0.add(attribute0);
      MockRandom mockRandom0 = new MockRandom(2);
      instances0.resample(mockRandom0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      instances0.iterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.getIgnoreClass();
      Filter.makeCopy(discretize0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      instances0.add((Instance) binarySparseInstance0);
      Filter.useFilter(instances0, discretize0);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter1.getFilter(157);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 157
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      properties1.keys();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      properties0.clear();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I");
      Discretize discretize0 = new Discretize("I");
      discretize0.setFindNumBins(false);
      discretize0.setBins((-1982292595));
      discretize0.getBins();
      discretize0.setOutputFormat();
      assertEquals((-1982292595), discretize0.getBins());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "return result;");
      Discretize discretize0 = new Discretize("return result;");
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Vl4Pyh";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3+,7!1cC");
      stringArray0[1] = "Vl4Pyh";
      discretize0.setIgnoreClass(false);
      doubleArray1[1] = (-4.57826535);
      doubleArray1[2] = 3327.919206112283;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";0vB2C90)AH0");
      discretize0.setFindNumBins(false);
      doubleArray2[0] = (-4.57826535);
      doubleArray2[1] = 3327.919206112283;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getBins();
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(2266);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2266
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.336817541701143
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize("9-$IrjNyh|xBVZlh");
      String[] stringArray0 = new String[3];
      discretize0.getBinRangesString(114);
      stringArray0[0] = "9-$IrjNyh|xBVZlh";
      stringArray0[1] = "9-$IrjNyh|xBVZlh";
      stringArray0[2] = "G>`>H&q3[PH.";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getOptions();
      discretize0.setUseEqualFrequency(true);
      discretize0.setInvertSelection(true);
      Discretize.main(stringArray0);
      discretize0.globalInfo();
      discretize0.getUseBinNumbers();
      discretize0.getFindNumBins();
      discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-24);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-24);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.getRevision();
      discretize0.setUseEqualFrequency(true);
      discretize0.getUseEqualFrequency();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0671548291624515
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ")H'~5M)H-0RKxm,`+");
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(1315);
      discretize0.m_MakeBinary = true;
      discretize0.getCapabilities();
      assertTrue(discretize0.getMakeBinary());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      discretize0.setOptions(stringArray0);
      discretize0.invertSelectionTipText();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/S>9[ce~OJU\"J~:&w'", arrayList0, 200);
      Attribute attribute0 = new Attribute(".arff");
      instances0.iterator();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.toString();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2);
      binarySparseInstance3.setValueSparse((-595), 3485.761033);
      binarySparseInstance0.deleteAttributeAt((-595));
      Attribute.typeToString((-595));
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2);
      discretize0.setMakeBinary(true);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance2);
      binarySparseInstance5.toString();
      binarySparseInstance1.deleteAttributeAt((-1750));
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 212;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "&%}.:P:");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate0.negate();
      predicate5.negate();
      predicate0.or(predicate4);
      arrayList0.removeIf(predicate0);
      SystemInUtil.addInputLine("&%}.:P:");
      arrayList0.stream();
      Instances instances0 = new Instances("&%}.:P:", arrayList0, 212);
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6611729794853702
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 5.3;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 919.5096950426936;
      doubleArray1[3] = 919.5096950426936;
      doubleArray1[4] = 3576.445;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = (-3086.8);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 2.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = 2.0;
      doubleArray3[3] = 5.3;
      doubleArray3[4] = 2.0;
      doubleArray3[5] = 5.3;
      doubleArray3[6] = 5.3;
      doubleArray3[7] = 2.0;
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      int int0 = 1;
      discretize0.getBinRangesString(1);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.getAttributeIndices();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1115;
      doubleArray0[1] = (double) 1115;
      doubleArray0[2] = (-1644.8152);
      doubleArray0[3] = (-1644.8152);
      doubleArray0[4] = (double) 1115;
      doubleArray0[5] = (-1644.8152);
      doubleArray0[6] = (double) 1115;
      doubleArray0[7] = (double) 1115;
      SparseInstance sparseInstance0 = new SparseInstance((-1644.8152), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "3loI@z4b!IGD%UjP";
      stringArray0[1] = "Cannot handle unknown attribute type '";
      stringArray0[2] = ">d&GC'Y'@ZH-X3";
      stringArray0[3] = "(m.Ud7DqO";
      stringArray0[4] = "fmF:k[`4LX<b=F\"ly";
      Filter.runFilter(discretize0, stringArray0);
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      Range range0 = new Range("@<rY|ARG9F");
      discretize0.m_DiscretizeCols = range0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.getUseBinNumbers();
      discretize0.listOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      Function.identity();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties3);
      Properties properties2 = new Properties();
      properties1.clear();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties2);
      properties1.keys();
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties9);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.trimToSize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(31);
      Discretize discretize0 = new Discretize("Couldn't compress string attribute value - searching uncompressed.");
      discretize0.setMakeBinary(true);
      binarySparseInstance0.toString();
      discretize0.getOptions();
      binarySparseInstance0.deleteAttributeAt(31);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      protectedProperties4.propertyNames();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties18 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties14);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties10);
      protectedProperties5.keys();
      ProtectedProperties protectedProperties22 = new ProtectedProperties(protectedProperties17);
      ProtectedProperties protectedProperties23 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties24 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties25 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties26 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties27 = new ProtectedProperties(protectedProperties18);
      ProtectedProperties protectedProperties28 = new ProtectedProperties(protectedProperties18);
      ProtectedProperties protectedProperties29 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties30 = new ProtectedProperties(protectedProperties9);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties31 = new ProtectedProperties(protectedProperties21);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Y";
      stringArray0[1] = "   * Returns only the toString() method.\n";
      stringArray0[3] = "   * Returns only the toString() method.\n";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.991004276632703
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize("9-$IrjNyh|xBVZlh");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "9-$IrjNyh|xBVZlh";
      stringArray0[1] = "9-$IrjNyh|xBVZlh";
      stringArray0[2] = "9-$IrjNyh|xBVZlh";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.setUseEqualFrequency(true);
      discretize0.setInvertSelection(true);
      discretize0.globalInfo();
      discretize0.getUseBinNumbers();
      boolean boolean0 = discretize0.getInvertSelection();
      assertTrue(discretize0.getUseEqualFrequency());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":,!WwQ0'/}Na!@1$f");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":,!WwQ0'/}Na!@1$f");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1365738102117087
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize("9-$IrjNyh|xBVZlh");
      discretize0.setFindNumBins(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Hl?]nfdU");
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Function<Object, Object> function0 = Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function0);
      function0.compose((Function<? super Object, ?>) unaryOperator0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Object object0 = new Object();
      properties0.computeIfAbsent(object0, function0);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.findNumBinsTipText();
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize("9-$IrjNyh|xBVZlh");
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[17];
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      protectedProperties3.propertyNames();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties7);
      Function.identity();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties6);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(properties0);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties16 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties0);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties9);
      protectedProperties10.keys();
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties15);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties20 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties3);
      Discretize discretize0 = new Discretize("q}I+e");
      discretize0.getIgnoreClass();
      DenseInstance denseInstance0 = new DenseInstance(1737);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "All";
      stringArray0[1] = "All";
      stringArray0[3] = "";
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      discretize0.getFindNumBins();
      discretize0.binsTipText();
      discretize0.setAttributeIndices(";&5");
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "return result;");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`m4jlVhWh-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("o+&vh a$");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "return result;");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2147483645;
      doubleArray1[1] = 5.3;
      doubleArray1[2] = (double) 2147483645;
      doubleArray1[3] = (double) 2147483645;
      doubleArray1[4] = (double) 2147483645;
      doubleArray1[5] = (double) 2147483645;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 5.3;
      doubleArray2[1] = 5.3;
      doubleArray2[2] = (double) 2147483645;
      doubleArray2[3] = 5.3;
      doubleArray2[4] = (double) 2147483645;
      doubleArray2[5] = 5.3;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 5.3;
      doubleArray3[1] = 5.3;
      doubleArray3[2] = 5.3;
      doubleArray3[3] = 5.3;
      doubleArray3[4] = (double) 2147483645;
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = 5.3;
      doubleArray3[7] = (double) 2147483645;
      doubleArray3[8] = 5.3;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = 5.3;
      doubleArray4[4] = 5.3;
      doubleArray4[5] = (-1.0);
      doubleArray4[6] = 5.3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 5.3;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = 5.3;
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 5.3;
      doubleArray5[5] = (double) 2147483645;
      doubleArray5[6] = (-1.0);
      doubleArray5[7] = (double) 2147483645;
      doubleArray5[8] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 5.3;
      doubleArray6[1] = (-1143.2501663652838);
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = (double) 2147483645;
      doubleArray6[4] = (-1.0);
      doubleArray6[5] = (double) 2147483645;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = discretize0.binsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "&%}G.:P:");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      predicate3.or(predicate2);
      predicate1.negate();
      predicate0.or(predicate4);
      arrayList0.removeIf(predicate0);
      SystemInUtil.addInputLine("&%}G.:P:");
      arrayList0.stream();
      Instances instances0 = new Instances("&%}G.:P:", arrayList0, 200);
      Attribute attribute0 = new Attribute((String) null);
      arrayList0.add(attribute0);
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = instances0.resample(mockRandom0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances1.sort(comparator0);
      arrayList1.add(attribute0);
      instances1.deleteStringAttributes();
      Discretize discretize0 = new Discretize();
      discretize0.getUseEqualFrequency();
      discretize0.getIgnoreClass();
      Filter.makeCopy(discretize0);
      try { 
        Filter.useFilter(instances1, discretize0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize("U]OBE");
      int[] intArray0 = new int[17];
      discretize0.setAttributeIndicesArray(intArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      Function<Object, Object> function0 = Function.identity();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      Enumeration<Object> enumeration0 = protectedProperties7.elements();
      Properties properties1 = new Properties();
      properties1.keys();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      properties0.clear();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties0);
      protectedProperties10.computeIfAbsent(enumeration0, function0);
      Discretize discretize0 = new Discretize("-M");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ")H'~5M)H-0RKxm,`+");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      Function.identity();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      Properties properties1 = new Properties();
      protectedProperties5.keys();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties1);
      Properties properties2 = new Properties();
      properties0.clear();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties0);
      Discretize discretize0 = new Discretize("!2nab}VMUN!dITAH");
      // Undeclared exception!
      try { 
        discretize0.findNumBins(82);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attribute.typeToString(82);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[8];
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "/6%'EKhG~`3`t-' !d";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // null
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Function.identity();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      protectedProperties4.elements();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$o+ kTCFQ|N1fc?xT$5");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Discretize discretize0 = new Discretize("ygGssuU#x#\"O");
      discretize0.getCutPoints(44);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties1);
      Function.identity();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties0);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties14 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties0);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties8);
      protectedProperties9.keys();
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties13);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties18 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties14);
      ProtectedProperties protectedProperties22 = new ProtectedProperties(protectedProperties14);
      Properties properties6 = new Properties();
      Properties properties7 = new Properties();
      Properties properties8 = new Properties();
      ProtectedProperties protectedProperties23 = new ProtectedProperties(protectedProperties16);
      Discretize discretize0 = new Discretize("p2A:");
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(6, stringArray0.length);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.6195259631210703
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      Function.identity();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      properties1.keys();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      properties0.clear();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties0);
      Discretize discretize0 = new Discretize("-M");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-M";
      stringArray0[1] = "-M";
      stringArray0[2] = "-M";
      stringArray0[3] = "-M";
      stringArray0[4] = "-M";
      stringArray0[5] = "-M";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // For input string: \"-M\"
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("Class is nominal:");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1287));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Discretize discretize0 = new Discretize("9-$IrjNyh|xBVZlV3");
      discretize0.getFindNumBins();
      discretize0.m_MakeBinary = false;
      discretize0.setFindNumBins(false);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(943);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RZ";
      stringArray0[1] = "d&OE+E+F[TG'%mzF_.";
      stringArray0[2] = "$o+ kTCFQ|N1fc?xT$5";
      stringArray0[3] = "\"";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[4] = "bxz_C@/?>CLD";
      discretize0.setBins((-2073432485));
      assertEquals((-2073432485), discretize0.getBins());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      int int0 = (-3837);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-3837));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SystemInUtil.addInputLine("    return result;\n");
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      protectedProperties1.elements();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("-F", "-F", protectedProperties3);
      Discretize discretize1 = new Discretize("");
      String[] stringArray0 = discretize1.getOptions();
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(4, stringArray0.length);
      assertEquals(10, discretize1.getBins());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "return result;");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4n?/}hmO5{HN_{F(");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 3902.2367655;
      doubleArray2[1] = (-651.83091457497);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1936.803985);
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.90401348012034
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Discretize discretize0 = new Discretize("$o+ kTCFQ|N1fc?xT$5");
      boolean boolean0 = true;
      discretize0.m_IgnoreClass = true;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1.0;
      discretize0.getOptions();
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = 2789.4868;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = 1.0;
      doubleArray5[5] = 858.3325392416206;
      doubleArray5[6] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      discretize1.m_CutPoints = doubleArray0;
      discretize0.getOptions();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.attributeIndicesTipText();
      discretize0.setDesiredWeightOfInstancesPerInterval(1.0);
      discretize0.setAttributeIndices("kZ*R+z");
      discretize0.getRevision();
      discretize0.getUseBinNumbers();
      discretize0.invertSelectionTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-219));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/S>9[ce~OJU\"J~:&w'");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";jBW~");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.0922396870462943
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = (-3006.0);
      discretize0.setFindNumBins(false);
      discretize0.setDesiredWeightOfInstancesPerInterval((-3006.0));
      discretize0.m_IgnoreClass = true;
      discretize0.getAttributeIndices();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertTrue(discretize0.getIgnoreClass());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties1);
      Function.identity();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      properties2.keys();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties0);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties14 = new ProtectedProperties(properties0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-6.78214234);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.makeBinaryTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      Function.identity();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties3);
      Properties properties2 = new Properties();
      properties1.clear();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties2);
      properties1.keys();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties16);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties17);
      Properties properties3 = new Properties();
      Discretize discretize0 = new Discretize("RZ)");
      discretize0.getIgnoreClass();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
