/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 11:38:28 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Random;
import java.util.Vector;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.GainRatioAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.AbstractClusterer;
import weka.clusterers.Cobweb;
import weka.clusterers.EM;
import weka.clusterers.FilteredClusterer;
import weka.clusterers.MakeDensityBasedClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.ManhattanDistance;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.Loader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1162719610653493
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      Classifier classifier0 = AbstractClassifier.makeCopy(costSensitiveClassifier0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      M5Rules m5Rules0 = new M5Rules();
      m5Rules0.toString();
      Evaluation.getGlobalInfo(classifier0);
      instances0.setRelationName("\nSynopsis for weka.classifiers.meta.CostSensitiveClassifier:\n\nA metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.");
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      testInstances0.setRelation("}u7S74a9}Wmp");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      evaluation0.truePositiveRate(1);
      evaluation0.weightedFMeasure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.weightedFalsePositiveRate();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.302138371740107
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      costSensitiveClassifier0.getCostMatrix();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      adaBoostM1_0.getTechnicalInformation();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".cost");
      Instances instances0 = testInstances0.generate("        if (i.attribute(j).isNominal())\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      adaBoostM1_0.setDebug(false);
      Float float0 = new Float(0.1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      adaBoostM1_0.buildClassifier(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.setPriors(instances0);
      evaluation0.KBInformation();
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      evaluation0.numFalseNegatives(1);
      MockRandom mockRandom0 = new MockRandom();
      SGDText sGDText0 = new SGDText();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      filteredClusterer0.getRevision();
      evaluation0.toSummaryString("        if (i.attribute(j).isNominal())\n", false);
      evaluation0.weightedAreaUnderROC();
      evaluation0.unweightedMicroFmeasure();
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4401129998715323
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumDate(22);
      filteredClusterer0.numberOfClusters();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.addNumericTrainClass((-2), 1136.82670735);
      instances0.setRelationName("getMeasure");
      evaluation0.kappa();
      int int0 = 2147483624;
      try { 
        CostMatrix.parseMatlab("enumerateMeasures");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7432021475812665
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      Attribute attribute0 = new Attribute(": i.3");
      Attribute attribute1 = new Attribute("Class complexity | order 0         ", instances0);
      double double0 = evaluation0.m_SumSqrErr;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_SumPriorEntropy = 5233.3;
      evaluation1.numTrueNegatives(2);
      double double1 = evaluation1.m_SumPriorAbsErr;
      double double2 = evaluation0.m_MinTarget;
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation2.recall(10000000);
      instances0.randomize((Random) null);
      evaluation1.precision((-4223));
      evaluation1.SFMeanPriorEntropy();
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0518080626449926
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      costSensitiveClassifier0.getCostMatrix();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      adaBoostM1_0.getTechnicalInformation();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".cost");
      Instances instances0 = testInstances0.generate("        if (i.attribute(j).isNominal())\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(0.1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.KBInformation();
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[7] = (-1);
      evaluation0.precision(1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.7910973452168695
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.weightedPrecision();
      evaluation0.numTrueNegatives(2851);
      Double double0 = new Double(404.143966);
      evaluation0.weightedRecall();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.matthewsCorrelationCoefficient((-2871));
      evaluation1.priorEntropy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.SFMeanPriorEntropy();
      evaluation1.toMatrixString();
      evaluation1.weightedTrueNegativeRate();
      evaluation1.meanPriorAbsoluteError();
      evaluation1.numFalseNegatives(4062);
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.falseNegativeRate(2851);
      evaluation1.confusionMatrix();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-2871));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.704505430979387
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      EM eM0 = new EM();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable3 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.getTechnicalInformation();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable4 = new NaiveBayesMultinomialUpdateable();
      XML xML0 = new XML();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) xML0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      instances0.removeIf(predicate3);
      XML xML1 = new XML();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.getDataSet();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.sizeOfPredictedRegions();
      evaluation1.priorEntropy();
      evaluation0.getClassPriors();
      evaluation0.SFMeanPriorEntropy();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.619092171136358
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      filteredClusterer0.numberOfClusters();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.addNumericTrainClass((-2), 1136.82670735);
      instances0.setRelationName("weka/core/Capabilities.props");
      evaluation0.numTrueNegatives(388);
      evaluation0.incorrect();
      Version.VERSION = ".bsi";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      capabilities0.disable(capabilities_Capability0);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("gct[DJug`", linkedList0);
      attribute0.enumerateValues();
      int int0 = 8;
      Attribute.typeToString(8);
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      linkedList0.add("integer");
      charArray0[1] = 'C';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1453244785), charArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.274959854446963
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LogitBoost logitBoost0 = new LogitBoost();
      instances0.deleteWithMissingClass();
      logitBoost0.getTechnicalInformation();
      logitBoost0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".gz";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".gz";
      stringArray0[4] = ")^FoeQ<3TLP$|P";
      stringArray0[6] = "@relation";
      stringArray0[7] = ".gz";
      stringArray0[8] = ".arff";
      Evaluation.main(stringArray0);
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      DatabaseLoader databaseLoader2 = new DatabaseLoader();
      databaseLoader2.getNextInstance(instances0);
      DatabaseLoader databaseLoader3 = new DatabaseLoader();
      databaseLoader0.getRevision();
      Evaluation.getGlobalInfo(logitBoost0);
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 5;
      evaluation0.numTruePositives(5);
      AdditiveRegression additiveRegression0 = new AdditiveRegression(logitBoost0);
      additiveRegression0.getOptions();
      RandomTree randomTree0 = new RandomTree();
      try { 
        Evaluation.evaluateModel((Classifier) randomTree0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.116298220359825
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      Classifier classifier0 = AbstractClassifier.makeCopy(sGDText0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Classifier classifier1 = AbstractClassifier.makeCopy(classifier0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      AbstractClassifier.makeCopies(classifier0, 130);
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      costMatrix0.toMatlab();
      adaBoostM1_0.getTechnicalInformation();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("[0.0]");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float((double) 130);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      adaBoostM1_0.buildClassifier(instances0);
      SGDText sGDText2 = new SGDText();
      Evaluation.getGlobalInfo(classifier1);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.SFSchemeEntropy();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      evaluation0.trueNegativeRate(0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9072718258385946
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      filteredClusterer0.numberOfClusters();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      instances0.setRelationName("weka/core/Capabilities.props");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation0.numTrueNegatives(388);
      evaluation0.incorrect();
      Version.VERSION = ".bsi";
      double[] doubleArray0 = new double[5];
      testInstances0.setNumNominal(388);
      doubleArray0[0] = (double) (-1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      capabilities0.disable(capabilities_Capability0);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      Object object0 = new Object();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, false);
      FileSystemHandling.createFolder(evoSuiteFile1);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.numFalseNegatives((-2587));
      MockRandom mockRandom0 = new MockRandom(388);
      instances0.randomize(mockRandom0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      // Undeclared exception!
      try { 
        evaluation1.precision((-782));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -782
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.714265403625768
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      EM eM0 = new EM();
      evaluation0.m_TotalCost = (double) (-2);
      Enumeration enumeration0 = new WordTokenizer();
      eM0.getCapabilities();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      adaBoostM1_0.getCapabilities();
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.priorEntropy();
      evaluation0.KBRelativeInformation();
      evaluation0.m_SumPredicted = (double) (-1);
      Double double1 = new Double((-1));
      evaluation0.relativeAbsoluteError();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.meanAbsoluteError();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1967);
      intArray0[2] = (-1);
      intArray0[3] = (-843);
      intArray0[4] = (-1);
      intArray0[5] = (-2);
      intArray0[6] = (-1967);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0, intArray0, 447);
      try { 
        principalComponents0.convertInstance(sparseInstance0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3700797315915763
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      filteredClusterer0.numberOfClusters();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.addNumericTrainClass((-2), 1136.82670735);
      instances0.setRelationName("weka/core/Capabilities.props");
      evaluation0.numTrueNegatives(388);
      evaluation0.incorrect();
      Version.VERSION = ".bsi";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      capabilities0.disable(capabilities_Capability0);
      doubleArray0[1] = (-1421.25636);
      doubleArray0[2] = (double) (-1);
      Object object0 = new Object();
      AllFilter allFilter0 = new AllFilter();
      filteredClusterer0.setFilter(allFilter0);
      evaluation0.incorrect();
      evaluation0.weightedTruePositiveRate();
      evaluation0.totalCost();
      evaluation0.areaUnderPRC((-1999));
      SGDText sGDText0 = new SGDText();
      evaluation0.toSummaryString("eVW%<z", true);
      evaluation0.relativeAbsoluteError();
      evaluation0.priorEntropy();
      evaluation0.weightedAreaUnderROC();
      evaluation0.confusionMatrix();
      evaluation0.pctCorrect();
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8243999440679433
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-117);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "s;}mRdY0\"GvpvQ-L3rw");
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (double) (byte)98;
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2017);
      evaluation0.trueNegativeRate(2639);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6128294358875013
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      NaiveBayesMultinomialUpdateable[] naiveBayesMultinomialUpdateableArray0 = new NaiveBayesMultinomialUpdateable[8];
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[0] = naiveBayesMultinomialUpdateable0;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[1] = naiveBayesMultinomialUpdateable1;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@data");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(1113.1959623);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.KBInformation();
      evaluation0.confusionMatrix();
      evaluation0.toMatrixString("alism");
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.getGlobalInfo(classificationViaRegression0);
      evaluation0.relativeAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.recall((-1143));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1143
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.607309844725243
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      filteredClusterer0.numberOfClusters();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      instances0.setRelationName("weka/core/Capabilities.props");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation0.numTrueNegatives(388);
      evaluation0.incorrect();
      Version.VERSION = ".bsi";
      double[] doubleArray0 = new double[5];
      testInstances0.setNumNominal(388);
      doubleArray0[0] = (double) (-1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      capabilities0.disable(capabilities_Capability0);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      Object object0 = new Object();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, false);
      FileSystemHandling.createFolder(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile2, false, false, false);
      AllFilter allFilter0 = new AllFilter();
      filteredClusterer0.setFilter(allFilter0);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.numTruePositives((-2));
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      AdditiveRegression additiveRegression0 = new AdditiveRegression((Classifier) null);
      // Undeclared exception!
      try { 
        additiveRegression0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.SingleClassifierEnhancer", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6332626255825566
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NaiveBayesMultinomialUpdateable[] naiveBayesMultinomialUpdateableArray0 = new NaiveBayesMultinomialUpdateable[8];
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[0] = naiveBayesMultinomialUpdateable0;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[1] = naiveBayesMultinomialUpdateable1;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[2] = naiveBayesMultinomialUpdateable2;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable3 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[3] = naiveBayesMultinomialUpdateable3;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable4 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[4] = naiveBayesMultinomialUpdateable4;
      naiveBayesMultinomialUpdateable4.getTechnicalInformation();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      evaluation0.toMatrixString();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.areaUnderROC(2277);
      evaluation0.trueNegativeRate(17);
      evaluation2.SFMeanPriorEntropy();
      evaluation0.unweightedMicroFmeasure();
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getDiscardPredictions();
      evaluation0.SFEntropyGain();
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      filteredClusterer0.numberOfClusters();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      evaluation0.SFEntropyGain();
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.440769675320202
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1639.392;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 1669.83993;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0);
      XML xML0 = new XML();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = (-914.2197771);
      evaluation0.rootRelativeSquaredError();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedTrueNegativeRate();
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.24674503299624
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      costSensitiveClassifier0.getCostMatrix();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      adaBoostM1_0.getTechnicalInformation();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".cost");
      Instances instances0 = testInstances0.generate("        if (i.attribute(j).isNominal())\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(0.1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      adaBoostM1_0.buildClassifier(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.setPriors(instances0);
      evaluation0.KBInformation();
      evaluation0.confusionMatrix();
      evaluation0.incorrect();
      evaluation0.weightedTruePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(2);
      evaluation0.toMatrixString();
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.375117265526805
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      costSensitiveClassifier1.setCostMatrix(costMatrix0);
      costSensitiveClassifier0.costMatrixSourceTipText();
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0);
      XML xML0 = new XML();
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.getDataSet();
      Object object0 = new Object();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumSqrPredicted;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation0.m_SumSqrClass;
      double double3 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation1.SFMeanEntropyGain();
      double double5 = evaluation1.weightedFMeasure();
      assertEquals(double5, double4, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("A,PJ~[#<8 SU\"/q", instances0, 7);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(4, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      Object object0 = new Object();
      Object object1 = new Object();
      M5Rules m5Rules0 = new M5Rules();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1392921128169875
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("A,PJE~[#<8 SU\"/q", instances0, 8);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      attribute0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("FK^e9", instances0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.numTrueNegatives(0);
      double double1 = evaluation0.m_SumPriorAbsErr;
      double double2 = evaluation0.m_MinTarget;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "|(zbSii#";
      stringArray0[1] = "qz_BYw+sK'I6OPw=x&";
      stringArray0[2] = "@end";
      Cobweb cobweb0 = new Cobweb();
      ListOptions listOptions0 = new ListOptions();
      ManhattanDistance manhattanDistance0 = new ManhattanDistance(instances0);
      evaluation0.equals((Object) null);
      double double3 = evaluation0.numTrueNegatives(1);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.5584644090267505
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      int int0 = (-5823);
      evaluation0.numTrueNegatives((-2));
      double double1 = evaluation1.m_SumPriorAbsErr;
      double double2 = evaluation0.m_MinTarget;
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.falsePositiveRate(2);
      evaluation1.toMatrixString();
      // Undeclared exception!
      try { 
        evaluation0.recall((-1362));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1362
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8030493800150764
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("A,PJE~[#<8 SU\"/q", instances0, 8);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      attribute0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("10@P,-t/y{GDa{a$");
      Attribute attribute2 = new Attribute("FK^e9", instances0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.numTrueNegatives(0);
      double double1 = evaluation0.m_SumPriorAbsErr;
      double double2 = evaluation0.m_MinTarget;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(1505);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation1.toMatrixString();
      evaluation0.recall(4);
      evaluation1.falseNegativeRate((-2413));
      evaluation0.confusionMatrix();
      DenseInstance denseInstance0 = new DenseInstance(4);
      evaluation0.falseNegativeRate((-2184));
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(3191, (char[]) null, (-1797));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.7429320949397646
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".bsi", linkedList0);
      evaluation1.m_ComplexityStatisticsAvailable = false;
      Attribute attribute1 = attribute0.copy(".arff");
      Attribute attribute2 = new Attribute("real", instances0);
      attribute1.addStringValue("date");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@attribute";
      Evaluation.main(stringArray0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.rootMeanSquaredError();
      evaluation0.numFalsePositives((-1));
      evaluation2.SFMeanEntropyGain();
      SGDText sGDText0 = new SGDText();
      Evaluation.getGlobalInfo(sGDText0);
      evaluation2.weightedFalseNegativeRate();
      evaluation2.toClassDetailsString("No traning file nd no test fil given.");
      evaluation2.m_TotalCoverage = (double) 2;
      evaluation1.SFMeanSchemeEntropy();
      evaluation2.setDiscardPredictions(true);
      evaluation0.KBRelativeInformation();
      double double0 = evaluation0.m_SumKBInfo;
      evaluation2.relativeAbsoluteError();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel(":Qj`~j3:/_74Kd&ILD", instances0, 0, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: :Qj`~j3:/_74Kd&ILD
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.05063069344301
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      filteredClusterer0.numberOfClusters();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.addNumericTrainClass((-2), 1136.82670735);
      instances0.setRelationName("weka/core/Capabilities.props");
      evaluation0.numTrueNegatives(391);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-1421.25636);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalsePositives(814);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation1.getHeader();
      evaluation0.addNumericTrainClass((-499.6), (-1.7976931348623157E308));
      evaluation0.weightedAreaUnderPRC();
      evaluation1.numTrueNegatives(814);
      evaluation0.addNumericTrainClass(0.95, 391);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toSummaryString(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DenseInstance denseInstance0 = new DenseInstance(1);
      assertEquals(1, denseInstance0.numAttributes());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6477603922203086
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      filteredClusterer0.numberOfClusters();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Evaluation.getGlobalInfo(randomCommittee0);
      instances0.setRelationName(" ");
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      testInstances0.setRelation("setNormalizeDocLength");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.truePositiveRate(1472);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1472
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5574502480119636
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(1669.83993, doubleArray0);
      XML xML0 = new XML();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.sizeOfPredictedRegions();
      RandomTree randomTree0 = new RandomTree();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) randomTree0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.7378484065884146
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      EM eM0 = new EM();
      evaluation0.m_TotalCost = (double) (-2);
      eM0.setMaxIterations(2227);
      eM0.listOptions();
      eM0.getCapabilities();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.makeOptionString(classificationViaRegression0, false);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      adaBoostM1_0.setWeightThreshold((-2));
      adaBoostM1_0.getCapabilities();
      evaluation0.matthewsCorrelationCoefficient((-1967));
      evaluation0.priorEntropy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.totalCost();
      SGDText sGDText0 = new SGDText();
      Evaluation.makeOptionString(sGDText0, false);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedTrueNegativeRate();
      evaluation0.meanPriorAbsoluteError();
      evaluation1.numFalseNegatives((-1));
      try { 
        Evaluation.evaluateModel("`/i`>|+2", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name `/i`>|+2.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      CostSensitiveClassifier costSensitiveClassifier1 = (CostSensitiveClassifier)AbstractClassifier.makeCopy(costSensitiveClassifier0);
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      costSensitiveClassifier0.getCostMatrix();
      Capabilities capabilities0 = new Capabilities(costSensitiveClassifier1);
      TestInstances.forCapabilities(capabilities0);
      AllFilter allFilter0 = new AllFilter();
      Capabilities capabilities1 = allFilter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      CostMatrix costMatrix0 = CostMatrix.parseMatlab("sM]");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6539853445982167
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGDText sGDText0 = new SGDText();
      Classifier classifier0 = AbstractClassifier.makeCopy(sGDText0);
      Classifier classifier1 = AbstractClassifier.makeCopy(sGDText0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      AbstractClassifier.makeCopy(classifier1);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      AbstractClassifier.makeCopies(classifier1, 130);
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      costMatrix0.toMatlab();
      adaBoostM1_0.getTechnicalInformation();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".cost");
      Instances instances0 = testInstances0.generate("setOutputProbsForSVM");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float((double) (-2));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText1 = new SGDText();
      Evaluation.getGlobalInfo(classifier0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.toClassDetailsString((String) null);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.SFSchemeEntropy();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.164400258041059
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("A,PJE~[#<8 SU\"/q", instances0, 9);
      attribute0.enumerateValues();
      instances0.deleteWithMissing(attribute0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      NaiveBayesMultinomialUpdateable[] naiveBayesMultinomialUpdateableArray0 = new NaiveBayesMultinomialUpdateable[8];
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[2] = naiveBayesMultinomialUpdateable0;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[1] = naiveBayesMultinomialUpdateable1;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[2] = naiveBayesMultinomialUpdateable2;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable3 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[3] = naiveBayesMultinomialUpdateable3;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable4 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[4] = naiveBayesMultinomialUpdateable4;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable5 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[5] = naiveBayesMultinomialUpdateable5;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable6 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[6] = naiveBayesMultinomialUpdateable6;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable7 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[7] = naiveBayesMultinomialUpdateable7;
      instances0.toArray(naiveBayesMultinomialUpdateableArray0);
      doubleArray0[2] = (double) 1;
      attribute0.toString();
      Evaluation.main((String[]) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      databaseLoader0.setPassword("A,PJE~[#<8 SU\"/q");
      AbstractClassifier.makeCopies(regressionByDiscretization0, 9);
      databaseLoader0.getNextInstance(instances0);
      databaseLoader0.getRevision();
      Evaluation.getGlobalInfo(regressionByDiscretization0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(30);
      MockRandom mockRandom0 = new MockRandom(0L);
      try { 
        evaluation0.crossValidateModel((Classifier) regressionByDiscretization0, instances0, 1, (Random) mockRandom0, (Object[]) regressionByDiscretization0.TAGS_ESTIMATOR);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.012384167921743
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[3];
      NaiveBayesMultinomialUpdateable[] naiveBayesMultinomialUpdateableArray0 = new NaiveBayesMultinomialUpdateable[10];
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[0] = naiveBayesMultinomialUpdateable0;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[1] = naiveBayesMultinomialUpdateable1;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[2] = naiveBayesMultinomialUpdateable2;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable3 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[3] = naiveBayesMultinomialUpdateable3;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable4 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[4] = naiveBayesMultinomialUpdateable4;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable5 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[5] = naiveBayesMultinomialUpdateable5;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable6 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[6] = naiveBayesMultinomialUpdateable6;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable7 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[7] = naiveBayesMultinomialUpdateable7;
      instances0.toArray(naiveBayesMultinomialUpdateableArray0);
      Evaluation.main((String[]) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      databaseLoader0.setPassword("A,PJE~[#<8 SU\"/q");
      AbstractClassifier.makeCopies(regressionByDiscretization0, 9);
      databaseLoader0.getNextInstance(instances0);
      Evaluation.getGlobalInfo(regressionByDiscretization0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      MockRandom mockRandom0 = new MockRandom(0L);
      try { 
        evaluation0.crossValidateModel((Classifier) regressionByDiscretization0, instances0, 18, (Random) mockRandom0, (Object[]) regressionByDiscretization0.TAGS_ESTIMATOR);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.5065631935424495
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute(".arff", instances0, 47);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(101, doubleArray0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.confusionMatrix();
      IBk iBk0 = new IBk();
      iBk0.getOptions();
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.priorEntropy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.totalCost();
      SGDText sGDText0 = new SGDText();
      double double1 = evaluation0.m_SumErr;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toClassDetailsString("integer");
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.KBRelativeInformation();
      Double double2 = new Double(2655.62316);
      evaluation1.relativeAbsoluteError();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.527998583897782
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      filteredClusterer0.numberOfClusters();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.addNumericTrainClass((-2), 1136.82670735);
      instances0.setRelationName("weka/core/Capabilities.props");
      evaluation0.numTrueNegatives(391);
      EM eM0 = new EM();
      Capabilities capabilities1 = eM0.getCapabilities();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      adaBoostM1_0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      Instances instances1 = new Instances(instances0);
      adaBoostM1_0.setUseResampling(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(213.3241270259037);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.coverageOfTestCasesByPredictedRegions();
      try { 
        evaluation2.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3299263370027337
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("A,PJE~[#<8 SU\"/q", instances0, 8);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      attribute0.toString();
      evaluation0.weightedPrecision();
      evaluation0.numTrueNegatives(4251);
      Double double0 = new Double(1);
      evaluation0.weightedRecall();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation1.fMeasure(4251);
      evaluation0.matthewsCorrelationCoefficient(3);
      J48 j48_0 = new J48();
      REPTree rEPTree0 = new REPTree();
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("A,PJ~[#<8 SU\"/q", instances0, 7);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      Object object1 = new Object();
      M5Rules m5Rules0 = new M5Rules();
      Object[] objectArray0 = new Object[7];
      attribute0.indexOfValue("Uses cut-off values for speeding up distance calculation, but suppresses also the calculation and output of the within cluster sum of squared errors/sum of distances.");
      objectArray0[0] = (Object) m5Rules0;
      objectArray0[1] = (Object) textDirectoryLoader0;
      objectArray0[2] = (Object) m5Rules0;
      objectArray0[3] = object0;
      Attribute attribute1 = attribute0.copy("preserve-order");
      m5Rules0.setUnpruned(false);
      objectArray0[4] = (Object) attribute1;
      objectArray0[5] = object1;
      objectArray0[3] = (Object) 2;
      String[] stringArray0 = new String[0];
      SparseInstance.main(stringArray0);
      double double0 = evaluation0.SFMeanEntropyGain();
      SGDText sGDText0 = new SGDText();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.090153739983312
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      instances0.deleteWithMissingClass();
      LogitBoost logitBoost0 = new LogitBoost();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", vector0, (-2));
      attribute0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      evaluation0.weightedPrecision();
      evaluation0.numTrueNegatives(0);
      Double double0 = new Double(Double.NaN);
      evaluation0.weightedRecall();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 121
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0911624176475474
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LogitBoost logitBoost0 = new LogitBoost();
      instances0.deleteWithMissingClass();
      logitBoost0.getTechnicalInformation();
      logitBoost0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EM eM0 = new EM();
      eM0.listOptions();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      adaBoostM1_0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1967));
      double double1 = evaluation0.priorEntropy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertNotEquals(double2, double0, 0.01);
      
      evaluation0.toMatrixString();
      double double3 = evaluation0.weightedTrueNegativeRate();
      double double4 = evaluation0.meanPriorAbsoluteError();
      assertNotEquals(double4, double1, 0.01);
      
      evaluation0.numFalseNegatives((-1967));
      double double5 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double5, double3, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2425.80503567;
      doubleArray0[2] = (-529.25621687133);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) (-1967);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 0.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.250880158816505
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom(101);
      Instances instances1 = instances0.resample(mockRandom0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 101;
      doubleArray0[1] = (double) 101;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(101, doubleArray0);
      instances1.add((Instance) binarySparseInstance0);
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      textDirectoryLoader0.getRevision();
      int int0 = (-1229);
      evaluation0.numTrueNegatives((-1126487641));
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.incorrect();
      evaluation2.weightedTruePositiveRate();
      Evaluation evaluation3 = null;
      try {
        evaluation3 = new Evaluation(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7573535905979605
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute(".arff", instances0, 47);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = instances0.resample(mockRandom0);
      Object object0 = new Object();
      M5Rules m5Rules0 = new M5Rules();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) adaBoostM1_0, instances1, objectArray0);
      m5Rules0.setDebug(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.avgCost();
      Evaluation.makeOptionString(adaBoostM1_0, true);
      Evaluation.makeOptionString(adaBoostM1_0, false);
      evaluation0.areaUnderROC(2);
      evaluation0.trueNegativeRate(0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6804121801066914
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable3 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable4 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable5 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable6 = new NaiveBayesMultinomialUpdateable();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = evaluation0.m_TotalCost;
      evaluation1.toMatrixString();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.numFalseNegatives(97);
      assertEquals(0.0, double2, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      SGDText sGDText0 = new SGDText();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      filteredClusterer0.getRevision();
      String string0 = evaluation1.toSummaryString(".bsi", false);
      assertEquals(".bsi\nTotal Number of Instances                0     \n", string0);
      
      evaluation1.weightedAreaUnderROC();
      double double3 = evaluation0.numFalsePositives(0);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1639.392;
      doubleArray0[2] = (double) 1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      doubleArray0[3] = 1669.83993;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0);
      XML xML0 = new XML();
      textDirectoryLoader0.getDataSet();
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "index");
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      String string1 = Evaluation.makeOptionString(costSensitiveClassifier0, false);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.593467574097195
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialUpdateable[] naiveBayesMultinomialUpdateableArray0 = new NaiveBayesMultinomialUpdateable[8];
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[0] = naiveBayesMultinomialUpdateable0;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[1] = naiveBayesMultinomialUpdateable1;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[6] = naiveBayesMultinomialUpdateable2;
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.SFMeanPriorEntropy();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      SGDText sGDText0 = new SGDText();
      evaluation0.toSummaryString("=== Confusion Matrix ===\n\n   <-- classified as\n", true);
      double double0 = evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.3074153952359477
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      Attribute attribute0 = new Attribute(".arff", instances0, 47);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.numTrueNegatives(2);
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      attribute0.enumerateValues();
      charArray0[1] = '>';
      charArray0[2] = '2';
      charArray0[3] = '2';
      Attribute.typeToString(3);
      evaluation0.num2ShortID(4, charArray0, 1);
      evaluation0.weightedAreaUnderPRC();
      // Undeclared exception!
      try { 
        instances0.swap(0, 101);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.2756769509335335
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute((String) null, instances0, 3);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.numTrueNegatives(4);
      attribute0.enumerateValues();
      Attribute.typeToString(3);
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'I';
      charArray0[2] = '2';
      charArray0[3] = '2';
      evaluation0.num2ShortID(47, charArray0, 498);
      evaluation0.weightedAreaUnderPRC();
      // Undeclared exception!
      try { 
        instances0.swap(110, (-2095));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 110, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9684535029015127
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      Evaluation evaluation1 = new Evaluation(instances0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("'5(", linkedList0);
      Attribute attribute1 = attribute0.copy("O3}&;YQAy{{Lo&C");
      attribute1.addRelation(instances0);
      Attribute attribute2 = new Attribute("@end", instances0);
      instances0.deleteWithMissing(attribute1);
      double double0 = evaluation0.weightedPrecision();
      double double1 = evaluation1.numTrueNegatives(480);
      double double2 = evaluation0.m_SumKBInfo;
      double double3 = evaluation0.weightedTruePositiveRate();
      assertEquals(double3, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.falsePositiveRate(488);
      evaluation0.toMatrixString();
      double double4 = evaluation2.recall(0);
      assertEquals(double4, double1, 0.01);
      
      evaluation2.falsePositiveRate(2);
      String string0 = evaluation1.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("@relation", instances0, (-628));
      instances0.deleteWithMissing(attribute0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = filteredClusterer0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      filteredClusterer0.numberOfClusters();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7774503447663808
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("@relation", instances0, (-628));
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[5];
      char char0 = '&';
      charArray0[1] = '&';
      charArray0[2] = '\"';
      charArray0[3] = '2';
      charArray0[4] = 'J';
      evaluation0.num2ShortID(1, charArray0, 0);
      double double0 = 3278.67381283;
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        instances0.swap(1, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.3261029578469845
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable3 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable4 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable5 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable6 = new NaiveBayesMultinomialUpdateable();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(1290);
      evaluation0.weightedTrueNegativeRate();
      evaluation1.meanPriorAbsoluteError();
      int int0 = 97;
      evaluation2.numFalseNegatives(388);
      MockRandom mockRandom0 = new MockRandom();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.542886676346678
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute(".arff", instances0, 47);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@end";
      stringArray0[2] = ".bsi";
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) classificationViaRegression0);
      Predicate<Object> predicate1 = predicate0.negate();
      instances0.removeIf(predicate1);
      stringArray0[0] = "relational";
      stringArray0[4] = "@attribute";
      stringArray0[5] = "string";
      Attribute.typeToString(101);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      REPTree rEPTree0 = new REPTree();
      predicate0.test(rEPTree0);
      predicate0.test(simpleLogistic0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 47;
      SparseInstance sparseInstance0 = new SparseInstance(41.349788, doubleArray0);
      evaluation0.rootRelativeSquaredError();
      SparseInstance.main(stringArray0);
      evaluation0.sizeOfPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 6, 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9426293920711806
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute(".arff", instances0, 8);
      evaluation0.weightedPrecision();
      instances0.setRelationName("listOptions");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(8);
      Evaluation.main((String[]) null);
      evaluation1.rootMeanSquaredError();
      double double0 = evaluation0.m_WithClass;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances1 = evaluation0.getHeader();
      evaluation1.addNumericTrainClass(0, 1);
      evaluation0.weightedAreaUnderPRC();
      evaluation1.falseNegativeRate(124);
      LWL lWL0 = new LWL();
      instances1.setClass(attribute0);
      evaluation0.recall(0);
      evaluation0.falsePositiveRate(0);
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.91684035797633
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".bsi", linkedList0);
      attribute0.copy(".arff");
      Attribute attribute1 = new Attribute("real", instances0);
      instances0.deleteWithMissing(attribute1);
      evaluation0.weightedPrecision();
      textDirectoryLoader0.getRevision();
      evaluation0.numTrueNegatives((-1126487641));
      evaluation0.incorrect();
      double double0 = evaluation1.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.falsePositiveRate(300);
      String string0 = evaluation2.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      double double2 = evaluation0.recall(3);
      assertEquals(0.0, double2, 0.01);
      
      evaluation1.falsePositiveRate(1);
      evaluation1.incorrect();
      double double3 = evaluation2.errorRate();
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7659767920186922
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      costSensitiveClassifier0.getCostMatrix();
      Capabilities capabilities0 = new Capabilities(costSensitiveClassifier0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.unclassified();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("A,PJ~[#<8 SU\"/q", instances0, 7);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(0, charArray0, 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".cost");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "setMinBucketSize");
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      costSensitiveClassifier0.getCostMatrix();
      try { 
        Evaluation.handleCostOption(".cost", 1014);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"setMinBucketSize\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.5309476240015067
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      EM eM0 = new EM();
      AbstractClusterer.runClusterer(eM0, testInstances0.DEFAULT_WORDS);
      eM0.getCapabilities();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate(".arff");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(2136.1705);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.coverageOfTestCasesByPredictedRegions();
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6790885185997673
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("A,PJE~[#<8 SU\"/q", instances0, 34);
      instances0.deleteWithMissing(attribute0);
      String[] stringArray0 = new String[0];
      Attribute.main(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      Attribute attribute1 = attribute0.copy("@data");
      instances0.deleteWithMissing(attribute1);
      evaluation0.weightedPrecision();
      evaluation0.numTrueNegatives(1);
      evaluation0.incorrect();
      String[] stringArray1 = new String[5];
      stringArray1[0] = "relational";
      Evaluation.main(stringArray1);
      evaluation0.weightedTruePositiveRate();
      double double0 = evaluation0.m_Correct;
      evaluation0.weightedMatthewsCorrelation();
      try { 
        evaluation0.updateStatsForPredictor(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.7457321053405943
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable3 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable4 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable5 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable6 = new NaiveBayesMultinomialUpdateable();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation2.SFMeanPriorEntropy();
      evaluation2.toMatrixString();
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation1.numFalseNegatives(97);
      assertEquals(0.0, double1, 0.01);
      
      MockRandom mockRandom0 = new MockRandom((-931L));
      instances0.randomize(mockRandom0);
      Evaluation evaluation3 = new Evaluation(instances0);
      double double2 = evaluation3.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.precision((-1));
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.rootMeanPriorSquaredError();
      assertNotEquals(double4, double3, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      AbstractClassifier.makeCopy((Classifier) null);
      SGD sGD0 = new SGD();
      sGD0.setDebug(false);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.weightedTruePositiveRate();
      evaluation0.totalCost();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) sGD0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7343996803791222
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.delete();
      double[] doubleArray0 = new double[10];
      evaluation0.weightedPrecision();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getCapabilities();
      EM eM0 = new EM();
      Capabilities capabilities0 = eM0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getOptions();
      Instances instances1 = testInstances0.generate("\nRegression\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(0.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.808934425404159
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      costSensitiveClassifier0.getCostMatrix();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      adaBoostM1_0.getTechnicalInformation();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".cost");
      Instances instances0 = testInstances0.generate("        if (i.attribute(j).isNominal())\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(0.1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      adaBoostM1_0.buildClassifier(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.setPriors(instances0);
      evaluation0.KBInformation();
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      double[] doubleArray1 = new double[0];
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = (-2);
      intArray0[7] = 2;
      intArray0[8] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.7, intArray0, (-2));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray1, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.3898287642188585
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      M5Rules m5Rules0 = new M5Rules();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.totalCost();
      evaluation0.areaUnderPRC((-2));
      SGDText sGDText0 = new SGDText();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        CostMatrix.parseMatlab("@relation");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.9799151714181009
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      String[] stringArray0 = additiveRegression0.getOptions();
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.2747123862506635
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 101;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[1] = (-21.850112629189887);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 101;
      doubleArray0[4] = (double) 101;
      doubleArray0[5] = (-1.0);
      Object object0 = new Object();
      Object object1 = new Object();
      M5Rules m5Rules0 = new M5Rules();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) m5Rules0, instances0, objectArray0);
      evaluation0.totalCost();
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9641701987169533
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("A,PJ~[#<8 SU\"/q", instances0, 7);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      adaBoostM1_0.getCapabilities();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      Capabilities capabilities0 = gainRatioAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      adaBoostM1_0.getTechnicalInformation();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Instances instances1 = testInstances0.generate("getRevision");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.numFalsePositives(7);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getDataSet();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation1.weightedFMeasure();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation1.weightedFMeasure();
      evaluation3.weightedFalseNegativeRate();
      evaluation2.weightedTrueNegativeRate();
      evaluation1.weightedFalsePositiveRate();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 101;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[1] = (-21.850112629189887);
      doubleArray0[3] = 0.0;
      doubleArray0[3] = (double) 101;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-1.0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      double double0 = evaluation0.m_TotalSizeOfRegions;
      double double1 = evaluation0.truePositiveRate(1448);
      double double2 = evaluation0.numFalseNegatives(101);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.numInstances();
      double double3 = evaluation0.numTrueNegatives(1448);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.06075971812573
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-117);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "s;}mRdY0\"GvpvQ-L3rw");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalseNegatives((byte)46);
      CoverTree coverTree0 = new CoverTree();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      evaluation0.m_NumClasses = (-1999);
      double double1 = evaluation0.recall((byte)98);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.3152097116596204
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 101;
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0);
      Evaluation.main((String[]) null);
      evaluation0.weightedTruePositiveRate();
      evaluation0.totalCost();
      evaluation0.areaUnderPRC(101);
      SGDText sGDText0 = new SGDText();
      // Undeclared exception!
      try { 
        evaluation0.setNumericPriorsFromBuffer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.290664210654739
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("A,PJE~[#<8 SU\"/q", instances0, 8);
      instances0.deleteWithMissing(attribute0);
      textDirectoryLoader0.setRetrieval(212);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 1;
      attribute0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("10@P,-t/y{GDa{a$", arrayList0);
      Attribute attribute2 = new Attribute("10@P,-t/y{GDa{a$");
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      evaluation0.weightedTruePositiveRate();
      sparseInstance0.toStringNoWeight(1);
      evaluation0.confusionMatrix();
      evaluation0.setDiscardPredictions(false);
      evaluation0.setPriors(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      attribute2.value(13);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, sparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.646238822650641
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute(".arff", instances0, 0);
      evaluation0.weightedPrecision();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@end";
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) classificationViaRegression0);
      Predicate<Object> predicate1 = predicate0.negate();
      instances0.removeIf(predicate1);
      stringArray0[3] = "relational";
      stringArray0[4] = "@attribute";
      stringArray0[5] = "string";
      Attribute.typeToString(101);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      REPTree rEPTree0 = new REPTree();
      predicate0.test(rEPTree0);
      predicate0.test(simpleLogistic0);
      evaluation0.rootRelativeSquaredError();
      SparseInstance.main(stringArray0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.SFMeanEntropyGain();
      SGDText sGDText0 = new SGDText();
      String string0 = Evaluation.getGlobalInfo(sGDText0);
      assertEquals("\nSynopsis for weka.classifiers.functions.SGDText:\n\nImplements stochastic gradient descent for learning a linear binary class SVM or binary class logistic regression on text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification.", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.160183314094027
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute(".arff", instances0, 47);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(2);
      EM eM0 = new EM();
      eM0.listOptions();
      eM0.getCapabilities();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      adaBoostM1_0.getCapabilities();
      double double0 = evaluation0.matthewsCorrelationCoefficient(1373);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.priorEntropy();
      double double1 = evaluation0.SFMeanPriorEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString();
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = evaluation1.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double3, 0.01);
      
      evaluation1.numFalseNegatives(3);
      double double4 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.293760185886937
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      Attribute attribute0 = new Attribute("10@P,-t/y{GDa{a$");
      Attribute attribute1 = new Attribute("FK^e9", instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "string";
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.meanAbsoluteError();
      evaluation0.setPriors(instances0);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      costSensitiveClassifier0.getCostMatrix();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".cost");
      Instances instances0 = testInstances0.generate("        if (i.attribute(j).isNominal())\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(0.1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, ".q]EAT=");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.587148170159149
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("A,PJ~[#<8 SU\"/q", instances0, 7);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(4, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      Object object0 = new Object();
      Object object1 = new Object();
      M5Rules m5Rules0 = new M5Rules();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) m5Rules0;
      objectArray0[1] = (Object) textDirectoryLoader0;
      objectArray0[2] = (Object) m5Rules0;
      objectArray0[3] = object0;
      m5Rules0.setUnpruned(false);
      objectArray0[4] = (Object) attribute0;
      objectArray0[5] = (Object) instances0;
      evaluation0.addNumericTrainClass(484.0728365, 2);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.numTrueNegatives(0);
      evaluation0.addNumericTrainClass(4, 0.3183098861837907);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toSummaryString(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DenseInstance denseInstance0 = new DenseInstance(0);
      assertEquals(1.0, denseInstance0.weight(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.3589674931888127
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("A,PJE~[#<8 SU\"/q", instances0, 8);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      attribute0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("10@P,-t/y{GDa{a$");
      Attribute attribute2 = new Attribute("@end", instances0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.numTrueNegatives(0);
      double double1 = evaluation0.m_SumPriorAbsErr;
      double double2 = evaluation0.m_MinTarget;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(1505);
      evaluation0.recall(4);
      evaluation1.falseNegativeRate((-2413));
      CostMatrix costMatrix0 = new CostMatrix(3);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      CostMatrix costMatrix2 = new CostMatrix(costMatrix1);
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix2);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.9291408988959424
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NaiveBayesMultinomialUpdateable[] naiveBayesMultinomialUpdateableArray0 = new NaiveBayesMultinomialUpdateable[8];
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[0] = naiveBayesMultinomialUpdateable0;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[1] = naiveBayesMultinomialUpdateable1;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[2] = naiveBayesMultinomialUpdateable2;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable3 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[3] = naiveBayesMultinomialUpdateable3;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable4 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[4] = naiveBayesMultinomialUpdateable4;
      naiveBayesMultinomialUpdateable4.getTechnicalInformation();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable5 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[5] = naiveBayesMultinomialUpdateable5;
      XML xML0 = new XML();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = (-1.0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.priorEntropy();
      double[] doubleArray0 = evaluation0.getClassPriors();
      Utils.SMALL = 0.75;
      GaussianProcesses.main((String[]) null);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      evaluation0.makeDistribution(Double.NaN);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance0, (-3668.641));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 101;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom(101);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SparseInstance sparseInstance0 = new SparseInstance((-597.3634), doubleArray0);
      IBk iBk0 = new IBk();
      iBk0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SGDText sGDText0 = new SGDText();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      String string0 = Evaluation.makeOptionString(randomSubSpace0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.802071862908527
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("A,PJE~[#<8 SU\"/q", instances0, 8);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      attribute0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("10@P,-t/y{GDa{a$");
      Attribute attribute2 = new Attribute("FK^e9", instances0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.numTrueNegatives(0);
      double double1 = evaluation0.m_SumPriorAbsErr;
      double double2 = evaluation0.m_MinTarget;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(1505);
      evaluation1.toMatrixString();
      evaluation0.recall(4);
      evaluation1.falseNegativeRate((-2413));
      evaluation0.confusionMatrix();
      DenseInstance denseInstance0 = new DenseInstance(4);
      try { 
        evaluation1.updatePriors(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.7043004996270583
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("A,PJE~[#<8 SU\"/q", instances0, 8);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      Attribute attribute1 = new Attribute("o_I}`~", instances0, 0);
      Attribute attribute2 = new Attribute("A,PJE~[#<8 SU\"/q", instances0);
      evaluation0.addNumericTrainClass(0, 0.5025783419278064);
      instances0.setRelationName("3ca>X'4P~k[~lQqT.:&");
      evaluation0.numTrueNegatives((-3951));
      evaluation0.incorrect();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.getCapabilities();
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = oneR0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      Version.MINOR = 475;
      capabilities0.disable(capabilities_Capability0);
      Object object0 = new Object();
      AllFilter allFilter0 = new AllFilter();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      filteredClusterer0.setFilter(allFilter0);
      evaluation0.incorrect();
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_MinTarget;
      evaluation0.areaUnderPRC(106);
      SGDText sGDText0 = new SGDText();
      String string0 = evaluation0.toSummaryString("real", false);
      assertEquals("real\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      assertEquals(0.0, evaluation0.incorrect(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.7094458197175146
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      Attribute attribute0 = new Attribute("@data", instances0, 101);
      Attribute attribute1 = new Attribute("integer", 101);
      // Undeclared exception!
      try { 
        evaluation0.addNumericTrainClass(1, 9.579643092458172);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 101
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGDText sGDText0 = new SGDText();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      filteredClusterer0.getClusterer();
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      AbstractClusterer.runClusterer(makeDensityBasedClusterer0, testInstances0.DEFAULT_WORDS);
      Capabilities capabilities0 = new Capabilities(sGDText0);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      AbstractClassifier.makeCopy(naiveBayesUpdateable0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation.handleCostOption((String) null, 715826972);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.5167557165322676
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      filteredClusterer0.numberOfClusters();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.numTrueNegatives(388);
      Version.VERSION = ".bsi";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      evaluation0.weightedAreaUnderPRC();
      EM eM0 = new EM();
      eM0.getCapabilities();
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, doubleArray0);
      try { 
        evaluation0.updateStatsForPredictor(6, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.7467959615815976
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      instances0.deleteStringAttributes();
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute(".arff", instances0, 47);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(2);
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      attribute0.enumerateValues();
      charArray0[1] = 'J';
      charArray0[2] = '2';
      charArray0[3] = '2';
      evaluation0.num2ShortID(4, charArray0, 1);
      Object object0 = new Object();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.truePositiveRate(0);
      evaluation0.SFPriorEntropy();
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      filteredClusterer0.numberOfClusters();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable3 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable3.getTechnicalInformation();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable4 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable5 = new NaiveBayesMultinomialUpdateable();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0615632381579823
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OneR oneR0 = new OneR();
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) oneR0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.OneR:
         // 
         // -B <minimum bucket size>
         // \tThe minimum number of objects in a bucket (default: 6).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.304373782114171
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      String string0 = Evaluation.getGlobalInfo(classificationViaRegression0);
      assertEquals("\nSynopsis for weka.classifiers.meta.ClassificationViaRegression:\n\nClass for doing classification using regression methods. Class is binarized and one regression model is built for each class value. For more information, see, for example\n\nE. Frank, Y. Wang, S. Inglis, G. Holmes, I.H. Witten (1998). Using model trees for classification. Machine Learning. 32(1):63-76.", string0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1239.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(1239.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(5.0, doubleArray0);
      Evaluation.main((String[]) null);
      double double0 = evaluation0.weightedTruePositiveRate();
      double double1 = evaluation0.totalCost();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.pctIncorrect();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("A,PJ~[#<8 SU\"/q", instances0, 7);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(4, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      Object object0 = new Object();
      Object object1 = new Object();
      M5Rules m5Rules0 = new M5Rules();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) m5Rules0;
      objectArray0[1] = (Object) textDirectoryLoader0;
      objectArray0[2] = (Object) m5Rules0;
      objectArray0[3] = object0;
      Attribute attribute1 = attribute0.copy("preserve-order");
      m5Rules0.setUnpruned(false);
      objectArray0[4] = (Object) attribute1;
      objectArray0[5] = object1;
      objectArray0[3] = (Object) 0.0;
      String[] stringArray0 = new String[0];
      SparseInstance.main(stringArray0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) m5Rules0, (Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.4058054002420066
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute("A,PJ~[#<8 SU\"/q", instances0, 7);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(4, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      Object object0 = new Object();
      Object object1 = new Object();
      M5Rules m5Rules0 = new M5Rules();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) m5Rules0;
      objectArray0[1] = (Object) textDirectoryLoader0;
      objectArray0[2] = (Object) m5Rules0;
      objectArray0[3] = object0;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.confusionMatrix();
      evaluation1.toMatrixString(".arff");
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
      
      String string0 = Evaluation.getGlobalInfo(m5Rules0);
      assertEquals("\nSynopsis for weka.classifiers.rules.M5Rules:\n\nGenerates a decision list for regression problems using separate-and-conquer. In each iteration it builds a model tree using M5 and makes the \"best\" leaf into a rule.\n\nFor more information see:\n\nGeoffrey Holmes, Mark Hall, Eibe Frank: Generating Rule Sets from Model Trees. In: Twelfth Australian Joint Conference on Artificial Intelligence, 1-12, 1999.\n\nRoss J. Quinlan: Learning with Continuous Classes. In: 5th Australian Joint Conference on Artificial Intelligence, Singapore, 343-348, 1992.\n\nY. Wang, I. H. Witten: Induction of model trees for predicting continuous classes. In: Poster papers of the 9th European Conference on Machine Learning, 1997.", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-1129649283));
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("zH?S`");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.364025150330775
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      Attribute attribute0 = new Attribute(".arff", instances0, 47);
      instances0.deleteWithMissing(attribute0);
      double double0 = evaluation0.weightedPrecision();
      double double1 = evaluation0.numTrueNegatives(2);
      assertEquals(0.0, double1, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      attribute0.enumerateValues();
      charArray0[1] = '>';
      charArray0[2] = '2';
      charArray0[3] = '2';
      Attribute.typeToString(3);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.SFMeanPriorEntropy();
      double double2 = evaluation0.meanAbsoluteError();
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 47;
      intArray0[3] = (int) '2';
      intArray0[4] = 101;
      intArray0[5] = 3;
      intArray0[6] = (int) '2';
      SparseInstance sparseInstance0 = new SparseInstance((-1.8813346479479658), doubleArray0, intArray0, 2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      binarySparseInstance0.dataset();
      evaluation1.setPriors(instances0);
      double double3 = evaluation1.priorEntropy();
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.3646123915234463
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NaiveBayesMultinomialUpdateable[] naiveBayesMultinomialUpdateableArray0 = new NaiveBayesMultinomialUpdateable[8];
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[0] = naiveBayesMultinomialUpdateable0;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[1] = naiveBayesMultinomialUpdateable1;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[2] = naiveBayesMultinomialUpdateable1;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable3 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[3] = naiveBayesMultinomialUpdateable3;
      naiveBayesMultinomialUpdateable3.getCapabilities();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable4 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[4] = naiveBayesMultinomialUpdateable4;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable5 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[5] = naiveBayesMultinomialUpdateable5;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable6 = new NaiveBayesMultinomialUpdateable();
      Evaluation evaluation0 = new Evaluation(instances0);
      SMOreg sMOreg0 = new SMOreg();
      SMOreg sMOreg1 = new SMOreg();
      SMOreg sMOreg2 = new SMOreg();
      SMOreg sMOreg3 = new SMOreg();
      Evaluation evaluation1 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LogitBoost logitBoost0 = new LogitBoost();
      instances0.deleteWithMissingClass();
      logitBoost0.getTechnicalInformation();
      logitBoost0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setPassword(")^FoeQ<3TLP$|P");
      logitBoost0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(Double.NaN);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.getRevision();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals("9101", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.78565733829864
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.useNoPriors();
      SGD sGD0 = new SGD();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Attribute attribute0 = new Attribute(".arff", 0);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      double double0 = evaluation0.m_Correct;
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".arff";
      stringArray0[2] = "relational";
      stringArray0[3] = "date";
      stringArray0[4] = "^~,q?P=n{1W";
      stringArray0[5] = ".bsi";
      stringArray0[6] = "integer";
      stringArray0[7] = "@attribute";
      Evaluation.main(stringArray0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.totalCost();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.6636604270238853
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-117);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "s;}mRdY0\"GvpvQ-L3rw");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getTokenizer");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.unweightedMicroFmeasure();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-2175), false, false);
      Evaluation.getGlobalInfo(simpleLogistic0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) simpleLogistic0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.m_TotalCost;
      double double1 = evaluation0.m_MinTarget;
      evaluation0.SFSchemeEntropy();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.SFMeanEntropyGain();
      SGDText sGDText0 = new SGDText();
      assertFalse(sGDText0.getOutputProbsForSVM());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[1];
      lWL0.setDebug(true);
      doubleArray0[0] = (double) 5;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-117);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation.main((String[]) null);
      try { 
        evaluation0.evaluateModelOnce((Classifier) lWL0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.2962664515510975
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".bsi", linkedList0);
      Attribute attribute1 = new Attribute("@relation", instances0);
      Attribute attribute2 = new Attribute("real", instances0);
      attribute1.addStringValue("date");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@attribute";
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.rootMeanSquaredError();
      double double0 = evaluation0.m_TotalCost;
      attribute2.indexOfValue("relational");
      SGDText sGDText0 = new SGDText();
      evaluation0.SFMeanSchemeEntropy();
      double double1 = evaluation0.m_MinTarget;
      evaluation0.SFSchemeEntropy();
      attribute0.isInRange(0);
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution((-2.4562336842));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.663223382961487
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NaiveBayesMultinomialUpdateable[] naiveBayesMultinomialUpdateableArray0 = new NaiveBayesMultinomialUpdateable[8];
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[0] = naiveBayesMultinomialUpdateable0;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[1] = naiveBayesMultinomialUpdateable1;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[2] = naiveBayesMultinomialUpdateable2;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable3 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[3] = naiveBayesMultinomialUpdateable3;
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable4 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[4] = naiveBayesMultinomialUpdateable4;
      naiveBayesMultinomialUpdateable4.getTechnicalInformation();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable5 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateableArray0[5] = naiveBayesMultinomialUpdateable5;
      XML xML0 = new XML();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation0.sizeOfPredictedRegions();
      evaluation0.priorEntropy();
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "getMeasure";
      filteredClusterer0.numberOfClusters();
      AbstractClusterer.runClusterer(filteredClusterer0, stringArray0);
      stringArray0[1] = ".+Bd!i4zeM:E$$X.";
      stringArray0[2] = "_SLGs7efi973h2m^dP";
      stringArray0[3] = "Q";
      AbstractClusterer.runClusterer(filteredClusterer0, stringArray0);
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      AbstractClassifier.makeCopy(naiveBayesUpdateable0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      try { 
        Evaluation.handleCostOption(".cost", 18);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-1421.25636);
      doubleArray0[4] = (-1421.25636);
      SparseInstance sparseInstance0 = new SparseInstance((-1421.25636), doubleArray0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setPassword("h!G}H7N{kObzf5");
      MatlabLoader matlabLoader0 = new MatlabLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrixSource();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      SMOreg[] sMOregArray0 = new SMOreg[6];
      SMOreg sMOreg0 = new SMOreg();
      sMOregArray0[0] = sMOreg0;
      SMOreg sMOreg1 = new SMOreg();
      sMOregArray0[1] = sMOreg1;
      SMOreg sMOreg2 = new SMOreg();
      sMOregArray0[2] = sMOreg2;
      SMOreg sMOreg3 = new SMOreg();
      sMOregArray0[3] = sMOreg3;
      SMOreg sMOreg4 = new SMOreg();
      sMOregArray0[4] = sMOreg4;
      SMOreg sMOreg5 = new SMOreg();
      sMOregArray0[5] = sMOreg5;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.898189124628255
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("A,PJE~[#<8 SU\"/q", instances0, 8);
      Evaluation evaluation0 = new Evaluation(instances0);
      attribute0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.numTrueNegatives((-2578));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      MockRandom mockRandom0 = new MockRandom(3194L);
      MockRandom mockRandom1 = new MockRandom(3383L);
      instances0.randomize(mockRandom1);
      double double1 = evaluation0.fMeasure(3248);
      assertNotEquals(double1, double0, 0.01);
      
      Evaluation.main((String[]) null);
      Cobweb cobweb0 = new Cobweb();
      ListOptions listOptions0 = new ListOptions();
      ManhattanDistance manhattanDistance0 = new ManhattanDistance(instances0);
      RandomTree randomTree0 = new RandomTree();
      evaluation1.equals(randomTree0);
      evaluation1.weightedAreaUnderROC();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      SGD sGD0 = new SGD();
      sGD0.setDebug(false);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      IBk iBk0 = new IBk(2);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      additiveRegression0.setDebug(true);
      String[] stringArray0 = additiveRegression0.getOptions();
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.9263548464292743
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("A,PJE~[#<8 SU\"/q", instances0, 9);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 1;
      attribute0.toString();
      doubleArray0[2] = (double) 1;
      attribute0.toString();
      evaluation0.numTrueNegatives(9);
      Evaluation.main((String[]) null);
      double double0 = evaluation0.m_SumPriorAbsErr;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Object object0 = new Object();
      M5Rules m5Rules0 = new M5Rules();
      try { 
        evaluation0.evaluateModel((Classifier) m5Rules0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.6339143429075027
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Capabilities capabilities0 = new Capabilities(filteredClusterer0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      M5Rules m5Rules0 = new M5Rules();
      Evaluation.getGlobalInfo(m5Rules0);
      evaluation0.addNumericTrainClass((-2), 1136.82670735);
      instances0.setRelationName("weka/core/Capabilities.props");
      Version.VERSION = ".bsi";
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      capabilities0.disable(capabilities_Capability0);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      Object object0 = new Object();
      AllFilter allFilter0 = new AllFilter();
      filteredClusterer0.setFilter(allFilter0);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.8744051180935033
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      Evaluation.handleCostOption("", 2147483624);
      evaluation0.weightedTruePositiveRate();
      evaluation0.totalCost();
      evaluation0.areaUnderPRC(4800);
      SGDText sGDText0 = new SGDText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".bsi";
      Evaluation.main(stringArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFMeasure();
      evaluation0.truePositiveRate((-2399));
      evaluation1.weightedFMeasure();
      try { 
        CostMatrix.parseMatlab("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      filteredClusterer0.numberOfClusters();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-1421.25636);
      Object object0 = new Object();
      AllFilter allFilter0 = new AllFilter();
      filteredClusterer0.setFilter(allFilter0);
      SGDText sGDText0 = new SGDText();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.323550641133326
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute(".bsi", linkedList0);
      attribute0.copy("@relation");
      Attribute attribute1 = new Attribute("real", instances0);
      int int0 = Evaluation.k_MarginResolution;
      attribute0.copy();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      SGDText sGDText0 = new SGDText();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.toClassDetailsString("numeric");
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.setDiscardPredictions(true);
      evaluation0.KBInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "date";
      stringArray0[1] = "de<#v?L:wSJT5v";
      stringArray0[2] = "@attribute";
      stringArray0[3] = "@end";
      MockRandom mockRandom0 = new MockRandom(0L);
      try { 
        evaluation0.crossValidateModel("real", instances0, 2, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: real
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.1589281151524835
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.getGlobalInfo(classificationViaRegression0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 5;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 2.0;
      objectArray0[1] = (Object) "\nSynopsis for weka.classifiers.meta.ClassificationViaRegression:\n\nClass for doing classification using regression methods. Class is binarized and one regression model is built for each class value. For more information, see, for example\n\nE. Frank, Y. Wang, S. Inglis, G. Holmes, I.H. Witten (1998). Using model trees for classification. Machine Learning. 32(1):63-76.";
      double double0 = evaluation0.m_Correct;
      SparseInstance sparseInstance2 = new SparseInstance((-2535.065964), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.7223567951771903
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable2 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable3 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable4 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable5 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable6 = new NaiveBayesMultinomialUpdateable();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(1290);
      evaluation2.toMatrixString();
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.areaUnderROC((-1));
      evaluation3.m_SumErr = Double.NaN;
      evaluation2.trueNegativeRate((-1));
      evaluation3.unweightedMacroFmeasure();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1290;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-2331.46);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = Double.NaN;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.0781386806181317
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute(".arff", 8);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      attribute0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      evaluation0.weightedPrecision();
      evaluation0.numTrueNegatives(45);
      Double double0 = new Double(4);
      double double1 = evaluation0.weightedRecall();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double2, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(3);
      instances0.randomize(mockRandom0);
      double double3 = evaluation0.m_MinTarget;
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.falsePositiveRate(536869760);
      String string0 = evaluation2.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      evaluation1.recall(536869760);
      instances0.randomize(mockRandom0);
      double double4 = evaluation1.weightedFalseNegativeRate();
      assertEquals(double4, double1, 0.01);
      
      double double5 = evaluation2.precision((-921));
      assertEquals(0.0, double5, 0.01);
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.4249437146702717
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      Attribute attribute0 = new Attribute("@data", instances0, 101);
      Attribute attribute1 = new Attribute("integer", 101);
      evaluation0.numTruePositives(3);
      evaluation0.numTruePositives(2);
      instances0.setRelationName("@attribute");
      evaluation0.trueNegativeRate(0);
      evaluation0.pctUnclassified();
      evaluation0.numTrueNegatives(3);
      evaluation0.incorrect();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities0 = multiScheme0.getCapabilities();
      capabilities0.disable(capabilities_Capability0);
      Object object0 = new Object();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      SMOreg sMOreg0 = new SMOreg();
      SMOreg sMOreg1 = new SMOreg();
      SMOreg sMOreg2 = new SMOreg();
      SMOreg sMOreg3 = new SMOreg();
      SMOreg sMOreg4 = new SMOreg();
      SMOreg sMOreg5 = new SMOreg();
      // Undeclared exception!
      try { 
        instances0.toArray((SMOreg[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.450181440026084
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Attribute attribute0 = new Attribute(".bsi", instances0, 7);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      attribute0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("reset", 0);
      Attribute attribute2 = new Attribute("relational");
      Evaluation.main((String[]) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.rootMeanSquaredError();
      evaluation0.KBMeanInformation();
      evaluation1.numFalsePositives((-197112209));
      evaluation0.SFMeanEntropyGain();
      SGDText sGDText0 = new SGDText();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LogitBoost logitBoost0 = new LogitBoost();
      Capabilities capabilities0 = logitBoost0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("beyond");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(0.0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) capabilities0);
      Predicate<Object> predicate1 = predicate0.negate();
      instances0.removeIf(predicate1);
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      try { 
        evaluation0.evaluateModel((Classifier) lWL0, instances1, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\tThe words to use in string attributes.";
      stringArray0[1] = "YmMBBM~}kLe+B";
      stringArray0[2] = "enumerateMeasures";
      stringArray0[3] = "kmy&S";
      stringArray0[4] = "";
      stringArray0[5] = "-=zfe fB!Az07RdfAM";
      try { 
        Evaluation.evaluateModel((Classifier) multiClassClassifierUpdateable0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.MultiClassClassifierUpdateable:
         // 
         // -M <num>
         // \tSets the method to use. Valid values are 0 (1-against-all),
         // \t1 (random codes), 2 (exhaustive code), and 3 (1-against-1). (default 0)
         // 
         // -R <num>
         // \tSets the multiplier when using random codes. (default 2.0)
         // -P
         // \tUse pairwise coupling (only has an effect for 1-against1)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.functions.Logistic)
         // 
         // Options specific to classifier weka.classifiers.functions.Logistic:
         // 
         // -D
         // \tTurn on debugging output.
         // -C
         // \tUse conjugate gradient descent rather than BFGS updates.
         // -R <ridge>
         // \tSet the ridge in the log-likelihood.
         // -M <number>
         // \tSet the maximum number of iterations (default -1, until convergence).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "setStopwords");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute(".arff", 8);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[0] = (double) 1;
      attribute0.enumerateValues();
      doubleArray0[2] = (double) 1;
      attribute0.toString();
      Attribute attribute1 = attribute0.copy("@data");
      instances0.deleteWithMissing(attribute1);
      double double0 = evaluation0.numFalsePositives(0);
      double double1 = evaluation0.numTrueNegatives(1);
      assertEquals(0.0, double1, 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      double double2 = evaluation0.m_TotalSizeOfRegions;
      double double3 = evaluation0.truePositiveRate(0);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      double double4 = evaluation0.m_SumSqrClass;
      assertEquals(double4, double3, 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.896362680170337
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("A,PJ~[#<8 SU\"/q", instances0, 7);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      evaluation0.useNoPriors();
      doubleArray0[0] = (double) 2;
      attribute0.toString();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute1 = new Attribute(":b\"Dl>Cj:", arrayList0);
      Attribute attribute2 = new Attribute(":b\"Dl>Cj:", 4);
      Attribute attribute3 = new Attribute("not-binary-atts", instances0);
      instances0.deleteWithMissing(attribute2);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.numTrueNegatives(7);
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation1.falsePositiveRate(102);
      evaluation1.toMatrixString();
      double double4 = evaluation1.recall(0);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation1.falseNegativeRate((-873));
      assertEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
