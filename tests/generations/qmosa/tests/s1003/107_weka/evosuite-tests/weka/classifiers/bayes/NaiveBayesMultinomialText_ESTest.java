/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 12:31:32 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.TopDownConstructor;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.unsupervised.attribute.ReplaceMissingValues;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9911606417980066
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      naiveBayesMultinomialText0.setPeriodicPruning(3);
      IBk iBk0 = new IBk();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumRelationalNominal(4);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "@relation");
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer((-15));
      testInstances0.setNumClasses(0);
      testInstances0.setNumDate(42);
      SystemInUtil.addInputLine((String) null);
      testInstances0.setClassIndex(2);
      mockRandom0.longs();
      Vote vote0 = new Vote();
      Capabilities capabilities1 = vote0.getCapabilities();
      testInstances0.setClassType(1);
      testInstances0.setNumRelationalDate(2);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances1.setNumNominalValues(1);
      vote0.toString();
      Instances instances1 = new Instances(instances0, 0, 1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      // Undeclared exception!
      try { 
        iBk0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.lazy.IBk", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.93504084661911
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemInUtil.addInputLine("--------------------------------------\n");
      Locale locale0 = Locale.ROOT;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("org.pentaho.packageManagement.manager");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      locale0.getUnicodeLocaleKeys();
      naiveBayesMultinomialText0.setUseStopList(true);
      SystemInUtil.addInputLine("3w,Ra1VP+'_ZPmADB");
      int[] intArray0 = new int[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.276475146589738
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SystemInUtil.addInputLine("--------------------------------------\n");
      Locale locale0 = Locale.UK;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      locale0.getUnicodeLocaleKeys();
      naiveBayesMultinomialText0.setUseStopList(true);
      SystemInUtil.addInputLine("3w,Ra1VP+'_ZPmADB");
      int[] intArray0 = new int[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 0);
      BinarySparseInstance binarySparseInstance1 = (BinarySparseInstance)binarySparseInstance0.copy();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(841.851471, intArray0, 0);
      BinarySparseInstance binarySparseInstance3 = (BinarySparseInstance)binarySparseInstance0.mergeInstance(binarySparseInstance2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      instances0.add((Instance) binarySparseInstance2);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BallNode ballNode0 = new BallNode((-2), 1, (-436));
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance3);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1116935755982733
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      testInstances1.generate(" ");
      TestInstances testInstances3 = new TestInstances();
      testInstances2.setNumRelationalString(1);
      testInstances0.setNumInstances(1585);
      double[] doubleArray0 = new double[8];
      testInstances3.toString();
      doubleArray0[0] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NEGATIVE_INFINITY, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      binarySparseInstance0.mergeInstance(sparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.getDebug();
      naiveBayesMultinomialText0.buildClassifier(instances0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1518617502191324
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.1949929592663598, doubleArray0);
      binarySparseInstance0.copy();
      int[] intArray0 = new int[8];
      intArray0[0] = (-436);
      intArray0[1] = (-301);
      intArray0[2] = (-436);
      intArray0[3] = (-436);
      intArray0[4] = (-301);
      intArray0[5] = (-301);
      intArray0[6] = (-436);
      intArray0[7] = (-436);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1744.43323), intArray0, (-3002));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.mergeInstance(binarySparseInstance1);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      instances0.add((Instance) binarySparseInstance1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BallNode ballNode0 = new BallNode(101, (-578), (-1384));
      naiveBayesMultinomialText0.toString();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't normalize array. Sum is NaN.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4440166906769987
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.m_stemmer = null;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      SparseInstance sparseInstance0 = new SparseInstance(35);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BallNode ballNode0 = new BallNode(1859, 35, 1859, sparseInstance1, 557.0);
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1823);
      KStar kStar0 = new KStar();
      AbstractClassifier.makeCopy(kStar0);
      doubleArray0[1] = 952.9075894;
      doubleArray0[3] = 557.0;
      doubleArray0[4] = 848.59741;
      doubleArray0[5] = 0.25;
      iBk0.pruneToK((Instances) null, doubleArray0, 1859);
      BallNode.calcPivot(ballNode0, ballNode0, (Instances) null);
      try { 
        naiveBayesMultinomialText1.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3834744755118558
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("", ".&h/W80VN2&:;'t");
      mockFile0.delete();
      MockFile mockFile1 = new MockFile(mockFile0, "\tThe tokenizing algorihtm (classname plus parameters) to use.\n\t(default: ");
      mockFile0.getAbsolutePath();
      mockFile1.getCanonicalPath();
      naiveBayesMultinomialText0.setStopwords(mockFile1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.listOptions();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SystemInUtil.addInputLine("");
      MockFile mockFile0 = new MockFile("");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.getTokenizer();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      assertEquals("", file0.toString());
      
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
      
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("J=~_/:}Edg@Pv.");
      double[] doubleArray0 = new double[0];
      String string1 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string1);
      
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.043250449897999
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "0@0G5";
      stringArray0[3] = "0@0G5";
      stringArray0[4] = "";
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk();
      naiveBayesMultinomialText0.setPeriodicPruning(10000);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "0@0G5";
      stringArray0[3] = "0@0G5";
      stringArray0[4] = "";
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.listOptions();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3678696163082362
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IBk iBk0 = new IBk();
      Capabilities capabilities0 = iBk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumRelationalNominal(4);
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer((-15));
      testInstances0.setNumDate(42);
      testInstances0.setClassIndex(2);
      mockRandom0.longs();
      Vote vote0 = new Vote();
      Capabilities capabilities1 = vote0.getCapabilities();
      testInstances0.setNumRelationalDate(2);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances1.setNumNominalValues(1);
      testInstances1.generate();
      double double0 = naiveBayesMultinomialText0.m_lnorm;
      naiveBayesMultinomialText0.buildClassifier(instances0);
      TestInstances testInstances2 = new TestInstances();
      testInstances1.setClassType(1);
      SystemInUtil.addInputLine(" ");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities1.disableDependency(capabilities_Capability0);
      testInstances1.setNumInstancesRelational((-1));
      testInstances0.setSeed((-2118));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Random.setNextRandom((-2));
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.562430499301773
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 98;
      naiveBayesMultinomialText0.m_t = 3.0;
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.m_stemmer = null;
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getStemmer();
      System.setCurrentTimeMillis(237L);
      naiveBayesMultinomialText0.normTipText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray0[1] = "The norm of the instances after normalization.";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getOptions();
      assertEquals(98, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3678696163082362
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(3);
      IBk iBk0 = new IBk();
      Capabilities capabilities0 = iBk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.setNumRelationalNominal(4);
      MockRandom mockRandom0 = new MockRandom();
      Integer integer0 = new Integer((-15));
      testInstances0.setNumDate(42);
      testInstances0.setClassIndex(2);
      mockRandom0.longs();
      Vote vote0 = new Vote();
      Capabilities capabilities1 = vote0.getCapabilities();
      testInstances0.setNumRelationalDate(2);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances1.setNumNominalValues(1);
      testInstances1.generate();
      double double0 = naiveBayesMultinomialText0.m_lnorm;
      naiveBayesMultinomialText0.buildClassifier(instances0);
      TestInstances testInstances2 = new TestInstances();
      testInstances1.setClassType(1);
      SystemInUtil.addInputLine(" ");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities1.disableDependency(capabilities_Capability0);
      testInstances1.setNumInstancesRelational((-1));
      testInstances0.setSeed((-2118));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Random.setNextRandom((-2));
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8371883744618214
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemInUtil.addInputLine("--------------------------------------\n");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.getUseStopList();
      Locale locale0 = Locale.KOREA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      BallTree ballTree0 = new BallTree(instances0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BallNode ballNode0 = new BallNode(1, 4554, 0);
      assertEquals(0, ballNode0.m_NodeNumber);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.007249518178125
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SystemInUtil.addInputLine("--------------------------------------\n");
      Locale locale0 = Locale.ROOT;
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3830.8726518434078, doubleArray0);
      binarySparseInstance0.copy();
      int[] intArray0 = new int[9];
      intArray0[0] = (-301);
      intArray0[1] = (-301);
      intArray0[2] = (-301);
      intArray0[3] = (-436);
      intArray0[4] = (-301);
      intArray0[5] = (-436);
      intArray0[6] = (-301);
      intArray0[7] = (-301);
      intArray0[8] = (-301);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-436), intArray0, (-436));
      binarySparseInstance1.mergeInstance(binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      DenseInstance denseInstance0 = new DenseInstance(1980);
      instances0.add((Instance) denseInstance0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BallNode ballNode0 = new BallNode((-436), (-2), 492);
      String string0 = naiveBayesMultinomialText0.toString();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t9.0\nclass2\t4.0\nclass3\t7.0\nclass4\t4.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\nover\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\nthe\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nThe\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\nquick\t7.38905609893065\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\nlazy\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\njumps\t20.085536923187668\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nbrown\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\ndog\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\nfox\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\n", string0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.973278742811256
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      naiveBayesMultinomialText0.m_leplace = (-104.22);
      naiveBayesMultinomialText0.getRevision();
      Locale locale0 = Locale.ROOT;
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale1 = Locale.ROOT;
      locale1.getUnicodeLocaleAttributes();
      locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>(arrayList0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      naiveBayesMultinomialText0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray0);
      instances0.add((Instance) denseInstance0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3594694587458074
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.1949929592663598, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[2] = (-436);
      binarySparseInstance0.s_numericAfterDecimalPoint = binarySparseInstance0.s_numericAfterDecimalPoint;
      intArray0[5] = (-436);
      intArray0[6] = (-436);
      binarySparseInstance0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-436), intArray0, 0);
      Instance instance0 = binarySparseInstance1.mergeInstance(binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getCapabilities();
      AbstractInstance.s_numericAfterDecimalPoint = (-436);
      binarySparseInstance1.setWeight((-436));
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.add(instance0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BallNode ballNode0 = new BallNode((-1), 290, (-436));
      // Undeclared exception!
      try { 
        binarySparseInstance1.toString((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1451239539103937
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.1949929592663598, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[1] = (-301);
      intArray0[2] = (-436);
      binarySparseInstance0.s_numericAfterDecimalPoint = binarySparseInstance0.s_numericAfterDecimalPoint;
      intArray0[5] = (-436);
      intArray0[6] = (-436);
      binarySparseInstance0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-436), intArray0, 0);
      Instance instance0 = binarySparseInstance1.mergeInstance(binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      instances0.add(instance0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      BallNode ballNode0 = new BallNode((-1), 290, (-436));
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t10.0\nclass2\t4.0\nclass3\t7.0\nclass4\t4.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\nover\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\nthe\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nThe\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\nquick\t7.38905609893065\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\nlazy\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\njumps\t20.085536923187668\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nbrown\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\ndog\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\nfox\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\n", string0);
      
      double[] doubleArray1 = naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance1);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertArrayEquals(new double[] {0.4000000000000001, 0.16, 0.27999999999999997, 0.16}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7159474041737495
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.1949929592663598, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[2] = (-436);
      binarySparseInstance0.s_numericAfterDecimalPoint = binarySparseInstance0.s_numericAfterDecimalPoint;
      intArray0[5] = (-436);
      intArray0[6] = (-436);
      binarySparseInstance0.copy();
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-436));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2117.43144;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1485.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.setLNorm(0.0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-tokenizer");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.setMinWordFrequency((-216.0));
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.useStopListTipText();
      boolean boolean0 = naiveBayesMultinomialText0.getUseStopList();
      assertEquals((-216.0), naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SystemInUtil.addInputLine("a`Wg ;P'=jOP]_k");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.m_norm = 628.29;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNoClass(true);
      Instances instances0 = testInstances0.generate("hG3V\"<)");
      MockRandom mockRandom0 = new MockRandom();
      int int0 = (-1908);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2043.75903), doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      mockRandom0.longs(2L);
      testInstances0.setNumNominalValues((-1908));
      mockRandom0.nextGaussian();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.056276412027225
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SystemInUtil.addInputLine("a`Wg ;P'=jOP]_k");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_normalize = true;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("hG3V\"<&");
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances1.generate(".bsi");
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      TestInstances testInstances2 = new TestInstances();
      testInstances2.setNumNominalValues((-2846));
      mockRandom0.nextGaussian();
      instances0.listIterator();
      testInstances0.getWords();
      instances1.resample(mockRandom0);
      testInstances0.getWords();
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.listOptions();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      naiveBayesMultinomialText0.getOptions();
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.1949929592663598, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[1] = (-301);
      intArray0[2] = (-436);
      SystemInUtil.addInputLine("w24}p*z?xAq9");
      binarySparseInstance0.s_numericAfterDecimalPoint = (-436);
      intArray0[5] = (-436);
      intArray0[6] = (-436);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-436), intArray0, 0);
      binarySparseInstance0.mergeInstance(binarySparseInstance1);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getCapabilities();
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.827012830343834
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      IBk iBk0 = new IBk(1043);
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      naiveBayesMultinomialText0.m_leplace = (double) (-2);
      Instances instances0 = testInstances2.generate((String) null);
      testInstances0.clone();
      IBk iBk1 = new IBk(1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      Instances instances1 = iBk1.pruneToK(instances0, doubleArray0, 1);
      IBk iBk2 = new IBk(1043);
      Instances instances2 = iBk2.pruneToK(instances1, doubleArray0, (-1));
      naiveBayesMultinomialText0.buildClassifier(instances2);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) (-2);
      doubleArray1[3] = 5925.4799;
      Instances instances3 = iBk2.pruneToK(instances1, doubleArray1, (-1));
      naiveBayesMultinomialText0.buildClassifier(instances3);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      TopDownConstructor topDownConstructor1 = new TopDownConstructor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2010085742095744
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SystemInUtil.addInputLine("a`Wg ;P'=jOP]_k");
      SystemInUtil.addInputLine("The norm of the instances after normalization.");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = (-1);
      naiveBayesMultinomialText0.m_normalize = true;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("hG3V\"<)");
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      testInstances0.setNoClass(true);
      doubleArray0[1] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2043.75903), doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      mockRandom0.longs(2L);
      testInstances0.setNumNominalValues((-1908));
      mockRandom0.nextGaussian();
      instances0.listIterator();
      instances0.resample(mockRandom0);
      testInstances0.getWords();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3359415500803022
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      IBk iBk0 = new IBk((-1408));
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      naiveBayesMultinomialText0.setNorm((-2623.628772896));
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances2.generate(" * 43nX:jv{$iZQt}");
      testInstances1.clone();
      IBk iBk1 = new IBk(10000);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2762.18533;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) 2;
      iBk1.pruneToK(instances0, doubleArray0, (-1));
      naiveBayesMultinomialText0.buildClassifier(instances0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename(".bsi");
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) vector0, locale_FilteringMode0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.10893980259848
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      int int0 = 1028;
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (double) 1028;
      instances0.spliterator();
      TestInstances testInstances2 = new TestInstances();
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("t$", arrayList1, 1);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3287040933126466
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.getLNorm();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      WordTokenizer wordTokenizer1 = new WordTokenizer();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setLNorm(2.0);
      SparseInstance sparseInstance0 = new SparseInstance(35);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BallNode ballNode0 = new BallNode(1859, 35, 1859, sparseInstance1, 557.0);
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1823);
      doubleArray0[1] = 952.9075894;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 557.0;
      doubleArray0[4] = 848.59741;
      doubleArray0[5] = 0.25;
      iBk0.pruneToK((Instances) null, doubleArray0, 1859);
      BallNode.calcPivot(ballNode0, ballNode0, (Instances) null);
      BallNode ballNode1 = new BallNode(35, (-1287), (-2093));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText1.LNormTipText();
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4209.2883;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1438.93);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 4.5;
      doubleArray0[5] = 1190.5252;
      doubleArray0[6] = (-1891.5010379384769);
      doubleArray0[7] = 1190.5252;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.setDebug(false);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SystemInUtil.addInputLine("\tselection. Default=last column.\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-564.38981038896);
      SparseInstance sparseInstance0 = new SparseInstance((-1092.63823079), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance1);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.270548742910856
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      naiveBayesMultinomialText0.setLNorm((-13.634345301414545));
      naiveBayesMultinomialText0.getLNorm();
      assertEquals((-13.634345301414545), naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText1.getOptions();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      WordTokenizer wordTokenizer1 = new WordTokenizer();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText1.getNormalizeDocLength();
      double double0 = naiveBayesMultinomialText1.getNorm();
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0966454303041075
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      IBk iBk0 = new IBk(1024);
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances2.generate((String) null);
      TestInstances testInstances3 = new TestInstances();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-2);
      doubleArray1[1] = (double) 4;
      Instances instances1 = iBk0.pruneToK(instances0, doubleArray1, (-3));
      naiveBayesMultinomialText0.buildClassifier(instances1);
      Instances instances2 = iBk0.pruneToK(instances0, doubleArray0, (-2));
      naiveBayesMultinomialText0.buildClassifier(instances2);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      BallNode ballNode0 = new BallNode(9992, 1, 2205);
      Random.setNextRandom((-4701));
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
      
      Random.setNextRandom((-65));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The norm of the instances after normalization.");
      Random.setNextRandom(1);
      String string1 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string1);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6211272758470872
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SystemInUtil.addInputLine("--------------------------------------\n");
      Locale locale0 = Locale.ROOT;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      locale0.getUnicodeLocaleKeys();
      naiveBayesMultinomialText0.setUseStopList(true);
      int[] intArray0 = new int[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale1 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(arrayList0);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) set0, locale_FilteringMode1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)108;
      doubleArray0[1] = (double) (byte)108;
      doubleArray0[2] = 897.6941;
      doubleArray0[3] = (double) (byte)76;
      doubleArray0[4] = (double) (byte)101;
      doubleArray0[5] = (double) (byte)108;
      doubleArray0[6] = (double) (byte)59;
      doubleArray0[7] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      double[] doubleArray0 = new double[0];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.05, doubleArray0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      int[] intArray0 = new int[5];
      intArray0[0] = (-927);
      intArray0[1] = (-436);
      intArray0[2] = (-436);
      intArray0[3] = (-436);
      intArray0[4] = (-927);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(220.6452877, intArray0, 1929);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
      ReplaceMissingValues replaceMissingValues0 = new ReplaceMissingValues();
      // Undeclared exception!
      try { 
        replaceMissingValues0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.05, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-436);
      intArray0[1] = (-301);
      intArray0[2] = (-436);
      intArray0[3] = (-436);
      intArray0[4] = (-436);
      intArray0[5] = (-436);
      intArray0[6] = (-436);
      intArray0[7] = (-301);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-436), intArray0, (-436));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "\tNumber of folds for backfitting (default 0, no backfitting).";
      stringArray0[2] = "S%@[R9oY_U9}U^N;wq";
      stringArray0[3] = "l3m8";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "\tNumber of folds for backfitting (default 0, no backfitting).";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "S%@[R9oY_U9}U^N;wq";
      stringArray1[1] = "\tNumber of folds for backfitting (default 0, no backfitting).";
      stringArray1[2] = "";
      stringArray0[7] = "";
      stringArray1[4] = "S%@[R9oY_U9}U^N;wq";
      stringArray1[5] = ":/K>!gkYLy@6>!0&6=";
      stringArray1[6] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8730291164911113
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.1949929592663598, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[2] = (-436);
      binarySparseInstance0.s_numericAfterDecimalPoint = binarySparseInstance0.s_numericAfterDecimalPoint;
      intArray0[5] = (-436);
      intArray0[6] = (-436);
      BinarySparseInstance binarySparseInstance1 = (BinarySparseInstance)binarySparseInstance0.copy();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-436), intArray0, 0);
      binarySparseInstance2.mergeInstance(binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      binarySparseInstance2.setWeight((-436));
      BallNode ballNode0 = new BallNode((-1), 290, (-436));
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.setStopwords((File) null);
      naiveBayesMultinomialText0.getLowercaseTokens();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = false;
      naiveBayesMultinomialText0.pruneDictionary();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.setDebug(true);
      naiveBayesMultinomialText0.setPeriodicPruning((-1));
      naiveBayesMultinomialText0.setNorm((-4696.514503));
      naiveBayesMultinomialText0.m_periodicP = 0;
      naiveBayesMultinomialText0.m_tokenizer = null;
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.m_stopwords = null;
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, (String[]) null);
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText1.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.setNorm((-4696.514503));
      assertEquals((-4696.514503), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = false;
      naiveBayesMultinomialText0.pruneDictionary();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.setDebug(true);
      naiveBayesMultinomialText0.setPeriodicPruning((-1));
      naiveBayesMultinomialText0.setNorm((-4696.514503));
      naiveBayesMultinomialText0.m_tokenizer = null;
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.m_stopwords = null;
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, (String[]) null);
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText1.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.setNorm((-4696.514503));
      assertEquals((-1), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[17];
      byteArray0[3] = (byte)10;
      byteArray0[1] = (byte) (-113);
      byteArray0[4] = (byte)4;
      byteArray0[2] = (byte)42;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte)91;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      byteArray0[8] = (byte)1;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " ");
      testInstances0.generate(" ");
      TestInstances testInstances2 = new TestInstances();
      testInstances0.generate(".bsi");
      testInstances2.setNumRelationalNominal(3884);
      Integer integer0 = new Integer((-2));
      testInstances2.setNumDate((-1));
      testInstances0.getWords();
      testInstances0.setClassIndex((byte)94);
      testInstances0.setNumNominalValues((-1));
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      WordTokenizer wordTokenizer1 = new WordTokenizer();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.m_stopwords = null;
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(1.0, double0, 0.01);
      
      String string0 = naiveBayesMultinomialText0.getRevision();
      assertEquals("9122", string0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities1.setClassIndex("W5H kfj7ud");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("W5H kfj7ud");
      findWithCapabilities0.setFilename("");
      Vector<String> vector0 = findWithCapabilities1.getMatches();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) vector0, locale_FilteringMode0);
      findWithCapabilities0.setFilename("D'");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.getMatches();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) vector0, locale_FilteringMode0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Random.setNextRandom(100000);
      boolean boolean0 = naiveBayesMultinomialText0.getUseStopList();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(boolean0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)64;
      naiveBayesMultinomialText0.reset();
      byteArray0[0] = (byte)74;
      byteArray0[5] = (byte) (-94);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer((String) null);
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.tartarus.snowball.ext";
      stringArray0[1] = "org.tartarus.snowball.ext";
      SnowballStemmer.main(stringArray0);
      String string0 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string0);
      
      String string1 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string1);
      
      String string2 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string2);
      
      String string3 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string3);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm((-487.272940118));
      naiveBayesMultinomialText0.LNormTipText();
      assertEquals((-487.272940118), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SystemInUtil.addInputLine("w2V}p*z?xAq9");
      int[] intArray0 = new int[9];
      intArray0[0] = (-301);
      intArray0[1] = (-301);
      intArray0[2] = (-301);
      intArray0[3] = (-301);
      intArray0[4] = (-301);
      intArray0[5] = (-301);
      intArray0[6] = (-301);
      intArray0[7] = (-301);
      intArray0[8] = (-301);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-301));
      binarySparseInstance0.setValue(18, (double) (-301));
      binarySparseInstance0.setMissing(18);
      DenseInstance denseInstance0 = new DenseInstance(18);
      Instance instance0 = binarySparseInstance0.mergeInstance(denseInstance0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 18;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-436), doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.4002736463970304
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      nGramTokenizer0.getOptions();
      naiveBayesMultinomialText0.m_minWordP = 0.0;
      naiveBayesMultinomialText0.setTokenizer(nGramTokenizer0);
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      File file0 = MockFile.createTempFile("The stemming algorithm to use on the words.", "The stemming algorithm to use on the words.");
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals(0.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      double[] doubleArray0 = new double[0];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("Xu_.bZ.#s");
      findWithCapabilities0.getMatches();
      naiveBayesMultinomialText0.getStopwords();
      File file0 = serializedClassifier0.getModelFile();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "V]A[<U", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8353849917532665
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SystemInUtil.addInputLine("--------------------------------------\n");
      Locale locale0 = Locale.ROOT;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale1 = Locale.ROOT;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale2 = Locale.ROOT;
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale3 = Locale.ROOT;
      Set<String> set0 = locale2.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Integer integer0 = new Integer(3125);
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) integer0);
      arrayList1.removeIf(predicate0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) null, locale_FilteringMode1);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) list1, locale_FilteringMode2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      arrayList2.replaceAll(unaryOperator0);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      Locale locale4 = Locale.KOREA;
      Locale locale5 = Locale.GERMAN;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2, locale_FilteringMode3);
      Locale.getISOLanguages();
      Random.setNextRandom(3125);
      File file0 = MockFile.createTempFile("--------------------------------------\n", "VPJ");
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getStopwords();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale1 = Locale.ROOT;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale2 = Locale.ROOT;
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale locale3 = Locale.ROOT;
      Set<String> set0 = locale2.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) null, locale_FilteringMode1);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) list1, (Locale.FilteringMode) null);
      UnaryOperator.identity();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode3);
      Locale.filter((List<Locale.LanguageRange>) arrayList3, (Collection<Locale>) null, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) set0, locale_FilteringMode2);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>(arrayList1);
      arrayList1.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode4);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode5);
      Locale.getISOLanguages();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Random.setNextRandom(61);
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.1949929592663598, doubleArray0);
      SystemInUtil.addInputLine("3h%C*X]X~w&5xpv3");
      int[] intArray0 = new int[8];
      intArray0[1] = (-301);
      intArray0[2] = (-436);
      binarySparseInstance0.s_numericAfterDecimalPoint = (-436);
      intArray0[5] = (-436);
      intArray0[6] = (-436);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-436), intArray0, 0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "\tNumber of folds for backfitting (default 0, no backfitting).";
      stringArray0[2] = "S%@[R9oY_U9}U^N;wq";
      binarySparseInstance0.mergeInstance(binarySparseInstance1);
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, double0, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.631353359565896
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      
      naiveBayesMultinomialText0.m_periodicP = 0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-normalize";
      stringArray0[1] = "";
      stringArray0[2] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.m_periodicP = (-1270);
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SystemInUtil.addInputLine("a`Wg ;P'=jOP]_k");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("hG3V\"<)");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale1 = Locale.ROOT;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      arrayList1.replaceAll(unaryOperator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      Locale locale2 = new Locale("|z%tn!`o?G2)H7", "");
      locale1.getDisplayName();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) list0, locale_FilteringMode1);
      Locale.getISOLanguages();
      naiveBayesMultinomialText1.setOptions(stringArray0);
      Random.setNextRandom((-1));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.4267173502315558
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SystemInUtil.addInputLine("a`Wg ;P'=jOP]_k");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate("-sqopwds <fye");
      TestInstances testInstances2 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testInstances0.generate(".bsi");
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      testInstances2.setNumDate((-1));
      testInstances0.setClassIndex(36);
      mockRandom0.longs(399L);
      Locale locale0 = Locale.KOREA;
      locale0.getDisplayName();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.getISOLanguages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-lowercase";
      stringArray0[1] = "@data";
      stringArray0[2] = "@data";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Random.setNextRandom((-1));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.1949929592663598, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[1] = (-301);
      intArray0[2] = (-436);
      SystemInUtil.addInputLine("w24}p*z?xAq9");
      binarySparseInstance0.s_numericAfterDecimalPoint = (-436);
      intArray0[5] = (-436);
      intArray0[6] = (-436);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-436), intArray0, 0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "\tNumber of folds for backfitting (default 0, no backfitting).";
      stringArray0[2] = "S%@[R9oY_U9}U^N;wq";
      binarySparseInstance0.mergeInstance(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0, doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.05, doubleArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("Xu_.bZ.#s");
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) vector0, locale_FilteringMode0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-436);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMatches();
      Stemmer stemmer0 = naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.738840717855686
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "The epsilon for round-off error (shouldn't be changed).";
      stringArray0[1] = "S$";
      stringArray0[2] = "";
      stringArray0[3] = "\n\tRanking is the order that attributes were added, starting \n\twith no attributes. The merit scores in the left column\n\tare the goodness of the subset after the adding the\n\tcorresponding attribute in the right column to the subset.\n";
      stringArray0[4] = "-stoplist";
      stringArray0[5] = "    if (inst.numInstances() > 0) {\n";
      stringArray0[6] = "";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(12, stringArray1.length);
  }
}
