/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 13:21:56 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASSearch;
import weka.attributeSelection.BestFirst;
import weka.attributeSelection.GreedyStepwise;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGD;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.classifiers.trees.J48;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.filters.Filter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Environment.getSystemWide();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      protectedProperties6.keySet();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties3);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties4);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties8);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, linkedList0, 78);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (-1339.65);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("null >= NaN", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "| isResidual?";
      stringArray0[1] = "uvQnsN@l-_)";
      stringArray0[2] = "5Wm_;npX05*N&.";
      stringArray0[3] = "";
      jRip0.setOptions(stringArray0);
      jRip0.setSeed(0L);
      long long0 = jRip0.getSeed();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate0.and(predicate4);
      Predicate<Object> predicate8 = predicate4.negate();
      Predicate<Object> predicate9 = predicate4.and(predicate6);
      Predicate<Object> predicate10 = predicate9.and(predicate4);
      Predicate<Object> predicate11 = predicate10.and(predicate8);
      Predicate<Object> predicate12 = predicate2.or(predicate5);
      Predicate<Object> predicate13 = predicate10.negate();
      predicate12.negate();
      predicate7.or(predicate12);
      Predicate<Object> predicate14 = predicate4.or(predicate1);
      predicate14.or(predicate6);
      Predicate<Object> predicate15 = Predicate.isEqual((Object) predicate11);
      predicate15.or(predicate11);
      Predicate<Object> predicate16 = predicate1.and(predicate10);
      predicate13.test(predicate11);
      predicate12.or(predicate16);
      predicate9.and(predicate10);
      predicate15.and(predicate13);
      predicate6.negate();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-1380.77692));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 5);
      SparseInstance sparseInstance0 = new SparseInstance(5);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8720520186532996
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("%4k5", arrayList0, 8);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      AbstractClassifier.makeCopy(regressionByDiscretization0);
      JRip jRip0 = new JRip();
      BestFirst bestFirst0 = new BestFirst();
      bestFirst0.setStartSet("@relation");
      regressionByDiscretization0.getEstimatorType();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      GreedyStepwise greedyStepwise0 = new GreedyStepwise();
      greedyStepwise0.setNumToSelect(2);
      GreedyStepwise greedyStepwise1 = new GreedyStepwise();
      greedyStepwise1.getStartSet();
      boolean boolean0 = false;
      jRip0.setUsePruning(false);
      try { 
        jRip0.rulesetForOneClass(4.8, instances0, 117.0, (-0.25));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Environment environment0 = Environment.getSystemWide();
      environment0.addVariable(",q/'`RD", ",q/'`RD");
      environment0.addVariableSystemWide("Development of a stemming algorithm", "[a?B4\",j\"'0u");
      environment0.addVariable("mmPn", "p`LOs$#,v");
      environment0.getVariableNames();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      Instances instances0 = null;
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 2;
      intArray0[6] = 2;
      GreedyStepwise greedyStepwise0 = new GreedyStepwise();
      decisionTable0.m_search = (ASSearch) greedyStepwise0;
      intArray0[7] = 4;
      intArray0[8] = 2;
      greedyStepwise0.getStartSet();
      jRip0.setUsePruning(false);
      try { 
        jRip0.rulesetForOneClass(2, (Instances) null, 3, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(true);
      jRip0.setMinNo((-1953.3932562394773));
      String string0 = jRip0.globalInfo();
      jRip0.getMinNo();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2652);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute(string0);
      attribute0.equalsMsg("@end");
      binarySparseInstance1.isMissing(attribute0);
      binarySparseInstance1.getRevision();
      try { 
        jRip0.classifyInstance(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemInUtil.addInputLine("ly");
      Environment environment0 = Environment.getSystemWide();
      environment0.getVariableNames();
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      jRip0.setDebug(true);
      jRip0.getOptions();
      int int0 = jRip0.getOptimizations();
      assertTrue(jRip0.getDebug());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("%4k5", arrayList0, 8);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      JRip jRip0 = new JRip();
      KStar kStar0 = new KStar();
      SelectedTag selectedTag0 = regressionByDiscretization0.getEstimatorType();
      regressionByDiscretization0.setEstimatorType(selectedTag0);
      BestFirst bestFirst0 = new BestFirst();
      bestFirst0.setStartSet("@relation");
      SelectedTag selectedTag1 = regressionByDiscretization0.getEstimatorType();
      regressionByDiscretization0.setEstimatorType(selectedTag1);
      regressionByDiscretization1.setUseEqualFrequency(true);
      regressionByDiscretization0.setMinimizeAbsoluteError(true);
      Attribute attribute0 = new Attribute(".bsi", 1);
      Attribute attribute1 = attribute0.copy("\tWhether NOT check the error rate>=0.5\n\tin stopping c iteria \t(default: check)");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      DenseInstance denseInstance0 = new DenseInstance(13);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_NominalAntd0.maxInfoGain = (double) 1;
      System.setCurrentTimeMillis(0);
      Instances instances1 = new Instances("", arrayList0, 0);
      instances1.retainAll(instances0);
      instances1.add((Instance) denseInstance0);
      jRip_NominalAntd0.splitData(instances1, 1328.0, 2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(denseInstance0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("nE18jGZv#%gAac", arrayList0, 1843);
      J48 j48_0 = new J48();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = (RegressionByDiscretization)AbstractClassifier.makeCopy(regressionByDiscretization0);
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@relation", instances0, protectedProperties0);
      arrayList0.add(attribute0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) serializedClassifier0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      regressionByDiscretization1.setClassifier(naiveBayesMultinomial0);
      NaiveBayesMultinomial naiveBayesMultinomial1 = (NaiveBayesMultinomial)AbstractClassifier.makeCopy(naiveBayesMultinomial0);
      JRip jRip1 = new JRip();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) naiveBayesMultinomial1);
      predicate0.test(serializedClassifier1);
      Predicate<Object> predicate2 = predicate0.negate();
      arrayList0.clone();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      predicate0.or(predicate3);
      predicate1.and(predicate2);
      Attribute attribute1 = new Attribute(".bsi", instances0, 1843);
      predicate2.test(attribute1);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, false);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.563413311326071
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.test(arrayList0);
      Environment environment0 = Environment.getSystemWide();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%|Q{+u'AY+^i?B");
      environment0.getVariableNames();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.getSeed();
      jRip0.setOptions(stringArray0);
      assertEquals(11, stringArray0.length);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Twelfth International Conference on Machine Learning";
      stringArray0[1] = "No suitable converter found for '";
      stringArray0[2] = "\nGrowing and pruning Revision ...";
      stringArray0[3] = "%Tj)";
      stringArray0[4] = "-F";
      stringArray0[5] = "}S^-'OT";
      stringArray0[6] = "Should never happen: repDLin optmz. stage NaN or infinite!";
      stringArray0[7] = "This should never happen!";
      stringArray0[8] = "";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}S^-'OT\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BayesNet bayesNet2 = new BayesNet();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.setConsequent((-544.22747531));
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Environment.getSystemWide();
      Properties properties0 = new Properties();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.parallelStream();
      Instances instances0 = new Instances("", arrayList0, 350);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SGD sGD0 = new SGD();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      AbstractClassifier.makeCopy(serializedClassifier1);
      SerializedClassifier serializedClassifier2 = new SerializedClassifier();
      SerializedClassifier serializedClassifier3 = new SerializedClassifier();
      BestFirst bestFirst0 = new BestFirst();
      Vote vote0 = new Vote();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      cVParameterSelection1.getCVParameter(3);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      AbstractClassifier.runClassifier(serializedClassifier3, (String[]) null);
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      arrayList0.clear();
      jRip_RipperRule0.prune(instances0, true);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.parallelStream();
      Instances instances0 = new Instances((String) null, arrayList0, 30);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SGD sGD0 = new SGD();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      serializedClassifier1.getCurrentModel();
      AbstractClassifier.makeCopy((Classifier) null);
      SerializedClassifier serializedClassifier2 = new SerializedClassifier();
      AbstractClassifier.makeCopy(serializedClassifier1);
      BestFirst bestFirst0 = new BestFirst();
      Vote vote0 = new Vote();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.getCVParameter(1);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      AbstractClassifier.runClassifier(multilayerPerceptron0, (String[]) null);
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Utils.SMALL = (-1957.1393167613476);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      arrayList0.clear();
      jRip_RipperRule1.prune(instances0, true);
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.689067872995674
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("%4k5", arrayList0, 8);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = (RegressionByDiscretization)AbstractClassifier.makeCopy(regressionByDiscretization0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      regressionByDiscretization1.setClassifier(naiveBayesMultinomial0);
      AbstractClassifier.makeCopy(naiveBayesMultinomial0);
      JRip jRip0 = new JRip();
      BestFirst bestFirst0 = new BestFirst();
      bestFirst0.setStartSet("@relation");
      SelectedTag selectedTag0 = bestFirst0.getDirection();
      regressionByDiscretization0.setEstimatorType(selectedTag0);
      regressionByDiscretization0.setMinimizeAbsoluteError(true);
      String[] stringArray0 = new String[1];
      AbstractClassifier.runClassifier(regressionByDiscretization1, stringArray0);
      Attribute attribute0 = new Attribute("@data", instances0, 2);
      attribute0.addRelation(instances0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 3, 2);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 4;
      String string0 = jRip0.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      
      jRip_NominalAntd0.splitData(instances0, 2072.04, (-2071.0));
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemInUtil.addInputLine("");
      Environment.getSystemWide();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      Predicate<Object> predicate7 = predicate0.negate();
      predicate0.and(predicate2);
      predicate2.negate();
      predicate2.and(predicate6);
      Predicate<Object> predicate8 = predicate2.negate();
      predicate5.or(predicate2);
      predicate3.negate();
      Predicate.isEqual((Object) predicate5);
      predicate1.or(predicate8);
      predicate7.negate();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      try { 
        jRip1.rulesetForOneClass((-1402.925002998), (Instances) null, 2.147483647E9, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[3];
      intArray0[2] = 4156;
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(linkedList0);
      Instances instances0 = new Instances("gives", arrayList0, 4156);
      jRip0.setDebug(true);
      JRip jRip1 = new JRip();
      try { 
        jRip0.rulesetForOneClass(0, instances0, (-2962.0925828), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.parallelStream();
      Instances instances0 = new Instances((String) null, arrayList0, 30);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SGD sGD0 = new SGD();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      serializedClassifier1.getCurrentModel();
      AbstractClassifier.makeCopy((Classifier) null);
      SerializedClassifier serializedClassifier2 = new SerializedClassifier();
      Predicate.isEqual((Object) "entations");
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Environment environment0 = new Environment();
      environment0.addVariableSystemWide("entations", ".bsi");
      environment0.addVariable("ylhe\"=@&}I", "4a,ri+44");
      environment0.getVariableNames();
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList1 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList2 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(linkedList1);
      Attribute attribute0 = new Attribute("weka.classifiers.rules.JRip$RipperRule");
      linkedList1.add(attribute0);
      Instances instances0 = new Instances("weka.classifiers.rules.JRip$RipperRule", arrayList0, 8);
      J48 j48_0 = new J48();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      JRip jRip0 = new JRip();
      Attribute attribute1 = new Attribute("date", 1);
      attribute1.copy("relational");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      arrayList1.stream();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("integer", 0.05);
      arrayList1.add(locale_LanguageRange0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList3, locale_FilteringMode0);
      Attribute attribute2 = new Attribute("real", instances0, 0);
      attribute2.toString();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      RuleStats.partition(instances0, 1);
      ClassOrder classOrder0 = new ClassOrder();
      ClassOrder classOrder1 = new ClassOrder();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 2;
      intArray0[2] = 3;
      intArray0[3] = 11;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 2);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.nearestNeighbour(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("_2d!", list0, 1316);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      CoverTree coverTree0 = new CoverTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1882);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      try { 
        coverTree0.nearestNeighbour(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList1 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList2 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(linkedList1);
      Attribute attribute0 = new Attribute((String) null);
      linkedList1.add(attribute0);
      Instances instances0 = new Instances("weka.classifiers.rules.JRip$RipperRule", arrayList0, 8);
      J48 j48_0 = new J48();
      J48 j48_1 = new J48();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute1 = new Attribute("date", 1);
      attribute1.copy("relational");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList3.forEach(consumer0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("integer", 0.05);
      arrayList1.add(locale_LanguageRange0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList3, locale_FilteringMode0);
      Attribute attribute2 = new Attribute("real", instances0, 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 1.0000000000009153E10, 202.1936);
      ClassOrder classOrder0 = new ClassOrder();
      ClassOrder classOrder1 = new ClassOrder();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 4;
      intArray0[3] = 2;
      intArray0[5] = 3;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0, intArray0, 0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SystemInUtil.addInputLine("0K");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "0K");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate0.and(predicate3);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate3.and(predicate5);
      Predicate<Object> predicate9 = predicate8.and(predicate3);
      Predicate<Object> predicate10 = predicate9.and(predicate7);
      Predicate<Object> predicate11 = predicate2.or(predicate4);
      predicate10.and(predicate3);
      predicate0.and(predicate2);
      Predicate<Object> predicate12 = predicate9.negate();
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate12);
      Predicate<Object> predicate14 = predicate6.or(predicate11);
      predicate12.or(predicate14);
      predicate3.or(predicate1);
      predicate12.negate();
      Predicate<Object> predicate15 = predicate0.negate();
      predicate15.or(predicate10);
      Predicate<Object> predicate16 = predicate1.and(predicate9);
      Predicate<Object> predicate17 = predicate11.or(predicate16);
      predicate5.negate();
      predicate15.and(predicate13);
      predicate5.or(predicate17);
      predicate0.or(predicate15);
      predicate12.negate();
      Predicate.isEqual((Object) predicate4);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance((-1222.761675038), doubleArray0);
      jRip_RipperRule0.covers(denseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Attribute attribute0 = new Attribute("r!wCB\"iA", "K*", (-2075));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K*");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jRip0.optimizationsTipText();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      Instances instances0 = decisionTable1.m_theInstances;
      System.setCurrentTimeMillis(120L);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      SparseInstance sparseInstance0 = new SparseInstance(69);
      String string0 = null;
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Twelfth International Conference on Machine Learning";
      stringArray0[1] = "No suitable converter found for '";
      stringArray0[2] = "\nGrowing and pruning Revision ...";
      stringArray0[3] = "%Tj)";
      stringArray0[4] = "-F";
      stringArray0[5] = "%Tj)";
      stringArray0[4] = "Should never happen: repDLin optmz. stage NaN or infinite!";
      stringArray0[7] = "This should never happen!";
      stringArray0[8] = "";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      protectedProperties5.keySet();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties3);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Number of rules: ", arrayList0, 3);
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass(2152.86587437978, instances0, 2152.86587437978, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("second_value", protectedProperties1);
      Attribute.typeToString(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      String string0 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string0);
      
      double double1 = jRip_NumericAntd0.getAttrValue();
      assertEquals(double1, double0, 0.01);
      
      jRip_NumericAntd0.getAttr();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      
      String string1 = jRip0.seedTipText();
      assertEquals(3, jRip0.getFolds());
      assertEquals("The seed used for randomizing the data.", string1);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SystemInUtil.addInputLine("0K");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "0K");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate0.and(predicate3);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate3.and(predicate5);
      Predicate<Object> predicate9 = predicate8.and(predicate3);
      Predicate<Object> predicate10 = predicate9.and(predicate7);
      Predicate<Object> predicate11 = predicate2.or(predicate4);
      predicate10.and(predicate3);
      predicate0.and(predicate2);
      predicate6.test("0K");
      Predicate<Object> predicate12 = predicate9.negate();
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate12);
      Predicate<Object> predicate14 = predicate6.or(predicate11);
      predicate12.or(predicate14);
      predicate3.or(predicate1);
      predicate12.negate();
      Predicate<Object> predicate15 = predicate0.negate();
      predicate15.or(predicate10);
      Predicate<Object> predicate16 = predicate1.and(predicate9);
      Predicate<Object> predicate17 = predicate11.or(predicate16);
      predicate5.negate();
      predicate15.and(predicate13);
      predicate5.or(predicate17);
      predicate0.or(predicate15);
      predicate12.negate();
      Predicate.isEqual((Object) predicate4);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance((-1222.761675038), doubleArray0);
      boolean boolean0 = jRip_RipperRule0.covers(denseInstance0);
      assertTrue(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList1 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(linkedList1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) null);
      Attribute attribute0 = new Attribute((String) null, list0);
      linkedList1.add(attribute0);
      linkedList1.listIterator();
      Attribute attribute1 = new Attribute((String) null);
      linkedList1.add(attribute1);
      J48 j48_0 = new J48();
      Classifier classifier0 = AbstractClassifier.makeCopy(j48_0);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute2 = new Attribute("date", 1);
      attribute2.copy("relational");
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList3.add("p/<-g]2'");
      AbstractClassifier.makeCopies(classifier0, 4657);
      Utils.SMALL = (double) 1;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      ClassOrder classOrder0 = new ClassOrder();
      ClassOrder classOrder1 = new ClassOrder();
      jRip_NumericAntd0.getRevision();
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      Attribute.typeToString((-485));
      intArray0[3] = 2;
      intArray0[5] = 3;
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[10];
      int int0 = (-3039);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      DenseInstance denseInstance0 = new DenseInstance(68);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int int0 = 69;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 69;
      doubleArray0[1] = (double) 69;
      doubleArray0[2] = (double) 69;
      doubleArray0[3] = (double) 69;
      SparseInstance sparseInstance0 = new SparseInstance(69, doubleArray0);
      try { 
        jRip0.classifyInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      Attribute attribute0 = new Attribute("", list0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getCover();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.847642989259894
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      jRip0.setMinNo(1.0);
      jRip0.getUsePruning();
      jRip0.setCheckErrorRate(false);
      jRip0.getRevision();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("8118");
      Attribute attribute1 = attribute0.copy("\n\nClass ");
      attribute1.indexOfValue("string");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 3;
      doubleArray0[4] = (double) 2;
      doubleArray0[8] = (double) 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1060.5), doubleArray0);
      jRip0.getCheckErrorRate();
      jRip_NominalAntd0.getRevision();
      jRip0.setFolds(3);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("M5 method", list0, 3805);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SystemInUtil.addInputLine("enly");
      Environment environment0 = Environment.getSystemWide();
      environment0.addVariable("d^_n.:8 C Vp", "d^_n.:8 C Vp");
      environment0.getVariableNames();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "d^_n.:8 C Vp";
      stringArray0[1] = "xXFs*,a";
      stringArray0[2] = "\nGrowing a rule ...";
      stringArray0[3] = "enly";
      stringArray0[4] = "d^_n.:8 C Vp";
      stringArray0[5] = "d^_n.:8 C Vp";
      stringArray0[6] = "d^_n.:8 C Vp";
      stringArray0[7] = "enly";
      stringArray0[8] = "d^_n.:8 C Vp";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.setFolds((-662));
      jRip_RipperRule0.setConsequent(2070.430328868576);
      int int0 = (-673);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-673));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-1559));
      int[] intArray0 = new int[8];
      intArray0[0] = (-3039);
      intArray0[1] = 996;
      intArray0[2] = 539;
      intArray0[3] = 78;
      intArray0[4] = (-2146599447);
      intArray0[5] = 70;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(539, intArray0, 4004);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r!wCB\"iA");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";K*");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JRip jRip0 = new JRip();
      jRip0.toString();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute(";K*", (-1262));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 2503.530804604, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.getUsePruning();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      MockRandom mockRandom0 = new MockRandom();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ClassOrder classOrder0 = new ClassOrder();
      ClassOrder classOrder1 = new ClassOrder();
      properties0.put(classOrder0, classOrder1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      // Undeclared exception!
      try { 
        protectedProperties0.replaceAll((BiFunction<? super Object, ? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SystemInUtil.addInputLine("0K");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "0K");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate6 = predicate0.and(predicate4);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate4.and(predicate0);
      Predicate<Object> predicate9 = predicate8.and(predicate4);
      Predicate<Object> predicate10 = predicate9.and(predicate7);
      Predicate<Object> predicate11 = predicate2.or(predicate5);
      predicate9.negate();
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate11);
      predicate6.or(predicate11);
      predicate4.or(predicate1);
      predicate6.or(predicate5);
      predicate3.or(predicate5);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) null);
      predicate13.or(predicate10);
      Predicate<Object> predicate14 = predicate1.and(predicate9);
      Predicate<Object> predicate15 = predicate11.or(predicate14);
      predicate4.negate();
      predicate13.and(predicate12);
      predicate5.or(predicate15);
      predicate0.or(predicate13);
      predicate8.and(predicate7);
      predicate3.negate();
      Predicate.isEqual((Object) predicate5);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance((-1222.761675038), doubleArray0);
      boolean boolean0 = jRip_RipperRule0.covers(denseInstance0);
      assertTrue(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.enumerateMeasures();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("If enabled, dataset header, means and stdevs get discarded to conserve memory; also, the model cannot be printed out.", arrayList0, 8);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      JRip jRip0 = new JRip();
      BestFirst bestFirst0 = new BestFirst();
      SystemInUtil.addInputLine("aq");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("If enabled, dataset header, means and stdevs get discarded to conserve memory; also, the model cannot be printed out.");
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator0);
      jRip0.getUsePruning();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("");
      mockFile0.delete();
      ClassOrder classOrder0 = new ClassOrder();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7490906203903507
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SystemInUtil.addInputLine("");
      Environment.getSystemWide();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      predicate0.negate();
      predicate0.and(predicate2);
      Predicate<Object> predicate7 = predicate2.and(predicate6);
      Predicate<Object> predicate8 = predicate1.or(predicate6);
      Predicate.isEqual((Object) predicate5);
      Predicate.isEqual((Object) "");
      Predicate<Object> predicate9 = predicate6.negate();
      predicate8.negate();
      Predicate<Object> predicate10 = predicate9.negate();
      predicate0.and(predicate10);
      ClassOrder classOrder0 = new ClassOrder();
      Predicate.isEqual((Object) predicate7);
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      jRip0.setOptions((String[]) null);
      Attribute attribute0 = new Attribute("", "", 1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      protectedProperties1.keySet();
      Attribute attribute0 = new Attribute("%4k5", "");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(457);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      JRip jRip0 = new JRip();
      jRip0.toString();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      protectedProperties7.remove((Object) arrayList0, (Object) protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      Attribute attribute1 = new Attribute("JRIP: No model built yet.", (-1403));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      jRip_NominalAntd0.covers(binarySparseInstance0);
      System.setCurrentTimeMillis(2L);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9594045983154569
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("%4k5", arrayList0, 8);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = (RegressionByDiscretization)AbstractClassifier.makeCopy(regressionByDiscretization0);
      JRip jRip0 = new JRip();
      KStar kStar0 = new KStar();
      SelectedTag selectedTag0 = kStar0.getMissingMode();
      regressionByDiscretization0.setEstimatorType(selectedTag0);
      BestFirst bestFirst0 = new BestFirst();
      bestFirst0.setStartSet("@relation");
      SelectedTag selectedTag1 = regressionByDiscretization0.getEstimatorType();
      regressionByDiscretization0.setEstimatorType(selectedTag1);
      regressionByDiscretization1.setUseEqualFrequency(true);
      regressionByDiscretization0.setMinimizeAbsoluteError(true);
      Attribute attribute0 = new Attribute("@data", instances0, 2);
      Attribute attribute1 = attribute0.copy("\tWhether NOT check the error rate>=0.5\n\tin stopping c iteria \t(default: check)");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals("\tWhether NOT check the error rate>=0.5\n\tin stopping c iteria \t(default: check) = ", string0);
      
      DenseInstance denseInstance0 = new DenseInstance(13);
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance0);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(0);
      Instances instances1 = new Instances("", arrayList0, 0);
      instances1.add((Instance) denseInstance0);
      jRip_NominalAntd0.splitData(instances1, 1328.0, 2);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      protectedProperties1.keySet();
      Attribute attribute0 = new Attribute("%4k5", "");
      attribute0.addStringValue((String) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(457);
      properties0.putAll(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      JRip jRip0 = new JRip();
      jRip0.toString();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      protectedProperties7.remove((Object) arrayList0, (Object) protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      Attribute attribute1 = new Attribute("JRIP: No model built yet.", (-1403));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      jRip_NominalAntd0.covers(binarySparseInstance0);
      CoverTree coverTree0 = new CoverTree();
      System.setCurrentTimeMillis(2L);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SGD sGD0 = new SGD();
      serializedClassifier0.listOptions();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      sGD0.setLambda(79);
      AbstractClassifier.makeCopy(serializedClassifier0);
      SerializedClassifier serializedClassifier2 = new SerializedClassifier();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      AbstractClassifier.makeCopy(serializedClassifier0);
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[6];
      intArray0[0] = 79;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 79;
      intArray0[4] = 2;
      intArray0[5] = 79;
      jRip0.listOptions();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip.main((String[]) null);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getMaxInfoGain();
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SystemInUtil.addInputLine("?");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate0.and(predicate4);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate4.and(predicate6);
      Predicate<Object> predicate10 = predicate6.and(predicate1);
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate11.and(predicate8);
      Predicate<Object> predicate13 = predicate2.or(predicate5);
      predicate11.negate();
      Predicate<Object> predicate14 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate15 = predicate7.or(predicate13);
      Predicate<Object> predicate16 = predicate4.or(predicate1);
      predicate16.negate();
      predicate7.or(predicate6);
      Predicate<Object> predicate17 = Predicate.isEqual((Object) null);
      predicate17.or(predicate12);
      Predicate<Object> predicate18 = predicate1.and(predicate11);
      Predicate<Object> predicate19 = predicate13.or(predicate18);
      predicate11.negate();
      predicate15.negate();
      predicate17.and(predicate14);
      predicate6.or(predicate19);
      predicate10.or(predicate17);
      predicate9.and(predicate10);
      predicate10.negate();
      predicate14.and(predicate0);
      ClassOrder classOrder0 = new ClassOrder();
      Predicate.isEqual((Object) predicate5);
      JRip jRip0 = new JRip();
      Filter.makeCopy(classOrder0);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jRip0.foldsTipText();
      jRip0.getRevision();
      jRip0.setUsePruning(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.usePruningTipText();
      jRip_RipperRule0.getConsequent();
      jRip_RipperRule0.size();
      jRip0.enumerateMeasures();
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      jRip0.setDebug(true);
      Utils.SMALL = (-2004.080558414);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties0);
      Attribute.typeToString(attribute0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2004.080558414);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-2004.080558414);
      doubleArray0[3] = 2444.62590774;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertTrue(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "implementation in aspects of accuracy, ruleset size and running time ");
      JRip jRip0 = new JRip();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      jRip0.setMinNo((-1.0));
      jRip0.seedTipText();
      String string0 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties5);
      JRip jRip0 = new JRip();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      Attribute attribute0 = new Attribute("", protectedProperties8);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Object object0 = jRip_NominalAntd0.copy();
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)properties1.getOrDefault(protectedProperties1, object0);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties11);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(properties1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute((String) null);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute1);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("null <= NaN", string0);
      assertEquals(3, jRip1.getFolds());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip1.getDebug());
      assertTrue(jRip1.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "-P <order>";
      stringArray0[2] = "Revision: ";
      stringArray0[3] = "";
      stringArray0[4] = "sensible";
      stringArray0[5] = "=Ki(ys.X";
      stringArray0[6] = "fkK)w1:-g<k(WS";
      AbstractClassifier.runClassifier(bayesNet0, stringArray0);
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Environment environment0 = Environment.getSystemWide();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      protectedProperties5.keySet();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties2);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties3);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties7);
      environment0.addVariableSystemWide("Additive Logistic Regression: a Statistical View of Boosting", "Sjq");
      environment0.addVariable("", (String) null);
      environment0.getVariableNames();
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SystemInUtil.addInputLine("0K");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "0K");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate0.and(predicate3);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate6.and(predicate3);
      predicate1.and(predicate4);
      Predicate<Object> predicate9 = predicate8.and(predicate7);
      Predicate<Object> predicate10 = predicate2.or(predicate4);
      predicate9.and(predicate3);
      predicate0.and(predicate2);
      Predicate<Object> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate11);
      Predicate<Object> predicate13 = predicate0.negate();
      predicate11.or(predicate13);
      Predicate<Object> predicate14 = predicate3.or(predicate1);
      predicate14.negate();
      Predicate<Object> predicate15 = predicate0.negate();
      predicate15.or(predicate9);
      Predicate<Object> predicate16 = predicate1.and(predicate8);
      Predicate<Object> predicate17 = predicate10.or(predicate16);
      Predicate<Object> predicate18 = predicate5.negate();
      predicate18.negate();
      predicate15.and(predicate12);
      predicate5.or(predicate17);
      predicate0.or(predicate15);
      predicate18.negate();
      Predicate.isEqual((Object) predicate4);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[1];
      DenseInstance denseInstance0 = new DenseInstance((-1222.761675038), doubleArray0);
      boolean boolean0 = jRip_RipperRule0.covers(denseInstance0);
      assertTrue(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      int int0 = jRip0.getFolds();
      assertEquals(3, int0);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("If enabled, dataset header, means ank stdevs get discarded to conserve memory; also, the model cannot be printed out.", arrayList0, 8);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = (RegressionByDiscretization)AbstractClassifier.makeCopy(regressionByDiscretization0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      regressionByDiscretization1.setClassifier(naiveBayesMultinomial0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      JRip jRip0 = new JRip();
      BestFirst bestFirst0 = new BestFirst();
      regressionByDiscretization0.setClassifier(naiveBayesMultinomialUpdateable0);
      SystemInUtil.addInputLine("aq");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      unaryOperator0.apply("If enabled, dataset header, means ank stdevs get discarded to conserve memory; also, the model cannot be printed out.");
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("");
      mockFile0.delete();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.setMinWordFrequency(0.75);
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      AbstractClassifier.makeCopies(naiveBayesMultinomialUpdateable0, 2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(8);
      jRip_RipperRule0.grow(instances0);
      assertEquals(8.0, jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.globalInfo();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Input: ", arrayList0, 116);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      SystemInUtil.addInputLine("O");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "O");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate6 = predicate5.or(predicate0);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate8.and(predicate3);
      predicate4.and(predicate9);
      Predicate<Object> predicate10 = predicate6.or(predicate5);
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate6);
      predicate11.negate();
      Predicate.isEqual((Object) predicate2);
      Predicate.isEqual((Object) "O");
      predicate6.negate();
      predicate12.and(predicate7);
      predicate10.or(predicate4);
      Predicate<Object> predicate13 = predicate2.and(predicate9);
      Predicate<Object> predicate14 = predicate9.and(predicate13);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      Predicate<String> predicate15 = Predicate.isEqual((Object) jRip_RipperRule1);
      Predicate<String> predicate16 = predicate15.and(predicate14);
      predicate16.negate();
      predicate16.or(predicate14);
      predicate16.negate();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertNotSame(jRip_RipperRule1, jRip_RipperRule0);
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      JRip jRip1 = new JRip();
      String[] stringArray0 = jRip1.getOptions();
      assertEquals(2, jRip1.getOptimizations());
      assertTrue(jRip1.getUsePruning());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertEquals(3, jRip1.getFolds());
      assertEquals(11, stringArray0.length);
      assertFalse(jRip1.getDebug());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Environment.getSystemWide();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      protectedProperties5.keySet();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties2);
      properties0.clear();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties4);
      Properties properties5 = new Properties();
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties6);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties13);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("", "", 2885);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => =", string0);
      
      String string1 = jRip0.toString();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals("JRIP: No model built yet.", string1);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "%4k5";
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("%4k5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // %4k5 not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-i77");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      jRip_RipperRule0.size();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "Nu(br of 3llFpssble )oXi+ionso=";
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("Nu(br of 3llFpssble )oXi+ionso=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nu(br of 3llFpssble )oXi+ionso= not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8911601612408218
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("%4k5", arrayList0, 8);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      RegressionByDiscretization regressionByDiscretization1 = (RegressionByDiscretization)AbstractClassifier.makeCopy(regressionByDiscretization0);
      JRip jRip0 = new JRip();
      KStar kStar0 = new KStar();
      SelectedTag selectedTag0 = kStar0.getMissingMode();
      regressionByDiscretization0.setEstimatorType(selectedTag0);
      BestFirst bestFirst0 = new BestFirst();
      bestFirst0.setStartSet("@relation");
      SelectedTag selectedTag1 = regressionByDiscretization0.getEstimatorType();
      regressionByDiscretization0.setEstimatorType(selectedTag1);
      regressionByDiscretization1.setUseEqualFrequency(true);
      regressionByDiscretization0.setMinimizeAbsoluteError(true);
      Attribute attribute0 = new Attribute("@data", instances0, 2);
      attribute0.copy("\tWhether NOT check the error rate>=0.5\n\tin stopping criteria \t(default: check)");
      attribute0.addRelation(instances0);
      regressionByDiscretization1.setDebug(true);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 3, 2);
      assertEquals(1, instancesArray0.length);
      
      Random.setNextRandom(2121);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SystemInUtil.addInputLine("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate0.and(predicate4);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate4.and(predicate6);
      predicate6.and(predicate1);
      Predicate<Object> predicate10 = predicate9.and(predicate4);
      Predicate<Object> predicate11 = predicate10.and(predicate8);
      Predicate<Object> predicate12 = predicate2.or(predicate5);
      predicate10.negate();
      Predicate.isEqual((Object) predicate12);
      Predicate<Object> predicate13 = predicate4.or(predicate1);
      Predicate<Object> predicate14 = predicate13.negate();
      predicate7.or(predicate6);
      Predicate<Object> predicate15 = Predicate.isEqual((Object) null);
      predicate15.or(predicate11);
      Predicate<Object> predicate16 = predicate1.and(predicate10);
      predicate12.or(predicate16);
      predicate10.negate();
      predicate14.negate();
      RuleStats ruleStats0 = new RuleStats();
      Predicate<String> predicate17 = Predicate.isEqual((Object) ruleStats0);
      Predicate<String> predicate18 = predicate17.and(predicate4);
      Predicate<String> predicate19 = predicate18.negate();
      predicate18.and(predicate9);
      Predicate<String> predicate20 = predicate19.or(predicate15);
      Predicate<String> predicate21 = predicate20.negate();
      predicate21.negate();
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      Attribute attribute0 = new Attribute((String) null, (String) null, 1534);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = null;
      try {
        jRip_NominalAntd0 = jRip1.new NominalAntd((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      Instances instances0 = decisionTable2.m_theInstances;
      System.setCurrentTimeMillis(5);
      jRip0.getTechnicalInformation();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(true);
      jRip0.toString();
      jRip0.minNoTipText();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getAccu();
      int int0 = (-512);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("@data");
      jRip0.setMinNo((-512));
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, (-512), 1.0E-12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SystemInUtil.addInputLine("");
      Environment environment0 = Environment.getSystemWide();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) environment0);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate6);
      predicate4.or(predicate7);
      predicate0.negate();
      Predicate<Object> predicate8 = predicate0.and(predicate5);
      Predicate<Object> predicate9 = predicate2.or(predicate8);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) environment0);
      predicate10.and(predicate1);
      Predicate<String> predicate11 = Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate8);
      ClassOrder classOrder0 = new ClassOrder();
      Predicate<Object> predicate13 = Predicate.isEqual((Object) classOrder0);
      Predicate<Object> predicate14 = predicate8.negate();
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate15 = predicate13.negate();
      Predicate<Object> predicate16 = predicate9.and(predicate15);
      predicate16.or(predicate14);
      predicate16.and(predicate10);
      predicate3.and(predicate16);
      Predicate.isEqual((Object) predicate12);
      predicate11.negate();
      Predicate<String> predicate17 = predicate11.or(predicate8);
      predicate17.negate();
      ClassOrder classOrder1 = new ClassOrder();
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      Attribute attribute0 = new Attribute("Non matches covered by Majority class.\n", list0, 2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Environment.getSystemWide();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      protectedProperties3.keySet();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties5);
      StringReader stringReader0 = new StringReader("");
      protectedProperties6.load((Reader) stringReader0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties5);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties2);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties4);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("", linkedList0, 571);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      String string0 = jRip0.minNoTipText();
      assertFalse(jRip0.getDebug());
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SystemInUtil.addInputLine("");
      Environment environment0 = Environment.getSystemWide();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) environment0);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate3);
      predicate4.or(predicate6);
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate0.and(predicate5);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) environment0);
      predicate9.and(predicate1);
      Predicate<String> predicate10 = Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate11 = predicate6.negate();
      predicate11.negate();
      predicate8.and(predicate2);
      Predicate.isEqual((Object) null);
      predicate10.negate();
      Predicate<String> predicate12 = predicate10.negate();
      ClassOrder classOrder0 = new ClassOrder();
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate7);
      Predicate<String> predicate14 = predicate10.and(predicate2);
      predicate14.negate();
      predicate12.and(predicate7);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.removeIf(predicate13);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      String string0 = jRip0.debugTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals("Whether debug information is output to the console.", string0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int int0 = 69;
      SparseInstance sparseInstance0 = new SparseInstance(69);
      DenseInstance denseInstance0 = new DenseInstance(69);
      jRip0.getDebug();
      int int1 = (-545);
      SparseInstance sparseInstance1 = null;
      try {
        sparseInstance1 = new SparseInstance((-545));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }
}
