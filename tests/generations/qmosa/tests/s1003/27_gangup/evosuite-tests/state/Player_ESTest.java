/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 10:54:04 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9454908168625717
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player0 = new Player();
      player0.type();
      Party party0 = new Party();
      player0.head = party0;
      Player player1 = new Player(5, (String) null, "@73tV~ C_!8", 0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player1.pack();
      player1.setX((short)4919);
      player1.pack();
      System.setCurrentTimeMillis((-1L));
      Player player2 = new Player(1282, (String) null, 1282);
      player1.setJoinOK(player2, false);
      player2.reset(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pjwrd?'0:~!@%H");
      Player player3 = new Player();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((-973), ")7|$h3'y5pMrP4crVZM", (String) null, 62);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale.getISOLanguages();
      Party party0 = player0.boss;
      player0.next = null;
      locale0.hasExtensions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "k/P";
      Player player0 = new Player(2147325395, "k/P", "gRXt]AyP)U<RM", 2147325395);
      byte[] byteArray0 = new byte[3];
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2089443548), 344);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1217787801180776
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player0 = new Player();
      player0.type();
      Player player1 = new Player(5, (String) null, "0.0.0.0", 0);
      player1.pack();
      player1.setX((short)4919);
      player1.pack();
      System.setCurrentTimeMillis(0);
      player1.getMoney();
      player0.setZ(0.0F);
      Player player2 = new Player(0, (String) null, 0);
      player1.setJoinOK(player2, false);
      Player player3 = new Player();
      player0.gangStrength();
      player3.next = (Party) player1;
      System.setCurrentTimeMillis(15000L);
      player3.getZ();
      player1.isJoinOK(player2, false);
      player1.type();
      Player player4 = new Player((-1043));
      player4.type();
      player3.pack();
      player1.isJoinOK(player0, true);
      assertEquals(4919.0F, player1.getX(), 0.01F);
      
      int int0 = player4.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      System.setCurrentTimeMillis(15000L);
      System.setCurrentTimeMillis(891L);
      Player player0 = new Player(2147371636, "rp_@ax%/T5V!W", 2147371636);
      Player player1 = null;
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1995756248310236
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.reset(true);
      player0.setDead((-2434L));
      player0.setDead();
      player0.setDead(19919L, true);
      player0.pack();
      player0.getTimeOfDeath();
      player0.pack();
      player0.getTimeOfDeath();
      player0.type();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      player0.setConnected(false);
      player0.getTimeOfDeath();
      Party party0 = player0.prev;
      Player player1 = new Player(264, "E?", 107);
      player1.setMoney(264);
      player1.getSubparty();
      player0.isJoinOK(player1, false);
      player1.isJoinOK(player0, true);
      player0.getMoney();
      player1.setDead((-826L), true);
      player1.isJoinOK(player0, true);
      player1.isJoinOK(player0, false);
      player1.isJoinOK(player0, true);
      long long0 = player1.getTimeOfDeath();
      assertEquals((-826L), long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player();
      player0.type();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)10;
      player0.pack();
      player0.setX(0L);
      player0.pack();
      System.setCurrentTimeMillis(0L);
      player0.getMoney();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Player player1 = new Player();
      System.setCurrentTimeMillis(1L);
      player0.getZ();
      player1.getIP();
      player0.isJoinOK(player0, false);
      player0.type();
      player0.getX();
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.197846119469557
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A#7e*nRD%k=To1VCY&c");
      Player player0 = new Player();
      player0.type();
      Player player1 = new Player(5, (String) null, "@73tV~ C_!8", 0);
      player1.pack();
      player1.setX((short)4919);
      player1.pack();
      System.setCurrentTimeMillis(0);
      player1.getMoney();
      player1.setZ((-1L));
      Player player2 = new Player((short)4919, "uJY:Lv73:", (short)4919);
      player0.setJoinOK(player1, false);
      Player player3 = new Player();
      System.setCurrentTimeMillis(0);
      player1.getZ();
      player2.isJoinOK(player0, false);
      player1.setY(0);
      player0.type();
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode3);
      Locale.getISOLanguages();
      linkedList1.offerFirst("");
      linkedList0.removeLastOccurrence(locale_FilteringMode3);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode4);
      Player player0 = new Player(64, "", "gui.ModuleBrowserDialog$ModuleFilter", (-1), 64);
      float float0 = player0.getZ();
      assertEquals(0.0F, float0, 0.01F);
      
      String string0 = player0.getIP();
      assertEquals("", string0);
      
      Player player1 = new Player();
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertEquals(64, player0.getStrength());
      assertEquals((-1), player0.getPictureId());
      assertFalse(boolean0);
      
      int int0 = player1.type();
      assertEquals(5, int0);
      
      float float1 = player1.getMoney();
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertTrue(player1.isConnected());
      assertEquals(0, player1.getPictureId());
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(1, player1.getStrength());
      assertEquals("Player-1", player1.toString());
      assertEquals("0.0.0.0", player1.getIP());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.057826988289949
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(4);
      Player player1 = new Player();
      player1.setConnected(true);
      Player player2 = new Player((short)4919, "Y,<8d FUb", "state.Party", (short)4919, (short)4919);
      player2.setDead(1392409281320L, false);
      player1.setConnected(false);
      Player player3 = new Player((short)4919);
      Player player4 = new Player();
      player0.head = (Party) player4;
      player2.add(player3);
      player0.setDead();
      player1.getName();
      player3.setJoinOK(player0, true);
      player3.isJoinOK(player0, false);
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream((short)4919);
      pipedInputStream0.mark(5);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Player player5 = new Player(1, "", ",>4ezi", (short)4919);
      Player player6 = new Player(1188, "A", (String) null, (short)4919, (short)4919);
      player6.toString();
      assertEquals(4919, player6.getPictureId());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list2, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode3);
      Locale.getISOLanguages();
      linkedList1.offerFirst("");
      linkedList0.removeLastOccurrence(locale_FilteringMode3);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList0.pollLast();
      System.setCurrentTimeMillis((-973L));
      Player player0 = new Player(0, (String) null, (String) null, (-3294));
      player0.getZ();
      player0.getIP();
      Player player1 = new Player(678, "", "", (short)4919);
      player0.isJoinOK(player1, false);
      player1.type();
      Player player2 = new Player((-3294));
      player2.type();
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Player player0 = new Player();
      player0.type();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)10;
      byte[] byteArray1 = player0.pack();
      player0.setX((byte)50);
      player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (short)4919);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      player0.unpack(dataInputStream0);
      System.setCurrentTimeMillis((byte)10);
      player0.getMoney();
      Player player1 = new Player((byte)10, (String) null, (byte)50);
      player1.setJoinOK(player0, false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Player player2 = new Player();
      MockFile mockFile0 = new MockFile("", "");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "rf;=@.i]5P1{?m cl");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player(2147340491, "state.Player", (-1225));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertFalse(boolean0);
      
      int int0 = player0.type();
      assertFalse(player0.isDead());
      assertEquals((-1225), player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4703116992157614
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((-1834), "K", "K", (-1834), 3670);
      Player player1 = new Player((-1834), "+8<4\"+zJ[!8'r`9", "K", (short)4919);
      player1.reset(false);
      player0.setY((-473.0F));
      player1.setDead();
      player0.remove(player1);
      player0.getY();
      player0.setConnected(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)2;
      player1.setZ((byte)2);
      byteArray0[2] = (byte)0;
      player1.prev = (Party) player0;
      byteArray0[3] = (byte)0;
      player0.unpack(byteArray0);
      player1.isConnected();
      player0.getStrength();
      player1.reset(true);
      player0.type();
      player1.setDead((long) (byte)2);
      player0.setX((-398L));
      player0.getPictureId();
      Player player2 = new Player((-770), "K", "5pv`~u891b", (-770), (byte)0);
      boolean boolean0 = player0.isJoinOK(player2, false);
      assertEquals((-398.0F), player0.getX(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(0, "'/-0^R#vX:#N*L3KY1", 0);
      player0.add((Party) null);
      byte[] byteArray0 = player0.pack();
      Party party0 = new Party();
      party0.add(player0);
      player0.getSubparty();
      player0.unpack(byteArray0);
      party0.prev = (Party) player0;
      player0.prev = party0;
      player0.boss = party0;
      player0.add(party0.prev);
      party0.prev.boss = player0.boss;
      party0.next = null;
      player0.type();
      player0.pack();
      party0.add((Party) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      System.setCurrentTimeMillis(1412L);
      player0.type();
      System.setCurrentTimeMillis(690L);
      System.setCurrentTimeMillis((short)4919);
      System.setCurrentTimeMillis(30000L);
      player0.type();
      System.setCurrentTimeMillis(1412L);
      int int0 = player0.type();
      assertEquals(0, player0.getId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(5, int0);
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getZ(), 0.01F);
      assertEquals("'/-0^R#vX:#N*L3KY1", player0.toString());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2418626953628893
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A#7e*nRD%k=To1VCY&c");
      Player player0 = new Player();
      player0.type();
      Player player1 = new Player(5, (String) null, "@73tV~ C_!8", 0);
      player1.pack();
      player1.setX((short)4919);
      byte[] byteArray0 = player1.pack();
      System.setCurrentTimeMillis((-1L));
      player1.getMoney();
      player0.setZ(0.0F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "module.ModuleBrowserDialog$ModuleFilter");
      Player player2 = new Player();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player2.gangStrength();
      player1.unpack(byteArray0);
      System.setCurrentTimeMillis((-738L));
      player1.getZ();
      player1.getIP();
      player1.isJoinOK(player2, false);
      player2.type();
      player2.getMoney();
      System.setCurrentTimeMillis(5);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.24319204066033
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H{*-O mp\"~OfI");
      Player player0 = new Player();
      player0.type();
      Player player1 = new Player(5, (String) null, "@73tV~ C_!8", 0);
      player1.pack();
      player1.setX((short)4919);
      player1.setMoney(0.1F);
      byte[] byteArray0 = player1.pack();
      System.setCurrentTimeMillis((-1L));
      player1.getMoney();
      Player player2 = new Player(1282, (String) null, 1282);
      Player player3 = new Player(0, "@73tV~ C_!8", (-2637));
      player2.setJoinOK(player1, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(4919.0F, player1.getX(), 0.01F);
      
      Player player4 = new Player();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player3.gangStrength();
      System.setCurrentTimeMillis(15000L);
      player2.getZ();
      player2.getIP();
      player4.isJoinOK(player2, false);
      Player player5 = new Player((-1), (String) null, (short)4919);
      player5.type();
      float float0 = player3.getMoney();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1851905070236004
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Player player0 = new Player();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player0.pack();
      player0.setX((byte)50);
      System.setCurrentTimeMillis((short)4919);
      player0.getMoney();
      Player player1 = new Player((byte)50, "", 2656);
      player1.setJoinOK(player0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player0.gangStrength();
      System.setCurrentTimeMillis((byte)50);
      player1.setZ((byte)50);
      player1.getZ();
      player0.getIP();
      player1.isJoinOK(player0, false);
      player1.setMoney((byte)50);
      System.setCurrentTimeMillis((-1526L));
      player1.pack();
      int int0 = player0.type();
      assertEquals(50.0F, player0.getX(), 0.01F);
      assertEquals(5, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2627848006711537
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player(4);
      player0.setConnected(true);
      player0.setDead(0L, true);
      player0.setConnected(true);
      Player player1 = new Player((short)4919);
      player1.boss = (Party) player0;
      player1.reset(true);
      player1.setY(3396.214F);
      player0.setDead();
      player1.remove(player0);
      player1.getY();
      player0.setConnected(true);
      byte[] byteArray0 = new byte[0];
      player1.unpack(byteArray0);
      player1.isConnected();
      Player player2 = new Player(989, "RoM", "RoM", 1, (byte)0);
      player2.getStrength();
      player1.reset(true);
      player0.type();
      player0.setDead((-1L));
      assertEquals((-1L), player0.getTimeOfDeath());
      
      player2.setX(0.0F);
      assertEquals(1, player2.getPictureId());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(5);
      String string0 = player0.getName();
      assertEquals("Player5", string0);
      
      Player player1 = new Player(1, "ZGs:e90:U{e", "", 0, 0);
      player0.setJoinOK(player1, true);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      
      Player player2 = new Player(2147340491, "cB5N}jRN1\",3<Qzrc", "Player5", 0, (short)4919);
      boolean boolean0 = player1.isJoinOK(player2, true);
      assertEquals("cB5N}jRN1\",3<Qzrc", player2.getIP());
      assertEquals(4919, player2.getStrength());
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(5);
      Player player3 = new Player(0, "", "", (-1614));
      player3.toString();
      assertEquals(0L, player3.getTimeOfDeath());
      assertFalse(player3.isDead());
      assertEquals((-1614), player3.getPictureId());
      assertEquals(10.0F, player3.getX(), 0.01F);
      assertTrue(player3.isConnected());
      assertEquals(0.0F, player3.getY(), 0.01F);
      assertEquals(1, player3.getStrength());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(1115);
      player0.boss = null;
      player0.head = null;
      player0.pack();
      int int0 = player0.getPictureId();
      assertEquals(0, int0);
      
      String string0 = player0.getIP();
      assertEquals("Player1115", player0.getName());
      assertEquals("0.0.0.0", string0);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player((-3762), "", "", 2117, 3127);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.121162447298355
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player0 = new Player();
      player0.type();
      Player player1 = new Player(5, (String) null, "@73tV~ C_!8", 0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player1.pack();
      player1.setX((short)4919);
      player1.add(player0);
      player1.pack();
      System.setCurrentTimeMillis((-1L));
      Player player2 = new Player(1282, (String) null, 1282);
      player1.setJoinOK(player2, false);
      player0.isBoss();
      Player player3 = new Player();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player0.gangStrength();
      player3.setY(0.1F);
      System.setCurrentTimeMillis(15000L);
      player3.getZ();
      player2.getIP();
      player2.gangStrength();
      player1.isJoinOK(player2, false);
      player1.type();
      player3.isJoinOK(player0, false);
      System.setCurrentTimeMillis(2);
      System.setCurrentTimeMillis((-26L));
      // Undeclared exception!
      try { 
        player2.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.127429422638514
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(863, ".*[.]class$", "", 863, 863);
      player0.setDead((long) 863);
      player0.getSubparty();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      player0.setMoney(863);
      player0.setZ((byte)77);
      byteArray0[1] = (byte)77;
      Player player1 = new Player((byte)77, "", (String) null, 1);
      player0.head = (Party) player1;
      player0.reset(false);
      player0.unpack(byteArray0);
      player0.isConnected();
      player0.getZ();
      player0.setDead((-128L));
      player0.setDead(0L);
      player1.getName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        pipedOutputStream0.write(863);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7567169975450474
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      Player player0 = new Player(4);
      player0.getMoney();
      player0.setZ(1282);
      Player player1 = new Player(5, ".*[.]class$", 1903);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?p.*<?BnhRyk5");
      Player player2 = new Player();
      Player player3 = new Player(1282, ".*[.]class$", "", (short)4919);
      player3.gangStrength();
      player0.getZ();
      player2.getIP();
      player0.type();
      assertEquals(1282.0F, player0.getZ(), 0.01F);
      
      Player player4 = new Player((short)4919);
      int int0 = player3.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player(4977, "KGNc.qs%Z>/^ ", "vW?v}ws9k|s", 0);
      player0.toString();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("KGNc.qs%Z>/^ ", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("l:5CU^F");
      mockPrintStream0.write((-2442));
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = 'F';
      charArray0[2] = '{';
      byteArrayOutputStream0.close();
      charArray0[3] = ']';
      charArray0[4] = '\'';
      mockPrintStream0.print(charArray0);
      charArray0[5] = 'G';
      charArray0[6] = 'r';
      charArray0[7] = '{';
      mockPrintStream0.println(charArray0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "l:5CU^F");
      byteArrayOutputStream0.writeTo(printStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      dataOutputStream0.write((int) ']');
      DataOutputStream dataOutputStream1 = new DataOutputStream((OutputStream) null);
      System.setCurrentTimeMillis(12);
      Player player0 = new Player((-2442), "", "module.ModuleBrowserDialog$ModuleFilter", 12, 2);
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(12, player0.getPictureId());
      assertEquals("", player0.getIP());
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "state.Party");
      Player player0 = new Player(2914);
      player0.setY(2914);
      player0.setZ(2914);
      player0.setX(0.0F);
      player0.getSubparty();
      System.setCurrentTimeMillis((-317L));
      player0.pack();
      System.setCurrentTimeMillis(2914);
      player0.pack();
      assertEquals(2914.0F, player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player((-478), "+b5{ffhxo", "+b5{ffhxo", 5397, 5397);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)43;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, (int) (byte)43, (int) (byte)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.121162447298355
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player0 = new Player();
      player0.type();
      Player player1 = new Player(5, (String) null, "@73tV~ C_!8", 0);
      player1.setX((short)4919);
      player1.pack();
      System.setCurrentTimeMillis((short)4919);
      player0.setZ(0.1F);
      Player player2 = new Player(1282, (String) null, 1282);
      player1.setJoinOK(player2, false);
      Player player3 = new Player();
      player0.gangStrength();
      player3.next = (Party) player1;
      System.setCurrentTimeMillis(15000L);
      player3.getZ();
      player1.isJoinOK(player2, false);
      player0.setY(1282);
      player1.type();
      assertEquals(4919.0F, player1.getX(), 0.01F);
      
      Player player4 = new Player((-1043));
      player4.getSubparty();
      player4.type();
      player3.pack();
      player4.pack();
      assertEquals("Player-1043", player4.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7941820653816287
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player((-1834), "", "", (-1834), 3670);
      Player player1 = new Player((-1834), "+8<4\"+zJ[!8'r`9", "", (short)4919);
      player0.add(player1);
      player0.setDead();
      player0.getName();
      player1.setJoinOK(player0, true);
      player1.isJoinOK(player0, true);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1834));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.030232382252353
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Player player0 = new Player();
      player0.type();
      Player player1 = new Player(5, (String) null, "@73tV~ C_!8", 0);
      player1.pack();
      player1.setX((short)4919);
      player1.pack();
      System.setCurrentTimeMillis((-1L));
      player0.setZ(0.2F);
      Player player2 = new Player(1282, (String) null, 1282);
      player1.setJoinOK(player2, false);
      Player player3 = new Player();
      int int0 = Packable.GAME_STATE;
      System.setCurrentTimeMillis(15000L);
      player3.getZ();
      player1.isJoinOK(player2, false);
      player1.type();
      assertEquals(4919.0F, player1.getX(), 0.01F);
      
      Player player4 = new Player((-1043));
      player4.type();
      player3.pack();
      assertEquals("Player-1", player3.toString());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1021170635140374
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 0;
          Player player0 = new Player(1668, "", "gui.ModuleBrowserDialog$ModuleFilter", 0, 0);
          player0.setDead();
          player0.setY(1668);
          player0.pack();
          player0.setZ((-542.644F));
          String string0 = "2Po8\"5hS=~";
          int int1 = 0;
          Player player1 = new Player((short)4919, "2Po8\"5hS=~", "", 0, 0);
          player0.setJoinOK(player1, false);
          player0.gangStrength();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          player1.id = (int) (short)4919;
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor103.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("l:5CU^F");
      char[] charArray0 = new char[8];
      byteArrayOutputStream0.close();
      mockPrintStream0.print(charArray0);
      mockPrintStream0.println(charArray0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "l:5CU^F");
      byteArrayOutputStream0.writeTo(printStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      dataOutputStream1.write((-2419));
      DataOutputStream dataOutputStream2 = new DataOutputStream((OutputStream) null);
      dataOutputStream1.write(1797);
      DataOutputStream dataOutputStream3 = new DataOutputStream(dataOutputStream1);
      System.setCurrentTimeMillis(1797);
      Player player0 = new Player((-2419), "module.ModuleBrowserDialog$ModuleFilter", "", (-2419), (-2419));
      int int0 = player0.gangStrength();
      assertEquals((-2419), int0);
      
      player0.pack();
      assertEquals((-2419), player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("module.ModuleBrowserDialog$ModuleFilter", player0.getIP());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArrayOutputStream0.write(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("l:5CU^F");
      mockPrintStream0.println();
      byteArrayOutputStream0.close();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "l:5CU^F");
      byteArrayOutputStream0.writeTo(printStream0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "l:5CU^F";
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) printStream0;
      objectArray0[8] = (Object) byteArrayOutputStream0;
      mockPrintStream0.format(locale0, "l:5CU^F", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      dataOutputStream1.write((-2419));
      dataOutputStream0.writeBytes("l:5CU^F");
      dataOutputStream1.writeChar((-2419));
      dataOutputStream0.writeBoolean(true);
      DataOutputStream dataOutputStream2 = new DataOutputStream((OutputStream) null);
      dataOutputStream1.write(1797);
      DataOutputStream dataOutputStream3 = new DataOutputStream(dataOutputStream1);
      Player player0 = new Player();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertFalse(boolean0);
      
      player0.pack();
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("Player-1", player0.getName());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.flush();
      MockPrintStream mockPrintStream0 = new MockPrintStream("l:5CU^F");
      char[] charArray0 = new char[8];
      mockPrintStream0.println();
      byteArrayOutputStream0.close();
      mockPrintStream0.print(charArray0);
      mockPrintStream0.println(charArray0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "l:5CU^F");
      byteArrayOutputStream0.writeTo(printStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      dataOutputStream1.write((-2419));
      dataOutputStream0.write((-2419));
      dataOutputStream0.writeBytes("l:5CU^F");
      dataOutputStream1.writeChar((-2419));
      DataOutputStream dataOutputStream2 = new DataOutputStream(printStream0);
      dataOutputStream2.writeBoolean(true);
      DataOutputStream dataOutputStream3 = new DataOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream4 = new DataOutputStream(printStream0);
      dataOutputStream4.close();
      DataOutputStream dataOutputStream5 = new DataOutputStream(dataOutputStream4);
      dataOutputStream5.write(0);
      DataOutputStream dataOutputStream6 = new DataOutputStream(byteArrayOutputStream0);
      Player player0 = new Player((-1675), "", "?K/f", 2147347584, (-1));
      player0.pack();
      assertEquals(2147347584, player0.getPictureId());
      assertEquals((-1), player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("", player0.getIP());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player(5397, "k/P", "k/P", 5397);
      MockPrintStream mockPrintStream0 = new MockPrintStream("k/P");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      mockPrintStream0.println();
      PrintStream printStream0 = mockPrintStream0.format("k/P", objectArray0);
      printStream0.append((CharSequence) "k/P");
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      player0.pack(dataOutputStream0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(5397, player0.getPictureId());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      byteArrayOutputStream0.write(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("l:5CU^F");
      char[] charArray0 = new char[8];
      mockPrintStream0.println();
      byteArrayOutputStream0.close();
      mockPrintStream0.print(charArray0);
      mockPrintStream0.println(charArray0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "l:5CU^F");
      byteArrayOutputStream0.writeTo(printStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      dataOutputStream1.write((-2419));
      dataOutputStream1.writeChar((-2419));
      DataOutputStream dataOutputStream2 = new DataOutputStream((OutputStream) null);
      System.setCurrentTimeMillis(1046L);
      dataOutputStream1.write(1797);
      DataOutputStream dataOutputStream3 = new DataOutputStream(dataOutputStream1);
      System.setCurrentTimeMillis(1797);
      Player player0 = new Player((-2419), "module.ModuleBrowserDialog$MoAuleFilter", "", (-2419), (-2419));
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player(4, "d1uw", "Player", 466);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d1uw");
      Player player1 = new Player();
      byte[] byteArray0 = new byte[3];
      player1.setJoinOK(player0, true);
      player0.isJoinOK(player1, false);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.5372760609118274
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player();
      player0.setConnected(true);
      player0.id = 1354;
      player0.setConnected(true);
      Party party0 = player0.next;
      player0.head = null;
      player0.setX(5560.1533F);
      player0.getX();
      player0.setZ(0.0F);
      Party party1 = player0.gangBoss();
      party1.prev = (Party) player0;
      player0.prev = party1;
      player0.getTimeOfDeath();
      player0.setY(5560.1533F);
      player0.setDead(0L);
      player0.type();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      party1.add(player0);
      player0.setDead();
      player0.getTimeOfDeath();
      player0.setY((-1.0F));
      player0.reset(true);
      player0.getIP();
      party1.remove(player0);
      player0.toString();
      player0.setDead((-1L));
      player0.setDead(0L);
      player0.pack();
      player0.getZ();
      player0.setConnected(true);
      player0.getStrength();
      player0.reset(true);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.4875355522425155
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player((-1834), "", "", (-1834), (-1834));
      Player player1 = new Player((-1834), "", "", (short)4919);
      player1.reset(false);
      player0.setY(955.5845F);
      player1.setDead();
      player0.remove(player1);
      player0.getY();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      player1.setZ((byte)0);
      byteArray0[2] = (byte)0;
      player1.prev = (Party) player0;
      byteArray0[3] = (byte)0;
      player0.unpack(byteArray0);
      player1.isConnected();
      player0.getStrength();
      player1.reset(false);
      player1.setDead((long) (byte)2);
      player0.setX((-398L));
      player0.getPictureId();
      Player player2 = new Player((-770), "", "5pv`~u891b", (-770), (byte)0);
      player2.setJoinOK(player1, false);
      boolean boolean0 = player0.isJoinOK(player2, false);
      assertEquals((-398.0F), player0.getX(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player(0, "", 1249);
      assertEquals(1249, player0.getPictureId());
      
      int int0 = Packable.TEXT_MESSAGE;
      Player player1 = new Player();
      boolean boolean0 = player1.isDead();
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals("Player-1", player1.toString());
      assertFalse(boolean0);
      assertEquals(0, player1.getPictureId());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(1, player1.getStrength());
      assertTrue(player1.isConnected());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player(4, "", "ups", 4);
      byte[] byteArray0 = new byte[1];
      player0.unpack(byteArray0);
      player0.isConnected();
      player0.getZ();
      player0.setDead(174L);
      player0.setDead((-2825L));
      player0.getName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-3606));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player(5, "module.ModuleBrowserDialog$ModuleFilter", "module.ModuleBrowserDialog$ModuleFilter", 5);
      float float0 = player0.getZ();
      assertEquals(0.0F, float0, 0.01F);
      
      player0.getName();
      assertEquals(5, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player(1, "(K$?Pz>}2oM-z4;,bO", 1508);
      player0.setY(10.0F);
      player0.setConnected(false);
      player0.setX(1508);
      player0.getY();
      player0.getZ();
      player0.remove((Party) null);
      player0.setX((-2720.0F));
      player0.isDead();
      player0.isConnected();
      float float0 = player0.getX();
      assertEquals((-2720.0F), float0, 0.01F);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player(1280, (String) null, 1280);
      Player player1 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player(5397);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)43;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, (int) (byte)89, (int) (byte)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player((-1588), "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (-253), (-2285));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      player0.unpack(byteArray0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)120;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.mark((-1588));
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArrayOutputStream0.write(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("l:5CU^F");
      mockPrintStream0.println();
      byteArrayOutputStream0.close();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "l:5CU^F");
      byteArrayOutputStream0.writeTo(printStream0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) printStream0;
      objectArray0[8] = (Object) byteArrayOutputStream0;
      mockPrintStream0.format(locale0, "", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      dataOutputStream1.write((-2419));
      dataOutputStream0.writeBytes("");
      dataOutputStream0.write(byteArray0, (-2419), (-2419));
      dataOutputStream1.writeChar((-2419));
      dataOutputStream0.writeBoolean(true);
      DataOutputStream dataOutputStream2 = new DataOutputStream((OutputStream) null);
      dataOutputStream1.write((-2419));
      DataOutputStream dataOutputStream3 = new DataOutputStream(dataOutputStream1);
      Player player0 = new Player((-2419), "", (-2419));
      Player player1 = new Player((-2419), ",Sk86FauY", "", 10);
      player0.remove(player1);
      player0.setMoney((-2419));
      assertEquals((-2419.0F), player0.getMoney(), 0.01F);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player(0, "", 0);
      assertFalse(player0.isDead());
      
      player0.setDead((long) 0, false);
      int int0 = Packable.TEXT_MESSAGE;
      boolean boolean0 = player0.isDead();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player(5397, "k/P", "k/P", 5397);
      player0.setDead();
      player0.getTimeOfDeath();
      System.setCurrentTimeMillis(1392409281320L);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player(2147340491, "QMYx0", "", 2147340491);
      player0.pack();
      player0.pack();
      float float0 = player0.getY();
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = player0.getZ();
      assertEquals(0.0F, float1, 0.01F);
      
      int int0 = player0.getPictureId();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(2147340491, int0);
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player(10, "Player.unpack(): *** WARNING *** data is not of proper type!", "Player.unpack(): *** WARNING *** data is not of proper type!", 10, (-2126));
      Player player1 = new Player(5, "", (-112));
      player0.head = (Party) player1;
      assertEquals((-112), player1.getPictureId());
      assertEquals(1, player1.getStrength());
      assertEquals("0.0.0.0", player1.getIP());
      
      float float0 = player0.getX();
      assertFalse(player0.isDead());
      assertEquals(10.0F, float0, 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals((-2126), player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player(5397, "k/P", "k/P", 5397);
      long long0 = player0.getTimeOfDeath();
      assertEquals(0L, long0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(5397, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Player player0 = new Player(1, "(K$?Pz>}2oM-z4;,bO", 1508);
      player0.setY(10.0F);
      player0.setConnected(false);
      player0.setX(1508);
      player0.getY();
      player0.getZ();
      player0.remove(player0);
      player0.setX((-2720.0F));
      player0.isDead();
      player0.isConnected();
      float float0 = player0.getX();
      assertEquals((-2720.0F), float0, 0.01F);
  }
}
