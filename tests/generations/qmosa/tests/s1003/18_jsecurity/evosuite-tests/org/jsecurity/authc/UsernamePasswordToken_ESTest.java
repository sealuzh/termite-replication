/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 13:18:32 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)21;
      byteArray0[3] = (byte) (-1);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("");
      MockInetAddress.getByName("WWQw-wA&=?8");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName((String) null);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "\"aG{|s1ZKdkXm4EIw0-", false, inetAddress0);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("WWQw-wA&=?8");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("[):Rcpzdjy83pT");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("[):Rcpzdjy83pT", (String) null, inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("");
      MockInetAddress.getByName("WWQw-wA&=?8");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("[):Rcpzdjy83pT");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      char[] charArray0 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("WWQw-wA&=?8", charArray0, true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", false);
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("u");
      MockInetAddress.getByName("WWQw-wAM=?8");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("u");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("[):Rcpzdjy83pT");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      usernamePasswordToken0.getPrincipal();
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object4));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      usernamePasswordToken0.getCredentials();
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("u");
      MockInetAddress.getByName("WWQw-wA&=?8");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("WWQw-wA&=?8");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null, false, inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = 'U';
      charArray0[1] = ']';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.security.authc.UsernamePasswrdTken", charArray0, false);
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = ')';
      charArray0[6] = '.';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("/x^swOhTd52LF 2z]Fy", "mMt7(nn+9<)./>8Sc");
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      usernamePasswordToken0.getCredentials();
      Object object5 = new Object();
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object1));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("spC?mJHZFbEWCRRJprZm", "mMt7(nn+9<)./>8Sc");
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      usernamePasswordToken0.getCredentials();
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("/u>vzR/xkb=n|_aaLi", (char[]) null);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - /u>vzR/xkb=n|_aaLi, rememberMe=false", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[1];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("OS#pTF$~:+QN.L|", charArray0, false);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, false);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("");
      InetAddress inetAddress0 = MockInetAddress.getByName("WWQw-wA&=?8");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null);
      usernamePasswordToken0.setUsername("");
      InetAddress inetAddress1 = MockInetAddress.getByName("");
      assertFalse(inetAddress1.equals((Object)inetAddress0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("u");
      MockInetAddress.getByName("WWQw-wA&=?8");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("u");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("[):Rcpzdjy83pT");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'e';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("mMt7(nn+9<)./>8Sc", "mMt7(nn+9<)./>8Sc");
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - mMt7(nn+9<)./>8Sc, rememberMe=false", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("");
      MockInetAddress.getByName("WWQw-wA&=?8");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("v-,/#ld4jT8");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = ')';
      charArray0[6] = '.';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("?m", "?m", true);
      usernamePasswordToken0.getUsername();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Jj i- ", "Jj i- ");
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("WWQw-wA&=?8");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName((String) null);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '|';
      charArray0[2] = '_';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      MockInetAddress.getByName("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (char[]) null, false, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false (/127.0.0.1)", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("spC?mJHZFbEWCRRJprZm", "mMt7(nn+9<)./>8Sc");
      usernamePasswordToken0.setRememberMe(false);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object2));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("f?|9J:", "", true);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress1 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("");
      MockInetAddress.getByName("WWQw-wA&=?8");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("");
      InetAddress inetAddress2 = MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("D~{", "", inetAddress2);
      usernamePasswordToken0.setInetAddress(inetAddress1);
      InetAddress inetAddress3 = MockInetAddress.anyLocalAddress();
      assertFalse(inetAddress3.equals((Object)inetAddress0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName(")");
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("}:jowMB");
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("S_xJIbQ");
      MockInetAddress.getByName("S_xJIbQ");
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", ")", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("spC?mJHZFbEWCRRJprZm", "mMt7(nn+9<)./>8Sc");
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = 's';
      charArray0[2] = '`';
      usernamePasswordToken0.setPassword(charArray0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("/x^swOhTd52LF 2z]Fy", "mMt7(nn+9<)./>8Sc");
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
