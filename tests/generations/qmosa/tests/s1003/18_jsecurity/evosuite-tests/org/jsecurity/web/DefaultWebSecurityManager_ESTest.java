/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 13:10:01 GMT 2019
 */

package org.jsecurity.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authz.ModularRealmAuthorizer;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.authz.permission.WildcardPermissionResolver;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.Session;
import org.jsecurity.session.mgt.eis.MemorySessionDAO;
import org.jsecurity.session.mgt.eis.SessionDAO;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.DefaultWebSecurityManager;
import org.jsecurity.web.session.DefaultWebSessionManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWebSecurityManager_ESTest extends DefaultWebSecurityManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6469712236612866
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getUnicodeLocaleKeys();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale locale1 = Locale.ITALY;
      Locale locale2 = Locale.CANADA;
      locale2.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("qh4/-/'~+iK7t");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6982483583240975
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("{$'%pttPa4x");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Permission permission1 = wildcardPermissionResolver0.resolvePermission("_PRINCIPALS_SESSION_KEY");
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("{$'%pttPa4x");
      WildcardPermission wildcardPermission0 = new WildcardPermission("I<lm2MDx>3", true);
      permission0.implies(permission1);
      wildcardPermission0.implies(permission1);
      WildcardPermission wildcardPermission1 = new WildcardPermission("_PRINCIPALS_SESSION_KEY", false);
      wildcardPermission1.implies(permission1);
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      wildcardPermissionResolver1.resolvePermission("PL=sfq");
      wildcardPermission0.implies(permission0);
      WildcardPermission wildcardPermission2 = new WildcardPermission("L8tQ7N)}tf6%", true);
      wildcardPermissionResolver1.resolvePermission("_PRINCIPALS_SESSION_KEY");
      wildcardPermission2.implies(permission1);
      wildcardPermission0.implies(wildcardPermission2);
      WildcardPermission wildcardPermission3 = new WildcardPermission("x2!wu\"TW#U$o2H3Ga", false);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm0);
      DefaultWebSecurityManager defaultWebSecurityManager2 = new DefaultWebSecurityManager();
      DefaultWebSecurityManager defaultWebSecurityManager3 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager2.isHttpSessionMode();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7063260587210523
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.isHttpSessionMode();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getServerName();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper2.getServerName();
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper1.setRequest(servletRequestWrapper2);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper4);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.getSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.018703762168135
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.setSessionIdCookiePath("gLDs'tuu@H/");
      System.setCurrentTimeMillis(358L);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7102476273485032
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.newSessionManagerInstance();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8686121260453956
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getUnicodeLocaleKeys();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale locale1 = Locale.ITALY;
      locale1.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      String string0 = defaultWebSecurityManager0.getSessionMode();
      assertEquals("jsecurity", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.018703762168135
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(simpleAccountRealm0, "Ac[GT;q&m@");
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      simplePrincipalCollection0.addAll((PrincipalCollection) simplePrincipalCollection1);
      Class<Realm> class0 = Realm.class;
      Collection<Realm> collection0 = simplePrincipalCollection1.byType(class0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(collection0);
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      simplePrincipalCollection2.asSet();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.setSessionIdCookieSecure(false);
      boolean boolean0 = true;
      MemorySessionDAO memorySessionDAO0 = new MemorySessionDAO();
      try { 
        memorySessionDAO0.readSession(simplePrincipalCollection2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no session with id [org.jsecurity.subject.SimplePrincipalCollection@7fb3e5fd]
         //
         verifyException("org.jsecurity.session.mgt.eis.CachingSessionDAO", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper0.setRequest(servletRequestWrapper3);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper2);
      servletResponseWrapper4.setBufferSize(0);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletRequestWrapper servletRequestWrapper9 = new ServletRequestWrapper(servletRequestWrapper6);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.getSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("{$'%pttPa4x");
      wildcardPermissionResolver0.resolvePermission("*Vl[quKb/89%'psw");
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      Permission permission1 = wildcardPermissionResolver1.resolvePermission("*Vl[quKb/89%'psw");
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      wildcardPermissionResolver3.resolvePermission("indvdp7rbLG^");
      WildcardPermission wildcardPermission0 = new WildcardPermission("indvdp7rbLG^", true);
      permission0.implies(wildcardPermission0);
      WildcardPermission wildcardPermission1 = new WildcardPermission(".%}dnG`", false);
      WildcardPermission wildcardPermission2 = new WildcardPermission(".%}dnG`");
      wildcardPermission2.implies(permission0);
      WildcardPermissionResolver wildcardPermissionResolver4 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver5 = new WildcardPermissionResolver();
      wildcardPermissionResolver2.resolvePermission("wwjHFe'@hXAi");
      wildcardPermission1.implies(wildcardPermission0);
      wildcardPermission1.implies(permission1);
      WildcardPermission wildcardPermission3 = new WildcardPermission(", which is enabled by default when the ", false);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("No session found for the incoming request.  The Subject instance created for the incoming request will not have an associated Session.");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm1);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null, (ServletRequest) null, servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.478006498651262
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getServerName();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper2.getServerName();
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      servletRequestWrapper1.setRequest(servletRequestWrapper2);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper4);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.getSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("ctX");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      byte[] byteArray0 = new byte[0];
      Boolean boolean0 = new Boolean("ctX");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "ctX");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookiePath("ctX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1607679837119678
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      String string0 = defaultWebSecurityManager0.getSessionMode();
      assertEquals("http", string0);
      
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("&k&=YpMoR8.");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("jsecurity");
      defaultWebSecurityManager1.isPermitted((PrincipalCollection) null, permission0);
      assertTrue(defaultWebSecurityManager1.isHttpSessionMode());
      
      defaultWebSecurityManager1.setSessionMode("jsecurity");
      System.setCurrentTimeMillis(10L);
      defaultWebSecurityManager1.setSessionIdCookieName((String) null);
      assertEquals("jsecurity", defaultWebSecurityManager1.getSessionMode());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.setRequest(servletRequestWrapper2);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper6);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper9);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper5);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.getSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1607679837119678
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.getSessionMode();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("&k&YpMoR8.");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("jsecurity");
      Permission permission1 = wildcardPermissionResolver0.resolvePermission("jsecurity");
      wildcardPermissionResolver0.resolvePermission("http");
      permission1.implies(permission0);
      defaultWebSecurityManager1.isPermitted((PrincipalCollection) null, permission1);
      assertTrue(defaultWebSecurityManager1.isHttpSessionMode());
      
      defaultWebSecurityManager1.setSessionMode("jsecurity");
      defaultWebSecurityManager1.setSessionIdCookieMaxAge(329);
      assertEquals("jsecurity", defaultWebSecurityManager1.getSessionMode());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedReader) null).when(servletRequest0).getReader();
      doReturn((String) null).when(servletRequest0).getServerName();
      doReturn(0).when(servletRequest0).getServerPort();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper2.getServerPort();
      servletRequestWrapper2.getServerName();
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper1.setRequest(servletRequestWrapper0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      servletRequestWrapper4.getReader();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("Encrypted base64: [");
      WildcardPermission wildcardPermission0 = new WildcardPermission(" classN '");
      wildcardPermission0.implies(permission0);
      defaultWebSecurityManager0.getPrincipals((Session) null);
      defaultWebSecurityManager0.isPermitted((PrincipalCollection) null, (Permission) wildcardPermission0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("{$'%pttPa4x");
      Permission permission1 = wildcardPermissionResolver0.resolvePermission("*VlquKb/89%'psw");
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      Permission permission2 = wildcardPermissionResolver1.resolvePermission("*VlquKb/89%'psw");
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      WildcardPermission wildcardPermission0 = new WildcardPermission("indvdp7rbLG^", true);
      WildcardPermission wildcardPermission1 = new WildcardPermission("indvdp7rbLG^", true);
      permission0.implies(wildcardPermission1);
      WildcardPermission wildcardPermission2 = new WildcardPermission(".%}dnG`", false);
      wildcardPermissionResolver0.resolvePermission("*VlquKb/89%'psw");
      wildcardPermissionResolver1.resolvePermission("zZDj)j-'");
      permission2.implies(permission1);
      WildcardPermission wildcardPermission3 = new WildcardPermission(".%}dnG`");
      wildcardPermission3.implies(permission0);
      wildcardPermission3.implies(permission0);
      WildcardPermissionResolver wildcardPermissionResolver4 = new WildcardPermissionResolver();
      wildcardPermission2.implies(permission0);
      WildcardPermission wildcardPermission4 = new WildcardPermission("05cHS.5g 3%SnmN_=");
      wildcardPermission4.implies(wildcardPermission1);
      permission0.implies(wildcardPermission4);
      WildcardPermission wildcardPermission5 = new WildcardPermission("_JSECURITY_THREAD_CONTEXT_KEY");
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.createSubject((ServletRequest) null, (ServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6120172700343436
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getServerName();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper2.getServerName();
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      servletRequestWrapper0.setRequest(servletRequestWrapper1);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper1);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper5, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.82475287292208
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      Collection<Realm> collection0 = defaultWebSecurityManager0.getRealms();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Session session0 = null;
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequest servletRequest1 = servletRequestWrapper1.getRequest();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection((Collection) collection0, "org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      ServletResponse servletResponse0 = null;
      defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection1, true, (Session) null, servletRequest1, (ServletResponse) null);
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(collection0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequest1);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      Collection<Realm> collection0 = defaultWebSecurityManager0.getRealms();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, false, (Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) null);
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(collection0);
      DefaultWebSessionManager defaultWebSessionManager0 = new DefaultWebSessionManager();
      SessionDAO sessionDAO0 = defaultWebSessionManager0.getSessionDAO();
      defaultWebSessionManager0.setSessionDAO(sessionDAO0);
      MockFile.listRoots();
      try { 
        defaultWebSessionManager0.retrieveSession("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no session with id [org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY]
         //
         verifyException("org.jsecurity.session.mgt.eis.CachingSessionDAO", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection(simplePrincipalCollection0);
      Class<Realm> class0 = Realm.class;
      simplePrincipalCollection0.byType(class0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleKeys();
      linkedList0.add((Locale.LanguageRange) null);
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection();
      simplePrincipalCollection3.asSet();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieName("hYZ[");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale locale0 = Locale.ITALY;
      locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      defaultWebSecurityManager0.setSessionMode("http");
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(simpleAccountRealm0, "Ac[GT;Ba&m@");
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection(simplePrincipalCollection0);
      Class<Realm> class0 = Realm.class;
      Collection<Realm> collection0 = simplePrincipalCollection0.byType(class0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(collection0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      locale0.getUnicodeLocaleKeys();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode1);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("\"aC &YQ<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [\"aC &YQ<].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      Integer integer0 = new Integer(1518);
      defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeCookiePath("");
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection("Ac[GT;q&m@", "Ac[GT;q&m@");
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection(simplePrincipalCollection0, "gzG>*'a1E'!oLlnqc");
      simplePrincipalCollection2.addAll((PrincipalCollection) simplePrincipalCollection0);
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection4 = new SimplePrincipalCollection(simplePrincipalCollection1);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager((Realm) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realm argument cannot be null
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieMaxAge(1523);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookiePath("8HJ-`SnfcVWcR5kO");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection(simplePrincipalCollection0, "Nl^");
      simplePrincipalCollection2.clear();
      simplePrincipalCollection2.addAll((PrincipalCollection) simplePrincipalCollection0);
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection4 = new SimplePrincipalCollection(simplePrincipalCollection1);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7212257503166537
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http");
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(servletRequest0).getRemoteHost();
      doReturn((String) null).when(servletRequest0).getServerName();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper1.getServerName();
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper2.setRequest(servletRequestWrapper1);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) servletResponseWrapper0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper2.getRemoteHost();
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper1);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) servletRequestWrapper4, (ServletResponse) servletResponseWrapper3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.servlet.ServletRequestWrapper cannot be cast to javax.servlet.http.HttpServletRequest
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '0';
      charArray0[2] = ',';
      charArray0[3] = 'h';
      charArray0[4] = 'P';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("!J)", charArray0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(usernamePasswordToken0, "DATo{ifWZv` mo");
      Class<Realm> class0 = Realm.class;
      Collection<Realm> collection0 = simplePrincipalCollection0.byType(class0);
      ModularRealmAuthorizer modularRealmAuthorizer0 = new ModularRealmAuthorizer(collection0);
      Collection<Realm> collection1 = modularRealmAuthorizer0.getRealms();
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager(collection1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realms collection argument cannot be empty.
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Could not find root logger information. Is this OK?");
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4659497192528064
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.newSessionManagerInstance();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("{$'%pttPa4x");
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("] from the thread context ClassLoader.  Trying the current ClassLoader...");
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      Permission permission1 = wildcardPermissionResolver2.resolvePermission("{$'%pttPa4x");
      WildcardPermission wildcardPermission0 = new WildcardPermission("{$'%pttPa4x", true);
      wildcardPermission0.implies(permission1);
      WildcardPermission wildcardPermission1 = new WildcardPermission("No session found for the incoming request.  The Subject instance created for the incoming request will not have an associated Session.", false);
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver4 = new WildcardPermissionResolver();
      wildcardPermissionResolver4.resolvePermission("L8tQ7N)}tf6%");
      wildcardPermission0.implies(permission0);
      wildcardPermission0.implies(permission1);
      WildcardPermission wildcardPermission2 = new WildcardPermission("CPe1[ >PJ{RJ#.uao", false);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      boolean boolean0 = defaultWebSecurityManager0.isAuthenticated((Session) null);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("sessionMode is 'jsecurity'.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [sessionMode is 'jsecurity'.].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      Integer integer0 = new Integer(1555);
      defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("{$'%pttPa4x");
      Permission permission1 = wildcardPermissionResolver0.resolvePermission("*Vl[quKb/89%'psw");
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      Permission permission2 = wildcardPermissionResolver1.resolvePermission("*Vl[quKb/89%'psw");
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      WildcardPermission wildcardPermission0 = new WildcardPermission("indvdp7rbLG^", true);
      WildcardPermission wildcardPermission1 = new WildcardPermission("indvdp7rbLG^", true);
      permission0.implies(wildcardPermission1);
      WildcardPermission wildcardPermission2 = new WildcardPermission(".%}dnG`", false);
      wildcardPermissionResolver0.resolvePermission("*Vl[quKb/89%'psw");
      wildcardPermissionResolver1.resolvePermission("zZDj)j-'");
      permission2.implies(permission1);
      WildcardPermission wildcardPermission3 = new WildcardPermission(".%}dnG`");
      wildcardPermission3.implies(permission0);
      wildcardPermission3.implies(permission0);
      WildcardPermissionResolver wildcardPermissionResolver4 = new WildcardPermissionResolver();
      wildcardPermission2.implies(permission0);
      permission2.implies(permission1);
      wildcardPermission2.implies(wildcardPermission1);
      wildcardPermission2.implies(permission2);
      WildcardPermissionResolver wildcardPermissionResolver5 = new WildcardPermissionResolver();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("Account [");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [Account [].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("{$;%fttPa4x");
      Permission permission1 = wildcardPermissionResolver0.resolvePermission("*Vl[quKb/89%'psw");
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      Permission permission2 = wildcardPermissionResolver1.resolvePermission("*Vl[quKb/89%'psw");
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      Permission permission3 = wildcardPermissionResolver3.resolvePermission("indvdp7rbLG^");
      WildcardPermission wildcardPermission0 = new WildcardPermission("indvdp7rbLG^", false);
      permission0.implies(wildcardPermission0);
      WildcardPermission wildcardPermission1 = new WildcardPermission(".%}dnG`", false);
      permission2.implies(permission1);
      WildcardPermission wildcardPermission2 = new WildcardPermission(".%}dnG`");
      wildcardPermission2.implies(permission0);
      wildcardPermission2.implies(permission0);
      WildcardPermissionResolver wildcardPermissionResolver4 = new WildcardPermissionResolver();
      wildcardPermission1.implies(permission0);
      permission2.implies(permission1);
      wildcardPermission1.implies(wildcardPermission0);
      wildcardPermission1.implies(permission2);
      WildcardPermission wildcardPermission3 = new WildcardPermission(", which is enabled by default when the ", false);
      permission0.implies(wildcardPermission0);
      permission0.implies(permission1);
      WildcardPermissionResolver wildcardPermissionResolver5 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver6 = new WildcardPermissionResolver();
      wildcardPermission2.implies(wildcardPermission3);
      wildcardPermission2.implies(permission3);
      WildcardPermission wildcardPermission4 = new WildcardPermission("indvdp7rbLG^");
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver0.resolvePermission("{$'%pttPa4x");
      Permission permission1 = wildcardPermissionResolver0.resolvePermission("*Vl[quKb/89%'psw");
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      wildcardPermissionResolver2.resolvePermission("{$'%pttPa4x");
      wildcardPermissionResolver2.resolvePermission("{$'%pttPa4x");
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("{$'%pttPa4x");
      WildcardPermissionResolver wildcardPermissionResolver4 = new WildcardPermissionResolver();
      WildcardPermission wildcardPermission0 = new WildcardPermission("{$'%pttPa4x", true);
      WildcardPermission wildcardPermission1 = new WildcardPermission("{$'%pttPa4x", true);
      wildcardPermission1.implies(permission1);
      WildcardPermission wildcardPermission2 = new WildcardPermission("Z]D7", false);
      wildcardPermission2.implies(wildcardPermission0);
      WildcardPermission wildcardPermission3 = new WildcardPermission(".%}dnG`");
      wildcardPermission2.implies(wildcardPermission0);
      WildcardPermission wildcardPermission4 = new WildcardPermission("ivndvdp7rbLG^", false);
      wildcardPermission4.implies(permission0);
      WildcardPermissionResolver wildcardPermissionResolver5 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver6 = new WildcardPermissionResolver();
      wildcardPermission2.implies(wildcardPermission1);
      wildcardPermission1.implies(permission0);
      wildcardPermission4.implies(permission0);
      WildcardPermission wildcardPermission5 = new WildcardPermission(";", false);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm(";");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }
}
