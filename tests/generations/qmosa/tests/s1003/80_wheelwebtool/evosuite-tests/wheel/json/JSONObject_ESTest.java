/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 15 12:47:13 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Array;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6457736637370948
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>(hashMap2);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      Boolean boolean0 = new Boolean(false);
      BiFunction<Boolean, Float, Float> biFunction0 = (BiFunction<Boolean, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyBoolean() , anyFloat());
      hashMap7.compute(boolean0, biFunction0);
      hashMapArray0[2] = hashMap8;
      hashMapArray0[3] = hashMap7;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean boolean1 = new Boolean(false);
      linkedList0.add("Expected a ',' or ']'");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long0 = new Long((-1L));
      Object object0 = JSONObject.NULL;
      Boolean boolean2 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject((Object) hashMap3);
      jSONObject0.toJSONArray(jSONArray0);
      Long long1 = new Long((-1L));
      jSONObject0.putOpt("toS", long1);
      jSONObject0.toString((-26674136), 1792);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2150246526274193
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList1.clone();
      linkedList2.add((Integer) null);
      Integer integer0 = new Integer((-20664796));
      linkedList2.add(integer0);
      linkedList1.add((Integer) null);
      linkedList1.toArray();
      Integer integer1 = new Integer(44);
      Integer integer2 = new Integer(44);
      linkedList2.add(integer2);
      linkedList1.offer((Integer) null);
      linkedList2.offerLast((Integer) null);
      Byte byte0 = new Byte((byte)13);
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      JSONObject.doubleToString((-20664796));
      try { 
        jSONObject0.getDouble("%hx]dN3O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%hx]dN3O\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f(#ih";
      stringArray0[1] = "f(#ih";
      stringArray0[2] = "f(#ih";
      stringArray0[5] = "f(#ih";
      stringArray0[5] = "P>+Qcza ssL";
      Integer integer0 = Integer.getInteger("VRn", 92);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      Integer integer1 = new Integer(92);
      Integer integer2 = new Integer((-52617862));
      Integer integer3 = new Integer((-2543));
      Integer.getInteger("f(#ih", integer1);
      Integer.compare((-825), (-26713449));
      Integer.divideUnsigned(16, 34);
      linkedList0.add(integer0);
      JSONObject.quote("c3o}'?S</I");
      Integer integer4 = new Integer((-825));
      assertFalse(integer4.equals((Object)integer1));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.908376037170489
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = new Integer((-271));
      Integer.min(13, (-2586));
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = "true";
      JSONObject jSONObject1 = jSONObject0.put("true", false);
      jSONObject1.optBoolean("true", false);
      jSONObject1.optBoolean("true");
      jSONObject1.getString("true");
      JSONObject.getNames((Object) jSONObject1);
      JSONObject.doubleToString((-271));
      JSONObject jSONObject2 = jSONObject1.put("@yn&FUU ;_y", (-2849.18));
      jSONObject1.put("gettoUpperCase", 71);
      jSONObject2.keys();
      JSONObject.numberToString(integer0);
      JSONObject.numberToString(integer0);
      Integer.getInteger("L8$R|fDEa^xZYl", integer0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject1.put("L8$R|fDEa^xZYl", (Collection) linkedList0);
      String string1 = "va";
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      // Undeclared exception!
      try { 
        linkedList0.addAll(75, (Collection<? extends Boolean>) linkedList1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 75, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9336645805393706
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "3#EOV";
      stringArray0[2] = "3#EOV";
      stringArray0[3] = ">ktQJ";
      stringArray0[4] = "3#EOV";
      stringArray0[5] = "3#EOV";
      stringArray0[6] = "3#EOV";
      stringArray0[7] = "3#EOV";
      stringArray0[8] = "3#EOV";
      JSONObject jSONObject0 = new JSONObject("3#EOV", stringArray0);
      JSONObject.quote("%v_Dj8JCEWMeU;I%*i`");
      jSONObject0.optBoolean("[x=oV5Y", true);
      jSONObject0.optDouble((String) null);
      JSONObject jSONObject1 = jSONObject0.put("", (-948));
      JSONObject.getNames((Object) jSONObject1);
      jSONObject1.append("3#EOV", "\"%v_Dj8JCEWMeU;I%*i`\"");
      JSONObject.getNames((Object) "JSONArray initial value should be a string or collection or array.");
      jSONObject0.append(":", "JSONArray initial value should be a string or collection or array.");
      jSONObject1.optInt("");
      jSONObject0.getDouble("");
      jSONObject0.keys();
      try { 
        jSONObject1.getInt("3#EOV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3#EOV\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2665105488429984
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a Boolean.";
      String string1 = "-,l,L;#ETS";
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject1 = jSONObject0.put("-,l,L;#ETS", (Map) hashMap0);
      String string2 = "`Z;";
      Long long0 = new Long(981L);
      hashMap0.putIfAbsent((Float) null, long0);
      jSONObject1.put("] is not a Boolean.", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-1222), (-1222));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0414440483959675
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float.min(2627.78F, 2627.78F);
      Float.isFinite(2627.78F);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P>Z+Qza NssL";
      stringArray0[1] = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject("P>Z+Qza NssL", stringArray0);
      Integer integer0 = new Integer((-2908));
      JSONObject jSONObject1 = new JSONObject((Object) "wheel.json.JSONArray");
      byte byte0 = (byte) (-90);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (byte) (-90), (-2908));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.448437455613918
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>(hashMap2);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap3;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      hashMapArray0[2] = hashMap7;
      hashMapArray0[3] = hashMap6;
      String string0 = "isappend";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isappend", 32);
      jSONObject1.getLong("isappend");
      String string1 = "KJ}";
      jSONObject1.put("isappend", 0L);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("iNnbH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of iNnbH
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.315888226521644
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>(hashMap5);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9;awn";
      stringArray0[1] = "P>Z+Qza NssL";
      stringArray0[2] = "9;awn";
      stringArray0[3] = "P>Z+Qza NssL";
      stringArray0[4] = "P>Z+Qza NssL";
      JSONObject jSONObject0 = new JSONObject(hashMap2, stringArray0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("P>Z+Qza NssL", jSONArray0);
      Boolean boolean1 = new Boolean("P>Z+Qza NssL");
      HashMap<String, Byte> hashMap9 = new HashMap<String, Byte>();
      JSONObject jSONObject1 = jSONObject0.accumulate(",", hashMap3);
      JSONObject jSONObject2 = new JSONObject((Object) "9;awn");
      assertEquals(3, jSONObject2.length());
      
      JSONObject jSONObject3 = new JSONObject((Object) hashMap6);
      JSONObject jSONObject4 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(1, jSONObject4.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Float float0 = new Float(2233.98);
      JSONTokener jSONTokener0 = new JSONTokener(",\n");
      String string0 = "qgE{tv>qY|S";
      JSONTokener jSONTokener1 = new JSONTokener("qgE{tv>qY|S");
      JSONTokener jSONTokener2 = new JSONTokener("{");
      JSONTokener jSONTokener3 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4961673231882346
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[10];
      stringArray0[0] = ",\n";
      stringArray0[1] = ",\n";
      stringArray0[6] = "a_";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = "PZ+Qza NsL";
      JSONObject jSONObject0 = new JSONObject("] is not a number.", stringArray0);
      jSONObject0.accumulate(",\n", ",\n");
      Boolean boolean0 = new Boolean(",\n");
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject1 = jSONObject0.accumulate(",\n", "/+1aD`##eZ}");
      JSONObject jSONObject2 = new JSONObject(object0);
      jSONObject1.isNull(",\n");
      String string0 = "Unclosed comment";
      jSONObject1.optDouble("Rx3o!P");
      try { 
        jSONObject2.getString("/;aHwn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/;aHwn\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      Boolean boolean0 = new Boolean(false);
      BiFunction<Boolean, Float, Float> biFunction0 = (BiFunction<Boolean, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyBoolean() , anyFloat());
      hashMap7.compute(boolean0, biFunction0);
      hashMapArray0[2] = hashMap8;
      HashMap<String, Byte> hashMap9 = new HashMap<String, Byte>();
      Float.isFinite(1578.87F);
      Boolean boolean1 = Boolean.valueOf(false);
      hashMap1.putIfAbsent(boolean1, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.optJSONArray("iswrite");
      Boolean boolean2 = new Boolean((String) null);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.681241030423243
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((byte) (-33));
      Short.toUnsignedInt((byte) (-33));
      JSONObject.getNames((Object) short0);
      jSONObject0.optDouble("hI @J", 0.0);
      Short short1 = new Short((byte) (-33));
      jSONObject0.put("getpush", (Object) short1);
      Byte byte0 = new Byte((byte)0);
      jSONObject0.accumulate("\r", byte0);
      // Undeclared exception!
      jSONObject0.toString(65503);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.452888727960641
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte) (-55));
      Byte.compare((byte) (-55), (byte) (-128));
      Byte.compare((byte) (-61), (byte)0);
      Byte.compare((byte)4, (byte) (-55));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("toS", (Object) linkedList0);
      String string0 = "";
      jSONObject0.optString("toS", "");
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2715140305662236
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "[";
      jSONObject0.accumulate("[", "[");
      JSONObject jSONObject1 = jSONObject0.put("[", 0L);
      Long long0 = new Long(0L);
      JSONObject.quote("\">)_p+pZk^Qq8z");
      JSONObject.getNames((Object) long0);
      jSONObject1.optDouble("[");
      try { 
        jSONObject0.getBoolean("\"\">)_p+pZk^Qq8z\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\">)_p+pZk^Qq8z\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONObject.getNames((Object) linkedList1);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.31965124441119
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[1] = stringArray0[0];
      String string0 = "] is not a number.";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = "P>Z+Qza NssL";
      JSONObject jSONObject0 = new JSONObject("] is not a number.", stringArray0);
      jSONObject0.accumulate(",Y", stringArray0[0]);
      Boolean boolean0 = new Boolean(",Y");
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      try { 
        jSONObject0.accumulate(stringArray0[0], "/+1aD`##eZ}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8965650397669362
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1167);
      Integer.compare(1167, (-3598));
      Integer integer1 = new Integer(4803);
      Integer.remainderUnsigned((-4177984), 92);
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer(9);
      Integer.toUnsignedLong(9);
      Integer.compare(2, 1167);
      Integer.divideUnsigned(16, 1167);
      linkedList0.add(integer4);
      Float float0 = new Float(0.0F);
      Long long0 = new Long((-949L));
      Short short0 = new Short((short)58);
      Short.toUnsignedInt((short)58);
      Short.toUnsignedInt((short)2);
      Float float1 = new Float(1.0F);
      JSONObject.getNames((Object) float1);
      Integer integer5 = new Integer(4803);
      JSONObject jSONObject0 = new JSONObject(integer2);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.680421054462574
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt((String) null, object0);
      jSONObject0.isNull("Ep_KW?9h}Zk{z");
      try { 
        jSONObject0.getJSONObject("Ep_KW?9h}Zk{z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ep_KW?9h}Zk{z\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Float.min(2627.78F, 2627.78F);
      Double.max(1.0, 0.0);
      Double.sum(2750.35, 1829.6992524);
      Double.isFinite((-1669.79234));
      Double.min(0.0, 1960.60986356482);
      Double.max(0.0, 0.0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3958200206341207
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.putOpt("", "");
      int int0 = 3521;
      StringWriter stringWriter0 = new StringWriter(3521);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\f");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "to");
      stringWriter2.close();
      stringWriter2.append((CharSequence) "");
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter('7');
      stringWriter0.append((CharSequence) "to");
      stringWriter2.write("]d~&=");
      StringWriter stringWriter5 = stringWriter2.append('7');
      stringWriter1.write(3521);
      stringWriter0.flush();
      jSONObject0.write(stringWriter5);
      Long long0 = new Long(0L);
      String string1 = "*5G;}d$xETN";
      JSONObject jSONObject1 = jSONObject0.put("*5G;}d$xETN", true);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer integer0 = new Integer(108);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "va";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.592931809033179
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      String string0 = "null";
      stringArray0[0] = "null";
      Long.compareUnsigned(602L, 0L);
      Long.getLong("toJ", 0L);
      Long.toUnsignedString(0L);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put("toJ", (-478.67259468834));
      jSONObject0.toString();
      jSONObject1.optLong("0");
      jSONObject1.toString();
      String string1 = "Substring bounds error";
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7824381432069236
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f(#h";
      stringArray0[1] = "f(#h";
      stringArray0[2] = "wheel.json.JSONArray";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "9wn";
      stringArray0[5] = "P>Z+Qza NssL";
      Short short0 = new Short((short) (-620));
      JSONObject jSONObject0 = new JSONObject("] is not a number.", stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("f(#h", "f(#h");
      Boolean boolean0 = new Boolean("f(#h");
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject2 = jSONObject1.put("Null pointer", (Map) hashMap0);
      jSONObject2.keys();
      Object object1 = JSONObject.NULL;
      jSONObject2.accumulate("f(#h", "/+1aD`##eZ}");
      Object object2 = new Object();
      JSONObject jSONObject3 = new JSONObject(object2);
      jSONObject3.optBoolean("wheel.json.JSONArray");
      jSONObject0.optString("] is not a number.");
      assertEquals(2, jSONObject0.length());
      
      JSONArray jSONArray0 = jSONObject2.getJSONArray("f(#h");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.206794283276096
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Float float0 = new Float(2661.61249);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "Z,DE$/W";
      Float.min(839.6785F, 1615.98F);
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject1 = jSONObject0.put("Z,DE$/W", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("Z,DE$/W");
      Long long0 = new Long(0L);
      hashMap0.put("Z,DE$/W", long0);
      Long long1 = new Long(0L);
      jSONObject2.optJSONObject("Z,DE$/W");
      Long long2 = new Long(0L);
      try { 
        jSONObject1.getDouble("Z,DE$/W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z,DE$/W\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.110655534538404
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      Double double0 = new Double(0.0);
      hashMap0.put(double0, double0);
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 1513.60791904039);
      jSONObject1.optDouble("rSz|QN", 1513.60791904039);
      jSONObject0.optInt((String) null, (-1889));
      JSONObject jSONObject2 = jSONObject1.putOpt(",:]}/\"[{;=#", jSONObject0);
      jSONObject0.optLong((String) null, (long) (-1889));
      jSONObject0.getJSONObject(",:]}/\"[{;=#");
      jSONObject2.getString(",:]}/\"[{;=#");
      jSONObject2.opt(",:]}/\"[{;=#");
      JSONObject jSONObject3 = jSONObject2.put("wheel.json.JSONObject@0000000001", (Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject4 = jSONObject3.put("m-VlUDW,xn<B#!_k@V", (Collection) linkedList0);
      jSONObject4.put("0", true);
      String string0 = "COqpGp_&6.3tYm@EG";
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject2.write(stringWriter0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.358796041007401
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("L@", "L@");
      StringWriter stringWriter0 = new StringWriter(2635);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\f");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "to");
      stringWriter2.close();
      stringWriter2.append((CharSequence) "L@");
      StringWriter stringWriter3 = new StringWriter();
      stringWriter0.close();
      StringWriter stringWriter4 = new StringWriter('7');
      stringWriter0.append((CharSequence) "to");
      stringWriter2.write("]d~&=");
      StringWriter stringWriter5 = stringWriter2.append('7');
      stringWriter5.write(2635);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("]d~&=", (Map) hashMap0);
      stringWriter1.write(2635);
      stringWriter0.flush();
      jSONObject0.write(stringWriter5);
      Long long0 = new Long(0L);
      JSONObject jSONObject2 = jSONObject0.put("*5G;}d$xETN", true);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.289646330963701
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Float.min(2612.019F, 2612.019F);
      Float.isFinite(2612.019F);
      long long0 = (-3087L);
      Long long1 = new Long((-3087L));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "9wn";
      stringArray0[2] = "9wn";
      stringArray0[3] = "9wn";
      stringArray0[4] = "P>Z+Qza NssL";
      stringArray0[5] = "9wn";
      stringArray0[6] = "P>Z+Qza NssL";
      JSONObject jSONObject0 = new JSONObject(long1, stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("9wn", object0);
      jSONObject0.optBoolean("P>Z+Qza NssL", true);
      Boolean boolean0 = new Boolean("9wn");
      boolean boolean1 = new Boolean(true);
      jSONObject0.get("9wn");
      try { 
        jSONObject1.getDouble("iOJ{aC^7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iOJ{aC^7\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3110204811135158
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "3#EOV");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("3#EOV", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("3#EOV", 2680);
      jSONObject1.put("EMlL mz'rl'!z*E3jX", (double) 2680);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2929322920032833
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("2502.198618155190", "2502.198618155190");
      jSONObject1.optInt("2502.198618155190");
      jSONObject0.opt("");
      try { 
        jSONObject0.getJSONArray("2502.198618155190");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2502.198618155190\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6456234075955676
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Y2Wx\\_[#>.^S";
      jSONObject0.isNull("Y2Wx_[#>.^S");
      Boolean.getBoolean("");
      JSONObject jSONObject1 = new JSONObject((Object) "Y2Wx_[#>.^S");
      jSONObject1.keys();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalAnd(false, false);
      Boolean boolean1 = new Boolean("");
      linkedList0.add(boolean1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      int int0 = 719;
      // Undeclared exception!
      jSONObject1.toString(719, 719);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.584838202797333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      StringWriter stringWriter0 = new StringWriter(3521);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\f");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "to");
      stringWriter2.close();
      stringWriter2.append((CharSequence) "");
      String string1 = "Expected '";
      int int0 = 3;
      jSONObject1.put("Expected '", 3);
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6794223136555044
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>(hashMap1);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap3;
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      BiFunction<Boolean, Float, Float> biFunction0 = (BiFunction<Boolean, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMapArray0[2] = hashMap7;
      hashMapArray0[3] = hashMap6;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean boolean0 = new Boolean(false);
      linkedList0.add((String) null);
      linkedList0.add("Expected a ',' or ']'");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long0 = new Long((-1L));
      Object object0 = JSONObject.NULL;
      Boolean boolean1 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject((Object) hashMap2);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.985027775164381
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("2502.198618155190", "2502.198618155190");
      StringWriter stringWriter0 = new StringWriter(128);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "2502.198618155190");
      StringWriter stringWriter2 = stringWriter1.append('7');
      jSONObject0.optInt("j", 128);
      JSONObject jSONObject2 = jSONObject1.putOpt("JSON does not allow non-finite numbers.", stringWriter2);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "j";
      stringArray0[1] = "JSON does not allow non-finite numbers.";
      stringArray0[2] = "2502.198618155190";
      stringArray0[3] = "2502.198618155190";
      stringArray0[4] = "2502.198618155190";
      Boolean boolean0 = Boolean.TRUE;
      jSONObject2.accumulate("2502.198618155190", boolean0);
      jSONObject1.optLong("gethashCode");
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      jSONObject0.optDouble((String) null, (double) 128);
      jSONObject1.keys();
      Short short0 = new Short((short) (-8));
      jSONObject2.append("2502.198618155190", short0);
      JSONObject.getNames((Object) stringWriter2);
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6833438822829554
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add((Integer) null);
      Integer integer0 = new Integer(1167);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 9);
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      hashMapArray0[0] = hashMap0;
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      hashMapArray0[1] = hashMap1;
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      hashMapArray0[2] = hashMap2;
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      hashMapArray0[3] = hashMap3;
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      hashMapArray0[4] = hashMap4;
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      hashMapArray0[5] = hashMap5;
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      Short short0 = new Short((short) (-3805));
      Long long0 = new Long((-259L));
      HashMap<Object, Long> hashMap7 = new HashMap<Object, Long>();
      HashMap<Object, Long> hashMap8 = new HashMap<Object, Long>(hashMap7);
      Long long1 = Long.valueOf(0L);
      hashMap8.put(long1, long0);
      Long long2 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8450844446211465
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "null";
      Long.compareUnsigned(602L, (-11L));
      Long.toUnsignedString(0L);
      JSONObject jSONObject1 = jSONObject0.put("toJ", (-478.67259468834));
      jSONObject0.toString();
      jSONObject1.optLong("0");
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject0.put("{\"java.lang.String@0000000002\":java.lang.Double@0000000003}", (Object) "null");
      jSONObject2.optBoolean("{\"java.lang.String@0000000002\":java.lang.Double@0000000003}");
      jSONObject1.remove("toJ");
      jSONObject0.optBoolean("Substring bounds error", true);
      String string0 = "joi";
      try { 
        jSONObject1.getLong("r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7889474249331805
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.add((Integer) null);
      Integer integer0 = new Integer((-20664796));
      linkedList2.add(integer0);
      linkedList1.add((Integer) null);
      linkedList1.toArray();
      Integer integer1 = new Integer(44);
      linkedList1.offer((Integer) null);
      linkedList2.offerLast((Integer) null);
      Byte byte0 = new Byte((byte)13);
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Float float0 = new Float(1616.480226921);
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9576699287932238
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "Expected a ',' or ']'";
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", (Map) hashMap1);
      jSONObject1.optJSONObject("Expected a ',' or ']'");
      try { 
        jSONObject1.getDouble("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5320186739732677
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Float float0 = new Float(1616.480226921);
      Float.max(1143.35F, (byte)11);
      Byte.compare((byte)11, (byte)65);
      Integer integer0 = new Integer((-54));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (long) (byte)11);
      jSONObject1.optLong("wheel.json.JSONObject");
      boolean boolean0 = new Boolean("wheel.json.JSONObject");
      jSONObject0.get("] is not a Boolean.");
      jSONObject0.optString("] is not a Boolean.");
      jSONObject0.optDouble(",\n");
      try { 
        jSONObject1.getString("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethashCode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.176917878489489
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("2502.198618155190", "2502.198618155190");
      String string0 = JSONObject.valueToString(jSONObject1);
      jSONObject0.put("2502.198618155190", (Collection) null);
      jSONObject0.opt("");
      jSONObject0.getJSONArray("2502.198618155190");
      String string1 = JSONObject.valueToString("2502.198618155190");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.751227668535626
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[10];
      stringArray0[0] = "f(#h";
      stringArray0[1] = ",";
      stringArray0[2] = "wheel.json.JSONArray";
      stringArray0[3] = "] is not a number.";
      Object object1 = new Object();
      JSONObject jSONObject0 = new JSONObject(object1);
      JSONObject jSONObject1 = jSONObject0.put("mpqi_:kXIh", 0);
      Float float0 = new Float((float) (-1102L));
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      Float float1 = new Float(0.0);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optInt("Expected a ',' or ']'", 0);
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      jSONObject3.toString((-1070), 2682);
      JSONObject jSONObject4 = jSONObject1.accumulate("L^,(\"|&]bgb", (Object) null);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("wheel.json.JSONArray", (Collection) linkedList0);
      try { 
        jSONObject4.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5601507502065712
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      Boolean.valueOf("SO8gu*3\n");
      Float float0 = new Float(1.0F);
      Float float1 = new Float(1.0F);
      boolean boolean0 = new Boolean("SO8gu*3\n");
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 7);
      hashMap5.getOrDefault(hashMap2, (Float) null);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      hashMapArray0[4] = hashMap0;
      hashMapArray0[6] = hashMap5;
      Integer.remainderUnsigned(871, 871);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      Float float2 = new Float((-1496.73F));
      Boolean boolean1 = Boolean.TRUE;
      jSONObject0.toJSONArray((JSONArray) null);
      String string0 = JSONObject.valueToString(hashMap5, 0, 871);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      String string0 = JSONObject.valueToString(linkedList0, 91, (-10));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2769130758173466
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject1 = jSONObject0.put("-,l,L;#ETS", (Map) hashMap0);
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      Boolean.valueOf("-,l,L;#ETS");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("] is not a number.");
      Boolean boolean0 = new Boolean("-,l,L;#ETS");
      JSONObject jSONObject2 = jSONObject1.append("_YD7HA!", hashMap3);
      Long long0 = new Long(0L);
      try { 
        jSONObject2.put((String) null, (Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0941693886928134
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Float float0 = new Float(2627.78F);
      Float.max(2627.78F, 2627.78F);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      Boolean boolean0 = new Boolean(false);
      BiFunction<Object, Float, Float> biFunction0 = (BiFunction<Object, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HashMap<String, Byte> hashMap2 = new HashMap<String, Byte>();
      Float.isFinite(2627.78F);
      Float.sum(2627.78F, 2627.78F);
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.put("\b", true);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add((Integer) null);
      Integer integer0 = new Integer(1167);
      Integer.compare(1167, (-3598));
      Integer integer1 = new Integer(4803);
      String string0 = JSONObject.quote("'aK*/myNC)_");
      assertEquals("\"'aK*/myNC)_\"", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.079586242770408
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add((Integer) null);
      Integer integer0 = new Integer(1167);
      Integer.compare(1167, (-3598));
      Integer integer1 = new Integer(4803);
      Integer.remainderUnsigned((-4177962), 92);
      Integer integer2 = new Integer(2);
      Float.max((-4177962), 0.0F);
      Byte.compare((byte)65, (byte)65);
      Integer integer3 = new Integer((-4177962));
      Integer integer4 = new Integer(1167);
      JSONObject jSONObject0 = new JSONObject(integer1);
      jSONObject0.putOpt("val", (Object) null);
      try { 
        jSONObject0.getBoolean("=&J8LSRD23");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=&J8LSRD23\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8861058856136323
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray(",\n");
      String string0 = "f+N4Sny +YaIbAc~+";
      JSONObject jSONObject1 = jSONObject0.put("f+N4Sny +YaIbAc~+", 815.4078659);
      hashMap0.values();
      jSONObject0.put("i@P&YQ", (-1663L));
      jSONObject1.getString("f+N4Sny +YaIbAc~+");
      Short short0 = new Short((short)8);
      jSONObject1.getLong("i@P&YQ");
      Short.compare((short)39, (short)8192);
      JSONObject jSONObject2 = jSONObject0.putOpt("*stYms}HF,M&}d8[q", short0);
      jSONObject2.put("2+&1vD)y3A", (Map) hashMap0);
      jSONObject1.optInt("Null key.");
      jSONObject1.has("java.lang.Double@0000000003");
      jSONObject0.optJSONArray("o?fRdY?bcotr CLL4m");
      JSONObject jSONObject3 = jSONObject0.put(",\n", false);
      Float float0 = new Float(Double.NaN);
      jSONObject3.optBoolean((String) null);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Float.min(2106.0F, 2106.0F);
      Double.sum(0.0, 0.0);
      Double.max((-2670.087), 0.0);
      Double.sum(1560.713, (-1608.9162));
      Double.max((-2670.087), 2106.0F);
      Double.max(2106.0F, (-1708.09));
      Double.max(0.0, (-48.203199999999924));
      double double0 = new Float(2106.0F);
      Double.max((-1328.737989715621), (-1708.09));
      Float float0 = new Float(Double.NaN);
      Float.sum(2106.0F, (-242.9869F));
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte) (-55));
      Byte.compare((byte) (-55), (byte) (-128));
      Byte.compare((byte) (-61), (byte)0);
      Byte.compare((byte) (-61), (byte) (-55));
      Byte.compare((byte)4, (byte) (-55));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.optString("toS", "");
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5482985022557
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[7];
      Short short0 = new Short((short) (-1772));
      Long long0 = new Long(0L);
      hashMap0.put(short0, long0);
      stringArray0[0] = "null";
      jSONObject0.optDouble("null", Double.NaN);
      boolean boolean0 = new Boolean("null");
      Double.max((-4030.0), Double.NaN);
      Float float0 = new Float((-1.0));
      jSONObject0.optString("null", "null");
      try { 
        jSONObject0.getString("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.340399148387094
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>(hashMap2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      hashMapArray0[2] = hashMap8;
      hashMapArray0[3] = hashMap7;
      hashMapArray0[4] = hashMap0;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("getjoin");
      linkedList1.add("n1E#2\"${");
      JSONObject jSONObject0 = new JSONObject((Object) "getjoin");
      JSONObject jSONObject1 = jSONObject0.put("getjoin", 3579L);
      jSONObject0.optLong("getjoin");
      try { 
        jSONObject1.getBoolean("getjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getjoin\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2013649317557062
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      String string0 = "\\f";
      jSONObject1.append("toL", "zkvsnkg#f");
      jSONObject0.getString("");
      try { 
        jSONObject0.getBoolean("toL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toL\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 61, 61);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "null";
      Long.compareUnsigned(602L, (-11L));
      Long.toUnsignedString(0L);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 53, (-1));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9714549503478573
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "2502.198618155190";
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.put("2502.198618155190", 51);
      String string1 = null;
      Integer integer0 = new Integer(51);
      byte byte0 = (byte)44;
      Integer integer1 = new Integer((byte) (-128));
      Byte.compare((byte)56, (byte)44);
      Float float0 = new Float((double) 51);
      try { 
        jSONObject0.put((String) null, 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.3490042264203184
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer0 = new Integer(1167);
      Integer.compare(1167, (-3598));
      linkedList0.add((Integer) null);
      Integer integer1 = new Integer(4803);
      Integer.remainderUnsigned((-4177984), 92);
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer(1);
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(92, (-3598));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5805972175005385
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("Y2Wx_[#>.^S");
      jSONObject0.put(")iEgZuNX70)cu3Y`", true);
      JSONObject.doubleToString(2785.3181);
      JSONObject.doubleToString(2785.3181);
      jSONObject0.optLong("&: Mz", (-2946L));
      String string0 = "YGyr UiLL%|f`/qgM";
      jSONObject0.optJSONArray("YGyr UiLL%|f`/qgM");
      Double.max(Double.NaN, 0.0);
      Double.min((-2946L), (-2946L));
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject1.opt((String) null);
      JSONTokener jSONTokener0 = new JSONTokener("2785.3181");
      jSONTokener0.back();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 2785.3181
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.5690547705711797
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 1513.60791904039);
      jSONObject1.optDouble("rSz|QN", 1513.60791904039);
      JSONObject jSONObject2 = jSONObject1.putOpt(",:]}/\"[{;=#", jSONObject0);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.getString(",:]}/\"[{;=#");
      jSONObject2.opt(",:]}/\"[{;=#");
      jSONObject3.put("wheel.json.JSONObject@0000000001", (Map) hashMap0);
      boolean boolean0 = true;
      JSONObject jSONObject4 = jSONObject3.put("COqpGp_&6.3tYm@EG", true);
      jSONObject4.optDouble("wheel.json.JSONObject@0000000001", 1513.60791904039);
      try { 
        jSONObject0.getInt("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.0816048571050256
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[10];
      stringArray0[0] = ",\n";
      stringArray0[1] = ",\n";
      stringArray0[6] = "a_";
      stringArray0[4] = "] is not a number.";
      stringArray0[4] = ",\n";
      stringArray0[5] = "PZ+Qza NsL";
      JSONObject jSONObject0 = new JSONObject("] is not a number.", stringArray0);
      jSONObject0.accumulate(",\n", ",\n");
      Boolean boolean0 = new Boolean(",\n");
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      jSONObject0.accumulate(",\n", "/+1aD`##eZ}");
      JSONObject jSONObject1 = new JSONObject(object0);
      BiFunction<Object, Object, Byte> biFunction0 = (BiFunction<Object, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.8143270579679593
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 1513.60791904039);
      jSONObject1.optDouble("rSz|QN", 1513.60791904039);
      jSONObject0.optInt((String) null, (-1889));
      JSONObject jSONObject2 = jSONObject1.putOpt(",:]}/\"[{;=#", jSONObject0);
      jSONObject0.optLong((String) null, (long) (-1889));
      JSONObject jSONObject3 = jSONObject0.getJSONObject(",:]}/\"[{;=#");
      jSONObject2.getString(",:]}/\"[{;=#");
      jSONObject2.opt(",:]}/\"[{;=#");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject3.put("wheel.json.JSONObject@0000000001", (Collection) linkedList0);
      JSONObject jSONObject4 = jSONObject2.put("wheel.json.JSONObject@0000000001", (Map) hashMap0);
      jSONObject2.optLong("rSz|QN", 0L);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject4.put("m-VlUDW,xn<B#!_k@V", (Collection) linkedList1);
      boolean boolean0 = true;
      jSONObject2.put("COqpGp_&6.3tYm@EG", true);
      try { 
        jSONObject3.getInt("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3288274798399655
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float.min(2627.78F, 2627.78F);
      Float.isFinite(2627.78F);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "9wn";
      stringArray0[2] = "9wn";
      stringArray0[3] = "9wn";
      stringArray0[4] = "P>Z+Qza NssL";
      stringArray0[5] = "9wn";
      stringArray0[6] = "P>Z+Qza NssL";
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("9wn");
      JSONTokener jSONTokener0 = new JSONTokener(stringArray0[1]);
      Byte byte0 = new Byte((byte)96);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Boolean boolean1 = Boolean.valueOf("9wn");
      String string0 = JSONObject.valueToString(boolean1, 70, 70);
      assertNotNull(string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.476658077506991
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a Boolean.";
      String string1 = "-,l,L;#ETS";
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject1 = jSONObject0.put("-,l,L;#ETS", (Map) hashMap0);
      String string2 = "va";
      String string3 = "`Z;";
      jSONObject1.optDouble("`Z;", (-1017.717881));
      jSONObject1.put("] is not a Boolean.", (Map) hashMap0);
      jSONObject0.toString((-1222), (-1222));
      Boolean boolean0 = new Boolean("va");
      try { 
        jSONObject1.getInt("H9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"H9\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.6654348649854196
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("L@", "L@");
      String string0 = JSONObject.valueToString(jSONObject1, 2491, 2491);
      StringWriter stringWriter0 = new StringWriter(2635);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\f");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "to");
      stringWriter2.close();
      stringWriter2.append((CharSequence) "L@");
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter('7');
      stringWriter0.append((CharSequence) "to");
      stringWriter2.write("]d~&=");
      StringWriter stringWriter5 = stringWriter2.append('7');
      stringWriter5.write(2635);
      stringWriter1.write(2635);
      stringWriter0.flush();
      jSONObject0.write(stringWriter5);
      Long long0 = new Long(0L);
      jSONObject0.put("*5G;}d$xETN", true);
      String string1 = jSONObject0.getString("L@");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.9796673133944385
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      StringWriter stringWriter0 = new StringWriter(3521);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\f");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "to");
      stringWriter2.append((CharSequence) "");
      stringWriter2.append('<');
      jSONObject1.toString();
      jSONObject0.optLong("h|tyUrPG6xX");
      jSONObject0.toString();
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject2 = jSONObject1.put("ji*'3ep", (Object) boolean0);
      jSONObject0.toString();
      jSONObject0.optBoolean("Zj\"sESx\"rxu tSpptq", false);
      jSONObject2.optString("*h}<4p");
      Boolean boolean1 = new Boolean("0");
      jSONObject2.isNull((String) null);
      jSONObject1.optInt("-X");
      jSONObject1.optJSONArray("qu");
      boolean boolean2 = jSONObject2.isNull("to");
      assertEquals(2, jSONObject1.length());
      assertTrue(boolean2);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, false);
      BiFunction<Boolean, Float, Float> biFunction0 = (BiFunction<Boolean, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyBoolean() , anyFloat());
      hashMap7.compute(boolean0, biFunction0);
      hashMapArray0[2] = hashMap8;
      HashMap<String, Byte> hashMap9 = new HashMap<String, Byte>();
      Float.isFinite(1578.87F);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      Byte byte0 = new Byte((byte)59);
      HashMap<String, Byte> hashMap10 = new HashMap<String, Byte>();
      HashMap<String, Byte> hashMap11 = new HashMap<String, Byte>();
      Byte byte1 = hashMap9.replace("null", byte0);
      assertNull(byte1);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.8194203311371495
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(101);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(259);
      Object object0 = JSONObject.NULL;
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Integer.divideUnsigned(1891, 123);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      predicate0.test(predicate2);
      predicate3.test(integer1);
      linkedList0.removeIf(predicate3);
      Integer.compare(259, (-2424));
      UnaryOperator.identity();
      Float float0 = new Float((float) 101);
      Float float1 = new Float(1953.577F);
      Integer.getInteger("isvalueOf");
      Integer.divideUnsigned(101, 1);
      Integer integer2 = Integer.getInteger("isvalueOf", 2);
      linkedList0.add(integer2);
      JSONObject.quote("isvalueOf");
      Integer integer3 = new Integer(4083);
      assertEquals(4083, (int)integer3);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9960409942101043
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      Object object1 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getaccumulate";
      JSONObject jSONObject0 = new JSONObject(object1, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("getaccumulate", 449);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.getNames(jSONObject2);
      JSONObject.getNames((Object) jSONObject2);
      jSONObject1.getDouble("getaccumulate");
      jSONObject2.keys();
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      jSONObject2.optDouble((String) null);
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject3.remove("@");
      JSONObject jSONObject4 = new JSONObject();
      Double double0 = new Double(449);
      JSONObject.valueToString(double0);
      jSONObject4.optBoolean("y", false);
      try { 
        jSONObject2.getDouble("getaccumulate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getaccumulate\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6913384553420958
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Float float0 = new Float(2627.78F);
      Float.max(2627.78F, 2627.78F);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONTokener jSONTokener1 = new JSONTokener("n)P;p");
      JSONTokener jSONTokener2 = new JSONTokener("n)P;p");
      JSONTokener jSONTokener3 = new JSONTokener("] not found.");
      jSONTokener0.next();
      Boolean boolean0 = Boolean.TRUE;
      Short short0 = new Short((short)1);
      JSONObject jSONObject0 = new JSONObject(short0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.8649438221337116
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.removeAll(linkedList1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add(";E'iw'ErF\"(mK ");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList2);
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5831417482076728
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      Boolean boolean0 = new Boolean(false);
      BiFunction<Boolean, Float, Float> biFunction0 = (BiFunction<Boolean, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyBoolean() , anyFloat());
      hashMap7.compute(boolean0, biFunction0);
      hashMapArray0[2] = hashMap8;
      HashMap<String, Byte> hashMap9 = new HashMap<String, Byte>();
      Float.isFinite(1578.87F);
      Boolean boolean1 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean1);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = new Float(2627.78F);
      Float.isFinite((float) float0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONTokener jSONTokener1 = new JSONTokener("] is not a number.");
      JSONTokener jSONTokener2 = new JSONTokener("n)P;p");
      JSONTokener jSONTokener3 = new JSONTokener("n)P;p");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONTokener jSONTokener4 = new JSONTokener("] not found.");
      Byte byte0 = new Byte((byte) (-44));
      JSONObject jSONObject1 = new JSONObject((Map) null);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((byte) (-44));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.add((Integer) null);
      String string0 = JSONObject.quote("C(1\"");
      assertEquals("\"C(1\\\"\"", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>(hashMap2);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      Boolean boolean0 = new Boolean(false);
      BiFunction<Boolean, Float, Float> biFunction0 = (BiFunction<Boolean, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = false;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.pollFirst();
      linkedList0.add((String) null);
      Boolean boolean2 = new Boolean(false);
      linkedList0.add("1");
      Byte byte0 = new Byte((byte)101);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap8);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.0086430994294915
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "] is not a number.";
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("not");
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Object object0 = new Object();
      jSONObject0.accumulate("] is not a number.", object0);
      assertEquals(1, jSONObject0.length());
      
      Long.getLong((String) null);
      HashMap<String, Byte> hashMap1 = new HashMap<String, Byte>();
      BiFunction<Object, Object, Byte> biFunction0 = (BiFunction<Object, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 15, (-579));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.toString(614);
      Byte byte0 = new Byte((byte) (-19));
      jSONObject1.toString();
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>(hashMap2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "wheel.json.JSONArray@0000000001");
      stringWriter1.close();
      stringWriter0.append((CharSequence) "wheel.json.JSONArray@0000000001");
      StringWriter stringWriter2 = new StringWriter();
      char char0 = '7';
      String string0 = "]d~&=";
      int int0 = (-3178);
      StringWriter stringWriter3 = null;
      try {
        stringWriter3 = new StringWriter((-3178));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.4233692450992916
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.toString(91);
      Byte byte0 = new Byte((byte) (-19));
      JSONObject jSONObject3 = new JSONObject(byte0);
      String string0 = jSONObject3.toString();
      assertEquals(1, jSONObject3.length());
      
      String string1 = jSONObject0.toString(93);
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.1716604819279075
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float(2627.78F);
      Float.isFinite((float) float0);
      JSONObject jSONObject0 = new JSONObject((Object) "{}");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "}~vfQp 8=`MF\"V|`";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = jSONObject1.toString(23, 23);
      assertEquals("{}", string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6068571632274358
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.pollFirst();
      Integer integer0 = new Integer((byte) (-55));
      linkedList1.offer(integer0);
      Byte byte0 = new Byte((byte) (-55));
      Byte.compare((byte) (-55), (byte) (-128));
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      jSONObject0.has(".v}[}DRb&LRy=(");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>(hashMap2);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap3;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      hashMapArray0[2] = hashMap7;
      hashMapArray0[3] = hashMap6;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      HashMap<String, Byte> hashMap8 = new HashMap<String, Byte>();
      HashMap<String, Byte> hashMap9 = new HashMap<String, Byte>();
      HashMap<String, Byte> hashMap10 = new HashMap<String, Byte>();
      hashMap10.clear();
      hashMap10.clone();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>(hashMap2);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      hashMapArray0[2] = hashMap3;
      hashMapArray0[3] = hashMap7;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Float>[] hashMapArray1 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 5);
      hashMapArray1[0] = hashMap4;
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(hashMap2, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.613129842728147
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = new Integer(2369);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("pW<A#!wL: FLYmcr&", (Object) null);
      try { 
        jSONObject0.getDouble("%@-3pW@Ehu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%@-3pW@Ehu\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.4192361461924854
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Float float0 = new Float(1616.480226921);
      linkedList0.removeAll(linkedList1);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put(" JLpe|", (Object) linkedList0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.4043982342147494
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Short short0 = new Short((short)62);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[2] = "";
      String string0 = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      int int0 = 59;
      jSONObject0.toString(59);
      String string1 = "";
      Double double0 = new Double(Double.NaN);
      Double.max(Double.NaN, 59);
      double double1 = new Integer(59);
      Double.min(59, 59);
      Double.min(59, 59.0);
      try { 
        jSONObject0.putOpt("", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.4431468749657146
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      jSONObject1.optDouble("getgetJSONArray", Double.NaN);
      StringWriter stringWriter0 = new StringWriter(3521);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\f");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "t^oL");
      stringWriter2.append((CharSequence) "");
      stringWriter2.append('<');
      stringWriter2.append((CharSequence) "]d~&=");
      stringWriter0.append((CharSequence) "t^oL");
      stringWriter2.write("]d~&=");
      StringWriter stringWriter3 = stringWriter2.append('7');
      stringWriter1.write(3521);
      stringWriter0.flush();
      jSONObject0.write(stringWriter3);
      Long long0 = new Long(0L);
      JSONObject jSONObject2 = jSONObject0.put("*5G;}d$xETX", true);
      try { 
        jSONObject2.put("*5G;}d$xETX", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.4085294604740177
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.toString(614);
      Byte byte0 = new Byte((byte) (-19));
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject3 = new JSONObject(boolean0);
      assertEquals(1, jSONObject3.length());
      
      String string0 = jSONObject1.toString();
      assertEquals("{}", string0);
      
      JSONObject jSONObject4 = new JSONObject(jSONObject2);
      String string1 = jSONObject4.toString(75);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.4516646133405615
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Float float0 = new Float(1616.480226921);
      linkedList0.removeAll(linkedList1);
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "`k5a693@~CHLsJ1]{E1";
      stringArray0[1] = "=|];+Y;$G3by";
      stringArray0[2] = "\"\"";
      stringArray0[3] = "}~vfQp 8=`MF\"V|`";
      stringArray0[4] = "{B*f,";
      stringArray0[5] = "istoUnsignedLong";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject1.toString(1, 768);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.583781534738938
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Float float0 = new Float(2627.78F);
      Float.isFinite((float) float0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONTokener jSONTokener1 = new JSONTokener("] is not a number.");
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "getdescendingIterator";
      stringArray0[1] = "{}";
      stringArray0[2] = "] is not a number.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject((Object) "] is not a number.");
      jSONObject2.toString(15, 1);
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.add((Integer) null);
      Integer integer0 = new Integer(1167);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 9);
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      hashMapArray0[0] = hashMap0;
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      hashMapArray0[1] = hashMap1;
      hashMapArray0[2] = hashMap1;
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      hashMapArray0[3] = hashMap2;
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      hashMapArray0[4] = hashMap3;
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      hashMapArray0[5] = hashMap4;
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      hashMapArray0[6] = hashMap5;
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      hashMapArray0[7] = hashMap6;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G/w:;[";
      stringArray0[1] = "G/w:;[";
      Integer integer1 = new Integer((byte) (-128));
      String string0 = JSONObject.valueToString(hashMap2, 1167, 1167);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f(#h";
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("gettoString", 324);
      jSONObject1.getInt("gettoString");
      Byte.compare((byte)26, (byte)87);
      Byte.compare((byte)46, (byte)2);
      Float float0 = new Float((-4352.3));
      JSONTokener jSONTokener0 = new JSONTokener("+Y8ZPHix.TRtW");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of +Y8ZPHix.TRtW
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.47285670598804
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float.min(2627.78F, 2627.78F);
      Float.isFinite(2627.78F);
      String string0 = "9wn";
      Long long0 = new Long((-3087L));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "9wn";
      stringArray0[2] = "9wn";
      stringArray0[3] = "9wn";
      stringArray0[4] = "P>Z+Qza NssL";
      stringArray0[5] = "9wn";
      stringArray0[6] = "P>Z+Qza NssL";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("9wn", object0);
      jSONObject1.remove("] is not a number.");
      jSONObject0.optBoolean("P>Z+Qza NssL", true);
      Boolean boolean0 = new Boolean("9wn");
      try { 
        jSONObject1.getBoolean("9wn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9wn\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.841796701783318
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "3#EOV";
      stringArray0[2] = "3#EOV";
      stringArray0[3] = ">ktQJ";
      stringArray0[4] = "3#EOV";
      stringArray0[5] = "3#EOV";
      stringArray0[6] = "3#EOV";
      stringArray0[7] = "3#EOV";
      stringArray0[8] = "3#EOV";
      JSONObject jSONObject0 = new JSONObject("3#EOV", stringArray0);
      boolean boolean0 = true;
      jSONObject0.optBoolean("[x=oV5Y", true);
      JSONObject jSONObject1 = jSONObject0.put("", (-948));
      JSONObject.getNames(jSONObject0);
      JSONObject.getNames((Object) "JSONArray initial value should be a string or collection or array.");
      jSONObject0.append(":", "JSONArray initial value should be a string or collection or array.");
      jSONObject0.getDouble("");
      jSONObject0.keys();
      jSONObject1.remove(">ktQJ");
      String string0 = "Expected a ',' or ']'";
      try { 
        jSONObject1.getInt("3#EOV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3#EOV\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.2956432435504963
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",\n";
      stringArray0[1] = ",\n";
      stringArray0[2] = "wheel.json.JSONArray";
      stringArray0[4] = "] is not a number.";
      stringArray0[4] = "wheel.json.JSONArray";
      stringArray0[5] = "P>Z+Qza NssL";
      JSONObject jSONObject0 = new JSONObject("] is not a number.", stringArray0);
      jSONObject0.accumulate(",\n", ",\n");
      String string0 = "/+1aD`##eZ}";
      Boolean boolean0 = new Boolean(",\n");
      jSONObject0.accumulate(",\n", "/+1aD`##eZ}");
      JSONObject jSONObject1 = new JSONObject(object0);
      BiFunction<Object, Object, Byte> biFunction0 = (BiFunction<Object, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      try { 
        jSONObject0.getLong(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.6160690287481794
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>(hashMap2);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      hashMapArray0[2] = hashMap8;
      hashMapArray0[3] = hashMap7;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean boolean0 = new Boolean(false);
      Float float0 = new Float(1.0F);
      hashMap4.replace(boolean0, float0);
      Integer.remainderUnsigned(83, 2331);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("\b");
      try { 
        jSONObject0.getDouble("getaddFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getaddFirst\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.12531460762738
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      String string0 = "getparseFloat";
      JSONObject jSONObject1 = jSONObject0.putOpt("toL", "toL");
      jSONObject1.getString("");
      try { 
        jSONObject1.getBoolean("toL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toL\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(0.0);
      Double.sum(0.0, 770.3376514230107);
      Double.isFinite(770.3376514230107);
      Double.sum(770.3376514230107, (-65.4740349));
      Double.max((-65.4740349), 0.0);
      Double.max(0.0, 1.0);
      Double.sum(1.0, 0.0);
      Double.max((-1.0), (-4264.379));
      Double.max(Double.NaN, 770.3376514230107);
      Double.max(1.0, Double.NaN);
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.6354098001537567
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      JSONObject jSONObject2 = jSONObject0.putOpt("toL", "toL");
      jSONObject2.getString("");
      jSONObject2.optBoolean("] not found.");
      jSONObject1.optString("\f");
      String string0 = "58Vba3Ydn(@=tO(2_";
      jSONObject0.optLong("58Vba3Ydn(@=tO(2_");
      Long long0 = new Long(0L);
      try { 
        jSONObject0.get("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5726694994129984
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>(hashMap2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap3;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      hashMapArray0[2] = hashMap7;
      hashMapArray0[3] = hashMap6;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("n1E#2\"${");
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("000", false);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.8819043418792991
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 7);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      hashMapArray0[2] = hashMap7;
      hashMapArray0[4] = hashMap0;
      hashMapArray0[1] = hashMap3;
      hashMapArray0[6] = hashMap5;
      Integer.remainderUnsigned(871, 871);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      Float float0 = new Float((float) 871);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Object) hashMap6);
      jSONObject0.put("isnotifyAll", (Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (long) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Boolean boolean0 = new Boolean("4zjV7Hr%7{");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject0.getString("spl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"spl\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer0 = new Integer(44);
      Integer integer1 = new Integer(44);
      linkedList0.offer(integer1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList0.replaceAll(unaryOperator0);
      Integer integer2 = new Integer((byte)13);
      Integer integer3 = new Integer(44);
      Integer integer4 = new Integer(44);
      linkedList1.offerLast(integer4);
      Byte byte0 = new Byte((byte)73);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("S&SN>*(nb!Gf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of S&SN>*(nb!Gf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.9494837273589989
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "null";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "-z.";
      stringArray0[6] = "(x5>a%jw\" h";
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      try { 
        jSONObject0.getJSONObject("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.9652359910559538
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1167);
      Integer.compare(1167, (-3598));
      Integer integer1 = new Integer(1167);
      Integer.remainderUnsigned((-4177984), 92);
      Integer integer2 = new Integer(2);
      Integer.compare(10, 11);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Integer integer3 = new Integer(128);
      linkedList0.add(integer3);
      Integer integer4 = new Integer((-4177984));
      Integer integer5 = new Integer(2);
      Integer integer6 = new Integer(128);
      Integer integer7 = new Integer(24);
      JSONObject.quote("getpush");
      Float float0 = new Float((float) 1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"getpush\"";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.2121644875188395
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      StringWriter stringWriter0 = new StringWriter(3521);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\f");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "to");
      stringWriter2.append((CharSequence) "");
      stringWriter2.append('<');
      StringWriter stringWriter3 = new StringWriter('I');
      stringWriter0.append((CharSequence) "to");
      stringWriter2.write("]d~&=");
      StringWriter stringWriter4 = stringWriter2.append('I');
      stringWriter4.write("WZ3F4L<SV_/\"o");
      stringWriter1.write(3521);
      stringWriter0.flush();
      jSONObject0.write(stringWriter4);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put("*5G}d$xEpvTX", true);
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.404282688331347
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      jSONObject0.put("ap", (-1838));
      StringWriter stringWriter0 = new StringWriter(3521);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "to");
      stringWriter1.close();
      stringWriter1.append((CharSequence) "");
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter('7');
      stringWriter0.append((CharSequence) "to");
      StringWriter stringWriter4 = stringWriter1.append('7');
      stringWriter4.write(3521);
      stringWriter0.write(3521);
      stringWriter0.flush();
      jSONObject0.write(stringWriter4);
      Long long0 = new Long(0L);
      jSONObject0.put("*5G;}d$xETN", true);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float float0 = new Float(2627.78F);
      Float.isFinite((float) float0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONTokener jSONTokener1 = new JSONTokener("] is not a number.");
      JSONTokener jSONTokener2 = new JSONTokener("n)P;p");
      JSONTokener jSONTokener3 = new JSONTokener("n)P;p");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONTokener jSONTokener4 = new JSONTokener("] not found.");
      jSONTokener0.next();
      Byte byte0 = new Byte((byte) (-44));
      StringWriter stringWriter0 = new StringWriter(2357);
      StringWriter stringWriter1 = new StringWriter();
      jSONObject0.write(stringWriter1);
      assertEquals("{}", stringWriter1.toString());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.368465723025749
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 7);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1973);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "]d~&=");
      stringWriter1.write(";YI$YA8");
      StringWriter stringWriter3 = stringWriter2.append('7');
      stringWriter1.write(56);
      StringWriter stringWriter4 = stringWriter3.append((CharSequence) ";YI$YA8");
      stringWriter4.flush();
      JSONObject jSONObject0 = new JSONObject((Object) "\f");
      jSONObject0.write(stringWriter1);
      Long long0 = new Long(1579L);
      jSONObject0.put("]d~&=", true);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.removeAll(linkedList1);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.7344613039551664
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap9 = new HashMap<Boolean, Float>();
      Object object0 = hashMap7.clone();
      Byte.toUnsignedInt((byte)10);
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.valueToString(jSONObject0);
      Byte byte0 = new Byte((byte)10);
      HashMap<String, Byte> hashMap10 = new HashMap<String, Byte>();
      HashMap<String, Byte> hashMap11 = new HashMap<String, Byte>(hashMap10);
      Byte byte1 = new Byte((byte)101);
      Byte byte2 = new Byte((byte)40);
      Byte byte3 = hashMap11.replace("wheel.json.JSONObject@0000000001", byte2);
      assertNull(byte3);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5174714039166524
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      Byte.valueOf((byte)104);
      Byte byte0 = new Byte((byte)104);
      hashMap1.clone();
      Byte.toUnsignedInt((byte) (-52));
      JSONObject.valueToString(byte0);
      Byte byte1 = new Byte((byte)97);
      HashMap<String, Byte> hashMap3 = new HashMap<String, Byte>();
      HashMap<String, Byte> hashMap4 = new HashMap<String, Byte>(hashMap3);
      HashMap<String, Byte> hashMap5 = new HashMap<String, Byte>();
      hashMap5.values();
      Byte byte2 = hashMap5.replace("8::gbFPq|t94gB.", byte0);
      assertNull(byte2);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.97363448477652
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte) (-91));
      Byte.compare((byte)66, (byte) (-91));
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      linkedList0.removeAll(linkedList1);
      Integer integer0 = new Integer((-2116));
      Integer.compare((-52526265), (byte) (-91));
      Integer.max(4088, (-1));
      Integer.getInteger("pu", integer0);
      linkedList0.add(integer0);
      Integer integer1 = new Integer((byte) (-91));
      Byte.compare((byte)0, (byte)118);
      Float float0 = new Float((double) (byte)118);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.getNames(jSONObject0);
      Integer integer2 = new Integer((-52526265));
      assertFalse(integer2.equals((Object)integer1));
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>(hashMap2);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.486476853275102
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Short short0 = new Short((short)1026);
      Short.toUnsignedInt((short)1026);
      Short.toUnsignedInt((short)12);
      String string0 = JSONObject.valueToString(short0, 58, (-1));
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.3224106955121093
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 7);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      hashMapArray0[2] = hashMap7;
      hashMapArray0[4] = hashMap0;
      hashMapArray0[5] = hashMap3;
      hashMapArray0[6] = hashMap5;
      linkedList0.toArray(hashMapArray0);
      Integer.remainderUnsigned(871, 83);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      Float float0 = new Float((float) 83);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%MrP`5;jlAR;6Y 3KP";
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      try { 
        jSONObject0.put((String) null, (long) 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.8682838175053171
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Integer integer0 = new Integer((-2536));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optDouble("8{");
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>(hashMap3);
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      Boolean boolean0 = new Boolean(false);
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap3.compute(boolean0, biFunction0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("USv|fL>xC");
      linkedList0.add("getjoin");
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float.min((-1.0F), 2106.0F);
      Float.isFinite((-1.0F));
      Float.min(0.0F, (-1490.0F));
      Float float0 = new Float(227.0F);
      Float float1 = new Float(0.0F);
      Float float2 = new Float((-1490.0F));
      float float3 = Float.max(1.0F, (-1244.84F));
      Boolean boolean0 = new Boolean((String) null);
      JSONObject.testValidity(float0);
      assertNotEquals((float)float0, (float)float3, 0.01F);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2845));
      Integer integer1 = new Integer((-2845));
      linkedList0.add(integer1);
      Integer integer2 = new Integer(69);
      Integer.getInteger("[");
      Integer.toUnsignedLong(69);
      linkedList0.add(integer2);
      Integer integer3 = new Integer(3141);
      Integer.compare(69, 32);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Integer integer4 = new Integer(1);
      linkedList0.add(integer4);
      Integer integer5 = new Integer(3141);
      Integer integer6 = new Integer((-572));
      Integer integer7 = new Integer(14);
      Integer integer8 = new Integer((-1084));
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.680421054462574
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optBoolean("2785.31810", true);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("-s/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of -s/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.9956426003021028
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",\n";
      String string0 = "P>Z+Qza NssL";
      String string1 = "6K";
      JSONObject jSONObject0 = new JSONObject("6K", stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate(",\n", ",\n");
      jSONObject1.optBoolean(",:]}/\"[{;=#", false);
      Boolean boolean0 = new Boolean("null");
      JSONTokener jSONTokener0 = new JSONTokener("Q%");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Q%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.1860201139779187
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Byte byte0 = new Byte((byte)41);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "GYpk#";
      stringArray0[1] = " at character ";
      stringArray0[2] = "H}7+/g[&ROD&";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      boolean boolean0 = jSONObject1.optBoolean("\f");
      assertEquals(1, jSONObject1.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      Boolean boolean0 = new Boolean(false);
      BiFunction<Boolean, Float, Float> biFunction0 = (BiFunction<Boolean, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyBoolean() , anyFloat());
      hashMap7.compute(boolean0, biFunction0);
      hashMapArray0[2] = hashMap8;
      HashMap<String, Byte> hashMap9 = new HashMap<String, Byte>();
      Float.isFinite(1578.87F);
      Boolean boolean1 = Boolean.valueOf(false);
      hashMap1.putIfAbsent(boolean1, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.optJSONArray("iswrite");
      Boolean boolean2 = new Boolean((String) null);
      Boolean boolean3 = Boolean.TRUE;
      try { 
        jSONObject0.append((String) null, boolean3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.4489072383097752
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      Boolean boolean0 = new Boolean(false);
      BiFunction<Boolean, Float, Float> biFunction0 = (BiFunction<Boolean, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyBoolean() , anyFloat());
      hashMap7.compute(boolean0, biFunction0);
      hashMapArray0[2] = hashMap8;
      HashMap<String, Byte> hashMap9 = new HashMap<String, Byte>();
      Float.isFinite(1578.87F);
      Boolean boolean1 = Boolean.valueOf(false);
      hashMap1.putIfAbsent(boolean1, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      StringWriter stringWriter0 = new StringWriter(8192);
      StringWriter stringWriter1 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(8192);
      CharBuffer.wrap((CharSequence) charBuffer0);
      StringWriter stringWriter2 = new StringWriter(8192);
      jSONObject0.write(stringWriter2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.320953231028959
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      int int0 = jSONObject0.optInt("", 18);
      assertEquals(18, int0);
      
      String string0 = jSONObject0.optString("e})zz6lC`");
      assertEquals("", string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>(hashMap4);
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      hashMap7.putIfAbsent(boolean0, (Float) null);
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 8);
      hashMapArray0[0] = hashMap1;
      HashMap<Boolean, Float> hashMap9 = new HashMap<Boolean, Float>();
      hashMapArray0[1] = hashMap9;
      hashMapArray0[2] = hashMap5;
      hashMapArray0[3] = hashMap2;
      hashMapArray0[4] = hashMap4;
      Boolean boolean1 = Boolean.FALSE;
      Float float0 = new Float(0.0F);
      Float.isFinite((-872.9896F));
      hashMap5.putIfAbsent(boolean1, float0);
      hashMapArray0[5] = hashMap7;
      hashMapArray0[6] = hashMap6;
      hashMapArray0[7] = hashMap7;
      Integer.remainderUnsigned(3, 3655);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap5);
      hashMap6.entrySet();
      Float float1 = new Float((-3595.6987F));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONTokener jSONTokener1 = new JSONTokener("] is not a number.");
      JSONTokener jSONTokener2 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener2);
      jSONObject0.keys();
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener3 = new JSONTokener("] is not a number.");
      JSONTokener jSONTokener4 = new JSONTokener("null");
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      Boolean boolean0 = new Boolean("{}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.771294323446676
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte) (-55));
      Byte.compare((byte) (-55), (byte) (-128));
      Byte.compare((byte) (-61), (byte)0);
      Float float0 = new Float(0.0);
      Double.sum(1677.3665040711, (-3665.565076165));
      Double.min(0.0, (-1988.1985720938999));
      JSONObject jSONObject0 = new JSONObject(byte0);
      double double0 = jSONObject0.optDouble("\b", (double) 73);
      assertEquals(1, jSONObject0.length());
      assertEquals(73.0, double0, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float.min(2627.78F, 2627.78F);
      Float.isFinite(2627.78F);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONTokener jSONTokener1 = new JSONTokener("] is not a number.");
      JSONTokener jSONTokener2 = new JSONTokener("");
      JSONTokener jSONTokener3 = new JSONTokener("");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONTokener jSONTokener4 = new JSONTokener("] not found.");
      JSONTokener jSONTokener5 = new JSONTokener("~7LEJdY");
      JSONTokener jSONTokener6 = new JSONTokener("lon");
      Float float0 = new Float(2627.78F);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "&s00W03L#U*";
      stringArray0[1] = "&s00W03L#U*";
      stringArray0[2] = "&s00W03L#U*";
      stringArray0[3] = "&s00W03L#U*";
      stringArray0[4] = "&s00W03L#U*";
      stringArray0[5] = "&s00W03L#U*";
      JSONObject jSONObject0 = new JSONObject("&s00W03L#U*", stringArray0);
      int int0 = jSONObject0.optInt("false");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.7099284913365564
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Float float0 = new Float(1616.48);
      Float.max((byte)63, (byte)63);
      Byte.compare((byte)46, (byte)46);
      Integer integer0 = new Integer((byte)65);
      Integer integer1 = new Integer((byte)65);
      JSONObject jSONObject0 = new JSONObject(float0);
      Long long0 = new Long(0);
      double double0 = jSONObject0.optDouble("?EM[QkVl", 0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Float.min(2627.78F, 2627.78F);
      Float.isFinite(2627.78F);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener("] is not a number.");
      JSONTokener jSONTokener2 = new JSONTokener("");
      JSONTokener jSONTokener3 = new JSONTokener("");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONTokener jSONTokener4 = new JSONTokener("] not found.");
      JSONTokener jSONTokener5 = new JSONTokener("~7LEJdY");
      JSONTokener jSONTokener6 = new JSONTokener("lon");
      Float float0 = new Float(2627.78F);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 7);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      Boolean boolean0 = new Boolean(false);
      BiFunction<Boolean, Float, Float> biFunction0 = (BiFunction<Boolean, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyBoolean() , anyFloat());
      hashMap7.compute(boolean0, biFunction0);
      hashMapArray0[2] = hashMap8;
      hashMapArray0[3] = hashMap7;
      Integer.remainderUnsigned(2337, 52);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap8);
      hashMap8.entrySet();
      Float float0 = new Float((float) 52);
      JSONObject jSONObject1 = jSONObject0.put(": ", false);
      Short short0 = new Short((short)55);
      try { 
        jSONObject1.append(": ", short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[: ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      hashMap0.clone();
      Byte.toUnsignedInt((byte)66);
      JSONObject.valueToString(hashMap3);
      Byte byte0 = new Byte((byte)101);
      HashMap<String, Byte> hashMap9 = new HashMap<String, Byte>();
      HashMap<String, Byte> hashMap10 = new HashMap<String, Byte>(hashMap9);
      Byte byte1 = new Byte((byte)66);
      Byte byte2 = hashMap9.replace("getget", byte1);
      assertNull(byte2);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.832025907147722
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",\n";
      stringArray0[1] = ",\n";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-344));
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.toArray();
      Integer integer1 = new Integer(167);
      linkedList1.offer((Integer) null);
      Integer integer2 = new Integer(167);
      Integer.compare(43, (byte)13);
      linkedList0.offerLast(integer2);
      Byte byte0 = new Byte((byte)13);
      Byte byte1 = new Byte((byte)121);
      JSONObject jSONObject0 = new JSONObject(byte1);
      try { 
        jSONObject0.get(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.7889474249331805
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList linkedList3 = new LinkedList<String>();
      linkedList2.add((Integer) null);
      Integer integer0 = new Integer(102);
      Integer.remainderUnsigned((-1067), (-2497));
      linkedList2.add(integer0);
      Integer integer1 = new Integer((-20664796));
      linkedList2.add(integer1);
      linkedList1.add((Integer) null);
      linkedList1.toArray();
      Integer integer2 = new Integer(44);
      Integer integer3 = new Integer(44);
      linkedList2.add(integer3);
      linkedList1.offer((Integer) null);
      linkedList2.offerLast((Integer) null);
      Byte byte0 = new Byte((byte)13);
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, integer2);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject.quote("^Wnp1<3S)qKu^zCB/");
      String[] stringArray0 = new String[1];
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.675051214795301
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer0 = new Integer(44);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList4.replaceAll(unaryOperator0);
      LinkedList<String> linkedList5 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList4);
      Long long0 = new Long((-2241L));
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(linkedList5);
      Long long1 = new Long(0L);
      jSONObject0.putOpt("getsubstring", long1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.082584846841714
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      Boolean boolean0 = Boolean.valueOf(false);
      Float float0 = new Float((-1016.7));
      hashMap2.putIfAbsent(boolean0, float0);
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>(hashMap2);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      hashMapArray0[2] = hashMap3;
      hashMapArray0[3] = hashMap7;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Float>[] hashMapArray1 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 5);
      hashMapArray1[0] = hashMap4;
      hashMapArray1[1] = hashMap5;
      hashMapArray1[2] = hashMap0;
      hashMapArray1[3] = hashMap3;
      Short short0 = new Short((short)55);
      Boolean boolean1 = new Boolean((String) null);
      JSONObject jSONObject0 = new JSONObject(boolean1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "\b";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>(hashMap2);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[1] = hashMap0;
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float(0.0F);
      hashMap7.put(boolean0, float0);
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      hashMapArray0[2] = hashMap8;
      hashMapArray0[3] = hashMap7;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("\"AQi,M##?)=dBBP?u");
      Boolean boolean1 = new Boolean(false);
      linkedList0.add("t*v6n0gKQ:UY;");
      byte byte0 = (byte)45;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gettoOctalString", (Collection) linkedList0);
      Byte byte1 = new Byte((byte)101);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("}F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }F
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.7630041293692704
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>(hashMap2);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      hashMapArray0[2] = hashMap3;
      hashMapArray0[3] = hashMap7;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Float>[] hashMapArray1 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 5);
      hashMapArray1[0] = hashMap4;
      Boolean boolean0 = new Boolean(true);
      hashMap6.replace(boolean0, (Float) null);
      hashMapArray1[1] = hashMap5;
      hashMapArray1[2] = hashMap0;
      hashMapArray1[3] = hashMap3;
      hashMapArray1[4] = hashMap6;
      linkedList0.toArray(hashMapArray1);
      Integer integer0 = new Integer((-4177984));
      JSONObject jSONObject0 = new JSONObject((Object) hashMap7);
      jSONObject0.put("g32Tpy;/G", true);
      jSONObject0.put("g32Tpy;/G", 2082.566351);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      hashMap7.keySet();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap8 = new HashMap<Boolean, Float>();
      Boolean boolean0 = new Boolean(false);
      BiFunction<Boolean, Float, Float> biFunction0 = (BiFunction<Boolean, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyBoolean() , anyFloat());
      hashMap7.compute(boolean0, biFunction0);
      hashMapArray0[2] = hashMap8;
      HashMap<String, Byte> hashMap9 = new HashMap<String, Byte>();
      Float.isFinite(1578.87F);
      Boolean boolean1 = Boolean.valueOf(false);
      hashMap1.putIfAbsent(boolean1, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.239838145692218
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float(2627.78F);
      Float.isFinite((float) float0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONTokener jSONTokener1 = new JSONTokener("] is not a number.");
      JSONTokener jSONTokener2 = new JSONTokener("n)P;p");
      JSONTokener jSONTokener3 = new JSONTokener("n)P;p");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONTokener jSONTokener4 = new JSONTokener("] not found.");
      Byte byte0 = new Byte((byte) (-44));
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      Boolean.valueOf("cM'Zi$7FUuURyj");
      Float float1 = new Float((-1890.5F));
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.optJSONArray("uE#m!/");
      Boolean boolean0 = new Boolean("AUwzQ]xm3l?");
      JSONObject jSONObject2 = jSONObject0.put("{}", 2813L);
      try { 
        jSONObject2.getJSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.437042449935488
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",";
      stringArray0[1] = ",";
      stringArray0[2] = "wheel.json.JSONArray";
      stringArray0[4] = "] is not a number.";
      stringArray0[4] = "9wn";
      stringArray0[5] = "P>Z+Qza NssL";
      JSONObject jSONObject0 = new JSONObject("] is not a number.", stringArray0);
      jSONObject0.accumulate(",", ",");
      String string0 = "/+1aD`##eZ}";
      Boolean boolean0 = new Boolean(",");
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject1 = jSONObject0.accumulate(",", "/+1aD`##eZ}");
      JSONObject jSONObject2 = new JSONObject(object0);
      BiFunction<Object, Object, Byte> biFunction0 = (BiFunction<Object, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HashMap<String, Byte> hashMap1 = new HashMap<String, Byte>();
      jSONObject1.optLong("wheel.json.JSONArray", 270L);
      try { 
        jSONObject0.getLong(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.9214468455304496
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 1513.60791904039);
      jSONObject1.optDouble("rSz|QN", 1513.60791904039);
      jSONObject0.optInt((String) null, (-1889));
      JSONObject jSONObject2 = jSONObject1.putOpt(",:]}/\"[{;=#", jSONObject0);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      jSONObject3.optLong((String) null, (long) (-1889));
      JSONObject jSONObject4 = jSONObject0.getJSONObject(",:]}/\"[{;=#");
      jSONObject2.getString(",:]}/\"[{;=#");
      jSONObject2.opt(",:]}/\"[{;=#");
      jSONObject4.optString(",:]}/\"[{;=#");
      jSONObject3.put("wheel.json.JSONObject@0000000001", (Map) hashMap0);
      boolean boolean0 = true;
      jSONObject3.put("COqpGp_&6.3tYm@EG", true);
      try { 
        jSONObject4.getInt("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.8977914824487705
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>(hashMap2);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      hashMapArray0[2] = hashMap3;
      hashMapArray0[3] = hashMap7;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Float>[] hashMapArray1 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 5);
      hashMapArray1[0] = hashMap4;
      hashMapArray1[1] = hashMap5;
      hashMapArray1[2] = hashMap0;
      hashMapArray1[3] = hashMap3;
      hashMapArray1[1] = hashMap6;
      linkedList0.toArray(hashMapArray1);
      Integer integer0 = new Integer((-4177984));
      JSONObject jSONObject0 = new JSONObject((Object) hashMap7);
      try { 
        jSONObject0.getBoolean("g32Tpy;/G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g32Tpy;/G\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(0.0);
      Double.sum(0.0, 770.3376514230107);
      Double.sum(770.3376514230107, (-65.4740349));
      Double.max((-65.4740349), 0.0);
      Double.max(0.0, 1.0);
      Double.sum(1.0, 0.0);
      Double.max(Double.NaN, 770.3376514230107);
      Double.max(1.0, Double.NaN);
      Double.min(0.0, 0.0);
      Double.isFinite(Double.NaN);
      Double.max(0.0, 0.0);
      String string0 = JSONObject.quote("qN|S!aiVf+k5$K");
      assertEquals("\"qN|S!aiVf+k5$K\"", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(0.0);
      Double.sum(0.0, 770.3376514230107);
      Double.isFinite(770.3376514230107);
      Double.sum(770.3376514230107, (-65.4740349));
      Float float0 = new Float(4196.5F);
      Float float1 = new Float((-1.0F));
      String string0 = JSONObject.quote("[FK \u0007*3lr[d0lMpIw");
      assertEquals("\"[FK \\u0007*3lr[d0lMpIw\"", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.945674203549475
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>(hashMap2);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      hashMapArray0[2] = hashMap3;
      hashMapArray0[3] = hashMap7;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Float>[] hashMapArray1 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 5);
      hashMapArray1[0] = hashMap4;
      Boolean boolean0 = new Boolean(true);
      hashMap6.replace(boolean0, (Float) null);
      hashMapArray1[1] = hashMap5;
      hashMapArray1[2] = hashMap0;
      hashMapArray1[3] = hashMap3;
      hashMapArray1[4] = hashMap6;
      linkedList0.toArray(hashMapArray1);
      Integer integer0 = new Integer((-4177984));
      JSONObject jSONObject0 = new JSONObject((Object) hashMap7);
      try { 
        jSONObject0.getLong("getwait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getwait\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.903295526755337
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.add((Integer) null);
      Integer integer0 = new Integer(1167);
      Integer.compare(1167, (-3601));
      linkedList1.add((Integer) null);
      Integer integer1 = new Integer(4805);
      Integer.remainderUnsigned((-3601), 127);
      Integer integer2 = new Integer((-25));
      Integer.valueOf(4805);
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "isformat";
      stringArray0[1] = "JyIt8/";
      stringArray0[2] = "";
      Integer integer3 = new Integer((-25));
      Integer.max((-3601), (-2150));
      linkedList1.offerLast(integer3);
      Byte byte0 = new Byte((byte)40);
      Short short0 = new Short((byte)40);
      JSONObject jSONObject0 = new JSONObject(short0);
      try { 
        jSONObject0.getInt(" kCwd G/{eI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" kCwd G/{eI\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.8977914824487705
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>(hashMap2);
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 6);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      hashMapArray0[2] = hashMap3;
      hashMapArray0[3] = hashMap7;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Float>[] hashMapArray1 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 5);
      hashMapArray1[0] = hashMap4;
      hashMapArray1[1] = hashMap5;
      hashMapArray1[2] = hashMap0;
      hashMapArray1[3] = hashMap3;
      hashMapArray1[4] = hashMap6;
      linkedList0.toArray(hashMapArray1);
      Integer integer0 = new Integer((-4177984));
      JSONObject jSONObject0 = new JSONObject((Object) hashMap7);
      try { 
        jSONObject0.getBoolean("g32Tpy;/G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g32Tpy;/G\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(0.0);
      Double.sum(0.0, 770.3376514230107);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.8885995049191862
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap2 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap3 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap4 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap5 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap6 = new HashMap<Boolean, Float>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Float>[] hashMapArray0 = (HashMap<Boolean, Float>[]) Array.newInstance(HashMap.class, 7);
      hashMapArray0[0] = hashMap4;
      hashMapArray0[1] = hashMap0;
      HashMap<Boolean, Float> hashMap7 = new HashMap<Boolean, Float>();
      hashMapArray0[2] = hashMap7;
      hashMapArray0[4] = hashMap0;
      hashMapArray0[5] = hashMap3;
      hashMapArray0[6] = hashMap5;
      linkedList0.toArray(hashMapArray0);
      Integer.remainderUnsigned(871, 83);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap4);
      Float float0 = new Float((-1496.73F));
      long long0 = new Integer(83);
      jSONObject0.append("bQR*5+x^dC+&", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Float.min((-1.0F), 2106.0F);
      Double.sum((-1.0F), (-1.0F));
      Double.max(1.0, 1560.713);
      Double.sum(1560.713, (-1608.9162));
      Double.max(1560.713, (-3537.1665845));
      Double.max(1560.713, 1560.713);
      Double.max(1.0, (-48.203199999999924));
      Double.min(0.0, 1.0);
      Double.max(0.0, 1560.713);
      Float float0 = new Float(0.0);
      Float.sum(2106.0F, (-1187.9F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.6345170967040314
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",\n";
      stringArray0[1] = ",\n";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(59);
      Integer.getInteger(",\n", 59);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(59);
      Integer integer2 = new Integer(9);
      Integer integer3 = new Integer(9);
      Integer integer4 = new Integer(59);
      Integer.sum(9, 58);
      Integer.getInteger(",\n", integer4);
      Integer.getInteger(",\n", integer3);
      Integer.compare(9, 58);
      Integer.getInteger(",\n");
      Integer.getInteger(",\n");
      Integer.divideUnsigned(59, 59);
      linkedList0.add(integer0);
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      Integer integer5 = new Integer(59);
      Boolean boolean0 = new Boolean("DY,x{Drcw$X(0~");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(59);
      Integer integer1 = Integer.getInteger("] is not a Boolean.", 8448);
      Integer.remainderUnsigned(47, (-795));
      linkedList0.add(integer1);
      Integer integer2 = new Integer(8448);
      Integer integer3 = new Integer(125);
      Integer integer4 = new Integer(58);
      Integer integer5 = new Integer(9);
      Integer.sum((-729), (-787));
      Integer integer6 = new Integer(328);
      Integer.getInteger("cU<l0~vH", integer6);
      Integer integer7 = Integer.getInteger(",", 2020);
      Integer.getInteger((String) null, integer7);
      Integer.compare((-787), 9);
      Integer.getInteger("lbKf[P@_.WOvo");
      Integer.divideUnsigned(8448, 120);
      linkedList0.add((Integer) null);
      JSONObject.quote((String) null);
      Integer integer8 = new Integer(1766);
      assertFalse(integer8.equals((Object)integer0));
  }
}
