/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 05:02:49 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3974777298480823
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      JSONObject jSONObject2 = jSONObject1.put("t$d($$p_06X<l_.mS$", 32);
      jSONObject1.optDouble("t$d($$p_06X<l_.mS$");
      jSONObject0.optLong("t$d($$p_06X<l_.mS$");
      JSONObject.quote("t$d($$p_06X<l_.mS$");
      int int0 = (-1119);
      jSONObject0.toString((-1119));
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject0.put("null", false);
      jSONObject2.getInt("t$d($$p_06X<l_.mS$");
      jSONObject2.toString(91, (-1119));
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000002\": java.lang.Integer@0000000004,\n\"java.lang.String@0000000005\": java.lang.Boolean@0000000006\n}");
      JSONObject jSONObject4 = new JSONObject(jSONTokener0);
      try { 
        jSONObject3.get("9>&v)AsI/{6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9>&v)AsI/{6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8663126227370042
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = new Integer(380);
      Integer integer1 = new Integer(380);
      Float float0 = new Float((double) 380);
      Float.isFinite(1.0F);
      Float.sum((-1.0F), 0.0F);
      Float.isFinite(0.0F);
      Float.max(4540.32F, (-1.0F));
      Float.min(0.0F, 380);
      Float.isFinite(0.0F);
      Float.isFinite((-1.0F));
      Float.min((-3587.4F), 413.66132F);
      Integer integer2 = new Integer(33);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString(10, 2624);
      // Undeclared exception!
      jSONObject0.get(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9288482861306129
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.clear();
      linkedList1.removeAll(linkedList0);
      Byte byte0 = new Byte((byte) (-118));
      linkedList1.add(byte0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      linkedList1.addAll((Collection<? extends Byte>) linkedList2);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "IXXh6\"D(j<~";
      JSONObject jSONObject1 = new JSONObject(linkedList0, stringArray0);
      JSONObject.getNames(jSONObject1);
      LinkedList<Double> linkedList4 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject0.put("IXXh6\"D(j<~", (Collection) linkedList4);
      jSONObject2.getJSONArray("IXXh6\"D(j<~");
      try { 
        jSONObject0.getBoolean("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9076225260738897
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "^.FgBNN$h+[N];a";
      Integer integer0 = new Integer(87);
      Integer integer1 = new Integer(87);
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(integer0);
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = new Boolean(true);
      hashMap0.put((Boolean) null, boolean0);
      JSONObject jSONObject1 = jSONObject0.put("^.FgBNN$h+[N];a", (Map) hashMap0);
      Double double0 = new Double(0.0);
      Float float0 = new Float(0.0);
      Float.min((-1197), 87);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(jSONObject1, 48, 2758);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9512595041439564
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      jSONObject1.put("t$d($$p_06X<l_.mS$", 32);
      jSONObject1.optDouble("t$d($$p_06X<l_.mS$");
      Byte byte0 = new Byte((byte) (-18));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.add((Byte) null);
      Byte byte1 = new Byte((byte) (-18));
      linkedList0.addLast(byte1);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte2 = new Byte((byte) (-18));
      linkedList1.add(byte1);
      linkedList1.addAll((Collection<? extends Byte>) linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6869615765973234
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = new Integer(380);
      Integer integer1 = new Integer(380);
      Integer.divideUnsigned(380, 380);
      Integer.getInteger("\t", integer1);
      Integer.toUnsignedLong((-1994));
      Integer.getInteger("\t");
      Integer.getInteger("!vBxHlH8I(0G} ");
      Integer.sum((-471), 79);
      Integer integer2 = new Integer(60);
      Integer.getInteger("}>yf/X+{", integer2);
      Integer.min(105, 105);
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      assertEquals(5, stringArray0.length);
      
      Long long0 = new Long(105);
      String string0 = JSONObject.doubleToString(4294965302L);
      assertEquals("4.294965302E9", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7337843725718383
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = new Float((-5549.2));
      Boolean.valueOf(true);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.valueOf("DQ");
      Boolean boolean2 = new Boolean(true);
      hashMap0.put(boolean1, boolean2);
      Byte byte0 = new Byte((byte)103);
      Boolean.valueOf("getintern");
      Boolean.valueOf(true);
      Long long0 = new Long((byte)103);
      Boolean boolean3 = Boolean.valueOf(",:]}/\"[{;=#");
      JSONObject jSONObject0 = new JSONObject(boolean3);
      jSONObject0.put(",:]}/\"[{;=#", (Map) hashMap0);
      Float float1 = new Float((-2468.6378136537));
      Float.sum((-989.0F), 1434.8F);
      Float.sum((byte)103, 0.0F);
      JSONObject.numberToString(float1);
      Object object0 = new Object();
      HashMap<Object, Long> hashMap1 = new HashMap<Object, Long>();
      Long long1 = new Long((byte)103);
      jSONObject0.optJSONObject(",:]}/\"[{;=#");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.049291054815544
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = (-2821.17);
      Float float0 = new Float((-2821.17));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optDouble("!AA");
      String string0 = "] is not a Boolean.";
      jSONObject0.remove("] is not a Boolean.");
      jSONObject0.optString("QcDf&WihRi0EO", "QcDf&WihRi0EO");
      JSONObject jSONObject1 = jSONObject0.append("QcDf&WihRi0EO", "!AA");
      jSONObject0.optJSONArray("QcDf&WihRi0EO");
      JSONObject.doubleToString(519.459190197);
      String string1 = ".";
      try { 
        jSONObject1.getString(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1481112905687385
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "*hG+/<\nnMWoJC");
      JSONObject jSONObject1 = jSONObject0.put("toS", (-1172.419));
      jSONObject1.optInt("toS", 10);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      jSONObject1.put("*hG+/<\nnMWoJC", (Map) hashMap0);
      jSONObject0.put("VX,1m{^|0^F4@", 0L);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("*hG+/<\nnMWoJC");
      JSONObject.doubleToString((-1778.66189896726));
      jSONObject2.keys();
      assertEquals(6, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0033121939551717
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\r";
      JSONObject jSONObject1 = jSONObject0.putOpt("\r", "\r");
      jSONObject1.put("\r", false);
      jSONObject0.optInt("\r");
      String string1 = "Expected a ',' or ']'";
      jSONObject1.optDouble("Expected a ',' or ']'", 0.0);
      jSONObject1.getBoolean("\r");
      jSONObject1.optString("true", "istoHexString");
      String string2 = "(Ps[gc&X";
      try { 
        jSONObject1.get("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.240272819659908
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(false);
      Float float0 = new Float((-5549.2));
      Boolean.valueOf(true);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      hashMap1.replace((Object) stringWriter0, boolean0);
      Boolean boolean1 = Boolean.TRUE;
      hashMap1.put(jSONObject0, boolean1);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = new JSONObject(long0);
      jSONObject1.put("int", (Map) hashMap0);
      Double double0 = new Double(0L);
      Float float1 = new Float(1538.0406987632);
      Float.min((-1197), 0.0F);
      JSONObject.valueToString(jSONObject1, (-1197), 48);
      jSONObject0.isNull("u))`OALFW");
      jSONObject1.optJSONObject("int");
      try { 
        jSONObject1.getDouble("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.158035293449672
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject();
      Boolean.valueOf(false);
      Boolean.valueOf(true);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.optLong("ODk[Nc/K52{", 915L);
      hashMap1.put(jSONObject0, boolean0);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = new JSONObject(long0);
      JSONObject jSONObject2 = jSONObject1.put("int", (Map) hashMap0);
      jSONObject2.write(stringWriter0);
      String string0 = "ishashCode";
      String string1 = ":u`7w6WO^.@Z(XyG";
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(":u`7w6WO^.@Z(XyG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of :u`7w6WO^.@Z(XyG
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8969326650623548
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject.doubleToString((-2365.51897797401));
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.opt("tNr");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      Boolean boolean0 = new Boolean(",nEEu-5v@=Z+O6");
      try { 
        jSONObject0.getString("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7298201303799214
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      String string0 = ";S+";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{}";
      stringArray0[1] = "|i1.8(f*]/X3`SY";
      stringArray0[2] = "000";
      JSONObject jSONObject2 = new JSONObject("{}");
      Byte byte0 = new Byte((byte) (-105));
      jSONObject1.append(";S+", ";S+");
      JSONTokener jSONTokener0 = new JSONTokener("Unterminated string");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Unterminated string
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5171063970610275
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long((-313L));
      hashMap0.put(jSONArray0, long0);
      stringArray0[0] = ";S+";
      stringArray0[1] = "true";
      stringArray0[3] = ";S+";
      stringArray0[4] = "\"\"";
      stringArray0[5] = "{}";
      stringArray0[6] = ">Kk";
      stringArray0[7] = "";
      stringArray0[8] = "val";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Byte byte0 = new Byte((byte) (-20));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      Boolean boolean0 = new Boolean(";S+");
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      HashMap<Double, JSONObject> hashMap2 = new HashMap<Double, JSONObject>();
      HashMap<Object, Long> hashMap3 = new HashMap<Object, Long>();
      Set<Map.Entry<Object, Long>> set0 = (Set<Map.Entry<Object, Long>>)hashMap0.entrySet();
      assertFalse(set0.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0905994737794789
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.351673301904631
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      jSONObject0.put("getmin", (Object) null);
      JSONObject jSONObject1 = new JSONObject(object0, stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
      
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      String string1 = jSONObject0.optString("int");
      assertEquals("", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "{<P$kda'Eh@x,_5\\'";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{<P$kda'Eh@x,_5'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 13 of {<P$kda'Eh@x,_5'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.130379400018645
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer integer0 = new Integer((-150));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("tri", (-648L));
      jSONObject0.optString("Ssly c-rDdJk");
      jSONObject1.optLong("tri");
      JSONArray jSONArray0 = jSONObject0.names();
      jSONArray0.put(920.480047857702);
      JSONObject.quote("|a{d}T7+@El3`G,f+");
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      try { 
        jSONArray0.put((-150), (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-150] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.2781297534111018
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt(",:]}/\"[{;=#", jSONObject0);
      JSONObject.quote(",:]}/\"[{;=#");
      HashMap<Object, Long> hashMap1 = new HashMap<Object, Long>();
      HashMap<Object, Long> hashMap2 = new HashMap<Object, Long>();
      hashMap2.entrySet();
      JSONObject jSONObject1 = jSONObject0.getJSONObject(",:]}/\"[{;=#");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5806491250694639
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      HashMap<JSONObject, Byte> hashMap1 = new HashMap<JSONObject, Byte>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = "toS";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("toS", object0);
      jSONObject1.keys();
      jSONObject0.has("toS");
      try { 
        jSONObject0.getJSONObject("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5109701338003483
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      linkedList1.addAll((Collection<? extends Byte>) linkedList2);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      Integer.toUnsignedLong((-629));
      Integer.getInteger("bDE*[ztf9XX7H(PxZ");
      Double double0 = new Double(1.0);
      Float float0 = new Float((double) (-629));
      Float.min((-1728.0F), 0.0F);
      JSONObject.valueToString(linkedList3, 128, 48);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "u))`OALFW";
      stringArray0[1] = "[]";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.isNull(":Dc;C;");
      try { 
        jSONObject0.getDouble("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.441190677780558
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getnotify", 2360L);
      JSONObject jSONObject2 = jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      jSONObject2.put("t$d($$p_06X<l_.mS$", 32);
      jSONObject2.optDouble("t$d($$p_06X<l_.mS$");
      jSONObject0.optLong("t$d($$p_06X<l_.mS$");
      JSONObject.quote("t$d($$p_06X<l_.mS$");
      jSONObject0.toString((-1119));
      Object object0 = new Object();
      Integer.toUnsignedLong(91);
      Integer.min(2753, (-2621));
      JSONObject.getNames((Object) jSONObject1);
      String string0 = "getwait";
      Integer.getInteger("getwait");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6248534211663554
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "tri";
      jSONObject0.opt("tri");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)10, (byte)14);
      linkedList1.push(byte0);
      linkedList2.addAll((Collection<? extends Byte>) linkedList0);
      JSONObject.valueToString(linkedList0);
      jSONObject0.put("getgetChars", (Collection) linkedList1);
      jSONObject0.optString("Expected a ',' or ']'");
      try { 
        jSONObject0.get("8HVDnX-Ignr1>\"IEmZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8HVDnX-Ignr1>\\\"IEmZ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "=7K2xi*.6^%");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5528605853998707
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getnotify", 2360L);
      JSONObject jSONObject2 = jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      JSONObject jSONObject3 = jSONObject2.put("t$d($$p_06X<l_.mS$", 32);
      jSONObject2.optDouble("t$d($$p_06X<l_.mS$");
      jSONObject0.optLong("t$d($$p_06X<l_.mS$");
      jSONObject0.toString((-1119));
      jSONObject3.accumulate("Unterminated string", "t$d($$p_06X<l_.mS$");
      Object object0 = new Object();
      jSONObject0.put("null", false);
      jSONObject3.getInt("t$d($$p_06X<l_.mS$");
      jSONObject3.toString(91, (-1119));
      Float float0 = new Float((double) 32);
      JSONObject.valueToString(float0, 93, (-1));
      boolean boolean0 = jSONObject1.isNull("[}!'i/d>xg");
      assertEquals(4, jSONObject1.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7202025435261348
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("q3jK", (Collection) linkedList0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject2 = jSONObject1.accumulate("q3jK", jSONObject0);
      JSONObject jSONObject3 = jSONObject2.put("t$d($$p_06X<l_.mS$", (Map) hashMap0);
      try { 
        jSONObject3.getJSONArray("rl|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"rl|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.271899083808096
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double((-784.0));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "W\"/4@p";
      stringArray0[1] = "wheel.json.JSONTokener";
      stringArray0[2] = ")PiZuaNu=Hdl;y^";
      stringArray0[3] = "WOY";
      stringArray0[4] = "-";
      stringArray0[5] = ";*";
      Double.max((-784.0), (-784.0));
      stringArray0[6] = "max";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.length();
      jSONObject0.optBoolean("Expected a ',' or '}'", true);
      try { 
        jSONObject0.get("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9331249408322044
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-1889));
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 0);
      jSONObject0.optDouble(",:]}/\"[{;=#");
      jSONObject1.optLong("getequals");
      String string0 = "isappend";
      JSONTokener jSONTokener0 = new JSONTokener("isappend");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of isappend
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.574554702849797
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "JxNbject[";
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      String string1 = " of ";
      Object object0 = null;
      jSONObject0.accumulate(" of ", (Object) null);
      JSONObject jSONObject1 = new JSONObject();
      String string2 = "\"\"";
      jSONObject1.optLong("\"\"", 0L);
      try { 
        jSONObject1.getJSONArray("JxNbject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JxNbject[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.484925891109223
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "t$d($$p_06X<l_.mS$";
      String string1 = "q3jK";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("q3jK", (Collection) linkedList0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      try { 
        jSONObject1.getBoolean("q3jK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q3jK\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = JSONObject.NULL;
      linkedList0.add(object0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)112);
      linkedList1.add(byte0);
      linkedList0.removeAll(linkedList1);
      linkedList1.removeAll(linkedList0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      linkedList2.addAll((Collection<? extends Byte>) linkedList1);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      Integer integer0 = new Integer(2424);
      Integer.getInteger("bDE*[ztf9XX7H(PxZ");
      int int0 = new Integer(8);
      Integer.min(8, 789);
      Object object1 = new Object();
      JSONObject.getNames((Object) linkedList0);
      Long long0 = new Long(123);
      assertEquals(123L, (long)long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8065071652616693
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", 54.132126);
      jSONObject1.getLong("Bad value from toJSONString: ");
      String string0 = "R";
      Short short0 = new Short((short) (-445));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.accumulate("5VCB3C|rOLw,i(=7l+", jSONArray0);
      JSONArray jSONArray1 = new JSONArray();
      Boolean.valueOf(false);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>();
      linkedList1.containsAll(linkedList2);
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList1);
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2786390603434747
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "t$d($$p_06X<l_.mS$";
      stringArray0[1] = "t$d($$p_06X<l_.mS$";
      stringArray0[2] = "t$d($$p_06X<l_.mS$";
      stringArray0[3] = "t$d($$p_06X<l_.mS$";
      stringArray0[4] = "t$d($$p_06X<l_.mS$";
      stringArray0[5] = "t$d($$p_06X<l_.mS$";
      JSONObject jSONObject0 = new JSONObject("t$d($$p_06X<l_.mS$", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("Q@p'g;<kt2gHP", (-2390));
      JSONObject jSONObject2 = jSONObject1.put("t$d($$p_06X<l_.mS$", (-2831));
      jSONObject2.optDouble("t$d($$p_06X<l_.mS$");
      jSONObject0.getInt("Q@p'g;<kt2gHP");
      jSONObject0.toString((-579));
      Object object0 = JSONObject.NULL;
      String string0 = "getgetJSONArray";
      jSONObject0.opt("Null pointer");
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject3 = new JSONObject();
      HashMap<Double, Short> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Double, Short>((-579), (-2390));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -579
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8496607365502193
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float float0 = new Float((-5549.2));
      Boolean.valueOf(true);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.valueOf("DQ");
      Boolean boolean2 = new Boolean(true);
      hashMap0.put(boolean1, boolean2);
      Byte byte0 = new Byte((byte)103);
      Boolean boolean3 = Boolean.valueOf("getintern");
      hashMap0.put(byte0, boolean3);
      Long long0 = new Long((byte)103);
      Boolean boolean4 = Boolean.valueOf(",:]}/\"[{;=#");
      JSONObject jSONObject0 = new JSONObject(boolean4);
      jSONObject0.put(",:]}/\"[{;=#", (Map) hashMap0);
      Double double0 = new Double(2090.6);
      Float float1 = new Float(0.0);
      Float.min((byte)103, (-680.171F));
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 59, 59);
      jSONObject0.isNull(",:]}/\"[{;=#");
      try { 
        jSONObject0.getDouble(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3064366949688164
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      jSONObject1.optDouble("Expected a ',' or ']'", 0.0);
      Boolean boolean0 = new Boolean("Expected a ',' or ']'");
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("Expected a ',' or ']'", object0);
      jSONObject0.put("", 0.0);
      jSONObject0.getInt("");
      jSONObject1.optDouble("", 0.0);
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject(13);
      try { 
        jSONObject2.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5171063970610277
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Short short0 = new Short((short)32);
      Short.toUnsignedInt((short) (-533));
      Integer integer0 = Integer.getInteger("getintern", 65003);
      Integer.toUnsignedLong(79);
      Integer.getInteger("getintern");
      Integer.sum(65003, (-2621));
      Integer.min((short)32, (-2621));
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      assertNotNull(stringArray0);
      
      Long long0 = new Long((short) (-533));
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.097158021049951
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", 54.132126);
      JSONObject.quote("Bad value from toJSONString: ");
      Long long0 = new Long(1L);
      jSONObject0.optInt("t$d($$p_06X<l_.mS$", 8192);
      Short short0 = new Short((short) (-2092));
      JSONObject jSONObject2 = jSONObject1.accumulate("t$d($$p_06X<l_.mS$", short0);
      Long long1 = new Long(8192);
      JSONObject jSONObject3 = new JSONObject((Object) "Bad value from toJSONString: ");
      jSONObject2.remove("\b");
      // Undeclared exception!
      jSONObject0.toString(8192, 8192);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "isnotify";
      String string1 = "toS";
      JSONTokener jSONTokener0 = new JSONTokener("toS");
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      String string2 = "tri";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of toS
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.060440029125924
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a number.");
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(false);
      JSONObject.valueToString(boolean1);
      String string0 = null;
      jSONObject0.opt((String) null);
      Long long0 = new Long(0L);
      String string1 = "}j%BR1!N)I.k";
      Long.getLong("5i9=O'o7", 0L);
      Long.toUnsignedString((-1638L));
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 3036, 3036);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.8660598702493092
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "JONbject[";
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      String string1 = null;
      jSONObject0.opt((String) null);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      Boolean boolean0 = new Boolean("]k`");
      try { 
        jSONObject0.getString("]k`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]k`\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1761856615603072
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      hashMap0.put(double0, double0);
      hashMap0.replace((Double) null, (Double) null);
      double double1 = new Double(0.0);
      jSONObject0.optInt((String) null, (-1889));
      jSONObject0.putOpt("istoJSONArray", jSONObject0);
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.flush();
      stringWriter0.flush();
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9251211907908183
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double.sum(0.0, 953.9650256863);
      Double double0 = new Double((-43.6));
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "^Y:u18=5RS";
      jSONObject0.putOpt("^Y:u18=5RS", (Object) null);
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.append("-amRVV)h$KCB9nwk`", (Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("^.FgBNN$h+[N];a");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ^.FgBNN$h+[N];a
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "*^6);lT";
      String string1 = "";
      String string2 = "^iv7TF&^e|(cL LW";
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.244142751595375
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject();
      Boolean.valueOf(false);
      Float float0 = new Float((-5549.2));
      Boolean.valueOf(true);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap1.put(jSONObject0, boolean0);
      jSONObject0.append("Cx~fRGbmKm4#u", (Object) null);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = new JSONObject(long0);
      JSONObject jSONObject2 = jSONObject1.put("int", (Map) hashMap0);
      jSONObject2.toString(47, (-32));
      Double double0 = new Double(0L);
      Float float1 = new Float(1538.0406987632);
      Float.min((-1197), 0.0F);
      JSONObject.valueToString(jSONObject1, (-1197), 48);
      jSONObject0.isNull("u))`OALFW");
      try { 
        jSONObject1.getDouble("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.291924543607166
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short short0 = (short)690;
      Short short1 = Short.valueOf((short)690);
      JSONObject.numberToString(short1);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.putOpt("java.lang.Short@0000000001", "java.lang.Short@0000000001");
      jSONObject1.toString((int) (short)690, (int) (short)690);
      String string0 = "JSONArray[";
      jSONObject1.optInt("JSONArray[");
      String string1 = "47R";
      try { 
        jSONObject0.getBoolean("&CHiX 5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&CHiX 5\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.395908119293929
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("JONbject[", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("JONbject[", 22);
      jSONObject0.optString("JONbject[");
      jSONObject2.getDouble("JONbject[");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("' and instead saw '");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.4734903363520906
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.getInt("t$d($$p_06X<l_.mS$");
      jSONObject0.toString(44);
      jSONObject0.remove("\f");
      Object object0 = jSONObject0.opt("t$d($$p_06X<l_.mS$");
      JSONObject.valueToString(object0);
      jSONObject1.optJSONObject("re");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "t$d($$p_06X<l_.mS$";
      stringArray0[1] = "qP),f=?X8'' ";
      stringArray0[2] = "\f";
      stringArray0[3] = "java.lang.Integer@0000000003";
      stringArray0[4] = "\f";
      stringArray0[5] = "t$d($$p_06X<l_.mS$";
      stringArray0[6] = "java.lang.Integer@0000000003";
      stringArray0[7] = "{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}";
      stringArray0[8] = "joi";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      Object object1 = new Object();
      try { 
        jSONObject0.put((String) null, object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ": ";
      JSONObject jSONObject1 = new JSONObject();
      long long0 = 1230L;
      try { 
        jSONObject1.put((String) null, 1230L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.809514255849282
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "t$d($$p_06X<l_.mS$";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.putOpt("q3jK", jSONArray0);
      jSONObject1.remove("q3jK");
      linkedList1.addAll((Collection<? extends Byte>) linkedList2);
      jSONArray0.put((Collection) linkedList1);
      jSONObject0.toJSONArray(jSONArray0);
      JSONTokener jSONTokener0 = new JSONTokener("q3jK");
      try { 
        jSONTokener0.next('N');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'N' and instead saw 'q' at character 1 of q3jK
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      JSONObject jSONObject1 = new JSONObject(linkedList1);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.3701349548823623
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      jSONObject1.putOpt("yrc", "t$d($$p_06X<l_.mS$");
      jSONObject1.put("i6Nsopy(alueOf", 91);
      jSONObject0.getInt("t$d($$p_06X<l_.mS$");
      jSONObject0.remove("A^");
      Object object0 = new Object();
      jSONObject0.length();
      jSONObject0.names();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9886024839204437
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "isrotateLeft";
      Boolean boolean0 = new Boolean("Expected a ',' or ']'");
      JSONObject jSONObject1 = jSONObject0.put("isrotateLeft", 36.616763134260395);
      jSONObject1.toString(61, 61);
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject(13);
      try { 
        jSONObject2.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.5482559819268444
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getnotify", 2360L);
      JSONObject jSONObject2 = jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      JSONObject jSONObject3 = jSONObject2.put("t$d($$p_06X<l_.mS$", 32);
      jSONObject2.optDouble("t$d($$p_06X<l_.mS$");
      jSONObject0.optLong("t$d($$p_06X<l_.mS$");
      jSONObject0.toString((-1119));
      jSONObject3.accumulate("Unterminated string", "t$d($$p_06X<l_.mS$");
      jSONObject0.put("null", true);
      jSONObject3.getInt("t$d($$p_06X<l_.mS$");
      jSONObject3.toString(91, (-1119));
      Float float0 = new Float((double) 32);
      boolean boolean0 = jSONObject1.isNull("[}!'i/d>xg");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.1233281834461826
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      Double double0 = new Double(1619.3);
      Boolean boolean0 = new Boolean(" of ");
      Boolean.logicalXor(false, false);
      hashMap0.put(double0, boolean0);
      jSONObject0.accumulate(" of ", (Object) null);
      JSONObject.valueToString(hashMap0, 2833, (-2003));
      JSONObject jSONObject1 = jSONObject0.put("JONbject[", (Map) hashMap0);
      try { 
        jSONObject1.getJSONArray("JONbject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JONbject[\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-3289));
      Short.toUnsignedInt((short) (-533));
      Integer.getInteger("getintern", 65003);
      Integer.toUnsignedLong(65003);
      Integer.getInteger("\r");
      Integer.sum((-2621), 118);
      Integer.min(58, 65003);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5806491250694639
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "JSONObject[";
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("JSONObject[", (Map) hashMap0);
      String string1 = "getgetJSONArray";
      jSONObject0.opt("JSONObject[");
      try { 
        jSONObject1.getInt("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONObject[\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("d%F@?oF*~>;lQUp", 0);
      try { 
        jSONObject0.getDouble("issum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issum\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.846481543262211
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A}=WEy2";
      JSONObject jSONObject1 = jSONObject0.put("A}=WEy2", 97);
      jSONObject0.getInt("A}=WEy2");
      Object object0 = JSONObject.NULL;
      int int0 = (-843);
      JSONObject.valueToString(object0, (-843), (-843));
      jSONObject1.put("A}=WEy2", (Collection) null);
      try { 
        jSONObject1.getDouble("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Long long0 = new Long(0L);
      String string0 = JSONObject.valueToString((Object) null, 78, 78);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList0.removeFirst();
      linkedList0.removeAll(linkedList1);
      Byte byte0 = new Byte((byte) (-116));
      linkedList1.add(byte0);
      linkedList1.removeAll(linkedList0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      Short.compare((short) (-752), (short)896);
      Float float0 = new Float(2510.490322249853);
      Float.sum((short) (-752), (byte) (-116));
      Float.isFinite((-1648));
      Float.sum((-1648), (-811.3677F));
      JSONObject.numberToString(float0);
      Object object1 = new Object();
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      assertEquals(0, linkedList3.size());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1549550321362567
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("@\"P^wM0cP4bG");
      Long long0 = new Long((-1L));
      String string0 = "}j%BR1!N)I.k";
      String string1 = "{}";
      Long.getLong("{}", 0L);
      Long.toUnsignedString(0L);
      JSONObject.valueToString("KXG~T", (-20), 3024);
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5285482657398426
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      HashMap<JSONObject, Byte> hashMap1 = new HashMap<JSONObject, Byte>(hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      Object object0 = JSONObject.NULL;
      jSONObject1.put("wheel.json.JSONException", false);
      String string0 = null;
      JSONObject.valueToString("wheel.json.JSONException", 60, 1558);
      Boolean boolean0 = Boolean.TRUE;
      try { 
        jSONObject1.put((String) null, 375);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1711943783081258
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      String string0 = "%7A%|6&.";
      jSONObject0.optBoolean("%7A%|6&.", true);
      stringArray0[0] = "null";
      stringArray0[1] = "";
      hashMap0.entrySet();
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)98);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.add(byte0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList4 = new LinkedList<Byte>();
      linkedList1.addAll((Collection<? extends Byte>) linkedList4);
      LinkedList<Object> linkedList5 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList3);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<Long> linkedList6 = new LinkedList<Long>();
      assertEquals(0, linkedList6.size());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8898032420472077
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = 2360L;
      jSONObject0.put("getnotify", 2360L);
      JSONObject jSONObject1 = jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      jSONObject1.put("t$d($$p_06X<l_.mS$", 32);
      jSONObject1.optDouble("t$d($$p_06X<l_.mS$");
      jSONObject1.getString("getnotify");
      jSONObject1.optString("#rXhQV0WU");
      String string0 = "8HVDnX-Ignr1>\"IEmZ";
      try { 
        jSONObject1.getString("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7671949977916748
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      Double.sum((-500.2848857059798), 0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Double double1 = new Double(0.0);
      hashMap1.put((Double) null, double1);
      Double double2 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("B", double2);
      String string0 = "-amRVV)h$KCB9nwk`";
      jSONObject0.optDouble("B", 4079.18);
      String string1 = "{}";
      Long.getLong("{}");
      try { 
        jSONObject1.append("B", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[B] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.2685350920163807
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      String string1 = "isrotateLeft";
      double double0 = 0.0;
      jSONObject1.optDouble("Expected a ',' or ']'", 0.0);
      Boolean boolean0 = new Boolean("Expected a ',' or ']'");
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("Expected a ',' or ']'", object0);
      jSONObject0.put("isrotateLeft", 0.0);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.952027839003549
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("I3\"W", (Collection) linkedList0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      linkedList1.removeAll(linkedList0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)124);
      linkedList2.push(byte0);
      jSONObject0.toString((int) (byte)124);
      try { 
        jSONObject0.getJSONObject(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.optDouble("ishashCode", 1.0);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      String string0 = "";
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.3195749966735852
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      JSONObject jSONObject1 = jSONObject0.put("q3\"{", (Collection) linkedList0);
      jSONObject1.put("] is not a Boolean.", (Map) null);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)124);
      linkedList2.push(byte0);
      linkedList1.addAll((Collection<? extends Byte>) linkedList2);
      Byte.toUnsignedInt((byte) (-124));
      linkedList0.add((Object) jSONObject0);
      Double double0 = new Double(1602.3484161);
      JSONObject.valueToString(byte0, (byte)124, (-1539));
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.flush();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)99);
      linkedList0.add(byte0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList0.addAll((Collection<? extends Byte>) linkedList1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      String string0 = ",\n";
      jSONObject0.optInt(",\n", 106);
      String string1 = "m>/9j";
      JSONTokener jSONTokener0 = new JSONTokener("m>/9j");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of m>/9j
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Integer integer0 = new Integer(87);
      Integer integer1 = new Integer(385);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "OzKnrmC[HK+@";
      stringArray0[1] = "OzKnrmC[HK+@";
      JSONObject jSONObject0 = new JSONObject("OzKnrmC[HK+@", stringArray0);
      jSONObject0.optString("v,(FCRe", "[BhD(k");
      try { 
        jSONObject0.getInt("1'Td|HD~4F5zIJWe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1'Td|HD~4F5zIJWe\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.928848286130613
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject();
      BiConsumer<Object, Long> biConsumer0 = (BiConsumer<Object, Long>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      Boolean.valueOf(true);
      Float float0 = new Float((-5549.2));
      Boolean.valueOf(true);
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap1.put(jSONObject0, boolean0);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = new JSONObject(long0);
      JSONObject jSONObject2 = jSONObject1.put("int", (Map) hashMap0);
      Double double0 = new Double(0L);
      Float float1 = new Float(3491.385890754);
      jSONObject2.get("int");
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.optJSONArray((String) null);
      jSONObject2.optString("int", "int");
      try { 
        jSONObject3.getInt("wheel.json.JSONObject@0000000005");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000005\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.9792045174343245
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1168.76618);
      double double1 = new Double(0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Double double2 = new Double((-832.7818749052763));
      hashMap1.put(double2, double2);
      JSONObject jSONObject1 = jSONObject0.putOpt(",:]}/\"[{;=#", hashMap1);
      jSONObject1.optDouble("V", (-832.7818749052763));
      Long long0 = Long.valueOf(0L);
      jSONObject0.append("V", long0);
      JSONTokener jSONTokener0 = new JSONTokener("-amRVV)h$KCB9nwk`");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of -amRVV)h$KCB9nwk`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5507721843811002
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "Bad value from toJSONString: ";
      JSONObject jSONObject0 = new JSONObject();
      String string1 = "Nullp pointer";
      JSONObject jSONObject1 = jSONObject0.put("Nullp pointer", 54.132126);
      jSONObject1.getLong("Nullp pointer");
      Short short0 = new Short((short) (-445));
      try { 
        jSONObject0.getDouble("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.338872053314866
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "25vG|O!&Pw|]");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject((Object) "JSONA\"rwy[");
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6904612825044931
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 380;
      Integer integer0 = new Integer(380);
      Integer integer1 = new Integer(380);
      Integer.getInteger("isreverse", 380);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Integer integer2 = new Integer(380);
      String string0 = "null";
      try { 
        jSONObject0.getJSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String string0 = JSONObject.quote("P@ 1Gt,'- HAX\"_)");
      assertEquals("\"P@ 1Gt,'- HAX\\\"_)\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0335620542068176
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      Object object0 = new Object();
      Double double0 = new Double(0.0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(2773);
      jSONObject0.putOpt("z)$]VrEI@=", (Object) null);
      Long long0 = new Long((-64089270));
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Long.compareUnsigned(0L, 1L);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Integer integer0 = new Integer(87);
      Integer integer1 = new Integer(385);
      Integer.remainderUnsigned(1524, 385);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "OzKnrmC[HK+@";
      stringArray0[1] = "OzKnrmC[HK+@";
      JSONObject jSONObject0 = new JSONObject(integer1, stringArray0);
      try { 
        jSONObject0.getLong("OzKnrmC[HK+@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"OzKnrmC[HK+@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Short short0 = new Short((short)60);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.has("4ERJrNgNED<_Ur/@=");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.939290554095524
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer integer0 = new Integer(380);
      Integer integer1 = new Integer(380);
      JSONObject jSONObject0 = new JSONObject((Object) "JSONObject[");
      jSONObject0.toString(380);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = new Integer(380);
      Integer integer1 = new Integer(380);
      Integer integer2 = new Integer(380);
      String string0 = "OzKnrmC[HK+@";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(integer2, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.9540230200763147
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\r";
      JSONObject jSONObject1 = jSONObject0.putOpt("\r", "\r");
      jSONObject0.optInt("JSONArray[");
      String string1 = "Expected a ',' or ']'";
      jSONObject1.put("Expected a ',' or ']'", (Object) null);
      jSONObject1.optDouble("Expected a ',' or ']'", 0.0);
      try { 
        jSONObject1.getBoolean("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\r\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.023715506836125
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer(380);
      Integer integer1 = new Integer(380);
      Float float0 = new Float((double) 380);
      Float.isFinite(1.0F);
      Float.sum((-1.0F), 0.0F);
      Float.isFinite(0.0F);
      Float.max(4540.32F, (-1.0F));
      Float.min(0.0F, 380);
      Float.isFinite(0.0F);
      Float.isFinite((-1.0F));
      Float.min((-3587.4F), 413.66132F);
      Integer integer2 = new Integer(33);
      JSONObject jSONObject0 = new JSONObject(float0);
      Double double0 = new Double((-1.0F));
      jSONObject0.put("4N,O9KmR&!SP%", (Object) double0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5171063970610277
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Short short0 = new Short((short)62);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "000";
      stringArray0[2] = "";
      String string0 = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      int int0 = 59;
      Double double0 = new Double(Double.NaN);
      Double.max(Double.NaN, 59);
      Double.max((short)62, Double.NaN);
      Double.min(59, 59);
      try { 
        jSONObject0.putOpt("", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1839637727244874
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-108));
      Byte.toUnsignedLong((byte) (-108));
      linkedList1.add(byte0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      linkedList1.addAll((Collection<? extends Byte>) linkedList2);
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      String[] stringArray0 = new String[4];
      String string0 = "IXXh6\"\\D(j<~";
      stringArray0[0] = "IXXh6\"D(j<~";
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.append("IXXh6\"D(j<~", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.16313943992515
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte byte0 = (byte)117;
      Byte byte1 = new Byte((byte)117);
      JSONObject.valueToString(byte1);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "wheel.json.JSONArray";
      stringArray0[2] = "java.lang.Byte@0000000001";
      stringArray0[3] = "java.lang.Byte@0000000001";
      stringArray0[4] = "java.lang.Byte@0000000001";
      stringArray0[5] = "java.lang.Byte@0000000001";
      stringArray0[6] = "%k";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Byte byte2 = new Byte((byte)123);
      Byte.compare((byte)117, (byte)117);
      hashMap0.putIfAbsent(byte2, byte1);
      hashMap0.put("java.lang.Byte@0000000001", "java.lang.Byte@0000000001");
      JSONObject jSONObject1 = jSONObject0.put("%k", (Map) hashMap0);
      try { 
        jSONObject1.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.473502385080649
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)1);
      linkedList2.addLast(byte0);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      Byte byte1 = new Byte((byte)70);
      linkedList3.add(byte1);
      linkedList3.addAll((Collection<? extends Byte>) linkedList1);
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      jSONObject0.put("isremainderUnsigned", (double) (byte)1);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = jSONObject0.put("getsum", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5599511647956277
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A}=WEy2";
      JSONObject jSONObject1 = jSONObject0.put("A}=WEy2", 97);
      jSONObject0.getInt("A}=WEy2");
      int int0 = (-843);
      jSONObject1.put("A}=WEy2", (Collection) null);
      String string1 = "4J \\Rebuf'2~z~";
      try { 
        jSONObject1.getDouble("4J Rebuf'2~z~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4J Rebuf'2~z~\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.5936174605927704
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('m');
      stringWriter0.flush();
      Integer integer0 = new Integer(396);
      Float float0 = new Float(0.10310121115616201);
      Float.sum(0.0F, 0.0F);
      Integer integer1 = new Integer(396);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("EZ{;x_WOrO+XhE%ip", (Object) integer1);
      int int0 = jSONObject0.optInt("EZ{;x_WOrO+XhE%ip");
      assertEquals(4, jSONObject0.length());
      assertEquals(396, int0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7841758925702789
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      Integer integer0 = new Integer(87);
      Integer integer1 = new Integer(385);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.toString((-4046));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.043129785084379
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 91;
      JSONObject jSONObject1 = jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      String string0 = "isconyValutOf";
      jSONObject0.remove("X?`;_!Q");
      jSONObject0.optDouble("JSONArray initial value should be a string or collection or array.", (-1284.7248294472));
      jSONObject0.putOpt("X?`;_!Q", "t$d($$p_06X<l_.mS$");
      jSONObject1.optBoolean("getreplaceAll");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("getreplaceAll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getreplaceAll
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.136163998271685
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a number.");
      JSONObject.valueToString("] is not a number.");
      jSONObject0.opt("getgetClass");
      Long long0 = new Long((-1L));
      Long.getLong("}j%BR1!N)I.k", 0L);
      Long.toUnsignedString((-1638L));
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (-1.0));
      jSONObject1.getDouble("] is not a number.");
      jSONObject0.put("wai", true);
      Double double0 = new Double(3024);
      JSONObject.valueToString(double0);
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.optInt("yA'yZ/Fk7Z+b_4C");
      String string0 = "issignum";
      try { 
        jSONObject2.getDouble("issignum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issignum\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.2995530335744938
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList0.removeAll(linkedList1);
      Byte byte0 = new Byte((byte)46);
      Byte byte1 = new Byte((byte) (-118));
      linkedList0.add(byte1);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      linkedList0.addAll((Collection<? extends Byte>) linkedList2);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      JSONObject jSONObject1 = new JSONObject((Object) "getnotify");
      Short short0 = new Short((short)57);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "getnotify";
      stringArray0[1] = "IXXh6\"D(j<~";
      stringArray0[2] = "IXXh6\"D(j<~";
      JSONObject jSONObject2 = new JSONObject(short0, stringArray0);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)1);
      linkedList2.addLast(byte0);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      Byte byte1 = new Byte((byte)70);
      linkedList3.add(byte1);
      linkedList3.addAll((Collection<? extends Byte>) linkedList1);
      String string0 = "G[v ";
      try { 
        jSONObject0.getBoolean("G[v ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G[v \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.8982879526490464
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\r";
      JSONObject jSONObject1 = jSONObject0.putOpt("\r", "\r");
      jSONObject0.optInt("\r");
      String string1 = "Expected a ',' or ']'";
      jSONObject1.optDouble("Expected a ',' or ']'", 0.0);
      try { 
        jSONObject1.getBoolean("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\r\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      stringWriter0.flush();
      stringWriter0.flush();
      Double.valueOf(0.0);
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7664123555634643
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      JSONObject jSONObject1 = jSONObject0.put("JONbject[", (Map) hashMap1);
      jSONObject1.getString("JONbject[");
      jSONObject1.optJSONArray("tr");
      try { 
        jSONObject0.getLong("JONbject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JONbject[\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.1535324566542537
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      jSONObject0.put(" of ", false);
      JSONObject jSONObject1 = jSONObject0.accumulate(" of ", (Object) null);
      jSONObject1.put("Unclosed comment", (Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray(" of ");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("5");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList4 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList5 = new LinkedList<Byte>();
      Boolean boolean0 = new Boolean("T|*m{F7d");
      try { 
        jSONObject0.getString("T|*m{F7d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"T|*m{F7d\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short short0 = (short)32;
      Short short1 = new Short((short)32);
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.clear();
      linkedList1.removeAll(linkedList0);
      Byte byte0 = new Byte((byte) (-118));
      linkedList1.add(byte0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      linkedList1.addAll((Collection<? extends Byte>) linkedList2);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "wheel.json.JSONTokener";
      stringArray0[1] = "wheel.json.JSONTokener";
      stringArray0[5] = "wheel.json.JSONTokener";
      stringArray0[3] = "wheel.json.JSONTokener";
      stringArray0[4] = "wheel.json.JSONTokener";
      stringArray0[5] = "wheel.json.JSONTokener";
      stringArray0[6] = "wheel.json.JSONTokener";
      stringArray0[7] = "Expected a ',' or '}'";
      stringArray0[8] = "wheel.json.JSONTokener";
      JSONObject jSONObject0 = new JSONObject("wheel.json.JSONTokener", stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)87);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte1 = new Byte((byte)87);
      linkedList0.add(byte1);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      Float float0 = new Float((double) (byte)87);
      Float.sum((byte)87, (byte)87);
      Float.isFinite(594.0F);
      Float.sum(174.0F, 594.0F);
      JSONObject.numberToString(byte0);
      Object object0 = new Object();
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      assertEquals(0, linkedList4.size());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.0948187566050076
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "] is not a numbGr.";
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a numbGr.");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter1 = (StringWriter)jSONObject0.write(stringWriter0);
      stringWriter0.flush();
      JSONObject.valueToString("] is not a numbGr.");
      jSONObject0.optInt("\"java.lang.String@0000000064\"");
      stringWriter0.flush();
      stringWriter1.append('|');
      try { 
        jSONObject0.getLong("~bkR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~bkR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)1);
      linkedList2.addLast(byte0);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      Byte byte1 = new Byte((byte)70);
      linkedList3.add(byte1);
      JSONObject jSONObject1 = new JSONObject((Object) ",\n");
      String string0 = jSONObject1.toString();
      assertEquals(3, jSONObject1.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Long> hashMap1 = new HashMap<Object, Long>();
      hashMap0.entrySet();
      String string0 = jSONObject0.toString((-1343), 107);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.651550134800023
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.containsAll(linkedList0);
      linkedList1.removeAll(linkedList0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      linkedList1.addAll((Collection<? extends Byte>) linkedList2);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "IXXh6\"D(j<~";
      stringArray0[1] = "IXXh6\"D(j<~";
      stringArray0[2] = "IXXh6\"D(j<~";
      stringArray0[3] = "IXXh6\"D(j<~";
      stringArray0[4] = "bDE*[ztf9XX7H(PxZ";
      stringArray0[5] = "IXXh6\"D(j<~";
      stringArray0[6] = "bDE*[ztf9XX7H(PxZ";
      JSONObject jSONObject1 = new JSONObject(linkedList3, stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0579054247036734
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Long long0 = new Long((-3687L));
      Long.compareUnsigned((-4259L), 202L);
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.594166699118017
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList0.removeFirst();
      linkedList0.removeAll(linkedList1);
      Byte byte0 = new Byte((byte) (-116));
      linkedList1.add(byte0);
      linkedList1.removeAll(linkedList0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      Short.compare((short) (-752), (short)896);
      Float float0 = new Float(2510.490322249853);
      Float.sum((short) (-752), (byte) (-116));
      Float.isFinite((-1648));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("lHPA", 0.0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Qo\"7");
      jSONObject0.optLong("8HVDnX-Ignr1>\"IEmZ");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Integer integer0 = new Integer(869);
      JSONObject.testValidity(integer0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)1);
      Byte.toUnsignedInt((byte)1);
      linkedList2.addLast(byte0);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      Byte byte1 = new Byte((byte)99);
      linkedList3.add(byte1);
      Byte byte2 = new Byte((byte)70);
      linkedList3.add(byte2);
      linkedList3.addAll((Collection<? extends Byte>) linkedList1);
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      Integer.min((-1225), (-121175892));
      JSONObject.getNames((Object) linkedList2);
      Long long0 = new Long((-2681L));
      assertEquals((-2681L), (long)long0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      jSONObject0.optBoolean("%7A%|6&.", true);
      stringArray0[0] = "null";
      stringArray0[1] = "";
      Set<Map.Entry<Object, Long>> set0 = (Set<Map.Entry<Object, Long>>)hashMap0.entrySet();
      Float.sum((-823.032F), 0.0F);
      JSONObject jSONObject1 = new JSONObject((Object) "");
      HashMap<Object, Long> hashMap1 = new HashMap<Object, Long>();
      Set<Map.Entry<Object, Long>> set1 = (Set<Map.Entry<Object, Long>>)hashMap1.entrySet();
      assertNotSame(set1, set0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.5501328557052076
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.optBoolean(":IhLTH?so", false);
      HashMap<Object, Long> hashMap1 = new HashMap<Object, Long>();
      hashMap1.entrySet();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(x5>a%jw\" h";
      stringArray0[1] = "null";
      stringArray0[2] = "}C9gNY9x[uY";
      stringArray0[3] = "-z.";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean0 = jSONObject1.optBoolean("toJ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.6414480415035768
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.removeAll(linkedList0);
      Byte byte0 = new Byte((byte) (-118));
      linkedList1.add(byte0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      linkedList1.addAll((Collection<? extends Byte>) linkedList2);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "IXXh6\"D(j<~";
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      hashMap0.entrySet();
      boolean boolean0 = jSONObject0.optBoolean("toS");
      assertFalse(boolean0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(91);
      Double.sum(809.1206823471102, 809.1206823471102);
      Double double1 = new Double(1848.30120551982);
      Long long0 = new Long(208L);
      jSONObject0.putOpt((String) null, long0);
      Float float0 = new Float(418.28368256343896);
      try { 
        jSONObject0.append((String) null, double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer(380);
      Integer integer1 = new Integer(380);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Long long0 = new Long(380);
      hashMap0.replace((Object) integer0, long0, long0);
      hashMap0.entrySet();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.2067368439362582
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("?");
      jSONObject0.optDouble("%M/vfIis4q';n%I", 2193.0);
      HashMap<Object, Long> hashMap1 = new HashMap<Object, Long>();
      Set<Map.Entry<Object, Long>> set0 = (Set<Map.Entry<Object, Long>>)hashMap1.entrySet();
      assertTrue(set0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6798652114003596
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Integer integer0 = new Integer(87);
      Integer integer1 = new Integer(87);
      Integer integer2 = new Integer(8448);
      Integer integer3 = new Integer(87);
      JSONObject jSONObject0 = new JSONObject(integer3);
      String string0 = jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.7201934592198251
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1168.76618);
      Double.sum(0.0, 1168.76618);
      Double double1 = new Double(1168.76618);
      jSONObject0.putOpt(",:]}/\"[{;=#", jSONObject0);
      String string0 = "-amRVV)h$KCB9nwk`";
      Float float0 = new Float(1168.76618);
      try { 
        jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[,:]}/\"[{;=#] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("2%k!!/", "2%k!!/");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Short short0 = new Short((short)32);
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer.getInteger("{", (Integer) null);
      long long0 = Integer.toUnsignedLong((short)32);
      Integer.getInteger("");
      Integer.getInteger("xO");
      Integer.sum((-471), 16);
      Integer integer0 = new Integer((short)32);
      Integer integer1 = Integer.valueOf((int) (short)32);
      Integer.getInteger("xO", integer1);
      Integer.min(2433, 21);
      JSONObject.getNames((Object) "\t");
      Long long1 = new Long(1L);
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.removeAll(linkedList0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)1);
      linkedList2.addLast(byte0);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      Byte byte1 = new Byte((byte)99);
      linkedList3.add(byte1);
      Byte byte2 = new Byte((byte)70);
      linkedList3.add(byte2);
      linkedList3.addAll((Collection<? extends Byte>) linkedList1);
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Short short0 = new Short((short)32);
      Integer.toUnsignedLong(79);
      Integer.getInteger("getintern");
      String string0 = JSONObject.quote("s>/H");
      assertEquals("\"s>/H\"", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "getgetChars";
      stringArray0[1] = "^.FgBNN$h+[N];a";
      stringArray0[2] = "^.FgBNN$h+[N];a";
      stringArray0[3] = "getgetChars";
      stringArray0[4] = "^.FgBNN$h+[N];a";
      stringArray0[5] = "^.FgBNN$h+[N];a";
      stringArray0[6] = "Ju5BaV&C*J|?UABK{<";
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.flush();
      String string0 = JSONObject.quote(";X:i_'/~[W-1Vy[hQO");
      assertEquals("\";X:i_'/~[W-1Vy[hQO\"", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      HashMap<Double, JSONObject> hashMap1 = new HashMap<Double, JSONObject>();
      try { 
        jSONObject0.getJSONArray("x7*C5en`@eq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x7*C5en`@eq\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Byte byte0 = new Byte((byte) (-3));
      linkedList0.add(byte0);
      Byte byte1 = new Byte((byte) (-81));
      linkedList0.add(byte1);
      linkedList0.removeAll(linkedList1);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      linkedList0.addAll((Collection<? extends Byte>) linkedList2);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      Integer integer0 = new Integer((-629));
      Integer.getInteger("bDE*[ztf9XX7H(PxZ");
      Integer.sum(42, (-629));
      Integer.min(123, 8);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("getformat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getformat\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6814668007102822
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = ",:]}/\\\"[{;=#";
      Double double0 = new Double(1168.76618);
      Double.sum(0.0, 1168.76618);
      hashMap0.put(double0, double0);
      JSONObject jSONObject1 = jSONObject0.putOpt(",:]}/\"[{;=#", jSONObject0);
      jSONObject1.optLong(",:]}/\"[{;=#", (-765L));
      jSONObject0.optDouble("-amRVV)h$KCB9nwk`", 0.0);
      try { 
        jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[,:]}/\"[{;=#] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      stringWriter0.flush();
      stringWriter0.flush();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("822TbXmQK@x", 4117L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      try { 
        Byte.decode("b};L7AK1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"b};L7AK1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "getgetChars";
      stringArray0[1] = "^.FgBNN$h+[N];a";
      stringArray0[2] = "^.FgBNN$h+[N];a";
      stringArray0[3] = "getgetChars";
      stringArray0[4] = ":eT>Qc<glG<1dVuZNb";
      stringArray0[5] = "^.FgBNN$h+[N];a";
      stringArray0[6] = "Ju5BaV&C*J|?UABK{<";
      stringArray0[7] = "getgetChars";
      stringArray0[8] = "^.FgBNN$h+[N];a";
      JSONObject jSONObject0 = new JSONObject("^.FgBNN$h+[N];a", stringArray0);
      jSONObject0.optInt("VF+GRgg$>", (-3412));
      HashMap<Object, Long> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Object, Long>(1525, (-28.81F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -28.81
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.5228146795137598
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Byte byte0 = new Byte((byte) (-81));
      linkedList0.add(byte0);
      linkedList0.removeAll(linkedList1);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      linkedList0.addAll((Collection<? extends Byte>) linkedList2);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      Integer integer0 = new Integer((-629));
      Integer.sum(42, (-629));
      Byte byte1 = new Byte((byte) (-81));
      JSONObject jSONObject0 = new JSONObject(linkedList3);
      Byte.compare((byte)76, (byte)76);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.2068772722509638
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.clear();
      linkedList1.removeAll(linkedList0);
      Byte byte0 = new Byte((byte) (-118));
      Byte byte1 = new Byte((byte) (-118));
      linkedList1.add(byte1);
      linkedList1.add(byte0);
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      linkedList1.addAll((Collection<? extends Byte>) linkedList2);
      LinkedList<Byte> linkedList3 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList2);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.quote("] not found.");
      assertEquals("\"] not found.\"", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer integer0 = new Integer(380);
      Integer integer1 = new Integer(380);
      Integer.divideUnsigned(380, 380);
      Integer.getInteger("\t", integer1);
      Integer.toUnsignedLong((-1994));
      Integer.getInteger("\t");
      Integer.getInteger("!vBxHlH8I(0G} ");
      Float.max(380, 0.0F);
      Float.min(0.0F, 380.0F);
      Float.isFinite((-1994));
      Float.isFinite(1);
      Integer integer2 = new Integer(97);
      JSONObject jSONObject0 = new JSONObject(integer1);
      jSONObject0.optJSONObject("!vBxHlH8I(0G} ");
      assertEquals(1, jSONObject0.length());
  }
}
