/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 12:37:11 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2210532829576959
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(30);
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("z", stringWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v*");
      StringReader stringReader0 = new StringReader("v*");
      StringReader stringReader1 = new StringReader("</");
      JavaParser javaParser0 = new JavaParser(stringReader1);
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 1964);
      stringWriter0.append((CharSequence) "z");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.setIdentifier("#\"az5ldVTG");
      simpleNode0.setIdentifier("v*");
      SimpleNode simpleNode1 = new SimpleNode(1210);
      simpleNode0.setIdentifier("{");
      simpleNode1.parent = (Node) simpleNode0;
      simpleNode0.dump("H]=<8>a?", stringWriter0);
      SimpleNode simpleNode2 = new SimpleNode(30);
      simpleNode1.jjtGetParent();
      SimpleNode simpleNode3 = new SimpleNode((-3033));
      simpleNode3.jjtGetNumChildren();
      simpleNode0.jjtGetParent();
      assertEquals(1965, simpleNode0.jjtGetNumChildren());
      
      simpleNode2.jjtGetParent();
      assertEquals(0, simpleNode2.jjtGetNumChildren());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode((-2658));
      SimpleNode simpleNode1 = new SimpleNode((-2658));
      simpleNode0.parent = (Node) simpleNode1;
      Node node0 = simpleNode0.jjtGetParent();
      JavaParser javaParser0 = new JavaParser("PackageDeclaration");
      simpleNode0.parser = javaParser0;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(node0, (-2658));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      simpleNode0.setIdentifier(">>");
      stringWriter0.flush();
      simpleNode0.dump(">>", stringWriter0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ">>");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      int int0 = (-4027);
      PushbackInputStream pushbackInputStream1 = null;
      try {
        pushbackInputStream1 = new PushbackInputStream(sequenceInputStream0, (-4027));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8120939218445867
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(1);
      String string0 = "&;p4eO#\">37zdQ$np";
      stringWriter0.write("&;p4eO#\">37zdQ$np");
      simpleNode0.setIdentifier(";");
      simpleNode0.setIdentifier("roXQ^MFJ+-jzWJ6bp");
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('C');
      stringWriter1.write((-10384350));
      simpleNode0.dump("PackageDeclaration", stringWriter1);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter0.close();
      stringWriter1.close();
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = null;
      try {
        stringWriter4 = new StringWriter((-1075307805));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8291879389386038
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "An ");
      simpleNode0.setIdentifier("<<");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.setIdentifier("<<");
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.setIdentifier("7v]*} UPwij");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("An ", stringWriter2);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("2+Q?Z%txl");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9925623248862889
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(73);
      SimpleNode simpleNode0 = new SimpleNode(73);
      simpleNode0.setIdentifier("7");
      stringWriter0.write(532);
      stringWriter0.flush();
      stringWriter0.write(532);
      stringWriter0.write("7");
      stringWriter1.flush();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringWriter0.write(3);
      simpleNode0.dump("7", stringWriter1);
      simpleNode0.identifiers = null;
      StringWriter stringWriter2 = new StringWriter();
      stringWriter0.close();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter3 = new StringWriter();
      SystemInUtil.addInputLine("7");
      MockFile mockFile0 = new MockFile("7");
      mockFile0.getCanonicalFile();
      mockFile0.setReadable(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"//\"");
      mockFile0.mkdir();
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9807633640066171
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(30);
      simpleNode0.toString();
      simpleNode0.toString();
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("&&");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("aP<3(>2z5) y/0b", stringWriter0);
      simpleNode0.dump("&&", stringWriter1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.8249506629220404
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(30);
      int int0 = 18;
      simpleNode0.id = 18;
      StringReader stringReader0 = new StringReader(":");
      StringReader stringReader1 = new StringReader("\"%=\"");
      int int1 = 1977;
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("&");
      SimpleNode simpleNode1 = new SimpleNode(30);
      simpleNode1.id = (-1889);
      simpleNode0.dump(":", stringWriter0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(18);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream((PipedOutputStream) null, 1977);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8001573041913385
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(30);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"ontinue\"");
      simpleNode0.id = 18;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter0 = new StringWriter(18);
      simpleNode0.setIdentifier("u>'2Gw]");
      simpleNode0.dump("u>'2Gw]", stringWriter0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"ontinue\"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter1 = new StringWriter();
      SystemInUtil.addInputLine("Er");
      MockFile mockFile0 = new MockFile("<");
      try { 
        mockFile0.getCanonicalFile();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9925623248862889
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1;
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.toString();
      StringWriter stringWriter1 = new StringWriter();
      StringReader stringReader0 = new StringReader("-jQK}6HtNT`3");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("PackageDeclaration", stringWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream0, 1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream2 = new PipedInputStream(1);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream((InputStream) null);
      pushbackInputStream2.close();
      int int1 = (-660);
      PipedInputStream pipedInputStream3 = null;
      try {
        pipedInputStream3 = new PipedInputStream(pipedOutputStream0, (-660));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.8120939218445867
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1;
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1);
      simpleNode0.setIdentifier("<");
      String string0 = "}";
      simpleNode0.setIdentifier("}");
      simpleNode0.dump("<", stringWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.002663334987299
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(30);
      simpleNode0.toString();
      SystemInUtil.addInputLine("ClassOrInterfaceType");
      simpleNode0.toString();
      simpleNode0.setIdentifier("<=");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("ClassOrInterfaceType");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "<=");
      stringWriter1.write(30);
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("\"int\"", stringWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream0, 30);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream1, pushbackInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream2 = new PipedInputStream(30);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pipedInputStream2);
      pushbackInputStream2.close();
      PipedInputStream pipedInputStream3 = null;
      try {
        pipedInputStream3 = new PipedInputStream(pipedOutputStream0, 30);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8120939218445867
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1;
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "<", 1, 1);
      simpleNode0.setIdentifier("<");
      String string0 = "";
      simpleNode0.setIdentifier("");
      simpleNode0.dump("<", stringWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2774737549423403
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleNode simpleNode0 = new SimpleNode(30);
      simpleNode0.toString();
      simpleNode0.toString();
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.jjtAddChild(simpleNode0, 29);
      simpleNode1.toString();
      SimpleNode simpleNode2 = new SimpleNode(0);
      simpleNode2.toString("ClassOrInterfaceType");
      SimpleNode simpleNode3 = new SimpleNode(29);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.jjtAddChild(simpleNode3, 30);
      simpleNode0.jjtGetChild(30);
      SimpleNode simpleNode4 = new SimpleNode(0);
      simpleNode4.jjtGetNumChildren();
      simpleNode3.toString("@K3");
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild((-589));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -589
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2216634247974913
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("r", stringWriter0);
      stringWriter0.append((CharSequence) "r", 1, 1);
      simpleNode0.setIdentifier("_^e+]pBc5\"Aj*+.");
      SystemInUtil.addInputLine("r");
      SimpleNode simpleNode1 = new SimpleNode((-1));
      SimpleNode simpleNode2 = new SimpleNode((-1105601886));
      StringWriter stringWriter1 = new StringWriter();
      Node[] nodeArray0 = new Node[0];
      simpleNode2.children = nodeArray0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode2.dump("{", stringWriter1);
      // Undeclared exception!
      try { 
        simpleNode2.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1105601886
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0909193939155815
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 6;
      SimpleNode simpleNode0 = new SimpleNode(6);
      simpleNode0.jjtAddChild(simpleNode0, 6);
      Node node0 = simpleNode0.jjtGetChild(6);
      node0.jjtAddChild(simpleNode0, 894);
      simpleNode0.toString("implements");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier(">");
      simpleNode0.jjtAddChild(simpleNode0, 6);
      SimpleNode simpleNode1 = new SimpleNode(6);
      simpleNode0.toString(">");
      SystemInUtil.addInputLine("WB<5,0v@wiwmW");
      simpleNode1.identifiers = null;
      SimpleNode simpleNode2 = new SimpleNode(894);
      // Undeclared exception!
      try { 
        simpleNode1.setIdentifier(">");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9749489421033589
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(30);
      int int0 = 18;
      simpleNode0.id = 18;
      String string0 = ":";
      StringReader stringReader0 = new StringReader(":");
      StringReader stringReader1 = new StringReader("\"%=\"");
      JavaParser javaParser0 = new JavaParser((Reader) null);
      simpleNode0.jjtAddChild(simpleNode0, 1977);
      StringWriter stringWriter0 = new StringWriter();
      String string1 = "&";
      simpleNode0.setIdentifier("&");
      SimpleNode simpleNode1 = new SimpleNode(30);
      simpleNode1.id = (-1889);
      // Undeclared exception!
      simpleNode0.dump(":", stringWriter0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.52376653402018
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(6);
      simpleNode0.jjtAddChild(simpleNode0, 6);
      simpleNode0.jjtGetChild(6);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier(">=");
      simpleNode0.jjtAddChild(simpleNode0, 6);
      SimpleNode simpleNode1 = new SimpleNode(6);
      SimpleNode simpleNode2 = new SimpleNode(6);
      simpleNode2.toString(">=");
      simpleNode1.toString("<<");
      String string0 = "";
      SystemInUtil.addInputLine("<<");
      StringWriter stringWriter1 = new StringWriter();
      char[] charArray0 = new char[0];
      stringWriter1.write(charArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      stringWriter1.append('5');
      simpleNode0.dump(string0, stringWriter1);
      int int0 = 595;
      simpleNode1.toString(string0);
      simpleNode0.jjtGetChild(int0);
      simpleNode0.jjtAddChild(simpleNode2, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.8249506629220404
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "_^e+]pBc5\"Aj*+.", 1, 1);
      simpleNode0.setIdentifier("_^e+]pBc5\"Aj*+.");
      String string0 = "G";
      simpleNode0.setIdentifier("G");
      stringWriter1.flush();
      stringWriter1.write(1);
      simpleNode0.dump(" <T~Ls]Hvg<*z{MF", stringWriter0);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.close();
      stringWriter1.close();
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter(1);
      StringWriter stringWriter5 = new StringWriter(1);
      StringWriter stringWriter6 = null;
      try {
        stringWriter6 = new StringWriter((-3351));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.7962209059715708
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      simpleNode0.setIdentifier("@");
      stringWriter0.write(1);
      stringWriter0.write(539);
      stringWriter0.flush();
      stringWriter0.write(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "2");
      stringWriter1.write("<identifier>Literal Value</identifier>\n");
      stringWriter1.append((CharSequence) "<identifier>Literal Value</identifier>\n");
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      stringWriter1.flush();
      stringWriter1.write(0);
      simpleNode0.dump("<identifier>Literal Value</identifier>\n", stringWriter0);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = null;
      try {
        stringWriter3 = new StringWriter((-2419));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(6);
      simpleNode0.jjtAddChild(simpleNode0, 6);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      Node node0 = simpleNode0.jjtGetChild(6);
      simpleNode0.jjtAddChild(node0, 3);
      StringReader stringReader0 = new StringReader(">>");
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1976);
      simpleNode0.jjtGetParent();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = null;
      nodeArray0[1] = null;
      nodeArray0[2] = null;
      nodeArray0[3] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtAddChild((Node) null, 1976);
      simpleNode0.jjtGetChild(55);
      assertEquals(1977, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3221086830269158
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1;
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.setIdentifier((String) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1);
      simpleNode0.setIdentifier("<");
      String string0 = "{";
      simpleNode0.setIdentifier("{");
      // Undeclared exception!
      try { 
        simpleNode0.dump("<", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-488));
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.dump("+.Y8AtaZG[", (Writer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "ShiftExpression";
      int int0 = 24;
      StringReader stringReader0 = new StringReader("ShiftExpression");
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (-1617319491));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.2438228280066395
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[21];
      byteArray0[2] = (byte)93;
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleNode simpleNode0 = new SimpleNode(73);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Fzau%'F=(");
      SystemInUtil.addInputLine("Fzau%'F=(");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter0 = new StringWriter((byte)107);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      simpleNode0.toString("<");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<Block : <");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<Block : <");
      simpleNode0.dump("<", stringWriter0);
      StringReader stringReader0 = new StringReader("<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Block : < : f/Fzau%'F=(");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("<Block : <", "Fzau%'F=(");
      mockFile0.mkdirs();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IC=;5}0B:&N| ");
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IC=;5}0B:&N| ");
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<Block : <");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.087302357535235
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[21];
      byteArray0[2] = (byte)86;
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleNode simpleNode0 = new SimpleNode(73);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Fzau%'F=(");
      SystemInUtil.addInputLine("Fzau%'F=(");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter0 = new StringWriter((byte)107);
      simpleNode0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Block : <");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Block : <");
      simpleNode0.dump("<", stringWriter0);
      StringReader stringReader0 = new StringReader("<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("Block : <", "Fzau%'F=(");
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Block : <");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IC=;5}0B:&N| ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IC=;5}0B:&N| ");
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Block : <");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4649419270564863
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode((-1189));
      simpleNode0.id = 18;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringReader stringReader0 = new StringReader(">");
      StringReader stringReader1 = new StringReader("\"%=\"");
      JavaParser javaParser0 = new JavaParser(stringReader1);
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 1977);
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode((-1189));
      int int0 = (-1898);
      simpleNode1.id = (-1898);
      simpleNode0.dump(">", stringWriter0);
      SimpleNode simpleNode2 = new SimpleNode(0);
      simpleNode2.parser = javaParser0;
      simpleNode2.jjtGetNumChildren();
      simpleNode2.jjtAddChild(simpleNode0, 18);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1898));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1898
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtClose();
      simpleNode0.jjtGetChild(0);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("xpk1YB");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-908));
      simpleNode0.jjtOpen();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6152804042395517
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString();
      simpleNode0.jjtAddChild((Node) null, 0);
      int int0 = 1;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtAddChild((Node) null, 1);
      simpleNode0.jjtGetNumChildren();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-2147483647));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-29);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 2070);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-3022));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3022
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ShiftExpression");
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      stringReader0.ready();
      JavaParser javaParser0 = new JavaParser("ShiftExpression");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      SimpleNode simpleNode1 = (SimpleNode)javaParser0.currNode;
      simpleNode0.jjtAddChild(simpleNode1, 0);
      simpleNode0.jjtAddChild(simpleNode1, 24);
      assertEquals(25, simpleNode1.jjtGetNumChildren());
      assertEquals(25, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-488));
      simpleNode0.jjtAddChild(simpleNode0, 3051);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode0, (-488));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -488
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)43;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 79);
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Qn.o,[=(/fcW=d-u:");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 21, 21, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      JavaParser javaParser1 = new JavaParser("");
      JavaParser javaParser2 = new JavaParser("");
      SimpleNode simpleNode0 = new SimpleNode(javaParser2, 87);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[21];
      byteArray0[2] = (byte)86;
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Fzau%'F=(");
      SystemInUtil.addInputLine("Fzau%'F=(");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      StringWriter stringWriter0 = new StringWriter((byte)107);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Block : < : f/Fzau%'F=(");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IC=;5}0B:&N| ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IC=;5}0B:&N| ");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (byte)86);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ShiftExpression");
      stringReader0.ready();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode((-591));
      // Undeclared exception!
      try { 
        simpleNode0.toString("<<");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -591
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.2283766931186737
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(30);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"ontinue\"");
      simpleNode0.id = 18;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      JavaParser javaParser0 = new JavaParser(pushbackInputStream0);
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtSetParent((Node) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)125;
      byteArray1[1] = (byte)72;
      byteArray1[2] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      simpleNode0.setIdentifier("u>'2Gw]");
      StringWriter stringWriter0 = new StringWriter(18);
      simpleNode0.setIdentifier("u>'2Gw]");
      simpleNode0.dump("u>'2Gw]", stringWriter0);
      assertEquals("<VariableDeclaratorId>\n  <identifier>u>'2Gw]</identifier>\n  <identifier>u>'2Gw]</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"ontinue\"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter1 = new StringWriter();
      SystemInUtil.addInputLine("Er");
      MockFile mockFile0 = new MockFile("u>'2Gw]");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Er");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"//\"");
      mockFile0.mkdir();
      String string0 = simpleNode0.toString();
      assertEquals("VariableDeclaratorId : u>'2Gw] : u>'2Gw]", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" &");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 21, 0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1648, 27, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      JavaParser javaParser0 = new JavaParser("`W/a'-Ut'uJ=");
      JavaParser javaParser1 = new JavaParser("`W/a'-Ut'uJ=");
      SimpleNode simpleNode0 = new SimpleNode(4);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1431655763));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.442642175199104
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 87;
      StringReader stringReader0 = new StringReader("Qn.o,[=(/fcW=d-u:");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 24, 24, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedKind = (-1);
      stringReader0.mark(10);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      JavaParser javaParser1 = new JavaParser("ShiftExpression");
      JavaParser javaParser2 = new JavaParser(javaParserTokenManager0);
      javaParser2.EqualityExpression();
      try { 
        javaParser2.PreIncrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 24, column 28.  Encountered: ,
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.442642175199104
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 87;
      StringReader stringReader0 = new StringReader("Qn.o,[=(/fcW=d-u:");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 24, 24, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedKind = (-1);
      stringReader0.mark(10);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      JavaParser javaParser1 = new JavaParser("ShiftExpression");
      JavaParser javaParser2 = new JavaParser(javaParserTokenManager0);
      javaParser2.EqualityExpression();
      try { 
        javaParser2.PreIncrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 24, column 28.  Encountered: ,
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }
}
