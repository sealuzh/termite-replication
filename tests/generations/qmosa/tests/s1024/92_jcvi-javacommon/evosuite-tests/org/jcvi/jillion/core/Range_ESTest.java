/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 01:35:50 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2247463855511103
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-2932L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1536L, 1536L);
      Range range1 = range_Builder0.build();
      range0.startsBefore(range1);
      range0.getLength();
      range1.isEmpty();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(928L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.083870995254996
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372032559808517L, 9223372032559808517L);
      Long long0 = new Long(9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long(9223372032559808517L);
      long long2 = new Long(9223372032559808517L);
      range0.equals(long1);
      Object object4 = new Object();
      Range range1 = Range.ofLength(9223372032559808517L);
      range0.equals(long1);
      // Undeclared exception!
      try { 
        range1.split(9223372032559808517L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -8589934583 would make range [9223372032559808517 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.664974524426274
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long0 = new Long((-128L));
      Long.remainderUnsigned((-128L), 1L);
      Long.max(4005L, 4005L);
      Range range2 = Range.of((-267L));
      range1.equals(range2);
      Long long1 = new Long(0L);
      Object object6 = new Object();
      Range range3 = Range.ofLength(1L);
      range2.equals(range_Builder0);
      range3.complement(range2);
      range3.intersection(range0);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3534178348189316
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range.of(9223372036854775807L);
      Range range0 = Range.of((-32768L), (-1635L));
      Long long0 = new Long(19L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1635 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.41896956611861
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      range0.intersects(range1);
      Long long0 = new Long(9223372036854775807L);
      Range range2 = Range.of(9223372036854775806L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Long long1 = new Long(4294967329L);
      Long long2 = new Long(9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range2.equals(object3);
      Long long3 = new Long(2147481031L);
      Object object4 = new Object();
      Range range3 = Range.ofLength(9223372036854775807L);
      assertNotSame(range3, range0);
      assertSame(range3, range1);
      
      Object object5 = new Object();
      boolean boolean1 = range2.equals((Object) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.240728283685013
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range range1 = Range.ofLength(4294967295L);
      range0.equals(range1);
      Long long0 = new Long((-1725L));
      Range.of(2617L, 2147483647L);
      Long long1 = new Long(2147483647L);
      range0.equals((Object) null);
      Range.Builder range_Builder2 = new Range.Builder(253L, 2147483647L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(253L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.475031320092895
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(768L);
      Range range1 = range0.asRange();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = Range.of(793L);
      range0.intersection(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.equals(range2);
      Range range3 = Range.of(793L);
      Long long0 = new Long(9223372036854710273L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      Long long1 = new Long(9223372036854771732L);
      Object object0 = new Object();
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(793L, 9223372036854710273L);
      range_Builder0.build();
      range3.split(768L);
      String string0 = "@0d-dRUVwKQ";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("@0d-dRUVwKQ", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse @0d-dRUVwKQ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0140772805713656
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      Long long0 = new Long(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long1 = new Long(9223372036854775807L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.5408799964827358
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      range_Builder0.build();
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.ofLength(127L);
      Range range2 = Range.ofLength(127L);
      Object object0 = new Object();
      range2.equals(object0);
      Range range3 = Range.of(255L, 2147483647L);
      Range range4 = Range.of(2147483647L);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      
      Range range5 = Range.of(1719L, 4294967295L);
      range5.intersection(range2);
      List<Range> list0 = range1.complement(range2);
      List<Range> list1 = range5.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertFalse(list1.contains(range1));
      
      boolean boolean0 = range3.isSubRangeOf(range0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.6781840694696952
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.complement(range1);
      range0.intersects(range1);
      Range.of(4294967329L);
      Range range2 = Range.of((-32768L), (-1635L));
      Long long0 = new Long(19L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of(4294967329L);
      Range.ofLength(19L);
      Range.of((-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.intersection(range1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, 4294967329L);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4208452124365456
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.Comparators.values();
      Range.of(9223372032559808512L, 9223372032559808512L);
      Range.of(319L, 9223372032559808512L);
      Range.of((-1925L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854773245L);
      Long long0 = new Long((-966L));
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.of((-966L), (-2208L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.030879450076976
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range range1 = range0.asRange();
      Range.of(2147483647L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), 160L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.115475024880771
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 127L;
      Range range0 = Range.of(0L, 127L);
      Range range1 = null;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.spliterator();
      long long1 = (-4796L);
      long long2 = (-2465L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4543304751991495
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = 1832L;
      Range range0 = Range.of((-1L), 1832L);
      long long1 = (-1416L);
      Range range1 = Range.of((-1416L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(1832L);
      range1.equals(range0);
      range1.complement(range0);
      range1.intersection(range0);
      range0.equals("jp");
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1832L, (-1416L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4012210886506518
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      Long long0 = new Long((-995L));
      range0.equals((Object) null);
      Long long1 = new Long(5L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of((-259L));
      range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.402737676361872
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getEnd();
      Range.of((-1L), 0L);
      range0.split(255L);
      // Undeclared exception!
      try { 
        range0.split((-2551L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.791091523328867
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-11L), 1832L);
      Range range1 = Range.of((-1416L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = range0.asRange();
      Object object0 = new Object();
      Long long0 = new Long((-1416L));
      Long.getLong("");
      boolean boolean0 = range1.equals(long0);
      Long long1 = new Long((-1416L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1416L), 1832L);
      Long long2 = new Long((-1416L));
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals(object2);
      Range range3 = Range.of(127L);
      List<Range> list0 = range0.complement(range3);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(2, list1.size());
      
      boolean boolean1 = range3.isSubRangeOf(range1);
      assertTrue(boolean1 == boolean0);
      
      Range range4 = Range.of(1832L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2650702501123807
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(0L);
      Range range2 = Range.of(127L);
      Range range3 = Range.ofLength(127L);
      Range range4 = range1.intersection(range3);
      range4.forEach(consumer1);
      Long long0 = new Long(1027L);
      range2.equals(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(127L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2606160664533625
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(0L);
      Range range2 = Range.of(127L);
      Range range3 = Range.ofLength(127L);
      Range range4 = range1.intersection(range3);
      Range.of(127L);
      range4.forEach(consumer1);
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.isEmpty());
      
      Long.getLong(" WE>]+Qu", 9223372036854773237L);
      boolean boolean0 = range0.equals(range2);
      assertNotSame(range0, range3);
      assertFalse(range2.equals((Object)range0));
      assertSame(range0, range4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4103266723984724
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(9223372036854773191L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(127L);
      Long long1 = new Long(127L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long2 = new Long(127L);
      long long3 = Long.remainderUnsigned(127L, 4294967295L);
      Long.max((-267L), 255L);
      range0.equals(long1);
      Long long4 = new Long((-2665L));
      Object object5 = new Object();
      Range range1 = Range.ofLength(9223372036854773191L);
      range1.equals(object2);
      range1.complement(range0);
      Long long5 = new Long(1126L);
      assertFalse(long5.equals((Object)long3));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.608943758872877
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(768L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(793L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.intersects(range1);
      Range range2 = Range.of(768L);
      Range range3 = Range.of((-3598L), 768L);
      Long long0 = new Long((-3482L));
      List<Range> list0 = range3.complement(range0);
      //  // Unstable assertion: assertEquals(2, list0.size());
      
      Long long1 = new Long(1082L);
      Object object0 = new Object();
      Range range4 = Range.of((-3598L));
      range4.intersects(range1);
      range1.equals(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.of((-3598L), 768L);
      range0.intersection(range2);
      range0.intersection(range4);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2450982018636942
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(32767L, 4294967322L);
      long long0 = 1864L;
      Range.of(1864L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(1864L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967322L, 1864L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.195085608204763
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.of((-22796L), 32767L);
      Long long0 = new Long(4294967328L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long1 = new Long((-22811L));
      Long.remainderUnsigned((-3328L), (-3328L));
      Long.max((-63L), (-2515L));
      Long long2 = new Long(0L);
      Object object5 = new Object();
      Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-2515L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2515 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.7680360010719363
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range0.asRange();
      Range range1 = Range.of(2147483647L);
      range0.equals(range1);
      Range range2 = Range.of(2147483647L, 2147483647L);
      Range range3 = Range.of(255L, 2609L);
      Long long0 = new Long(2147483647L);
      Range range4 = Range.ofLength(2609L);
      Range range5 = Range.ofLength(255L);
      range4.startsBefore(range5);
      Range range6 = Range.of((-2147483648L));
      assertFalse(range6.isEmpty());
      
      Range range7 = Range.of(255L);
      Long long1 = new Long(255L);
      Long long2 = new Long(255L);
      Object object0 = new Object();
      range4.equals(range3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      UnaryOperator<Range> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Range range8 = Range.of(2609L);
      boolean boolean0 = range2.endsBefore(range1);
      Long long3 = new Long(2609L);
      boolean boolean1 = range3.isSubRangeOf(range4);
      assertTrue(boolean1 == boolean0);
      assertFalse(range4.equals((Object)range5));
      
      Range range9 = range8.intersection(range7);
      assertFalse(range7.isEmpty());
      assertFalse(range7.equals((Object)range3));
      assertNotSame(range7, range3);
      assertTrue(range9.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4712616594094845
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      range_Builder0.expandBegin(4002L);
      range_Builder0.build();
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.ofLength(127L);
      Range range1 = Range.ofLength(127L);
      Object object0 = new Object();
      range1.equals(object0);
      Range.of(255L, 2147483647L);
      Range.of(2147483647L);
      Range range2 = Range.of(1734L, 4294967294L);
      range0.endsBefore(range2);
      // Undeclared exception!
      range2.split(127L);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2874756980627047
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = (-1L);
      Range.of((-1L), 1832L);
      Range.of((-1416L));
      Range range0 = Range.of(1439L, 9223372036854775807L);
      Long long1 = new Long(4287L);
      Long long2 = new Long((-2147483648L));
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.595219249419074
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Comparators.values();
      Range.of(9223372032559808512L, 9223372032559808512L);
      Range range0 = Range.of(319L, 9223372032559808512L);
      Range range1 = Range.of((-1925L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854773245L);
      Long long0 = new Long((-966L));
      range2.equals(long0);
      range2.intersection(range1);
      range0.equals(long0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854775807L, 9223372032559808512L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.902823587955807
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.stream();
      Range range0 = Range.of((-2147483648L));
      Long long0 = new Long(4294967271L);
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.913172508394483
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.stream();
      Range range0 = Range.of((-2147483648L));
      Long long0 = new Long(3244L);
      Long long1 = new Long(3244L);
      Object object0 = new Object();
      Long.getLong("", 2758L);
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.6137147549956308
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(32767L, 4294967328L);
      Range.of(1864L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complement(range0);
      Object object0 = new Object();
      range0.equals(object0);
      Long long0 = new Long(127L);
      Range range1 = Range.of((-2416L));
      range0.intersects(range1);
      Long long1 = new Long(2730L);
      Long long2 = new Long(1408L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(long2);
      Long long3 = new Long(2730L);
      Long.getLong(";UwZ[gA", 2730L);
      Object object7 = new Object();
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object3));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.55757528421153
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L);
      range0.equals(range1);
      Range range2 = Range.of(2147483647L, 2147483647L);
      Range range3 = Range.ofLength(189L);
      range2.complement(range1);
      range0.equals((Object) null);
      Range.of(686L);
      // Undeclared exception!
      try { 
        range3.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.6456169946985204
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = (-963L);
      Range range0 = Range.of((-963L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-963L));
      range_Builder0.shift((-963L));
      range_Builder0.expandEnd((-963L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin((-963L));
      range_Builder0.contractBegin(0L);
      Range range1 = Range.ofLength(1269L);
      Range range2 = range0.intersection(range1);
      range_Builder1.contractBegin((-963L));
      List<Range> list0 = range2.complement(range1);
      range0.complementFrom(list0);
      Long long1 = new Long(1656L);
      // Undeclared exception!
      try { 
        range1.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.942734887715744
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.of(255L);
      Range range0 = Range.of(255L);
      Object object0 = new Object();
      Long long0 = new Long(884L);
      range0.equals((Object) null);
      Long long1 = new Long((-722L));
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of(884L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2562985869762775
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      Long long0 = new Long(5L);
      range0.equals(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(5L, 2976L);
      Range range2 = range0.intersection(range1);
      Range range3 = range2.intersection(range0);
      assertNotSame(range3, range1);
      assertSame(range3, range2);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5075525463378705
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-1L), 1832L);
      Range range1 = Range.of((-1416L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = range0.asRange();
      Range range3 = Range.of((-1L), (-1L));
      boolean boolean0 = range2.equals(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range3.equals("(d+)s*..s*(d+)");
      Long long0 = new Long(126L);
      Object object5 = new Object();
      Range.ofLength(1L);
      Object object6 = new Object();
      boolean boolean1 = range0.equals(long0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.464723994045754
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range2 = range_Builder0.build();
      range2.toString();
      range_Builder0.expandEnd(4294967295L);
      Range.Comparators.values();
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range2.toString(range_CoordinateSystem1);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem3, (-7L), 4294967295L);
      Range range3 = Range.of((-7L), (-7L));
      assertFalse(range3.equals((Object)range1));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9216576564967065
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of((-1416L));
      long long0 = 9223372036854775807L;
      Long long1 = new Long(1439L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long2 = new Long(9223372036854775807L);
      Long.max((-1416L), 127L);
      range0.equals(range0);
      Long long3 = new Long(878L);
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-1416L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.9490843586992983
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1L));
      range_Builder1.expandEnd((-1L));
      Range range1 = Range.of((-409L), 2182L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ -409 .. 2182 ]/0B", string0);
      
      range_Builder1.contractBegin((-3073L));
      Range range2 = Range.of((-1416L));
      range2.split(1963L);
      List<Range> list0 = range0.split(2147483647L);
      range0.complement(range2);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(list0);
      Range range3 = range1.intersection(range2);
      Long long0 = new Long(1963L);
      List<Range> list1 = range1.split(100L);
      List<Range> list2 = range1.complementFrom(list1);
      assertFalse(list1.contains(range1));
      assertTrue(list2.isEmpty());
      
      range3.complementFrom(list0);
      boolean boolean0 = range1.isSubRangeOf(range3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.200228482411283
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      range_Builder0.expandEnd((-1L));
      Range range0 = Range.of((-1L), (-1L));
      range_Builder0.contractBegin((-1L));
      Range.of(124L, 2116L);
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1596L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.924102825959609
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = 0L;
      Range.of(0L, 0L);
      Range.of(4294967329L, 9223372036854775807L);
      Long long1 = new Long(1579L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long2 = new Long(255L);
      // Undeclared exception!
      try { 
        Long.remainderUnsigned(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8507902655806125
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854773235L, (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483649 would make range [9223372036854773234 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.451803636503969
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of((-1416L));
      Range range1 = Range.ofLength(1832L);
      range0.equals(range1);
      range0.intersection(range1);
      Long long0 = new Long((-2849L));
      Range.of(255L, 1832L);
      Long long1 = new Long((-544L));
      range0.equals((Object) null);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(3309L, (-286L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1909295529466593
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.of(42747L);
      Range range0 = Range.of(1439L);
      Range range1 = Range.ofLength(42747L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(1439L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Long.getLong(" WE>]+Qu", 1439L);
      boolean boolean0 = range3.endsBefore(range2);
      assertSame(range3, range2);
      assertFalse(range2.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.1815681492696744
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(4294967295L);
      range0.equals(range1);
      range0.intersection(range1);
      Long long0 = new Long(2617L);
      long long1 = 255L;
      // Undeclared exception!
      try { 
        Range.of(1177L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.619456378425793
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(5117L, 5117L);
      Range range1 = Range.ofLength(5117L);
      List<Range> list0 = range1.complement(range0);
      Object object0 = new Object();
      range0.equals(object0);
      Range range2 = range0.intersection(range1);
      range0.complementFrom(list0);
      Range range3 = Range.of(364L);
      range2.equals(range3);
      Range.Builder range_Builder0 = new Range.Builder(1466L, 1466L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.build();
      Range.of(2899L);
      range_Builder1.copy();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.223218681745325
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.of(4294967329L);
      Range.of((-32768L), (-1635L));
      Long long0 = new Long(19L);
      assertEquals(19L, (long)long0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.23028218258291
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range0.asRange();
      Range range2 = Range.of(127L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      
      Range range3 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range3);
      Range range4 = Range.ofLength(127L);
      assertFalse(range4.equals((Object)range2));
      
      long long0 = range1.getLength();
      assertEquals(0L, long0);
      
      List<Range> list0 = range3.complement(range0);
      assertFalse(list0.contains(range4));
      assertTrue(list0.contains(range0));
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.186883489290082
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(0L);
      range0.forEach(consumer0);
      range0.getEnd();
      Range range1 = Range.of(28388L);
      long long0 = (-746L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.6682536432171897
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(62L, 1148L);
      Range range1 = Range.of(1864L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complement(range1);
      Object object0 = new Object();
      range0.equals("sC");
      Object object1 = new Object();
      Range range2 = Range.of((-2147483648L));
      Range.of(1148L, 1765L);
      Long long0 = new Long(2754L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range range3 = Range.of((-1635L));
      Range range4 = range3.intersection(range2);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range4.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        range3.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.4474512831578976
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of(9223372036854775807L);
      Range range2 = Range.ofLength(708L);
      Range range3 = range2.intersection(range1);
      assertTrue(range3.isEmpty());
      
      Range range4 = Range.of((-1546L));
      assertFalse(range4.isEmpty());
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Long.getLong(" WE>]+Qu", (-799L));
      range0.isSubRangeOf(range2);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.755549790664179
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.488301915796154
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(62L, 1148L);
      Range range1 = Range.of(1864L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
      
      Object object0 = new Object();
      range0.equals("sC");
      Object object1 = new Object();
      Long long0 = new Long((-656L));
      Range.of(4294967295L);
      boolean boolean0 = range0.intersects(range0);
      Long long1 = new Long(2730L);
      Long long2 = new Long((-1732L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean1 = range1.equals(object5);
      assertFalse(boolean1 == boolean0);
      
      Long long3 = new Long(2147481031L);
      Object object6 = new Object();
      Long.getLong("sC", 946L);
      Object object7 = new Object();
      Object object8 = new Object();
      Long long4 = new Long(1864L);
      boolean boolean2 = range0.equals(long4);
      assertTrue(boolean2 == boolean1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.619314447132467
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(0L);
      Range range1 = Range.of(0L);
      Range range2 = Range.of(0L);
      Range range3 = Range.ofLength(0L);
      Range range4 = Range.of((-32768L));
      Range range5 = range2.intersection(range3);
      List<Range> list0 = range1.complement(range5);
      assertEquals(1, list0.size());
      assertFalse(range2.isEmpty());
      assertFalse(list0.contains(range4));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.1980827309079403
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.of((-1416L));
      long long0 = 1439L;
      Range.of(1439L, 9223372036854775807L);
      Long long1 = new Long(1439L);
      Object object0 = new Object();
      long long2 = (-128L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-128L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.267436635244582
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.of(769L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(769L);
      Range.of((-24L), 9223372036854775039L);
      Long long0 = new Long((-3482L));
      Long long1 = new Long(437L);
      Object object0 = new Object();
      Range.of(65535L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(347L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.276070130000498
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      range0.intersection(range0);
      Long long1 = new Long(2617L);
      long long2 = 680L;
      Range.of((-128L), 680L);
      long long3 = 1570L;
      Long long4 = new Long(1570L);
      range0.equals((Object) null);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(1815L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.2814860976177407
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(0L, 0L);
      Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(1418L);
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object5);
      Long long1 = new Long(126L);
      Object object6 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-865L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.477152772008389
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(2617L, 2617L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(2617L);
      List<Range> list0 = range1.complement(range0);
      range0.startsBefore(range1);
      Range range2 = Range.of(2617L);
      Range range3 = Range.of(2617L, 2617L);
      range2.equals(range3);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.isEmpty());
      
      range2.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.219781335655384
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = 4294967295L;
      range_Builder0.expandBegin(4294967295L);
      range0.equals(range0);
      Long long1 = new Long(2617L);
      Long long2 = new Long(255L);
      range0.equals(range_Builder0);
      Range.Builder range_Builder1 = new Range.Builder(255L, 255L);
      Range.Builder range_Builder2 = new Range.Builder(575L, 575L);
      Range range1 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range1);
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        range_Builder3.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.6197042646941573
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(0L);
      Range range1 = Range.of(127L);
      Range.of((-1635L), 0L);
      Long long0 = new Long((-1635L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of(0L);
      Range.ofLength(4294967295L);
      Range range2 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.intersection(range2);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.523114886128326
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-128L));
      Range range1 = range0.intersection(range0);
      Long long0 = new Long((-128L));
      Long long1 = new Long((-128L));
      Range.of((-128L), 255L);
      Long long2 = new Long((-2185L));
      Range.of((-2185L), 2147483647L);
      Range range2 = Range.of((-128L), 23L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2185L), 4294967295L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = range0.intersects(range2);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.1978614600050754
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = 2L;
      Range range0 = Range.of(2L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1990L, 1991L);
      range0.intersects(range1);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2628L, 973L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.6894881754559523
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.contains(range0));
      
      Long long0 = new Long(208L);
      Range.Builder range_Builder0 = new Range.Builder((-9223372036854775808L), (-32768L));
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range range2 = range_Builder1.build();
      assertFalse(range2.isEmpty());
      
      Range range3 = range_Builder0.build();
      Range range4 = Range.of(2147483647L, 2147483647L);
      range4.getBegin();
      assertFalse(range4.isEmpty());
      
      Range range5 = range3.intersection(range0);
      assertTrue(range5.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.7604763919106823
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(32767L, 4294967322L);
      Range range1 = Range.of(1864L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = range0.intersects(range0);
      Range range2 = Range.of((-2147483648L));
      Range range3 = Range.of((-746L), 4294967294L);
      Long long0 = new Long((-2318L));
      Range range4 = range3.intersection(range1);
      assertFalse(range4.isEmpty());
      
      Long long1 = new Long(32767L);
      range0.intersection(range1);
      boolean boolean1 = range2.endsBefore(range0);
      assertTrue(boolean1 == boolean0);
      
      Long long2 = new Long((-1893L));
      range0.startsBefore(range3);
      range1.isEmpty();
      assertSame(range1, range4);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.0970595116798196
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range.of(127L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range1 = Range.ofLength(564L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.2040955443423598
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-2147483647L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483647L), (-1L));
      Range.of((-729L), 4294967294L);
      Long long0 = new Long((-729L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 0L, 9223372036854770691L);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.0393086294046596
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.stream();
      Range range0 = Range.of((-2147483648L));
      Long long0 = new Long(4294967271L);
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long1 = new Long(447L);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.9490123306617946
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(1806L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(1806L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.7289239368135982
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L);
      Range range2 = Range.of(2147483647L, 2147483647L);
      range2.complement(range1);
      range0.intersection(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder1 = new Range.Builder(189L, 9223372036854775807L);
      range_Builder0.build();
      Range range3 = Range.of((-9223372036854775808L));
      Range.of((-32768L));
      Range.Builder range_Builder2 = new Range.Builder(range3);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range4 = range_Builder3.build();
      assertFalse(range4.equals((Object)range2));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.7005775924119146
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(4294967322L, 4294967322L);
      Range.of(1864L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complement(range0);
      range0.intersects(range0);
      Range range1 = Range.of((-2147483648L));
      Range range2 = Range.of((-746L), 4294967294L);
      Long long0 = new Long((-746L));
      linkedList0.poll();
      range2.complement(range0);
      Range.ofLength(4294967322L);
      // Undeclared exception!
      try { 
        range1.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.864738512190568
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(1446L, 1446L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.8892632916692698
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.of(32767L, 4294967328L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = (-480L);
      // Undeclared exception!
      try { 
        Range.of(1542L, (-480L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.261923651777593
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.of((-1416L));
      Range.of(1439L, 9223372036854775807L);
      Long long0 = new Long(1439L);
      long long1 = 255L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.4252062064621565
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(5117L, 5117L);
      Range range1 = Range.ofLength(5117L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      Long long0 = new Long(5117L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 5117L, 5117L);
      assertTrue(range2.isEmpty());
      
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      assertFalse(range0.isEmpty());
      
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range range3 = Range.ofLength(5117L);
      range1.equals(range3);
      Long long1 = new Long(9223372036854773944L);
      Object object7 = new Object();
      Range.ofLength(126L);
      Object object8 = new Object();
      boolean boolean0 = range3.equals((Object) null);
      assertFalse(boolean0);
      assertSame(range3, range1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.1829170467218675
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Long long0 = new Long(0L);
      Range.of(4294967295L);
      Long long1 = new Long((-656L));
      Long long2 = new Long(2730L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(object3);
      Long long3 = new Long(0L);
      Object object7 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-656L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.0593548485908344
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854775807L, long0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long1 = new Long(5L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long2 = new Long(5L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long3 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(256L, long3);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.344396315098853
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(2147483647L, 2147483647L);
      Range range2 = Range.of(127L);
      range0.equals(range2);
      Range range3 = range0.intersection(range2);
      boolean boolean0 = range3.equals(range1);
      assertTrue(range3.isEmpty());
      
      Long long0 = new Long(651L);
      Long long1 = new Long(1371L);
      Object object0 = new Object();
      boolean boolean1 = range1.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertSame(range1, range0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.6944535669485
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(32767L, 4294967328L);
      Range range1 = Range.of(1864L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range0);
      range0.intersects(range0);
      Range.of((-2147483647L));
      Range range2 = Range.of((-752L), 4294967294L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range3 = Range.of(2550L);
      Range range4 = range3.intersection(range2);
      assertFalse(range4.isEmpty());
      assertSame(range4, range3);
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      List<Range> list1 = range1.complementFrom(linkedList1);
      assertTrue(list1.equals((Object)list0));
      
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertNotSame(range1, range4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.6160849966228312
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(4294967322L, 4294967322L);
      Range range1 = Range.of(1864L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      range0.intersects(range0);
      Range range2 = Range.of((-2147483648L));
      Range.of((-746L), 4294967294L);
      Range range3 = Range.of(740L, 1719L);
      boolean boolean0 = range2.endsBefore(range1);
      assertTrue(boolean0);
      
      Long long0 = new Long((-971L));
      boolean boolean1 = range2.isSubRangeOf(range3);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.767860720577105
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(32767L, 4294967328L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complement(range0);
      range0.intersects(range0);
      Range range1 = Range.of((-2147483647L));
      Range range2 = Range.of((-729L), 4294967294L);
      Long long0 = new Long((-729L));
      range2.startsBefore(range0);
      Object object0 = new Object();
      range2.equals(long0);
      Range range3 = Range.of((-1692L));
      range2.intersection(range3);
      range2.complementFrom(linkedList0);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.563653356366593
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(2617L, 2617L);
      Range range1 = Range.ofLength(2617L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range3 = Range.of(2617L);
      range0.startsBefore(range3);
      Range.of(2617L);
      Range range4 = Range.ofLength(2617L);
      range3.startsBefore(range4);
      Range range5 = Range.ofLength(255L);
      Range range6 = Range.of(4294967295L);
      boolean boolean0 = range6.endsBefore(range1);
      assertFalse(boolean0);
      
      Long long0 = new Long(2617L);
      boolean boolean1 = range5.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.5891030126823242
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(4294967328L, 4294967328L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      boolean boolean0 = range0.intersects(range0);
      Range range1 = Range.of((-2147483647L));
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of((-729L), 4294967294L);
      Object object0 = new Object();
      Range range3 = Range.of(2550L);
      Range range4 = range3.intersection(range2);
      assertSame(range4, range3);
      assertFalse(range4.isEmpty());
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      boolean boolean1 = range0.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.214609936561861
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L);
      long long0 = 189L;
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder1 = new Range.Builder(189L, 9223372036854775807L);
      Range range3 = range_Builder0.build();
      Object object0 = new Object();
      range3.equals(object0);
      range1.intersection(range2);
      long long1 = 364L;
      Long long2 = new Long(189L);
      range2.equals(long2);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(9223372036854775807L, 4294967329L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.9669434861893547
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(65536L, long0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.7724896010792097
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(32767L, 4294967328L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complement(range0);
      range0.intersects(range0);
      Range.of((-2147483647L));
      Range range1 = Range.of((-729L), 4294967294L);
      Long long0 = new Long((-729L));
      Long.divideUnsigned(4294967328L, (-3093L));
      range1.equals(long0);
      Range range2 = Range.of(2550L);
      Range range3 = range2.intersection(range1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range2.complementFrom(linkedList1);
      linkedList1.add(range1);
      range0.complementFrom(linkedList1);
      range0.isSubRangeOf(range0);
      range1.intersects(range3);
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.of((-363L), (-2147483647L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.4916012999460206
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-2599L), (-1344L));
      Long long0 = new Long((-1344L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long1 = new Long((-1412L));
      Long.max((-1416L), (-1545L));
      Object object5 = new Object();
      range0.equals(object5);
      Long long2 = new Long((-1545L));
      Object object6 = new Object();
      Range range1 = Range.ofLength(9223372032559808512L);
      range0.equals("");
      range1.complement(range0);
      Long long3 = new Long((-1416L));
      assertFalse(long3.equals((Object)long0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.6809296366935973
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(32767L, 4294967328L);
      Range range1 = Range.of(1864L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range0);
      boolean boolean0 = range0.intersects(range0);
      Range range2 = Range.of(821L);
      Range range3 = Range.of((-752L), 4294967294L);
      Long long0 = new Long((-752L));
      Object object0 = new Object();
      Object object1 = new Object();
      range1.endsBefore(range2);
      Range range4 = Range.of(2550L);
      Range range5 = range4.intersection(range3);
      assertSame(range5, range4);
      assertFalse(range5.isEmpty());
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      List<Range> list1 = range1.complementFrom(linkedList1);
      assertTrue(list1.equals((Object)list0));
      
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertNotSame(range1, range2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.62469784164862
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372032559808512L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(9223372032559808512L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range range2 = range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range3 = Range.of(2446L);
      Range.of((-2766L));
      Range range4 = Range.ofLength(1364L);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      
      Range range5 = Range.of(293L);
      //  // Unstable assertion: assertNotSame(range5, range3);
      
      Range range6 = range0.intersection(range2);
      //  // Unstable assertion: assertSame(range6, range1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.2332439322719653
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372032559808512L, 9223372032559808512L);
      Long long0 = new Long(9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long1 = new Long(9223372032559808512L);
      Long.remainderUnsigned(9223372036854775807L, 9223372036854775807L);
      Long.max((-267L), 9223372036854775807L);
      range0.equals(long1);
      Long long2 = new Long(9223372036854775807L);
      Object object5 = new Object();
      Range range1 = Range.ofLength(9223372032559808512L);
      range0.equals(long1);
      range0.complement(range1);
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertNotSame(range0, range2);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
      //  // Unstable assertion: assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.7730363048778623
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2855L, 2855L);
      Object object0 = new Object();
      linkedList0.removeLastOccurrence(object0);
      linkedList0.offerFirst(range0);
      linkedList0.stream();
      Long long0 = new Long(4294967271L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), 4294967271L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-991L), (-39723L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.000356566258828
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 208L, 208L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(208L);
      Range.Comparators.values();
      Range range0 = range_Builder0.build();
      range0.iterator();
      Range range1 = range_Builder1.build();
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.7526811276712717
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of((-409L), 2182L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      List<Range> list0 = range1.complement(range0);
      Range range2 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B", range_CoordinateSystem0);
      range2.startsBefore(range0);
      boolean boolean0 = range2.endsBefore(range1);
      range0.getBegin();
      Range range3 = Range.of(2182L);
      Range range4 = Range.ofLength(2147483647L);
      assertFalse(range4.isEmpty());
      
      Object object0 = new Object();
      range0.isEmpty();
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.contains(range1));
      assertSame(range0, range2);
      
      boolean boolean1 = range1.isSubRangeOf(range3);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.198776345824799
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem0);
      range0.startsBefore(range1);
      Range.parseRange("[ 4294967295 .. 4294967295 ]/0B");
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-118L), (-963L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.283661928233661
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.of((-1L), 1832L);
      Range range0 = Range.ofLength(883L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(9223372032559809007L, 883L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.704343182143623
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(32767L, 4294967322L);
      Range.of(1864L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complement(range0);
      range0.intersects(range0);
      Range range1 = Range.of((-2147483648L));
      Range.of((-746L), 4294967294L);
      Long long0 = new Long((-2318L));
      Long long1 = new Long(32767L);
      Range range2 = Range.of(1864L);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        range1.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.6343123968293134
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(4294967322L);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 4294967323 .. 4294967323 ]/RB", string0);
      
      range1.split(4294967322L);
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(4294967322L, 4294967322L);
      Range range2 = Range.ofLength(9223372036854775807L);
      Range range3 = range0.intersection(range1);
      assertFalse(range3.isEmpty());
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range_Builder0.expandBegin((-2380L));
      linkedList0.poll();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range2.getEnd(range_CoordinateSystem1);
      assertEquals(9223372036854775807L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem2.toString();
      Range range4 = Range.of((-2380L));
      range4.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.of(range_CoordinateSystem3, 1L, 255L);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.924781263085244
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(0L);
      Long long0 = new Long(0L);
      Object object0 = new Object();
      Long long1 = new Long(0L);
      Long long2 = new Long(9223372032559808512L);
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(1436L);
      range0.split(32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.7530028309242502
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L);
      Range range2 = Range.of(2147483647L, 2147483647L);
      range2.complement(range1);
      range0.intersection(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder1 = new Range.Builder(189L, 9223372036854775807L);
      range_Builder0.build();
      Range range3 = Range.of((-9223372036854775808L));
      range_Builder1.contractBegin(9223372036854775525L);
      Range.of((-32768L));
      Range.Builder range_Builder2 = new Range.Builder(range3);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder3.build();
      // Undeclared exception!
      try { 
        range0.split((-1555L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Comparators.values();
      Range.of((-2738L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.1326043672347033
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = range0.intersection(range0);
      Long long0 = new Long((-128L));
      Long long1 = new Long((-128L));
      long long2 = range1.getLength();
      assertEquals(1L, long2);
      
      Long.getLong("(d+)s*-s*(d+)", 9223372036854773237L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.2332439322719653
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372032559808512L, 9223372032559808512L);
      Long long0 = new Long(9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long1 = new Long(9223372032559808512L);
      range0.equals(long1);
      Long long2 = new Long(9223372036854775807L);
      Object object5 = new Object();
      Range range1 = Range.ofLength(9223372032559808512L);
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      
      long long3 = range1.getLength();
      assertEquals(9223372032559808512L, long3);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.678582675727583
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(4294967322L, 4294967322L);
      Range range1 = Range.of(1864L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range0);
      boolean boolean0 = range0.intersects(range0);
      Range range2 = Range.of((-2147483648L));
      Long long0 = new Long(4294967294L);
      Long.valueOf(1864L);
      Range range3 = Range.of((-746L));
      Range range4 = range2.intersection(range3);
      assertTrue(range4.isEmpty());
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      List<Range> list1 = range1.complementFrom(linkedList0);
      assertTrue(list1.equals((Object)list0));
      
      boolean boolean1 = range0.isSubRangeOf(range2);
      assertFalse(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 4294967322 .. 4294967322 ]/0B", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.0352859494143716
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      Long long0 = new Long(5L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem2);
      assertFalse(range0.equals((Object)range1));
      assertEquals((-9223372036854775808L), long1);
      
      Range.Builder range_Builder0 = new Range.Builder(255L, (-9223372036854775808L));
      Range range2 = Range.of(range_CoordinateSystem2, 65535L, 65535L);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.864738512190568
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(42747L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(42748L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(42748L, long1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.362564408001296
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.of((-1L), 1832L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(4294967295L, 4294967295L);
      Long long0 = new Long(1832L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long.valueOf(1832L);
      Object object0 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.751915969031122
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.of((-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(32767L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long((-1945L));
      Object object0 = new Object();
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.058090416881859
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1422L), (-1422L));
      range_Builder0.shift(1L);
      Range range0 = range_Builder0.build();
      List<Range> list0 = range0.split(1L);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.6911056005507934
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(32767L, 4294967322L);
      Range.of(1864L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complement(range0);
      Range range1 = Range.of((-2147483648L));
      Range.of((-746L), 4294967270L);
      Long long0 = new Long((-2318L));
      Long long1 = new Long(32767L);
      Range range2 = Range.of(1864L);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        range1.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.148895975701045
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.build();
      Range.of(282L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1069L);
      range_Builder0.copy();
      range_Builder0.shift((-2045L));
      range_Builder0.expandEnd((-2045L));
      range_Builder0.expandEnd((-2975L));
      range_Builder0.shift(1069L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.8635991844539275
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.of(127L);
      Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Fr\u0005!|?pZ1YcVY{g  :");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Fr\u0005!|?pZ1YcVY{g  :
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.2034510101926448
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(461L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.4676861036015634
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      Range range1 = Range.of(2147483647L, 2147483647L);
      Range range2 = Range.of(2147483647L);
      range0.equals(range2);
      Range range3 = Range.of(2147483647L, 2147483647L);
      long long0 = 290L;
      range3.complement(range2);
      range2.equals(range1);
      Range range4 = range2.intersection(range0);
      range4.equals(range3);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(364L, 290L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.0923514767625604
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range.of(2147483647L);
      Range.of(127L);
      Range.Builder range_Builder1 = new Range.Builder(2147483647L, 2147483647L);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.9431063004928433
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(2147483662L, 9223372036854773226L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(0L, 2147483662L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.2010077098793857
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Long long0 = new Long((-432L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long1 = new Long(2626L);
      Long.max(5117L, 2626L);
      Long long2 = new Long(1727L);
      Object object5 = new Object();
      Range range0 = Range.ofLength(5117L);
      List<Range> list0 = range0.split(3240L);
      assertFalse(list0.contains(range0));
      assertEquals(2, list0.size());
      
      range0.getBegin();
      Range range1 = Range.ofLength(9223372036854775807L);
      assertFalse(range1.isEmpty());
      
      Long long3 = new Long(9223372036854773226L);
      Range range2 = Range.ofLength(5117L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.20725416968766
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(2L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1990L, 1991L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.endsBefore(range1);
      assertTrue(boolean1);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 2628L, 7212L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, 2L, 255L);
      assertNotSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.662536506286006
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      Range range1 = Range.of(2147483647L, 2147483647L);
      Range range2 = Range.of(2147483647L);
      range0.equals(range2);
      Range range3 = Range.of(2147483647L, 2147483647L);
      range3.endsBefore(range0);
      assertSame(range3, range2);
      
      List<Range> list0 = range3.complement(range2);
      assertTrue(list0.isEmpty());
      
      range2.equals(range1);
      Range range4 = range2.intersection(range0);
      boolean boolean0 = range4.equals(range3);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. 2147483646 ]/0B", string0);
      
      Range range5 = range4.asRange();
      assertTrue(range5.isEmpty());
      
      range_Builder0.copy();
      range_Builder0.build();
      Range.of(290L);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      range_Builder1.expandEnd(1624L);
      Range range6 = range_Builder1.build();
      assertNotSame(range6, range1);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.014635675651483
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-963L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.of(1485L, (-963L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.2733427787872347
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-1L), 1832L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(883L);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.of(9223372032559809007L, 883L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.4142428112773127
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(189L, 2147483647L);
      range_Builder0.build();
      Range range1 = Range.of((-9223372036854775808L));
      Range.of((-32768L));
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range2 = range_Builder3.build();
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.062463874143123
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range range0 = Range.of(9223372032559808512L, 9223372032559808512L);
      Long long0 = new Long(9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object4 = new Object();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.4317778869324758
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(0L);
      range1.complement(range0);
      Long long0 = new Long(0L);
      Range range2 = Range.of(2147483647L, 9223372036854773226L);
      range1.intersection(range2);
      range1.forEach(consumer1);
      Long long1 = new Long(0L);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range2.forEach(consumer2);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.871649625135927
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(76L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) range_CoordinateSystem0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      linkedList0.removeIf(predicate2);
      range0.complementFrom(linkedList0);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.49279808438489
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Comparators.values();
      Range.of(9223372032559808512L, 9223372032559808512L);
      Long long0 = new Long(9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long1 = new Long(9223372032559808512L);
      Long long2 = new Long(9223372032559808512L);
      Object object5 = new Object();
      Object object6 = new Object();
      Range.of(19L);
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of((-1925L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.intersection(range1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object6));
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.4119340753023946
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      range0.complement(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object1);
      Object object2 = new Object();
      Long long0 = new Long((-128L));
      long long1 = 4294967295L;
      Range range2 = Range.of(4294967295L);
      range2.intersects(range1);
      long long2 = (-739L);
      Long long3 = new Long((-739L));
      Long long4 = new Long(834L);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-901L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -902 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.572168179861787
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(0L);
      List<Range> list0 = range1.complement(range0);
      Long long0 = new Long(0L);
      Range range2 = Range.of(2147483647L, 9223372036854773226L);
      Range range3 = range1.intersection(range2);
      range1.forEach(consumer1);
      Long long1 = new Long(0L);
      range2.equals(long0);
      range1.complementFrom(list0);
      range1.isSubRangeOf(range3);
      range3.intersects(range2);
      range3.asRange();
      // Undeclared exception!
      try { 
        Range.of((-4428L), 9223372036854773226L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.118277784798304
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372032559808512L, 9223372032559808512L);
      Long long0 = new Long(9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long1 = new Long(9223372032559808512L);
      Long.max((-267L), 9223372036854775807L);
      range0.intersects(range0);
      Long long2 = new Long(9223372036854775807L);
      Object object5 = new Object();
      Range.ofLength(9223372032559808512L);
      range0.equals(long1);
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object4));
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.130370503813229
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(127L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      range_Builder0.build();
      Long long0 = new Long(631L);
      Range.Builder range_Builder1 = new Range.Builder(32767L, 9223372036854775807L);
      Range range1 = range_Builder0.build();
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.8349094022672134
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-1131L), (-1131L));
      Range range2 = Range.of(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-1131L));
      range_Builder1.shift(0L);
      Range.Builder range_Builder3 = range_Builder2.expandEnd(0L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder5 = range_Builder2.contractBegin(1797L);
      range_Builder5.contractBegin(1864L);
      Range range3 = Range.ofLength(0L);
      Range range4 = range1.intersection(range3);
      range_Builder3.contractBegin(1864L);
      List<Range> list0 = range4.complement(range2);
      range3.complementFrom(list0);
      Long long0 = new Long(2147483647L);
      range0.startsBefore(range4);
      Long long1 = new Long((-1106L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.1025712768045546
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      range_Builder0.expandEnd(1832L);
      range_Builder0.contractBegin((-1L));
      Range.of((-1416L));
      Object object0 = new Object();
      Long long0 = new Long(1665L);
      assertEquals(1665L, (long)long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.136836902185489
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.expandBegin(4294967295L);
      range0.equals(range0);
      Long long0 = new Long(2617L);
      Long long1 = new Long(255L);
      range0.equals(range_Builder0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder(255L, 255L);
      Range.Builder range_Builder2 = new Range.Builder(575L, 575L);
      Range range1 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range1);
      Range range2 = range_Builder3.build();
      //  // Unstable assertion: assertSame(range2, range1);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.9190235060608334
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-893L), 10998L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-436L), (-1068L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.814359184750864
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Comparators.values();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-2431L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = (-4298L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-4298L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.1025712768045546
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1069L);
      range_Builder0.copy();
      range_Builder0.shift((-2045L));
      range_Builder0.expandEnd((-2045L));
      range_Builder0.expandEnd(1069L);
      range_Builder0.shift(1069L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.0594891092421146
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.of((-5750L), (-5750L));
      // Undeclared exception!
      try { 
        Range.ofLength((-5750L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.755549790664179
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      Long.remainderUnsigned(5L, (-1635L));
      Long.max(127L, 65535L);
      Long long1 = new Long(127L);
      Object object0 = new Object();
      Range.ofLength(3179L);
      Long long2 = new Long(1714L);
      assertEquals(1714L, (long)long2);
  }
}
