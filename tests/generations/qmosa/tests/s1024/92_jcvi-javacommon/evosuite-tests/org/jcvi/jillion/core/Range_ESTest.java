/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 10:36:19 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.451657465751018
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372032559808513L, 9223372036854775807L);
      Range range1 = Range.of(9223372032559808513L);
      Range.of(9223372032559808513L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 421L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(608L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-583L), 608L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.9388940030675825
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-1752L), (-1019L));
      Range range1 = Range.of((-1752L), (-1752L));
      range1.equals(range0);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range2 = Range.of(2023L);
      range1.equals(range2);
      Range.of((-1019L), 4294967295L);
      Range range3 = range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range3.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/SB", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.6017261425309632
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractBegin((-1L));
      Range range0 = Range.of((-1L), 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedByteStartShortLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5338397115293803
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(1073L, 1073L);
      Range range1 = Range.of(1777L);
      range1.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range2 = Range.of(1218L);
      range0.equals(range2);
      // Undeclared exception!
      try { 
        Range.of(1218L, 166L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.7070463283356494
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(34L, 34L);
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complement(range0);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.isEmpty());
      
      Range range1 = Range.ofLength(1L);
      Range range2 = Range.ofLength(34L);
      Range range3 = Range.of(1L);
      boolean boolean0 = range0.equals(range2);
      Range.Builder range_Builder0 = new Range.Builder((-1622L), 34L);
      boolean boolean1 = range2.equals(range3);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      
      Range range4 = range3.intersection(range1);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      //  // Unstable assertion: assertNotSame(range4, range3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2855456616065446
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Long long0 = new Long((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      LinkedList<Range> linkedList4 = new LinkedList<Range>();
      Long long1 = new Long(0L);
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1828L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1828 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.7859439254465808
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range1 = Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range range3 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range1.equals(range3);
      assertTrue(boolean0);
      
      Range range4 = range1.intersection(range2);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.isEmpty());
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.793760160992259
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Object object0 = new Object();
      range0.complementFrom(linkedList1);
      Object object1 = new Object();
      Range range1 = Range.of((-9223372036854765856L), (-9223372036854765814L));
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854765814 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.370636044130358
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range1.equals(range0);
      Range range2 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(range2);
      assertSame(range2, range1);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.967885237904275
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(4559L, 4559L);
      Range range1 = Range.of((-1750L), 4559L);
      range1.endsBefore(range0);
      range0.complement(range1);
      Range.of((-1932L));
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range2 = Range.of((-1750L));
      range1.equals(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-9223372032559808512L));
      range_Builder0.shift((-1448L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372032559809960 would make range [9223372036854774359 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.556523731981627
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(119L, 119L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(9223372034707292162L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 119L, 1580L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=4.045099536131878
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(4559L, 4559L);
      Range range1 = Range.of((-1750L), 4559L);
      range1.isSubRangeOf(range1);
      range0.complement(range1);
      Range range2 = Range.of((-1932L));
      range0.spliterator();
      Range range3 = range2.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(32767L);
      range0.equals((Object) null);
      Range range4 = Range.of(1464L, 4559L);
      range3.intersection(range4);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=4.096512737426882
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.ofLength(4294967255L);
      Range range1 = Range.of((-1L), 11L);
      Range.ofLength(4294967255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of((-3727L));
      Range range3 = Range.of((-1L));
      range3.spliterator();
      boolean boolean0 = range3.equals(range1);
      assertFalse(boolean0);
      
      Range range4 = Range.of((-3727L), 255L);
      assertNotSame(range4, range2);
      
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range0));
      
      Range range5 = Range.of(1467L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range5.getEnd(range_CoordinateSystem0);
      assertEquals(32767L, long0);
      
      Range range6 = range1.intersection(range5);
      assertTrue(range6.isEmpty());
      assertFalse(range1.equals((Object)range3));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.178008108691081
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.834306113583829
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(2147483647L, 4294967300L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      boolean boolean0 = range0.equals(range1);
      Range range2 = Range.of((-721L), 4294967300L);
      Range.of(range_CoordinateSystem0, (-721L), (-574L));
      Range range3 = range1.intersection(range2);
      assertFalse(range3.isEmpty());
      assertSame(range3, range1);
      
      Range.Builder range_Builder0 = new Range.Builder(range2);
      boolean boolean1 = range2.equals("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.5082576656072546
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        range1.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4943069462133787
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.of((-629L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.858439596494867
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(34L, 34L);
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complement(range0);
      range0.complement(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(1L);
      Range range2 = Range.ofLength(1L);
      Range range3 = Range.of(1L);
      range0.equals(range2);
      range2.equals(range3);
      Range range4 = range3.intersection(range1);
      range4.getLength();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5764661171960785
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(34L, 34L);
      Range.of(34L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range range2 = Range.of(0L, 166L);
      Range range3 = range1.intersection(range2);
      assertFalse(range3.isEmpty());
      assertNotSame(range3, range2);
      assertSame(range3, range1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.487552621639329
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Long long0 = new Long((-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-9223372036854775808L), (-3658L));
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Long long1 = new Long((-9223372036854775808L));
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3132129167647393
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals(object5);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.8523991084301707
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483666L, 2147483666L);
      Long long0 = new Long(2147483666L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(2147483666L);
      Range range2 = Range.of(range_CoordinateSystem0, 2147483666L, 2147483666L);
      //  // Unstable assertion: assertNotSame(range2, range1);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.of(2009L);
      List<Range> list0 = range3.complement(range3);
      //  // Unstable assertion: assertEquals(0, list0.size());
      
      Range range4 = range3.intersection(range3);
      //  // Unstable assertion: assertSame(range4, range3);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4699536330352334
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.122337706857358
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(9223372036854775807L);
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      
      Long long0 = new Long((-680L));
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3264610833314743
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(481L, 4294967295L);
      Long long0 = new Long(481L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.8369297002580875
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(608L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-583L), 608L);
      Range range1 = Range.of((-1213L), 1L);
      range0.equals(range1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Range range2 = Range.of(262L);
      range0.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1701L, (-2578L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.9475581854836275
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.contractBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString();
      range0.intersection(range0);
      range0.toString(range_CoordinateSystem0);
      range0.equals("RB");
      Range range1 = Range.of((-1L), (-1L));
      range1.getLength();
      Range range2 = Range.of(range_CoordinateSystem0, (-47L), (-1L));
      range1.equals(range2);
      Range range3 = range2.intersection(range0);
      range3.complement(range2);
      long long0 = 1056L;
      // Undeclared exception!
      try { 
        Range.of(1056L, (-1823L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.9783978163289864
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(608L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-583L), 608L);
      Range range2 = Range.of((-1213L), 1L);
      range1.equals(range2);
      assertFalse(range1.isEmpty());
      
      Range range3 = Range.ofLength(1L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range4 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder((-2850L), (-1932L));
      boolean boolean0 = range4.equals(range0);
      assertFalse(boolean0);
      
      Range range5 = range3.intersection(range0);
      assertSame(range5, range4);
      assertTrue(range5.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.530888874447574
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L), 47L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.804766941691249
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-9223372036854775808L), (-3658L));
      linkedList0.add(range0);
      range0.complement(range0);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      range0.spliterator();
      range0.spliterator();
      boolean boolean0 = range0.equals("qpSd>CO$Q(6@amQ,W");
      assertFalse(boolean0);
      
      Range.of((-1L), 4294967295L);
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.8910685123799937
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Long long0 = new Long((-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long1 = (-9223372036854775808L);
      Range range0 = Range.of((-9223372036854775808L), (-3658L));
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1009L, (-1946L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.8692215261797975
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = 2147483647L;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.ofLength(2147483647L);
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1374L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.0170422063290925
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(283L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-13L), 2210L);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range range2 = Range.of(1742L);
      List<Range> list0 = range2.complement(range0);
      assertTrue(list0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 443L, 1701L);
      Range range4 = range1.intersection(range3);
      assertFalse(range4.isEmpty());
      assertSame(range4, range3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.326461083331474
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(283L, 9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(255L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Object object1 = new Object();
      Object object2 = new Object();
      Long long1 = new Long(255L);
      assertTrue(long1.equals((Object)long0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.818943978046911
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(1777L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range2 = range1.intersection(range0);
      Range.of((-3658L), 1777L);
      range2.getLength();
      // Undeclared exception!
      range0.split(2252L);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2594674723366475
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(65535L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long1 = new Long((-928L));
      assertEquals((-928L), (long)long1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.931944491476592
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(275L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(4294967295L);
      range0.complement(range1);
      range1.complement(range0);
      long long0 = 2147483647L;
      String string0 = "";
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.566832473583803
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483666L, 2147483666L);
      Long long0 = new Long(2147483666L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(2147483666L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range1.equals((Object) null);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.68020341498199
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = 2147483647L;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range1.equals(range0);
      Object object0 = new Object();
      long long1 = (-1L);
      range0.complement(range1);
      range0.complement(range1);
      long long2 = 47L;
      // Undeclared exception!
      try { 
        Range.of(47L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.504106972180184
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(1777L, 4294967295L);
      Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals(object3);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.842306225934032
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder1.shift(9223372036854773975L);
      Range.Builder range_Builder3 = range_Builder1.expandEnd(417L);
      Range range1 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range_Builder2.expandEnd((-128L));
      range1.equals(range_Builder3);
      long long0 = 4571L;
      Range.of((-2147483648L), 417L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.of((-2147483648L));
      // Undeclared exception!
      try { 
        Range.of(4571L, (-2516L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3947820894404037
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.forEach(consumer1);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.730447316215561
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range range0 = range_Builder0.build();
      range_Builder0.shift(0L);
      Range range1 = Range.of(0L, 1L);
      range0.startsBefore(range1);
      Range.ofLength(1L);
      Range range2 = Range.of(1L, 65535L);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 1299L);
      range2.endsBefore(range3);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.7947524711820377
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-841L), (-188L));
      range0.toString();
      List<Range> list0 = range0.split(1L);
      // Undeclared exception!
      range0.complementFrom(list0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4306246850176714
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(275L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.9863078291066514
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(34L, 34L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = new LinkedList<Range>();
      List<Range> list1 = range0.complement(range0);
      assertEquals(0, list1.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.ofLength(1L);
      Range range1 = Range.of(1L, 34L);
      Range range2 = Range.of(1L);
      range0.equals(range1);
      range2.equals((Object) null);
      Range.of((-1847L), (-1L));
      Range range3 = Range.of((-304L));
      Range range4 = range2.intersection(range3);
      assertTrue(range4.isEmpty());
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.8307843548478666
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Long long0 = new Long(1471L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-3658L), (-2711L));
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("%LAST'v])IT;zi6", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse %LAST'v])IT;zi6 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.6595349461796434
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      range0.equals(object0);
      Range.of(29L, 130L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2978L), (-2978L));
      range0.asRange();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.6658217308673304
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483637L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(2147483637L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 2147483637L, 2147483637L);
      range_Builder2.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder2.contractBegin(0L);
      range_Builder2.expandEnd(1264L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      range_Builder4.expandEnd((long) long0);
      long long1 = 2147483649L;
      Range range1 = Range.ofLength(2147483649L);
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(2147483637L, (-386L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.9237882341134074
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      Range range2 = Range.of((-9223372036854775808L), (-2147483648L));
      linkedList0.add(range2);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.4230188530562047
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(36L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range0.equals(object4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.409740665599908
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      range_Builder0.contractBegin((-1L));
      Range range0 = Range.of((-1L), (-1L));
      range0.equals(range0);
      long long0 = 1056L;
      // Undeclared exception!
      try { 
        Range.of(1056L, (-1823L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.1651294905433627
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-1L));
      Object object1 = new Object();
      range0.equals(object1);
      Long long0 = new Long((-3120L));
      Object object2 = new Object();
      Long long1 = new Long(9223372036854773817L);
      assertEquals(9223372036854773817L, (long)long1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.4890239742434206
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      range_Builder0.contractBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-1L), (-1L));
      long long1 = (-55L);
      range_Builder0.shift((-1L));
      range_Builder0.expandBegin(65535L);
      Range range1 = Range.of(range_CoordinateSystem0, (-55L), (-1L));
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of(1056L, (-1823L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.2335035692998164
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1752L));
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-1752L));
      range1.getEnd();
      Object object1 = new Object();
      range1.equals(object0);
      Long long0 = new Long(3255L);
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long((-1019L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Nz~6UMB&*;03ixGM$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Nz~6UMB&*;03ixGM$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=4.018076611488645
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(4559L, 4559L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      Range range1 = Range.of((-1932L));
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range0.equals(range0);
      Range.of(4559L, 4559L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.5115257895855696
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      LinkedList<Range> linkedList4 = new LinkedList<Range>();
      Long.valueOf(2147483647L);
      Object object0 = new Object();
      Range range0 = Range.ofLength(2147483647L);
      range0.equals(linkedList1);
      LinkedList<Range> linkedList5 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 35L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.7796668583711925
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      LinkedList<Range> linkedList4 = new LinkedList<Range>();
      Range range1 = Range.ofLength(9992L);
      range1.equals(linkedList1);
      LinkedList<Range> linkedList5 = new LinkedList<Range>();
      LinkedList<Range> linkedList6 = new LinkedList<Range>();
      Range.of((-903L));
      range0.equals(linkedList0);
      Long long0 = new Long(474L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147483647L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.6718892963382586
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.complement(range1);
      range1.intersection(range0);
      range1.complement(range0);
      Range.of(47L, 255L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.486782992255533
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = (-128L);
      Range range0 = Range.of(3296L, 4294967295L);
      // Undeclared exception!
      range0.forEach(consumer1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.8033705229609933
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(4559L, 4559L);
      Range range1 = Range.of((-1750L), (-1750L));
      boolean boolean0 = range1.endsBefore(range0);
      Range range2 = Range.of((-1932L));
      range0.spliterator();
      boolean boolean1 = range1.isSubRangeOf(range2);
      assertFalse(boolean1 == boolean0);
      
      Range range3 = range1.asRange();
      boolean boolean2 = range0.isSubRangeOf(range3);
      assertFalse(boolean2);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.722577352756864
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(1777L, 4294967295L);
      Range range1 = Range.of(21L);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object1);
      Long long0 = new Long(21L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.622110605469847
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-188L), (-188L));
      Range range1 = Range.of((-188L));
      range0.endsBefore(range1);
      range1.getLength();
      range1.isSubRangeOf(range0);
      range0.split(2L);
      range1.split(1L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("= 4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.= 4
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.984424834315109
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(2147483647L);
      range0.endsBefore(range1);
      long long0 = (-8L);
      range_Builder0.expandBegin((-8L));
      range1.getLength();
      range1.isSubRangeOf(range0);
      List<Range> list0 = range0.split(2147483647L);
      range1.complementFrom(list0);
      range1.startsBefore(range0);
      long long1 = 2L;
      Range.Builder range_Builder1 = new Range.Builder(2L);
      long long2 = 9223372036854775807L;
      range_Builder1.shift((-8L));
      range0.intersects(range1);
      long long3 = (-585L);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(1564L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.986520435383909
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(32767L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Range range1 = Range.of(32767L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range range2 = range1.intersection(range0);
      List<Range> list1 = range1.complement(range0);
      //  // Unstable assertion: assertEquals(2, list1.size());
      
      Range range3 = Range.of(47L, 255L);
      Range range4 = Range.of(255L);
      range0.spliterator();
      range3.complement(range4);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range5 = range1.intersection(range0);
      range5.intersection(range2);
      range1.complement(range3);
      range5.intersection(range3);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.9742404873697743
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.contractBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString();
      Range range1 = Range.parseRange("[ 0 .. 2147483646 ]/0B");
      range0.intersection(range1);
      String string0 = "RB";
      range1.equals("RB");
      range1.iterator();
      Range.of((-1L), (-1L));
      Range.parseRange("[ 0 .. 2147483646 ]/0B", range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of((-47L), (-1015L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.3786733861644453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(283L, 9223372036854775807L);
      range0.spliterator();
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.455626781863453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(275L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(4294967296L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(458L, 9223372036854775807L);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.449156929808095
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.Comparators.values();
      Range.of((-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.6569638515166134
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-128L), 3301L);
      Range.of(3301L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.540154494040974
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-1752L), (-1019L));
      Range.of(2165L, 2165L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals("(d+)s*,s*(d+)");
      Long long0 = new Long((-408L));
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long(2165L);
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.7008092512477817
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-1752L), (-1019L));
      Range.of(65535L);
      Range range1 = Range.of(65535L, 65535L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder((-1752L), (-1019L));
      Range range2 = Range.of((-1019L));
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.183615538893396
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range0 = Range.ofLength(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.479263936077578
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(283L, 9223372036854775807L);
      Range range0 = Range.ofLength(1047L);
      List<Range> list0 = range0.split(283L);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.521612811402219
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(283L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder(283L, 9223372036854775807L);
      Range range1 = range_Builder0.build();
      range0.endsBefore(range1);
      range0.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("#)Zel+!P!(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.#)Zel+!P!(
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=4.083113346463816
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Range range1 = Range.of(0L);
      range0.complement(range1);
      assertTrue(range0.isEmpty());
      
      Range range2 = Range.of((-9223372036854775808L), (-1216L));
      range1.spliterator();
      range2.spliterator();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range3 = range_Builder0.build();
      Range range4 = range3.intersection(range2);
      boolean boolean0 = range4.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      List<Range> list0 = range4.complement(range1);
      assertFalse(list0.contains(range1));
      
      range4.intersection(range3);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.9370908122594965
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(2147483647L);
      range0.endsBefore(range1);
      long long0 = (-8L);
      range_Builder0.expandBegin((-8L));
      range1.getLength();
      range1.isSubRangeOf(range0);
      List<Range> list0 = range0.split(2147483647L);
      range1.complementFrom(list0);
      range1.startsBefore(range0);
      long long1 = 2L;
      Range.Builder range_Builder1 = new Range.Builder(2L);
      long long2 = 9223372036854775807L;
      range_Builder1.shift((-8L));
      range0.intersects(range1);
      long long3 = (-585L);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(1564L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.592198378987077
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      boolean boolean0 = range1.endsBefore(range1);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      boolean boolean1 = range0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.067814432505453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = 2147483666L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483666L, 2147483666L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, (-2362L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2362 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.8948612042830946
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-1752L), (-1019L));
      Range range1 = Range.of(2165L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range2 = Range.of(2023L);
      assertFalse(range2.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range3 = range_Builder0.build();
      Range range4 = range1.intersection(range0);
      List<Range> list0 = range3.complement(range1);
      assertTrue(list0.contains(range4));
      
      range1.intersection(range3);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.9369205325480814
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-1750L), (-1019L));
      Range range1 = Range.of(2165L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range2 = Range.of(2023L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      
      Range.of((-1019L), 4294967295L);
      Range range3 = range0.intersection(range2);
      assertTrue(range3.isEmpty());
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.165754881412656
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals("6ltfy;bcZ7'v");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.94062017341601
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Long long0 = new Long((-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-9223372036854775808L), (-3658L));
      Range range1 = Range.of(9996L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      Long long1 = new Long(1L);
      Object object1 = new Object();
      range0.spliterator();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.7611332422383654
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.of(34L, 34L);
      Range range0 = Range.of(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-754L);
      Range.of(range_CoordinateSystem1, (-1272L), (-754L));
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.789882778485535
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.of((-2147483648L), (-967L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(9973L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long.getLong("AG,V7tN<aQ[c-8Bgm");
      Long long0 = new Long((-967L));
      Object object2 = new Object();
      Long long1 = new Long(4661L);
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.519921027886469
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483666L, 2147483666L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      LinkedList<Range> linkedList4 = new LinkedList<Range>();
      Long long0 = new Long(2147483665L);
      Object object0 = new Object();
      Long long1 = new Long((-286L));
      Range range1 = Range.of(282L, 2147483666L);
      range0.intersection(range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=4.066951754986839
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder(2017L);
      Range range0 = range_Builder0.build();
      range0.endsBefore(range0);
      range_Builder0.expandBegin(9223372036854775779L);
      range0.getLength();
      Range range1 = Range.of(9223372036854775779L);
      range1.isSubRangeOf(range0);
      List<Range> list0 = range0.split(2709L);
      range0.complementFrom(list0);
      range0.startsBefore(range1);
      long long1 = 1453L;
      Range.Builder range_Builder1 = new Range.Builder(1453L);
      long long2 = 9223372036854775807L;
      range_Builder0.shift(2017L);
      range0.intersects(range1);
      Range.Builder range_Builder2 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder2.contractEnd(2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.963185532507292
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(4559L, 4559L);
      Range range1 = Range.of((-1750L), 4559L);
      range1.endsBefore(range0);
      range0.complement(range1);
      Range range2 = Range.of((-1932L));
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.startsBefore(range2);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Long long0 = new Long(4294967295L);
      range1.endsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-1932L));
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.4976469273296757
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-188L), (-188L));
      Range range1 = Range.of((-188L), (-1L));
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.9257282482702673
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(283L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.endsBefore(range1);
      List<Range> list0 = range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 9223372036854775807L);
      range2.equals("org.jcvi.jillion.core.Range$UnsignedShortStartIntLengthRange");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range3 = range2.intersection(range1);
      range_CoordinateSystem0.toString();
      Range.of(1402L, 1402L);
      range3.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.964652781662098
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-1752L), (-1019L));
      Range range1 = Range.of(2165L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range2 = Range.of(2023L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      
      Range.of((-1019L), 4294967295L);
      Range range3 = range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range3.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=4.023229964543408
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(4559L, 4559L);
      Range range1 = Range.of((-1750L), 4559L);
      range1.endsBefore(range0);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      
      Range.of((-1932L));
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range2 = Range.of((-1750L));
      boolean boolean0 = range2.isSubRangeOf(range0);
      assertFalse(boolean0);
      
      Range range3 = Range.of((-1750L));
      Range range4 = range3.intersection(range0);
      assertSame(range3, range2);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.816410684233894
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-1750L), 4294967295L);
      Range range1 = Range.of(4294967295L);
      range1.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range2 = Range.of(4294967295L);
      range1.intersects(range0);
      Range.of((-1750L), 272L);
      Range range3 = range0.intersection(range1);
      assertNotSame(range3, range0);
      assertSame(range3, range2);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.5558394742056185
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.of(283L);
      Range range0 = Range.of(283L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 283L, 283L);
      range1.startsBefore(range0);
      range1.endsBefore(range0);
      Long long0 = new Long(283L);
      range0.isEmpty();
      String string0 = "^!_+D?!B4H,!^(U~K&h";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("^!_+D?!B4H,!^(U~K&h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.^!_+D?!B4H,!^(U~K&h
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.3778379642763916
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(2205L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.6558261322840915
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.contractBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString();
      Range range1 = Range.parseRange("[ 0 .. 2147483646 ]/0B");
      range0.intersection(range1);
      range1.toString(range_CoordinateSystem0);
      range1.equals("RB");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1594L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1594L, (-1374L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.408275726120369
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-450L), (-450L));
      Range range0 = Range.of(3566L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(3567L, long0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.927584498460611
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractBegin((-1L));
      Range range0 = Range.of((-1L), 2147483647L);
      Range range1 = Range.of(255L, 3769L);
      range1.spliterator();
      range1.complement(range0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range2 = range1.intersection(range0);
      Range range3 = range2.intersection(range0);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      
      range3.intersection(range1);
      //  // Unstable assertion: assertSame(range3, range1);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.553932651325948
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 708L;
      Range.of(range_CoordinateSystem0, 708L, 708L);
      Long long1 = new Long(708L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(708L);
      Range.of(range_CoordinateSystem0, 708L, 2009L);
      // Undeclared exception!
      try { 
        Range.of(2009L, 708L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.7007552050392407
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range range0 = range_Builder0.build();
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(1L);
      Range.Builder range_Builder1 = new Range.Builder(0L, 1L);
      range_Builder0.copy();
      range_Builder0.copy();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder2 = new Range.Builder();
      range0.iterator();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.6242855226893473
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1851L), (-1851L));
      Range.Builder range_Builder0 = new Range.Builder((-436L), 255L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 255L, 466L);
      Range range1 = Range.of(255L);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.582599614125327
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-364L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-364L), (-364L));
      Range range0 = Range.of((-364L));
      Range.of(1781L);
      // Undeclared exception!
      try { 
        range0.split((-364L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.6563111717985763
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range range0 = Range.of(1L);
      Range.Builder range_Builder1 = new Range.Builder(1L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder0.copy();
      List<Range> list0 = range0.split(32767L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.438832796219339
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372032559808513L, 9223372036854775807L);
      Range range1 = Range.of(9223372032559808513L);
      assertNotSame(range1, range0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range2 = range_Builder0.build();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.964954534203105
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = (-188L);
      Range range0 = Range.of((-188L), (-188L));
      Range range1 = Range.of((-188L));
      range0.endsBefore(range1);
      range1.getLength();
      range1.isSubRangeOf(range0);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.contractBegin((-188L));
      range_Builder0.contractBegin(1L);
      Range range2 = Range.ofLength(2439L);
      range2.getBegin();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.of(2439L, 1677L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.6645687380311753
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(34L, 34L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complement(range0);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      Range.of(34L, 34L);
      Range.ofLength(1L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(1L, 34L);
      Range range2 = Range.of(205L, 205L);
      Range range3 = range2.intersection(range1);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.479549098280039
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(283L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.240804857920011
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = (-15L);
      Range range0 = Range.of((-15L));
      range0.getLength();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.8956406763084925
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.complement(range1);
      Range range2 = range1.intersection(range0);
      range1.complement(range0);
      Range range3 = Range.of(47L, 255L);
      Range range4 = Range.ofLength(3470L);
      range0.spliterator();
      range3.complement(range4);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range5 = range1.intersection(range0);
      range5.intersection(range2);
      range1.complement(range3);
      Range range6 = range5.intersection(range3);
      range6.getLength();
      Range.of(47L);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.3876344284752276
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-9223372036854775806L), (-9223372036854775806L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.W
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(3052L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.4448408090211546
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(1842L);
      range_Builder0.contractBegin(1842L);
      Range.of((-1L), 32767L);
      Range.Builder range_Builder1 = new Range.Builder((-786L), (-1L));
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.714565597497863
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = (-188L);
      Range.of((-1L));
      Range.of(4294967295L);
      Range.of((-1L), 4294967295L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 141L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.2521272270204657
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, 2147483647L, 2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(281L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.218148288459608
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(65535L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long(65535L);
      assertTrue(long1.equals((Object)long0));
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.5735384828793624
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(283L, 9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      Range range1 = Range.of(9223372036854775807L);
      Range range2 = range1.intersection(range0);
      assertSame(range2, range1);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.9519901312738424
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range1.equals(range0);
      Range range2 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      boolean boolean0 = range2.intersects(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-618L), 2009L);
      Range range4 = Range.of(2533L);
      Object object0 = new Object();
      range4.equals(object0);
      Range range5 = range3.intersection(range1);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.1392673346824425
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(2147483647L);
      Long long0 = new Long(65507L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long1 = new Long(2147483647L);
      assertEquals(2147483647L, (long)long1);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.3568113492839657
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder((-240L), 1609L);
      Range range0 = range_Builder0.build();
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.672069244706062
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.build();
      range_Builder0.shift((-127L));
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1L));
      Range.of((-1L), 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder2 = new Range.Builder((-1L), 32767L);
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(283L, 9223372036854775806L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775806L, 283L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.0808360831049293
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(9223372036854775807L);
      range0.getBegin();
      Object object1 = new Object();
      Long long0 = new Long((-680L));
      Object object2 = new Object();
      Object object3 = new Object();
      Long long1 = new Long((-239L));
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.8885237990588597
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = (-188L);
      Range range0 = Range.of((-188L), (-188L));
      Range range1 = Range.of((-1L));
      Range.of(4294967295L);
      range1.intersects(range0);
      range1.intersection(range0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 141L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.509838296533067
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = 2440L;
      Range.Builder range_Builder0 = new Range.Builder(83L, 2440L);
      Range range0 = Range.of((-1752L));
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      long long1 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.612602792607123
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      long long0 = (-1031L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-1031L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.806150769429443
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      range0.getBegin();
      Range range1 = Range.of(61L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      // Undeclared exception!
      try { 
        Range.of(2062L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.515683049653624
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd(127L);
      range_Builder0.contractBegin((-1L));
      Range.of((-1L), 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(1056L);
      assertEquals(1056L, (long)long0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.4726370868564795
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.of(275L, 9223372036854775807L);
      Range.of(0L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.9363081452752215
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Long long0 = new Long((-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-9223372036854775808L), (-3658L));
      linkedList0.add(range0);
      range0.complement(range0);
      range0.complement(range0);
      Range range1 = Range.of((-1L), 47L);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      range2.intersection(range0);
      range0.complement(range1);
      range2.intersection(range0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=4.070035103592093
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(119L, 119L);
      Long long0 = new Long(119L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      range0.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2009L, 2198L);
      Range range2 = Range.of((-2147483648L));
      Range.of((-1337L), 4294967295L);
      range1.complement(range2);
      range2.intersection(range1);
      Range.of((-2147483648L));
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.771159772695071
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2504L), 1L);
      Range range1 = Range.of(295L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.5746068672316764
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(2147483647L);
      range1.intersection(range0);
      range1.intersects(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      assertEquals(0, linkedList1.size());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.879862751405472
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(608L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 608L, 608L);
      Range range2 = Range.of((-1213L), 1L);
      range1.intersects(range2);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      Range range3 = Range.of((-2464L), 1L);
      Range range4 = range2.intersection(range1);
      assertTrue(range4.isEmpty());
      assertNotSame(range2, range3);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.8737530821244293
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 283L, 2218L);
      Range range1 = range_Builder0.build();
      range_Builder0.shift(9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range0));
      assertEquals(2, list0.size());
      
      Range range2 = range1.intersection(range1);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.4759136871883167
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.of(283L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.build();
      range_Builder1.build();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(1594L, 283L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.1356178217257975
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(130L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.7031573587012745
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift(9223372036854775554L);
      range_Builder0.copy();
      Range.of(513L, 9223372036854775554L);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.5623084329114674
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(877L);
      Range.Comparators.values();
      Range.Builder range_Builder1 = new Range.Builder((-1L), 877L);
      range_Builder0.contractBegin(877L);
      Range range0 = Range.ofLength(785L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.442518824168288
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.contractEnd(1L);
      range_Builder0.expandBegin(1L);
      Range.Comparators.values();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(2147483647L, (-1561L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.6564599149192074
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range range0 = Range.of(1L);
      Range.Builder range_Builder1 = new Range.Builder(1L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 7L, (-2147483656L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-436L), (-1068L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.of((-629L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long((-9223372036854775677L));
      assertEquals((-9223372036854775677L), (long)long0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.549131775907387
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483637L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1868L));
      Range.of((-346L), 2147483649L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = (-8L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-904L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.5002767629080385
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.of(2147483647L, 9223372036854775792L);
      Range.of(3734L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
  }
}
