/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 09:32:19 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.util.Collection;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4328472996749833
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      boolean boolean0 = false;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      // Undeclared exception!
      try { 
        fileIterator0.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.75968770299993
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.iter.IteratorUtil", "");
      fileIterator0.updateFileIterator(file0);
      file0.toPath();
      file0.createNewFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(false);
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MockFile mockFile1 = new MockFile("", "");
      fileIterator_FileIteratorBuilder0.build();
      FileFilter[] fileFilterArray0 = new FileFilter[4];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      multipleFileFilter1.accept(file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.fileFilter(multipleFileFilter1);
      fileIterator_FileIteratorBuilder3.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder4.build();
      File file1 = fileIterator1.getNextFile();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      assertTrue(file0.equals((Object)file1));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.532600341275321
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      linkedList1.addAll((Collection<? extends FileFilter>) linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      linkedList1.addAll((Collection<? extends FileFilter>) linkedList3);
      linkedList2.add((FileFilter) multipleFileFilter2);
      linkedList0.retainAll(linkedList3);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList3);
      FileFilter[] fileFilterArray0 = new FileFilter[3];
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList3);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter5;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter3;
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList4);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      multipleFileFilter7.accept(mockFile0);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.spliterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertNotSame(fileIterator_FileIteratorBuilder2, fileIterator_FileIteratorBuilder1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.7320973414996987
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder3.equals((Object)fileIterator_FileIteratorBuilder2));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.653498840709621
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      assertFalse(fileIterator0.hasNext());
      
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator1.getNextFile();
      assertTrue(fileIterator1.hasNext());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.653612283704516
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      fileIterator0.getNextFile();
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder3.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder4.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6154443141483665
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.iterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder3.equals((Object)fileIterator_FileIteratorBuilder2));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.480358811409722
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      boolean boolean0 = true;
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileIterator0.getNextFile();
      // Undeclared exception!
      try { 
        fileIterator0.setUpInitialState((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.5401167238423326
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("XWax/^f 7+28", "XWax/^f 7+28");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("XWax/^f 7+28/XWax/^f 7+28/`>aZ0aGOrh>Aw.!CP+#R");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      mockFile0.setReadable(false, false);
      mockFile0.setLastModified(0L);
      File file0 = MockFile.createTempFile("`>aZ", "aGOrh>Aw.!CP+#R/", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.iterator();
      File file1 = fileIterator1.next();
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator1.hasNext();
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      fileIterator2.getNextFile();
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator0.hasNext();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(file1);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.452678011577039
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      assertTrue(fileIterator0.hasNext());
      
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.452678011577039
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      assertTrue(fileIterator0.hasNext());
      
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder3.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      linkedList0.add((FileFilter) multipleFileFilter2);
      linkedList1.addAll((Collection<? extends FileFilter>) linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList1);
      linkedList2.addAll((Collection<? extends FileFilter>) linkedList0);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      linkedList3.containsAll(linkedList2);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      linkedList3.add((FileFilter) multipleFileFilter0);
      linkedList2.retainAll(linkedList0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList3);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList3);
      FileFilter[] fileFilterArray0 = new FileFilter[3];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter9;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter7;
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      linkedList4.add((FileFilter) multipleFileFilter7);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(fileFilterArray0);
      multipleFileFilter6.accept(mockFile0);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter13 = new MultipleFileFilter(linkedList2);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.397518405239742
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      linkedList0.addAll((Collection<? extends FileFilter>) linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      linkedList1.addAll((Collection<? extends FileFilter>) linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      linkedList2.containsAll(linkedList1);
      linkedList0.parallelStream();
      linkedList0.pollFirst();
      FileFilter[] fileFilterArray0 = new FileFilter[7];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[4] = null;
      fileFilterArray0[5] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[6] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(fileFilterArray0[1]);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.fileFilter(fileFilterArray0[5]);
      mockFile0.setWritable(true, false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      multipleFileFilter0.accept(mockFile0);
      fileIterator0.spliterator();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      File file0 = MockFile.createTempFile("@KlK}B@ [2!$d", "/nf??1j.LWS", (File) mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      assertFalse(fileIterator_FileIteratorBuilder3.equals((Object)fileIterator_FileIteratorBuilder2));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList2);
      multipleFileFilter5.accept(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[8];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList3);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter6;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter1;
      multipleFileFilter4.accept(mockFile0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter3;
      fileFilterArray0[5] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[6] = (FileFilter) multipleFileFilter7;
      fileFilterArray0[7] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      multipleFileFilter4.accept(mockFile0);
      FileFilter[] fileFilterArray1 = new FileFilter[9];
      fileFilterArray1[0] = (FileFilter) multipleFileFilter2;
      fileFilterArray1[2] = (FileFilter) multipleFileFilter2;
      fileFilterArray1[2] = (FileFilter) multipleFileFilter3;
      fileFilterArray1[3] = (FileFilter) multipleFileFilter4;
      fileFilterArray1[4] = (FileFilter) multipleFileFilter1;
      fileFilterArray1[5] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList3);
      fileFilterArray1[7] = (FileFilter) multipleFileFilter4;
      fileFilterArray1[8] = (FileFilter) multipleFileFilter3;
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.727736531928281
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.build();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3916034835494155
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.getCanonicalFile();
      mockFile0.toURL();
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.iter.IteratorUtil$EmptyIterator", "org.jcvi.jillion.core.util.FileIterator$BreadthFirstFileIteratorBuilder", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      file0.getAbsoluteFile();
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator0.getNextFile();
      File file1 = fileIterator0.next();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file1);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(file1);
      fileIterator0.updateFileIterator(file1);
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.775491345136715
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      File file0 = fileIterator0.next();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      fileIterator_FileIteratorBuilder3.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      File file1 = fileIterator0.getNextFile();
      assertNotSame(mockFile0, file1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.015773991808798
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile.createTempFile("{+_tD x6Tf:", "{+_tD x6Tf:", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3895530195104047
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      String string0 = "org.jcvi.jillion.core.util.iter.IteratorUtil$EmptyIterator";
      mockFile0.mkdirs();
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.iter.IteratorUtil$EmptyIterator", "org.jcvi.jillion.core.util.FileIterator$BreadthFirstFileIteratorBuilder", (File) mockFile0);
      mockFile0.setExecutable(false);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      mockFile0.toPath();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.updateFileIterator(file0);
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.5973147240852557
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      mockFile0.toURI();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockFile0.setWritable(true, false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      MockFile mockFile1 = new MockFile("");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "eo\"W*Dg^n]", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("em;J73+8y6", "em;J73+8y6");
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "em;J73+8y6");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) mockFile0);
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Integer> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = Predicate.isEqual(object1);
      Predicate<Integer> predicate7 = predicate0.or(predicate6);
      Predicate<Integer> predicate8 = predicate7.or(predicate6);
      Predicate<Integer> predicate9 = Predicate.isEqual((Object) predicate5);
      Predicate<Integer> predicate10 = predicate9.negate();
      predicate3.or(predicate1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      Predicate<Object> predicate11 = predicate1.negate();
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate12.negate();
      Object object2 = new Object();
      predicate8.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate14 = predicate12.or(predicate11);
      Predicate<Object> predicate15 = predicate12.and(predicate6);
      Predicate<Object> predicate16 = predicate6.and(predicate15);
      Predicate<Object> predicate17 = predicate11.and(predicate16);
      predicate17.or(predicate14);
      Predicate.isEqual((Object) null);
      predicate6.and(predicate4);
      predicate17.or(predicate13);
      linkedList2.removeLastOccurrence(predicate14);
      predicate9.negate();
      Object object3 = new Object();
      linkedList2.add((Object) predicate10);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2140666558065467
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) mockFile0);
      predicate1.or(predicate1);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Integer> predicate3 = predicate0.or(predicate2);
      Integer integer0 = new Integer(2746);
      Integer integer1 = new Integer(2746);
      Predicate<Object> predicate4 = Predicate.isEqual(object1);
      Predicate<Integer> predicate5 = predicate0.or(predicate4);
      Predicate<Integer> predicate6 = predicate5.or(predicate4);
      Integer integer2 = new Integer(2746);
      Predicate.isEqual((Object) predicate3);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate8.negate();
      Object object2 = new Object();
      predicate6.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate10 = predicate8.or(predicate7);
      Predicate<Object> predicate11 = predicate8.and(predicate4);
      Predicate<Object> predicate12 = predicate4.and(predicate11);
      Predicate<Object> predicate13 = predicate7.and(predicate12);
      predicate13.or(predicate10);
      predicate4.and(predicate2);
      predicate13.or(predicate9);
      linkedList2.removeLastOccurrence(predicate10);
      Object object3 = new Object();
      linkedList2.add((Object) predicate0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.6430281280341426
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      MockFile mockFile1 = new MockFile("z'Al\"(]6Q7");
      mockFile1.toURL();
      fileIterator0.setUpInitialState(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)33;
      fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder3.equals((Object)fileIterator_FileIteratorBuilder2));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList2);
      multipleFileFilter5.accept(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[8];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList3);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter6;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter1;
      multipleFileFilter4.accept(mockFile0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter3;
      fileFilterArray0[5] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[6] = (FileFilter) multipleFileFilter7;
      fileFilterArray0[7] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      multipleFileFilter4.accept(mockFile0);
      FileFilter[] fileFilterArray1 = new FileFilter[9];
      fileFilterArray1[0] = (FileFilter) multipleFileFilter2;
      fileFilterArray1[1] = (FileFilter) multipleFileFilter2;
      fileFilterArray1[2] = (FileFilter) multipleFileFilter3;
      fileFilterArray1[3] = (FileFilter) multipleFileFilter4;
      fileFilterArray1[4] = (FileFilter) multipleFileFilter1;
      fileFilterArray1[5] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList3);
      fileFilterArray1[7] = (FileFilter) multipleFileFilter4;
      fileFilterArray1[8] = (FileFilter) multipleFileFilter3;
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.335830750427075
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      fileIterator0.setUpInitialState(mockFile0);
      assertFalse(mockFile0.isHidden());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3831155773603943
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      linkedList1.addAll((Collection<? extends FileFilter>) linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      linkedList2.addAll((Collection<? extends FileFilter>) linkedList0);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      linkedList3.containsAll(linkedList2);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      linkedList3.add((FileFilter) multipleFileFilter0);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      linkedList2.retainAll(linkedList4);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList4);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList3);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList4);
      FileFilter[] fileFilterArray0 = new FileFilter[3];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter8;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      linkedList5.add((FileFilter) multipleFileFilter6);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(fileFilterArray0);
      multipleFileFilter5.accept(mockFile0);
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(linkedList2);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
      
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator1.hasNext());
  }
}
