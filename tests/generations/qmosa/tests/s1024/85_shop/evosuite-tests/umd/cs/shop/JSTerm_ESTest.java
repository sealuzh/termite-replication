/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 10:57:00 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.218743692541794
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?n0H\"DvBMt#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeEval(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = (Object) jSSubstitution0;
      jSTerm0.toArray(objectArray0);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Object object1 = new Object();
      System.setCurrentTimeMillis(0L);
      jSTerm0.call();
      boolean boolean0 = jSTerm0.isEval();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      jSTerm0.lastElement();
      Object object0 = new Object();
      jSTerm0.makeEval(true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = null;
      objectArray0[1] = object0;
      objectArray0[2] = null;
      objectArray0[3] = null;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = null;
      objectArray0[6] = null;
      objectArray0[7] = null;
      objectArray0[8] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Object object2 = new Object();
      System.setCurrentTimeMillis((-1518L));
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.isEval();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4199860597938185
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      jSTerm0.lastElement();
      Object object0 = new Object();
      jSTerm0.makeEval(true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = null;
      objectArray0[1] = object0;
      objectArray0[2] = null;
      objectArray0[3] = null;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = null;
      objectArray0[6] = null;
      objectArray0[7] = null;
      objectArray0[8] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Object object2 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.cloneT();
      jSTerm1.standardizerTerm();
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.140016795854641
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement("caQol");
      jSTerm0.lastElement();
      Object object0 = new Object();
      jSTerm0.makeEval(true);
      Object object1 = new Object();
      Predicate.isEqual((Object) "caQol");
      Object object2 = new Object();
      System.setCurrentTimeMillis((-1041));
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0557051606564785
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4077722632059904
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'-D\"ya$:^c;o=tqp");
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-2));
      jSTerm0.add((Object) stringReader0);
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSSubstitution0.add((Object) integer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      predicate2.test((Object) null);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate3);
      Predicate.isEqual((Object) null);
      jSTerm0.clone();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) "");
      predicate3.and(predicate5);
      Predicate<Object> predicate7 = predicate5.or(predicate0);
      Predicate<Object> predicate8 = predicate6.or(predicate1);
      Predicate<Object> predicate9 = predicate1.or(predicate8);
      Predicate<Object> predicate10 = predicate3.or(predicate7);
      predicate4.or(predicate8);
      Predicate<Object> predicate11 = predicate10.and(predicate9);
      predicate5.or(predicate6);
      predicate11.negate();
      jSTerm0.add((Object) null);
      jSTerm1.parallelStream();
      StringReader stringReader1 = new StringReader("");
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6274261532274057
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      jSTerm0.lastElement();
      Object object0 = new Object();
      JSTerm jSTerm1 = new JSTerm();
      Object object1 = jSTerm1.clone();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.add((Object) null);
      jSTerm0.add(object1);
      jSTerm0.stream();
      jSTerm1.isGround();
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.696632353819634
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'\"zya$:;o=tqp");
      StringReader stringReader1 = new StringReader("caQol");
      stringReader0.read();
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(40);
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      JSJshopVars.whiteSpace = (-1485);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution5);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.478055660349868
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      JSJshopVars.interrogation = 1;
      jSTerm0.toStr();
      jSTerm0.lastElement();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate2 = predicate0.negate();
      Predicate<Integer> predicate3 = predicate2.negate();
      predicate3.and(predicate2);
      predicate2.negate();
      Object object0 = new Object();
      Predicate.isEqual(object0);
      predicate2.or(predicate3);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.removeElement("CB_96");
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm2);
      jSTerm0.isGround();
      jSTerm0.cloneT();
      jSTerm2.add((Object) null);
      jSTerm2.parallelStream();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Predicate.isEqual(object0);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(")");
      stringReader0.skip((-3212L));
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader(") ");
      stringReader0.reset();
      streamTokenizer0.lowerCaseMode(true);
      jSTerm0.remove((Object) streamTokenizer0);
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[nil]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.59411549687557
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      jSTerm0.toStr();
      jSTerm0.lastElement();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate2 = predicate0.negate();
      Predicate<Integer> predicate3 = predicate0.and(predicate2);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      predicate0.or(predicate2);
      JSTerm jSTerm1 = new JSTerm();
      Object object1 = jSTerm0.clone();
      jSTerm0.add(object1);
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      Object[] objectArray0 = new Object[18];
      objectArray0[16] = (Object) jSTerm1;
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[4] = (Object) predicate0;
      objectArray0[4] = (Object) predicate2;
      objectArray0[5] = (Object) predicate3;
      jSTerm1.add((Object) predicate1);
      objectArray0[6] = null;
      objectArray0[8] = (Object) jSTerm0;
      jSTerm2.parallelStream();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.listIterator();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm3.applySubstitutionT(jSSubstitution0);
      assertEquals("[null, [null]]", jSTerm0.toString());
      assertTrue(jSTerm5.equals((Object)jSTerm0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.180780956009806
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = 2;
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      jSTerm0.clone();
      JSJshopVars.backquote = (-18);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.slash = 2174;
      jSTerm1.add((Object) jSTerm0);
      JSJshopVars.verticalL = 2;
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.VarCounter = (-18);
      JSJshopVars.apostrophe = (-18);
      JSJshopVars.VarCounter = 2174;
      JSJshopVars.plus = 2;
      jSTerm0.add((Object) jSTerm2);
      jSTerm0.isGround();
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[2] = '}';
      charArray0[4] = '2';
      charArray0[5] = '\u0000';
      charArray0[6] = '>';
      charArray0[7] = '1';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'-D\"ya$:;o=tqp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer(921);
      Integer integer1 = new Integer((-22));
      Integer integer2 = new Integer((-22));
      Integer integer3 = new Integer(23);
      Integer integer4 = new Integer(1);
      streamTokenizer0.resetSyntax();
      System.setCurrentTimeMillis((-22));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'-D\"ya$:;o=tqp");
      StringReader stringReader1 = new StringReader("Ycgtd4G(T=Z,G};)z");
      stringReader1.read();
      stringReader1.skip((-535L));
      stringReader1.ready();
      stringReader1.read();
      stringReader1.ready();
      stringReader0.markSupported();
      stringReader1.skip((-734L));
      stringReader1.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader1.markSupported();
      stringReader1.reset();
      stringReader0.skip((-1L));
      streamTokenizer0.whitespaceChars(89, 552);
      StringReader stringReader2 = new StringReader("(dm'-D\"ya$:;o=tqp");
      StringReader stringReader3 = new StringReader("(dm'-D\"ya$:;o=tqp");
      StringReader stringReader4 = new StringReader(":");
      stringReader4.mark(483);
      StringReader stringReader5 = new StringReader("rrZ");
      stringReader0.mark(1434);
      StringReader stringReader6 = new StringReader("' ");
      StringReader stringReader7 = new StringReader("");
      stringReader7.reset();
      stringReader7.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6473547370100166
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      UnaryOperator.identity();
      JSJshopVars.interrogation = 1;
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("s<C:hSnRB-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm1.cloneT();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.backquote = 1;
      jSSubstitution0.add((Object) jSTerm4);
      jSTerm4.equals(jSTerm0);
      jSTerm4.isGround();
      JSTerm jSTerm5 = jSTerm0.cloneT();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.parallelStream();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        jSTerm5.equals(jSTerm2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7908334965153485
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      streamTokenizer0.pushBack();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm2.isConstant());
      
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      JSTerm jSTerm3 = new JSTerm();
      Predicate.isEqual((Object) streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate6 = predicate2.or(predicate4);
      predicate5.or(predicate6);
      Integer integer0 = new Integer((-965));
      Predicate<Object> predicate7 = Predicate.isEqual((Object) jSTerm3);
      predicate7.negate();
      predicate4.negate();
      Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate8 = predicate2.or(predicate4);
      predicate8.negate();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm4.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm2, jSSubstitution1);
      assertFalse(jSSubstitution2.fail());
      assertFalse(jSSubstitution1.isEmpty());
      
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      assertFalse(jSTerm2.isEval());
      assertEquals("[?%%%00]", jSTerm5.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm5.isFunction());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3729732395385523
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution0);
      jSTerm0.add((Object) "caQol");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.clone();
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.stream();
      jSSubstitution2.add((Object) jSSubstitution0);
      jSSubstitution1.add((Object) jSSubstitution0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      Object object0 = jSTerm2.clone();
      jSTerm0.add(object0);
      jSTerm0.parallelStream();
      StringReader stringReader1 = new StringReader("max");
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(12, stringBuffer0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = 2;
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSJshopVars.VarCounter = 2;
      JSJshopVars.coma = 2;
      JSJshopVars.backquote = 2;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) null);
      jSTerm0.parallelStream();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9360394799128846
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate.isEqual((Object) streamTokenizer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.containsAll(jSTerm2);
      jSSubstitution1.containsAll(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis((-3736L));
      boolean boolean0 = jSTerm3.isGround();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.cloneS();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution8);
      JSTerm jSTerm5 = jSTerm4.applySubstitutionT(jSSubstitution4);
      assertFalse(jSTerm5.isFunction());
      
      boolean boolean1 = jSTerm1.equals(jSTerm2);
      assertEquals("[?%%%0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm2, jSTerm5);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'-D\"ya$:^c;o=tqp");
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-2));
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.140016795854641
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      jSTerm0.lastElement();
      Object object0 = new Object();
      jSTerm0.makeEval(true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = null;
      objectArray0[1] = object0;
      objectArray0[2] = null;
      objectArray0[3] = null;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = null;
      objectArray0[6] = null;
      objectArray0[7] = null;
      objectArray0[8] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Object object2 = new Object();
      System.setCurrentTimeMillis((-1518L));
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.456952223364751
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = 2;
      jSTerm0.addElement(jSTerm0);
      JSJshopVars.interrogation = (-18);
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSJshopVars.backquote = (-18);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution5.sort(comparator0);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      Integer integer0 = new Integer(2392);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm3, jSSubstitution6);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.808463885562474
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      char[] charArray0 = new char[14];
      jSTerm0.capacity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.spliterator();
      jSTerm0.isEval();
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm2 = jSTerm1.call();
      streamTokenizer0.pushBack();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm2.removeAll(jSTerm1);
      jSTerm2.matches((JSPredicateForm) jSTerm3);
      jSTerm0.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.866408198594737
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeFunction();
      jSTerm0.call();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.makeFunction();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      jSTerm0.call();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.pushBack();
      streamTokenizer2.resetSyntax();
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      jSTerm4.removeAll(jSTerm1);
      stringReader0.read(charArray0);
      JSTerm jSTerm5 = jSTerm1.cloneT();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm5.sort(comparator0);
      jSTerm2.equals(jSTerm4);
      StringReader stringReader1 = new StringReader("j\"7hJ)\"qoGBe]hJL");
      System.setCurrentTimeMillis(0L);
      streamTokenizer0.sval = "4ihx@j3m3";
      StreamTokenizer streamTokenizer4 = null;
      try {
        streamTokenizer4 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.690108215856799
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(Fu<!D?Eq.p)im");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      Predicate.isEqual((Object) streamTokenizer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.containsAll(jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.clone();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution9);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.633931192226171
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      streamTokenizer0.pushBack();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.setElementAt(jSSubstitution1, 0);
      jSSubstitution0.containsAll(jSTerm2);
      jSTerm0.isVariable();
      jSSubstitution0.add((Object) predicate0);
      jSSubstitution0.containsAll(jSTerm2);
      jSSubstitution0.add((Object) jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$44/1126732530 cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.289265785951325
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-4533.823082621);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.ordinaryChar(0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = 'Z';
      charArray0[4] = 'O';
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      jSTerm0.setSize(0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate.isEqual((Object) "not");
      Integer integer0 = new Integer((-965));
      predicate2.negate();
      predicate2.negate();
      Predicate.isEqual((Object) "not");
      predicate4.or(predicate3);
      predicate4.negate();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5904748396466077
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      JSJshopVars.interrogation = (-119);
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Integer, ? extends JSSubstitution>) function0);
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      function2.apply(unaryOperator0);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super Object, ?>) function2);
      jSTerm2.removeAll(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.add((Object) jSSubstitution1);
      jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm1.isGround();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm2.call();
      assertEquals(2, jSTerm1.capacity());
      
      jSTerm3.isEval();
      assertFalse(jSTerm3.isFunction());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.657951154383314
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?ndHw<v1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertEquals("[?%%%0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isVariable());
      
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Predicate<Object> predicate6 = predicate1.and(predicate4);
      Predicate<Object> predicate7 = predicate4.or(predicate1);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate7.and(predicate9);
      predicate2.test(predicate0);
      Predicate<Object> predicate11 = predicate10.negate();
      predicate11.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      Integer integer0 = new Integer((-1));
      Predicate<Object> predicate13 = predicate7.negate();
      Predicate<Object> predicate14 = predicate11.negate();
      predicate6.negate();
      predicate7.or(predicate2);
      Predicate<Object> predicate15 = predicate9.and(predicate5);
      Predicate.isEqual((Object) predicate13);
      Predicate.isEqual((Object) predicate7);
      predicate14.or(predicate12);
      Predicate<Object> predicate16 = predicate15.or(predicate8);
      predicate12.or(predicate16);
      predicate14.or(predicate2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.92160768663235
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSSubstitution0.containsAll(jSTerm0);
      streamTokenizer0.lowerCaseMode(true);
      jSSubstitution1.containsAll(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm2.cloneT();
      System.setCurrentTimeMillis((-733L));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm4.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm5 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm5.removeAll(jSSubstitution2);
      jSTerm3.print();
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[?%%%0]", jSTerm2.toString());
      assertFalse(jSTerm3.isEval());
      
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm6 = new JSTerm();
      boolean boolean0 = jSTerm1.equals(jSTerm6);
      assertNotSame(jSTerm1, jSTerm5);
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = 2;
      jSTerm0.addElement(jSTerm0);
      Integer integer0 = new Integer(2);
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      System.setCurrentTimeMillis(1L);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.513409110174779
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = 2;
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      jSTerm0.clone();
      JSJshopVars.VarCounter = 2;
      JSJshopVars.coma = 2;
      JSJshopVars.backquote = 2;
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.lessT = 2;
      JSJshopVars.slash = 2;
      jSTerm1.add((Object) jSTerm0);
      JSJshopVars.verticalL = 2;
      JSJshopVars.verticalL = 2;
      JSJshopVars.VarCounter = 2;
      JSJshopVars.apostrophe = 2;
      JSJshopVars.VarCounter = 2;
      JSJshopVars.apostrophe = 2;
      JSJshopVars.apostrophe = (-1062);
      JSJshopVars.plus = (-1062);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(2);
      jSSubstitution0.add((Object) integer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.cloneT();
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[?%%%2]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      
      JSTerm jSTerm4 = jSTerm0.cloneT();
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isConstant());
      assertTrue(jSTerm4.isFunction());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4853558766368473
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      UnaryOperator.identity();
      JSJshopVars.interrogation = 1;
      jSTerm0.toStr();
      jSTerm0.isGround();
      jSTerm0.lastElement();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(predicate1).test(any());
      Predicate<Integer> predicate2 = predicate0.or(predicate1);
      Predicate<Integer> predicate3 = predicate2.negate();
      Predicate<Integer> predicate4 = predicate3.and(predicate2);
      Predicate<Integer> predicate5 = predicate2.and(predicate4);
      Predicate<Integer> predicate6 = predicate5.or(predicate2);
      Predicate<Integer> predicate7 = predicate5.and(predicate2);
      Predicate<Integer> predicate8 = predicate7.or(predicate3);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      predicate8.or(predicate7);
      Predicate<Integer> predicate9 = predicate8.negate();
      predicate9.and(predicate6);
      Predicate<Integer> predicate10 = predicate6.negate();
      predicate10.negate();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      predicate6.test(integer1);
      Integer integer2 = new Integer(1);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) integer1);
      predicate11.negate();
      predicate11.negate();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      System.setCurrentTimeMillis(1L);
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9227281716648044
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'\"zya$:;o=tqp");
      StringReader stringReader1 = new StringReader("caQol");
      stringReader0.read();
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(40);
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.call();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.matches(jSTerm1, jSSubstitution1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm3.sort(comparator0);
      jSTerm0.isGround();
      stringReader0.reset();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm0.cloneT();
      jSTerm4.matches(jSTerm1);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm6.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.513684994379201
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution0);
      jSTerm0.add((Object) "caQol");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.clone();
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.stream();
      jSSubstitution2.add((Object) jSSubstitution0);
      jSSubstitution1.add((Object) jSSubstitution0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSSubstitution2.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      jSSubstitution0.ensureCapacity(942);
      jSSubstitution2.removeAll(jSSubstitution1);
      jSSubstitution0.removeElements(jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSTerm1.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution7);
      jSSubstitution3.addElements(jSSubstitution5);
      jSTerm1.applySubstitutionT(jSSubstitution2);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution6));
      
      jSSubstitution2.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSTerm1.cloneT();
      jSTerm1.standardizerTerm();
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6805844063329896
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(Fu<!D?Eq.p)im");
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution0);
      Object object1 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution3.fail());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.316063732833407
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = 2;
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Object object0 = jSTerm0.clone();
      JSJshopVars.VarCounter = 2;
      JSJshopVars.coma = 2;
      JSJshopVars.backquote = 2;
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.slash = 2;
      jSTerm1.add((Object) jSTerm0);
      JSJshopVars.verticalL = 2;
      JSJshopVars.VarCounter = 2;
      JSJshopVars.apostrophe = 2;
      JSJshopVars.VarCounter = 2;
      JSJshopVars.apostrophe = 2;
      JSJshopVars.apostrophe = (-1062);
      JSJshopVars.plus = 2;
      jSTerm1.add(object0);
      JSJshopVars.exclamation = (-1062);
      jSTerm1.stream();
      jSTerm1.isGround();
      Object object1 = jSTerm0.firstElement();
      Predicate<Object> predicate1 = Predicate.isEqual(object1);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      predicate3.or(predicate2);
      predicate3.or(predicate0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertEquals("[[(this Collection)], [[(this Collection)]]]", jSTerm1.toString());
      
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.71880147294182
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "?n0HwDv1#d";
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEmpty();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.call();
      jSTerm0.standardizerTerm();
      Integer integer0 = new Integer((-1));
      jSTerm0.cloneT();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.isGround();
      jSTerm0.print();
      StringReader stringReader1 = new StringReader("_$#:<}VCr]}'4 B");
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution2.containsAll(jSSubstitution3);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.386731667385109
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-4533.823082621);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.ordinaryChar(0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'O';
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate1.and(predicate2);
      JSTerm jSTerm1 = new JSTerm();
      Predicate.isEqual((Object) jSTerm1);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.removeAll(jSTerm2);
      stringReader0.read(charArray0);
      jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.containsAll(jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.colon = (-1864);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      Integer integer0 = new Integer((-1864));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate2.or(predicate3);
      predicate8.and(predicate5);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = predicate8.or(predicate2);
      predicate10.or(predicate7);
      predicate4.or(predicate10);
      predicate9.or(predicate6);
      Predicate<Object> predicate11 = predicate5.negate();
      predicate11.or(predicate2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2769130758173466
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer((-1041));
      jSTerm0.add((Object) "caQol");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) "caQol");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      predicate1.negate();
      jSTerm1.add((Object) jSSubstitution3);
      Integer integer1 = new Integer(2147483645);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      predicate3.negate();
      Predicate<Object> predicate7 = predicate0.or(predicate2);
      predicate7.or(predicate0);
      Predicate<Object> predicate8 = predicate6.negate();
      predicate8.and(predicate5);
      Integer integer2 = new Integer((-1041));
      Predicate<Object> predicate9 = Predicate.isEqual((Object) integer2);
      Predicate.isEqual((Object) jSSubstitution1);
      predicate8.negate();
      Predicate<Object> predicate10 = predicate9.or(predicate3);
      predicate4.or(predicate5);
      Predicate<Object> predicate11 = predicate10.negate();
      predicate10.or(predicate11);
      predicate8.or(predicate4);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3771876589015464
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      UnaryOperator.identity();
      JSJshopVars.interrogation = 1;
      jSTerm0.toStr();
      jSTerm0.lastElement();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(predicate1).test(any());
      Predicate<Integer> predicate2 = predicate0.or(predicate1);
      Predicate<Integer> predicate3 = predicate0.negate();
      Predicate<Integer> predicate4 = predicate3.and(predicate2);
      Predicate<Integer> predicate5 = predicate2.and(predicate4);
      Predicate<Integer> predicate6 = predicate5.or(predicate2);
      Predicate<Integer> predicate7 = predicate5.and(predicate2);
      Predicate<Integer> predicate8 = predicate7.or(predicate3);
      predicate6.or(predicate7);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      predicate8.or(predicate7);
      Predicate<Integer> predicate9 = predicate8.negate();
      predicate9.and(predicate6);
      predicate5.negate();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      predicate6.test(integer1);
      Integer integer2 = new Integer(1);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) integer1);
      predicate10.negate();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.1685720492998226
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(Fu<!D?Eq.p)im");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertTrue(boolean0);
      
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      predicate2.and(predicate4);
      predicate4.negate();
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate7.and(predicate3);
      Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Object> predicate9 = predicate6.negate();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Integer integer0 = new Integer((-6260));
      Predicate.isEqual((Object) integer0);
      predicate7.negate();
      Predicate<Object> predicate10 = predicate3.negate();
      Predicate<Object> predicate11 = predicate10.or(predicate1);
      predicate4.negate();
      Predicate<Object> predicate12 = predicate3.and(predicate4);
      predicate11.or(predicate12);
      predicate7.or(predicate8);
      predicate3.or(predicate8);
      predicate9.or(predicate0);
      System.setCurrentTimeMillis((-6260));
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution3);
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.3631322031433784
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.cloneS();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(2);
      jSTerm0.add((Object) integer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSJshopVars.flagLevel = 127;
      jSTerm0.parallelStream();
      StringReader stringReader0 = new StringReader("b<f");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1119339714219736
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'-D\"ya$:^c;o=tqp");
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-2));
      jSTerm0.add((Object) stringReader0);
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      jSSubstitution0.add((Object) integer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      predicate2.test((Object) null);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate3);
      Predicate.isEqual((Object) null);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) "");
      predicate5.or(predicate0);
      predicate6.or(predicate1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) predicate2);
      jSTerm0.parallelStream();
      StringReader stringReader1 = new StringReader("(dm'-D\"ya$:^c;o=tqp");
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$45/726294290 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.105029631334913
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StringReader stringReader1 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.ordinaryChar(48);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?n0HwDv1#d");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate1.and(predicate0);
      Predicate.isEqual((Object) "?n0HwDv1#d");
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      Predicate<Object> predicate6 = predicate5.and(predicate1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) jSSubstitution1);
      predicate6.negate();
      predicate7.negate();
      predicate7.or(predicate4);
      predicate1.negate();
      Predicate.isEqual((Object) predicate7);
      predicate1.or(predicate5);
      predicate0.negate();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertEquals(1, jSSubstitution2.size());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Integer integer0 = new Integer((-433));
      Integer integer1 = new Integer(2147483645);
      predicate0.test(integer1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) (-433);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5132485928320172
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1%UZlX6a%");
      StringReader stringReader1 = new StringReader("call");
      stringReader0.read();
      stringReader1.reset();
      stringReader0.ready();
      stringReader1.markSupported();
      stringReader1.read();
      stringReader1.skip(49);
      stringReader1.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("call");
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution3);
      jSTerm0.add((Object) jSSubstitution5);
      jSTerm0.stream();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = 2;
      jSTerm0.addElement(jSTerm0);
      jSTerm0.clone();
      JSJshopVars.VarCounter = 2;
      JSJshopVars.coma = 2;
      JSJshopVars.backquote = 2;
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.slash = 2;
      jSTerm1.add((Object) jSTerm0);
      JSJshopVars.verticalL = 2;
      JSJshopVars.verticalL = 2;
      JSJshopVars.VarCounter = 2;
      JSJshopVars.apostrophe = 2;
      JSJshopVars.VarCounter = 2;
      JSJshopVars.apostrophe = 2;
      JSJshopVars.apostrophe = (-1062);
      JSJshopVars.coma = (-463);
      JSJshopVars.plus = (-1062);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.removeAll(jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isConstant();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.2483298646280048
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      Integer integer0 = new Integer((-433));
      Integer integer1 = new Integer((-2147483641));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6602162707648
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?n0H\"DvBMt#");
      StringReader stringReader1 = new StringReader("f9~O%8j:SmdR{^");
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'k';
      charArray0[2] = '[';
      charArray0[4] = 'w';
      charArray0[5] = 'M';
      charArray0[6] = ']';
      charArray0[7] = '\u001C';
      stringReader0.read(charArray0);
      StringReader stringReader2 = new StringReader("3X{*UM>)>j8P`rW;]");
      stringReader2.read();
      stringReader1.ready();
      stringReader0.markSupported();
      stringReader1.skip((-734L));
      stringReader0.reset();
      StringReader stringReader3 = new StringReader("->");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader4 = new StringReader("f9~O%8j:SmdR{^");
      StringReader stringReader5 = new StringReader("y^6p");
      StringReader stringReader6 = new StringReader("?n0H\"DvBMt#");
      stringReader1.mark(1434);
      StringReader stringReader7 = new StringReader("3X{*UM>)>j8P`rW;]");
      stringReader2.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6602162707648
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?n0H\"DvBMt#");
      StringReader stringReader1 = new StringReader("f9~O%8j:SmdR{^");
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = '[';
      charArray0[4] = 'N';
      charArray0[5] = 'M';
      charArray0[6] = ']';
      charArray0[7] = '\u001C';
      stringReader0.read(charArray0);
      StringReader stringReader2 = new StringReader("?n0H\"DvBMt#");
      stringReader2.read();
      stringReader0.markSupported();
      stringReader1.skip((-734L));
      stringReader0.reset();
      StringReader stringReader3 = new StringReader("?n0H\"DvBMt#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      StringReader stringReader4 = new StringReader("f9~O%8j:SmdR{^");
      StringReader stringReader5 = new StringReader("y^6p");
      StringReader stringReader6 = new StringReader("?n0H\"DvBMt#");
      stringReader1.mark(1434);
      StringReader stringReader7 = new StringReader("rr%");
      stringReader0.reset();
      stringReader2.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.percent = (-4);
      StringReader stringReader1 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.pushBack();
      Integer integer0 = new Integer((-4));
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      Integer integer1 = new Integer((-4));
      Integer integer2 = new Integer((-4));
      streamTokenizer1.pushBack();
      predicate0.test((Integer) (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = ')';
      streamTokenizer0.ttype = (int) ')';
      charArray0[5] = 'L';
      charArray0[5] = ';';
      jSTerm0.isConstant();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.040984065799581
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = ')';
      streamTokenizer0.ttype = (int) ')';
      charArray0[5] = 'L';
      charArray0[5] = ';';
      streamTokenizer0.ordinaryChar(0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate2);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate0.negate();
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate7.negate();
      predicate8.or(predicate5);
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate2);
      predicate6.negate();
      predicate3.negate();
      predicate9.or(predicate6);
      Predicate<Object> predicate11 = predicate4.or(predicate10);
      Predicate.isEqual((Object) predicate4);
      predicate11.test(predicate9);
      predicate11.negate();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
      assertFalse(jSTerm0.isEval());
      assertNotSame(jSSubstitution0, jSSubstitution1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.leftBrac = 35;
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.backquote = 112;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.leftBrac = 44;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.8530470883160377
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      jSTerm0.toStr();
      jSTerm0.lastElement();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(predicate1).toString();
      Predicate<Integer> predicate2 = predicate0.negate();
      Predicate<Integer> predicate3 = predicate0.and(predicate2);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      predicate0.or(predicate2);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.clone();
      JSJshopVars.equalT = 32;
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      Object[] objectArray0 = new Object[18];
      objectArray0[16] = (Object) jSTerm1;
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[4] = (Object) predicate0;
      objectArray0[4] = (Object) predicate2;
      objectArray0[5] = (Object) predicate3;
      jSTerm1.add((Object) predicate1);
      objectArray0[6] = null;
      objectArray0[8] = (Object) jSTerm0;
      jSTerm2.parallelStream();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.listIterator();
      JSTerm jSTerm4 = jSTerm2.call();
      assertTrue(jSTerm4.isFunction());
      
      jSTerm4.makeConstant();
      assertFalse(jSTerm4.isFunction());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = jSTerm3.cloneT();
      assertFalse(jSTerm5.isConstant());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.622827904722017
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?ndHw<v1#d");
      StringReader stringReader1 = new StringReader("%%%");
      stringReader0.read();
      stringReader0.ready();
      stringReader0.markSupported();
      stringReader0.skip((-766L));
      stringReader1.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("?ndHw<v1#d");
      StringReader stringReader3 = new StringReader("mL(DEc");
      stringReader3.reset();
      stringReader3.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'\"zya$:;o=tqp");
      Predicate.isEqual((Object) "(dm'\"zya$:;o=tqp");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.clone();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(62);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) null);
      predicate1.or(predicate5);
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate5);
      predicate7.negate();
      predicate6.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate6.negate();
      predicate8.or(predicate1);
      Predicate<Object> predicate10 = predicate2.negate();
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate6);
      predicate11.negate();
      predicate11.negate();
      Predicate<Object> predicate12 = predicate9.negate();
      predicate12.or(predicate4);
      predicate10.or(predicate6);
      Predicate.isEqual((Object) predicate3);
      predicate12.test(predicate6);
      predicate7.negate();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.plus = 63;
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Integer integer0 = new Integer((-5));
      Integer integer1 = new Integer((-5));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer(1);
      System.setCurrentTimeMillis((-5));
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("84%TwyEv<~e2GK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Integer integer0 = new Integer((-5));
      Integer integer1 = new Integer((-5));
      Integer integer2 = new Integer(23);
      Integer integer3 = new Integer(20);
      System.setCurrentTimeMillis((-5));
      System.setCurrentTimeMillis((-3773L));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("->");
      stringReader0.read();
      stringReader0.ready();
      stringReader0.markSupported();
      stringReader0.skip(2589L);
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader(">");
      StringReader stringReader2 = new StringReader(">");
      StringReader stringReader3 = new StringReader(":");
      stringReader3.reset();
      StringReader stringReader4 = new StringReader(">");
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      JSJshopVars.interrogation = (-18);
      jSTerm0.lastElement();
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      JSJshopVars.backquote = (-18);
      Predicate.isEqual(object0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm2);
      jSTerm2.isVariable();
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = '(';
      charArray0[2] = '}';
      charArray0[3] = '1';
      charArray0[4] = '2';
      charArray0[5] = '(';
      charArray0[6] = '[';
      charArray0[7] = '1';
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("hKfy\"RB#GA");
      jSTerm0.spliterator();
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      StringReader stringReader1 = new StringReader("Lk#ojkv'+EZT$N");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.pushBack();
      Integer integer0 = new Integer((-4));
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      Integer integer1 = new Integer((-4));
      Integer integer2 = new Integer((-1));
      predicate0.test((Integer) (-1));
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.661341948921112
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?ndHw<v1#ad");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.standardizerTerm();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      jSTerm0.equals(jSTerm1);
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Predicate<Object> predicate6 = predicate1.and(predicate4);
      Predicate<Object> predicate7 = predicate4.or(predicate1);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate2.negate();
      predicate2.test(predicate0);
      Integer integer0 = new Integer((-1));
      jSTerm0.isFunction();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate4.and(predicate1);
      Predicate<Object> predicate12 = predicate6.negate();
      Integer integer1 = new Integer((-1));
      Predicate<Object> predicate13 = predicate7.negate();
      Predicate<Object> predicate14 = predicate11.negate();
      Predicate<Object> predicate15 = predicate6.negate();
      predicate15.negate();
      Predicate<Object> predicate16 = predicate9.and(predicate5);
      Predicate<Object> predicate17 = Predicate.isEqual((Object) predicate13);
      Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate18 = predicate17.negate();
      predicate9.or(predicate18);
      Predicate<Object> predicate19 = predicate16.or(predicate8);
      predicate12.or(predicate19);
      predicate14.or(predicate2);
      jSTerm0.cloneT();
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.iterator();
      jSSubstitution1.containsAll(jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("8i/g\"UnH\"OR~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution9);
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      assertTrue(jSSubstitution12.equals((Object)jSSubstitution2));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.3032310122718718
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      StringReader stringReader1 = new StringReader("Lk#ojkv'+EZT$N");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.pushBack();
      Integer integer0 = new Integer((-4));
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      Integer integer1 = new Integer((-4));
      Integer integer2 = new Integer((-1));
      predicate0.test((Integer) (-1));
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.6275758796393918
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".W@KM6BZA;K]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals((-2), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'\"zya$:;o=tqp");
      Predicate.isEqual((Object) "(dm'\"zya$:;o=tqp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer0.ordinaryChar(0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(dm'\"zya$:;o=tqp");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate0.negate();
      predicate4.or(predicate3);
      Predicate<Object> predicate5 = predicate2.and(predicate3);
      predicate0.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate6);
      predicate7.negate();
      predicate5.negate();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clear();
      stringReader0.reset();
      System.setCurrentTimeMillis(0L);
      streamTokenizer0.lowerCaseMode(false);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?n0H\"DvBMt#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.containsAll(jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isFunction());
      assertEquals("?%%% ", stringBuffer0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.782019572767355
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'-D\"ya$:;o=tqp");
      StringReader stringReader1 = new StringReader("Ycgtd4G(T=Z,G};)z");
      stringReader1.read();
      stringReader1.ready();
      stringReader1.ready();
      stringReader0.markSupported();
      stringReader1.skip((-734L));
      stringReader1.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(89, 552);
      StringReader stringReader2 = new StringReader("(dm'-D\"ya$:;o=tqp");
      StringReader stringReader3 = new StringReader("(dm'-D\"ya$:;o=tqp");
      StringReader stringReader4 = new StringReader(":");
      stringReader4.mark(483);
      StringReader stringReader5 = new StringReader("rrZ");
      stringReader0.mark(1434);
      StringReader stringReader6 = new StringReader("j#Kc dhPCNd");
      StringReader stringReader7 = new StringReader("j#Kc dhPCNd");
      stringReader7.reset();
      stringReader2.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      assertEquals(41, streamTokenizer1.ttype);
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?n0H\"DvBMt#");
      StringReader stringReader1 = new StringReader("f9~O%8j:SmdR{^");
      StringReader stringReader2 = new StringReader("3X{*UM>)>j8P`rW;]");
      stringReader2.read();
      stringReader1.ready();
      stringReader0.markSupported();
      stringReader1.skip((-734L));
      stringReader0.reset();
      StringReader stringReader3 = new StringReader("->");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      StringReader stringReader4 = new StringReader("f9~O%8j:SmdR{^");
      StringReader stringReader5 = new StringReader("y^6p");
      StringReader stringReader6 = new StringReader("?n0H\"DvBMt#");
      stringReader1.mark(1434);
      StringReader stringReader7 = new StringReader("rr%");
      stringReader0.reset();
      stringReader2.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("caQol");
      StringReader stringReader1 = new StringReader("caQol");
      StringReader stringReader2 = new StringReader("3X{*UM>)>j8P`rW;]");
      stringReader1.read();
      stringReader1.ready();
      stringReader0.markSupported();
      stringReader2.skip(1L);
      stringReader0.reset();
      StringReader stringReader3 = new StringReader("-:Ygr%EsE?P8O`|.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StringReader stringReader4 = new StringReader("-:Ygr%EsE?P8O`|.");
      StringReader stringReader5 = new StringReader(",z.}~;JQtbl{BD=");
      StringReader stringReader6 = new StringReader("o0;'HPn+Zx//fG^Z");
      stringReader3.mark(99);
      StringReader stringReader7 = new StringReader("f9~O%8j:SmdR{^");
      stringReader6.reset();
      StringReader stringReader8 = new StringReader("f9~O%8j:SmdR{^");
      stringReader8.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Integer integer0 = new Integer((-5));
      Integer integer1 = new Integer((-5));
      Integer integer2 = new Integer(23);
      Integer integer3 = new Integer(20);
      System.setCurrentTimeMillis((-5));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.2296747293240762
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'-D\"ya$:;o=tqp");
      StringReader stringReader1 = new StringReader("->");
      stringReader1.read();
      stringReader1.ready();
      stringReader0.markSupported();
      stringReader1.skip((-734L));
      stringReader1.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("(dm'-D\"ya$:;o=tqp");
      StringReader stringReader3 = new StringReader("(dm'-D\"ya$:;o=tqp");
      StringReader stringReader4 = new StringReader(":");
      stringReader4.mark(483);
      StringReader stringReader5 = new StringReader("rr%");
      stringReader5.reset();
      stringReader1.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'-D\"ya$:^c;o=tqp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer(921);
      Integer integer1 = new Integer((-19));
      Integer integer2 = new Integer((-19));
      Integer integer3 = new Integer(25);
      Integer integer4 = new Integer((-19));
      streamTokenizer0.resetSyntax();
      System.setCurrentTimeMillis((-19));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = 2;
      jSTerm0.addElement(jSTerm0);
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      jSTerm0.clone();
      JSJshopVars.VarCounter = 2;
      JSJshopVars.coma = 2;
      JSJshopVars.backquote = 2;
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.slash = 2;
      jSTerm1.add((Object) jSTerm0);
      JSJshopVars.verticalL = 2;
      JSJshopVars.VarCounter = 2;
      JSJshopVars.apostrophe = 2;
      JSJshopVars.VarCounter = 2;
      JSJshopVars.apostrophe = 2;
      JSJshopVars.apostrophe = (-1062);
      JSJshopVars.plus = 2;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'\"zya$:;o=tqp");
      Predicate.isEqual((Object) "(dm'\"zya$:;o=tqp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(dm'\"zya$:;o=tqp");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate3);
      Predicate<Object> predicate6 = predicate2.and(predicate3);
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate8);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate4.and(predicate3);
      Predicate<Object> predicate11 = predicate6.negate();
      Predicate<Object> predicate12 = predicate2.or(predicate10);
      Predicate<Object> predicate13 = predicate5.negate();
      Predicate.isEqual((Object) "(dm'\"zya$:;o=tqp");
      predicate12.negate();
      Predicate<Object> predicate14 = predicate13.negate();
      predicate9.negate();
      Predicate<Object> predicate15 = predicate6.or(predicate12);
      Predicate<Object> predicate16 = predicate10.and(predicate6);
      predicate16.or(predicate10);
      Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate17 = Predicate.isEqual((Object) predicate7);
      predicate17.or(predicate15);
      predicate8.or(predicate17);
      predicate6.or(predicate11);
      predicate4.or(predicate1);
      predicate2.or(predicate14);
      predicate8.or(predicate11);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'\"zya$:;o=tqp");
      Predicate.isEqual((Object) "(dm'\"zya$:;o=tqp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(dm'\"zya$:;o=tqp");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate3);
      Predicate<Object> predicate6 = predicate2.and(predicate3);
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate8);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate4.and(predicate3);
      Predicate<Object> predicate11 = predicate6.negate();
      Predicate<Object> predicate12 = predicate2.or(predicate10);
      Predicate<Object> predicate13 = predicate5.negate();
      Predicate.isEqual((Object) "(dm'\"zya$:;o=tqp");
      predicate12.negate();
      Predicate<Object> predicate14 = predicate13.negate();
      predicate9.negate();
      Predicate<Object> predicate15 = predicate6.or(predicate12);
      Predicate<Object> predicate16 = predicate10.and(predicate6);
      predicate16.or(predicate10);
      Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate17 = Predicate.isEqual((Object) predicate7);
      predicate17.or(predicate15);
      predicate8.or(predicate17);
      predicate6.or(predicate11);
      predicate4.or(predicate1);
      predicate2.or(predicate14);
      predicate8.or(predicate11);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      jSTerm0.lastElement();
      Integer integer0 = new Integer((-2));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.test(jSTerm0);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate5.and(predicate6);
      predicate5.negate();
      Integer integer1 = new Integer((-2));
      Predicate<Object> predicate8 = predicate0.negate();
      predicate3.and(predicate5);
      Predicate<Object> predicate9 = predicate5.negate();
      predicate6.negate();
      Predicate<Object> predicate10 = predicate4.negate();
      predicate7.and(predicate0);
      Predicate<Object> predicate11 = predicate3.or(predicate8);
      JSTerm jSTerm1 = new JSTerm();
      predicate1.test(jSTerm1);
      predicate2.or(predicate4);
      predicate11.and(predicate8);
      predicate9.negate();
      predicate10.negate();
      predicate0.or(predicate8);
      predicate9.or(predicate4);
      StringReader stringReader0 = new StringReader("/1|ES%nnp:OnYsiH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'-D\"ya$:;o=tqp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(dm'-D\"ya$:;o=tqp");
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      predicate1.negate();
      Predicate<Integer> predicate2 = predicate1.negate();
      Predicate<Integer> predicate3 = predicate2.or(predicate1);
      Predicate<Integer> predicate4 = predicate3.and(predicate1);
      Predicate<Integer> predicate5 = predicate4.or(predicate3);
      Predicate<Integer> predicate6 = predicate5.and(predicate1);
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate9.negate();
      predicate0.test(stringReader0);
      Integer integer0 = new Integer((-1));
      predicate8.test(predicate4);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate11.and(predicate0);
      Predicate<Object> predicate13 = predicate0.negate();
      Integer integer1 = new Integer((-3));
      Predicate<Object> predicate14 = predicate8.negate();
      predicate7.and(predicate12);
      Predicate<Object> predicate15 = predicate12.negate();
      predicate13.negate();
      Predicate<Object> predicate16 = predicate13.negate();
      Predicate<Object> predicate17 = predicate11.and(predicate10);
      Predicate<Object> predicate18 = Predicate.isEqual((Object) predicate6);
      Predicate.isEqual((Object) predicate11);
      predicate18.negate();
      predicate18.or(predicate16);
      predicate17.test(predicate6);
      Predicate<Object> predicate19 = predicate0.or(predicate15);
      Predicate<Object> predicate20 = predicate17.and(predicate19);
      predicate20.or(predicate14);
      predicate11.or(predicate12);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
