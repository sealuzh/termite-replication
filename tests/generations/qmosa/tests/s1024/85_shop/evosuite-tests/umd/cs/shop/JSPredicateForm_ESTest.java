/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 12:10:12 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0238736061572697
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Function<String, String> function0 = Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function3 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      function0.apply("not");
      Function.identity();
      Function.identity();
      function0.andThen((Function<? super String, ? extends String>) unaryOperator0);
      function3.compose((Function<? super Object, ?>) function3);
      function3.compose((Function<? super Object, ?>) function3);
      unaryOperator1.andThen((Function<? super Integer, ?>) function1);
      StringReader stringReader0 = new StringReader("llh+(a5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.clonePF();
      assertEquals(2, jSTerm0.size());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8950056533107491
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeElement(jSTerm0);
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      assertNotSame(jSSubstitution1, jSSubstitution0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(klHj /oz~k\"-*N");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0010913480265513
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(llH+( C5 e~kn-*N");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.retainAll(jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      jSTerm0.containsAll(jSTerm0);
      jSTerm0.trimToSize();
      jSTerm0.remove((Object) jSTerm0);
      jSTerm1.addElement(jSTerm0);
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.isGround();
      jSTerm1.makeVariable();
      jSTerm1.isGround();
      jSTerm0.isGround();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm0.iterator();
      jSTerm1.retainAll(jSTerm0);
      jSTerm1.removeElement(jSTerm0);
      jSTerm1.removeAll(jSTerm0);
      jSTerm0.standardizerTerm();
      jSTerm1.setSize(0);
      jSTerm1.spliterator();
      jSTerm1.equals(jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.makeEval(false);
      jSTerm0.setSize(2556);
      jSTerm0.removeElement(jSTerm0);
      jSTerm0.removeElement(jSTerm1);
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.retainAll(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) jSTerm0);
      jSTerm1.containsAll(jSTerm0);
      jSTerm0.clone();
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.addElement(jSTerm1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm1.add((Object) jSTerm2);
      jSTerm1.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.64605628322554
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Povn");
      StringReader stringReader0 = new StringReader("dY#;Bd7MXgXR2:pXa8:K");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.iterator();
      jSTerm1.lastElement();
      jSSubstitution1.add((Object) "Povn");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.removeElement(jSSubstitution2);
      jSSubstitution2.add((Object) jSSubstitution1);
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution1.assignFailure();
      jSSubstitution2.removeElement("dY#;Bd7MXgXR2:pXa8:K");
      jSTerm1.equals(jSPredicateForm0);
      jSPredicateForm0.toArray();
      jSTerm0.clonePF();
      JSJshopVars.lessT = (-1079417536);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.equals((JSPredicateForm) jSTerm1);
      jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution6);
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionPF(jSSubstitution5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-1095));
      jSTerm0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0623078177346197
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "hrt9x++5");
      StringReader stringReader0 = new StringReader("hrt9x++5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "hrt9x++5");
      jSSubstitution0.add((Object) "hrt9x++5");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0068967152315558
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(klHj oz~k\"-*N");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7707356420353721
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "PXJn");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("zV.a)T%k*A2C");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.lastElement();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.removeAllElements();
      jSSubstitution3.containsAll(jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSSubstitution1;
      objectArray0[1] = (Object) jSSubstitution2;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution3;
      objectArray0[5] = (Object) jSSubstitution5;
      jSSubstitution3.removeElement(jSSubstitution0);
      objectArray0[6] = (Object) jSSubstitution3;
      objectArray0[7] = (Object) jSSubstitution2;
      jSTerm0.toArray();
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution1.setSize(703);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
      assertEquals("(zV.a(PXJn ))", stringBuffer0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.020593437179155
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "PoXn");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("zV.<)T%k*2C");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.lastElement();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.removeAllElements();
      jSSubstitution3.containsAll(jSSubstitution1);
      jSSubstitution3.add((Object) jSTerm0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSSubstitution1;
      objectArray0[1] = (Object) jSSubstitution2;
      objectArray0[2] = (Object) jSSubstitution4;
      objectArray0[3] = (Object) function0;
      objectArray0[4] = (Object) jSSubstitution3;
      objectArray0[5] = (Object) jSSubstitution5;
      objectArray0[6] = (Object) jSSubstitution3;
      objectArray0[7] = (Object) jSSubstitution2;
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm0.add((Object) "PoXn");
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm2.applySubstitutionPF((JSSubstitution) null);
      jSPredicateForm1.print();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      assertEquals("[zV.<, [PoXn]]", jSPredicateForm1.toString());
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm0));
      assertNotSame(jSPredicateForm1, jSPredicateForm2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9893921626120288
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noW");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      jSPredicateForm2.removeAllElements();
      jSPredicateForm0.trimToSize();
      System.setCurrentTimeMillis((-2445L));
      System.setCurrentTimeMillis((-1L));
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      jSPredicateForm2.clone();
      jSPredicateForm0.print();
      long long1 = 0L;
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(46);
      System.setCurrentTimeMillis((-799L));
      System.setCurrentTimeMillis((-28L));
      jSPredicateForm0.insertElementAt((Object) null, 1);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9394818738690849
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Povn");
      StringReader stringReader0 = new StringReader("dY#;Bd7MXgXR2:pXa8:K");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.iterator();
      jSTerm1.lastElement();
      jSSubstitution1.add((Object) "Povn");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.removeElement(jSSubstitution2);
      jSSubstitution2.add((Object) jSSubstitution1);
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution2);
      jSTerm1.clonePF();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution3);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = jSTerm1.matches(jSPredicateForm0, jSSubstitution3);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      System.setCurrentTimeMillis((-1));
      jSSubstitution3.addElements(jSSubstitution4);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      jSSubstitution7.add((Object) jSSubstitution5);
      System.setCurrentTimeMillis((-1));
      // Undeclared exception!
      try { 
        jSTerm1.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9684237946177348
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Povn");
      StringReader stringReader0 = new StringReader("dY#;Bd7MXgXR2:pXa8:K");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.iterator();
      jSTerm1.lastElement();
      jSSubstitution1.add((Object) "Povn");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.removeElement(jSSubstitution2);
      jSSubstitution2.add((Object) jSSubstitution1);
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution2);
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = jSTerm1.matches(jSPredicateForm0, jSSubstitution3);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      System.setCurrentTimeMillis((-1));
      char[] charArray0 = new char[0];
      CharBuffer.wrap(charArray0);
      System.setCurrentTimeMillis((-1));
      stringReader0.skip((-1L));
      JSPredicateForm jSPredicateForm2 = jSTerm1.standarizerPredicateForm();
      jSTerm0.applySubstitutionPF(jSSubstitution7);
      assertFalse(jSSubstitution7.fail());
      
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = jSTerm1.applySubstitutionPF(jSSubstitution9);
      assertNotSame(jSPredicateForm3, jSPredicateForm0);
      assertTrue(jSPredicateForm3.equals((Object)jSPredicateForm1));
      assertTrue(jSPredicateForm3.equals((Object)jSPredicateForm2));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2218396677739918
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noW");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.parallelStream();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      jSPredicateForm2.removeAllElements();
      jSPredicateForm1.ensureCapacity(963);
      jSPredicateForm0.trimToSize();
      jSPredicateForm1.addElement((Object) null);
      jSPredicateForm1.isEmpty();
      jSPredicateForm0.equals(jSPredicateForm2);
      jSPredicateForm2.isEmpty();
      jSTerm0.ensureCapacity(963);
      // Undeclared exception!
      try { 
        jSPredicateForm1.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s<C:hSnRB-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(VllH)f7zkm_*N");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.addElement("not");
      jSTerm0.add((Object) null);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) "not");
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeElement((Object) null);
      jSTerm0.add((Object) "not");
      jSTerm0.addElement((Object) null);
      Function<String, String> function0 = Function.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      Function<Object, String> function4 = function2.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, Object> function5 = Function.identity();
      function2.apply(jSTerm0);
      Function.identity();
      Function<Object, Object> function6 = Function.identity();
      function0.andThen((Function<? super String, ?>) function4);
      Function<String, String> function7 = Function.identity();
      Function<Object, String> function8 = function7.compose((Function<? super Object, ? extends String>) function4);
      Function.identity();
      Function<Object, Integer> function9 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      function9.andThen((Function<? super Integer, ?>) function5);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function10 = unaryOperator1.compose((Function<? super Object, ? extends String>) function8);
      Function.identity();
      Function<String, String> function11 = unaryOperator1.compose((Function<? super String, ? extends String>) function10);
      function11.apply("p");
      function7.andThen((Function<? super String, ? extends String>) function8);
      function9.andThen((Function<? super Integer, ? extends Integer>) function2);
      function4.andThen((Function<? super String, ?>) function0);
      function10.compose((Function<? super String, ?>) function6);
      Function<String, String> function12 = Function.identity();
      unaryOperator1.andThen((Function<? super String, ? extends String>) function12);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function8);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0980526298332742
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      Function<String, String> function0 = Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      Function<Object, Integer> function4 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      function0.apply("not");
      Function<Object, Integer> function6 = function4.compose((Function<? super Object, ?>) function4);
      function5.compose((Function<? super Object, ?>) function5);
      unaryOperator1.andThen((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function7 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function4);
      Function<Integer, String> function8 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function9 = function7.andThen((Function<? super Integer, ? extends String>) function8);
      Function.identity();
      function7.apply(function0);
      Function.identity();
      Function.identity();
      function4.compose((Function<? super String, ?>) function9);
      function1.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function10 = function1.compose((Function<? super Object, ? extends String>) function9);
      Function.identity();
      Function<Object, Object> function11 = function6.andThen((Function<? super Integer, ?>) function10);
      Function<Object, String> function12 = unaryOperator0.compose((Function<? super Object, ? extends String>) function10);
      Function.identity();
      Function<String, String> function13 = Function.identity();
      Function<Object, String> function14 = function12.andThen((Function<? super String, ? extends String>) function13);
      function13.andThen((Function<? super String, ? extends String>) function10);
      function10.andThen((Function<? super String, ? extends String>) function14);
      function7.andThen((Function<? super Integer, ? extends Integer>) function5);
      function12.compose((Function<? super String, ?>) function11);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function9);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5489540843932357
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "(Vw`lHX)f7d\\kmY*N";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(Vw`lHX)f7dkmY*N");
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm1.add((Object) jSPredicateForm0);
      jSPredicateForm1.listIterator();
      jSPredicateForm0.iterator();
      // Undeclared exception!
      try { 
        jSPredicateForm1.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Function<String, String> function0 = Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      Function<Object, Integer> function4 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      function0.apply("not");
      Function<Object, Integer> function6 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function7 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      function6.compose((Function<? super Object, ?>) function7);
      function6.compose((Function<? super Object, ?>) function5);
      unaryOperator1.andThen((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function8 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function4);
      Function<Integer, String> function9 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function10 = function8.andThen((Function<? super Integer, ? extends String>) function9);
      Function.identity();
      function8.apply(function0);
      Function.identity();
      Function.identity();
      function1.andThen((Function<? super String, ?>) function0);
      function4.compose((Function<? super String, ?>) function10);
      function1.andThen((Function<? super String, ? extends String>) function0);
      Function<Object, String> function11 = function1.compose((Function<? super Object, ? extends String>) function10);
      Function.identity();
      function5.andThen((Function<? super Integer, ?>) function7);
      Function<Object, String> function12 = unaryOperator0.compose((Function<? super Object, ? extends String>) function11);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      Function<String, String> function13 = unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      Function<String, String> function14 = function1.andThen((Function<? super String, ? extends String>) function13);
      function0.apply("not");
      function6.andThen((Function<? super Integer, ? extends Integer>) function7);
      function12.compose((Function<? super String, ?>) function5);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function14);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5881650205666735
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(LRw2l]X)f7dkmY*N");
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm0.removeAll(jSPredicateForm1);
      jSPredicateForm1.add((Object) jSPredicateForm0);
      jSPredicateForm1.listIterator();
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        jSPredicateForm1.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "{ot");
      jSTerm0.addElement((Object) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      jSTerm0.sort(comparator0);
      jSTerm0.add((Object) "{ot");
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Integer, String> function4 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function4).apply(anyInt());
      Function<Object, String> function5 = function3.andThen((Function<? super Integer, ? extends String>) function4);
      jSTerm0.firstElement();
      function1.apply("{ot");
      Function.identity();
      Function<Object, Object> function6 = Function.identity();
      Function<String, String> function7 = Function.identity();
      function7.andThen((Function<? super String, ?>) function6);
      Function<Object, String> function8 = function7.compose((Function<? super Object, ? extends String>) function5);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function9 = unaryOperator1.compose((Function<? super Object, ? extends String>) function5);
      Function.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) function8);
      function9.compose((Function<? super String, ?>) function1);
      function8.apply(function7);
      unaryOperator1.andThen((Function<? super String, ? extends String>) function5);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ? extends String>) function8);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function8);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeElement(jSTerm0);
      String string0 = "not";
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeElement(jSTerm0);
      String string0 = "{]!%\"rIV-ke";
      jSTerm0.add((Object) "{]!%\"rIV-ke");
      jSTerm0.add((Object) null);
      StringReader stringReader0 = new StringReader("{]!%\"rIV-ke");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.whitespaceChars(43, (-1631600215));
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeElement(jSTerm0);
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) null);
      Function.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      function1.apply((Object) null);
      Function<Object, Object> function2 = Function.identity();
      Function<Object, Object> function3 = Function.identity();
      Function<String, String> function4 = Function.identity();
      function4.andThen((Function<? super String, ?>) function2);
      function1.compose((Function<? super String, ?>) function3);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.andThen((Function<? super String, ? extends String>) function5);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = function4.compose((Function<? super Object, ? extends String>) function6);
      Function.identity();
      function1.andThen((Function<? super Integer, ?>) function2);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends String>) function7);
      Function.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function8 = unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator1);
      Function.identity();
      Function<Object, String> function9 = function7.andThen((Function<? super String, ? extends String>) function4);
      unaryOperator2.andThen((Function<? super String, ? extends String>) function7);
      Function<Object, String> function10 = function7.andThen((Function<? super String, ? extends String>) unaryOperator2);
      function10.compose((Function<? super Object, ?>) function9);
      function1.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      function10.compose((Function<? super String, ?>) unaryOperator1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ? extends String>) function8);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noW");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.clear();
      jSTerm0.addElement("klhj");
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator1);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.retainAll(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) jSTerm0);
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.addElement(jSTerm1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.add((Object) jSTerm1);
      jSTerm1.add((Object) jSTerm2);
      jSTerm1.add((Object) jSTerm2);
      jSTerm1.setSize(2556);
      jSTerm0.removeElement(jSTerm1);
      jSTerm0.removeElement(jSTerm2);
      jSTerm0.add((Object) "not");
      jSTerm0.remove((Object) "x,Y?\u0010]^;3");
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.addElement("not");
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator1);
      jSTerm0.add((Object) "not");
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      jSTerm0.add((Object) "YC9q4[z)<@Z&4");
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.addElement("not");
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) "not");
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator1);
      char[] charArray0 = new char[1];
      jSTerm0.addElement("YC9q4[z)<@Z&4");
      charArray0[0] = '?';
      jSTerm0.add((Object) "YC9q4[z)<@Z&4");
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.addElement("not");
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator1);
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "{ot");
      jSTerm0.addElement((Object) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      jSTerm0.sort(comparator0);
      jSTerm0.add((Object) "{ot");
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Integer, String> function4 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function4).apply(anyInt());
      Function<Object, String> function5 = function3.andThen((Function<? super Integer, ? extends String>) function4);
      jSTerm0.firstElement();
      function1.apply("{ot");
      Function.identity();
      Function<Object, Object> function6 = Function.identity();
      Function<String, String> function7 = Function.identity();
      function7.andThen((Function<? super String, ?>) function6);
      Function<Object, String> function8 = function7.compose((Function<? super Object, ? extends String>) function5);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function9 = unaryOperator1.compose((Function<? super Object, ? extends String>) function5);
      Function.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) function8);
      function9.compose((Function<? super String, ?>) function1);
      function8.apply(function7);
      unaryOperator1.andThen((Function<? super String, ? extends String>) function5);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ? extends String>) function8);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9992258094539568
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(Vw`lHX)f7dkmY*N");
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm2.equals(jSPredicateForm1);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(Vw`lHX)f7dkmY*N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm3 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.clonePF();
      boolean boolean0 = jSPredicateForm4.equals(jSPredicateForm3);
      jSPredicateForm4.removeAll(jSPredicateForm1);
      JSPredicateForm jSPredicateForm5 = jSTerm1.standarizerPredicateForm();
      boolean boolean1 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean1 == boolean0);
      
      jSPredicateForm5.clonePF();
      jSPredicateForm4.clonePF();
      jSPredicateForm4.clonePF();
      assertNotSame(jSPredicateForm2, jSPredicateForm0);
      
      JSPredicateForm jSPredicateForm6 = jSPredicateForm3.clonePF();
      assertNotSame(jSPredicateForm3, jSPredicateForm6);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeElement(jSTerm0);
      String string0 = "not";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(=Rw2l]P)f7dkmY*N");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6858900691152602
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(VllH)f7zkmY*N");
      StringReader stringReader0 = new StringReader("(VllH)f7zkmY*N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.standarizerSubs();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("] ");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      jSSubstitution0.replaceAll(unaryOperator0);
      System.setCurrentTimeMillis(3739L);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.addElement("not");
      jSTerm0.add((Object) "YC9q4[z)<@Z&4");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyString() , anyString());
      jSTerm0.sort(comparator0);
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6573186405438316
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":%~so9D=/w?WvOT+\u0001");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("(VwGlHX)f7dkmY*N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
      assertEquals(10, jSPredicateForm0.capacity());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Function<String, String> function0 = Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      Function<Object, Integer> function4 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      function0.apply("not");
      function4.compose((Function<? super Object, ?>) function4);
      Function<Object, Integer> function6 = function5.compose((Function<? super Object, ?>) function5);
      unaryOperator1.andThen((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function7 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function4);
      Function<Integer, String> function8 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function9 = function7.andThen((Function<? super Integer, ? extends String>) function8);
      Function.identity();
      function7.apply(function0);
      Function.identity();
      Function.identity();
      function1.andThen((Function<? super String, ?>) function0);
      function4.compose((Function<? super String, ?>) function9);
      function1.andThen((Function<? super String, ? extends String>) function0);
      function1.compose((Function<? super Object, ? extends String>) function9);
      Function.identity();
      jSTerm0.add((Object) function6);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Povn");
      StringReader stringReader0 = new StringReader("dY#;5d7MXgR2:p@a8:K");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.iterator();
      jSSubstitution1.add((Object) "Povn");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.setSize(1156);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "PX(n");
      StringReader stringReader0 = new StringReader("zV.a)T%k*A2C");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars((-3126), 1);
      jSTerm1.makeVariable();
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer2.wordChars((-32805924), (-11));
      streamTokenizer1.wordChars((-4), (-2725));
      streamTokenizer1.quoteChar(2556);
      stringReader0.reset();
      streamTokenizer1.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer10 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9051066634117592
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.retainAll(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) jSTerm0);
      jSTerm1.containsAll(jSTerm0);
      jSTerm1.trimToSize();
      jSTerm1.remove((Object) jSTerm0);
      jSTerm2.addElement(jSTerm1);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm2.add((Object) jSTerm0);
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.isGround();
      jSTerm1.isGround();
      jSTerm2.add((Object) jSTerm1);
      jSTerm1.add((Object) jSTerm0);
      jSTerm2.addAll((Collection) jSTerm0);
      jSTerm2.iterator();
      jSTerm2.retainAll(jSTerm1);
      jSTerm2.removeElement(jSTerm0);
      jSTerm2.removeAll(jSTerm0);
      jSTerm1.standardizerTerm();
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.spliterator();
      jSTerm2.equals(jSTerm0);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.add((Object) "(");
      jSTerm0.makeEval(true);
      jSTerm1.setSize(2556);
      jSTerm0.removeElement(jSTerm1);
      jSTerm0.removeElement(jSTerm2);
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.retainAll(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) ">=");
      jSTerm2.add((Object) jSTerm0);
      jSTerm1.containsAll(jSTerm0);
      jSTerm2.add((Object) jSTerm1);
      jSTerm1.trimToSize();
      jSTerm2.addElement(jSTerm1);
      jSTerm2.add((Object) jSTerm0);
      jSTerm2.add((Object) jSTerm1);
      jSTerm1.isGround();
      jSTerm2.add((Object) jSTerm1);
      jSTerm1.add((Object) jSTerm0);
      jSTerm2.addAll((Collection) jSTerm0);
      jSTerm2.iterator();
      jSTerm2.retainAll(jSTerm1);
      jSTerm1.add((Object) jSTerm2);
      jSTerm2.removeElement(jSTerm0);
      jSTerm2.removeAll(jSTerm0);
      jSTerm2.add((Object) jSTerm1);
      jSTerm2.spliterator();
      jSTerm2.equals(jSTerm0);
      jSTerm2.add((Object) jSTerm1);
      jSTerm0.makeEval(true);
      jSTerm1.setSize(2556);
      jSTerm0.removeElement(jSTerm1);
      jSTerm0.removeElement(jSTerm2);
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "PX(n");
      StringReader stringReader0 = new StringReader("zV.a)T%k*A2C");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ordinaryChars((-3126), 1);
      jSTerm1.makeVariable();
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer2.lowerCaseMode(false);
      streamTokenizer2.wordChars((-32805924), (-32805924));
      streamTokenizer1.wordChars((-4), (-2725));
      streamTokenizer1.quoteChar(2556);
      stringReader0.reset();
      streamTokenizer1.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer10 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("Expecting Term");
      jSPredicateForm0.print();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      unaryOperator0.apply("d");
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function<String, String> function3 = unaryOperator4.compose((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ? extends String>) function1);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function5 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function4);
      unaryOperator4.andThen((Function<? super String, ? extends Integer>) function5);
      Function.identity();
      UnaryOperator.identity();
      function2.compose((Function<? super String, ?>) unaryOperator3);
      UnaryOperator.identity();
      unaryOperator5.apply("} j$T4jsdS~ZGlB");
      UnaryOperator<Integer> unaryOperator6 = UnaryOperator.identity();
      Function<Object, Integer> function6 = unaryOperator6.compose((Function<? super Object, ? extends Integer>) function5);
      unaryOperator6.compose((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function7 = unaryOperator6.compose((Function<? super Object, ? extends Integer>) function6);
      function7.andThen((Function<? super Integer, ? extends Integer>) unaryOperator1);
      function5.andThen((Function<? super Integer, ? extends Integer>) unaryOperator6);
      function1.compose((Function<? super String, ?>) function3);
      Function<String, String> function8 = unaryOperator0.andThen((Function<? super String, ? extends String>) function2);
      assertFalse(function8.equals((Object)function3));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("vw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function4 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Integer, String> function5 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super Integer, ? extends String>) function5);
      function2.compose((Function<? super Integer, ?>) function4);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super String, ?>) function1);
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<String, String> function6 = unaryOperator2.compose((Function<? super String, ? extends String>) unaryOperator1);
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ? extends Integer>) function4);
      unaryOperator2.andThen((Function<? super String, ? extends Integer>) function2);
      Function.identity();
      function6.andThen((Function<? super String, ? extends String>) unaryOperator1);
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.compose((Function<? super Object, ? extends Integer>) function3);
      unaryOperator4.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator1.compose((Function<? super String, ? extends String>) unaryOperator3);
      Function.identity();
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator6.andThen((Function<? super String, ? extends String>) unaryOperator2);
      System.setCurrentTimeMillis((-3263L));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(rlHj/ oz~k\"-*N");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6573186405438316
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(w`H)fdkmYN");
      StringReader stringReader0 = new StringReader("(w`H)fdkmYN");
      int int0 = (-1685);
      // Undeclared exception!
      try { 
        stringReader0.mark((-1685));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      StringReader stringReader0 = new StringReader("(@w`H)fTdkmYN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(202);
      StringReader stringReader1 = new StringReader("(@w`H)fTdkmYN");
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = 'U';
      charArray0[2] = '=';
      charArray0[3] = '`';
      charArray0[4] = '=';
      stringReader0.read(charArray0);
      StringReader stringReader2 = new StringReader("(@w`H)fTdkmYN");
      StringReader stringReader3 = new StringReader("VWRw`l*X");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      stringReader2.read(charBuffer0);
      stringReader1.markSupported();
      streamTokenizer0.ttype = (-1568);
      StringReader stringReader4 = new StringReader("lKrnB:d@VoB[");
      stringReader4.reset();
      StringReader stringReader5 = new StringReader("lKrnB:d@VoB[");
      stringReader3.reset();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, 1353, (-1568));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "(w`)Td\\kmYN";
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("v`D");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.forEach(consumer0);
      assertEquals("[]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Function<String, String> function0 = Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      Function<Object, Integer> function4 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      function0.apply("not");
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function6 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function8 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      function7.compose((Function<? super Object, ?>) function8);
      Function<Object, Integer> function9 = function7.compose((Function<? super Object, ?>) function5);
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function10 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function4);
      Function<Integer, String> function11 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function12 = function10.andThen((Function<? super Integer, ? extends String>) function11);
      Function.identity();
      function10.apply(function0);
      Function.identity();
      Function.identity();
      function1.andThen((Function<? super String, ?>) function0);
      Function<Object, String> function13 = function1.compose((Function<? super Object, ? extends String>) function12);
      Function.identity();
      Function<Object, String> function14 = unaryOperator0.compose((Function<? super Object, ? extends String>) function13);
      Function.identity();
      Function<String, String> function15 = unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      function0.andThen((Function<? super String, ? extends String>) function15);
      function10.andThen((Function<? super Integer, ? extends Integer>) function9);
      function13.compose((Function<? super String, ?>) function0);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function12);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function14);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.2705907945913824
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(VwGlHX)f7dkmY*N");
      assertFalse(jSPredicateForm0.isEmpty());
      
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm1.listIterator();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm1.trimToSize();
      jSPredicateForm2.matches(jSPredicateForm1);
      JSSubstitution jSSubstitution0 = jSPredicateForm0.matches(jSPredicateForm1);
      jSPredicateForm0.equals(jSPredicateForm1);
      boolean boolean0 = jSPredicateForm1.equals(jSPredicateForm0);
      assertTrue(boolean0);
      
      jSPredicateForm0.matches(jSPredicateForm1);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      assertEquals(10, jSPredicateForm0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertNotSame(jSPredicateForm3, jSPredicateForm2);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "PX(n");
      StringReader stringReader0 = new StringReader("zV.a)T%k*A2C");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.assignFailure();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.containsAll(jSSubstitution0);
      jSSubstitution3.add((Object) jSSubstitution2);
      jSSubstitution1.removeElements(jSSubstitution2);
      jSSubstitution3.removeAllElements();
      jSSubstitution3.containsAll(jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.clear();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.add((Object) "UVJllH");
      jSSubstitution4.add((Object) "UVJllH");
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution4.removeElements(jSSubstitution3);
      JSSubstitution jSSubstitution8 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution6);
      assertTrue(jSSubstitution8.fail());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeElement(jSTerm0);
      String string0 = "not";
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.listIterator(0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1324541801896526
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(VllH)f7zkmY*N");
      Integer integer0 = new Integer((-1105));
      jSPredicateForm0.toStr();
      jSPredicateForm0.toStr();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(6, stringBuffer0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      StringReader stringReader0 = new StringReader("(@w`H)fTdkmYN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(202);
      StringReader stringReader1 = new StringReader("(@w`H)fTdkmYN");
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = 'U';
      charArray0[2] = '=';
      charArray0[3] = '`';
      charArray0[4] = 'T';
      stringReader0.read(charArray0);
      StringReader stringReader2 = new StringReader("(@w`H)fTdkmYN");
      StringReader stringReader3 = new StringReader("VWRw`l*X");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      stringReader2.read(charBuffer0);
      stringReader1.markSupported();
      streamTokenizer0.ttype = (-1568);
      StringReader stringReader4 = new StringReader("lKrnB:d@VoB[");
      stringReader4.reset();
      StringReader stringReader5 = new StringReader("lKrnB:d@VoB[");
      stringReader3.reset();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, 1353, (-1568));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) "not");
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2498L));
      int int0 = 36;
      // Undeclared exception!
      try { 
        jSPredicateForm0.insertElementAt("`kq+]}^ql/x`m1k", 36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36 > 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("O5ouw'yjFD9%");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0068967152315558
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(klHC z~kn-*N");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = (-1154140809);
      JSJshopVars.rightPar = (-1154140809);
      StringReader stringReader0 = new StringReader("P0sq8qw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
