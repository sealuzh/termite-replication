/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 01:33:02 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5029045168151294
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hCx+u+h5wG");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "hCx+u+h5wG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSSubstitution0.instance(jSTerm1);
      jSTerm0.iterator();
      jSSubstitution0.add((Object) stringReader0);
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      JSJshopVars.semicolon = (-21);
      UnaryOperator.identity();
      streamTokenizer0.slashStarComments(false);
      JSSubstitution jSSubstitution1 = jSTerm2.matches((JSPredicateForm) jSTerm2);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSPredicateForm1);
      assertTrue(jSSubstitution4.fail());
      
      jSTerm1.matches((JSPredicateForm) jSTerm3, jSSubstitution0);
      jSTerm2.makeEval(false);
      jSPredicateForm1.clone();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm3.removeAll(jSSubstitution2);
      jSSubstitution2.add((Object) jSTerm2);
      JSTerm jSTerm4 = new JSTerm();
      Integer integer0 = new Integer((-3));
      jSTerm4.removeElement(integer0);
      jSSubstitution1.add((Object) jSTerm4);
      assertFalse(jSSubstitution1.fail());
      
      boolean boolean0 = jSTerm3.equals((JSPredicateForm) null);
      System.setCurrentTimeMillis(0L);
      boolean boolean1 = jSTerm1.equals(jSPredicateForm0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSJshopVars.rightPar = (-3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(VlHX+f7dk_mmY*N");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2945451658448959
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SRW#aGs");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "SRW#aGs");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSSubstitution0.instance(jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm2.standarizerPredicateForm();
      Integer integer0 = new Integer((-2));
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(%%%(SRW#aGs ))", stringBuffer0.toString());
      
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      jSPredicateForm2.isEmpty();
      assertEquals("[%%%, [SRW#aGs]]", jSPredicateForm0.toString());
      
      jSTerm2.toStr();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.clonePF();
      assertEquals("[%%%, [SRW#aGs]]", jSPredicateForm1.toString());
      assertNotSame(jSPredicateForm1, jSPredicateForm3);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("not");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader1 = new StringReader("5.0");
      stringReader1.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      SystemInUtil.addInputLine((String) null);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine((String) null);
      jSSubstitution0.add((Object) "not");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSPredicateForm1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      jSPredicateForm0.removeIf(predicate2);
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("not");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      jSTerm0.add((Object) null);
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm2.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm2);
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      jSTerm0.add((Object) "hrt9x+u+h5wG");
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      stringReader0.reset();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(3635L);
      System.setCurrentTimeMillis((-2330L));
      System.setCurrentTimeMillis((-1147L));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1209503926735833
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hCx+u+h5wG");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "hCx+u+h5wG");
      String string0 = "s";
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm0);
      stringReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution0.instance(jSTerm2);
      jSSubstitution0.add((Object) stringReader0);
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      jSPredicateForm0.matches((JSPredicateForm) jSTerm1);
      UnaryOperator.identity();
      JSTerm jSTerm3 = new JSTerm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm1.elementAt(1066);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1066 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1988493129136213
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hCx+u+h5wG");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "hCx+u+h5wG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSSubstitution0.instance(jSTerm1);
      jSTerm0.iterator();
      JSTerm jSTerm3 = new JSTerm();
      JSJshopVars.semicolon = (-21);
      UnaryOperator.identity();
      streamTokenizer0.slashStarComments(false);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.clonePF();
      // Undeclared exception!
      try { 
        jSTerm4.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.7659373365785205
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "(lHX)f~d~\\kYN";
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(lHX)f~d~kYN");
      jSPredicateForm0.addElement("(lHX)f~d~kYN");
      JSJshopVars.leftBrac = (-319352260);
      JSJshopVars.rightPar = (-319352260);
      JSJshopVars.semicolon = (-319352260);
      JSJshopVars.percent = (-319352260);
      JSJshopVars.equalT = (-319352260);
      JSJshopVars.colon = (-319352260);
      JSJshopVars.flagLevel = (-319352260);
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemInUtil.addInputLine("(vwglhx)f7dkmy*n");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(VwGlHX)f7dkmY*N");
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm0.addAll((Collection) jSPredicateForm0);
      jSPredicateForm1.iterator();
      jSPredicateForm1.setSize(598);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      stringReader0.skip(0L);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader0);
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      jSTerm0.add((Object) null);
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      StringReader stringReader1 = new StringReader("hrt9x+u+h5wG");
      stringReader1.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.ready();
      stringReader1.close();
      stringReader1.markSupported();
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      System.setCurrentTimeMillis((-2611L));
      System.setCurrentTimeMillis((-2611L));
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.2755887563513073
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(VwGlHX)f7dkmY*N");
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm0.addAll((Collection) jSPredicateForm0);
      jSPredicateForm1.matches(jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8407487285692812
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(VGlHX)f7dkmY*N");
      char[] charArray0 = new char[3];
      stringReader0.ready();
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm0.trimToSize();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm2.print();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = null;
      try {
        jSPredicateForm3 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSJshopVars.rightPar = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hCx+u+h5wG");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      StringReader stringReader1 = new StringReader("s");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(true);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.removeAll(jSTerm1);
      jSTerm0.isGround();
      jSTerm0.spliterator();
      System.setCurrentTimeMillis((-11L));
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "hrt9x+u+h5wG");
      StringReader stringReader0 = new StringReader("hrt9x+u+h5wG");
      jSTerm0.add((Object) jSTerm0);
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = 'w';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.clone();
      jSSubstitution1.add((Object) jSSubstitution0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      System.setCurrentTimeMillis(4132L);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm2.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm2);
      SystemInUtil.addInputLine("hrt9x+u+h5wG");
      jSTerm1.add((Object) jSTerm0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function4 = function1.andThen((Function<? super Integer, ? extends Integer>) function2);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      function5.compose((Function<? super Object, ?>) function3);
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function6.compose((Function<? super Integer, ?>) unaryOperator0);
      unaryOperator0.compose((Function<? super Object, ?>) function3);
      Function<Object, Object> function7 = unaryOperator0.compose((Function<? super Object, ?>) function5);
      unaryOperator0.compose((Function<? super Object, ?>) function4);
      unaryOperator0.compose((Function<? super String, ?>) function7);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6730116670092565
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("( ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator0.compose((Function<? super Object, ?>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      unaryOperator0.compose((Function<? super Object, ?>) function4);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super String, ?>) function2);
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.677908725644198
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(lHX)f~d~kYN");
      System.setCurrentTimeMillis((-319352260));
      System.setCurrentTimeMillis((-157L));
      System.setCurrentTimeMillis(658L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1L);
      jSPredicateForm0.add((Object) null);
      System.setCurrentTimeMillis(658L);
      System.setCurrentTimeMillis((-575L));
      System.setCurrentTimeMillis(1676L);
      System.setCurrentTimeMillis((-1399L));
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hrt9x+u+h5wG");
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[3] = '3';
      charArray0[6] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer2.resetSyntax();
      stringReader0.reset();
      jSTerm0.add((Object) jSTerm1);
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.ttype = 96;
      streamTokenizer1.slashStarComments(false);
      streamTokenizer2.sval = null;
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
      
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer1.ordinaryChars((-4), 'h');
      streamTokenizer1.eolIsSignificant(false);
      Integer integer0 = new Integer(96);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(3L);
      boolean boolean1 = jSTerm1.removeElement(streamTokenizer2);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.8246593237664703
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm("(VGlHX)f7dkmY*N");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm("(VGlHX)f7dkmY*N");
      jSPredicateForm2.addAll((Collection) jSPredicateForm1);
      // Undeclared exception!
      try { 
        jSPredicateForm2.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function2);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      SystemInUtil.addInputLine("/");
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Object> function8 = unaryOperator1.compose((Function<? super Object, ?>) function6);
      Function<Object, Object> function9 = function6.andThen((Function<? super Integer, ?>) function5);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      Function.identity();
      Function<Object, Integer> function10 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function5);
      function6.compose((Function<? super Integer, ?>) function10);
      unaryOperator0.compose((Function<? super Object, ?>) function8);
      JSTerm jSTerm0 = new JSTerm();
      function7.apply(function9);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super String, ?>) function5);
      jSTerm0.replaceAll(unaryOperator2);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "hrt9x+u+h5wG");
      StringReader stringReader0 = new StringReader("hrt9x+u+h5wG");
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = '3';
      charArray0[2] = ')';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm2);
      streamTokenizer1.resetSyntax();
      jSTerm1.applySubstitutionPF((JSSubstitution) null);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(nABg8DIO`xy`EA");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      streamTokenizer0.ordinaryChar(2009);
      streamTokenizer0.ordinaryChars((-4), (-4));
      stringReader0.markSupported();
      System.setCurrentTimeMillis((-4));
      streamTokenizer0.ordinaryChars(2009, 2009);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(VGlHX)f7dhNY*N");
      stringReader0.reset();
      char[] charArray0 = new char[3];
      stringReader0.skip((-2907L));
      stringReader0.ready();
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip(3);
      StringReader stringReader1 = new StringReader("?UJyH@");
      StringReader stringReader2 = new StringReader("(VGlHX)f7dhNY*N");
      stringReader1.read(charArray0);
      stringReader0.reset();
      StringReader stringReader3 = new StringReader("(VGlHX)f7dhNY*N");
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      stringReader2.read(charBuffer0);
      CharBuffer charBuffer1 = CharBuffer.allocate(3);
      charBuffer1.codePoints();
      stringReader1.read(charBuffer0);
      stringReader1.reset();
      stringReader1.skip(3);
      CharBuffer.allocate(3);
      CharBuffer.allocate(3);
      stringReader0.skip(6L);
      jSTerm0.lastElement();
      jSTerm0.add((Object) "lHX");
      stringReader2.skip(3L);
      CharBuffer charBuffer2 = CharBuffer.wrap(charArray0);
      stringReader1.read(charBuffer2);
      stringReader1.skip(3);
      charBuffer1.mark();
      stringReader0.read(charBuffer2);
      System.setCurrentTimeMillis((-2907L));
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(VGlHX)f7dkmY*N");
      stringReader0.reset();
      char[] charArray0 = new char[3];
      stringReader0.ready();
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip(41);
      stringReader0.ready();
      streamTokenizer0.slashStarComments(true);
      jSTerm0.add((Object) null);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(false);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(VGlHX)f7dkmY*N");
      stringReader0.reset();
      char[] charArray0 = new char[3];
      stringReader0.ready();
      stringReader0.skip((-2907L));
      stringReader0.ready();
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip(3);
      StringReader stringReader1 = new StringReader("b");
      StringReader stringReader2 = new StringReader("(VGlHX)f7dkmY*N");
      stringReader1.read(charArray0);
      stringReader0.reset();
      stringReader1.skip(2);
      StringReader stringReader3 = new StringReader("(VGlHX)f7dkmY*N");
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      charBuffer0.codePoints();
      stringReader1.reset();
      stringReader1.skip((-18L));
      jSTerm0.add((Object) stringReader2);
      CharBuffer.allocate(3);
      CharBuffer.allocate(3);
      stringReader0.skip(6L);
      stringReader3.read(charBuffer0);
      stringReader3.skip(0L);
      charBuffer0.mark();
      stringReader3.read(charBuffer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.7659373365785205
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(lHX)f~d~kYN");
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm("(lHX)f~d~kYN");
      jSPredicateForm0.equals(jSPredicateForm1);
      System.setCurrentTimeMillis((-319352260));
      System.setCurrentTimeMillis((-319352260));
      System.setCurrentTimeMillis(3651);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-319352260));
      System.setCurrentTimeMillis(3347);
      System.setCurrentTimeMillis((-1453L));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.apply(function0);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function0.apply("(-xDmDGGJ?$");
      function0.compose((Function<? super Object, ?>) function3);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      function3.andThen((Function<? super Integer, ?>) function0);
      Function<Integer, Integer> function5 = Function.identity();
      Function<Object, Integer> function6 = function4.andThen((Function<? super Integer, ? extends Integer>) function5);
      Function.identity();
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super Integer, ? extends String>) function9);
      Function<Object, Integer> function10 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      function8.compose((Function<? super Integer, ?>) function5);
      Function<Object, Integer> function11 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function10);
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function8);
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function12 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function.identity();
      Function<Object, Integer> function13 = function12.compose((Function<? super Object, ?>) function6);
      function12.compose((Function<? super Integer, ?>) function11);
      function11.apply(function10);
      function7.compose((Function<? super Object, ?>) function13);
      function7.compose((Function<? super String, ?>) function3);
      Function<Object, Integer> function14 = function7.compose((Function<? super Object, ?>) function4);
      Function.identity();
      Function.identity();
      unaryOperator1.compose((Function<? super Object, ?>) function14);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(-xDmDGGJ?$");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hrt9x+u+h5wG");
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[3] = '3';
      charArray0[6] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.sval = null;
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.ttype = 96;
      streamTokenizer1.slashStarComments(false);
      streamTokenizer2.sval = null;
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
      
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer1.ordinaryChars((-4), 'h');
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.slashSlashComments(false);
      Integer integer0 = new Integer(96);
      streamTokenizer0.eolIsSignificant(true);
      boolean boolean1 = jSTerm0.removeElement(streamTokenizer1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hrt9x+u+h5wG");
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[3] = '2';
      charArray0[6] = '2';
      charArray0[3] = '2';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.sval = null;
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer2.commentChar((-1));
      streamTokenizer1.lowerCaseMode(false);
      jSTerm1.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "hrt9x+u+h5wG");
      streamTokenizer0.whitespaceChars((-1841590110), 1);
      System.setCurrentTimeMillis(9);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      System.setCurrentTimeMillis((-2478L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-94L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-94L));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.25731864054383163
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(lHX)f~dkmY*N");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis((-1702L));
      StringReader stringReader0 = new StringReader("(lHX)f~dkmY*N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
      assertEquals(10, jSPredicateForm0.capacity());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.25731864054383163
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":%~so9D=/w?WvOT+\u0001");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("(VwGlHX)f7dkmY*N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
      assertEquals("[VwGlHX]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "(VGlHX)f7d\\kmY*N";
      StringReader stringReader0 = new StringReader("(VGlHX)f7dkmY*N");
      char[] charArray0 = new char[3];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution1.assignFailure();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hrt9x+u+h5wG");
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[3] = '2';
      charArray0[6] = '2';
      charArray0[3] = '2';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.ensureCapacity((-1319));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.sval = null;
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer2.sval = null;
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
      
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer1.ordinaryChars((-4), 'h');
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.slashSlashComments(false);
      Integer integer0 = new Integer((-4));
      streamTokenizer0.eolIsSignificant(true);
      boolean boolean1 = jSTerm0.removeElement(streamTokenizer1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6885673693022827
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(lHX)f~NdkmY*N");
      assertEquals(1, jSPredicateForm0.size());
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      SystemInUtil.addInputLine("(lHX)f~NdkmY*N");
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      Function<Object, Integer> function4 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function5 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function6 = function5.compose((Function<? super Object, ?>) function1);
      unaryOperator3.compose((Function<? super Object, ?>) function2);
      Function<Integer, Integer> function7 = function6.compose((Function<? super Integer, ?>) unaryOperator4);
      function4.andThen((Function<? super Integer, ?>) unaryOperator1);
      unaryOperator5.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function8 = function4.andThen((Function<? super Integer, ? extends Integer>) function7);
      unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      Function<Object, Integer> function9 = unaryOperator5.andThen((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      Function<Object, Integer> function10 = unaryOperator5.andThen((Function<? super Object, ? extends Integer>) function8);
      UnaryOperator<Object> unaryOperator7 = UnaryOperator.identity();
      Function<Object, Integer> function11 = unaryOperator7.andThen((Function<? super Object, ? extends Integer>) function2);
      unaryOperator2.compose((Function<? super Object, ?>) function11);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator8 = UnaryOperator.identity();
      Function<Object, Integer> function12 = unaryOperator8.andThen((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator<Object> unaryOperator9 = UnaryOperator.identity();
      unaryOperator9.compose((Function<? super Object, ?>) function12);
      unaryOperator6.compose((Function<? super Object, ?>) function12);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      unaryOperator3.compose((Function<? super String, ?>) function10);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.677908725644198
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(lHX)f~NdkmY*N");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      SystemInUtil.addInputLine("(lHX)f~NdkmY*N");
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSPredicateForm0.print();
      assertFalse(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      Function<Object, Object> function2 = unaryOperator0.compose((Function<? super Object, ?>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function3).apply(any());
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function4.apply(function2);
      SystemInUtil.addInputLine((String) null);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function10 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      Function<Object, Integer> function11 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Object> function12 = unaryOperator1.compose((Function<? super Object, ?>) function11);
      function5.compose((Function<? super Integer, ?>) function12);
      function8.andThen((Function<? super Integer, ?>) function1);
      Function<Object, Integer> function13 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function9);
      Function<Object, Integer> function14 = function7.andThen((Function<? super Integer, ? extends Integer>) function13);
      Function.identity();
      Function<Object, Integer> function15 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function16 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function6);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      unaryOperator0.compose((Function<? super Object, ?>) function5);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function16);
      unaryOperator0.compose((Function<? super Object, ?>) function10);
      unaryOperator1.compose((Function<? super Object, ?>) function14);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function15);
      unaryOperator3.compose((Function<? super String, ?>) function16);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hCx+u+h5wG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.semicolon = (-21);
      UnaryOperator.identity();
      streamTokenizer0.slashStarComments(false);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm3.matches((JSPredicateForm) jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(VGlHX)f7dkmY*N");
      stringReader0.reset();
      char[] charArray0 = new char[3];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar(3);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.resetSyntax();
      streamTokenizer2.wordChars(41, (-4));
      streamTokenizer2.commentChar(140);
      jSSubstitution0.add((Object) streamTokenizer2);
      streamTokenizer2.resetSyntax();
      streamTokenizer0.resetSyntax();
      streamTokenizer2.lowerCaseMode(true);
      streamTokenizer1.nextToken();
      stringReader0.read();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.resetSyntax();
      jSSubstitution0.add((Object) streamTokenizer1);
      streamTokenizer0.parseNumbers();
      System.setCurrentTimeMillis((-3));
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.854806284951481
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(lHX)f~dkmY*N");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator2);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator6 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super Object, ?>) unaryOperator5);
      unaryOperator3.compose((Function<? super String, ?>) unaryOperator6);
      StringReader stringReader0 = new StringReader("(lHX)f~dkmY*N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SystemInUtil.addInputLine("{?!G");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Object> function1 = unaryOperator0.compose((Function<? super Object, ?>) function0);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.apply(function0);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      function0.apply("(-xDmDGGJ?$");
      function1.compose((Function<? super Object, ?>) function4);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function4.andThen((Function<? super Integer, ?>) function1);
      Function<Integer, Integer> function6 = Function.identity();
      Function<Object, Integer> function7 = function5.andThen((Function<? super Integer, ? extends Integer>) function6);
      Function.identity();
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      Function<Object, String> function10 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super Integer, ? extends String>) function10);
      Function<Object, Integer> function11 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      function9.compose((Function<? super Integer, ?>) function6);
      Function<Object, Integer> function12 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function11);
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function9);
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function13 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function.identity();
      function13.compose((Function<? super Object, ?>) function7);
      function13.compose((Function<? super Integer, ?>) function12);
      System.setCurrentTimeMillis((-2575L));
      SystemInUtil.addInputLine("{?!G");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2575L));
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.677908725644198
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(lHX)f~dkmY*N");
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Integer, ?>) unaryOperator0);
      SystemInUtil.addInputLine((String) null);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator2);
      unaryOperator1.compose((Function<? super String, ?>) unaryOperator4);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(5, stringBuffer0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.677908725644198
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm("(lHX)f~dkmY*N");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator1);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator3);
      UnaryOperator<Object> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator7 = UnaryOperator.identity();
      unaryOperator5.compose((Function<? super Object, ?>) unaryOperator6);
      unaryOperator4.compose((Function<? super String, ?>) unaryOperator7);
      jSPredicateForm0.toStr();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(5, stringBuffer0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "(VGlHX)f7d\\kmY*N";
      StringReader stringReader0 = new StringReader("(VGlHX)f7dkmY*N");
      char[] charArray0 = new char[3];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.assignFailure();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4293230219306162
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(HfNdkmYN");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SystemInUtil.addInputLine("{?!G");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Object> function1 = unaryOperator0.compose((Function<? super Object, ?>) function0);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(any());
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.apply(function0);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      function0.apply("(-xDmDGGJ?$");
      function1.compose((Function<? super Object, ?>) function4);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function4.andThen((Function<? super Integer, ?>) function1);
      Function<Integer, Integer> function6 = Function.identity();
      Function<Object, Integer> function7 = function5.andThen((Function<? super Integer, ? extends Integer>) function6);
      Function.identity();
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      Function<Object, String> function10 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super Integer, ? extends String>) function10);
      Function<Object, Integer> function11 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      function9.compose((Function<? super Integer, ?>) function6);
      Function<Object, Integer> function12 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function11);
      Function<Object, Object> function13 = Function.identity();
      Function<Object, Object> function14 = unaryOperator0.compose((Function<? super Object, ?>) function9);
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function15 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function.identity();
      function15.compose((Function<? super Object, ?>) function7);
      function15.compose((Function<? super Integer, ?>) function12);
      function12.apply(function11);
      function8.compose((Function<? super String, ?>) function4);
      function8.compose((Function<? super Object, ?>) function5);
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function14);
      unaryOperator1.compose((Function<? super String, ?>) function13);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.apply(function0);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function0.apply("(-xDmDGGJ?$");
      function0.compose((Function<? super Object, ?>) function3);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      function3.andThen((Function<? super Integer, ?>) function0);
      Function<Integer, Integer> function5 = Function.identity();
      Function<Object, Integer> function6 = function4.andThen((Function<? super Integer, ? extends Integer>) function5);
      Function.identity();
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super Integer, ? extends String>) function8);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      function7.compose((Function<? super Integer, ?>) function5);
      Function<Object, Integer> function10 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function7);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function11 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function.identity();
      Function<Object, Integer> function12 = function11.compose((Function<? super Object, ?>) function6);
      function11.compose((Function<? super Integer, ?>) function10);
      function10.apply(function9);
      function3.compose((Function<? super Object, ?>) function12);
      function6.compose((Function<? super String, ?>) function3);
      Function<Object, Integer> function13 = function6.compose((Function<? super Object, ?>) function4);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function10);
      Function.identity();
      unaryOperator1.compose((Function<? super Object, ?>) function13);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(-xDmDGGJ?$");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Object> function1 = unaryOperator0.compose((Function<? super Object, ?>) function0);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(any());
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.apply(function0);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      function1.compose((Function<? super Object, ?>) function4);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function4.andThen((Function<? super Integer, ?>) function1);
      Function<Integer, Integer> function6 = Function.identity();
      Function<Object, Integer> function7 = function5.andThen((Function<? super Integer, ? extends Integer>) function6);
      Function.identity();
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      Function<Object, String> function10 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super Integer, ? extends String>) function10);
      Function<Object, Integer> function11 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      function9.compose((Function<? super Integer, ?>) function6);
      Function<Object, Integer> function12 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function11);
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function9);
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function13 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function.identity();
      function13.compose((Function<? super Object, ?>) function7);
      function13.compose((Function<? super Integer, ?>) function12);
      function12.apply(function11);
      function8.compose((Function<? super String, ?>) function4);
      Function<Object, Integer> function14 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function12);
      Function.identity();
      unaryOperator1.compose((Function<? super Object, ?>) function14);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("h-xDmDGGJ?$");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.apply(function0);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function0.apply("(-xDmDGGJ?$");
      function0.compose((Function<? super Object, ?>) function3);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      function3.andThen((Function<? super Integer, ?>) function0);
      Function<Integer, Integer> function5 = Function.identity();
      Function<Object, Integer> function6 = function4.andThen((Function<? super Integer, ? extends Integer>) function5);
      Function.identity();
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.andThen((Function<? super Integer, ? extends String>) function9);
      Function<Object, Integer> function10 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      function8.compose((Function<? super Integer, ?>) function5);
      Function<Object, Integer> function11 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function10);
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function8);
      Function.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function12 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function.identity();
      Function<Object, Integer> function13 = function12.compose((Function<? super Object, ?>) function6);
      function12.compose((Function<? super Integer, ?>) function11);
      function11.apply(function10);
      function7.compose((Function<? super Object, ?>) function13);
      function7.compose((Function<? super String, ?>) function3);
      function7.compose((Function<? super Object, ?>) function4);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
