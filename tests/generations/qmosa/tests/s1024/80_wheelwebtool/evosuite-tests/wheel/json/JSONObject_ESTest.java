/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 01:52:58 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9298490955258456
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      jSONObject0.putOpt("] is not a Boolean.", hashMap0);
      String string0 = jSONObject0.toString(44);
      assertNotNull(string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9256504262569103
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Stream<String> stream0 = linkedList0.parallelStream();
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(stream0, stringArray0);
      try { 
        jSONObject0.getJSONObject(")d+eIMe[y}>/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")d+eIMe[y}>/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("|>&aMV");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |>&aMV
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      jSONObject0.put("null", (Object) "flu");
      jSONObject0.remove("null");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString(".", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("svRv;m<JB98<", (-1719.67712493745));
      String string0 = jSONObject1.optString("svRv;m<JB98<");
      assertNotNull(string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("RJ=*?HY`*[", (-40.93655231145775));
      long long0 = jSONObject1.optLong("RJ=*?HY`*[");
      assertEquals((-40L), long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      Byte byte0 = new Byte((byte)1);
      hashMap0.put(byte0, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("ismax", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("ismax");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("vnQ*xw>G Q", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("", (-30803738));
      assertEquals((-30803738), int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", (-395.982761083));
      assertEquals((-395.982761083), double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("svRv;m<JB98<", (-1719.67712493745));
      Object object0 = jSONObject1.opt("svRv;m<JB98<");
      assertEquals((-1719.67712493745), object0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("iZ|z\"M,eYByP7zv2", object0);
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5229550675313182
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      boolean boolean0 = jSONObject0.has("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      String string0 = jSONObject1.getString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("svRv;m<JB98<", (-1719.67712493745));
      int int0 = jSONObject0.getInt("svRv;m<JB98<");
      assertEquals((-1719), int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("t >}GZr{{(@Kr", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7253133132760479
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      Byte byte0 = new Byte((byte)1);
      hashMap0.put(byte0, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("dK0 \"qd(DG7+%-hL5", byte0);
      // Undeclared exception!
      jSONObject0.toString(8192, 44);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2757690270397415
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Short short0 = new Short((short)12);
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (int) (byte)33);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      Byte byte0 = new Byte((byte)1);
      hashMap0.put(byte0, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Short short0 = new Short((short) (-269));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(short0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.784617558418788
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(13, 31);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.694159257799834
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("iZ|z\"M,eYByP7zv2", object0);
      String string0 = jSONObject1.toString(1225, 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((int) (byte)88, (int) (byte)1);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = JSONObject.quote("$crKku0$;/ !~|zA");
      assertEquals("\"$crKku0$;/ !~|zA\"", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, jSONArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("] is not a Boolean.", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("flo", 890.904541);
      assertEquals(890.904541, double0, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("re");
      assertNull(object0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.106577333232116
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3068894077018045
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("iZ|z\"M,eYByP7zv2", object0);
      try { 
        jSONObject1.getDouble("iZ|z\"M,eYByP7zv2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iZ|z\\\"M,eYByP7zv2\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.9338099989206319
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.append("", object0);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4080604617178538
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("null", (Object) "null");
      try { 
        jSONObject1.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(909);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      Integer integer0 = new Integer(13);
      jSONObject0.append("$crKku0$;/ !~|zA", integer0);
      jSONObject0.get("$crKku0$;/ !~|zA");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("<+,*fC948OS+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<+,*fC948OS+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("Substring bounds error", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove(",Y)");
      assertNull(object0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3826070734809082
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("zsrtplae e", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(3780);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7206699609551361
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.valueToString(linkedList0, (byte)52, (-2640));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.78489484807327
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-3833), (-3833));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.874624493093895
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iZ|z\"M,eYByP7zv2", 565.936909624606);
      String string0 = jSONObject0.toString(565);
      assertNotNull(string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 616, 616);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      jSONObject0.put(string0, 2450.355263380567);
      double double0 = jSONObject0.optDouble(string0, (-2219.733027271714));
      assertEquals(2450.355263380567, double0, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6787160404662496
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("null", (Object) "null");
      JSONObject jSONObject1 = jSONObject0.put("zsreplac e", (Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject1, 2086, 9);
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6867831479680375
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONArray0.put((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.2013670042689852
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(2, jSONObject0.length());
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("{}", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = new Double(1.0);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5137964583122197
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.optInt("1t.</GH1Q<$;LKd=", 8192);
      assertEquals(1, jSONObject0.length());
      assertEquals(8192, int0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = JSONObject.quote("\f");
      assertEquals("\"\\f\"", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0379083330628327
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("\t", 10);
      assertEquals(10, int0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.3592367006650063
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      Float float0 = new Float((-1236.07F));
      jSONObject0.put(string0, (Object) float0);
      String string1 = jSONObject0.optString(string0, string0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("ismax", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("ismax");
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Float float0 = new Float((float) (byte)1);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optJSONObject("svRv;m<JB98<");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(101);
      jSONObject0.append("toU", integer0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("toU");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optJSONArray("lXZs^K(+\"hcL?{");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iZ|z\"M,eYByP7zv2", 565.936909624606);
      double double0 = jSONObject0.optDouble("iZ|z\"M,eYByP7zv2");
      assertEquals(565.936909624606, double0, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.2157414974970506
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.put("null", (Object) "flu");
      jSONObject0.optBoolean("null");
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.optLong("true");
      jSONObject2.put("", false);
      jSONObject1.optLong((String) null, 0L);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.3730039128771998
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "\\u";
      String[] stringArray0 = JSONObject.getNames((Object) string0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iZ|z\"M,eYByP7zv2", 565.936909624606);
      long long0 = jSONObject0.optLong("iZ|z\"M,eYByP7zv2", (-1L));
      assertEquals(565L, long0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5137964583122197
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      Integer integer0 = Integer.getInteger("$crKku0$;/ !~|zA", 13);
      JSONObject jSONObject1 = jSONObject0.append("$crKku0$;/ !~|zA", integer0);
      try { 
        jSONObject1.getJSONObject("$crKku0$;/ !~|zA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$crKku0$;/ !~|zA\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("iZ|z\"M,eYByP7zv2", object0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("iZ|z\"M,eYByP7zv2");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.5331598289492039
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Short short0 = Short.valueOf((short)32);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("\"java.lang.Object@0000000001\"", 39);
      try { 
        jSONObject0.getJSONArray("\"java.lang.Object@0000000001\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.Object@0000000001\\\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.4118191793225021
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.append("iZ|z\"M,eYByP7zv2", object0);
      try { 
        jSONObject0.getInt("iZ|z\"M,eYByP7zv2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iZ|z\\\"M,eYByP7zv2\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      Float float0 = new Float((-1236.07F));
      jSONObject0.put(string0, (Object) float0);
      double double0 = jSONObject0.getDouble(string0);
      assertEquals((-1236.0699462890625), double0, 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5556148478543697
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      Float float0 = new Float((-1236.07F));
      JSONObject jSONObject1 = jSONObject0.put(string0, (Object) float0);
      boolean boolean0 = jSONObject1.optBoolean(string0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.put("getrotateRight", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("getrotateRight");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.5109032860203158
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.append("iZ|z\"M,eYByP7zv2", object0);
      long long0 = jSONObject0.optLong("iZ|z\"M,eYByP7zv2", (-1L));
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2294.234);
      assertEquals("2294.234", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)123);
      jSONObject0.append("issubstring", "*$V:%EQ{J*[fj");
      JSONObject jSONObject1 = jSONObject0.append("issubstring", short0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.682661330575521
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      String string0 = JSONObject.valueToString(jSONObject0, 1941, (-2640));
      assertNotNull(string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.5247073930301438
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Y,|s]vk", true);
      Double double0 = new Double(659.2);
      try { 
        jSONObject1.append("Y,|s]vk", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Y,|s]vk] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.7201934592198251
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      JSONObject jSONObject2 = jSONObject1.accumulate("", "uU(8<mmw");
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("dK0 \"qd(DG7+%-hL5", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put(",\n", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate(",\n", ",\n");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.String@0000000007\":[],\"java.lang.String@0000000010\":\"java.lang.Class@0000000011\",\"java.lang.String@0000000005\":java.lang.Boolean@0000000006}");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{+t?qv#s]=Pf5|I");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 15 of {+t?qv#s]=Pf5|I
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(".1el^^/7#");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of .1el^^/7#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put(",\n", (Collection) linkedList0);
      boolean boolean0 = jSONObject0.isNull(",\n");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("wD$ZS89ygQdtNecM");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("to");
      assertEquals("", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iZ|z\"M,eYByP7zv2", 565.936909624606);
      int int0 = jSONObject0.getInt("iZ|z\"M,eYByP7zv2");
      assertEquals(565, int0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Float float0 = new Float((-2294.825F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("wa", 0L);
      jSONObject1.getInt("wa");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("getclear");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getclear\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.3986496111888456
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }
}
