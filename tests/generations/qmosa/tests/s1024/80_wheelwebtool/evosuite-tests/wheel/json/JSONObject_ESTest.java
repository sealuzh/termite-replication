/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 12:32:48 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.368641676411295
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = jSONObject0.putOpt("a<r=", hashMap0);
      jSONObject1.append("null", hashMap0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = new JSONObject(double0);
      JSONObject jSONObject3 = jSONObject2.put("] not found.", (-1.0));
      Short short0 = new Short((short)97);
      Float float0 = new Float((float) (short) (-1762));
      Integer integer0 = new Integer(2577);
      Byte byte0 = new Byte((byte)45);
      jSONObject3.accumulate("a<r=", byte0);
      jSONObject3.getDouble("a<r=");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.7250829733914482
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONTokener jSONTokener1 = new JSONTokener("");
      JSONTokener jSONTokener2 = new JSONTokener("uUI:cKxB70Y+<yk");
      JSONTokener jSONTokener3 = new JSONTokener("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(125);
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(linkedList0, (-2969), 125);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2405571113237768
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Byte byte0 = new Byte((byte)62);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.toUnsignedLong((byte)62);
      JSONObject jSONObject1 = jSONObject0.put("#x9R~d`9^6n((fEn", 0.0);
      jSONObject0.getDouble("#x9R~d`9^6n((fEn");
      JSONObject jSONObject2 = jSONObject0.put("#x9R~d`9^6n((fEn", (Collection) null);
      int int0 = 4357;
      JSONObject jSONObject3 = jSONObject2.put("#x9R~d`9^6n((fEn", 4357);
      jSONObject2.accumulate("X\"7E_py,", (Object) null);
      jSONObject3.remove("#x9R~d`9^6n((fEn");
      JSONObject.valueToString(jSONObject1);
      JSONObject jSONObject4 = jSONObject0.put("#x9R~d`9^6n((fEn", 4357);
      jSONObject4.optLong("Null key.");
      jSONObject4.optInt("wheel.json.JSONObject@0000000001", (int) (byte)62);
      jSONObject1.optLong("#x9R~d`9^6n((fEn");
      JSONObject jSONObject5 = jSONObject3.put(",", (int) (byte)62);
      jSONObject5.toString(29);
      jSONObject0.optJSONArray("Vc");
      Byte.toUnsignedInt((byte)62);
      Byte.toUnsignedInt((byte)62);
      jSONObject0.accumulate("Unclosed comment", "Vc");
      try { 
        jSONObject1.append("#x9R~d`9^6n((fEn", "wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[#x9R~d`9^6n((fEn] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.085314207276458
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-244.9543572384241));
      assertEquals("-244.9543572384241", string0);
      
      Integer.getInteger("-244.9543572384241", (-2504));
      Integer.divideUnsigned(18, 18);
      Integer.sum(898, 18);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2504));
      Double double0 = new Double(1456.681604);
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("-244.9543572384241");
      String string1 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5756384310068765
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONException", hashMap1);
      Long long0 = Long.valueOf(0L);
      JSONObject jSONObject2 = jSONObject1.putOpt("wheel.json.JSONException", long0);
      jSONObject0.put("false", (Map) hashMap0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject2, (-2056), 8192);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.sum(2097.4F, 2097.4F);
      Float.isFinite(0.0F);
      Float.max(0.0F, 0.0F);
      String string0 = "{0/H,; Y9Q";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{0/H,; Y9Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {0/H,; Y9Q
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3080561808079394
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.append("JSONObject[", hashMap1);
      JSONTokener jSONTokener0 = new JSONTokener("uvh");
      JSONObject jSONObject2 = new JSONObject();
      JSONArray jSONArray0 = jSONObject1.optJSONArray("JSONObject[");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.669133932113468
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "wheel.json.JSONArray";
      JSONObject.valueToString("wheel.json.JSONArray");
      JSONObject jSONObject0 = new JSONObject((Object) "wheel.json.JSONArray");
      String string1 = jSONObject0.toString(101, 101);
      JSONArray jSONArray0 = null;
      jSONObject0.toJSONArray((JSONArray) null);
      try { 
        jSONObject0.getJSONArray(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n                                                                                                                                                                                                          \\\"java.lang.String@0000000005\\\": [\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000051,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000052,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000053,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000054,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000055,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000056,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000057,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000058,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000059,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000060,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000061,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000062,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000063,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000064,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000065,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000066,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000067,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000068,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000069,\\n                                                                                                                                                                                                                                                                                                               java.lang.Byte@0000000070\\n                                                                                                                                                                                                          ],\\n                                                                                                                                                                                                          \\\"java.lang.String@0000000048\\\": \\\"java.lang.Class@0000000049\\\",\\n                                                                                                                                                                                                          \\\"java.lang.String@0000000003\\\": java.lang.Boolean@0000000004\\n                                                                                                     }\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1036970679829685
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer.getInteger("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer((-953));
      Integer integer5 = new Integer((-1175));
      Integer integer6 = new Integer(8);
      Integer integer7 = new Integer(2326);
      String[] stringArray0 = new String[23];
      stringArray0[0] = "Null pointer";
      stringArray0[1] = "Null pointer";
      stringArray0[2] = "Null pointer";
      stringArray0[3] = "Null pointer";
      stringArray0[4] = "o!@";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer integer8 = new Integer(2326);
      Float float1 = new Float(Double.NaN);
      try { 
        jSONObject1.putOpt("o!@", float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6239743092138545
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = "JSONObject[";
      JSONObject jSONObject1 = jSONObject0.append("JSONObject[", hashMap1);
      String string1 = "re";
      jSONObject0.putOpt("re", hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "re");
      stringWriter1.flush();
      stringWriter0.append((CharSequence) "JSONObject[");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "re");
      jSONObject1.write(stringWriter2);
      jSONObject1.getString("JSONObject[");
      Boolean boolean0 = new Boolean("wheel.json.JSONArray@0000000002");
      JSONTokener jSONTokener0 = new JSONTokener("getgetClass");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getgetClass
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9269162043565977
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = new JSONObject(boolean0);
      JSONObject jSONObject2 = jSONObject0.put("3", (-679));
      String string0 = ">7J-q20c%4";
      jSONObject0.putOpt("I[f.)s[pYIF}4GP", "3");
      Object object0 = new Object();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Object object1 = JSONObject.NULL;
      hashMap0.put(jSONObject0, object1);
      JSONObject.valueToString(jSONObject2, 87, (-679));
      StringWriter stringWriter0 = new StringWriter(1498);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append((CharSequence) ">7J-q20c%4");
      jSONObject0.write(stringWriter0);
      String string1 = null;
      jSONObject2.getLong("3");
      try { 
        jSONObject2.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.188762372749431
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = new JSONObject(boolean0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject2 = jSONObject0.put("3", (-679));
      jSONObject0.putOpt("I[f.)s[pYIF}4GP", "3");
      Object object0 = new Object();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      Object object1 = JSONObject.NULL;
      hashMap1.put(jSONObject0, object1);
      Double double0 = new Double((-1.0));
      Object object2 = new Object();
      Boolean boolean1 = new Boolean("getsum");
      JSONObject.quote("NtDJ04VK?V");
      String string0 = null;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject2.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.537694519293973
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = new JSONObject(boolean0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      String string0 = "3";
      jSONObject0.put("3", (-679));
      JSONObject jSONObject2 = jSONObject0.putOpt("I[f.)s[pYIF}4GP", "3");
      Object object0 = new Object();
      jSONObject0.optInt("3");
      jSONObject2.optString(">7J-q20c%4");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-679));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5864403716125572
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.append("JSONObject[", hashMap1);
      jSONObject0.putOpt("re", hashMap0);
      jSONObject1.put("JSONObject[", (Map) hashMap0);
      JSONObject.valueToString(jSONObject1, (-2056), 55);
      try { 
        jSONObject1.getInt("re");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"re\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.628113168672061
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(".", (-356.52189));
      byte byte0 = (byte)18;
      Byte byte1 = new Byte((byte)18);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".";
      stringArray0[1] = "=xpcted a ':' 6fter a key";
      stringArray0[2] = "=xpcted a ':' 6fter a key";
      stringArray0[3] = ".";
      stringArray0[4] = "=xpcted a ':' 6fter a key";
      stringArray0[5] = "=xpcted a ':' 6fter a key";
      stringArray0[6] = ".";
      stringArray0[7] = "=xpcted a ':' 6fter a key";
      JSONObject jSONObject2 = new JSONObject(byte1, stringArray0);
      JSONObject jSONObject3 = jSONObject2.accumulate(".", jSONObject1);
      jSONObject2.optLong("isnotifyAll");
      JSONObject jSONObject4 = jSONObject3.getJSONObject(".");
      jSONObject4.optLong((String) null, (-1L));
      try { 
        jSONObject0.append(".", jSONObject2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6758770912408574
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1087));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(22);
      linkedList0.stream();
      linkedList0.add(integer0);
      JSONObject jSONObject1 = jSONObject0.put("KU@*Oe", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.putOpt("KU@*Oe", "KU@*Oe");
      JSONObject.valueToString(linkedList0);
      Integer integer1 = new Integer(22);
      linkedList0.add(integer1);
      jSONObject2.toString();
      jSONObject1.put("{}", true);
      jSONObject0.append("-D?i#YU", (Object) null);
      Integer integer2 = new Integer((-1087));
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("{\"java.lang.String@0000000003\":\"java.lang.String@0000000003\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {\"java.lang.String@0000000003\":\"java.lang.String@0000000003\"}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.862473324485853
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.min(3155.903F, 3155.903F);
      Float.max(3155.903F, 3155.903F);
      JSONObject jSONObject1 = jSONObject0.put("'UVm_v0@U", false);
      jSONObject0.toString(68);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject2 = jSONObject1.put("{\n                                                                    \"java.lang.String@0000000008\": java.lang.Boolean@0000000009,\n                                                                    \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                    \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                    \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", (Collection) linkedList0);
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      jSONObject2.put("'UVm_v0@U", (Map) hashMap0);
      Float.sum(3155.903F, 0.0F);
      JSONObject.valueToString("{\n                                                                    \"java.lang.String@0000000008\": java.lang.Boolean@0000000009,\n                                                                    \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                    \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                    \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}", 68, 68);
      jSONObject1.putOpt("to", "'UVm_v0@U");
      Byte byte0 = new Byte((byte) (-81));
      JSONObject jSONObject3 = jSONObject0.accumulate("'UVm_v0@U", byte0);
      Byte.compare((byte)55, (byte)9);
      Byte.toUnsignedInt((byte)32);
      Byte.compare((byte)114, (byte)122);
      JSONObject jSONObject4 = jSONObject3.put("RI3[lr-[", (long) 68);
      jSONObject2.length();
      jSONObject4.getJSONArray("'UVm_v0@U");
      jSONObject1.put("RI3[lr-[", (Object) "to");
      assertEquals(7, jSONObject1.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6679735851716053
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("0DgY2A_=67cE1I?{.$", (-2364.12587978));
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      jSONObject1.optInt("");
      Boolean.logicalOr(true, true);
      Float float0 = new Float((float) 0);
      Float.max(5160.88F, 14.309004F);
      jSONObject0.optInt("!/");
      jSONObject0.optString("");
      StringWriter stringWriter0 = new StringWriter(4326);
      stringWriter0.append((CharSequence) "!/", 2, 2);
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = 'Y';
      charArray0[2] = 'a';
      charArray0[3] = 'I';
      jSONObject1.putOpt("java.lang.String@0000000002", jSONObject0);
      charArray0[4] = '/';
      charArray0[5] = 'P';
      charArray0[6] = '=';
      stringWriter0.append((CharSequence) "");
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.515579857156531
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.isNull("#H");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      hashMap0.put(jSONObject0, (Object) null);
      JSONObject jSONObject1 = jSONObject0.put("X,frB,c4TIi@9?K", (Map) hashMap1);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.optInt("Y~Umc<", 1219);
      jSONObject0.optDouble("no", 3071.0);
      Object object1 = new Object();
      String string0 = ",\n";
      Boolean boolean0 = new Boolean("no");
      Boolean.logicalOr(true, true);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      try { 
        jSONObject2.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9494461185215566
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString(0);
      JSONObject jSONObject1 = jSONObject0.put("{}", 2450.355263380567);
      String string0 = "J*q:h:Wh=1.<>";
      jSONObject1.optBoolean("J*q:h:Wh=1.<>", true);
      jSONObject0.put("vnQ*x>>G Q", (Object) "vnQ*x>>G Q");
      jSONObject0.optLong("vnQ*x>>G Q");
      jSONObject0.get("vnQ*x>>G Q");
      Short short0 = new Short((short)4);
      JSONObject.valueToString((Object) null);
      jSONObject0.optDouble("{}");
      jSONObject0.optInt("{}");
      Object object0 = new Object();
      JSONObject.quote("vnQ*x>>G Q");
      try { 
        jSONObject1.getLong("J*q:h:Wh=1.<>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"J*q:h:Wh=1.<>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6045835132171082
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Short short0 = new Short((short) (-2762));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.names();
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((float) (short) (-2762));
      StringWriter stringWriter0 = new StringWriter(34);
      JSONObject.numberToString(float0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "java.lang.Float@0000000004");
      stringWriter1.append('N');
      Byte byte0 = new Byte((byte) (-74));
      Byte byte1 = new Byte((byte)86);
      jSONObject0.optInt("vv)+U9Hm|}(+74Ra", (int) (byte) (-128));
      jSONObject0.optLong("vv)+U9Hm|}(+74Ra");
      String string0 = "/&!</^*^";
      try { 
        jSONObject0.getDouble("/&!</^*^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/&!<\\/^*^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.00206123135129
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("wai");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = jSONObject0.put("wai", (Object) "wai");
      jSONObject1.optLong("wai");
      jSONObject0.optDouble("wai", (double) 0L);
      jSONObject1.optBoolean("wai");
      jSONObject0.optInt("X,frB9,c4TIi@9?K");
      Boolean boolean0 = new Boolean("wai");
      jSONObject0.optLong("wai");
      jSONObject0.optString("wai", "X,frB9,c4TIi@9?K");
      Integer integer0 = new Integer(975);
      Float.min(975, 1481.7444F);
      Long long0 = new Long(0L);
      Boolean.valueOf(true);
      Double double0 = new Double((-1619.0));
      Integer integer1 = new Integer(116);
      try { 
        jSONObject1.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.518016584757605
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      boolean boolean0 = jSONObject0.isNull("is");
      assertTrue(boolean0);
      
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      int int0 = jSONObject0.optInt("is");
      assertEquals(0, int0);
      
      Boolean boolean1 = new Boolean("is");
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
      
      jSONObject0.optString((String) null, "");
      Integer integer0 = new Integer((-4220));
      Float.min(0, (-548.42883F));
      Long long1 = new Long((-4220));
      Boolean.valueOf(false);
      Double double0 = new Double(0.0);
      int int1 = jSONObject0.optInt("", 32);
      assertEquals(32, int1);
      
      String string0 = jSONObject0.optString((String) null, "i");
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4781445427319557
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wai";
      jSONObject0.putOpt("getgetClass", "getgetClass");
      jSONObject0.isNull("getgetClass");
      Object object0 = new Object();
      JSONObject.doubleToString(Double.NaN);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "getgetClass", 52, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6992563914312417
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("3", (-679));
      jSONObject1.names();
      Object object1 = new Object();
      JSONObject.valueToString(object1, 87, 93);
      JSONObject jSONObject2 = jSONObject0.accumulate("2.8051049093559470", "\"java.lang.Object@0000000007\"");
      Boolean.logicalOr(true, false);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject1.get("3");
      jSONObject2.optDouble("3");
      Object object2 = JSONObject.NULL;
      jSONObject0.optString("2.8051049093559470", ">7J-q20c%4");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6072548993370606
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("#H");
      Object object1 = new Object();
      String string0 = "getfloatToRawIntBits";
      JSONObject jSONObject1 = jSONObject0.put("getfloatToRawIntBits", true);
      Long long0 = new Long((-3756L));
      JSONObject jSONObject2 = jSONObject1.putOpt("toH", long0);
      Integer integer0 = new Integer(93);
      Integer.getInteger((String) null, 4322);
      JSONObject jSONObject3 = jSONObject2.putOpt("#H", integer0);
      jSONObject3.optBoolean("getfloatToRawIntBits");
      jSONObject2.optLong(">/Xu>!IWv]", (long) 93);
      try { 
        jSONObject1.append("toH", object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[toH] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3850844856180293
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expcted a ':' 6fter a key";
      jSONObject0.put("Expcted a ':' 6fter a key", (-356.52189));
      JSONObject jSONObject1 = jSONObject0.accumulate("getnotify", "Expcted a ':' 6fter a key");
      jSONObject1.optLong("Expcted a ':' 6fter a key");
      try { 
        jSONObject1.getJSONArray("eq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"eq\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer integer0 = new Integer(561);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6490933182031533
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      HashMap<JSONObject, Object> hashMap2 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = jSONObject0.putOpt("boo", hashMap2);
      JSONObject jSONObject2 = jSONObject1.append("va", jSONObject0);
      jSONObject2.put("boo", (-261));
      jSONObject2.put("iswait", 1.0);
      Short short0 = new Short((short) (-1762));
      Float float0 = new Float(1.0F);
      Integer integer0 = new Integer(176);
      jSONObject1.accumulate("Unclosed comment", "iswait");
      double double0 = jSONObject2.getDouble("boo");
      assertEquals(4, jSONObject2.length());
      assertEquals((-261.0), double0, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2983368449258386
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "a<r=";
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = jSONObject0.putOpt("a<r=", hashMap0);
      jSONObject1.append("null", hashMap0);
      String string1 = null;
      try { 
        jSONObject0.put((String) null, (-978));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.137469741768947
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.isNull("#H");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      Boolean boolean0 = new Boolean("[]");
      Boolean.logicalAnd(true, true);
      hashMap1.remove((Object) boolean0, (Object) null);
      hashMap1.put(jSONObject0, "Null key.");
      JSONObject jSONObject1 = jSONObject0.putOpt("#H", (Object) null);
      JSONObject jSONObject2 = jSONObject1.put(">i*6]R6FlR]p/Z", (Map) hashMap1);
      Boolean boolean1 = new Boolean(false);
      JSONObject jSONObject3 = jSONObject0.put("iscompare", (Object) boolean1);
      JSONObject jSONObject4 = new JSONObject();
      jSONObject0.optDouble("to", 3071.218016596822);
      jSONObject0.put(",:]}/\"[{;=#", 0L);
      jSONObject3.optInt("to", 1);
      jSONObject3.optLong("9y]2&z)p", 1L);
      jSONObject2.optJSONArray("Null key.");
      Byte byte0 = new Byte((byte)125);
      JSONObject.valueToString(byte0);
      jSONObject2.toString(1);
      assertEquals(4, jSONObject2.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8542306045431607
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "#H";
      jSONObject0.isNull("#H");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Object object1 = new Object();
      JSONObject.valueToString(hashMap0);
      JSONObject.getNames((Object) null);
      jSONObject0.accumulate("2.8051049093559470", (Object) null);
      Boolean.logicalOr(true, true);
      String string1 = "wheel.json.JSONArray";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONArray
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0577910787665137
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer.getInteger("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer((-953));
      Integer integer5 = new Integer((-1175));
      Integer integer6 = new Integer(8);
      Integer integer7 = new Integer(2326);
      String[] stringArray0 = new String[23];
      stringArray0[0] = "Null pointer";
      stringArray0[1] = "#h";
      stringArray0[2] = "#h";
      stringArray0[3] = "Null pointer";
      stringArray0[4] = "o!@";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer integer8 = new Integer(2326);
      Double double0 = new Double((-1282.458622042));
      jSONObject1.putOpt((String) null, double0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.271707630755543
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optBoolean("Expected '");
      JSONObject jSONObject1 = jSONObject0.put("Expected '", 1.0);
      jSONObject0.optDouble(".");
      StringWriter stringWriter0 = new StringWriter(12);
      jSONObject1.write(stringWriter0);
      JSONObject jSONObject2 = jSONObject0.put("\r", (-1817.3452460086714));
      jSONObject2.optBoolean("q\"AJT5", true);
      jSONObject1.remove("java.lang.Long@0000000010");
      jSONObject0.remove(".");
      jSONObject1.names();
      jSONObject0.keys();
      stringWriter0.write("nOCFN12");
      jSONObject0.optInt(".");
      jSONObject1.write(stringWriter0);
      Long long0 = new Long(0);
      Long.toUnsignedString(0L);
      JSONObject jSONObject3 = jSONObject1.putOpt("getgetClass", long0);
      jSONObject3.getLong("getgetClass");
      jSONObject3.toString(12);
      assertEquals(4, jSONObject1.length());
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.452246979423442
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getnotify", 20);
      jSONObject1.getInt("getnotify");
      jSONObject1.put("getnotify", (-1188));
      short short0 = (short)1496;
      Short short1 = new Short((short)1496);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5715050337433283
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("wai");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      jSONObject0.optBoolean("wai");
      jSONObject0.optInt("X,frB9,c4TIi@9?K");
      Boolean boolean0 = new Boolean("wai");
      jSONObject0.optLong("wai");
      jSONObject0.optString("wai", "X,frB9,c4TIi@9?K");
      Integer integer0 = new Integer(975);
      Float.min(975, 1481.7444F);
      Long long0 = new Long(0L);
      Boolean.valueOf(false);
      jSONObject0.optInt(",M^e_-[I~hHcjZ", 0);
      Integer integer1 = new Integer(116);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("X,frB9,c4TIi@9?K");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7474203482157247
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.isNull("#H");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap1.put(jSONObject0, "Nj7ll key.");
      JSONObject jSONObject1 = jSONObject0.put("Nj7ll key.", (Map) hashMap0);
      jSONObject1.putOpt("#H", (Object) null);
      Boolean boolean1 = new Boolean(true);
      JSONObject jSONObject2 = jSONObject1.put("Nj7ll key.", (Object) boolean1);
      jSONObject2.put("bA93t3h1", (Map) hashMap0);
      jSONObject1.getBoolean("Nj7ll key.");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Float float0 = new Float(1.0F);
      int int0 = 12;
      jSONObject1.put("#H", 12);
      linkedList0.add(float0);
      jSONArray0.put(0.0);
      String string0 = "y},*R<%";
      jSONObject0.opt("y},*R<%");
      String string1 = ">:zV1!qdX|/kXP<J,F'";
      Boolean boolean2 = new Boolean(">:zV1!qdX|/kXP<J,F'");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("#H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of #H
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.626137937556808
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('');
      jSONObject0.write(stringWriter1);
      assertEquals("{}", stringWriter1.toString());
      
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'";
      stringArray0[1] = "]#u'W`";
      jSONObject1.toString();
      stringArray0[2] = "%U&[*/7|/<`ur";
      stringArray0[3] = "%U&[*/7|/<`ur";
      stringArray0[4] = "Expected a ',' or '}'";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.492275947324974
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "#H";
      jSONObject0.isNull("#H");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = new JSONObject();
      Integer integer0 = new Integer(101);
      Float.min((-2381.038F), 1.0F);
      jSONObject0.optInt("{}");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.29019110022987
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "is");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("2X3*KG4V5YgaPt1< ", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.805406082605472
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.append("JSONObject[", hashMap1);
      hashMap0.putAll(hashMap1);
      jSONObject0.putOpt("re", hashMap0);
      jSONObject1.put("JSONObject[", (Map) hashMap0);
      JSONObject.valueToString(jSONObject1, (-2056), 55);
      StringWriter stringWriter0 = new StringWriter(55);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "re");
      StringWriter stringWriter2 = stringWriter1.append('&');
      stringWriter2.append((CharSequence) "JSONObject[");
      jSONObject0.write(stringWriter2);
      try { 
        jSONObject1.getJSONObject("fl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fl\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9539979691508385
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Short short0 = new Short((short) (-2737));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.names();
      JSONArray jSONArray0 = new JSONArray();
      Boolean.getBoolean(",:]}/\"[{;=#");
      String string0 = "{_+nACpGw1P&}U";
      JSONTokener jSONTokener0 = new JSONTokener("{_+nACpGw1P&}U");
      Double double0 = new Double(10);
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      jSONObject1.toString((-12473307));
      Float float0 = new Float(814.0F);
      jSONObject1.toString((-12473307), 32);
      Double.isFinite(10);
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000006\": java.lang.Integer@0000000007,\n\"java.lang.String@0000000008\": java.lang.Integer@0000000009,\n\"java.lang.String@0000000012\": java.lang.Double@0000000013,\n\"java.lang.String@0000000014\": java.lang.Double@0000000015,\n\"java.lang.String@0000000010\": \"java.lang.Class@0000000011\"\n}");
      jSONObject2.put("{\n\"java.lang.String@0000000006\": java.lang.Integer@0000000007,\n\"java.lang.String@0000000008\": java.lang.Integer@0000000009,\n\"java.lang.String@0000000012\": java.lang.Double@0000000013,\n\"java.lang.String@0000000014\": java.lang.Double@0000000015,\n\"java.lang.String@0000000010\": \"java.lang.Class@0000000011\"\n}", (Object) float0);
      Short.toUnsignedInt((short)711);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList0);
      jSONObject2.has("{\n\"java.lang.String@0000000006\": java.lang.Integer@0000000007,\n\"java.lang.String@0000000008\": java.lang.Integer@0000000009,\n\"java.lang.String@0000000012\": java.lang.Double@0000000013,\n\"java.lang.String@0000000014\": java.lang.Double@0000000015,\n\"java.lang.String@0000000010\": \"java.lang.Class@0000000011\"\n}");
      jSONObject2.put("{_+nACpGw1P&}U", (long) (short) (-2737));
      try { 
        jSONObject0.getJSONObject("{_+nACpGw1P&}U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{_+nACpGw1P&}U\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Float float0 = new Float((-1340.6606F));
      StringWriter stringWriter0 = new StringWriter();
      Integer.getInteger("isparseBoolean", (-2920));
      Integer.divideUnsigned((-16), (-2920));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-16));
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      Integer integer2 = new Integer((-4707));
      Integer integer3 = new Integer(233);
      Integer integer4 = new Integer((-986));
      linkedList0.addFirst((Integer) null);
      Long long0 = new Long((-16));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "000";
      stringArray0[1] = "isparseBoolean";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Float float0 = new Float((double) 60);
      Integer integer0 = Integer.getInteger("Null pointer", 23);
      Integer integer1 = new Integer(23);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer2 = new Integer(23);
      Integer integer3 = new Integer(5268);
      Integer.compare(43, (int) integer1);
      linkedList0.add(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      Integer integer4 = new Integer(125);
      Integer integer5 = new Integer(50);
      Integer integer6 = new Integer(22);
      linkedList0.addFirst(integer6);
      Integer.divideUnsigned(22, (int) integer3);
      Double double0 = new Double(91);
      String[] stringArray0 = new String[1];
      Double.max(0.0, 5584.11962400365);
      Double.sum((double) integer3, (double) integer1);
      stringArray0[0] = "Null pointer";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONTokener jSONTokener0 = new JSONTokener("G+Mg1n+wcU~");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.702783948524193
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("getgetClass", "getgetClass");
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      jSONObject1.put("wai", (Map) hashMap0);
      jSONObject0.isNull("getgetClass");
      Long long0 = new Long((-4966L));
      Float float0 = new Float((double) (-4966L));
      String string0 = ">/Xu>!IWv]";
      Short short0 = new Short((short) (-1209));
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.append("wai", jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[wai] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.3717562669406975
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte) (-36));
      JSONObject jSONObject1 = new JSONObject(byte0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a Boolean.";
      jSONObject1.optDouble("ishashCode", Double.NaN);
      String string0 = "wheel.json.JSONObject$1";
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONObject$1", 1L);
      jSONObject2.optDouble("MuiMDwG]tl=", Double.NaN);
      Object object0 = new Object();
      jSONObject1.opt("C%");
      jSONObject0.optBoolean("MuiMDwG]tl=");
      jSONObject0.opt((String) null);
      Boolean boolean0 = new Boolean((String) null);
      JSONTokener jSONTokener0 = new JSONTokener("dRQMWqq!+/m)va`Zk");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of dRQMWqq!+/m)va`Zk
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.0656670207077865
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Short short0 = new Short((short) (-2737));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONArray jSONArray0 = new JSONArray();
      Boolean.getBoolean((String) null);
      JSONTokener jSONTokener0 = new JSONTokener("{_+nACpGw1P&}U");
      Double double0 = new Double(10);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.put("JSON does not allow non-finite numbers.", 497.912752274874);
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{_+nACpGw1P&}U");
      stringWriter1.append('M');
      StringWriter stringWriter2 = stringWriter1.append('');
      stringWriter2.close();
      Integer integer0 = new Integer((short) (-2737));
      Integer.compareUnsigned(10, (-479));
      Float.min(0.0F, 991.0F);
      Long long0 = new Long(0L);
      int int0 = Integer.sum(62, (-619));
      assertEquals((-557), int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.864758653504378
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Short short0 = new Short((short) (-2737));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = ",:]}/\\\"[{;=#";
      Boolean.getBoolean(",:]}/\"[{;=#");
      JSONTokener jSONTokener0 = new JSONTokener("{_+nACpGw1P&}U");
      Double double0 = new Double(10);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.toString((-12473307));
      Float float0 = new Float(814.0F);
      jSONObject0.toString((-12473307), (-12473307));
      Double.isFinite(10);
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000004\": java.lang.Integer@0000000005,\n\"java.lang.String@0000000006\": java.lang.Integer@0000000007,\n\"java.lang.String@0000000010\": java.lang.Double@0000000011,\n\"java.lang.String@0000000012\": java.lang.Double@0000000013,\n\"java.lang.String@0000000008\": \"java.lang.Class@0000000009\"\n}");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optJSONObject(")#pi]");
      jSONObject0.put("wheel.json.JSONObject", (int) (short) (-2737));
      try { 
        jSONObject2.get("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.639681284674912
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      Byte byte0 = new Byte((byte) (-105));
      Float float0 = new Float((-1340.7533F));
      StringWriter stringWriter0 = new StringWriter(919);
      stringWriter0.append('N');
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0", (Object) stringWriter0);
      jSONObject0.optDouble("to", 3070.9633661520556);
      jSONObject0.toString(1);
      Float float1 = new Float((float) (byte) (-105));
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.String@0000000002\": \"java.io.StringWriter@0000000003\"}", (Object) byte0);
      Short.toUnsignedInt((short)67);
      JSONTokener jSONTokener0 = new JSONTokener("vNB");
      jSONObject1.optInt("equ", 35);
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\": \"java.io.StringWriter@0000000003\"}");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("{\"java.lang.String@0000000002\": \"java.io.StringWriter@0000000003\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {\"java.lang.String@0000000002\": \"java.io.StringWriter@0000000003\"}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      byte byte0 = (byte) (-102);
      Byte byte1 = new Byte((byte) (-102));
      Float float0 = new Float((-1340.7533F));
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = new Boolean("!@o.U?IfVEnV3");
      String string0 = "{$[ZY3";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{$[ZY3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {$[ZY3
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.850047886126904
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.isFinite(0.0F);
      JSONObject.numberToString(float0);
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optInt("sho", 114);
      Float.min(0.0F, 114);
      jSONObject0.optInt("{}");
      String string0 = "^je36NEJ^HFD";
      JSONObject jSONObject1 = jSONObject0.put("^je36NEJ^HFD", (long) 114);
      JSONObject jSONObject2 = jSONObject0.accumulate("^je36NEJ^HFD", jSONObject1);
      jSONObject2.optInt((String) null, 114);
      jSONObject1.opt("java.lang.Float@0000000001");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      // Undeclared exception!
      jSONObject2.toString(114);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.7311629255205125
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte) (-36));
      JSONObject jSONObject1 = new JSONObject(byte0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a Boolean.";
      jSONObject1.optDouble("ishashCode", Double.NaN);
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONObject$1", 1L);
      jSONObject2.optDouble("MuiMDwG]tl=", Double.NaN);
      Object object0 = new Object();
      jSONObject1.optBoolean("istoHexString");
      JSONObject.quote("wheel.json.JSONObject$1");
      jSONObject1.getLong("wheel.json.JSONObject$1");
      jSONObject1.opt("?Ze#\"#vY,Vb#");
      Boolean boolean0 = new Boolean("is");
      Byte byte1 = new Byte((byte) (-74));
      JSONObject jSONObject3 = jSONObject2.put("] is not a Boolean.", (Object) ")fTJ:db");
      jSONObject1.optLong("has");
      jSONObject0.isNull("luZX|Ate0r^@#4PsA");
      int int0 = jSONObject3.optInt(".+= ?)Q;}u0-AlW", 70);
      assertEquals(3, jSONObject2.length());
      assertEquals(70, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.457322390542061
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.isNull("#H");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap2 = new HashMap<JSONObject, Object>();
      Integer integer0 = new Integer(2);
      JSONObject jSONObject1 = jSONObject0.put("5", (Object) integer0);
      jSONObject1.optBoolean(";U/z?Rm+fZ$");
      int int0 = new Integer(2);
      Boolean boolean0 = new Boolean("Null key.");
      jSONObject0.optLong("5");
      Integer integer1 = new Integer(2);
      Float.min((-1.0F), 1481.7444F);
      Long long0 = new Long(2L);
      Boolean.valueOf(false);
      Double double0 = new Double(2);
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer(2);
      assertEquals(2, (int)integer3);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer.getInteger("Null pointer", 60);
      Integer.divideUnsigned(60, 60);
      Integer.sum(1, (-12473307));
      Integer integer0 = new Integer(60);
      Double double0 = new Double(0.0);
      Integer.divideUnsigned(177, 1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Null pointer";
      stringArray0[1] = "Null pointer";
      stringArray0[2] = "Null pointer";
      stringArray0[3] = "";
      stringArray0[4] = "Null pointer";
      JSONObject jSONObject0 = new JSONObject("Null pointer", stringArray0);
      jSONObject0.toJSONArray((JSONArray) null);
      JSONTokener jSONTokener0 = new JSONTokener("cCG:_:C!`[C?L:|");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.771405387710501
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      Byte byte0 = new Byte((byte) (-105));
      Float float0 = new Float((-1340.7533F));
      StringWriter stringWriter0 = new StringWriter(919);
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap2 = new HashMap<JSONObject, Object>();
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      hashMap1.put(jSONObject0, jSONTokener0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject();
      String string1 = "x\\.XW+9?a";
      jSONObject0.optDouble("x.XW+9?a", 3071.218016596822);
      jSONObject1.toString((int) (byte) (-105));
      Float float1 = new Float(1.0F);
      String string2 = "\\3Pv^!tK";
      jSONObject0.optBoolean("\u0003Pv^!tK");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.589575544001172
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte) (-36));
      JSONObject jSONObject1 = new JSONObject(byte0);
      JSONObject jSONObject2 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Integer integer0 = new Integer((byte) (-36));
      Float.min(2689.591F, 0.0F);
      jSONObject2.optInt("sho");
      JSONObject jSONObject3 = new JSONObject("{}");
      Byte byte1 = new Byte((byte) (-10));
      JSONTokener jSONTokener0 = new JSONTokener("] is not a Boolean.");
      jSONObject0.optLong("pa");
      try { 
        jSONObject2.getDouble("pa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.4312896930889447
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{vbfx)CCo!u)<mui:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 16 of {vbfx)CCo!u)<mui:
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.040974186509856
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject.valueToString((Object) null, 621, 621);
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(621);
      jSONObject0.toString();
      jSONObject0.optJSONObject("^4.wH");
      Short short0 = new Short((short) (-938));
      JSONObject jSONObject1 = jSONObject0.append("no", short0);
      JSONObject jSONObject2 = jSONObject1.put("{}", (long) 621);
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "null";
      stringArray0[1] = "no";
      stringArray0[2] = "{}";
      stringArray0[3] = "va";
      stringArray0[4] = "va";
      stringArray0[5] = "null";
      JSONObject jSONObject3 = new JSONObject(object0, stringArray0);
      jSONObject0.accumulate("no", jSONObject3);
      JSONObject jSONObject4 = jSONObject2.put("3N=", false);
      assertSame(jSONObject4, jSONObject0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of r
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.0559637203787138
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "A JSONArray text must start with '['";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "A JSONArray text must start with '['");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (Collection) linkedList0);
      jSONObject1.getString("A JSONArray text must start with '['");
      jSONObject1.optDouble("A JSONArray text must start with '['", 760.80126067603);
      jSONObject0.isNull("#H");
      jSONObject0.toString(35, 1545);
      jSONObject0.optInt("{0");
      String string1 = "1V2E_$PD_";
      String string2 = null;
      jSONObject0.optString((String) null);
      jSONObject0.toString();
      try { 
        jSONObject0.getLong("`W/a'-Ut'uJ=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`W/a'-Ut'uJ=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.4462067525114675
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wai";
      JSONObject jSONObject1 = jSONObject0.putOpt("getgetClass", "getgetClass");
      jSONObject0.isNull("getgetClass");
      Object object0 = new Object();
      Long long0 = new Long((-4966L));
      Float float0 = new Float((-2726.5232522316214));
      Float float1 = new Float((float) (-4966L));
      jSONObject1.put("wai", (Object) jSONObject0);
      Short.toUnsignedInt((short)4786);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-12469270));
      Integer integer1 = Integer.getInteger("wai", 4786);
      Integer.divideUnsigned((-5037), 34);
      linkedList0.add(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      Integer integer2 = new Integer(13);
      linkedList0.add(integer1);
      Integer integer3 = new Integer(34);
      linkedList0.addFirst(integer1);
      // Undeclared exception!
      jSONObject0.toString(2562, 34);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.898653058925091
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wai";
      String string1 = "getgetClass";
      JSONObject jSONObject1 = jSONObject0.putOpt("getgetClass", "getgetClass");
      try { 
        jSONObject1.getJSONObject("getgetClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetClass\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.5295919517298326
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.append("JSONObject[", hashMap1);
      JSONObject jSONObject2 = jSONObject0.putOpt("re", hashMap0);
      jSONObject1.put("JSONObject[", (Map) hashMap0);
      JSONObject.valueToString(jSONObject1, (-2056), 55);
      JSONObject jSONObject3 = jSONObject2.getJSONObject("JSONObject[");
      assertFalse(jSONObject3.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      BiFunction<Object, Object, Boolean> biFunction0 = (BiFunction<Object, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2286);
      Float.min(1481.7444F, 1.0F);
      Long long0 = new Long(1064L);
      Boolean.valueOf(false);
      Integer integer1 = new Integer(116);
      Integer integer2 = new Integer((-4107));
      Integer integer3 = new Integer(20);
      Integer.getInteger("gettoString", 2286);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("<r=", (Object) null);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.402114120412743
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.append("JSONObject[", hashMap1);
      JSONObject jSONObject2 = jSONObject0.putOpt("re", hashMap0);
      HashMap<Long, Byte> hashMap2 = new HashMap<Long, Byte>();
      jSONObject1.put("JSONObject[", (Map) hashMap2);
      JSONObject.valueToString(jSONObject2, 32, 69);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.115418922713837
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getcompareTo", (long) (short)128);
      Short short0 = new Short((short)128);
      jSONObject0.accumulate("getcompareTo", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.977437554506413
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text must start with '['";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (Collection) linkedList0);
      jSONObject1.optDouble("A JSONArray text must start with '['", 760.80126067603);
      jSONObject0.isNull("#H");
      jSONObject0.toString(35, 1577);
      jSONObject0.optInt("{0");
      String string1 = "1V2E_$PD_";
      String string2 = null;
      jSONObject0.optString((String) null);
      jSONObject0.toString();
      try { 
        jSONObject0.getLong("`W/a'-Ut'uJ=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`W/a'-Ut'uJ=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3288274798399655
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = new Integer((-5037));
      Integer.sum((-5037), (-12473307));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Double double0 = new Double(0.0);
      Object object0 = new Object();
      Boolean boolean0 = new Boolean((String) null);
      JSONObject.valueToString(boolean0, (-12478344), (-12473307));
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = ",\n";
      stringArray0[2] = "java.lang.Boolean@0000000001";
      stringArray0[3] = null;
      stringArray0[4] = "java.lang.Boolean@0000000001";
      stringArray0[5] = ",\n";
      stringArray0[6] = ",\n";
      stringArray0[7] = "isput";
      stringArray0[8] = "5p1";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6414082084762107
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer.getInteger("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer((-953));
      Integer integer5 = new Integer((-1175));
      Integer integer6 = new Integer(8);
      Integer integer7 = new Integer(2326);
      Integer integer8 = new Integer((-1791));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.addFirst(integer8);
      Integer.divideUnsigned(8, (-108916131));
      Object object0 = JSONObject.NULL;
      jSONObject0.toJSONArray(jSONArray0);
      JSONTokener jSONTokener0 = new JSONTokener("rZ-@Zzl2\"OQLky([");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.9461749554644676
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.append("JSONObject[", hashMap1);
      jSONObject0.remove("JSONObject[");
      jSONObject0.putOpt("re", hashMap0);
      int int0 = (-2017);
      String string0 = "%3}BqV";
      try { 
        jSONObject0.get("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.048224650694221
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expcted a ':' 6fter a key", (-356.52189));
      jSONObject0.accumulate("getnotify", "Expcted a ':' 6fter a key");
      try { 
        jSONObject0.getJSONArray("Expcted a ':' 6fter a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expcted a ':' 6fter a key\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.556529983990065
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float float0 = new Float((double) 60);
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("JSONObject[", hashMap1);
      jSONObject1.putOpt("XS7UA>8csq^-ZDgu6", float0);
      JSONObject jSONObject2 = jSONObject1.put("] not found.", (Map) hashMap0);
      JSONObject.valueToString(jSONObject2, 61, 61);
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.363913220396597
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expcted a ':' after a key", (-356.52189));
      jSONObject0.optString("Expcted a ':' after a key");
      jSONObject1.has("4{(");
      JSONObject jSONObject2 = new JSONObject((Object) "java.lang.Double@0000000003");
      Byte byte0 = new Byte((byte)127);
      String string0 = "not";
      String string1 = "A JSONObject text must end with '}'";
      jSONObject2.optLong("A JSONObject text must end with '}'", 0L);
      JSONTokener jSONTokener0 = new JSONTokener(",\n");
      jSONTokener0.syntaxError("vG");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.0784659454412555
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      Byte byte0 = new Byte((byte) (-105));
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x";
      stringArray0[1] = "qH#uW`";
      stringArray0[2] = "qH#uW`";
      stringArray0[3] = "%U&[*/7|/<`ur";
      stringArray0[4] = "qH#uW`";
      JSONObject jSONObject0 = new JSONObject((Object) "Expected a ',' or '}'");
      double double0 = jSONObject0.optDouble("tw", (double) (byte) (-105));
      assertEquals((-105.0), double0, 0.01);
      
      String string0 = jSONObject0.optString("#Ozb5RqLE4d1 _%h");
      assertEquals("", string0);
      
      double double1 = jSONObject0.optDouble("{p,{Emgk 1)PH80o ");
      assertEquals(3, jSONObject0.length());
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "#H";
      jSONObject1.isNull((String) null);
      Object object0 = new Object();
      int int0 = 93;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.8570646238209854
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "#H";
      jSONObject0.isNull("#H");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = jSONObject0.put("#H", (Object) "#H");
      jSONObject1.optBoolean("#H");
      jSONObject0.optInt("X,frB9,c4TIi@9?K");
      Boolean boolean0 = new Boolean("#H");
      jSONObject0.optLong("#H");
      jSONObject0.optString("#H", "X,frB9,c4TIi@9?K");
      Integer integer0 = new Integer(975);
      Float.min(1.0F, 1481.7444F);
      Long long0 = new Long(0L);
      Boolean.valueOf(false);
      jSONObject1.optLong("X,frB9,c4TIi@9?K");
      jSONObject1.optInt("X,frB9,c4TIi@9?K");
      jSONObject0.opt("#H");
      jSONObject1.optString("getnotifyAll", "java.lang.String@0000000002");
      try { 
        jSONObject1.getDouble("getnotifyAll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getnotifyAll\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.0771094394450142
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer.getInteger("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer((-953));
      Integer integer5 = new Integer((-1175));
      Integer integer6 = new Integer(8);
      Integer integer7 = new Integer(2326);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Null pointer";
      stringArray0[1] = "#h";
      stringArray0[2] = "#h";
      stringArray0[3] = "Null pointer";
      stringArray0[4] = "o!@";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.append("IJ[x4\"xHw$zTh~", "Null pointer");
      Integer integer8 = new Integer(2326);
      assertFalse(integer8.equals((Object)integer3));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.353475905708347
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Null key.";
      stringArray0[1] = "#H";
      stringArray0[2] = "Null key.";
      stringArray0[3] = "Null key.";
      stringArray0[4] = "Y~Uc<";
      stringArray0[5] = "\f";
      stringArray0[6] = "%U&[*/7|/<`ur";
      stringArray0[7] = "Expected a ',' or '}'";
      stringArray0[8] = "'";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.put("Expected a ',' or '}'", (Collection) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.4955170051907487
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("' and instead saw '");
      JSONTokener jSONTokener1 = new JSONTokener("iscompare");
      JSONTokener jSONTokener2 = new JSONTokener("#H");
      JSONTokener jSONTokener3 = new JSONTokener((String) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "#H";
      stringArray0[1] = null;
      stringArray0[2] = "cmjMWc-&{sF";
      stringArray0[3] = "' and instead saw '";
      stringArray0[4] = "' and instead saw '";
      stringArray0[5] = "#H";
      stringArray0[6] = null;
      stringArray0[7] = null;
      JSONObject jSONObject0 = new JSONObject(jSONTokener1, stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[1] = ".";
      stringArray1[2] = "#h";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray1);
      jSONObject1.put("cmjMWc-&{sF", false);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.345525061233507
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = "JSONObject[";
      jSONObject0.append("JSONObject[", hashMap1);
      JSONObject jSONObject1 = jSONObject0.putOpt("re", hashMap0);
      Short short0 = new Short((short)16);
      Float float0 = new Float((float) (short)16);
      Object object0 = new Object();
      String string1 = null;
      try { 
        jSONObject1.accumulate((String) null, "re");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.87581752666317
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = new Object();
      Float float0 = new Float((double) 1881L);
      Short short0 = new Short((short) (-1209));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Integer integer0 = new Integer((short) (-1209));
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONArray jSONArray1 = new JSONArray("[]");
      JSONObject jSONObject0 = new JSONObject();
      Short short1 = new Short((short) (-1209));
      jSONObject0.accumulate("XD{\"8<PuV/C", float0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.116361630544406
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte) (-36));
      JSONObject jSONObject1 = new JSONObject(byte0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a Boolean.";
      stringArray0[1] = "Ku()xZzP";
      stringArray0[2] = "\f";
      stringArray0[3] = "'";
      stringArray0[4] = "!^bcd=BbU%+`ZfZC=";
      stringArray0[5] = "Expected a ',' or '}'";
      int int0 = jSONObject0.optInt("Expected a ',' or '}'", 3276);
      assertEquals(3276, int0);
      
      String string0 = jSONObject0.optString("isdecode", "'");
      assertEquals("'", string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.788490352562607
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", 0L);
      jSONObject0.optDouble((String) null, 0.0);
      jSONObject0.optInt((String) null, (-3169));
      try { 
        jSONObject0.put((String) null, (-895L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.162029290961321
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "#H";
      jSONObject0.isNull("#H");
      String string1 = "Nj7ll key.";
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap1.put(jSONObject0, "Nj7ll key.");
      jSONObject0.put("Nj7ll key.", (Map) hashMap0);
      Boolean boolean1 = new Boolean(true);
      String string2 = "bA93t3h1";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.662452244265888
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.append("JSONObject[", hashMap1);
      JSONObject jSONObject2 = jSONObject0.putOpt("re", hashMap0);
      jSONObject1.put("JSONObject[", (Map) hashMap0);
      JSONObject.valueToString(jSONObject2);
      JSONObject.valueToString(jSONObject1, (-2056), 55);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(738);
      Integer.compare(738, (-434));
      linkedList0.add((Object) integer0);
      linkedList0.add((Object) "A JSONArray text must start with '['");
      Boolean boolean0 = new Boolean("1V2E_$PD_");
      Short short0 = new Short((short) (-2080));
      Short.toUnsignedLong((short) (-1368));
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-128));
      try { 
        jSONObject0.put((String) null, (Object) ">Q3,E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.3795220472207066
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.min(1.0F, 0.0F);
      Float.min(0.0F, (-1.0F));
      Boolean boolean0 = new Boolean("");
      StringWriter stringWriter0 = new StringWriter(1351);
      stringWriter0.write(5070);
      stringWriter0.write("");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.close();
      stringWriter0.close();
      stringWriter1.append((CharSequence) "");
      Float.min(5070, (-1.0F));
      stringWriter0.flush();
      stringWriter1.append((CharSequence) "");
      StringWriter stringWriter2 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Float.max(1.0F, (-1756.88F));
      try { 
        jSONObject0.getString("isentrySet");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isentrySet\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5266399744832115
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer.getInteger("Null pointer", 60);
      Integer.divideUnsigned(60, 60);
      Integer.sum(1, (-12473307));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(60);
      Integer.remainderUnsigned((-957), 60);
      Integer.compareUnsigned((-957), 60);
      Float.min(60, (-999.98F));
      Long long0 = new Long(1);
      Integer integer1 = new Integer(458);
      Integer integer2 = new Integer(1);
      Float float0 = new Float((double) 1);
      Float.sum(60, (-1.0F));
      JSONObject.valueToString(float0, (-853), 16);
      JSONObject.testValidity("java.lang.Float@0000000001");
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONTokener jSONTokener1 = new JSONTokener("");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Double double0 = new Double((-1.0));
      String string0 = JSONObject.quote("l(X;xn&;mzH/T%r");
      assertEquals("\"l(X;xn&;mzH/T%r\"", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5197387829465234
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "flo";
      stringArray0[1] = "T3${XdgD";
      stringArray0[2] = ":Cnp{d]l3t";
      stringArray0[3] = "i`RB/7_DU5-Rh ";
      stringArray0[4] = "Ya5.iv";
      stringArray0[5] = "wheel.json.JSONException";
      stringArray0[6] = ": ";
      stringArray0[7] = "{";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      try { 
        jSONObject1.getJSONArray("i`RB/7_DU5-Rh ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"i`RB/7_DU5-Rh \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.9590960964240387
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      short short0 = (short) (-716);
      Short short1 = new Short((short) (-716));
      JSONObject jSONObject0 = new JSONObject(short1);
      String string0 = "";
      try { 
        jSONObject0.getLong("%PMdg5;G{,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%PMdg5;G{,\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.33601613768898
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer.getInteger("Null pointer", (-5037));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-5037));
      Object object0 = new Object();
      Boolean boolean0 = new Boolean((String) null);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "Null pointer";
      stringArray0[2] = ")";
      stringArray0[3] = "Null pointer";
      stringArray0[4] = ",\n";
      stringArray0[5] = ",\n";
      stringArray0[6] = "Null pointer";
      stringArray0[7] = ",\n";
      stringArray0[8] = ",\n";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = jSONObject1.optString("#JO']0*Z<;5'i");
      assertEquals("", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7322201838634412
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optJSONObject("'#UWa;kYInw>&");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float float0 = new Float((-1340.6606F));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1098));
      Integer integer1 = new Integer(191);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer2 = new Integer((-108916131));
      linkedList1.add(integer2);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer3 = new Integer((-1098));
      Integer integer4 = new Integer((-108916131));
      Integer integer5 = new Integer((-3212));
      Integer integer6 = new Integer(30);
      Integer integer7 = new Integer((-1175));
      int int0 = 34;
      Integer integer8 = new Integer((-34776646));
      String[] stringArray0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.8624789868050988
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer.getInteger("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = (-108916131);
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      Integer integer2 = new Integer((-5037));
      Integer.getInteger("java.lang.Float@00000000090", integer2);
      linkedList0.add(integer1);
      Integer integer3 = new Integer((-108916131));
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer4 = new Integer((-953));
      int int1 = 1545;
      Integer integer5 = new Integer(1545);
      Integer integer6 = new Integer(39);
      int int2 = 3241;
      try { 
        jSONObject0.get("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.0973925125865214
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expcted a ':' 6fter a key", (-356.52189));
      jSONObject0.accumulate("getnotify", "Expcted a ':' 6fter a key");
      jSONObject0.get("Expcted a ':' 6fter a key");
      String string0 = "gettoString";
      try { 
        jSONObject0.getDouble("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.5490230514048333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      Byte byte0 = new Byte((byte)98);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("\f", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.096494721180824
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Short short0 = new Short((short) (-2737));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONArray jSONArray0 = new JSONArray();
      Short short1 = new Short((short) (-1903));
      JSONObject jSONObject0 = new JSONObject(short1, stringArray0);
      jSONObject0.isNull("toH");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = jSONObject0.put("f7K(5zJ7ShiLuwLL&V`", (Object) short0);
      jSONObject0.optLong("toH");
      jSONObject0.optDouble("f7K(5zJ7ShiLuwLL&V`", (double) 0L);
      jSONObject0.optBoolean("X,frB9,c4TIi@9?K");
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.optInt("toH");
      Boolean boolean0 = new Boolean("toH");
      jSONObject1.optString("%=Dr,:)@", "%=Dr,:)@");
      Integer integer0 = new Integer(0);
      Float.min((short) (-2737), 152.0F);
      Long long0 = new Long((short) (-2737));
      Boolean.valueOf(true);
      Double double0 = new Double((-1.0));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(116);
      Integer integer3 = new Integer(2995);
      jSONObject2.put(")", (Object) jSONObject0);
      try { 
        jSONObject2.get("getcompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getcompare\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double.sum(1.0, (-2905.452));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.0762750631413014
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer.getInteger("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer((-953));
      Integer integer5 = new Integer((-1175));
      Integer integer6 = new Integer(8);
      Integer integer7 = new Integer(2326);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Null pointer";
      stringArray0[1] = "#h";
      stringArray0[2] = "o!@";
      stringArray0[3] = "Null pointer";
      stringArray0[4] = "o!@";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("`D!cK", true);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.2675785555845462
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte) (-36));
      Byte.toUnsignedLong((byte) (-50));
      JSONObject jSONObject1 = new JSONObject(byte0);
      jSONObject1.optInt("mVs;p17]", 15);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a Boolean.";
      stringArray0[1] = "Ku()xZzP";
      stringArray0[2] = "] is not a Boolean.";
      boolean boolean0 = jSONObject0.optBoolean("] is not a Boolean.", true);
      assertTrue(boolean0);
      
      Float.max((-3543.0F), (byte) (-36));
      stringArray0[4] = "!^bcd=BbU%+`ZfZC=";
      stringArray0[5] = "Expected a ',' or '}'";
      int int0 = jSONObject0.optInt("Expected a ',' or '}'", (int) (byte) (-36));
      assertEquals((-36), int0);
      
      String string0 = jSONObject0.optString("!^bcd=BbU%+`ZfZC=", stringArray0[3]);
      assertNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.1147498264472473
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      jSONObject1.optInt("");
      jSONObject1.isNull("");
      Object object0 = new Object();
      Long long0 = new Long(1881L);
      Float float0 = new Float((double) 1881L);
      Short short0 = new Short((short) (-1209));
      jSONObject0.append(">/Xu>!IWv]", short0);
      JSONTokener jSONTokener0 = new JSONTokener("Y>n\"9jee2m");
      JSONTokener jSONTokener1 = new JSONTokener("Y>n\"9jee2m");
      JSONTokener jSONTokener2 = new JSONTokener("He>*N4K[G/WMOO~(x");
      JSONTokener jSONTokener3 = new JSONTokener(">/Xu>!IWv]");
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.315380572918127
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      Integer.divideUnsigned(1914, 2860);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer((-1175));
      Integer integer5 = new Integer(8);
      Integer integer6 = new Integer(2326);
      Float.max((-1.0F), 8);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Null pointer";
      stringArray0[1] = "#h";
      stringArray0[2] = "#h";
      stringArray0[3] = "Null pointer";
      stringArray0[4] = "o!@";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer integer7 = new Integer(2326);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.1604792179752916
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.append("JSONObject[", hashMap1);
      jSONObject0.putOpt("re", hashMap0);
      Float float0 = new Float(847.68F);
      Object object0 = new Object();
      Long long0 = new Long((-2056));
      JSONObject jSONObject1 = jSONObject0.accumulate("!", long0);
      try { 
        jSONObject1.getDouble("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONObject[\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-3756L));
      Integer integer0 = new Integer(93);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString((Object) null, 401, 401);
      Float float0 = new Float(0.0F);
      Object object0 = JSONObject.NULL;
      jSONObject0.put("wm01'(%wU_Ub_l4{@`", object0);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1, 35, (short) (-2397));
      Short.toUnsignedInt((short) (-3244));
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      try { 
        Byte.decode("ishashCode");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ishashCode\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.2370942225030754
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer.getInteger("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer((-953));
      JSONObject.valueToString((Object) null);
      Integer integer5 = new Integer((-1175));
      Integer integer6 = new Integer(8);
      Integer integer7 = new Integer(2326);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Null pointer";
      stringArray0[1] = "#h";
      stringArray0[2] = "#h";
      stringArray0[3] = "Null pointer";
      stringArray0[4] = "o!@";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer integer8 = new Integer(2326);
      Double double0 = new Double(0.0);
      jSONObject0.accumulate(".", double0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.4811375362486956
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer.getInteger("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer((-953));
      Integer integer5 = new Integer((-1175));
      Integer integer6 = new Integer(8);
      Integer integer7 = new Integer(2326);
      String[] stringArray0 = new String[23];
      stringArray0[0] = "Null pointer";
      stringArray0[1] = "#h";
      stringArray0[2] = "#h";
      stringArray0[3] = "Null pointer";
      stringArray0[4] = "o!@";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer integer8 = new Integer(2326);
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.6414082084762107
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer.getInteger("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer((-953));
      Integer integer5 = new Integer((-1175));
      Integer integer6 = new Integer(8);
      Integer integer7 = new Integer(2326);
      String[] stringArray0 = new String[23];
      stringArray0[0] = "Null pointer";
      stringArray0[1] = "#h";
      stringArray0[2] = "#h";
      stringArray0[3] = "Null pointer";
      stringArray0[4] = "o!@";
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("Null pointer", (Object) null);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5705991060382574
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer.getInteger("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer((-953));
      Integer integer5 = new Integer((-5037));
      Integer integer6 = new Integer((-953));
      Integer integer7 = new Integer(34);
      Integer integer8 = new Integer((-926));
      Integer integer9 = new Integer(1182);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Float float0 = new Float((-1340.6606F));
      StringWriter stringWriter0 = new StringWriter();
      Integer.getInteger("Unterminated string");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(25);
      linkedList0.add(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      Integer integer1 = new Integer((-953));
      Integer integer2 = new Integer(3206);
      Integer integer3 = new Integer(3);
      Integer integer4 = new Integer((-362));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer5 = new Integer(34);
      linkedList1.addFirst(integer5);
      Integer.divideUnsigned((-953), 25);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">~!s:>b4,+9";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.7708735565042333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.isNull("#H");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      hashMap0.put(jSONObject0, (Object) null);
      JSONObject jSONObject1 = jSONObject0.put("X,frB,c4TIi@9?K", (Map) hashMap1);
      JSONObject jSONObject2 = new JSONObject();
      String string0 = "to";
      jSONObject1.optInt("Y~Uc<", 1219);
      jSONObject0.optDouble("to", 3071.218016596822);
      String string1 = "JSONA8ray[";
      JSONObject jSONObject3 = jSONObject1.put("JSONA8ray[", 0L);
      jSONObject3.optBoolean("X,frB,c4TIi@9?K", true);
      Object object1 = new Object();
      jSONObject2.optBoolean("tUh+J/* ");
      JSONObject.quote("tUh+J/* ");
      jSONObject0.length();
      try { 
        jSONObject0.getLong(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.4992282448111056
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "] is not a JSONObject.";
      Long long0 = new Long(2714L);
      JSONObject jSONObject1 = jSONObject0.putOpt(stringArray0[0], long0);
      jSONObject1.optLong("do=QyN0");
      jSONObject1.optInt("+Grv");
      jSONObject1.opt("getwait");
      jSONObject0.optString("22", "getwait");
      Object object0 = new Object();
      jSONObject1.append("?n.(FC'<<KvR2~@$w", object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = new Object();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      hashMap0.entrySet();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      Double double0 = new Double(4895.56282);
      Object object1 = new Object();
      Boolean boolean0 = new Boolean("no");
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      String string1 = JSONObject.quote("\"As%{hl]");
      assertEquals("\"\\\"As%{hl]\"", string1);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer.getInteger("Null pointer", 60);
      Integer.divideUnsigned(60, 60);
      Integer.sum(1, (-12473307));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(60);
      Integer.remainderUnsigned((-957), 60);
      Integer.compareUnsigned((-957), 60);
      Float.min(60, (-999.98F));
      Long long0 = new Long(1);
      Integer integer1 = new Integer(458);
      Integer integer2 = new Integer(1);
      Float float0 = new Float((double) 1);
      String string0 = JSONObject.valueToString(float0, (-853), 16);
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.3929637656525395
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.append("JSONObject[", hashMap1);
      jSONObject1.putOpt((String) null, (Object) null);
      jSONObject1.put("JSONObject[", (Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject1, (-2056), 55);
      assertNotNull(string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.959822665813384
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      Double double0 = new Double(4895.56282);
      Object object1 = new Object();
      Byte byte0 = new Byte((byte) (-41));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("0", 1219);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.optLong("flo");
      try { 
        jSONObject1.getDouble("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.8171329228800834
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer.getInteger("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer((-953));
      Integer integer5 = new Integer((-1175));
      Integer integer6 = new Integer(8);
      Integer integer7 = new Integer(2326);
      String[] stringArray0 = new String[23];
      stringArray0[0] = "Null pointer";
      stringArray0[1] = "#h";
      stringArray0[2] = "#h";
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.names();
      assertNotNull(jSONArray1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.638380941502739
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("getnotJify");
      Object object0 = new Object();
      jSONObject0.put("#H", true);
      Long long0 = new Long(1881L);
      Float float0 = new Float((double) 1881L);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "Y>n\"9jee2m");
      short short0 = (short) (-1209);
      Short short1 = new Short((short) (-1209));
      jSONObject1.append("XD{\"8<PuV/C", (Object) null);
      Integer integer0 = new Integer((short) (-1209));
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short2 = new Short((short) (-1209));
      linkedList0.add(short2);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object1 = new Object();
      Boolean.logicalOr(true, true);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.5705991060382574
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      Byte byte0 = new Byte((byte) (-105));
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("x");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x";
      stringArray0[1] = "j#uW`";
      stringArray0[2] = "%U&[*/7|/<`ur";
      stringArray0[3] = "%U&[*/7|/<`ur";
      stringArray0[4] = "Expected a ',' or '}'";
      JSONObject jSONObject1 = new JSONObject((Object) "Expected a ',' or '}'");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.isFinite((-4020.227F));
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Integer integer0 = new Integer(32);
      Float.min(462.1126F, 32);
      Long long0 = new Long(1L);
      Boolean.valueOf(true);
      Float float1 = new Float(0.0);
      jSONObject0.optLong("wheel.json.JSONArray", (long) 32);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONArray");
      Integer integer1 = new Integer(32);
      int int0 = 87;
      Integer integer2 = new Integer(87);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("5r!q*Gi/cjYY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 5r!q*Gi/cjYY
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Float float0 = new Float((double) 60);
      Integer integer0 = Integer.getInteger("Null pointer", 23);
      Integer integer1 = new Integer(23);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer2 = new Integer(23);
      JSONObject.quote("Null pointer");
      Integer integer3 = new Integer(5268);
      Integer integer4 = new Integer(23);
      linkedList0.add(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.quote("q1/84");
      Integer.divideUnsigned(5268, (-1320));
      Short short0 = new Short((short)3);
      Float float1 = new Float((float) 5268);
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.366084616341823
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "#H";
      jSONObject0.isNull("#H");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap1.put(jSONObject0, "Nj7ll key.");
      JSONObject jSONObject1 = jSONObject0.put("Nj7ll key.", (Map) hashMap0);
      Boolean boolean1 = new Boolean(true);
      jSONObject0.put("bA93t3h1", (Map) hashMap0);
      try { 
        jSONObject1.getBoolean("Nj7ll key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Nj7ll key.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.6061920506332319
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      Float.min(0.0F, (-1.0F));
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Double double0 = new Double((-2544.87));
      String string0 = JSONObject.quote("yrK<xM{0;M");
      assertEquals("\"yrK<xM{0;M\"", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.6520262037579023
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.isNull("JSONArray initial value should be a string or collection or array.");
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.put("ishashCode", false);
      String string0 = "toH";
      Long.valueOf((-3756L));
      jSONObject0.putOpt("boo", jSONObject1);
      try { 
        jSONObject2.append("boo", "JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[boo] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean.valueOf(false);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Object object0 = new Object();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      Object object1 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object1);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.476589091917909
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.isNull("#H");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      hashMap1.put(jSONObject0, hashMap0);
      Object object1 = JSONObject.NULL;
      Object object2 = hashMap1.put(jSONObject0, object1);
      hashMap0.put(jSONObject0, object2);
      Boolean.valueOf(true);
      hashMap1.put(jSONObject0, "Nj7ll key.");
      Boolean boolean0 = new Boolean(true);
      jSONObject0.putOpt("Nj7ll key.", "#H");
      jSONObject0.put("#H", (Map) hashMap0);
      try { 
        jSONObject0.getBoolean("Nj7ll key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Nj7ll key.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.571831599661383
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)69);
      jSONObject0.putOpt("Expcted a ':' after a key", byte0);
      jSONObject0.optInt("Expcted a ':' after a key");
      Boolean.logicalOr(true, true);
      JSONTokener jSONTokener0 = new JSONTokener("Expcted a ':' after a key");
      String string0 = "#zwz.\"r";
      JSONTokener jSONTokener1 = new JSONTokener("#zwz.\"r");
      char char0 = 'T';
      try { 
        jSONTokener0.next('d');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'd' and instead saw 'E' at character 1 of Expcted a ':' after a key
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.4697705551701734
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = new Object();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Null key.";
      stringArray0[3] = "#H";
      stringArray0[2] = "Null key.";
      jSONObject0.optLong((String) null, 0L);
      stringArray0[3] = "Null key.";
      stringArray0[4] = "Y~Uc<";
      stringArray0[5] = "\f";
      stringArray0[6] = "Y~Uc<";
      stringArray0[7] = "Expected e ',' or '}[";
      stringArray0[8] = "'";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.0325330653044436
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optLong("h ^c9^][V|V+G{]*", (long) (-5037));
      Integer.getInteger("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer((-953));
      Integer integer5 = new Integer((-1175));
      Integer integer6 = new Integer(8);
      Double.sum((-953), (-833.185924688));
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener("Null pointer");
      Integer integer7 = new Integer(24);
      int int0 = Integer.sum((-783), (-108916131));
      assertEquals((-108916914), int0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Float float0 = new Float((-1340.6606F));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      JSONObject.doubleToString(0.0);
      stringWriter0.close();
      Integer integer0 = new Integer(60);
      int int0 = Integer.compareUnsigned(55, (-479));
      Float.min((-1340.6606F), (-1332.507F));
      Long long0 = new Long(1L);
      int int1 = Integer.sum((-619), (-1384));
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Float.max(178.56601F, (-5220.325F));
      Float.isFinite(1.0F);
      Float.min(0.0F, 1233.4331F);
      JSONTokener jSONTokener0 = new JSONTokener("17.109563497258463.");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("17.109563497258463.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"17.109563497258463.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      HashMap<JSONObject, Object> hashMap2 = new HashMap<JSONObject, Object>();
      hashMap2.keySet();
      Integer integer0 = new Integer(123);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(123);
      linkedList0.addFirst(integer1);
      Integer.divideUnsigned(2648, 125);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Y]U7eFkqrA=B~a7D_I";
      stringArray0[1] = "Unclosed comment";
      stringArray0[2] = " XE(U.Na1XOu7n|";
      stringArray0[3] = "Y]U7eFkqrA=B~a7D_I";
      stringArray0[4] = " at character ";
      stringArray0[5] = "@~.$NN>jR.bPXF3K";
      stringArray0[6] = "[]";
      JSONObject jSONObject1 = new JSONObject(hashMap1, stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("Y]U7eFkqrA=B~a7D_I");
      String string0 = jSONObject1.toString(5, 123);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.1782635633659115
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer.getInteger("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Float.min((-108916131), (-5037));
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer((-953));
      Integer integer5 = new Integer((-1175));
      Integer integer6 = new Integer(8);
      Integer integer7 = new Integer(2326);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Null pointer";
      stringArray0[1] = "#h";
      stringArray0[2] = "#h";
      stringArray0[3] = "Null pointer";
      stringArray0[4] = "o!@";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer integer8 = new Integer(2326);
      double double0 = jSONObject1.optDouble("val");
      assertEquals(3, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("r]");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of r]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.613129842728147
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "' and instead saw '";
      stringArray0[1] = "Substring bounds error";
      stringArray0[2] = "getintBitsToFloat";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("Substring bounds error", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1346301204632487
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Float float0 = new Float((double) 60);
      Float.isFinite(2097.4F);
      Float.sum((-6807.128F), 4342.0F);
      Float.sum(1175.8F, 60);
      Float.isFinite(1235.8F);
      Float.isFinite(3319.56F);
      Float.isFinite(2837.25F);
      Float.sum(0.0F, 0.0F);
      Float.min((-4398.8F), 47.823F);
      Float.sum(0.0F, 2097.4F);
      Float.isFinite((-84.56514F));
      String string0 = JSONObject.numberToString(float0);
      Integer.remainderUnsigned((-3991), 128);
      Integer.compareUnsigned(88, 1074);
      Float float1 = new Float(2097.4F);
      Long long0 = new Long(1843L);
      Integer integer0 = new Integer(114);
      Integer integer1 = new Integer(128);
      String string1 = JSONObject.numberToString(integer1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float float0 = new Float((double) 60);
      Integer.getInteger("Null pointer", 23);
      Integer integer0 = new Integer(23);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(23);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer2 = new Integer(84);
      Integer.toUnsignedString(60);
      Integer integer3 = new Integer(5268);
      Integer.compare(91, 1592);
      Integer integer4 = Integer.getInteger("60", 60);
      linkedList0.add(integer4);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer5 = new Integer(1592);
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = jSONObject0.names();
      assertNull(jSONArray2);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.0158551955461084
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.min(1.0F, 0.0F);
      Float.min(0.0F, (-1.0F));
      Boolean boolean0 = new Boolean("");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      Float.max(0.0F, 1351);
      Float.min(5070, (-1.0F));
      stringWriter0.append((CharSequence) "");
      StringWriter stringWriter1 = new StringWriter();
      Float.max(1.0F, (-1756.88F));
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.9961265703017723
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-10));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a Boolean.";
      stringArray0[1] = "Ku()xZzP";
      stringArray0[2] = "\f";
      stringArray0[4] = "!^bcd=BbU%+`ZfZC=";
      stringArray0[5] = "Expected a ',' or '}'";
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.029781310811605
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject.doubleToString((-244.9543572384241));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'";
      stringArray0[4] = "'";
      Integer integer0 = new Integer(2592);
      Integer integer1 = new Integer(1202);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer2 = new Integer(1202);
      linkedList0.add(integer2);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer(1202);
      Integer integer5 = new Integer((-953));
      Integer integer6 = new Integer((-1292));
      Integer integer7 = new Integer((-1175));
      Integer integer8 = new Integer(51);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer integer9 = new Integer(17);
      assertFalse(integer9.equals((Object)integer8));
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      Double double0 = new Double(4895.849036376198);
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      HashMap<Long, Boolean> hashMap1 = new HashMap<Long, Boolean>(hashMap0);
      String string0 = JSONObject.quote("WJ{4<3@)QxY-vLt");
      assertEquals("\"WJ{4<3@)QxY-vLt\"", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Float float0 = new Float((double) 60);
      Float.isFinite(2097.4F);
      Float.sum((-6807.128F), 4342.0F);
      Float.sum(1175.8F, 60);
      Float.isFinite(1235.8F);
      Float.max(1175.8F, 4342.0F);
      Float.isFinite(3319.56F);
      Float.isFinite(2837.25F);
      Float.sum(0.0F, 0.0F);
      Float.sum(0.0F, 2097.4F);
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.9494837273589989
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Float float0 = new Float((float) (-5037));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer.getInteger("Null pointer");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-108916131));
      Integer integer1 = new Integer(34);
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer((-953));
      Integer integer4 = new Integer((-953));
      Integer.remainderUnsigned(8, 934);
      Integer.compareUnsigned((-1367), 934);
      Float.min((-1367), 34);
      Long long0 = new Long(932L);
      Integer integer5 = new Integer((-953));
      Integer integer6 = new Integer(934);
      try { 
        jSONObject0.getDouble("getfloatToRawIntBits");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getfloatToRawIntBits\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
