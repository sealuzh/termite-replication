/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 10:07:53 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.AnnotationWriter;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Item;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8361623253853443
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("RuntimeInvisibleAnnotations");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter((-8));
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("RuntimeInvisibleAnnotations");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "org.apache.commons.io.filefilter.PrefixFileFilter");
      ByteVector byteVector0 = classWriter0.pool;
      ClassWriter classWriter1 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-8), "org.apache.commons.io.filefilter.PrefixFileFilter", "RuntimeVXsibl-Annotations", (String) null, (Object) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "RuntimeVXsibl-Annotations");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "d=zdOFu!#[=*{:-cR";
      classWriter0.visit(49, (byte) (-26), "wheel.asm.ClassAdapter", "d=zdOFu!#[=*{:-cR", "org.apache.commons.io.filefilter.PrefixFileFilter", stringArray0);
      fieldWriter0.put(byteVector0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0877530412219119
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(1, "", "", (String) null, "");
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.getSize();
      fieldWriter0.next = fieldWriter1;
      FieldWriter fieldWriter2 = classWriter0.firstField;
      ClassWriter classWriter1 = new ClassWriter(2);
      FieldWriter fieldWriter3 = new FieldWriter(classWriter0, (-8), "", "", (String) null, (Object) null);
      fieldWriter3.next = fieldWriter0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "Code";
      classWriter0.visit(49, 1, "", "", (String) null, stringArray0);
      fieldWriter1.getSize();
      FieldWriter fieldWriter4 = classWriter1.firstField;
      fieldWriter3.next.getSize();
      fieldWriter0.getSize();
      fieldWriter3.getSize();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8361623253853443
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("RuntimeInvisibleAnnotations");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      ClassWriter classWriter0 = new ClassWriter((-8));
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("RuntimeInvisibleAnnotations");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      ByteVector byteVector0 = classWriter0.pool;
      ClassWriter classWriter1 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-8), "ONKSO9\fOOF+H", "KR", (String) null, (Object) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "KR");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "KR";
      stringArray0[1] = "ONKSO9\fOOF+H";
      stringArray0[2] = "KR";
      stringArray0[3] = "ONKSO9\fOOF+H";
      FileSystemHandling.createFolder(evoSuiteFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)30;
      ByteVector byteVector1 = byteVector0.put11((-798), (byte)30);
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, false);
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, true);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      stringArray0[4] = "KR";
      stringArray0[5] = "KR";
      classWriter0.visit(50, 2, "ONKSO9\fOOF+H", "KR", (String) null, stringArray0);
      fieldWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2684036609455267
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "TDNRHynd7z82}`Kd)<", "bD0", "3]CiR&56d", "bD0");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("bD0");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      byteVector0.putUTF8("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)3;
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2258));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "`0FpcP2", "`0FpcP2", (String) null, "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(1, "", "", (String) null, "");
      ByteVector byteVector0 = new ByteVector();
      byteVector0.length = (-8);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0916746098493628
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(1, "", "KR", (String) null, "");
      fieldWriter0.getSize();
      fieldWriter0.next = fieldWriter0;
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.next = fieldWriter0.next;
      int int0 = fieldWriter1.next.getSize();
      assertEquals(16, int0);
      
      ClassWriter classWriter1 = new ClassWriter(2);
      FieldWriter fieldWriter2 = new FieldWriter(classWriter0, (-8), "", "KR", (String) null, (Object) null);
      fieldWriter2.next = fieldWriter0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "KR";
      stringArray0[1] = "qz 4sTl'9Phy&px";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "KR";
      stringArray0[5] = "KR";
      classWriter0.visit(50, 6, "", "KR", (String) null, stringArray0);
      fieldWriter2.next.next = fieldWriter1;
      fieldWriter0.getSize();
      fieldWriter2.next.next.getSize();
      classWriter0.visit(50, 65533, "x>{R3xbG", "(31AQ%4EWg=C&<*{-", "(31AQ%4EWg=C&<*{-", stringArray0);
      int int1 = fieldWriter2.getSize();
      assertEquals(14, int1);
      
      FieldWriter fieldWriter3 = fieldWriter1.next.next;
      int int2 = fieldWriter2.next.next.getSize();
      assertEquals(16, int2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5786720121234452
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      FieldVisitor fieldVisitor0 = classWriter0.visitField(1, "", "", (String) null, "");
      fieldVisitor0.visitAnnotation("", true);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-8), "", "", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      fieldWriter0.visitAnnotation("0EEBFjV;Fk2.fbJqyVR", true);
      stringArray0[1] = "java/lang/Class";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      byteVector0.put11(261, 1131);
      stringArray0[5] = "ode";
      classWriter0.visit(42, 6, "", "", (String) null, stringArray0);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("java/lang/Class", false);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
      fieldVisitor0.visitAnnotation("", false);
      fieldVisitor0.visitAnnotation("The wildcard list must not be null", false);
      fieldVisitor0.visitAnnotation("", false);
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("", true);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5741715878056357
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(1, "", "", (String) null, "");
      fieldWriter0.visitAnnotation("", true);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      fieldWriter0.visitAnnotation("0EEBFjV;Fk2.fbJqyVR", true);
      stringArray0[1] = "java/lang/Class";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      byteVector0.put11(261, 1131);
      stringArray0[5] = "ode";
      classWriter0.visit(42, 6, "", "", (String) null, stringArray0);
      fieldWriter0.visitAnnotation("java/lang/Class", false);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
      AnnotationWriter annotationWriter0 = (AnnotationWriter)fieldWriter0.visitAnnotation("", false);
      fieldWriter0.visitAnnotation("The wildcard list must not be null", false);
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.visitAnnotation("", true);
      AnnotationWriter annotationWriter1 = (AnnotationWriter)fieldWriter0.visitAnnotation("0EEBFjV;Fk2.fbJqyVR", false);
      assertFalse(annotationWriter1.equals((Object)annotationWriter0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2525306450725109
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-8), "", "", "", "");
      boolean boolean0 = true;
      fieldWriter0.visitAnnotation("x!|VK3#k&ddT", true);
      fieldWriter0.getSize();
      ClassWriter classWriter1 = new ClassWriter(953);
      String string1 = "L&EL";
      Item[] itemArray0 = new Item[7];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)28;
      byte byte0 = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-123);
      byteArray0[8] = (byte)62;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, (byte) (-74), (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -66
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.718171126669182
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-874));
      classWriter0.version = 642;
      classWriter0.addUninitializedType("q", 184);
      String string0 = "g)_Yx/_KT";
      classWriter0.addType("$3'OpqDN");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 642, "of)xo*", "g)_Yx/_KT", "X", "g)_Yx/_KT");
      fieldWriter0.visitAnnotation("of)xo*", true);
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
      Attribute attribute0 = new Attribute("q");
      Attribute attribute1 = attribute0.next;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = '2';
      charArray0[2] = '2';
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.8659992569610426
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(1, "", "", (String) null, "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream2 = null;
      try {
        pipedOutputStream2 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8659992569610426
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(4093, "wheel.asm.Label", "wheel.asm.Label", "wheel.asm.Label", "wheel.asm.Label");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putInt(4093);
      ByteVector byteVector2 = byteVector1.putUTF8("wheel.asm.Label");
      ByteVector byteVector3 = byteVector2.put12(16, 70);
      fieldWriter0.put(byteVector3);
      Attribute attribute0 = new Attribute("oy<_vJ");
      Attribute attribute1 = attribute0.next;
      attribute0.next = null;
      Attribute attribute2 = attribute0.next;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)5;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, 1624, (byte)2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1632
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8361623253853443
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1767);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2228), "", "", (String) null, "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-2551));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0108643020548935
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      String string0 = "wheel.asm.Label";
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(4093, "wheel.asm.Label", "wheel.asm.Label", "wheel.asm.Label", "wheel.asm.Label");
      fieldWriter0.getSize();
      PipedInputStream pipedInputStream0 = new PipedInputStream(953);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9859526183035509
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(953);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(4096, "wheel.asm.Label", "wheel.asm.Label", (String) null, "wheel.asm.Label");
      fieldWriter0.getSize();
      MockFile mockFile0 = new MockFile("wheel.asm.Label");
      MockFile mockFile1 = new MockFile(mockFile0, "_\"AsEP<[BN@[$/");
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(953);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      PipedOutputStream pipedOutputStream2 = null;
      try {
        pipedOutputStream2 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4895424853149775
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "TDNRHynd7z82}`Kd)<", "bD0", "3]CiR&56d", "bD0");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("bD0");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putUTF8("");
      ByteVector byteVector2 = byteVector1.putLong(1);
      byteVector2.putShort(24);
      ByteVector byteVector3 = byteVector1.putUTF8("TDNRHynd7z82}`Kd)<");
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 9, ">.op8[P@YOu]8SJtwD?", "LocalVariableTypeTable", "Deprecated", "LocalVariableTypeTable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(229);
      String string0 = "";
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 229, "", "p7O7E>_", "p7O7E>_", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
