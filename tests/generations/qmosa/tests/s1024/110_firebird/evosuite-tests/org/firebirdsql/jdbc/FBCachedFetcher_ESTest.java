/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 11:38:19 GMT 2019
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.Principal;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.management.remote.JMXPrincipal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.IscDbHandle;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.AbstractIscTrHandle;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.isc_blob_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_tr_handle_impl;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.field.FBBlobField;
import org.firebirdsql.jdbc.field.FBCachedBlobField;
import org.firebirdsql.jdbc.field.FBCachedLongVarCharField;
import org.firebirdsql.jdbc.field.FBLongVarCharField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.724310679362156
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      linkedList1.iterator();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.last();
      fBCachedFetcher0.getRowNum();
      linkedList0.offer((byte[][]) null);
      System.setCurrentTimeMillis(0L);
      fBCachedFetcher0.next();
      linkedList1.add((byte[][]) null);
      fBCachedFetcher0.absolute(1554);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.last();
      fBCachedFetcher0.relative(1);
      boolean boolean0 = fBCachedFetcher0.previous();
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.499749809423553
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      isc_stmt_handle_impl0.getRsr_rdb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      isc_stmt_handle_impl0.setRsr_rdb((isc_db_handle_impl) null);
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      isc_stmt_handle_impl1.setStatementType(1696);
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      isc_stmt_handle_impl1.setRsr_rdb(isc_db_handle_impl0);
      isc_stmt_handle_impl1.setExecutionPlan("PURE_JAVA");
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_stmt_handle_impl0.statement = "W>X=#,-,^";
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.offerFirst((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      linkedList0.add((byte[][]) null);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      fBCachedFetcher0.isLast();
      linkedList0.removeFirst();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      assertEquals(2, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7849898945470346
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      isc_stmt_handle_impl0.getRsr_rdb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      isc_stmt_handle_impl0.setRsr_rdb((isc_db_handle_impl) null);
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      isc_stmt_handle_impl1.setStatementType(1696);
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      isc_stmt_handle_impl1.setRsr_rdb(isc_db_handle_impl0);
      isc_stmt_handle_impl1.setExecutionPlan("PURE_JAVA");
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_stmt_handle_impl0.statement = "W>X=#,-,^";
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.offerFirst((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      fBCachedFetcher0.isLast();
      linkedList0.removeFirst();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W>X=#,-,^");
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.relative(2741);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.first();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.relative(1);
      boolean boolean0 = fBCachedFetcher0.next();
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3771876589015464
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      Integer integer0 = new Integer((-5));
      Integer integer1 = new Integer((-5));
      Integer integer2 = new Integer((-5));
      Integer.divideUnsigned(975, (-105));
      Integer.min((-5), (-1402));
      Integer.max((-2402), 0);
      Integer integer3 = new Integer((-1));
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      linkedList0.toArray(integerArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.previous();
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.365329159198171
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-15);
      Integer integer0 = new Integer((-15));
      Integer integer1 = new Integer((-15));
      Integer integer2 = new Integer((-15));
      Integer.max((-15), (-10));
      Integer integer3 = new Integer((-15));
      Integer integer4 = new Integer((-10));
      Integer integer5 = new Integer(975);
      Integer.getInteger("ISO8859_2", integer5);
      Integer.compare(1014, 1014);
      Integer.divideUnsigned((-15), 975);
      Integer.remainderUnsigned(2004, (-10));
      Integer integer6 = new Integer((-10));
      Integer.min((-15), (-1416));
      Integer integer7 = new Integer((-15));
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer.toUnsignedLong((-10));
      Integer[] integerArray0 = new Integer[4];
      Integer.compareUnsigned((-10), 2004);
      Integer.toUnsignedString((-10));
      Integer.min(1, (-1416));
      Integer.getInteger("D");
      integerArray0[0] = integer1;
      integerArray0[1] = integer4;
      Integer integer8 = new Integer(int0);
      integerArray0[2] = integer1;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.absolute(1);
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4955170051907487
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getRsr_rdb();
      isc_stmt_handle_impl0.setRsr_rdb((isc_db_handle_impl) null);
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl1.setExecutionPlan("PURE_JAVA");
      isc_stmt_handle_impl1.getRsr_rdb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener1 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper1 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener1);
      isc_stmt_handle_impl0.statement = null;
      databaseParameterBufferImp0.addArgument(4015, gDSHelper0.BLOB_LENGTH_REQUEST);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.offerFirst((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.close();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      fBCachedFetcher0.previous();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow((byte[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8809457317913751
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getRsr_rdb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl1.getRsr_rdb();
      isc_stmt_handle_impl0.statement = "W>X=#,-,^";
      databaseParameterBufferImp0.addArgument(4015, gDSHelper0.BLOB_LENGTH_REQUEST);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.offerFirst((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.add((byte[][]) null);
      FBCachedLongVarCharField[] fBCachedLongVarCharFieldArray0 = new FBCachedLongVarCharField[9];
      FBCachedLongVarCharField fBCachedLongVarCharField0 = mock(FBCachedLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBCachedLongVarCharFieldArray0[0] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[1] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[2] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[3] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[4] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[5] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[6] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[7] = fBCachedLongVarCharField0;
      fBCachedLongVarCharFieldArray0[8] = fBCachedLongVarCharField0;
      linkedList0.toArray(fBCachedLongVarCharFieldArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.spliterator();
      boolean boolean0 = fBCachedFetcher0.relative((-946));
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.193877669746141
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray0 = new byte[9][2];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList2);
      linkedList0.pollLast();
      linkedList1.add(byteArray0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      linkedList2.offerLast((byte[][]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList2.spliterator();
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      linkedList4.add(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      linkedList3.spliterator();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      boolean boolean0 = fBCachedFetcher0.next();
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.605767408396337
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      databaseParameterBufferImp0.addArgument(1, 1);
      databaseParameterBufferImp0.getArgumentAsInt(1);
      isc_stmt_handle_impl0.setUpdateCount(1);
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl1.getRsr_rdb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener1 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper1 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener1);
      isc_stmt_handle_impl0.statement = "W>X=#,-,^";
      databaseParameterBufferImp0.addArgument(4018, gDSHelper0.BLOB_LENGTH_REQUEST);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.offerFirst((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.next();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, gDSHelper0.BLOB_LENGTH_REQUEST);
      fBCachedFetcher0.isLast();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.isBeforeFirst();
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.712469964452619
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      databaseParameterBufferImp0.addArgument(1, 1);
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      isc_stmt_handle_impl0.setUpdateCount(400);
      isc_stmt_handle_impl0.getRsr_rdb();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl1.getRsr_rdb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl0.statement = "W>X=#,-,^";
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.offerFirst((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.next();
      fBCachedFetcher0.isLast();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertTrue(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      databaseParameterBufferImp0.addArgument(1, 1);
      databaseParameterBufferImp0.getArgumentAsInt(1);
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.getTr();
      isc_stmt_handle_impl0.registerTransaction((AbstractIscTrHandle) null);
      isc_stmt_handle_impl0.setUpdateCount(1);
      isc_stmt_handle_impl0.getRsr_rdb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl1.getRsr_rdb();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener1 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper1 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener1);
      isc_stmt_handle_impl0.statement = "W>X=#,-,^";
      databaseParameterBufferImp0.addArgument(4001, gDSHelper0.BLOB_LENGTH_REQUEST);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.offerFirst((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.setFetchSize(1);
      fBCachedFetcher0.next();
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.isLast();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.previous();
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(1, fBCachedFetcher0.getFetchSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7824268046877836
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray0 = new byte[9][2];
      linkedList0.offer(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList1.addLast(byteArray0);
      linkedList0.push(byteArray0);
      linkedList1.parallelStream();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList2);
      linkedList0.offerLast(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.previous();
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3822194921698756
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, byte[][]> function0 = (Function<Object, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, byte[][]> function1 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function0);
      Function<Object, byte[][]> function2 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function1);
      unaryOperator0.compose((Function<? super String, ? extends byte[][]>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function<Object, byte[][]> function3 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function1);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, byte[][]> function4 = unaryOperator3.andThen((Function<? super Object, ? extends byte[][]>) function3);
      Function<Object, byte[][]> function5 = unaryOperator3.andThen((Function<? super Object, ? extends byte[][]>) function4);
      Function<Object, byte[][]> function6 = unaryOperator3.andThen((Function<? super Object, ? extends byte[][]>) function5);
      Function<Object, Delayed> function7 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function8 = unaryOperator2.andThen((Function<? super Object, ? extends Delayed>) function7);
      Function<Object, byte[][]> function9 = unaryOperator3.andThen((Function<? super Object, ? extends byte[][]>) function2);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Object, ? extends byte[][]>) function1);
      Function<Object, byte[][]> function10 = unaryOperator2.andThen((Function<? super Object, ? extends byte[][]>) function6);
      function10.andThen((Function<? super byte[][], ? extends Delayed>) function8);
      UnaryOperator<Object> unaryOperator5 = UnaryOperator.identity();
      Function<Object, byte[][]> function11 = unaryOperator5.andThen((Function<? super Object, ? extends byte[][]>) function4);
      Function.identity();
      Function.identity();
      unaryOperator3.apply(function11);
      unaryOperator1.compose((Function<? super Object, ?>) function9);
      function3.compose((Function<? super Object, ?>) unaryOperator2);
      function10.compose((Function<? super FBLongVarCharField, ?>) function9);
      function3.andThen((Function<? super byte[][], ? extends Delayed>) function8);
      unaryOperator4.andThen((Function<? super Object, ? extends byte[][]>) function4);
      function3.andThen((Function<? super byte[][], ?>) unaryOperator4);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9966392780576339
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      isc_stmt_handle_impl0.getRsr_rdb();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.removeRows();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      isc_stmt_handle_impl1.setSingletonResult(true);
      isc_stmt_handle_impl1.setStatementType(1696);
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      isc_db_handle_impl0.setResp_object((-2220));
      isc_stmt_handle_impl1.setRsr_rdb(isc_db_handle_impl0);
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_stmt_handle_impl0.statement = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[][] byteArrayArray0 = null;
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.offerFirst((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      isc_stmt_handle_impl1.setRsr_id_ptr(1696, (-2220));
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3278768613324594
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-15);
      Integer integer0 = new Integer((-15));
      Integer integer1 = new Integer((-15));
      Integer integer2 = new Integer((-15));
      Integer.max((-15), (-15));
      Integer integer3 = new Integer((-15));
      Integer integer4 = new Integer((-15));
      Integer integer5 = new Integer(0);
      Integer.getInteger("ISO8859_2", integer5);
      Integer.compare(1014, 1014);
      Integer.divideUnsigned((-15), 975);
      Integer.remainderUnsigned(2004, (-15));
      Integer integer6 = new Integer((-15));
      Integer.min((-15), (-1416));
      Integer integer7 = new Integer((-15));
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer.toUnsignedLong((-15));
      Integer[] integerArray0 = new Integer[4];
      Integer.compareUnsigned((-15), 2004);
      Integer.toUnsignedString((-15));
      Integer.min(1, (-1416));
      Integer.getInteger("D");
      integerArray0[0] = integer1;
      integerArray0[1] = integer4;
      Integer integer8 = new Integer(int0);
      integerArray0[2] = integer1;
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertTrue(fBCachedFetcher0.isLast());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.363132203143378
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.parallelStream();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList3.spliterator();
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte) (-71);
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList2);
      LinkedList<byte[][]> linkedList9 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList9, fBResultSet1);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][2];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte) (-112);
      byteArray1[3] = (byte) (-103);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-35);
      byteArray1[6] = (byte)82;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)64;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-112);
      byteArray2[3] = (byte) (-103);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)82;
      byteArray3[1] = (byte) (-35);
      byteArray3[2] = (byte) (-35);
      byteArray3[3] = (byte)82;
      byteArray3[4] = (byte) (-103);
      byteArray3[5] = (byte) (-112);
      byteArray3[6] = (byte) (-112);
      byteArray3[7] = (byte) (-112);
      byteArray3[8] = (byte) (-35);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte) (-103);
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte) (-57);
      byteArray4[3] = (byte)82;
      byteArray4[4] = (byte)100;
      byteArray4[5] = (byte) (-103);
      byteArray4[6] = (byte)100;
      byteArray0[3] = byteArray4;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<String, byte[][]> function0 = (Function<String, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends byte[][]>) function0);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      byte[][] byteArray0 = new byte[0][5];
      linkedList0.add(byteArray0);
      UnaryOperator.identity();
      Function<Object, byte[][]> function1 = (Function<Object, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super byte[][], ?>) unaryOperator1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.314432939095597
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      Integer integer0 = new Integer((-2734));
      Integer integer1 = Integer.getInteger("UNSIGNED_ATTRIBUTE", (-1));
      Integer.min(106, 562);
      Integer.compareUnsigned(91, 91);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer[] integerArray0 = new Integer[7];
      integerArray0[5] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer.getInteger("UNSIGNED_ATTRIBUTE", 65535);
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      linkedList0.toArray(integerArray0);
      UnaryOperator.identity();
      byte[][] byteArrayArray0 = null;
      linkedList0.add((byte[][]) null);
      Function.identity();
      Integer.compareUnsigned(25165824, (int) integerArray0[6]);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isLast();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7422767290484256
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      isc_stmt_handle_impl0.getRsr_rdb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.removeRows();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      isc_stmt_handle_impl1.setSingletonResult(true);
      isc_stmt_handle_impl1.setStatementType(1696);
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      isc_db_handle_impl0.setResp_object(1696);
      isc_stmt_handle_impl1.setRsr_rdb(isc_db_handle_impl0);
      isc_stmt_handle_impl1.setExecutionPlan("PURE_JAVA");
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_stmt_handle_impl0.statement = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.offerFirst((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      fBCachedFetcher0.afterLast();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      linkedList0.removeFirst();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0262478229265435
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      linkedList0.pollLast();
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList3.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList3, fBResultSet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      fBCachedFetcher1.updateRow((byte[][]) null);
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][4];
      byte[] byteArray1 = new byte[9];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      linkedList0.add(byteArray0);
      byteArray2[0] = (byte) (-44);
      byteArray2[1] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-44);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[5];
      byteArray4[1] = (byte) (-44);
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte) (-44);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[2];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte)0;
      byteArray0[4] = byteArray5;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8195163165257857
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<String, byte[][]> function0 = (Function<String, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      byte[][] byteArray0 = new byte[8][1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)45;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)45;
      byteArray2[1] = (byte)45;
      byteArray2[2] = (byte)45;
      byteArray2[3] = (byte)45;
      byteArray2[4] = (byte)45;
      byteArray2[5] = (byte)45;
      byteArray2[6] = (byte) (-38);
      byteArray2[7] = (byte)45;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)45;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte) (-38);
      byteArray4[1] = (byte) (-38);
      byteArray4[2] = (byte) (-38);
      byteArray4[3] = (byte)45;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[9];
      byteArray5[0] = (byte) (-38);
      byteArray5[1] = (byte) (-38);
      byteArray5[2] = (byte)45;
      byteArray5[3] = (byte) (-38);
      byteArray5[4] = (byte)45;
      byteArray5[5] = (byte) (-38);
      byteArray5[6] = (byte) (-38);
      byteArray5[7] = (byte)3;
      byteArray5[8] = (byte)45;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[0];
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[3];
      byteArray7[0] = (byte)3;
      byteArray7[1] = (byte)3;
      byteArray7[2] = (byte)45;
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[4];
      byteArray8[0] = (byte)3;
      byteArray8[1] = (byte) (-38);
      byteArray8[2] = (byte) (-38);
      byteArray8[3] = (byte)45;
      byteArray0[7] = byteArray8;
      linkedList0.add(byteArray0);
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, byte[][]> function1 = (Function<Object, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, byte[][]> function2 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function1);
      Function<Object, byte[][]> function3 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function2);
      Function<Object, byte[][]> function4 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function3);
      Function<Object, Delayed> function5 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends Delayed>) function5);
      Function<Object, byte[][]> function6 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function4);
      Function<Object, byte[][]> function7 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function6);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function7.andThen((Function<? super byte[][], ? extends String>) function8);
      Function<Object, byte[][]> function9 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function3);
      Function<byte[][], Delayed> function10 = (Function<byte[][], Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function11 = function6.andThen((Function<? super byte[][], ? extends Delayed>) function10);
      Function<Object, byte[][]> function12 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function4);
      Function.identity();
      Function.identity();
      Function<Object, String> function13 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Object, ?>) function13);
      Function<Object, Delayed> function14 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super Object, ?>) function2);
      function6.andThen((Function<? super byte[][], ? extends Delayed>) function11);
      Function<Object, byte[][]> function15 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function12);
      function15.andThen((Function<? super byte[][], ?>) function9);
      Function<Object, byte[][]> function16 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function7);
      unaryOperator0.compose((Function<? super Delayed, ? extends byte[][]>) function16);
      Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends byte[][]>) function7);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.parallelStream();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray0 = new byte[5][2];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-42);
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)19;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte) (-19);
      byteArray1[5] = (byte)10;
      byteArray1[6] = (byte) (-73);
      byteArray1[7] = (byte) (-114);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-42);
      byteArray2[1] = (byte) (-19);
      byteArray1[2] = (byte)19;
      byteArray2[3] = (byte) (-73);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-114);
      byteArray3[1] = (byte) (-42);
      byteArray3[2] = (byte) (-42);
      byteArray3[3] = (byte) (-19);
      byteArray3[4] = (byte)19;
      byteArray3[5] = (byte)9;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)10;
      byteArray4[1] = (byte) (-30);
      byteArray4[2] = (byte) (-73);
      byte[] byteArray5 = new byte[20];
      byteArray5[0] = (byte)19;
      byteArray5[1] = (byte) (-73);
      byteArray5[2] = (byte) (-19);
      byteArray5[3] = (byte)61;
      byteArray5[4] = (byte)0;
      byteArray5[5] = (byte)19;
      byteArray5[6] = (byte)10;
      byteArray5[7] = (byte) (-32);
      byteArray0[4] = byteArray5;
      linkedList0.add(byteArray0);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList3.toArray();
      linkedList1.add((byte[][]) null);
      linkedList0.spliterator();
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      linkedList5.addLast((byte[][]) null);
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      linkedList2.iterator();
      linkedList4.parallelStream();
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      linkedList5.toArray();
      LinkedList<byte[][]> linkedList9 = new LinkedList<byte[][]>();
      linkedList5.spliterator();
      LinkedList<byte[][]> linkedList10 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList11 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList12 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList13 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList14 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList15 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList16 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList17 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList10, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.relative(1);
      assertFalse(boolean0);
      assertEquals(0, fBResultSet0.getRow());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<String, byte[][]> function0 = (Function<String, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = new byte[1][3];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)57;
      byteArray0[0] = byteArray1;
      unaryOperator0.apply(byteArray0);
      linkedList0.sort(comparator0);
      Function<String, byte[][]> function1 = unaryOperator0.compose((Function<? super String, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<String, String> function2 = Function.identity();
      Function<String, byte[][]> function3 = function1.compose((Function<? super String, ? extends String>) function2);
      Function<Object, FBCachedLongVarCharField> function4 = (Function<Object, FBCachedLongVarCharField>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Delayed, ?>) function4);
      Function.identity();
      Function<Object, FBCachedBlobField> function5 = (Function<Object, FBCachedBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, FBCachedBlobField> function6 = unaryOperator1.andThen((Function<? super Object, ? extends FBCachedBlobField>) function5);
      Function<Object, FBCachedBlobField> function7 = unaryOperator1.andThen((Function<? super Object, ? extends FBCachedBlobField>) function6);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends byte[][]>) function3);
      Function<FBBlobField, String> function8 = (Function<FBBlobField, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function9 = function7.andThen((Function<? super FBCachedBlobField, ? extends String>) function8);
      function6.compose((Function<? super FBCachedBlobField, ?>) function9);
      UnaryOperator<byte[][]> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super byte[][], ?>) function7);
      byte[][] byteArray2 = new byte[0][0];
      linkedList0.add(byteArray2);
      linkedList0.spliterator();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isFirst();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<String, byte[][]> function0 = (Function<String, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function<Object, byte[][]> function1 = (Function<Object, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, byte[][]> function2 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function1);
      Function<Object, byte[][]> function3 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function2);
      Function<Object, byte[][]> function4 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function3);
      Function<Object, Delayed> function5 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Delayed>) function5);
      Function<Object, byte[][]> function7 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function4);
      Function<Object, byte[][]> function8 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function7);
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function8.andThen((Function<? super byte[][], ? extends String>) function9);
      Function<Object, byte[][]> function10 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function2);
      Function<Object, byte[][]> function11 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function10);
      Function<byte[][], Delayed> function12 = (Function<byte[][], Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function13 = function7.andThen((Function<? super byte[][], ? extends Delayed>) function12);
      Function<Object, byte[][]> function14 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function4);
      Function.identity();
      Function.identity();
      Function<Object, String> function15 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Object, ?>) function15);
      Function<Object, Delayed> function16 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super Object, ?>) function2);
      Function<Object, Delayed> function17 = function7.andThen((Function<? super byte[][], ? extends Delayed>) function13);
      Function<Object, byte[][]> function18 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function14);
      function18.andThen((Function<? super byte[][], ?>) function11);
      Function<Object, byte[][]> function19 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function8);
      unaryOperator0.compose((Function<? super Delayed, ? extends byte[][]>) function19);
      Function.identity();
      Function.identity();
      unaryOperator0.andThen((Function<? super byte[][], ? extends Delayed>) function17);
      unaryOperator0.andThen((Function<? super byte[][], ?>) function6);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isEmpty();
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6036051515160747
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.parallelStream();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList3.toArray();
      linkedList3.spliterator();
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[6];
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      linkedList2.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      linkedList1.add((byte[][]) null);
      linkedList3.pollLast();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      linkedList2.offerFirst((byte[][]) null);
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList9 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList10 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList11 = new LinkedList<byte[][]>();
      boolean boolean0 = fBCachedFetcher0.relative((byte)0);
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, byte[][]> function0 = (Function<Object, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, byte[][]> function1 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super byte[][], ? extends String>) function2);
      Function<Object, byte[][]> function3 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function1);
      Function<Object, byte[][]> function4 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function3);
      Function<Object, Delayed> function5 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends Delayed>) function5);
      Function<Object, byte[][]> function6 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function4);
      Function<Object, byte[][]> function7 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function6);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function8).apply(any());
      Function<Object, String> function9 = function7.andThen((Function<? super byte[][], ? extends String>) function8);
      Function.identity();
      function9.apply(function3);
      Function<byte[][], Delayed> function10 = (Function<byte[][], Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function11 = function6.andThen((Function<? super byte[][], ? extends Delayed>) function10);
      Function<Object, byte[][]> function12 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function4);
      Function.identity();
      function12.compose((Function<? super FBLongVarCharField, ?>) function9);
      Function<Object, String> function13 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Object, ?>) function9);
      Function<Object, Delayed> function14 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super Object, ?>) function1);
      Function.identity();
      function3.compose((Function<? super FBBlobField, ?>) function13);
      function6.andThen((Function<? super byte[][], ? extends Delayed>) function11);
      Function<Object, byte[][]> function15 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function12);
      function15.andThen((Function<? super byte[][], ?>) function1);
      Function<Object, byte[][]> function16 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function12);
      unaryOperator0.compose((Function<? super Delayed, ? extends byte[][]>) function16);
      Function.identity();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertTrue(fBCachedFetcher0.isEmpty());
      
      boolean boolean0 = fBCachedFetcher0.last();
      assertFalse(boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<String, byte[][]> function0 = (Function<String, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, byte[][]> function1 = (Function<Object, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super byte[][], ? extends String>) function2);
      Function<Object, Delayed> function3 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Delayed>) function3);
      Function.identity();
      Function.identity();
      unaryOperator1.compose((Function<? super Object, ?>) function4);
      Function.identity();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Principal> function0 = (Function<Object, Principal>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Principal>) function0);
      Function<Object, FBCachedBlobField> function1 = (Function<Object, FBCachedBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, FBCachedBlobField> function2 = unaryOperator0.andThen((Function<? super Object, ? extends FBCachedBlobField>) function1);
      Function<Object, FBCachedBlobField> function3 = unaryOperator0.andThen((Function<? super Object, ? extends FBCachedBlobField>) function2);
      UnaryOperator.identity();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("committed");
      jMXPrincipal0.toString();
      function3.apply(jMXPrincipal0);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<byte[][]> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Delayed> function4 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super byte[][], ? extends Delayed>) function4);
      function3.compose((Function<? super FBCachedLongVarCharField, ?>) unaryOperator0);
      UnaryOperator<byte[][]> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super byte[][], ? extends FBCachedBlobField>) function2);
      byte[][] byteArray0 = new byte[8][4];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte) (-47);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)26;
      byteArray1[4] = (byte) (-5);
      byteArray1[5] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)26;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-47);
      byteArray2[3] = (byte) (-47);
      byteArray2[4] = (byte) (-47);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)26;
      byteArray3[2] = (byte) (-1);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)52;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte) (-1);
      byteArray4[3] = (byte)52;
      byteArray4[4] = (byte) (-1);
      byteArray4[5] = (byte) (-1);
      byteArray4[6] = (byte)26;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[2];
      byteArray5[0] = (byte)26;
      byteArray5[1] = (byte) (-47);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[9];
      byteArray6[0] = (byte) (-78);
      byteArray6[1] = (byte) (-47);
      byteArray6[2] = (byte) (-5);
      byteArray6[3] = (byte)0;
      byteArray6[4] = (byte) (-5);
      byteArray6[5] = (byte) (-47);
      byteArray6[6] = (byte)26;
      byteArray6[7] = (byte)26;
      byteArray6[8] = (byte)0;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[3];
      byteArray7[0] = (byte) (-5);
      byteArray7[1] = (byte) (-47);
      byteArray7[2] = (byte)26;
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[3];
      byteArray8[0] = (byte) (-1);
      byteArray8[1] = (byte) (-5);
      byteArray8[2] = (byte)0;
      byteArray0[7] = byteArray8;
      linkedList0.add(byteArray0);
      Function<Object, byte[][]> function5 = (Function<Object, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, byte[][]> function6 = unaryOperator0.andThen((Function<? super Object, ? extends byte[][]>) function5);
      unaryOperator2.compose((Function<? super String, ? extends byte[][]>) function6);
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.andThen((Function<? super FBCachedBlobField, ? extends Integer>) function7);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      fBCachedFetcher0.isBeforeFirst();
      System.setCurrentTimeMillis(894L);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6210811289767744
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      isc_stmt_handle_impl0.getRsr_rdb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.removeRows();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      isc_stmt_handle_impl1.setSingletonResult(true);
      isc_stmt_handle_impl1.setStatementType(1696);
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      isc_db_handle_impl0.setResp_object((-2220));
      isc_db_handle_impl0.setResp_object(1696);
      isc_stmt_handle_impl1.setRsr_rdb(isc_db_handle_impl0);
      isc_stmt_handle_impl0.unregisterTransaction();
      isc_stmt_handle_impl0.statement = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.offerFirst((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      isc_stmt_handle_impl1.setRsr_id_ptr(1696, (-2220));
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      fBCachedFetcher0.setFetchSize((-2220));
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow((byte[][]) null);
      boolean boolean0 = fBCachedFetcher0.next();
      assertEquals((-2220), fBCachedFetcher0.getFetchSize());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1084013788541878
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][4];
      byte[] byteArray1 = new byte[9];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray2[0] = (byte) (-44);
      byteArray2[1] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-44);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[5];
      byteArray4[1] = (byte) (-44);
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte) (-44);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[2];
      byteArray5[0] = (byte)0;
      byteArray3[0] = (byte)0;
      byteArray0[4] = byteArray5;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.beforeFirst();
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3820, threadFactory0);
      MockThread mockThread0 = new MockThread();
      scheduledThreadPoolExecutor0.remove(mockThread0);
      Thread thread0 = MockThread.currentThread();
      scheduledThreadPoolExecutor0.getTaskCount();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      scheduledThreadPoolExecutor0.schedule((Runnable) thread0, (long) 3820, timeUnit0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.parallelStream();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      Consumer<byte[][]> consumer0 = (Consumer<byte[][]>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList3.toArray();
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      linkedList6.parallelStream();
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      linkedList2.toArray();
      LinkedList<byte[][]> linkedList9 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList10 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList11 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList12 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList13 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList14 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList15 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList16 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList17 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList18 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList19 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList20 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList10, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.first();
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, byte[][]> function0 = (Function<Object, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, byte[][]> function1 = unaryOperator0.andThen((Function<? super Object, ? extends byte[][]>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, byte[][]> function3 = unaryOperator0.andThen((Function<? super Object, ? extends byte[][]>) function1);
      Function<Object, byte[][]> function4 = unaryOperator0.andThen((Function<? super Object, ? extends byte[][]>) function3);
      Function<Object, Delayed> function5 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Delayed>) function5);
      Function<Object, byte[][]> function6 = unaryOperator0.andThen((Function<? super Object, ? extends byte[][]>) function4);
      Function<Object, byte[][]> function7 = unaryOperator0.andThen((Function<? super Object, ? extends byte[][]>) function6);
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function8).apply(any());
      Function<Object, String> function9 = function7.andThen((Function<? super byte[][], ? extends String>) function8);
      Function.identity();
      function9.apply(function3);
      function7.apply(function1);
      Function<byte[][], Delayed> function10 = (Function<byte[][], Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function11 = function6.andThen((Function<? super byte[][], ? extends Delayed>) function10);
      Function<Object, byte[][]> function12 = unaryOperator0.andThen((Function<? super Object, ? extends byte[][]>) function4);
      Function.identity();
      function12.compose((Function<? super FBLongVarCharField, ?>) function9);
      Function<Object, String> function13 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ?>) function9);
      Function<Object, Delayed> function14 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super Object, ?>) function1);
      Function.identity();
      function3.compose((Function<? super FBBlobField, ?>) function13);
      function6.andThen((Function<? super byte[][], ? extends Delayed>) function11);
      Function<Object, byte[][]> function15 = unaryOperator0.andThen((Function<? super Object, ? extends byte[][]>) function12);
      function15.andThen((Function<? super byte[][], ?>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends byte[][]>) function12);
      Function.identity();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.next();
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3820, threadFactory0);
      MockThread.currentThread();
      System.setCurrentTimeMillis(3820);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[5][2];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte) (-15);
      byteArray1[2] = (byte) (-61);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-112);
      byteArray2[1] = (byte) (-15);
      byteArray2[2] = (byte) (-112);
      byteArray2[3] = (byte) (-50);
      byteArray2[4] = (byte) (-61);
      byteArray2[5] = (byte) (-61);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)78;
      byteArray3[1] = (byte) (-15);
      byteArray3[2] = (byte) (-112);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte) (-50);
      byteArray4[1] = (byte)78;
      byteArray4[2] = (byte) (-112);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte) (-50);
      byteArray5[1] = (byte) (-15);
      byteArray5[2] = (byte)78;
      byteArray5[3] = (byte) (-50);
      byteArray5[4] = (byte) (-61);
      byteArray0[4] = byteArray5;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][5];
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Mb7'";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "5d7OiW^y+h$h*";
      stringArray0[4] = "";
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.toArray(stringArray0);
      linkedList0.add(byteArray0);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      linkedList1.pollLast();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      linkedList4.offerFirst((byte[][]) null);
      linkedList1.removeAll(linkedList4);
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.483746783628314
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.close();
      linkedList0.parallelStream();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-175));
      Integer.getInteger("", (-175));
      integerArray0[0] = integer0;
      String string0 = "}mjJ?6ZK2p[f6:#";
      int int0 = 3140;
      Integer.getInteger("}mjJ?6ZK2p[f6:#", integerArray0[0]);
      int int1 = (-1106);
      Integer integer1 = new Integer(0);
      // Undeclared exception!
      try { 
        Integer.remainderUnsigned((-1268), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8809457317913751
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3820, threadFactory0);
      Thread thread0 = MockThread.currentThread();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      scheduledThreadPoolExecutor0.schedule((Runnable) thread0, (long) 3820, timeUnit0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      linkedList3.toArray();
      linkedList1.add((byte[][]) null);
      linkedList0.spliterator();
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      linkedList5.addLast((byte[][]) null);
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      linkedList2.addLast((byte[][]) null);
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      linkedList0.iterator();
      linkedList4.parallelStream();
      LinkedList<byte[][]> linkedList8 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList9 = new LinkedList<byte[][]>();
      linkedList8.toArray();
      LinkedList<byte[][]> linkedList10 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList11 = new LinkedList<byte[][]>();
      linkedList11.spliterator();
      LinkedList<byte[][]> linkedList12 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList13 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList14 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList15 = new LinkedList<byte[][]>();
      Function.identity();
      LinkedList<byte[][]> linkedList16 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute((-320));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<String, byte[][]> function0 = (Function<String, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, byte[][]> function1 = (Function<Object, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, byte[][]> function2 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function1);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super byte[][], ? extends String>) function3);
      Function<Object, byte[][]> function4 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function2);
      Function<Object, Delayed> function5 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Delayed>) function5);
      Function<Object, byte[][]> function7 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function2);
      Function<Object, byte[][]> function8 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function7);
      Function<Object, byte[][]> function9 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function8);
      Function<Object, String> function10 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function11 = function9.andThen((Function<? super byte[][], ? extends String>) function10);
      Function<byte[][], Delayed> function12 = (Function<byte[][], Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function13 = function8.andThen((Function<? super byte[][], ? extends Delayed>) function12);
      Function<Object, byte[][]> function14 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function4);
      Function.identity();
      function14.compose((Function<? super FBLongVarCharField, ?>) function11);
      Function.identity();
      Function<Object, String> function15 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Object, ?>) function11);
      Function<Object, Delayed> function16 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, byte[][]> function17 = function4.compose((Function<? super Object, ?>) function2);
      function8.andThen((Function<? super byte[][], ? extends Delayed>) function13);
      function2.andThen((Function<? super byte[][], ?>) function6);
      function17.andThen((Function<? super byte[][], ?>) function2);
      Function<Object, byte[][]> function18 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function4);
      Function<Object, byte[][]> function19 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function18);
      unaryOperator0.compose((Function<? super Delayed, ? extends byte[][]>) function19);
      Function.identity();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.absolute((-2340));
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<String, byte[][]> function0 = (Function<String, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function<Object, byte[][]> function1 = (Function<Object, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      Function<Object, byte[][]> function2 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function1);
      Function<Object, byte[][]> function3 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function2);
      unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function3);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, byte[][]> function4 = unaryOperator3.andThen((Function<? super Object, ? extends byte[][]>) function2);
      Function<Object, byte[][]> function5 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function4);
      Function<Object, byte[][]> function6 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function3);
      Function<Object, byte[][]> function7 = unaryOperator2.andThen((Function<? super Object, ? extends byte[][]>) function6);
      Function.identity();
      Function<Object, byte[][]> function8 = unaryOperator3.andThen((Function<? super Object, ? extends byte[][]>) function7);
      Function<Object, Object> function9 = function8.andThen((Function<? super byte[][], ?>) function6);
      UnaryOperator<byte[][]> unaryOperator4 = UnaryOperator.identity();
      Function<Object, byte[][]> function10 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function5);
      unaryOperator4.compose((Function<? super Delayed, ? extends byte[][]>) function10);
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function<Object, Delayed> function11 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator4.andThen((Function<? super byte[][], ? extends Delayed>) function11);
      unaryOperator4.compose((Function<? super String, ? extends byte[][]>) function7);
      unaryOperator0.andThen((Function<? super byte[][], ?>) function9);
      linkedList0.replaceAll(unaryOperator4);
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.absolute(400);
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7754337976947767
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<String, byte[][]> function0 = (Function<String, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, byte[][]> function1 = (Function<Object, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, byte[][]> function2 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function1);
      Function<Object, Delayed> function3 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Delayed>) function3);
      Function<Object, byte[][]> function5 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function2);
      Function<Object, byte[][]> function6 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function5);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function6.andThen((Function<? super byte[][], ? extends String>) function7);
      unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function2);
      Function<byte[][], Delayed> function8 = (Function<byte[][], Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function9 = function5.andThen((Function<? super byte[][], ? extends Delayed>) function8);
      Function<Object, byte[][]> function10 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function2);
      Function.identity();
      Function.identity();
      Function<Object, String> function11 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Object, ?>) function11);
      Function<Object, Delayed> function12 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super Object, ?>) function2);
      Function<Object, Delayed> function13 = function5.andThen((Function<? super byte[][], ? extends Delayed>) function9);
      Function<Object, byte[][]> function14 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function10);
      Function<Object, byte[][]> function15 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function2);
      function14.andThen((Function<? super byte[][], ?>) function15);
      Function<Object, byte[][]> function16 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function6);
      unaryOperator0.compose((Function<? super Delayed, ? extends byte[][]>) function16);
      Function.identity();
      Function.identity();
      unaryOperator0.andThen((Function<? super byte[][], ? extends Delayed>) function13);
      byte[][] byteArray0 = new byte[5][5];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-127);
      byteArray1[1] = (byte) (-11);
      byteArray1[2] = (byte) (-34);
      byteArray1[3] = (byte) (-33);
      byteArray1[4] = (byte) (-44);
      byteArray1[5] = (byte)78;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-20);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-127);
      byteArray2[1] = (byte) (-44);
      byteArray2[2] = (byte) (-44);
      byteArray2[3] = (byte) (-33);
      byteArray2[4] = (byte) (-44);
      byteArray2[5] = (byte) (-20);
      byteArray2[6] = (byte) (-34);
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte) (-33);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-44);
      byteArray3[1] = (byte)78;
      byteArray3[2] = (byte) (-33);
      byteArray3[3] = (byte) (-20);
      byteArray3[4] = (byte) (-34);
      byteArray3[5] = (byte) (-20);
      byteArray3[6] = (byte) (-44);
      byteArray3[7] = (byte) (-49);
      byteArray3[8] = (byte) (-127);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte) (-11);
      byteArray4[2] = (byte) (-127);
      byteArray4[3] = (byte)78;
      byteArray4[4] = (byte) (-127);
      byteArray4[5] = (byte) (-34);
      byteArray4[6] = (byte) (-127);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[4];
      byteArray5[0] = (byte) (-34);
      byteArray5[1] = (byte)78;
      byteArray5[2] = (byte) (-34);
      byteArray5[3] = (byte) (-49);
      byteArray0[4] = byteArray5;
      linkedList0.add(byteArray0);
      unaryOperator0.andThen((Function<? super byte[][], ?>) function4);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7754337976947767
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][5];
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-67);
      byteArray1[3] = (byte) (-43);
      byteArray1[4] = (byte) (-24);
      byteArray1[0] = (byte) (-2);
      byteArray1[6] = (byte) (-44);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-44);
      byteArray2[2] = (byte) (-67);
      byteArray2[3] = (byte) (-44);
      byteArray2[4] = (byte) (-2);
      byteArray2[5] = (byte) (-44);
      byteArray2[6] = (byte) (-83);
      byteArray2[7] = (byte) (-67);
      byteArray2[8] = (byte) (-83);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-43);
      byteArray3[1] = (byte) (-24);
      byteArray3[2] = (byte) (-87);
      byteArray3[3] = (byte) (-44);
      byteArray0[1] = byteArray3;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray4 = linkedList0.pollLast();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList0.offerFirst(byteArray4);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList5 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList6 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList7 = new LinkedList<byte[][]>();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      isc_stmt_handle_impl0.unregisterTransaction();
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener1 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper1 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener1);
      databaseParameterBufferImp0.getLength();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener2 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper2 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener2);
      gDSHelper1.getWarnings();
      databaseParameterBufferImp0.getArgumentAsString(16384);
      databaseParameterBufferImp0.addArgument(16384, gDSHelper2.BLOB_LENGTH_REQUEST);
      databaseParameterBufferImp0.addArgument(16384, (String) null);
      databaseParameterBufferImp0.getArgumentAsString(565);
      GDSHelper gDSHelper3 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, (GDSHelper.GDSHelperErrorListener) null);
      databaseParameterBufferImp0.addArgument(68);
      databaseParameterBufferImp0.addArgument(565, 16384);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.getRowNum();
      FBCachedFetcher fBCachedFetcher1 = null;
      try {
        fBCachedFetcher1 = new FBCachedFetcher(gDSHelper2, 16384, 16384, isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Principal> function0 = (Function<Object, Principal>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Principal>) function0);
      Function<Object, FBCachedBlobField> function1 = (Function<Object, FBCachedBlobField>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, FBCachedBlobField> function2 = unaryOperator0.andThen((Function<? super Object, ? extends FBCachedBlobField>) function1);
      Function<Object, FBCachedBlobField> function3 = unaryOperator0.andThen((Function<? super Object, ? extends FBCachedBlobField>) function2);
      UnaryOperator.identity();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("committed");
      jMXPrincipal0.toString();
      function3.apply(jMXPrincipal0);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<byte[][]> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Delayed> function4 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super byte[][], ? extends Delayed>) function4);
      function3.compose((Function<? super FBCachedLongVarCharField, ?>) unaryOperator0);
      UnaryOperator<byte[][]> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super byte[][], ? extends FBCachedBlobField>) function2);
      Function<Object, byte[][]> function5 = (Function<Object, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, byte[][]> function6 = unaryOperator0.andThen((Function<? super Object, ? extends byte[][]>) function5);
      unaryOperator2.compose((Function<? super String, ? extends byte[][]>) function6);
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.andThen((Function<? super FBCachedBlobField, ? extends Integer>) function7);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      UnaryOperator<byte[][]> unaryOperator0 = UnaryOperator.identity();
      Function<String, byte[][]> function0 = (Function<String, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends byte[][]>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function.identity();
      Function.identity();
      Function<Object, byte[][]> function1 = (Function<Object, byte[][]>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, byte[][]> function2 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function1);
      Function<Object, byte[][]> function3 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function2);
      Function<Object, byte[][]> function4 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function3);
      Function<Object, Delayed> function5 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Delayed>) function5);
      Function<Object, byte[][]> function7 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function4);
      Function<Object, byte[][]> function8 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function7);
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function8.andThen((Function<? super byte[][], ? extends String>) function9);
      Function<Object, byte[][]> function10 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function3);
      Function<byte[][], Delayed> function11 = (Function<byte[][], Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Delayed> function12 = function7.andThen((Function<? super byte[][], ? extends Delayed>) function11);
      Function.identity();
      Function.identity();
      Function<Object, String> function13 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Object, ?>) function13);
      Function<Object, Delayed> function14 = (Function<Object, Delayed>) mock(Function.class, new ViolatedAssumptionAnswer());
      function3.compose((Function<? super Object, ?>) function2);
      Function.identity();
      Function<Object, Delayed> function15 = function7.andThen((Function<? super byte[][], ? extends Delayed>) function12);
      Function<Object, byte[][]> function16 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function8);
      function16.andThen((Function<? super byte[][], ?>) function10);
      Function<Object, byte[][]> function17 = unaryOperator1.andThen((Function<? super Object, ? extends byte[][]>) function8);
      unaryOperator0.compose((Function<? super Delayed, ? extends byte[][]>) function17);
      Function.identity();
      Function.identity();
      unaryOperator0.andThen((Function<? super byte[][], ? extends Delayed>) function15);
      unaryOperator0.andThen((Function<? super byte[][], ?>) function6);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener1 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper1 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener1);
      databaseParameterBufferImp0.getLength();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener2 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper2 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener2);
      gDSHelper1.getWarnings();
      databaseParameterBufferImp0.getArgumentAsString(16384);
      databaseParameterBufferImp0.addArgument(16384, gDSHelper2.BLOB_LENGTH_REQUEST);
      databaseParameterBufferImp0.addArgument(16384, (String) null);
      databaseParameterBufferImp0.getArgumentAsString(565);
      databaseParameterBufferImp0.addArgument(565);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][3];
      byteArray0[0] = gDSHelper2.BLOB_LENGTH_REQUEST;
      byteArray0[1] = gDSHelper2.BLOB_LENGTH_REQUEST;
      byteArray0[2] = gDSHelper1.BLOB_LENGTH_REQUEST;
      byteArray0[3] = gDSHelper2.BLOB_LENGTH_REQUEST;
      byteArray0[4] = gDSHelper2.BLOB_LENGTH_REQUEST;
      byteArray0[5] = gDSHelper1.BLOB_LENGTH_REQUEST;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)20;
      byteArray1[1] = (byte)116;
      byteArray1[2] = (byte)94;
      byteArray1[3] = (byte)116;
      byteArray1[4] = (byte)23;
      byteArray0[6] = byteArray1;
      byteArray0[7] = gDSHelper0.BLOB_LENGTH_REQUEST;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9487205928347628
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl1.getRsr_rdb();
      byte byte0 = (byte) (-122);
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)59;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)59;
      String string0 = "pB1ez-TvR\"8`y`+*";
      JavaGDSImpl javaGDSImpl1 = new JavaGDSImpl();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray1 = new byte[0][5];
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[][] byteArray0 = new byte[3][5];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-117);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-120);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)48;
      byteArray2[5] = (byte) (-46);
      byteArray2[6] = (byte) (-44);
      byteArray2[7] = (byte) (-35);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)48;
      byteArray3[1] = (byte) (-5);
      byteArray3[2] = (byte) (-35);
      byteArray0[2] = byteArray3;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }
}
