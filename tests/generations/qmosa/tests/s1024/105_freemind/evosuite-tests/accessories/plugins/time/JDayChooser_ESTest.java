/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 10:16:49 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.filter.condition.IconNotContainedCondition;
import freemind.modes.MindMapNode;
import freemind.modes.common.CommonToggleFoldedAction;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.PopupMenu;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.geom.Rectangle2D;
import java.awt.image.ImageObserver;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.chrono.ChronoPeriod;
import java.time.chrono.Chronology;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.AbstractButton;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.ImageIcon;
import javax.swing.InputVerifier;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JPasswordField;
import javax.swing.JTabbedPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicDesktopIconUI;
import javax.swing.plaf.basic.BasicTabbedPaneUI;
import javax.swing.plaf.basic.BasicTextPaneUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.css.parser.Parser;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.pdf.PDFStream;
import org.apache.fop.pdf.PDFTTFStream;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.248180620909972
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      DebugGraphics.flashColor();
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("2");
      PDFResources pDFResources0 = new PDFResources(4);
      PDFStream pDFStream0 = new PDFStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 4, 4, 1, 33, 'Q');
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1787871076395677
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = DebugGraphics.flashColor();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 4068;
      Color.RGBtoHSB(3946, 270, (-1282), floatArray0);
      jDayChooser0.setForeground(color0);
      XmlDocument xmlDocument0 = new XmlDocument();
      color0.getComponents(floatArray0);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.monthChooser = null;
      jDayChooser0.setMaxDayCharacters(3946);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      floatArray0[0] = (float) (byte)92;
      byteArray0[3] = (byte)37;
      int int0 = ImageObserver.WIDTH;
      jDayChooser0.getDay();
      jDayChooser0.setMaxDayCharacters(1);
      IconNotContainedCondition iconNotContainedCondition0 = new IconNotContainedCondition("day");
      jDayChooser0.setDay((byte)92);
      Locale locale0 = xmlDocument0.getLocale();
      jDayChooser0.setLocale(locale0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1827904227332886
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = DebugGraphics.flashColor();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 4073;
      Color.RGBtoHSB(3946, 270, (-1282), floatArray0);
      jDayChooser0.setForeground(color0);
      XmlDocument xmlDocument0 = new XmlDocument();
      color0.getComponents(floatArray0);
      jDayChooser0.setMaxDayCharacters(3946);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      floatArray0[0] = (float) (byte)92;
      byteArray0[3] = (byte)37;
      jDayChooser0.getHeight();
      jDayChooser0.getDay();
      jDayChooser0.getDay();
      jDayChooser0.getVerifyInputWhenFocusTarget();
      jDayChooser0.setMaxDayCharacters(1);
      IconNotContainedCondition iconNotContainedCondition0 = new IconNotContainedCondition("day");
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2559727350804337
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      float[] floatArray0 = new float[6];
      floatArray0[1] = 0.6834632F;
      floatArray0[2] = 0.6834632F;
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setMaxDayCharacters(29);
      jDayChooser0.getDay();
      Font font0 = new Font("year", 14, 29);
      jDayChooser0.setFont(font0);
      JDayChooser jDayChooser1 = new JDayChooser();
      Rectangle rectangle0 = new Rectangle((-664), 14);
      jDayChooser1.setMaxDayCharacters(0);
      jDayChooser0.getDay();
      jDayChooser1.setMaxDayCharacters((-664));
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser1.setDay(9990);
      assertEquals(28, jDayChooser1.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.14246308463095
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      DebugGraphics.flashColor();
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setMaxDayCharacters(4);
      String string0 = null;
      BasicTextPaneUI basicTextPaneUI0 = new BasicTextPaneUI();
      JPasswordField jPasswordField0 = null;
      try {
        jPasswordField0 = new JPasswordField("output_xml.properties", (-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // columns less than zero.
         //
         verifyException("javax.swing.JTextField", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.382897784324307
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(614, 345, 614, (-677), (-443));
      mockGregorianCalendar0.getCalendarType();
      jDayChooser0.repaint();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      Color color0 = jDayChooser0.weekdayForeground;
      Color color1 = Color.lightGray;
      Color color2 = Color.BLUE;
      jDayChooser0.setDecorationBackgroundColor(color1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Locale locale0 = Locale.ITALIAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("31", locale0);
      ParsePosition parsePosition0 = new ParsePosition(16);
      mockSimpleDateFormat0.parse("PzSqV/mTpv", parsePosition0);
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      jDayChooser0.drawDays();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date1.toString());
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPropertyChangeListeners("gregory");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2233), (-2020L), 614, (-2233), '(');
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1239939941938686
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      DebugGraphics.flashColor();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, (-1355), 4, (-2407), (-2407));
      mockGregorianCalendar0.getCalendarType();
      jDayChooser1.repaint();
      JDayChooser jDayChooser2 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser2.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2929293709159797
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      float[] floatArray0 = new float[6];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setMaxDayCharacters(29);
      jDayChooser0.getDay();
      Font font0 = new Font("year", 14, 29);
      jDayChooser0.setFont(font0);
      JDayChooser jDayChooser1 = new JDayChooser();
      Rectangle rectangle0 = new Rectangle((-664), 14);
      rectangle0.intersects((Rectangle2D) rectangle0);
      rectangle0.setRect(0.0, 12.1822, (double) 0.0F, (double) 12);
      rectangle0.intersects((Rectangle2D) rectangle0);
      BasicDesktopIconUI basicDesktopIconUI0 = new BasicDesktopIconUI();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IconNotContainedCondition iconNotContainedCondition0 = new IconNotContainedCondition("West");
      jDayChooser1.setDay(957);
      Date date0 = jDayChooser1.minSelectableDate;
      jDayChooser1.setMaxSelectableDate(date0);
      assertEquals(28, jDayChooser1.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4381826883911786
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      DebugGraphics.flashColor();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 4, 1, (-2407), 1);
      mockGregorianCalendar0.getCalendarType();
      jDayChooser0.repaint();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      Color color0 = jDayChooser0.weekdayForeground;
      assertEquals((-16754012), color0.getRGB());
      
      Color color1 = Color.lightGray;
      Color color2 = Color.BLUE;
      jDayChooser0.setDecorationBackgroundColor(color2);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.drawDays();
      jDayChooser0.setMinSelectableDate(date0);
      MenuElement[] menuElementArray0 = new MenuElement[1];
      defaultTreeCellRenderer0.getPropertyChangeListeners("GDoVC>");
      menuElementArray0[0] = (MenuElement) null;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(defaultTreeCellRenderer0, 17, (-4125L), 871, 17, ']', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2308572865913243
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Color color0 = Color.ORANGE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.getDay();
      jDayChooser0.setMaxDayCharacters(31);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay(14);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.addListeners(31);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.206790369086876
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DebugGraphics.flashColor();
      jDayChooser0.setMaxDayCharacters(3);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setDay(43);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 14, 43, (-662), 14, 'R', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      jDayChooser0.setFocus();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2075360424168844
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = DebugGraphics.flashColor();
      jDayChooser0.setForeground(color0);
      XmlDocument xmlDocument0 = new XmlDocument();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setMaxDayCharacters(270);
      jDayChooser0.getDaysInMonth();
      JYearChooser jYearChooser1 = jDayChooser0.yearChooser;
      int int0 = ImageObserver.ERROR;
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDay(48);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2875037899230564
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      float[] floatArray0 = new float[6];
      floatArray0[1] = 0.0F;
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setMaxDayCharacters(29);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      Font font0 = new Font("year", 14, 29);
      PDFResources pDFResources0 = new PDFResources(13);
      PDFStream pDFStream0 = new PDFStream();
      PDFTTFStream pDFTTFStream0 = new PDFTTFStream(29);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, pDFStream0, 29, 1460);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      FontInfo fontInfo0 = pDFDocumentGraphics2D0.getFontInfo();
      pDFPage0.getDocument();
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, (PDFDocument) null, pDFPage0, "31", "A9aTc$GZW--`^e[{", 2326.315F);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.221703399175059
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      float[] floatArray0 = new float[7];
      floatArray0[1] = (-9.304043F);
      floatArray0[2] = 4.492931F;
      floatArray0[3] = (-483.0489F);
      floatArray0[4] = (-483.0489F);
      floatArray0[5] = (-1748.7484F);
      jDayChooser0.getDaysInMonth();
      floatArray0[6] = 2743.357F;
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      int int0 = ImageObserver.ERROR;
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDay(24);
      assertEquals(24, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1446141102374945
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = DebugGraphics.flashColor();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 4073;
      Color.RGBtoHSB(3946, 270, (-1282), floatArray0);
      jDayChooser0.setForeground(color0);
      XmlDocument xmlDocument0 = new XmlDocument();
      color0.getComponents(floatArray0);
      jDayChooser0.setMaxDayCharacters(3946);
      floatArray0[0] = (float) (byte)92;
      jDayChooser0.getDay();
      jDayChooser0.setMaxDayCharacters(1);
      IconNotContainedCondition iconNotContainedCondition0 = new IconNotContainedCondition("day");
      jDayChooser0.setDay((byte)92);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWidth();
      Parser parser0 = new Parser();
      parser0.getLocale();
      String[] stringArray0 = MindMapNode.NODE_STYLES;
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      jDayChooser0.getWidth();
      jDayChooser0.setDay(28);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Color color0 = Color.lightGray;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Color color0 = Color.ORANGE;
      int int0 = SwingConstants.NORTH_WEST;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(26);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2640425030466975
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      JDayChooser jDayChooser1 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 39, (-140L), 1, 39, 'V');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser1.isDayBordersVisible();
      assertEquals(15, jDayChooser1.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 32);
      jDayChooser0.focusGained(focusEvent0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      stringArray0[8] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.058591591902833
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DebugGraphics.flashColor();
      int int0 = ImageObserver.HEIGHT;
      JButton jButton0 = new JButton();
      jDayChooser0.setDay(2);
      Rectangle rectangle0 = new Rectangle((-891), 13);
      BasicTabbedPaneUI basicTabbedPaneUI0 = new BasicTabbedPaneUI();
      JTabbedPane jTabbedPane0 = null;
      try {
        jTabbedPane0 = new JTabbedPane(270);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Insets insets0 = new Insets((-552), 16, 36, (-1833));
      jDayChooser0.setDay(36);
      int int0 = (-618);
      Rectangle rectangle0 = new Rectangle((-618), 36);
      BasicTabbedPaneUI basicTabbedPaneUI0 = new BasicTabbedPaneUI();
      JTabbedPane jTabbedPane0 = null;
      try {
        jTabbedPane0 = new JTabbedPane(36);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0540989150393463
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Color color0 = Color.lightGray;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1779), 15, 5);
      TimeZone timeZone0 = TimeZone.getTimeZone("Metal");
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0);
      mockGregorianCalendar1.getGregorianChange();
      IconNotContainedCondition iconNotContainedCondition0 = new IconNotContainedCondition("Metal");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-1779));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1962175022002226
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Color color0 = Color.cyan;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1779), 15, 5);
      TimeZone timeZone0 = TimeZone.getTimeZone("Metal");
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0);
      MockDate mockDate0 = new MockDate(15, 5, 5, 5, 15, (-1779));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.getMaxSelectableDate();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.170076619162811
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      jDayChooser0.getPropertyChangeListeners("&iZ;JH|KDyWqg,5(D");
      jDayChooser0.updateUI();
      jDayChooser0.getSundayForeground();
      jDayChooser0.removeNotify();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = 9;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 9);
      jDayChooser0.focusLost(focusEvent0);
      Instant instant0 = MockInstant.ofEpochMilli(9);
      ChronoField chronoField0 = ChronoField.AMPM_OF_DAY;
      TemporalUnit temporalUnit0 = chronoField0.getRangeUnit();
      Instant instant1 = MockInstant.truncatedTo(instant0, temporalUnit0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.getExtensionKeys();
      Chronology chronology0 = Chronology.ofLocale(locale0);
      locale0.getScript();
      ChronoPeriod chronoPeriod0 = chronology0.period(9, 9, 10130);
      // Undeclared exception!
      try { 
        MockInstant.plus(instant1, (TemporalAmount) chronoPeriod0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported unit: Months
         //
         verifyException("java.time.Instant", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.26550320228192
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-103.05054F);
      floatArray0[1] = (-483.0489F);
      floatArray0[2] = 2743.357F;
      floatArray0[3] = (-483.0489F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 2743.357F;
      floatArray0[6] = 2743.357F;
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMaxDayCharacters(48);
      jDayChooser1.getDay();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser1.setMaxDayCharacters(14);
      System.setCurrentTimeMillis(0L);
      Color color0 = jDayChooser1.getSundayForeground();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals((-6029312), color0.getRGB());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.260479000700477
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWidth();
      Parser parser0 = new Parser();
      Color color0 = jDayChooser0.weekdayForeground;
      Color color1 = Color.lightGray;
      Color color2 = Color.BLUE;
      jDayChooser0.setDecorationBackgroundColor(color0);
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.drawDays();
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.240235895383868
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String string0 = AbstractButton.PRESSED_ICON_CHANGED_PROPERTY;
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      Locale locale0 = Locale.UK;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ImageIcon imageIcon0 = new ImageIcon("day", "month");
      jDayChooser_DecoratorButton0.getDisplayedMnemonicIndex();
      jDayChooser_DecoratorButton0.setIcon(imageIcon0);
      jDayChooser_DecoratorButton0.isFocusable();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.298626698937879
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      float[] floatArray0 = new float[6];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 4.492931F;
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setMaxDayCharacters(29);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      Font font0 = new Font("year", 14, 29);
      jDayChooser0.setFont(font0);
      JDayChooser jDayChooser1 = new JDayChooser();
      Rectangle rectangle0 = new Rectangle((-664), 14);
      Rectangle rectangle1 = new Rectangle(rectangle0);
      rectangle1.intersects((Rectangle2D) rectangle0);
      BasicDesktopIconUI basicDesktopIconUI0 = new BasicDesktopIconUI();
      IconNotContainedCondition iconNotContainedCondition0 = new IconNotContainedCondition("exact");
      jDayChooser0.setDay(14);
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.215848592226736
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      JDayChooser jDayChooser1 = new JDayChooser(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      jDayChooser1.setFocusTraversalKeysEnabled(true);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser1.getDay();
      jDayChooser0.getDay();
      jDayChooser1.setMaxDayCharacters((byte)37);
      IconNotContainedCondition iconNotContainedCondition0 = new IconNotContainedCondition("day");
      jDayChooser1.setDay((-3588));
      assertEquals(1, jDayChooser1.getDay());
      
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DebugGraphics.flashColor();
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(954, 1213, (-4623), 228, 954, 1213);
      mockGregorianCalendar0.isLeapYear(33);
      jDayChooser0.getMinimumSize();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.4115350270426315
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 4.492931F;
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setMaxDayCharacters(29);
      jDayChooser0.getDay();
      jDayChooser0.validate();
      Font font0 = new Font("year", 14, 29);
      jDayChooser0.setFont(font0);
      JDayChooser jDayChooser1 = new JDayChooser();
      Rectangle rectangle0 = new Rectangle((-664), 14);
      Rectangle rectangle1 = new Rectangle(rectangle0);
      rectangle1.intersects((Rectangle2D) rectangle0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 18, 3128L, (-664), (-664), '\'');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.setEnabled(false);
      jDayChooser1.setMonth(37);
      jDayChooser1.drawDays();
      jDayChooser1.getWeekdayForeground();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1598120680605626
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.oldDayBackgroundColor = null;
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setYear((-272908544));
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, 39, 39, 210, 22, 'V');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1364963435405357
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Insets insets0 = new Insets((-552), 16, 181, (-1833));
      EmptyBorder emptyBorder0 = new EmptyBorder((-1833), 181, (-1833), 16);
      TitledBorder titledBorder0 = new TitledBorder(emptyBorder0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.setBorder(emptyBorder0);
      Color color0 = jDayChooser0.getForeground();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-552);
      insets0.right = 42;
      floatArray0[1] = (float) 16;
      floatArray0[2] = (float) 42;
      floatArray0[3] = (float) 42;
      floatArray0[4] = (-1748.7484F);
      floatArray0[5] = (float) 16;
      floatArray0[7] = (float) (-552);
      floatArray0[8] = (-1748.7484F);
      color0.getComponents(floatArray0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setMaxDayCharacters((-1833));
      jDayChooser0.getDay();
      jDayChooser0.setMaxDayCharacters((-552));
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay(721);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.transferFocusDownCycle();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.initDecorations();
      Boolean boolean0 = new Boolean(false);
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!=$_";
      stringArray0[1] = "";
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-2659));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1911736504523724
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DebugGraphics.flashColor();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.getDay();
      jDayChooser0.getDay();
      jDayChooser0.setMaxDayCharacters(14);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay(1513);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.132643849015092
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.setEnabled(false);
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(true);
      float float0 = 1820.88F;
      Color color0 = null;
      try {
        color0 = new Color(1708.5275F, 1820.88F, 1708.5275F, 1820.88F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Alpha Red Green Blue
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2007629417128554
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      defaultTreeCellRenderer0.setVerticalAlignment(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      JDayChooser jDayChooser1 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 39, (-140L), 1, 39, 'V');
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser1.getDay());
      
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 4.492931F;
      floatArray0[3] = (-483.0489F);
      floatArray0[5] = (-1748.7484F);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 31, 1227, 31, 31, 'b');
      DropMode dropMode0 = DropMode.ON_OR_INSERT;
      ActionEvent actionEvent0 = new ActionEvent(dropMode0, 1152, "24");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.DropMode cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2021902458859617
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultListModel<MockCalendar> defaultListModel0 = new DefaultListModel<MockCalendar>();
      JList<MockCalendar> jList0 = new JList<MockCalendar>(defaultListModel0);
      Color color0 = jList0.getSelectionForeground();
      Color.getColor("95#mkPpBa?pR#");
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getDaysInMonth();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 28, "day", (-282L), 28);
      jDayChooser0.initDecorations();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Class<CommonToggleFoldedAction> class0 = CommonToggleFoldedAction.class;
      jDayChooser0.getListeners(class0);
      jDayChooser0.getDayPanel();
      jDayChooser0.getInputMethodListeners();
      jDayChooser0.setBounds(0, 4218, 990, 990);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      DebugGraphics.flashColor();
      int int0 = ImageObserver.HEIGHT;
      JButton jButton0 = new JButton();
      ActionEvent actionEvent0 = new ActionEvent(jButton0, (-976), "l2aZp*Oj", 2);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DebugGraphics.flashColor();
      int int0 = ImageObserver.HEIGHT;
      JButton jButton0 = new JButton();
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 47, "l2aZp*Oj", 2);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.133754759903554
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.drawWeeks();
      jDayChooser0.setMonth(14);
      Locale locale0 = Locale.JAPANESE;
      DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      jDayChooser0.setDay(14);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2640677472050417
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Color color0 = Color.ORANGE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getComponentListeners();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPropertyChangeListeners("accessories.plugins.time.JDayChooser");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 1249, (-918L), 1335, (-2201), 'E');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      System.setCurrentTimeMillis(100L);
      jDayChooser1.getDayPanel();
      jDayChooser1.setMonth(160);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.97F;
      floatArray0[1] = 0.97F;
      floatArray0[3] = (-483.0489F);
      floatArray0[4] = (-883.8F);
      floatArray0[5] = (-883.8F);
      floatArray0[6] = 2743.357F;
      color0.getComponents(floatArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      jDayChooser0.dayNames = stringArray0;
      jDayChooser0.setWeekdayForeground(color0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.setToolTipText((String) null);
      jYearChooser0.setName("day");
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.initDecorations();
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 4, 1, (-2407), 1);
      mockGregorianCalendar0.getCalendarType();
      Color color0 = Color.lightGray;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 0;
      long long0 = 141L;
      int int1 = 889;
      jDayChooser0.requestFocus(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 141L, 889, 0, 't');
      int int2 = (-1192);
      InputEvent.getModifiersExText((-1192));
      keyEvent0.setSource(jDayChooser0);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.getColorModel();
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.1598187038266783
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DebugGraphics.flashColor();
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = jDayChooser0.getLocale();
      locale0.getDisplayLanguage(locale1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setLocale(locale1);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.242070837919692
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Color color0 = Color.ORANGE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getComponentListeners();
      Color color1 = Color.BLUE;
      jDayChooser0.setDecorationBackgroundColor(color1);
      jDayChooser0.drawDays();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getPropertyChangeListeners("day");
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, 1335, (-938), 228, 228, 'x');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDaysInMonth();
      System.setCurrentTimeMillis(1593L);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      DebugGraphics.flashColor();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, (-2407), 1);
      mockGregorianCalendar0.getCalendarType();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      Color color0 = jDayChooser0.weekdayForeground;
      Color color1 = Color.lightGray;
      BasicTabbedPaneUI basicTabbedPaneUI0 = new BasicTabbedPaneUI();
      JTabbedPane jTabbedPane0 = new JTabbedPane(1);
      // Undeclared exception!
      try { 
        basicTabbedPaneUI0.getTabBounds(jTabbedPane0, 1455);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicTabbedPaneUI", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.124806616475451
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      HierarchyListener hierarchyListener2 = AWTEventMulticaster.add((HierarchyListener) null, hierarchyListener1);
      AWTEventMulticaster.remove(hierarchyListener2, hierarchyListener2);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove(hierarchyListener2, hierarchyListener1);
      AWTEventMulticaster.add(hierarchyListener2, (HierarchyListener) null);
      jDayChooser0.setMaxDayCharacters(25);
      String[] stringArray0 = MindMapNode.NODE_STYLES;
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
  }
}
