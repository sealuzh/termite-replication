/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 11:33:20 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Iterator;
import java.util.Vector;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.dirsIncluded = vector1;
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      vector0.add("");
      archiveScanner0.dirsNotIncluded = vector0;
      vector0.add("s']De!E)pAn<dp");
      vector0.addElement("Gz|?iJbg78|[&t\"");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      archiveScanner0.setIncludes(stringArray0);
      String string0 = "<{>%q=yp\"w|H";
      vector0.add("<{>%q=yp\"w|H");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis((-1932L));
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("Gz|?iJbg78|[&t\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      vector0.add("");
      archiveScanner0.dirsNotIncluded = vector0;
      vector0.add("n");
      vector0.add("s']De!E)pAn<dp");
      vector0.addElement("{3[/D5Tp^['W");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      archiveScanner0.setIncludes(stringArray0);
      vector0.add(".WAR");
      archiveScanner0.setExcludes(stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = ".WAR";
      stringArray1[1] = "";
      stringArray1[2] = ".WAR";
      stringArray1[3] = "s']De!E)pAn<dp";
      stringArray1[4] = "zN`P'\"";
      stringArray1[5] = "n";
      archiveScanner0.setIncludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "s']De!E)pAn<dp", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("Error trying to initialize zipfile for ");
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      vector1.add((Object) vector0);
      vector1.add(object0);
      vector0.iterator();
      vector0.add((Object) vector1);
      Object object1 = new Object();
      vector0.add((Object) null);
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "?bAmPCv]'_N5bU";
      stringArray0[1] = "?bAmPCv]'_N5bU";
      stringArray0[2] = "Error trying to initialize zipfile for ";
      stringArray0[3] = "Error trying to initialize zipfile for ";
      stringArray0[4] = "Error trying to initialize zipfile for ";
      archiveScanner0.setExcludes(stringArray0);
      Vector<Object> vector4 = new Vector<Object>();
      Vector<Object> vector5 = new Vector<Object>();
      Object object4 = new Object();
      Vector<Object> vector6 = new Vector<Object>();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Error trying to initialize zipfile for ";
      Vector<PipedInputStream> vector7 = new Vector<PipedInputStream>();
      Vector<PipedInputStream> vector8 = new Vector<PipedInputStream>(vector7);
      archiveScanner0.filesIncluded = vector8;
      stringArray1[1] = "Error trying to initialize zipfile for ";
      stringArray1[2] = ".ZIP";
      stringArray1[3] = "Error trying to initialize zipfile for ";
      archiveScanner0.setIncludes(stringArray1);
      archiveScanner0.processFile(".ZIP");
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.575083125286704
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[2] = (byte) (-19);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.setPermissions(evoSuiteFile2, true, true, true);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      String[] stringArray0 = new String[1];
      archiveScanner0.haveSlowResults = true;
      stringArray0[0] = "";
      archiveScanner0.setIncludes(stringArray0);
      Integer integer0 = new Integer((byte) (-19));
      // Undeclared exception!
      archiveScanner0.processDirectory(improvedFile0, "C{E7WhQja{Z", false);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("X6I?@t*b00]pqL%|2R2~LB^5HP.:ar");
      Vector<Object> vector0 = new Vector<Object>();
      Integer integer0 = new Integer(15);
      vector0.add((Object) null);
      Object object0 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      vector1.add((Object) vector0);
      vector0.iterator();
      vector0.add((Object) vector1);
      vector1.iterator();
      Object object1 = new Object();
      vector0.add((Object) null);
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "?bAmPCv]'_N5bU";
      stringArray0[1] = "?bAmPCv]'_N5bU";
      stringArray0[2] = "X6I?@t*b00]pqL%|2R2~LB^5HP.:ar";
      stringArray0[3] = "X6I?@t*b00]pqL%|2R2~LB^5HP.:ar";
      stringArray0[4] = "X6I?@t*b00]pqL%|2R2~LB^5HP.:ar";
      archiveScanner0.excludes = stringArray0;
      archiveScanner0.setExcludes(stringArray0);
      Vector<Object> vector4 = new Vector<Object>();
      Vector<Object> vector5 = new Vector<Object>();
      Vector<Object> vector6 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector6;
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "X6I?@t*b00]pqL%|2R2~LB^5HP.:ar", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.563511417028629
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      vector0.add("");
      archiveScanner0.dirsNotIncluded = vector0;
      vector0.add("s']De!E)pAn<dp");
      vector0.addElement("{3[/D5Tp^['W");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      archiveScanner0.setIncludes(stringArray0);
      vector0.add(".WAR");
      vector0.add("<{>%q=yp\"w|H");
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-1932L));
      System.setCurrentTimeMillis((-1932L));
      System.setCurrentTimeMillis(0L);
      archiveScanner0.processDirectory(improvedFile0, "X[-57s%R?=n+v<?V4", false);
      assertEquals(0, ArchiveScanner.FILE);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("(}cQWIA^YI");
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.markSupported();
      byteArrayInputStream2.mark(4);
      byteArrayInputStream2.reset();
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(byteArrayInputStream2, (InputStream) null);
      byteArrayInputStream0.read();
      sequenceInputStream1.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream4.markSupported();
      byteArrayInputStream4.mark(0);
      sequenceInputStream1.mark((-64));
      byteArrayInputStream4.reset();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, byteArrayInputStream3);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector0;
      String[] stringArray0 = new String[0];
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "(}cQWIA^YI";
      stringArray1[1] = "(}cQWIA^YI";
      stringArray1[2] = "(}cQWIA^YI";
      stringArray1[3] = "(}cQWIA^YI";
      stringArray1[4] = "(}cQWIA^YI";
      stringArray1[5] = "(}cQWIA^YI";
      stringArray1[6] = "(}cQWIA^YI";
      stringArray1[7] = "(}cQWIA^YI";
      archiveScanner0.setIncludes(stringArray1);
      try { 
        archiveScanner0.processArchive(improvedFile0, "(}cQWIA^YI");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, (}cQWIA^YI
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      vector1.add((Object) vector0);
      vector0.add((Object) "");
      vector0.iterator();
      vector1.iterator();
      Object object1 = new Object();
      vector0.add((Object) null);
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".2rror.";
      stringArray0[1] = ".2rror.";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      archiveScanner0.setExcludes(stringArray0);
      Vector<Object> vector4 = new Vector<Object>();
      Vector<Object> vector5 = new Vector<Object>();
      Object object4 = new Object();
      Vector<Object> vector6 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector6;
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processArchive(improvedFile0, ".2rror.");
      archiveScanner0.addDefaultExcludes();
      vector6.addElement(object2);
      vector6.add((Object) null);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(".zip");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      byteArrayInputStream0.reset();
      byteArrayInputStream1.mark((-2494));
      sequenceInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, byteArrayInputStream2);
      byteArrayInputStream1.markSupported();
      byteArrayInputStream2.markSupported();
      byteArrayInputStream2.mark((byte)0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream1);
      sequenceInputStream1.close();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "K,";
      stringArray0[2] = "";
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      archiveScanner0.dirsExcluded = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      Object object0 = new Object();
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("Q4;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-60);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.reset();
      byteArrayInputStream1.mark((-2494));
      sequenceInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.close();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, byteArrayInputStream2);
      byteArrayInputStream1.markSupported();
      byteArrayInputStream2.markSupported();
      byteArrayInputStream2.mark((byte)0);
      sequenceInputStream0.read(byteArray0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream1);
      sequenceInputStream1.close();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "K,";
      stringArray0[2] = "";
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      vector0.add(pipedInputStream0);
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.setExcludes(stringArray0);
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      Object object0 = new Object();
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      Vector<Object> vector0 = new Vector<Object>();
      Integer integer0 = new Integer(2);
      vector0.add((Object) integer0);
      Object object0 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      vector1.add((Object) vector0);
      vector0.iterator();
      vector1.iterator();
      Object object1 = new Object();
      vector0.add((Object) null);
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".2rror.";
      stringArray0[1] = ".2rror.";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      archiveScanner0.setExcludes(stringArray0);
      Vector<Object> vector4 = new Vector<Object>();
      Vector<Object> vector5 = new Vector<Object>();
      Object object4 = new Object();
      Vector<Object> vector6 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector6;
      String[] stringArray1 = new String[4];
      stringArray1[0] = "K,";
      stringArray1[1] = "K,";
      stringArray1[2] = "K,";
      stringArray1[3] = "";
      archiveScanner0.setIncludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("K,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("v*M!/FAraR6E6KnT]&");
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.markSupported();
      byteArrayInputStream1.mark(35);
      byteArrayInputStream2.reset();
      sequenceInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(byteArrayInputStream2, byteArrayInputStream4);
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream5.read();
      byteArrayInputStream1.markSupported();
      sequenceInputStream1.read(byteArray0);
      sequenceInputStream1.read();
      ByteArrayInputStream byteArrayInputStream6 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream6.markSupported();
      byteArrayInputStream6.read();
      sequenceInputStream1.mark((-64));
      byteArrayInputStream0.reset();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(byteArrayInputStream1, byteArrayInputStream5);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "v*M!/FAraR6E6KnT]&";
      stringArray0[1] = "v*M!/FAraR6E6KnT]&";
      stringArray0[2] = "v*M!/FAraR6E6KnT]&";
      stringArray0[3] = "v*M!/FAraR6E6KnT]&";
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      stringArray0[4] = "v*M!/FAraR6E6KnT]&";
      stringArray0[5] = "v*M!/FAraR6E6KnT]&";
      stringArray0[6] = "v*M!/FAraR6E6KnT]&";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "v*M!/FAraR6E6KnT]&", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("rn");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[0];
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "rn";
      stringArray1[1] = "rn";
      stringArray1[2] = "rn";
      stringArray1[3] = "rn";
      stringArray1[4] = "rn";
      stringArray1[5] = "rn";
      stringArray1[6] = "rn";
      stringArray1[7] = "rn";
      archiveScanner0.setIncludes(stringArray1);
      System.setCurrentTimeMillis(1909L);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "rn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      Vector<Object> vector0 = new Vector<Object>();
      Integer integer0 = new Integer((-4));
      vector0.add((Object) integer0);
      Object object0 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      vector1.add((Object) vector0);
      vector0.iterator();
      vector1.iterator();
      Object object1 = new Object();
      vector0.add((Object) null);
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", suffix ";
      stringArray0[1] = ", suffix ";
      stringArray0[2] = "K,";
      stringArray0[3] = "";
      stringArray0[4] = "";
      archiveScanner0.setExcludes(stringArray0);
      Vector<Object> vector4 = new Vector<Object>();
      Vector<Object> vector5 = new Vector<Object>();
      Object object4 = new Object();
      Vector<Object> vector6 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector6;
      String[] stringArray1 = new String[4];
      stringArray1[0] = "K,";
      stringArray1[1] = "K,";
      stringArray1[2] = "K,";
      stringArray1[3] = "";
      archiveScanner0.setIncludes(stringArray1);
      archiveScanner0.processFile("K,");
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("!", "!");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      Object object1 = new Object();
      String string0 = ".2rror.";
      vector1.add((Object) "!");
      Object object2 = new Object();
      vector1.remove((Object) improvedFile0);
      Vector<Object> vector2 = new Vector<Object>();
      vector1.add((Object) ".2rror.");
      Object object3 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!";
      Vector<Object> vector4 = new Vector<Object>();
      archiveScanner0.filesNotIncluded = vector4;
      stringArray0[1] = "!";
      archiveScanner0.setExcludes(stringArray0);
      DirectoryScanner.matchPath("!", "!");
      Vector<Object> vector5 = new Vector<Object>();
      Vector<Object> vector6 = new Vector<Object>();
      Object object4 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "!", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      vector0.add("");
      archiveScanner0.dirsNotIncluded = vector0;
      vector0.addElement("{3[/D5Tp^['W");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      archiveScanner0.setIncludes(stringArray0);
      vector0.add("<{>%q=yp\"w|H");
      FileSystemHandling.shouldAllThrowIOExceptions();
      archiveScanner0.processDirectory(improvedFile0, "C{E7WhQja{Z", true);
      System.setCurrentTimeMillis((-1932L));
      System.setCurrentTimeMillis((-1932L));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImprovedFile improvedFile0 = new ImprovedFile("MKDIR_AILED", "MKDIR_AILED");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector0 = new Vector<String>();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      vector0.trimToSize();
      archiveScanner0.dirsNotIncluded = vector0;
      vector0.add("?OlQ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?OlQ";
      archiveScanner0.setIncludes(stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = (-1928L);
      System.setCurrentTimeMillis((-1928L));
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      Vector<String> vector1 = new Vector<String>();
      System.setCurrentTimeMillis((-1928L));
      System.setCurrentTimeMillis(0L);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/MKDIR_AILED/MKDIR_AILED
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("I5bBRd`T~cM}tL=f>t,");
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.markSupported();
      byteArrayInputStream1.mark((-29));
      byteArrayInputStream2.reset();
      sequenceInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(byteArrayInputStream2, byteArrayInputStream4);
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream5.read();
      byteArrayInputStream1.markSupported();
      sequenceInputStream1.read(byteArray0);
      sequenceInputStream0.read();
      ByteArrayInputStream byteArrayInputStream6 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.read();
      sequenceInputStream1.mark(3003);
      byteArrayInputStream6.reset();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, byteArrayInputStream0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "I5bBRd`T~cM}tL=f>t,";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      byteArrayInputStream4.markSupported();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "E<d?9 %!!3*z!!", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9140273284145395
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("F%Gd2ro,UU[Y\"9^h,oD", "");
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("app.properties", "", mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "j0q\"DM`t{>\rNGX";
      stringArray0[3] = "";
      stringArray0[4] = "F%Gd2ro,UU[Y\"9^h,oD";
      stringArray0[5] = "";
      stringArray0[6] = "F%Gd2ro,UU[Y\"9^h,oD";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "j0q\"DM`t{>\rNGX";
      stringArray1[1] = "";
      stringArray1[2] = "j0q\"DM`t{>\rNGX";
      archiveScanner0.setIncludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "F%Gd2ro,UU[Y\"9^h,oD", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("]B}|");
      DirectoryScanner.match("]B}|", "]B}|");
      DirectoryScanner.matchPath("aUx#Pu", "i");
      Object object0 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      Object object1 = new Object();
      Object object2 = new Object();
      vector0.removeElement(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      vector0.add((Object) "i");
      Vector<Object> vector1 = new Vector<Object>();
      vector0.containsAll(vector1);
      Object object5 = new Object();
      vector1.add((Object) vector0);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)107);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)107;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      vector0.add((Object) byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, sequenceInputStream0);
      Object object6 = new Object();
      vector0.add(object6);
      Vector<Object> vector2 = new Vector<Object>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.toFileType(improvedFile0);
      long long0 = (-1L);
      System.setCurrentTimeMillis(long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-60);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      byteArrayInputStream1.mark((-2494));
      sequenceInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, byteArrayInputStream2);
      byteArrayInputStream1.markSupported();
      byteArrayInputStream1.markSupported();
      byteArrayInputStream2.mark((byte)0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream1);
      sequenceInputStream1.close();
      byteArrayInputStream1.close();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(byteArrayInputStream1, byteArrayInputStream2);
      byteArrayInputStream0.mark((byte)0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      pushbackInputStream0.available();
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      archiveScanner0.setIncludes(stringArray0);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      archiveScanner0.filesNotIncluded = vector1;
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.processArchive(improvedFile0, "4x5H+hyT:*6`3J1kE&W0JoK0(F.hVtb?Bk0_b6.jar.jar0j0q\"DM`t{>\rNGX.jar");
      assertEquals("", improvedFile0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("v*M!/FAraR6E6KnT]&");
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.markSupported();
      byteArrayInputStream1.mark(4);
      byteArrayInputStream2.reset();
      sequenceInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(byteArrayInputStream2, byteArrayInputStream4);
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream5.read();
      byteArrayInputStream1.markSupported();
      sequenceInputStream1.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream6 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream6.markSupported();
      byteArrayInputStream6.read();
      sequenceInputStream1.mark((-64));
      byteArrayInputStream6.reset();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, byteArrayInputStream5);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[0];
      archiveScanner0.setExcludes(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "v*M!/FAraR6E6KnT]&";
      stringArray1[1] = "v*M!/FAraR6E6KnT]&";
      stringArray1[2] = "v*M!/FAraR6E6KnT]&";
      stringArray1[3] = "v*M!/FAraR6E6KnT]&";
      stringArray1[4] = "v*M!/FAraR6E6KnT]&";
      stringArray1[5] = "v*M!/FAraR6E6KnT]&";
      stringArray1[6] = "v*M!/FAraR6E6KnT]&";
      stringArray1[7] = "v*M!/FAraR6E6KnT]&";
      archiveScanner0.setIncludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, ".JAR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7754337976947767
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      ImprovedFile improvedFile0 = new ImprovedFile("");
      MockFile mockFile0 = new MockFile(improvedFile0, "");
      byte[] byteArray0 = new byte[6];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)6;
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setIncludes(archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<String> vector0 = new Vector<String>();
      vector0.add(string0);
      archiveScanner0.filesIncluded = vector0;
      String string1 = "hM9RY";
      archiveScanner1.scandir(improvedFile0, string1, boolean0);
      int int0 = 4;
      Vector<Integer> vector1 = new Vector<Integer>(int0);
      archiveScanner0.isArchive(improvedFile0);
      String string2 = "Error trying to read entry, ";
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8393579695774942
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      MockFile mockFile0 = new MockFile(improvedFile0, "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      improvedFile0.deleteDirectory(true);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile0.mkdir();
      String[] stringArray0 = new String[4];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.createFolder(evoSuiteFile1);
      stringArray0[0] = "";
      stringArray0[1] = "";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "**/%*%");
      stringArray0[2] = "";
      stringArray0[3] = "";
      ImprovedFile improvedFile1 = improvedFile0.createTempDir();
      ImprovedFile improvedFile2 = ImprovedFile.createTempImprovedFile("F%Gd2ro,UU[Y\"9^h,oD.jar", "error processing file 0.jar", improvedFile1);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile2);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner1.scandir(improvedFile1, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      vector1.add((Object) vector0);
      Iterator<Object> iterator0 = vector0.iterator();
      Iterator<Object> iterator1 = vector1.iterator();
      Object[] objectArray0 = new Object[6];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) iterator1;
      objectArray0[2] = (Object) iterator0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) improvedFile0;
      Object object2 = new Object();
      objectArray0[5] = object2;
      vector0.toArray(objectArray0);
      Object object3 = new Object();
      vector0.add((Object) null);
      Object object4 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object5 = new Object();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".2rror.";
      stringArray0[1] = ".2rror.";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      archiveScanner0.setExcludes(stringArray0);
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>();
      Object object6 = new Object();
      Vector<Object> vector5 = new Vector<Object>();
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("You have unsaved changes.  Save them now?", "You have unsaved changes.  Save them now?");
      improvedFile0.setReadable(true, true);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      Object object1 = new Object();
      Object object2 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object3 = new Object();
      vector1.add(object3);
      Vector<Object> vector3 = new Vector<Object>();
      Object object4 = new Object();
      int int0 = archiveScanner0.toFileType(improvedFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<String> vector0 = new Vector<String>();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      vector0.add("");
      vector0.trimToSize();
      vector0.add("Rw}]wS&O");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      vector0.add("s']De!E)pAn<dp");
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-1928L));
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      vector0.clone();
      System.setCurrentTimeMillis((-1928L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1928L));
      System.setCurrentTimeMillis(1000000L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8992399051814028
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-34);
      byteArray0[1] = (byte)91;
      byteArray0[1] = (byte)115;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ImprovedFile improvedFile1 = new ImprovedFile("", "");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      ImprovedFile.createTempImprovedFile("X6I?@t*bk0", "", improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "X6I?@t*bk0";
      stringArray0[1] = "X6I?@t*bk0";
      stringArray0[2] = "X6I?@t*bk0";
      archiveScanner0.setIncludes(stringArray0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "X6I?@t*bk0", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8992399051814028
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("]p0qL%|2R2~LB^5HP");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-34);
      byteArray0[1] = (byte)91;
      byteArray0[6] = (byte)115;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ImprovedFile improvedFile1 = new ImprovedFile("]p0qL%|2R2~LB^5HP", "]p0qL%|2R2~LB^5HP");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      ImprovedFile improvedFile2 = ImprovedFile.createTempImprovedFile("X6I?@t*bk0", "]p0qL%|2R2~LB^5HP", improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile2);
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "X6I?@t*bk0";
      stringArray0[1] = "X6I?@t*bk0";
      stringArray0[2] = "X6I?@t*bk0";
      archiveScanner0.setIncludes(stringArray0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "X6I?@t*bk0", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "j0q\"DM`t{>\rNGX";
      stringArray0[3] = "!";
      stringArray0[4] = "F%Gd2ro,UU[Y\"9^h,oD";
      stringArray0[5] = "!";
      stringArray0[6] = "F%Gd2ro,UU[Y\"9^h,oD";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "j0q\"DM`t{>\rNGX";
      stringArray1[1] = "!";
      stringArray1[2] = "j0q\"DM`t{>\rNGX";
      DirectoryScanner.matchPath("4x5H+hyT:*6`3J1kE&W0JoK0(F.hVtb?Bk0_b6.jar.jar", "j0q\"DM`t{>\rNGX");
      ImprovedFile improvedFile0 = new ImprovedFile("]B}|14x5H+`yQ:*6`3J.jar", "e{0N!1BK");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("]]", "]]");
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate4.or(predicate2);
      Predicate<Object> predicate9 = predicate2.negate();
      Predicate<Object> predicate10 = predicate8.and(predicate3);
      Predicate<Object> predicate11 = predicate8.negate();
      predicate6.test(predicate4);
      predicate6.and(predicate8);
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate6.or(predicate9);
      Predicate<Object> predicate14 = predicate10.negate();
      Predicate<Object> predicate15 = predicate12.or(predicate2);
      Predicate<Object> predicate16 = predicate7.negate();
      Predicate<Object> predicate17 = predicate11.and(predicate10);
      Predicate<Object> predicate18 = predicate16.and(predicate13);
      Predicate<Object> predicate19 = predicate6.and(predicate16);
      Predicate<Object> predicate20 = predicate17.and(predicate9);
      predicate5.or(predicate4);
      Predicate<Object> predicate21 = predicate2.or(predicate11);
      predicate13.and(predicate5);
      predicate21.negate();
      predicate15.and(predicate2);
      predicate12.and(predicate10);
      predicate21.and(predicate6);
      predicate1.or(predicate20);
      predicate14.negate();
      predicate19.and(predicate21);
      predicate9.and(predicate18);
      predicate20.negate();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-60);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      byteArrayInputStream1.mark((-2494));
      sequenceInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, byteArrayInputStream2);
      byteArrayInputStream1.markSupported();
      byteArrayInputStream1.markSupported();
      byteArrayInputStream2.mark((byte)0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream1);
      sequenceInputStream1.close();
      byteArrayInputStream1.close();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(byteArrayInputStream1, byteArrayInputStream2);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      pushbackInputStream0.available();
      pushbackInputStream0.skip((-140));
      pushbackInputStream0.close();
      byteArrayInputStream1.mark(2946);
      byteArrayInputStream1.reset();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream3);
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream0);
      sequenceInputStream4.skip(7);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(sequenceInputStream4, 1768);
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(sequenceInputStream3, sequenceInputStream1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      MockFile mockFile0 = new MockFile(improvedFile0, "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      improvedFile0.deleteDirectory(true);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile0.mkdir();
      String[] stringArray0 = new String[4];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.createFolder(evoSuiteFile1);
      stringArray0[0] = "";
      stringArray0[1] = "";
      Vector<Object> vector0 = new Vector<Object>();
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner1.isArchive(mockFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      Object object0 = new Object();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Integer integer0 = new Integer((-261096440));
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate3.negate();
      predicate0.negate();
      Predicate<Object> predicate8 = predicate4.or(predicate2);
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate6.negate();
      predicate9.or(predicate8);
      predicate10.test(predicate4);
      predicate6.and(predicate8);
      Predicate<Object> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate10.and(predicate5);
      Object object1 = new Object();
      Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate13 = predicate6.negate();
      predicate13.negate();
      predicate4.or(predicate10);
      Predicate<Object> predicate14 = predicate5.negate();
      predicate5.or(predicate10);
      predicate4.and(predicate7);
      predicate9.negate();
      predicate0.or(predicate11);
      predicate1.and(predicate12);
      predicate2.negate();
      Predicate<Object> predicate15 = predicate11.negate();
      predicate14.and(predicate15);
      predicate11.and(predicate7);
      predicate10.negate();
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("I5bBRd`T~cM}tL=f>t,");
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.markSupported();
      byteArrayInputStream1.mark((-29));
      byteArrayInputStream2.reset();
      sequenceInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(byteArrayInputStream2, byteArrayInputStream4);
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream5.read();
      byteArrayInputStream1.markSupported();
      sequenceInputStream1.read(byteArray0);
      sequenceInputStream1.read();
      ByteArrayInputStream byteArrayInputStream6 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream6.markSupported();
      byteArrayInputStream6.read();
      sequenceInputStream1.mark((-64));
      byteArrayInputStream6.reset();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, byteArrayInputStream5);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[0];
      archiveScanner0.setExcludes(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "I5bBRd`T~cM}tL=f>t,";
      stringArray1[1] = "I5bBRd`T~cM}tL=f>t,";
      stringArray1[2] = "I5bBRd`T~cM}tL=f>t,";
      stringArray1[3] = "I5bBRd`T~cM}tL=f>t,";
      stringArray1[4] = "I5bBRd`T~cM}tL=f>t,";
      stringArray1[5] = "I5bBRd`T~cM}tL=f>t,";
      try { 
        archiveScanner0.scandir(improvedFile0, "I5bBRd`T~cM}tL=f>t,", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/I5bBRd`T~cM}tL=f>t,
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      Object object0 = new Object();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Object object1 = new Object();
      Integer integer0 = new Integer((-261096440));
      Predicate<Object> predicate0 = Predicate.isEqual(object1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      predicate4.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate4.negate();
      predicate0.negate();
      predicate2.negate();
      predicate3.test(predicate4);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate9 = predicate8.or(predicate5);
      predicate8.test(predicate2);
      predicate9.test(predicate6);
      predicate6.and(predicate7);
      Predicate<Object> predicate10 = predicate0.negate();
      predicate3.and(predicate10);
      Object object2 = new Object();
      Predicate.isEqual(object2);
      predicate8.negate();
      archiveScanner0.setIncludes((String[]) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      Object object0 = new Object();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate4.or(predicate2);
      Predicate<Object> predicate9 = predicate2.negate();
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate<Object> predicate11 = predicate8.and(predicate3);
      Predicate<Object> predicate12 = predicate7.negate();
      predicate10.test(predicate4);
      predicate6.and(predicate8);
      Predicate<Object> predicate13 = predicate12.negate();
      Predicate<Object> predicate14 = predicate6.or(predicate9);
      Predicate<Object> predicate15 = predicate11.negate();
      Predicate<Object> predicate16 = predicate13.or(predicate2);
      Predicate<Object> predicate17 = predicate7.negate();
      predicate17.and(predicate14);
      Predicate<Object> predicate18 = predicate6.and(predicate17);
      Predicate<Object> predicate19 = predicate16.and(predicate18);
      Predicate<Object> predicate20 = predicate5.or(predicate4);
      Predicate<Object> predicate21 = predicate10.or(predicate12);
      Predicate<Object> predicate22 = predicate20.negate();
      predicate21.negate();
      predicate21.and(predicate6);
      predicate1.or(predicate19);
      predicate22.negate();
      predicate18.and(predicate21);
      predicate5.or(predicate16);
      predicate13.negate();
      predicate20.and(predicate15);
      predicate13.negate();
      try { 
        archiveScanner0.scanArchive(improvedFile0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "j0q\"DM`t{>\rNGX";
      stringArray0[3] = "ioDv";
      stringArray0[4] = "F%Gd2ro,UU[Y\"9^h,oD";
      stringArray0[5] = "ioDv";
      stringArray0[6] = "F%Gd2ro,UU[Y\"9^h,oD";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "j0q\"DM`t{>\rNGX";
      stringArray1[1] = "ioDv";
      stringArray1[2] = "j0q\"DM`t{>\rNGX";
      DirectoryScanner.matchPath("4x5H+hyT:*6`3J1kE&W0JoK0(F.hVtb?Bk0_b6.jar.jar", "j0q\"DM`t{>\rNGX");
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "A@`&JK#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }
}
