/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 11:53:36 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMProcessingInstruction;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.UserDataAttribute;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4153988426024804
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.popElement();
      pruningElementStack0.clear();
      pruningElementStack0.getPath();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(7);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream1);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.popElement();
      String[] stringArray1 = new String[3];
      pruningElementStack0.clear();
      stringArray1[0] = "~U";
      sAXReader0.setEncoding("//home/ubuntu/termite/projects/62_dom4j/q\"Mz/No modification allowed0WY=R=");
      stringArray1[1] = "Dd4Rq\"Npq[Q}W";
      stringArray1[2] = "//tmp/HBE7O|G0";
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 3);
      pruningElementStack0.clear();
      StringReader stringReader0 = new StringReader("Dd4Rq\"Npq[Q}W");
      StringReader stringReader1 = new StringReader("~U");
      try { 
        sAXReader0.read("//tmp/HBE7O|G0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/HBE7O|G0 Nested exception: no protocol: //tmp/HBE7O|G0
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.popElement();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "~U";
      sAXReader0.setEncoding("//home/ubuntu/termite/projects/62_dom4j/q\"Mz/No modification allowed0WY=R=");
      stringArray1[1] = "Dd4Rq\"Npq[Q}W";
      stringArray1[2] = "//tmp/HBE7O|G0";
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 3);
      pruningElementStack0.clear();
      StringReader stringReader0 = new StringReader("Dd4Rq\"Npq[Q}W");
      StringReader stringReader1 = new StringReader("~U");
      try { 
        sAXReader0.read((Reader) stringReader1, "//tmp/HBE7O|G0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document //tmp/HBE7O|G0 : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream2.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream2);
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      pipedOutputStream1.write(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray0[1] = (byte)8;
      byteArray1[1] = (byte) (-85);
      pipedOutputStream1.write(byteArray1);
      pipedOutputStream1.write(byteArray1);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXParseException sAXParseException0 = new SAXParseException("http://xml.org/sax/features/namespace-prefixes", (String) null, " of document ", 2365, 2365);
      SAXParseException sAXParseException1 = new SAXParseException(".,s])", locatorImpl0, sAXParseException0);
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/declaration-handler", pipedOutputStream2);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/declaration-handler' cannot be casted to org.xml.sax.ext.DeclHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2148940265207764
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      IndexedElement indexedElement0 = new IndexedElement("\u00068J.)");
      IndexedElement indexedElement1 = new IndexedElement("0");
      IndexedElement indexedElement2 = new IndexedElement("(oT*Kz=ao27%Y");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl0.getContentHandler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String string0 = "org.dom4j.io.SAXReader$SAXEntityResolver";
      StringReader stringReader0 = new StringReader("org.dom4j.io.SAXReader$SAXEntityResolver");
      File file0 = MockFile.createTempFile("FromIndex: {0}, ToIndex: {1}, Size: {2}", "(oT*Kz=ao27%Y");
      // Undeclared exception!
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9456645463488123
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      IndexedElement indexedElement0 = new IndexedElement("\u00068J.)");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jaxen.dom4j.Dom4jXPath");
      IndexedElement indexedElement1 = new IndexedElement("8R\"-k8J@!Wr[n'=!N.");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\u00068J.)";
      stringArray0[1] = "8R\"-k8J@!Wr[n'=!N.";
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      xMLFilterImpl0.getContentHandler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//tmp/ENTITY_NODE0/tmp/not0EgAfte");
      StringReader stringReader0 = new StringReader(" $K:");
      MockFile mockFile0 = new MockFile("[XPath: ", "[XPath: ");
      mockFile0.deleteOnExit();
      mockFile0.getAbsoluteFile();
      MockFile mockFile1 = new MockFile("\u00068J.)", "//tmp/ENTITY_NODE0/tmp/not0EgAfte");
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      // Undeclared exception!
      sAXReader0.installXMLFilter((XMLReader) null);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.218438090438457
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      IndexedElement indexedElement0 = new IndexedElement("\u00068J.)");
      IndexedElement indexedElement1 = new IndexedElement("8R\"-k8J@!Wrn'=(!N_.");
      IndexedElement indexedElement2 = new IndexedElement("(oT*Kz=ao27%Y");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl0.getContentHandler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringReader stringReader0 = new StringReader(" : ");
      MockFile mockFile0 = new MockFile("8R\"-k8J@!Wrn'=(!N_.", "//tmp/8pr0 of document ");
      mockFile0.deleteOnExit();
      mockFile0.getAbsoluteFile();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      xMLFilterImpl2.getParent();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      locatorImpl0.getLineNumber();
      SAXParseException sAXParseException0 = new SAXParseException("Hb%uLQ^(%>]1y", locator2Impl1);
      xMLFilterImpl3.warning(sAXParseException0);
      sAXReader0.installXMLFilter(xMLFilterImpl2);
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0, "8R\"-k8J@!Wrn'=(!N_.");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      IndexedElement indexedElement0 = new IndexedElement("\u00068J.)");
      IndexedElement indexedElement1 = new IndexedElement("8R\"-k8J@!Wrn'=(!N_.");
      IndexedElement indexedElement2 = new IndexedElement("(oT*Kz=ao27%Y");
      IndexedElement indexedElement3 = new IndexedElement("(oT*Kz=ao27%Y");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction((String) null, "\u00068J.)");
      DOMProcessingInstruction dOMProcessingInstruction1 = new DOMProcessingInstruction(indexedElement1, "", " value \"");
      dOMProcessingInstruction1.supports("8R\"-k8J@!Wrn'=(!N_.", (String) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      documentFactory0.getXPathNamespaceURIs();
      defaultDocumentFactory0.setXPathNamespaceURIs((Map<String, String>) null);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      StringReader stringReader0 = new StringReader("B");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DefaultDocumentFactory.getInstance();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/http:/xml.org/sax/properties/lexical-handler0=Kr%S'TjH40EO7SnhS");
      StringReader stringReader0 = new StringReader("Exception cannot be its own cause");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.skippedEntity("//tmp/http:/xml.org/sax/properties/lexical-handler0=Kr%S'TjH40EO7SnhS");
      defaultHandler2_0.skippedEntity((String) null);
      defaultHandler2_0.getExternalSubset("gqc-", "PtT4fmE'E");
      StringReader stringReader1 = new StringReader(" $K:");
      MockFile mockFile0 = new MockFile("Exception cannot be its own cause", "org.dom4j.io.SAXReader");
      MockFile mockFile1 = new MockFile(mockFile0, "f3z!QccCOB}QF");
      XMLFilter xMLFilter0 = sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter(xMLFilter0);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(boolean0);
      
      sAXReader0.getEncoding();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.536453720179329
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IDBZc@");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setStripWhitespaceText(false);
      sAXReader0.setStringInternEnabled(false);
      DefaultDocumentFactory.getInstance();
      sAXReader0.setEncoding("Given node cannot be a child of element");
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.getXMLReader();
      sAXReader0.isStripWhitespaceText();
      sAXReader0.getDispatchHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLReader0, defaultHandler2_0);
      MockFile mockFile0 = new MockFile("IDBZc@");
      URL uRL0 = mockFile0.toURL();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/IDBZc@ (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/IDBZc@ (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "//home/ubuntu/termite/projects/62_dom4j/http:/xml.org/sax/features/use-locator2/.yB{)JZ8|Dyta/.yB{)JZ8|Dyta0.yB{)JZ8|Dyta";
      stringArray0[1] = "//home/ubuntu/termite/projects/62_dom4j/http:/xml.org/sax/features/use-locator2/.yB{)JZ8|Dyta/.yB{)JZ8|Dyta0.yB{)JZ8|Dyta";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getPath();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("/");
      sAXReader_SAXEntityResolver0.resolveEntity("L4", ":\"'BZTRo!2");
      DefaultDocumentFactory.getInstance();
      try { 
        sAXReader0.setXMLReaderClassName(":\"'BZTRo!2");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class :\"'BZTRo!2 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      String string0 = null;
      QName qName0 = new QName((String) null, namespace0, (String) null);
      DefaultDocumentFactory.getInstance();
      QName qName1 = QName.get((String) null, namespace0, (String) null);
      namespaceStack0.toString();
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("8.y*", "P[`wH");
      namespaceStack0.push((String) null, "lGD07Z+!}uc:k=");
      Map<String, String> map0 = dOMProcessingInstruction0.getValues();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.setXPathNamespaceURIs(map0);
      UserDataAttribute userDataAttribute0 = new UserDataAttribute(qName1, (String) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.391772851204174
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      sAXReader0.setEncoding("CtE(");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"CTE(\". Nested exception: Invalid encoding name \"CTE(\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      QName qName0 = new QName("\u00068J.)", (Namespace) null, "\u00068J.)");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      QName.get("\u00068J.)", (Namespace) null, "2E15Ge]");
      IndexedElement indexedElement0 = new IndexedElement("\u00068J.)");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("\u00068J.)", "\u00068J.)");
      namespaceStack0.push((String) null, (String) null);
      Map<String, String> map0 = dOMProcessingInstruction0.getValues();
      documentFactory0.setXPathNamespaceURIs(map0);
      UserDataAttribute userDataAttribute0 = new UserDataAttribute(qName0, "\u00068J.)");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("\u00068J.)");
      InputSource inputSource0 = new InputSource();
      sAXReader_SAXEntityResolver0.resolveEntity("u6VKZ;%P{5m=", (String) null);
      sAXReader0.setFeature("http://xml.org/sax/features/namespace-prefixes", false);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.367107195559739
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.setLineNumber(23);
      MockException mockException0 = new MockException("eZ9cz");
      SAXParseException sAXParseException0 = new SAXParseException("", locatorImpl0, mockException0);
      defaultHandler0.error(sAXParseException0);
      sAXReader0.setEntityResolver(defaultHandler0);
      sAXReader0.setEncoding("");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2786004072646815
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(92);
      pipedOutputStream0.connect(pipedInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream2);
      SAXReader sAXReader0 = new SAXReader(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)8;
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      pipedOutputStream2.write(byteArray0);
      pipedOutputStream0.write(byteArray0);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.popElement();
      pruningElementStack0.popElement();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      pruningElementStack0.getPath();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 3);
      pruningElementStack2.clear();
      StringReader stringReader0 = new StringReader("Lmi/=!");
      StringReader stringReader1 = new StringReader(".oz}}\"t%91Tu@Q$UQm");
      try { 
        sAXReader0.read((Reader) stringReader1, ".oz}}\"t%91Tu@Q$UQm");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document .oz}}\"t%91Tu@Q$UQm : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getPath();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack3 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 0);
      PruningElementStack pruningElementStack4 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 111);
      PruningElementStack pruningElementStack5 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 0);
      pruningElementStack1.clear();
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      PruningElementStack pruningElementStack6 = new PruningElementStack(stringArray0, pruningDispatchHandler1, 2683);
      PruningElementStack pruningElementStack7 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 2683);
      PruningElementStack pruningElementStack8 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 92);
      PruningElementStack pruningElementStack9 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack1.getPath();
      pruningElementStack3.clear();
      PruningElementStack pruningElementStack10 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      PruningElementStack pruningElementStack11 = new PruningElementStack(stringArray0, pruningDispatchHandler1);
      pruningElementStack11.clear();
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Namespace namespace0 = Namespace.get("@l`fT|m$D@YuBsNCR.");
      QName qName0 = QName.get("V7T:+Ce>.Y", namespace0);
      Namespace.get("V7T:+Ce>.Y");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      boolean boolean0 = sAXReader0.isValidating();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read("/a6xTQtK<>re");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: /a6xTQtK<>re Nested exception: no protocol: /a6xTQtK<>re
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      namespaceStack0.toString();
      NamespaceStack namespaceStack1 = new NamespaceStack();
      namespaceStack1.getQName("//tmp/jZi<Pt)@n{s]ZRCvA80N9E K", "org.dom4j.tree.NamespaceStack@4 Stack: []", "org.dom4j.tree.DefaultDocument");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("//tmp/tmp/org.jaxen.expr.DefaultXPathExpr0HBE7O|G0Node", "I+$vysp1^r");
      namespaceStack0.clear();
      DOMProcessingInstruction dOMProcessingInstruction1 = new DOMProcessingInstruction("I+$vysp1^r", "//tmp/jZi<Pt)@n{s]ZRCvA80N9E K");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createXPathFilter("http://xml.org/sax/features/string-interning");
      namespaceStack0.push("X&m$&L7zAcX*", "<!DOCTYPE ");
      dOMProcessingInstruction1.getValues();
      defaultDocumentFactory0.setXPathNamespaceURIs((Map<String, String>) null);
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("\"Dy>RC[s`tf}8");
      InputSource inputSource0 = new InputSource();
      sAXReader_SAXEntityResolver0.resolveEntity("'f2t+x$u", (String) null);
      defaultDocumentFactory0.createDocument();
      sAXReader0.getDocumentFactory();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7646308653001808
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip(0L);
      InputSource inputSource0 = new InputSource(stringReader0);
      inputSource0.setCharacterStream(stringReader0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("/k^LjlL");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader_SAXEntityResolver0.resolveEntity("[McPvoc", "/k^LjlL");
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null);
      boolean boolean0 = sAXReader1.isStripWhitespaceText();
      assertFalse(boolean0);
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName0 = new QName((String) null, namespace0, (String) null);
      DefaultDocumentFactory.getInstance();
      QName qName1 = QName.get("file://", (Namespace) null, "file://");
      namespaceStack0.toString();
      IndexedElement indexedElement0 = new IndexedElement((String) null);
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("8.y*", "P[`wH");
      namespaceStack0.push("file://", "lGD07Z+!}uc:k=");
      Map<String, String> map0 = dOMProcessingInstruction0.getValues();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.setXPathNamespaceURIs(map0);
      UserDataAttribute userDataAttribute0 = new UserDataAttribute(qName1, "file://");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = new InputSource();
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("EoRpTl", "u6VKZ;%P{5m=");
      assertNotSame(inputSource1, inputSource0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2756811061363744
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip(0L);
      InputSource inputSource0 = new InputSource(stringReader0);
      inputSource0.setCharacterStream(stringReader0);
      stringReader0.mark(0);
      stringReader0.read();
      inputSource0.setCharacterStream((Reader) null);
      inputSource0.getPublicId();
      inputSource0.getByteStream();
      inputSource0.setByteStream((InputStream) null);
      InputSource inputSource1 = new InputSource("");
      inputSource1.setSystemId("");
      inputSource1.setPublicId("");
      sAXReader0.getDocumentFactory();
      try { 
        sAXReader0.read(inputSource1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&whPYkBxU2NmK[/http:/xml.org/sax/features/use-locator2/&whPYkBxU2NmK[0.yB{)JZ8|Dyta");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}c6d{QOZOVG:P_3;");
      MockFile mockFile0 = new MockFile(".8@~", "!|<`=<");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("&whPYkBxU2NmK[/http:/xml.org/sax/features/use-locator2/&whPYkBxU2NmK[0.yB{)JZ8|Dyta");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, ".8@~");
      MockFile mockFile1 = new MockFile((String) null, "&whPYkBxU2NmK[");
      mockFile0.setExecutable(false, true);
      MockFile.createTempFile("7[DL!?v4nZ+lo+", "N;;\"fQ@a7Gu", (File) mockFile1);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "7[DL!?v4nZ+lo+");
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, "}c6d{QOZOVG:P_3;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.popElement();
      String[] stringArray1 = new String[3];
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray1, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      pruningElementStack1.getPath();
      pruningElementStack0.clear();
      StringReader stringReader0 = new StringReader("Error on line ");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\u00068J.)";
      stringArray0[1] = "\"";
      stringArray0[2] = "\u00068J.)";
      stringArray0[3] = "\u00068J.)";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getPath();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack1.clear();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 36);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack3 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 36);
      pruningElementStack3.clear();
      PruningElementStack pruningElementStack4 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.getPath();
      PruningElementStack pruningElementStack5 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack1.clear();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.4692752101061126
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      DefaultDocumentFactory.getInstance();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.addHandler(".L!5#CV\\ms", dispatchHandler0);
      dispatchHandler0.setDefaultHandler(pruningDispatchHandler0);
      String string0 = " +.95";
      sAXReader0.getDispatchHandler();
      pruningDispatchHandler0.removeHandler(" +.95");
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.setEncoding("y\"]");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl0.startElement(".L!5#CV\\ms", " +.95", ".L!5#CV\\ms", attributes2Impl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "MeE;J=guP's~S");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"Y\"]\". Nested exception: Invalid encoding name \"Y\"]\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.238281776565859
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      QName qName0 = new QName("\u00068J.)", (Namespace) null, "\u00068J.)");
      DefaultDocumentFactory.getInstance();
      QName.get("\u00068J.)", (Namespace) null, "2E15Ge]");
      namespaceStack0.toString();
      IndexedElement indexedElement0 = new IndexedElement("\u00068J.)");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("\u00068J.)", "\u00068J.)");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.dom4j.tree.NamespaceStack@4 Stack: []";
      stringArray0[1] = "2E15Ge]";
      stringArray0[2] = null;
      stringArray0[3] = "org.dom4j.tree.NamespaceStack@4 Stack: []";
      stringArray0[4] = "file://";
      stringArray0[5] = null;
      stringArray0[6] = "org.dom4j.tree.NamespaceStack@4 Stack: []";
      stringArray0[7] = "v*n[0g{nNv";
      stringArray0[8] = null;
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, dispatchHandler0);
      pruningElementStack1.popElement();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, dispatchHandler0);
      pruningElementStack1.clear();
      pruningElementStack2.getPath();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      StringReader stringReader0 = new StringReader("org.dom4j.tree.NamespaceStack@4 Stack: []");
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDocumentFactory.getInstance();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "NJky_CAlE4t";
      stringArray0[1] = "";
      stringArray0[2] = "NJky_CAlE4t";
      stringArray0[3] = "NJky_CAlE4t";
      stringArray0[4] = "NJky_CAlE4t";
      stringArray0[5] = "AnTD";
      documentFactory0.createQName("m&5Stx$", " : ", "(N_HR;=4zBuZIied");
      stringArray0[6] = "NJky_CAlE4t";
      stringArray0[7] = "`";
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      MockFile mockFile0 = new MockFile("");
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isValidating();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getPath();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack3 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 0);
      PruningElementStack pruningElementStack4 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 111);
      PruningElementStack pruningElementStack5 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 24);
      PruningElementStack pruningElementStack6 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack6.clear();
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      PruningElementStack pruningElementStack7 = new PruningElementStack(stringArray0, pruningDispatchHandler1, 2690);
      PruningElementStack pruningElementStack8 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 1);
      PruningElementStack pruningElementStack9 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 2690);
      PruningElementStack pruningElementStack10 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 92);
      PruningElementStack pruningElementStack11 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack7.getPath();
      pruningElementStack11.clear();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      DefaultDocumentFactory.getInstance();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.addHandler(".L!5#CV\\ms", dispatchHandler0);
      dispatchHandler0.setDefaultHandler(pruningDispatchHandler0);
      sAXReader0.getDispatchHandler();
      pruningDispatchHandler0.removeHandler(" +.95");
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.setEncoding("y\"]");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl0.startElement("org.dom4j.DocumentException", " +.95", "org.dom4j.DocumentException", attributes2Impl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      namespaceStack0.getNamespaceForPrefix("http://xml.org/sax/features/namespaces");
      QName qName0 = new QName(" +.95", (Namespace) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.resetHandlers();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getPath();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 2523);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack3 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 2523);
      PruningElementStack pruningElementStack4 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 71);
      PruningElementStack pruningElementStack5 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack5.getPath();
      PruningElementStack pruningElementStack6 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(71);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      pipedOutputStream0.write(byteArray0);
      pipedOutputStream0.write(byteArray0);
      URI uRI0 = MockURI.aFileURI;
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("b`AqCd*6h[Pss<nU&)");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("org.jaxen.SimpleNamespaceContext", "$a!l(oFTY%W5ha");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setStringInternEnabled(false);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getPath();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      int int0 = 1;
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 1);
      pruningElementStack1.clear();
      PruningElementStack pruningElementStack3 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 1);
      PruningElementStack pruningElementStack4 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      String[] stringArray1 = new String[0];
      PruningElementStack pruningElementStack5 = null;
      try {
        pruningElementStack5 = new PruningElementStack(stringArray1, pruningDispatchHandler0, 111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid path of length: 0 it must be greater than 2
         //
         verifyException("org.dom4j.io.PruningElementStack", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      namespaceStack0.toString();
      namespaceStack0.push((String) null, (String) null);
      documentFactory0.setXPathNamespaceURIs((Map<String, String>) null);
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      InputSource inputSource0 = new InputSource();
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("//tmp/2E15Ge]0http:/xml.org/sax/features/namespace-prefixes");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/x:WxNxG+wdVJeq&JX 0");
      IndexedElement indexedElement1 = new IndexedElement("//tmp/2E15Ge]0http:/xml.org/sax/features/namespace-prefixes");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setMergeAdjacentText(true);
      MockFile mockFile0 = new MockFile("//tmp/tmp/w4yZhc0/a6xTQtK<>re0.tmp", "set(int,Object) unsupported");
      mockFile0.deleteOnExit();
      mockFile0.getAbsoluteFile();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl1);
      SAXParseException sAXParseException0 = new SAXParseException("http://xml.org/sax/handlers/LexicalHandler", locatorImpl1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4241956453213316
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      QName qName0 = new QName("\u00068J.)", (Namespace) null);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("u6VKZ;%P{5m=", "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("mbJ$o#0R\"/f");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("Warning: missing namespace prefix ignored: ", "comment()");
      sAXReader1.setEntityResolver(sAXReader_SAXEntityResolver1);
      try { 
        sAXReader1.setProperty("mbJ$o#0R\"/f", inputSource0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'mbJ$o#0R\"/f' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getPath();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack2.clear();
      PruningElementStack pruningElementStack3 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 71);
      pruningElementStack1.clear();
      PruningElementStack pruningElementStack4 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 71);
      pruningElementStack1.getPath();
      PruningElementStack pruningElementStack5 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.clear();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("/");
      sAXReader_SAXEntityResolver0.resolveEntity("/", "/");
      try { 
        sAXReader0.setFeature("Error on line ", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'Error on line ' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getPath();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack2.clear();
      PruningElementStack pruningElementStack3 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 71);
      pruningElementStack1.clear();
      PruningElementStack pruningElementStack4 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 71);
      pruningElementStack1.getPath();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0426322117102855
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      QName qName0 = new QName("\u00068J.)", (Namespace) null, "\u00068J.)");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      QName qName1 = QName.get("\u00068J.)", (Namespace) null, "\u00068J.)");
      namespaceStack0.toString();
      IndexedElement indexedElement0 = new IndexedElement("\u00068J.)");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("\u00068J.)", "\u00068J.)");
      namespaceStack0.push((String) null, (String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      dOMProcessingInstruction0.getValues();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.setXPathNamespaceURIs((Map<String, String>) null);
      UserDataAttribute userDataAttribute0 = new UserDataAttribute(qName1, "i%");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/string-interning");
      sAXReader_SAXEntityResolver0.resolveEntity("\u00068J.)", "LuB-)DlLBd4$JB%.<6~");
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertNotNull(xMLReader0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.dom4j.io.SAXReader");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl0.startPrefixMapping("Adm1x}xU20fx", "Adm1x}xU20fx");
      sAXReader0.setXMLReader(xMLFilterImpl0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDocumentFactory.getInstance();
      sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.getXMLReader();
      sAXReader0.createXMLReader();
      sAXReader0.createContentHandler((XMLReader) null);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      sAXReader0.installXMLFilter(parserAdapter0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      QName qName0 = new QName("fm.*.vC3k^z&x@", (Namespace) null, "fm.*.vC3k^z&x@");
      DefaultDocumentFactory.getInstance();
      IndexedElement indexedElement0 = new IndexedElement("fm.*.vC3k^z&x@");
      IndexedElement indexedElement1 = new IndexedElement("8R\"-k8J@!Wrn'=(!N_.");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("8R\"-k8J@!Wrn'=(!N_.", "Vm;-I ':OoVb!:jl");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      StringReader stringReader0 = new StringReader("//tmp/:w#0/a6xTQtK<>re");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.installXMLFilter((XMLReader) null);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIgnoreComments(false);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory.getInstance();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&whPYkBxU2NmK[/http:/xml.org/sax/features/use-locator2/&whPYkBxU2NmK[0.yB{)JZ8|Dyta");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "&whPYkBxU2NmK[");
      MockFile mockFile0 = new MockFile("!|<`=<", "&whPYkBxU2NmK[");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("&whPYkBxU2NmK[/http:/xml.org/sax/features/use-locator2/&whPYkBxU2NmK[0.yB{)JZ8|Dyta");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "]2%:0(_NP");
      MockFile mockFile1 = new MockFile("!|<`=<", "`hw[L<}1");
      mockFile0.setExecutable(true, false);
      MockFile.createTempFile("http://xml.org/sax/features/namespaces", "org.jaxen.expr.DefaultLocationPath", (File) mockFile0);
      mockFile1.createNewFile();
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.278600407264681
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream2.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream2);
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-85);
      pipedOutputStream2.write((int) (byte) (-85));
      byteArray0[2] = (byte) (-85);
      pipedOutputStream1.write(byteArray0);
      pipedOutputStream1.write(byteArray0);
      pipedOutputStream2.write(byteArray0);
      pipedOutputStream2.write(byteArray0);
      StringReader stringReader0 = new StringReader("7");
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&whPYkBxU2NmK[/http:/xml.org/sax/features/use-locator2/&whPYkBxU2NmK[0.yB{)JZ8|Dyta");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}c6d{QOZOVG:P_3;");
      MockFile mockFile0 = new MockFile("!|<`=<", "&whPYkBxU2NmK[");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("&whPYkBxU2NmK[/http:/xml.org/sax/features/use-locator2/&whPYkBxU2NmK[0.yB{)JZ8|Dyta");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "]2%:0(_NP");
      mockFile0.setReadable(false, true);
      MockFile mockFile1 = new MockFile("!|<`=<", "`hw[L<}1");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "`hw[L<}1");
      MockFile.createTempFile("//tp/tmp/tmp/a6xTQtK<>re0/a6xTQtK<>re0/tmp/$RCW9Hfw+jE0/tmp/Hlaw{R1=[f0|&hZh0Vi.';}43k)Z8t;!Q%", "`hw[L<}1", (File) mockFile1);
      mockFile0.createNewFile();
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      MockFile mockFile0 = new MockFile("&whPYkBxU2NmK[", "http://xml.org/sax/features/use-locator2");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&whPYkBxU2NmK[/http:/xml.org/sax/features/use-locator2/&whPYkBxU2NmK[0.yB{)JZ8|Dyta");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "&])1sRcxZq");
      mockFile0.setExecutable(false, true);
      File file0 = MockFile.createTempFile("&whPYkBxU2NmK[", ".yB{)JZ8|Dyta", (File) mockFile0);
      file0.createNewFile();
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/&whPYkBxU2NmK[/http:/xml.org/sax/features/use-locator2/&whPYkBxU2NmK[0.yB{)JZ8|Dyta : Reference is not allowed in prolog. Nested exception: Reference is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      IndexedElement indexedElement0 = new IndexedElement("\u00068J.)");
      IndexedElement indexedElement1 = new IndexedElement("8R\"-k8J@!Wrn'=(!N_.");
      IndexedElement indexedElement2 = new IndexedElement("(oT*Kz=ao27%Y");
      IndexedElement indexedElement3 = new IndexedElement("(oT*Kz=ao27%Y");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction((String) null, "\u00068J.)");
      DOMProcessingInstruction dOMProcessingInstruction1 = new DOMProcessingInstruction(indexedElement1, "", " value \"");
      dOMProcessingInstruction1.supports("8R\"-k8J@!Wrn'=(!N_.", (String) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      documentFactory0.getXPathNamespaceURIs();
      defaultDocumentFactory0.setXPathNamespaceURIs((Map<String, String>) null);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      StringReader stringReader0 = new StringReader("");
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.386304690496721
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      SAXReader sAXReader0 = new SAXReader(false);
      byte[] byteArray0 = new byte[2];
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setDocumentFactory(documentFactory0);
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)18;
      pipedOutputStream1.write(byteArray0);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getPath();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 2523);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack3 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 2523);
      PruningElementStack pruningElementStack4 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 71);
      PruningElementStack pruningElementStack5 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 3177);
      pruningElementStack5.getPath();
      PruningElementStack pruningElementStack6 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "http://xml.org/sax/features/namespace-prefixes");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Document document0 = defaultDocumentFactory0.createDocument();
      assertFalse(document0.supportsParent());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.5619894536451198
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      DefaultDocumentFactory.getInstance();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.addHandler(".L!5#CV\\ms", dispatchHandler0);
      dispatchHandler0.setDefaultHandler(pruningDispatchHandler0);
      DispatchHandler dispatchHandler1 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.removeHandler("__M4-` $Hiu)sw:K}");
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = " +.95";
      stringArray0[1] = " +.95";
      stringArray0[2] = " +.95";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      IndexedElement indexedElement0 = new IndexedElement("(}JYQ+;,X[CK1vNbkDc");
      pruningElementStack0.pushElement(indexedElement0);
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler1);
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.getErrorHandler();
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.createDefaultEntityResolver("eV)fq$eqiUt4");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      QName qName0 = new QName((String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&-)aV^AubW;.l");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.580580723582687
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setDefaultHandler((ElementHandler) null);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      String string0 = " of document ";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.resetHandlers();
      pruningDispatchHandler0.resetHandlers();
      pruningDispatchHandler0.resetHandlers();
      sAXReader0.createDefaultEntityResolver(" of document ");
      sAXReader0.addHandler(" of document ", pruningDispatchHandler0);
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.setValidation(true);
      String string1 = "[ NZzBZljB";
      try { 
        sAXReader0.read("[ NZzBZljB");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: [ NZzBZljB Nested exception: no protocol: [ NZzBZljB
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setErrorHandler((ErrorHandler) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getErrorHandler();
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      sAXReader0.setXMLReader(xMLFilterImpl2);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      attributesImpl0.clear();
      AttributesImpl attributesImpl1 = new AttributesImpl(attributes2Impl0);
      AttributesImpl attributesImpl2 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl2.startElement("ST", "PvV+&", "PvV+&", attributes2Impl0);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl2);
      StringReader stringReader1 = new StringReader("O!z~,sUX7%<dCTM(q[,");
      StringReader stringReader2 = new StringReader("T|NA}di+W5");
      try { 
        sAXReader0.read((Reader) stringReader1, ">");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.addHandler("2_sIt=XLY<", pruningDispatchHandler0);
      StringReader stringReader0 = new StringReader("");
      MockFile mockFile0 = new MockFile("");
      mockFile0.setExecutable(false);
      mockFile0.toURL();
      DOMDocument dOMDocument0 = new DOMDocument("");
      mockFile0.setWritable(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//tmp/http:/xml.org/sax/properties/lexical-handler0/tmp/J-tj3J0*c RB]zk|Mv%/V-Ji");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.299145180131708
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.isIncludeInternalDTDDeclarations();
      StringReader stringReader0 = new StringReader("org.jaxen.function.BooleanFunction");
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getPath();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 2523);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack3 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 2523);
      PruningElementStack pruningElementStack4 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 71);
      PruningElementStack pruningElementStack5 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 1997);
      pruningElementStack5.clear();
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      PruningElementStack pruningElementStack6 = new PruningElementStack(stringArray0, pruningDispatchHandler1, 2523);
      PruningElementStack pruningElementStack7 = new PruningElementStack(stringArray0, pruningDispatchHandler1, 58);
      PruningElementStack pruningElementStack8 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 71);
      PruningElementStack pruningElementStack9 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 1997);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "/";
      stringArray1[1] = "/";
      stringArray1[2] = "/";
      stringArray1[3] = "/";
      stringArray1[4] = "/";
      PruningElementStack pruningElementStack10 = new PruningElementStack(stringArray1, pruningDispatchHandler0);
      pruningElementStack10.getPath();
      PruningElementStack pruningElementStack11 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack10.clear();
      try { 
        sAXReader0.setXMLReaderClassName("/");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class / not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream2.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream2);
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-85);
      pipedOutputStream2.write((int) (byte) (-85));
      pipedOutputStream1.write(byteArray0);
      byteArray0[2] = (byte) (-85);
      pipedOutputStream1.write(byteArray0);
      pipedOutputStream1.write(byteArray0);
      pipedOutputStream2.write(byteArray0);
      pipedOutputStream2.write(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream1, sequenceInputStream0);
      sequenceInputStream1.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1, (byte)8);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/tmp/tmp/tmp/NJky_CAlE4t0NJky_CAlE4t02`c@)rBYKH:2)$0\u00068J.)0/tmp/tmp/tmp/NJky_CAlE4t0NJky_CAlE4t02`c@)rBYKH:2)$0\u00068J.)");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/tmp/tmp/tmp/NJky_CAlE4t0NJky_CAlE4t02`c@)rBYKH:2)$0\u00068J.)0/tmp/tmp/tmp/NJky_CAlE4t0NJky_CAlE4t02`c@)rBYKH:2)$0\u00068J.)", "//tmp/tmp/tmp/tmp/NJky_CAlE4t0NJky_CAlE4t02`c@)rBYKH:2)$0\u00068J.)0/tmp/tmp/tmp/NJky_CAlE4t0NJky_CAlE4t02`c@)rBYKH:2)$0\u00068J.)");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.popElement();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 3);
      pruningElementStack2.clear();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.normalize(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      mockFile0.createNewFile();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@49f3a0e7 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("nzk{sn9uQ=gt\"N", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class nzk{sn9uQ=gt\"N not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      pruningDispatchHandler0.setDefaultHandler(dispatchHandler0);
      pruningElementStack0.popElement();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//home/ubuntu/termite/projects/62_dom4j/http:/xml.org/sax/features/use-locator2/.yB{)JZ8|Dyta/.yB{)JZ8|Dyta0.yB{)JZ8|Dyta");
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 3);
      pruningElementStack2.clear();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.normalize(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      mockFile0.createNewFile();
      InputSource inputSource0 = new InputSource();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity(";", ";b$jC;Evq0#A[");
      sAXReader0.getDispatchHandler();
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.unparsedEntityDecl("#bY", "#bY", "#bY", "$\"/=Vdjv");
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 1522);
      pushbackInputStream0.unread(1522);
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "#bY");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      IndexedElement indexedElement0 = new IndexedElement("Ooadx/}Uu8e");
      indexedElement0.setName("Ooadx/}Uu8e");
      documentFactory0.createAttribute((Element) indexedElement0, "", "");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      ElementHandler elementHandler0 = null;
      sAXReader0.setDefaultHandler((ElementHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      int int0 = 24;
      String[] stringArray0 = null;
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack((String[]) null, dispatchHandler0, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.PruningElementStack", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream2.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream2);
      SAXReader sAXReader0 = new SAXReader();
      byte byte0 = (byte) (-85);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      pipedOutputStream1.write(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray0[1] = (byte)8;
      byteArray1[1] = (byte) (-85);
      pipedOutputStream1.write(byteArray1);
      pipedOutputStream1.write(byteArray1);
      try { 
        sAXReader0.read("MY");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/MY (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/MY (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&whPYkBxU2NmK[/http:/xml.org/sax/features/use-locator2/&whPYkBxU2NmK[0.yB{)JZ8|Dyta");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}c6d{QOZOVG:P_3;");
      MockFile mockFile0 = new MockFile(".8@~", "!|<`=<");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(".8@~/!|<`=<");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, ".8@~");
      MockFile mockFile1 = new MockFile("}c6d{QOZOVG:P_3;", "&whPYkBxU2NmK[");
      mockFile0.setExecutable(false, true);
      MockFile.createTempFile("7[DL!?v4nZ+lo+", "N;;\"fQa7Gu", (File) mockFile1);
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".8@~");
      try { 
        sAXReader0.setProperty("fU{3zya/KChq/LI", "D8`Ee)HamZmF");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'fU{3zya/KChq/LI' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)45;
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.isStringInternEnabled();
      AttributesImpl attributesImpl1 = new AttributesImpl(attributes2Impl0);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      // Undeclared exception!
      try { 
        attributes2Impl1.setValue((byte)14, "==r>PH)lyN>BBy5");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Attempt to modify attribute at illegal index: 14
         //
         verifyException("org.xml.sax.helpers.AttributesImpl", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream2.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream2);
      SAXReader sAXReader0 = new SAXReader();
      byte byte0 = (byte) (-85);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      pipedOutputStream1.write(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray0[1] = (byte)8;
      byteArray1[1] = (byte) (-85);
      pipedOutputStream1.write(byteArray1);
      pipedOutputStream1.write(byteArray1);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getPath();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack3 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 0);
      PruningElementStack pruningElementStack4 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 111);
      PruningElementStack pruningElementStack5 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 24);
      PruningElementStack pruningElementStack6 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack6.clear();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.resolveEntity("/", "/");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      IndexedElement indexedElement0 = new IndexedElement("\u00068J.)");
      IndexedElement indexedElement1 = new IndexedElement("8R\"-k8J@!Wrn'=(!N_.");
      IndexedElement indexedElement2 = new IndexedElement("(oT*Kz=ao27%Y");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "\u00068J.)";
      stringArray0[2] = "(oT*Kz=ao27%Y";
      stringArray0[3] = "//tmp/tmp/a6xTQtK<>re0/a6xTQtK<>re0/tmp/$RCW9Hfw+jE0/tmp/Hlaw{R1=[f0|&hZh";
      stringArray0[4] = "(oT*Kz=ao27%Y";
      stringArray0[5] = "8R\"-k8J@!Wrn'=(!N_.";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      pruningElementStack0.popElement();
      pruningElementStack0.popElement();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, dispatchHandler0);
      pruningElementStack0.clear();
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, dispatchHandler1, 1800);
      pruningElementStack2.getPath();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter1, true);
      StringReader stringReader0 = new StringReader("//tmp/ENTITY_NODE0/a6xTQtK<>re");
      try { 
        sAXReader0.read((Reader) stringReader0, "ssU");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@2e3d0aea Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@2e3d0aea Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      QName qName0 = new QName("\u00068J.)", (Namespace) null, "\u00068J.)");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      QName.get("\u00068J.)", (Namespace) null, "\u00068J.)");
      namespaceStack0.toString();
      IndexedElement indexedElement0 = new IndexedElement("\u00068J.)");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("\u00068J.)", "\u00068J.)");
      namespaceStack0.push((String) null, (String) null);
      dOMProcessingInstruction0.getValues();
      documentFactory0.setXPathNamespaceURIs((Map<String, String>) null);
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("\u00068J.)");
      InputSource inputSource0 = new InputSource();
      sAXReader0.removeHandler("http://xml.org/sax/features/namespaces");
      sAXReader_SAXEntityResolver0.resolveEntity("u6VKZ;%P{5m=", "");
      sAXReader0.getDispatchHandler();
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      QName qName0 = new QName("\u00068J.)", (Namespace) null, "\u00068J.)");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      QName qName1 = QName.get("\u00068J.)", (Namespace) null, "\u00068J.)");
      namespaceStack0.toString();
      IndexedElement indexedElement0 = new IndexedElement("\u00068J.)");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("Dj</D{!T", "Dj</D{!T");
      namespaceStack0.push("//tmp/a6xTQtK<>re0/tmp/uh4(Spk?yxA^^0O0&b", "//tmp/$RCW9Hfw+jE0/tmp/Hlaw{R1=[f0|&hZh");
      Map<String, String> map0 = dOMProcessingInstruction0.getValues();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.setXPathNamespaceURIs(map0);
      UserDataAttribute userDataAttribute0 = new UserDataAttribute(qName1, (String) null);
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = new InputSource();
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/tmp/<,O)K-`.u_'1@<)u3M00]!(k77kIC<UJ;MOz", "Validation not supported for XMLReader: ");
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader((String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLFilterImpl1, defaultHandler2_0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String[] stringArray0 = new String[2];
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getPath();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 41);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack2 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 2523);
      pruningElementStack0.clear();
      PruningElementStack pruningElementStack3 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 2523);
      PruningElementStack pruningElementStack4 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 71);
      PruningElementStack pruningElementStack5 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 3177);
      pruningElementStack5.getPath();
      PruningElementStack pruningElementStack6 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.clear();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("/");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "9zsb;:3j@u$6rB^");
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertNotNull(dispatchHandler0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      pipedOutputStream2.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream2);
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-85);
      pipedOutputStream2.write((int) (byte) (-85));
      byteArray0[2] = (byte) (-85);
      pipedOutputStream1.write(byteArray0);
      pipedOutputStream1.write(byteArray0);
      pipedOutputStream2.write(byteArray0);
      pipedOutputStream2.write(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip((-979L));
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream1, sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1, (byte)8);
      URI uRI0 = MockURI.aFileURI;
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.setDocumentLocator((Locator) null);
      sAXReader0.createContentHandler(parserAdapter0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      QName.get("\u00068J.)", (Namespace) null, "\u00068J.)");
      namespaceStack0.toString();
      IndexedElement indexedElement0 = new IndexedElement("\u00068J.)");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("\u00068J.)", "\u00068J.)");
      namespaceStack0.push((String) null, (String) null);
      dOMProcessingInstruction0.getValues();
      documentFactory0.setXPathNamespaceURIs((Map<String, String>) null);
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      InputSource inputSource0 = new InputSource();
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      Namespace namespace0 = namespaceStack0.addNamespace((String) null, "\u00068J.)");
      QName qName0 = new QName((String) null, namespace0, "oC'$<`H&uBv");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      QName qName1 = QName.get("2E15Ge]", namespace0, (String) null);
      NamespaceStack namespaceStack1 = new NamespaceStack();
      namespaceStack1.toString();
      IndexedElement indexedElement0 = new IndexedElement("oC'$<`H&uBv");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction(";'^wQ7p-$0@b&B", "u;Vg.Q5bG#xb_A9B");
      namespaceStack1.push("icaEt2", "icaEt2");
      Map<String, String> map0 = dOMProcessingInstruction0.getValues();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.setXPathNamespaceURIs(map0);
      UserDataAttribute userDataAttribute0 = new UserDataAttribute(qName1, "x`#iOoDRchhdV_E");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("oC'$<`H&uBv");
      InputSource inputSource0 = new InputSource();
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/tmp/Hlaw{R1=[f0s8FZ!u`!$U8<\"rN0", "$&9v^`g");
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.333443371183037
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          NamespaceStack namespaceStack0 = new NamespaceStack();
          namespaceStack0.getDefaultNamespace();
          namespaceStack0.toString();
          namespaceStack0.addNamespace(" : ", "//tmp/not0EgAfte");
          namespaceStack0.push((String) null, (String) null);
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
          documentFactory0.createText("org.jaxen.JaxenException");
          URL uRL0 = MockURL.getHttpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor305.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor305.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      MockFile mockFile0 = new MockFile("last", "2.0");
      String string0 = "Q\"Q";
      File file0 = MockFile.createTempFile("2.0", "Q\"Q", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "//tmp/-?X4/8+Tw0ENTITY_NODE");
      mockFile1.toPath();
      URL uRL0 = mockFile1.toURL();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/last/2.0/2.00Q\"Q/tmp/- (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/last/2.0/2.00Q\"Q/tmp/- (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertNotNull(documentFactory0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      AttributesImpl attributesImpl1 = new AttributesImpl(attributes2Impl2);
      xMLFilterImpl0.startElement("", "!Ezw,C] }!u>eA7#Rqa", "", attributes2Impl1);
      Attributes2Impl attributes2Impl3 = new Attributes2Impl();
      Attributes2Impl attributes2Impl4 = new Attributes2Impl(attributes2Impl0);
      xMLFilterImpl0.startElement("GLjGu:17S4v", "GLjGu:17S4v", "i7AWp(EOnvo&vw>d", attributesImpl0);
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }
}
