/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 09:33:15 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8920125036382047
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true, (String) null);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setTrimText(true);
      outputFormat0.getEncoding();
      outputFormat0.setIndent((String) null);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.getAttributeQuoteCharacter();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      outputFormat1.setNewLineAfterNTags((-1806567251));
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      outputFormat1.parseOptions(stringArray0, 253);
      OutputFormat.createCompactFormat();
      outputFormat1.getEncoding();
      outputFormat1.setIndent("-elpandEmpty");
      assertEquals((-1806567251), outputFormat1.getNewLineAfterNTags());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2726383836504005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-expandEmptyOo}E<P1";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 2175);
      outputFormat0.setIndent("-expandEmptyOo}E<P1");
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 0);
      OutputFormat outputFormat1 = new OutputFormat("", true, "");
      outputFormat1.parseOptions(stringArray0, 1);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "";
      stringArray1[1] = "\"/`>wgfrNQ8xxO08(";
      stringArray1[2] = "";
      stringArray1[3] = "-expandEmptyOo}E<P1";
      stringArray1[4] = "";
      stringArray1[5] = "&";
      stringArray1[6] = "-expandEmptyOo}E<P1";
      OutputFormat.createPrettyPrint();
      stringArray1[7] = "-padText";
      stringArray1[8] = "lyUjNOiG";
      outputFormat0.parseOptions(stringArray1, 7);
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, (-1801231798));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1801231798
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.176854415578879
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[11];
      stringArray0[2] = stringArray0[1];
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags(276);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setLineSeparator(stringArray0[1]);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setNewLineAfterNTags(1286);
      outputFormat0.setPadText(true);
      outputFormat1.setSuppressDeclaration(true);
      outputFormat0.getNewLineAfterNTags();
      outputFormat1.setNewLineAfterNTags(276);
      outputFormat1.setEncoding(stringArray0[1]);
      outputFormat1.isSuppressDeclaration();
      outputFormat0.setTrimText(true);
      outputFormat1.getLineSeparator();
      assertEquals(276, outputFormat1.getNewLineAfterNTags());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.821659170539038
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "-indentSize";
      stringArray0[3] = "-trimText";
      stringArray0[5] = "";
      stringArray0[6] = "-xhtmlw?SVc";
      stringArray0[5] = "-trimText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-trimText\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-indentSize";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.12126488272993
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setIndentSize(1);
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = new OutputFormat();
      outputFormat1.setIndent(false);
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "-suppressDeclaration";
      stringArray0[2] = "-suppressDeclaration";
      stringArray0[3] = "S/bV!WQ";
      stringArray0[4] = "uM@{P)@,54(-M";
      stringArray0[5] = "XWax/fWf 7+28";
      outputFormat3.parseOptions(stringArray0, 1);
      assertTrue(outputFormat3.isSuppressDeclaration());
      
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat4 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat4.isExpandEmptyElements());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8444272737890692
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "XWax/fWf 7+2";
      stringArray0[1] = ")/Gv.)'}n%ys&";
      stringArray0[2] = "#@r^?q";
      outputFormat0.parseOptions(stringArray0, 2);
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      String[] stringArray1 = new String[2];
      String string0 = "-lineSeparator";
      stringArray1[0] = "-lineSeparator";
      stringArray1[1] = "#@r^?q";
      outputFormat2.parseOptions(stringArray1, 6055);
      outputFormat1.parseOptions(stringArray1, 0);
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray1, (-1445487762));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1445487762
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4693145852373792
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("y5=[~8^:yAW,'I");
      outputFormat0.setIndent(false);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("");
      outputFormat0.setIndent("-indent");
      outputFormat0.setIndent("");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-indent";
      stringArray0[1] = "-indent";
      outputFormat0.setIndentSize(0);
      stringArray0[2] = "";
      stringArray0[3] = "y5=[~8^:yAW,'I";
      stringArray0[4] = "t$'C^s/+";
      stringArray0[5] = "";
      outputFormat0.setIndent(false);
      stringArray0[6] = "yK:-phxi;DG)Ko\"o";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 2);
      assertEquals("-indent", outputFormat0.getIndent());
      
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 2);
      outputFormat0.parseOptions(stringArray0, 25);
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(3, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.359179909943633
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(":I`+^Y1L*dIx|HP7");
      outputFormat0.setIndent(":I`+^Y1L*dIx|HP7");
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[17];
      stringArray0[0] = ":I`+^Y1L*dIx|HP7";
      stringArray0[1] = "-omitEncoding";
      stringArray0[2] = ":I`+^Y1L*dIx|HP7";
      stringArray0[3] = " Ng~T{zeu_^*fL";
      stringArray0[4] = "-omitEncoding";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isOmitEncoding());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6395126386707033
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndent(false);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      // Undeclared exception!
      try { 
        outputFormat1.setAttributeQuoteCharacter('\u001D');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (\u001D)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6426570392189577
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P-elp2ndEmpty";
      stringArray0[1] = "P-elp2ndEmpty";
      stringArray0[2] = "P-elp2ndEmpty";
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ($)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.671581698270579
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[16];
      stringArray0[0] = "XWax/^f 7+28";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("XWax/^f 7+28");
      outputFormat0.setIndent("XWax/^f 7+28");
      OutputFormat outputFormat2 = new OutputFormat();
      outputFormat2.isOmitEncoding();
      outputFormat1.setSuppressDeclaration(false);
      outputFormat1.setTrimText(false);
      OutputFormat outputFormat3 = new OutputFormat("yG", true, "yG");
      outputFormat3.setExpandEmptyElements(false);
      outputFormat3.setTrimText(false);
      outputFormat2.setOmitEncoding(true);
      outputFormat1.setIndent(false);
      outputFormat1.setOmitEncoding(false);
      assertFalse(outputFormat1.isTrimText());
      
      outputFormat0.setOmitEncoding(false);
      outputFormat2.setIndentSize((-550));
      OutputFormat outputFormat4 = OutputFormat.createPrettyPrint();
      outputFormat4.setTrimText(false);
      outputFormat0.setIndent("");
      outputFormat2.isOmitEncoding();
      OutputFormat outputFormat5 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat5.isTrimText());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6576265429580057
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndent(false);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      OutputFormat.createCompactFormat();
      outputFormat1.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7353390710828336
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-new6ines", false, "-new6ines");
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals("-new6ines", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("-new6ines", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-new6ines";
      stringArray0[1] = "-new6ines";
      stringArray0[2] = "-new6ines";
      stringArray0[3] = "-expandEmpty-xhtmlZwj`h6%!3@z2<99?r";
      stringArray0[4] = "-new6ines";
      stringArray0[5] = "-new6ines";
      stringArray0[6] = "-new6ines";
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setAttributeQuoteCharacter('\"');
      assertTrue(outputFormat1.isTrimText());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isPadText());
      assertFalse(outputFormat1.isNewlines());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat2.getIndent());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertFalse(outputFormat2.isOmitEncoding());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertFalse(outputFormat2.isXHTML());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertTrue(outputFormat2.isTrimText());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertTrue(outputFormat2.isNewlines());
      assertTrue(outputFormat2.isPadText());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.983818251559958
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-encoding";
      stringArray0[2] = "-encoding";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8677930328173722
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[15];
      stringArray0[0] = "-trimText";
      stringArray0[3] = "-trimText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.321096120944575
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "-encoding";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0103195670932337
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isTrimText());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "#6@Zr^?q";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "#6@Zr^?q";
      int int0 = outputFormat1.parseOptions(stringArray0, 1);
      assertTrue(outputFormat1.isNewlines());
      assertEquals(2, int0);
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat2.isXHTML());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertEquals("  ", outputFormat2.getIndent());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertTrue(outputFormat2.isPadText());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertTrue(outputFormat2.isTrimText());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("S[%:gE", false, "-elpandEmpty");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "-elpandEmpty";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.402690481762424
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.getLineSeparator();
      outputFormat0.setLineSeparator("\n");
      outputFormat0.setLineSeparator("\n");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent("{=K#`");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setSuppressDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.isXHTML();
      outputFormat0.setNewLineAfterNTags(1760);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat1.setNewLineAfterNTags(1760);
      outputFormat1.isOmitEncoding();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setOmitEncoding(true);
      outputFormat1.getAttributeQuoteCharacter();
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4973043486407955
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setEncoding("nTEv`Wb");
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setTrimText(true);
      outputFormat0.setEncoding((String) null);
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent("");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setTrimText(true);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setPadText(true);
      outputFormat0.setEncoding(":");
      outputFormat0.isXHTML();
      outputFormat0.setXHTML(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.isTrimText();
      outputFormat0.setIndent(true);
      outputFormat0.setXHTML(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setEncoding("(qO-");
      outputFormat0.isXHTML();
      outputFormat0.isOmitEncoding();
      outputFormat0.isExpandEmptyElements();
      outputFormat0.isPadText();
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setPadText(false);
      outputFormat0.setNewLineAfterNTags((-419));
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6136877166322483
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml", false, "-xhtml");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setOmitEncoding(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-xhtml";
      stringArray0[1] = "-xhtml";
      stringArray0[2] = "-xhtml";
      outputFormat0.setIndentSize(1);
      stringArray0[3] = "I*";
      OutputFormat.createCompactFormat();
      stringArray0[4] = "I*";
      stringArray0[5] = "I*";
      stringArray0[6] = "I*";
      stringArray0[7] = "I*";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setIndent(false);
      outputFormat0.setEncoding("I*");
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent(true);
      OutputFormat.createPrettyPrint();
      outputFormat0.isTrimText();
      assertEquals("I*", outputFormat0.getEncoding());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat1.getIndent());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.876396913527239
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml", false, "-xhtml");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setOmitEncoding(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-xhtml";
      stringArray0[1] = "-xhtml";
      outputFormat0.setSuppressDeclaration(false);
      assertFalse(outputFormat0.isXHTML());
      
      stringArray0[2] = "-xhtml";
      stringArray0[3] = "-xhtml";
      stringArray0[4] = "-xhtml";
      stringArray0[5] = "-xhtml";
      stringArray0[6] = "-xhtml";
      stringArray0[7] = "-xhtml";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setEncoding("-xhtml");
      outputFormat0.getIndent();
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent("-xhtml");
      assertTrue(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3464645395696615
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.getLineSeparator();
      outputFormat0.setLineSeparator("\n");
      outputFormat0.setLineSeparator("\n");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent("{=K#`");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setSuppressDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.isXHTML();
      outputFormat0.setNewLineAfterNTags(1760);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setSuppressDeclaration(false);
      outputFormat1.isOmitEncoding();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setOmitEncoding(true);
      outputFormat1.getAttributeQuoteCharacter();
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3272807162969604
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterNTags(4874);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-expandEmptyOo}E<P1";
      stringArray0[1] = "P-elp2ndEmpty";
      stringArray0[2] = "-expandEmptyOo}E<P1";
      stringArray0[3] = "P-elp2ndEmpty";
      stringArray0[4] = "-expandEmptyOo}E<P1";
      stringArray0[3] = "}t`";
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(4874, outputFormat0.getNewLineAfterNTags());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat1.isSuppressDeclaration());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat0.isTrimText());
      
      outputFormat0.setTrimText(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(false);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setOmitEncoding(true);
      outputFormat0.setEncoding("");
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getEncoding();
      String string0 = outputFormat1.getEncoding();
      assertEquals("UTF-8", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent(true);
      outputFormat0.setIndentSize(1180);
      outputFormat0.setIndent(true);
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("  ", outputFormat0.getIndent());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterNTags(4874);
      outputFormat0.setNewLineAfterNTags((-1796544778));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-expandEmptyOo}E<P1";
      stringArray0[1] = "P-elp2ndEmpt";
      stringArray0[2] = "-expandEmptyOo}E<P1";
      stringArray0[3] = "P-elp2ndEmpt";
      stringArray0[2] = "-expandEmptyOo}E<P1";
      stringArray0[3] = "}t`";
      outputFormat0.getNewLineAfterNTags();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-4524));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4524
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1761414031011608
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("|&SfOt$@", true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setExpandEmptyElements(true);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat1.setNewLineAfterNTags((-1309));
      outputFormat0.setIndentSize((-1309));
      outputFormat0.setIndentSize((-1));
      outputFormat1.isSuppressDeclaration();
      outputFormat2.setTrimText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isNewlines();
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat1.setNewLineAfterNTags(0);
      outputFormat2.isSuppressDeclaration();
      outputFormat2.setSuppressDeclaration(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|&SfOt$@";
      stringArray0[1] = "|&SfOt$@";
      stringArray0[2] = "|&SfOt$@";
      stringArray0[3] = "|&SfOt$@";
      stringArray0[4] = "|&SfOt$@";
      stringArray0[5] = "|&SfOt$@";
      stringArray0[6] = "|&SfOt$@";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1387));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1387
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.848708463510862
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(true);
      outputFormat0.setPadText(true);
      outputFormat0.setNewlines(true);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setPadText(true);
      outputFormat0.setIndent(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "y5=[~8yAW,'9m";
      stringArray0[1] = "Y!;t09<8//Gx";
      stringArray0[2] = "Y!;t09<8//Gx";
      stringArray0[3] = "y5=[~8yAW,'9m";
      stringArray0[4] = "Y!;t09<8//Gx";
      stringArray0[5] = "-xhtmlS[%:gE";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewlines());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("y5=[~8yAW,'9");
      outputFormat0.setIndentSize((-464));
      assertEquals("", outputFormat0.getIndent());
      
      outputFormat0.setIndent("");
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7590479998760498
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("y5=[~8jy*W,'9", true, "-expandEmptyXWax/fWf 7+28");
      outputFormat0.setEncoding((String) null);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("y5=[~8jy*W,'9", outputFormat0.getIndent());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("-expandEmptyXWax/fWf 7+28", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isPadText());
      assertTrue(outputFormat1.isTrimText());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertTrue(outputFormat2.isNewlines());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertTrue(outputFormat2.isPadText());
      assertEquals("  ", outputFormat2.getIndent());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertFalse(outputFormat2.isOmitEncoding());
      assertTrue(outputFormat2.isTrimText());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isXHTML());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.472179306603186
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      outputFormat0.setIndent(false);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewlines(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.isNewLineAfterDeclaration();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterNTags(276);
      outputFormat0.setPadText(true);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setLineSeparator("");
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat3.setOmitEncoding(true);
      outputFormat3.setLineSeparator("");
      outputFormat3.setPadText(false);
      outputFormat2.setSuppressDeclaration(true);
      outputFormat1.getNewLineAfterNTags();
      outputFormat2.setNewLineAfterNTags(276);
      outputFormat2.setEncoding("");
      outputFormat2.isSuppressDeclaration();
      outputFormat1.isPadText();
      outputFormat1.setTrimText(true);
      outputFormat1.getLineSeparator();
      outputFormat2.getLineSeparator();
      assertEquals(276, outputFormat2.getNewLineAfterNTags());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("5kJ[+hGyI[o5tO6", false);
      boolean boolean0 = outputFormat0.isPadText();
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("5kJ[+hGyI[o5tO6", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7757456023992884
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[1];
      String string0 = "XWax/^f 7+28";
      stringArray0[0] = "XWax/^f 7+28";
      outputFormat0.setIndent(false);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isSuppressDeclaration();
      String string1 = "";
      outputFormat0.setIndent(false);
      boolean boolean0 = false;
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setNewLineAfterNTags(0);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('U');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (U)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1237598498957575
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat3.setNewLineAfterDeclaration(false);
      outputFormat2.setIndent("");
      outputFormat3.setIndent("p107bn2HM_xLUh");
      outputFormat2.setLineSeparator("");
      outputFormat1.setSuppressDeclaration(false);
      OutputFormat outputFormat4 = OutputFormat.createCompactFormat();
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setIndent("");
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat4.isNewlines();
      outputFormat0.setTrimText(true);
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat3.setNewLineAfterDeclaration(true);
      assertEquals("p107bn2HM_xLUh", outputFormat3.getIndent());
      
      outputFormat4.setIndent("");
      outputFormat4.setNewLineAfterDeclaration(false);
      outputFormat4.setSuppressDeclaration(false);
      assertFalse(outputFormat4.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-new6ines", false, "-new6ines");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-new6ines";
      stringArray0[1] = "-new6ines";
      stringArray0[2] = "-new6ines";
      stringArray0[3] = "-expandEmpty-xhtmlZwj`h6%!3@z2<99?r";
      stringArray0[4] = "-new6ines";
      stringArray0[5] = "-new6ines";
      stringArray0[6] = "-new6ines";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(0, int0);
      assertFalse(outputFormat0.isNewlines());
      assertEquals("-new6ines", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("-new6ines", outputFormat0.getIndent());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.609063925123211
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml", false, "-xhtml");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setOmitEncoding(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-xhtml";
      stringArray0[1] = "-xhtml";
      stringArray0[2] = "-xhtml";
      stringArray0[3] = "I*";
      stringArray0[4] = "I*";
      stringArray0[5] = "I*";
      stringArray0[6] = "I*";
      stringArray0[7] = "I*";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setIndent(false);
      outputFormat0.setEncoding("I*");
      outputFormat0.getIndent();
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent(true);
      OutputFormat.createPrettyPrint();
      boolean boolean0 = outputFormat0.isTrimText();
      assertEquals("I*", outputFormat0.getEncoding());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.384415616105067
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "P+_:h[7TS(");
      outputFormat0.setIndent(true);
      outputFormat0.setIndentSize((-1755));
      outputFormat0.setPadText(false);
      outputFormat0.setEncoding("P+_:h[7TS(");
      outputFormat0.getIndent();
      outputFormat0.setPadText(true);
      outputFormat0.setEncoding("");
      outputFormat0.setIndentSize((-1755));
      outputFormat0.setIndent(true);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('K');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (K)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("5kJ[+hGyI[o5tO6");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('P');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (P)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9517607579688783
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlS[%:gE");
      assertFalse(outputFormat0.isXHTML());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-xhtmlS[%:gE";
      stringArray0[1] = "-xhtmlS[%:gE";
      stringArray0[2] = "-xhtmlS[%:gE";
      stringArray0[3] = "-xhtmlS[%:gE";
      stringArray0[4] = "-xhtmlS[%:gE";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isXHTML());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-elpndEmpty";
      stringArray0[1] = "in['C";
      stringArray0[2] = "";
      stringArray0[3] = "8z5/zk9";
      stringArray0[4] = "-expandEmpty-expandEmptyOo}E<P1";
      stringArray0[5] = "-expandEmpty#@r^?q";
      stringArray0[6] = "\n";
      int int0 = outputFormat0.parseOptions(stringArray0, 34);
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(34, int0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4850884752336673
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent(true);
      outputFormat0.setIndent((String) null);
      outputFormat0.setIndent("S[%:g");
      outputFormat0.setIndent("P-elp2");
      outputFormat0.setIndent("'Z5<VARF#]e");
      outputFormat0.setIndent("-padText");
      outputFormat0.setIndent("S[%:gE");
      assertEquals("S[%:gE", outputFormat0.getIndent());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true);
      outputFormat0.setIndentSize(4350);
      outputFormat0.setIndent(true);
      assertEquals("  ", outputFormat0.getIndent());
      
      outputFormat0.setIndent((String) null);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml!6zN<4Ld^ooCV", false);
      outputFormat0.getNewLineAfterNTags();
      OutputFormat outputFormat1 = new OutputFormat("-xhtml!6zN<4Ld^ooCV");
      outputFormat1.setNewLineAfterNTags(2171);
      assertEquals(2171, outputFormat1.getNewLineAfterNTags());
      
      outputFormat0.isNewLineAfterDeclaration();
      String string0 = OutputFormat.STANDARD_INDENT;
      String string1 = outputFormat0.getLineSeparator();
      assertEquals("\n", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9370977693527458
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Zwj`h6%!3@z2<99?r", false, "Zwj`h6%!3@z2<99?r");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Zwj`h6%!3@z2<99?r";
      stringArray0[1] = "Zwj`h6%!3@z2<99?r";
      stringArray0[6] = "Zwj`h6%!3@z2<99?r";
      stringArray0[3] = "Zwj`h6%!3@z2<99?r";
      outputFormat0.parseOptions(stringArray0, 0);
      stringArray0[4] = "Zwj`h6%!3@z2<99?r";
      stringArray0[5] = "w?SVc";
      stringArray0[6] = "Zwj`h6%!3@z2<99?r";
      stringArray0[7] = "Zwj`h6%!3@z2<99?r";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 2354);
      outputFormat0.parseOptions(stringArray0, 1844);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "Zwj`h6%!3@z2<99?r";
      stringArray1[1] = "-expandEmpty-new6ines";
      stringArray1[2] = "Zwj`h6%!3@z2<99?r";
      stringArray1[3] = "w?SVc";
      stringArray1[5] = "Zwj`h6%!3@z2<99?r";
      outputFormat0.parseOptions(stringArray1, 1);
      outputFormat0.parseOptions(stringArray1, 2);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, (-114));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -114
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Zwj`h6%!3@z2<99?r", false, "Zwj`h6%!3@z2<99?r");
      outputFormat0.setSuppressDeclaration(false);
      assertEquals("Zwj`h6%!3@z2<99?r", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals("Zwj`h6%!3@z2<99?r", outputFormat0.getIndent());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      
      OutputFormat outputFormat1 = new OutputFormat("9;", false);
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isXHTML());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("9;", outputFormat1.getIndent());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isOmitEncoding());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isPadText());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isExpandEmptyElements());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-newlines", false);
      outputFormat0.getEncoding();
      outputFormat0.setEncoding("-indent");
      outputFormat0.getEncoding();
      outputFormat0.getEncoding();
      assertEquals("-indent", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expandEmpty";
      stringArray0[1] = "xhtml!6zN<4Ld^oo5V";
      stringArray0[2] = "-expandEmpty";
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty", true, "XWax/^Wf 7+28");
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("XWax/^Wf 7+28", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertEquals("-expandEmpty", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", string0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
  }
}
