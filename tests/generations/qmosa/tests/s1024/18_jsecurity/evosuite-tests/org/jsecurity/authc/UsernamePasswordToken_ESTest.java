/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 09:58:24 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5099880165941912
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[4] = '2';
      charArray0[5] = 'K';
      charArray0[5] = 'T';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("WyoQT/g`PLCxxXX", "WyoQT/g`PLCxxXX");
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setRememberMe(false);
      byte[] byteArray0 = new byte[4];
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      byteArray0[0] = (byte) (-31);
      usernamePasswordToken0.setRememberMe(true);
      byteArray0[1] = (byte) (-31);
      usernamePasswordToken0.setPassword(charArray0);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-1);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" - ", (String) null, inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("<<FzOHD&zEjR]S{0aO5", (String) null, true);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - <<FzOHD&zEjR]S{0aO5, rememberMe=true", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress("", byteArray0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      InetAddress inetAddress1 = MockInetAddress.anyLocalAddress();
      assertFalse(inetAddress1.isMulticastAddress());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'Y';
      charArray0[2] = '\u0014';
      charArray0[4] = '\u001E';
      charArray0[5] = 'T';
      charArray0[5] = '\u0014';
      charArray0[7] = 'P';
      charArray0[8] = '\u0089';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, false);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = 'Z';
      charArray0[2] = ' ';
      charArray0[3] = '+';
      charArray0[4] = ' ';
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("cxwQ-", charArray0, false, inetAddress0);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[4] = '|';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress("p%C", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("^\"v&NcP~n$D9", charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress("p%C", byteArray0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = '$';
      charArray0[2] = 'D';
      charArray0[3] = 'v';
      charArray0[4] = 'F';
      charArray0[5] = 'A';
      charArray0[6] = '`';
      charArray0[7] = 'L';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Z{%!r ,!*f", charArray0, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress("", byteArray0);
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = '_';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(">_S+*Qfgpw37", charArray0, false, inetAddress1);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = 'H';
      charArray0[6] = '/';
      charArray0[7] = '\\';
      charArray0[8] = 'j';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(", rememberMe=", ", rememberMe=");
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.setRememberMe(true);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getInetAddress();
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress1.equals((Object)inetAddress0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress("p%C", byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("%,)N:47whd7wxG", "@EkUjr!nb};tFkIw|", inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress("p%C", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("%,)N:47whd7wxG", "Ag> 7?OTYzkku1", true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("QPD5yM>$&jpLT>>NZ^", "", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'Y';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Wyo QT/g`PLCxXX", "Wyo QT/g`PLCxXX");
      usernamePasswordToken0.setUsername("");
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress("p%C", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("02S}bRs^lDP^|MP%ZV", "1AMG:A%@6Y)7gMb;H", false);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - 02S}bRs^lDP^|MP%ZV, rememberMe=false", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", inetAddress0);
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress("p%C", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("p%C", "%,)N:47whd7wxG", inetAddress0);
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = 'Z';
      charArray0[2] = 'i';
      charArray0[3] = '@';
      charArray0[4] = 'C';
      charArray0[5] = 'G';
      charArray0[6] = '|';
      charArray0[7] = '';
      charArray0[8] = 'r';
      usernamePasswordToken0.setPassword(charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress("p%C", byteArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'P';
      charArray0[2] = '2';
      charArray0[3] = ';';
      charArray0[4] = '(';
      charArray0[5] = '|';
      charArray0[6] = '7';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false (/0.0.0.0)", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[5];
      charArray1[0] = '(';
      charArray1[1] = '/';
      charArray1[2] = 'X';
      charArray1[3] = ']';
      charArray1[4] = '%';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("^\"v&NcP~n$D9", charArray1, false);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[4] = '\u0000';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(", rememerMe=", " (");
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[4] = '|';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(", rememerMe=", "");
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress("p%C", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("p%C", "%,)N:47whd7wxG", inetAddress0);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress("p%C", byteArray0);
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("@EkUjr!nb};tFkIw|", (char[]) null, false);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress("p%C", byteArray0);
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (char[]) null, true);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
