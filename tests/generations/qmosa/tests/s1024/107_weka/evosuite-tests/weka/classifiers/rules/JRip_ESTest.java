/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 11:54:42 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.LinearNNSearch;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9761270063422125
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      properties1.getOrDefault(protectedProperties3, protectedProperties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      Properties properties4 = new Properties();
      protectedProperties5.remove((Object) properties4, (Object) protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties0);
      protectedProperties0.keySet();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties5);
      protectedProperties3.propertyNames();
      Attribute attribute0 = new Attribute("'C,Vsl``u|B6se @@W", "");
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(693);
      binarySparseInstance0.setWeight(2);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      jRip_NumericAntd1.value = (-477.4813);
      jRip_NumericAntd1.copy();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      boolean boolean0 = jRip_NumericAntd1.covers(sparseInstance0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Warning: Found missing value in test set, filling in values.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UX-Y}`");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UX-Y}`");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Warning: Found missing value in test set, filling in values.");
      jRip0.listOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Instances instances0 = new Instances("Warning: Found missing value in test set, filling in values.", arrayList0, 9);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = 2524.2783;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      SystemInUtil.addInputLine("");
      instances0.listIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("[{2D5|uIH:Je:f_F/", (List<String>) null);
      SystemInUtil.addInputLine("Warning: Found missing value in test set, filling in values.");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.maxInfoGain = (-1043.12768386);
      jRip_NominalAntd0.splitData(instances0, 7.0, 9);
      assertEquals(-0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2498848252425834
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      Locale locale0 = new Locale("JRIP: No model built yet.");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Utils.SMALL = (-4.0);
      Instances instances0 = new Instances("XKZ", arrayList0, 79);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2168.06731284389);
      jRip_RipperRule0.grow(instances0);
      assertEquals(2168.06731284389, jRip_RipperRule0.getConsequent(), 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.01;
      doubleArray0[1] = (double) 3230;
      doubleArray0[0] = (double) 3230;
      doubleArray0[3] = 2168.06731284389;
      doubleArray0[4] = 0.01;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.getEvaluationMeasure();
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable1.getEvaluationMeasure();
      System.setCurrentTimeMillis(79);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.prune(instances0, false);
      JRip jRip1 = new JRip();
      boolean boolean0 = jRip1.getDebug();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-2146043518));
      jRip0.getOptimizations();
      Utils.log2 = 1132.9480171649745;
      try { 
        jRip0.rulesetForOneClass(1132.9480171649745, (Instances) null, 1132.9480171649745, 1132.9480171649745);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instances instances0 = null;
      JRip jRip0 = new JRip();
      boolean boolean0 = false;
      jRip0.setUsePruning(false);
      Utils.log2 = Double.NaN;
      try { 
        jRip0.rulesetForOneClass(Double.NaN, (Instances) null, Double.NaN, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.getDebug();
      jRip0.listOptions();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("p'x{w&+O&12D$", "p'x{w&+O&12D$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'p'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2779.85), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      int[] intArray0 = new int[5];
      intArray0[0] = 99;
      intArray0[1] = 99;
      intArray0[2] = 99;
      intArray0[2] = (-2206);
      intArray0[4] = 1741;
      SparseInstance sparseInstance2 = new SparseInstance(99, doubleArray0, intArray0, 40);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(99, doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      binarySparseInstance4.toString(99);
      Attribute attribute0 = new Attribute((String) null, "");
      JRip jRip0 = new JRip();
      binarySparseInstance1.setWeight(99);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = 765.71855082;
      jRip_NumericAntd0.copy();
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance1);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1425230615188013
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      int[] intArray0 = new int[12];
      intArray0[0] = 4;
      decisionTable1.m_numAttributes = 4;
      intArray0[1] = 3;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("2", arrayList0, 109);
      JRip jRip1 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, 1590);
      arrayList0.trimToSize();
      instances0.add((Instance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable3 = new DecisionTable();
      decisionTable0.getEvaluationMeasure();
      Attribute attribute0 = new Attribute(".arff", (List<String>) null);
      SystemInUtil.addInputLine("U%xQOP9@;e");
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip_NominalAntd0.copy();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 22.0, 843.776218533);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      int[] intArray0 = new int[12];
      intArray0[0] = 3;
      decisionTable1.m_numAttributes = 4;
      intArray0[1] = 3;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("2", arrayList0, 109);
      JRip jRip1 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, 1590);
      instances0.add((Instance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable3 = new DecisionTable();
      decisionTable0.getEvaluationMeasure();
      DecisionTable decisionTable4 = new DecisionTable();
      decisionTable2.getEvaluationMeasure();
      System.setCurrentTimeMillis(3);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.284895754901243
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy((Classifier) null);
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      jRip0.seedTipText();
      jRip0.toString();
      jRip0.getDebug();
      Attribute attribute0 = new Attribute("pdv<[o9:T,HTU#O`u>#", "");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(4257.5136156404, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance1);
      // Undeclared exception!
      try { 
        denseInstance0.setValue(99, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Warning: Found missing value in test set, filling in values.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UX-Y}`");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UX-Y}`");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Warning: Found missing value in test set, filling in values.");
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.globalInfo();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Warning: Found missing value in test set, filling in values.", arrayList0, 1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("Warning: Found missing value in test set, filling in values.", 4);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      RuleStats.partition(instances0, (-3276));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) (-3276);
      doubleArray0[5] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(4.8, doubleArray0);
      jRip_NominalAntd0.covers(denseInstance0);
      Locale locale0 = Locale.CANADA;
      System.setCurrentTimeMillis((-3276));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      jRip0.setSeed((-35L));
      jRip0.getSeed();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-35L);
      doubleArray0[1] = 831.9474861;
      doubleArray0[2] = (double) (-35L);
      doubleArray0[3] = (double) (-35L);
      doubleArray0[4] = 1912.181373;
      jRip0.getRevision();
      doubleArray0[5] = 1568.232839;
      doubleArray0[6] = 624.0003115946;
      doubleArray0[7] = (double) (-35L);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-35L), doubleArray0);
      AbstractInstance.s_numericAfterDecimalPoint = 99;
      // Undeclared exception!
      try { 
        binarySparseInstance0.attribute(645);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.getSearchSpec();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      int[] intArray0 = new int[12];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[3] = 5;
      intArray0[3] = 4;
      decisionTable2.globalInfo();
      intArray0[4] = 4;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nCoefficients...\n", arrayList0, 2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("@data", 1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      RuleStats.partition(instances0, 1);
      double[] doubleArray0 = new double[9];
      intArray0[3] = 5;
      intArray0[0] = 5;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      decisionTable1.getEvaluationMeasure();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DenseInstance denseInstance0 = new DenseInstance(2);
      boolean boolean0 = jRip_RipperRule0.covers(denseInstance0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean1 = jRip_NumericAntd0.covers(denseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      boolean boolean2 = jRip0.getUsePruning();
      assertFalse(jRip0.getDebug());
      assertTrue(boolean2);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2779.8504093184), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nCoefficients...\n", arrayList0, 101);
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      jRip0.setDebug(true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, linkedList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      attribute0.copy();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("relational", arrayList0, 101);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`'+JJC^T \"");
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertTrue(jRip0.getDebug());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2779.8504093184), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nCoefficients...\n", arrayList0, 99);
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, linkedList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      instances0.add((Instance) sparseInstance0);
      RuleStats.partition(instances0, 2);
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.getEvaluationMeasure();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.287991730133441
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = false;
      jRip0.setCheckErrorRate(false);
      jRip0.setMinNo((-2949.8140874459323));
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      int[] intArray0 = new int[12];
      intArray0[0] = 3;
      decisionTable1.m_numAttributes = 4;
      intArray0[1] = 3;
      intArray0[3] = 5;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 5;
      decisionTable1.m_classPriorCounts = doubleArray0;
      intArray0[3] = 1;
      intArray0[4] = 4;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nCoeYficents...\n", arrayList0, 2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("sRIbo");
      decisionTable2.m_classIsNominal = true;
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList0.listIterator();
      RuleStats.partition(instances0, 1);
      double[] doubleArray1 = new double[9];
      intArray0[3] = 5;
      doubleArray1[1] = (double) 5;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-133.517471), intArray0, 4);
      instances0.add((Instance) binarySparseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 7.0, (-755.8979609133));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      jRip0.setSeed(0L);
      jRip0.getSeed();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 831.9474861;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 1.0;
      jRip0.getRevision();
      doubleArray0[5] = 1568.232839;
      doubleArray0[6] = 624.0003115946;
      doubleArray0[7] = (double) 0L;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0L, doubleArray0);
      AbstractInstance.s_numericAfterDecimalPoint = 99;
      // Undeclared exception!
      try { 
        binarySparseInstance0.attribute(645);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      Instances instances0 = decisionTable2.m_theInstances;
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[5] = 3;
      int[] intArray1 = new int[8];
      intArray1[0] = 5;
      intArray1[1] = 1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      decisionTable0.m_classPriorCounts = doubleArray0;
      intArray1[2] = 3;
      intArray1[3] = 3;
      intArray1[4] = 3;
      decisionTable0.m_saveMemory = true;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("@data", arrayList0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      arrayList1.trimToSize();
      Instances instances1 = new Instances("7t\u0007", arrayList1, 5);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 0;
      intArray1[7] = 5;
      doubleArray1[0] = (double) 1;
      doubleArray1[7] = (double) 3;
      DenseInstance denseInstance0 = new DenseInstance(3);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      String string0 = jRip0.getRevision();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals("8118", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Warning: Found missing value in test set, filling in values.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UX-Y}`");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UX-Y}`");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Warning: Found missing value in test set, filling in values.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Warning: Found missing value in test set, filling in values.", arrayList0, 9);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[4] = (double) 9;
      double double0 = 2524.2783;
      doubleArray0[5] = 2524.2783;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      instances0.listIterator();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) null, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("UX-Y}`", list0);
      String string0 = "38Zx,I|'xD";
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties2);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("K(qzxP@", protectedProperties5);
      arrayList0.add(attribute0);
      ArrayList<String> arrayList1 = new ArrayList<String>(1357);
      Attribute attribute1 = new Attribute("", arrayList1);
      arrayList0.trimToSize();
      Instances instances0 = new Instances("relational", arrayList0, 1357);
      instances0.deleteWithMissing((-128));
      JRip jRip0 = new JRip();
      RuleStats.partition(instances0, 8);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H!");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-KAQ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H!", arrayList0, 1357);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        jRip0.rulesetForOneClass(1357, instances0, (-1098.8963937066), 1357);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.062711125700289
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Warning: Found missing value in test set, filling in values.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UX-Y}`");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UX-Y}`");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Warning: Found missing value in test set, filling in values.");
      jRip0.listOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Instances instances0 = new Instances("Warning: Found missing value in test set, filling in values.", arrayList0, 9);
      double[] doubleArray0 = new double[7];
      Attribute attribute0 = new Attribute("@data");
      arrayList0.add(attribute0);
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = 2524.2783;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      SystemInUtil.addInputLine("");
      instances0.listIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute1 = new Attribute("[{2D5|uIH:Je:f_F/", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 7.0, 9);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1, instancesArray0.length);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("XKZ", arrayList0, 79);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-1062.0));
      jRip_RipperRule0.grow(instances0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode2);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleKeys();
      Locale locale1 = Locale.CANADA;
      System.setCurrentTimeMillis(79);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 2495.092052;
      doubleArray0[2] = 959.0;
      doubleArray0[3] = 959.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2495.092052, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      int[] intArray0 = new int[8];
      intArray0[0] = 99;
      intArray0[1] = 99;
      intArray0[2] = 99;
      intArray0[3] = 99;
      intArray0[4] = 99;
      intArray0[5] = 99;
      intArray0[6] = 99;
      intArray0[7] = 99;
      SparseInstance sparseInstance1 = new SparseInstance(Double.NaN, doubleArray0, intArray0, (-932));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2495.092052, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(99);
      SparseInstance sparseInstance2 = new SparseInstance(22);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance3);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Attribute attribute0 = new Attribute("", "");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean1 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(boolean1 == boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      Locale locale0 = new Locale("JRIP: No model built yet.");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("XKZ", arrayList0, 79);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2168.06731284389);
      jRip_RipperRule0.grow(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.01;
      doubleArray0[1] = (double) 3230;
      doubleArray0[0] = (double) 3230;
      doubleArray0[3] = 2168.06731284389;
      doubleArray0[4] = 0.01;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode2);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList2, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleKeys();
      Locale locale1 = Locale.ITALIAN;
      System.setCurrentTimeMillis(2536L);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8872385926133708
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Warning: Found missing value in test set, filling in values.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UX-Y}`");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A$");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A$");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Warning: Found missing value in test set, filling in values.", arrayList0, 9);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = 2524.2783;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("[{2D5|uIH:Je:f_F/", (List<String>) null);
      SystemInUtil.addInputLine("Warning: Found missing value in test set, filling in values.");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 7.0, 9);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1, instancesArray0.length);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WarniZg:MFound missing value in test set, filling in values.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UX-Y}`");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WarniZg:MFound missing value in test set, filling in values.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("WarniZg:MFound missing value in test set, filling in values.", arrayList0, 22);
      instances0.stream();
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (double) 22;
      doubleArray0[0] = 2524.2783;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      SystemInUtil.addInputLine("");
      instances0.listIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute(".arff", (List<String>) null);
      SystemInUtil.addInputLine("WarniZg:MFound missing value in test set, filling in values.");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      RuleStats.partition(instances0, 3);
      jRip_NominalAntd0.getRevision();
      System.setCurrentTimeMillis((-135L));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      Instances instances0 = decisionTable2.m_theInstances;
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[5] = 3;
      int[] intArray1 = new int[8];
      intArray1[0] = 2;
      intArray1[1] = 1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      decisionTable0.m_classPriorCounts = doubleArray0;
      intArray1[2] = 3;
      intArray1[3] = 3;
      intArray1[4] = 3;
      decisionTable0.m_saveMemory = true;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("@data", arrayList0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      arrayList1.trimToSize();
      Instances instances1 = new Instances("7t\u0007", arrayList1, 5);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 3;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 5;
      doubleArray1[5] = (double) 1;
      doubleArray1[7] = (double) 5;
      DenseInstance denseInstance0 = new DenseInstance(3, doubleArray1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      String string0 = jRip0.getRevision();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals("8118", string0);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1411461439556105
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2779.85), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      int[] intArray0 = new int[5];
      SparseInstance sparseInstance2 = new SparseInstance(1.0001, doubleArray0, intArray0, (-330));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(99, doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-1682.62), doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) sparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance(40, doubleArray0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(sparseInstance3);
      binarySparseInstance2.toString(596);
      Attribute attribute0 = new Attribute((String) null, "");
      JRip jRip0 = new JRip();
      binarySparseInstance2.setWeight((-330));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      SparseInstance sparseInstance4 = new SparseInstance((SparseInstance) binarySparseInstance5);
      jRip_NumericAntd0.covers(binarySparseInstance5);
      boolean boolean0 = jRip_NumericAntd1.covers(binarySparseInstance7);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("8118", 1552.5800776);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=1552.5800776
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", linkedList0, 490);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals("8118", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2779.85), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[6];
      intArray0[0] = 99;
      intArray0[1] = 99;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(99, doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(815.822, doubleArray0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((Instance) binarySparseInstance5);
      SparseInstance sparseInstance1 = new SparseInstance(99, doubleArray0, intArray0, 99);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      binarySparseInstance1.toString(99);
      Attribute attribute0 = new Attribute("d|", "");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute1 = new Attribute("");
      jRip_RipperRule0.toString(attribute1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", 7);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 2;
      attribute0.setStringValue("\nDeleting rules to decrease DL of the whole ruleset ...");
      doubleArray1[5] = (double) 7;
      doubleArray1[6] = (double) 2;
      doubleArray1[7] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(60.0, doubleArray1);
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      Locale locale0 = Locale.CANADA;
      System.setCurrentTimeMillis(1890L);
      String string0 = jRip0.getRevision();
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("8118", string0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties6);
      JRip jRip0 = new JRip();
      DenseInstance denseInstance0 = new DenseInstance(1357);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(denseInstance0);
      BayesNet bayesNet0 = new BayesNet();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Should never happen: defDL NaN or infinite!";
      stringArray0[1] = "The default DL = ";
      stringArray0[2] = "";
      stringArray0[3] = "i&K6Y3H_]oS3j3.`~";
      stringArray0[4] = "DCdif:\"A!B?+ZX";
      stringArray0[5] = "vC@X";
      stringArray0[6] = "The default DL = ";
      jRip0.setOptions(stringArray0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      int[] intArray0 = new int[12];
      intArray0[0] = 3;
      decisionTable1.m_numAttributes = 4;
      intArray0[1] = 3;
      intArray0[3] = 5;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 5;
      decisionTable1.m_classPriorCounts = doubleArray0;
      intArray0[3] = 5;
      intArray0[4] = 4;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nCoeYficents...\n", arrayList0, 2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("sRIbo");
      decisionTable2.m_classIsNominal = true;
      arrayList0.listIterator();
      RuleStats.partition(instances0, 1);
      double[] doubleArray1 = new double[9];
      intArray0[3] = 5;
      doubleArray1[1] = (double) 5;
      intArray0[9] = 1;
      MockRandom mockRandom0 = new MockRandom();
      intArray0[8] = 1;
      doubleArray1[4] = (double) 3;
      decisionTable1.m_numAttributes = 3;
      SelectedTag selectedTag0 = new SelectedTag(5, decisionTable1.TAGS_EVALUATION);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      boolean boolean0 = jRip0.getDebug();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(boolean0);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      Instances instances0 = decisionTable2.m_theInstances;
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 5;
      intArray0[3] = 1;
      intArray0[4] = 4;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[8] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1113.15675081, intArray0, 1);
      binarySparseInstance0.dataset();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      double double0 = jRip_NumericAntd0.getAttrValue();
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x?joF[");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-53);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = jRip_RipperRule0.covers((Instance) null);
      assertTrue(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      Attribute attribute0 = new Attribute("x?joF[");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "\tSet the minimal weights of instances\n\twithin a split.\n\t(default 2.0)";
      stringArray0[2] = "";
      stringArray0[4] = "\tSet the minimal weights of instances\n\twithin a split.\n\t(default 2.0)";
      stringArray0[5] = "Nk<V";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "weka.classifiers.rules.JRip$NumericAntd";
      JRip jRip1 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("V%A-%.~l", arrayList0, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertTrue(jRip1.getUsePruning());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(2, jRip1.getOptimizations());
      assertFalse(jRip1.getDebug());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip1.getFolds());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8169929397370832
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties2);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties3);
      protectedProperties0.keys();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties7);
      protectedProperties3.keySet();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties4);
      protectedProperties8.propertyNames();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties7.forEach(biConsumer0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Attribute attribute0 = new Attribute("]QRJ#[1,,G<e$f", arrayList0, protectedProperties1);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String[] stringArray0 = jRip0.getOptions();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.setOptions(stringArray0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(11, stringArray0.length);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      int[] intArray0 = new int[12];
      intArray0[0] = 3;
      decisionTable1.m_numAttributes = 4;
      intArray0[1] = 3;
      intArray0[3] = 5;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      decisionTable1.m_classPriorCounts = doubleArray0;
      intArray0[3] = 1;
      intArray0[4] = 4;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nCoefficients...\n", arrayList0, 2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("sRIbo");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      RuleStats.partition(instances0, 1);
      double[] doubleArray1 = new double[9];
      intArray0[3] = 5;
      doubleArray1[1] = (double) 5;
      intArray0[9] = 1;
      intArray0[1] = 1;
      doubleArray1[4] = (double) 3;
      decisionTable2.getEvaluationMeasure();
      doubleArray1[6] = (double) 2;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 1, 0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("I.iRpm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // I.iRpm not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Warning: Found missing value in test set, filling in values.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UX-Y}`");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UX-Y}`");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Warning: Found missing value in test set, filling in values.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Warning: Found missing value in test set, filling in values.", arrayList0, 9);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = 2524.2783;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      SystemInUtil.addInputLine("");
      instances0.listIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("[{2D5|uIH:Je:f_F/", (List<String>) null);
      SystemInUtil.addInputLine("Warning: Found missing value in test set, filling in values.");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals("[{2D5|uIH:Je:f_F/ = ", string0);
      
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 7.0, 9);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1, instancesArray0.length);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.UK;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-S";
      stringArray0[1] = "\tSet the minimal weights of instances\n\twithin a split.\n\t(default 2.0)";
      stringArray0[2] = "\tSet the minimal weights of instances\n\twithin a split.\n\t(default 2.0)";
      stringArray0[3] = "/OC2&1";
      stringArray0[4] = "";
      stringArray0[5] = "/OC2&1";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\tSet the minimal weights of instances
         // \twithin a split.
         // \t(default 2.0)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      protectedProperties1.keys();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties1);
      protectedProperties3.keySet();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties3);
      protectedProperties7.propertyNames();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties7);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties9.forEach(biConsumer0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("om.", arrayList0, protectedProperties5);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(10.0);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", 7);
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = (double) 7;
      doubleArray0[7] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(4, doubleArray0);
      String string0 = jRip0.usePruningTipText();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals("Whether pruning is performed.", string0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties2);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties10.forEach(biConsumer0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("No pruning: one rule found:\n", arrayList0, protectedProperties9);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties6);
      protectedProperties4.keys();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      protectedProperties5.propertyNames();
      Attribute attribute0 = new Attribute("3foT", protectedProperties4);
      attribute0.setWeight(5642.2469136576765);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      String string0 = jRip_NumericAntd0.toString();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals("3foT <= NaN", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("", linkedList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      Attribute attribute1 = jRip_NumericAntd0.getAttr();
      attribute1.toString();
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = (-229);
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("Warning: Found missing value in test set, filling in values.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Warning: Found missing value in test set, filling in values. not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      boolean boolean0 = jRip0.getCheckErrorRate();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean1 = jRip_RipperRule0.covers((Instance) null);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Attribute attribute0 = new Attribute("", "", (-15));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.getSearchSpec();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      int[] intArray0 = new int[12];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[3] = 5;
      intArray0[3] = 1;
      intArray0[4] = 4;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nCoefficients...\n", arrayList0, 2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("sRIbo", linkedList0);
      RuleStats.partition(instances0, 1);
      double[] doubleArray0 = new double[9];
      intArray0[3] = 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 3;
      decisionTable2.getEvaluationMeasure();
      JRip jRip0 = new JRip();
      String string0 = jRip0.minNoTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Nk<V";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "weka.classifiers.rules.JRip$NumericAntd";
      stringArray0[4] = "/OC2&1";
      stringArray0[5] = "\tSet the minimal weights of instances\n\twithin a split.\n\t(default 2.0)";
      stringArray0[6] = "";
      stringArray0[7] = "-S";
      stringArray0[8] = "";
      jRip0.setOptions(stringArray0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable2.m_evaluationMeasure = 2;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 5;
      decisionTable0.m_classPriors = doubleArray0;
      Instances instances0 = decisionTable0.m_dtInstances;
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 3;
      int[] intArray1 = new int[7];
      intArray1[2] = 3;
      intArray1[4] = 3;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      intArray1[5] = 2;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@data";
      stringArray0[1] = ".arff";
      JRip.main(stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.trimToSize();
      assertTrue(arrayList0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2779.8504093184), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      int[] intArray0 = new int[8];
      intArray0[1] = 99;
      intArray0[2] = 99;
      intArray0[3] = 99;
      intArray0[4] = 99;
      intArray0[5] = 99;
      intArray0[6] = 99;
      intArray0[7] = 99;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      int[] intArray1 = new int[8];
      intArray1[0] = 2112846814;
      intArray1[1] = 99;
      intArray1[4] = 2112846814;
      intArray1[5] = 99;
      binarySparseInstance1.setValue(2112846814, (double) 99);
      intArray1[6] = 2112846814;
      intArray1[7] = 99;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(99, intArray1, 99);
      binarySparseInstance0.mergeInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Locale locale0 = Locale.ITALIAN;
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getUnicodeLocaleAttributes();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(77);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DenseInstance denseInstance0 = new DenseInstance(2583);
      jRip_RipperRule0.covers(denseInstance0);
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.setConsequent(2168.06731284389);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList2, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      int[] intArray0 = new int[12];
      decisionTable1.m_numAttributes = 4;
      intArray0[1] = 3;
      intArray0[3] = 5;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 5;
      decisionTable1.m_classPriorCounts = doubleArray0;
      intArray0[3] = 1;
      intArray0[4] = 4;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nCeYficents(E.\n", arrayList0, 2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      decisionTable2.m_classIsNominal = true;
      arrayList0.listIterator();
      RuleStats.partition(instances0, 1);
      double[] doubleArray1 = new double[9];
      intArray0[3] = 5;
      doubleArray1[1] = (double) 5;
      intArray0[9] = 1;
      MockRandom mockRandom0 = new MockRandom();
      intArray0[8] = 1;
      decisionTable1.m_numAttributes = 0;
      SelectedTag selectedTag0 = new SelectedTag(5, decisionTable1.TAGS_EVALUATION);
      doubleArray1[6] = (double) 0;
      Locale locale0 = Locale.ITALIAN;
      String string0 = jRip0.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Warning: Found missing value in test set, filling in values.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UX-Y}`");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UX-Y}`");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Warning: Found missing value in test set, filling in values.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Warning: Found missing value in test set, filling in values.", arrayList0, 9);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = 2524.2783;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      instances0.listIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine("Warning: Found missing value in test set, filling in values.");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      int[] intArray0 = new int[12];
      decisionTable1.m_numAttributes = 4;
      intArray0[1] = 3;
      intArray0[3] = 5;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 5;
      decisionTable1.m_classPriorCounts = doubleArray0;
      intArray0[3] = 1;
      intArray0[4] = 4;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nCeYficents(E.\n", arrayList0, 2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      decisionTable2.m_classIsNominal = true;
      arrayList0.listIterator();
      RuleStats.partition(instances0, 1);
      double[] doubleArray1 = new double[9];
      intArray0[3] = 5;
      doubleArray1[1] = (double) 5;
      intArray0[9] = 1;
      MockRandom mockRandom0 = new MockRandom();
      intArray0[8] = 1;
      decisionTable1.m_numAttributes = 0;
      SelectedTag selectedTag0 = new SelectedTag(5, decisionTable1.TAGS_EVALUATION);
      doubleArray1[6] = (double) 0;
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(959.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      int[] intArray0 = new int[1];
      intArray0[0] = 99;
      jRip0.setOptimizations(5);
      SparseInstance sparseInstance1 = new SparseInstance((-2730.558086495977), doubleArray0, intArray0, 346);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(99, intArray0, 4111);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertEquals(5, jRip0.getOptimizations());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1664.998249225, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(99);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1741;
      intArray0[1] = 40;
      intArray0[2] = (-2206);
      intArray0[3] = (-2206);
      intArray0[4] = 99;
      intArray0[5] = 40;
      intArray0[6] = 99;
      SparseInstance sparseInstance2 = new SparseInstance(0.05, doubleArray0, intArray0, 255);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(99, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      binarySparseInstance1.toStringNoWeight();
      JRip jRip0 = new JRip();
      binarySparseInstance1.setWeight(99);
      SparseInstance sparseInstance3 = new SparseInstance((SparseInstance) binarySparseInstance0);
      double double0 = jRip0.getMinNo();
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, double0, 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ArrayList<String> arrayList0 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MockRandom mockRandom0 = new MockRandom();
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      Utils.log2 = 38.51041106952076;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getUnicodeLocaleAttributes();
      Locale locale1 = Locale.CHINA;
      Locale locale2 = Locale.PRC;
      locale1.clone();
      Locale locale3 = Locale.GERMAN;
      locale3.getUnicodeLocaleAttributes();
      Locale locale4 = Locale.GERMANY;
      Locale locale5 = Locale.SIMPLIFIED_CHINESE;
      locale2.getUnicodeLocaleKeys();
      locale5.getDisplayName();
      Locale locale6 = Locale.PRC;
      Locale locale7 = Locale.PRC;
      locale3.getUnicodeLocaleKeys();
      locale3.getDisplayName();
      Locale locale8 = Locale.PRC;
      Locale locale9 = Locale.ITALIAN;
      Locale locale10 = Locale.ITALIAN;
      locale1.getUnicodeLocaleKeys();
      Locale locale11 = Locale.UK;
      Locale locale12 = Locale.JAPAN;
      Locale locale13 = Locale.GERMAN;
      locale5.getUnicodeLocaleKeys();
      Locale locale14 = Locale.ITALIAN;
      assertFalse(locale14.equals((Object)locale0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", (List<String>) null, (-2482));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip0.checkErrorRateTipText();
      jRip0.getUsePruning();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = 0;
      intArray0[2] = (-2482);
      intArray0[3] = 2;
      intArray0[4] = 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1116.2301580591, intArray0, 5);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.equalHeadersMsg((Instance) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = Double.NaN;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getUnicodeLocaleAttributes();
      DenseInstance denseInstance0 = new DenseInstance(2433);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      boolean boolean0 = jRip0.getUsePruning();
      assertTrue(boolean0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("+u\"H1&p}8/Vo]W]n", arrayList0, 2);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      properties2.keys();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties9);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties0);
      protectedProperties11.keySet();
      protectedProperties3.propertyNames();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties6);
      protectedProperties1.keys();
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties5);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties11);
      protectedProperties7.keySet();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties5);
      protectedProperties5.propertyNames();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties1.forEach(biConsumer0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      boolean boolean1 = jRip_RipperRule0.covers((Instance) null);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip0.debugTipText();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals("Whether debug information is output to the console.", string0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      int[] intArray0 = new int[12];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[3] = 5;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      decisionTable1.m_classPriorCounts = doubleArray0;
      intArray0[3] = 1;
      intArray0[4] = 4;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nCoefficients...\n", arrayList0, 2);
      Locale locale0 = Locale.PRC;
      locale0.getUnicodeLocaleKeys();
      locale0.getDisplayName();
      Locale locale1 = Locale.PRC;
      Locale locale2 = Locale.ITALIAN;
      Locale locale3 = Locale.ITALIAN;
      locale3.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.forLanguageTag("@relation");
      Locale.forLanguageTag("");
      Locale locale4 = Locale.UK;
      Locale locale5 = Locale.JAPAN;
      locale2.getUnicodeLocaleKeys();
      Locale locale6 = Locale.ITALIAN;
      jRip0.enumerateMeasures();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      protectedProperties7.keys();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties0);
      protectedProperties2.propertyNames();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties7);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties14.forEach(biConsumer0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("SU4.z^4R>II7}/z+}", arrayList0, protectedProperties13);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      // Undeclared exception!
      try { 
        protectedProperties0.put("'/[O4^5DTt]A.", object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties4);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      protectedProperties0.keys();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties3);
      protectedProperties5.keySet();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties3);
      protectedProperties9.propertyNames();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties11.forEach(biConsumer0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Attribute attribute0 = new Attribute("\nReplace: ", arrayList0, protectedProperties1);
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", 7);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 1;
      doubleArray0[6] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (double) 2;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 7;
      doubleArray1[6] = (double) 2;
      doubleArray1[7] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(60.0, doubleArray1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "date";
      stringArray0[1] = "";
      stringArray0[2] = "integer";
      stringArray0[4] = "@attribute";
      stringArray0[5] = "@attribute";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 2495.092052;
      doubleArray0[2] = 959.0;
      doubleArray0[3] = 959.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2495.092052, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      int[] intArray0 = new int[8];
      intArray0[0] = 99;
      intArray0[1] = 99;
      intArray0[2] = 99;
      intArray0[3] = 99;
      intArray0[4] = 99;
      intArray0[5] = 99;
      intArray0[6] = 99;
      intArray0[7] = 99;
      SparseInstance sparseInstance1 = new SparseInstance(Double.NaN, doubleArray0, intArray0, (-932));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2495.092052, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(99);
      SparseInstance sparseInstance2 = new SparseInstance(22);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance3);
      assertTrue(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.583437541968916
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.forLanguageTag("");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      jRip0.setOptions(stringArray0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("", list0);
      locale0.clone();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAccu();
      jRip_NominalAntd0.copy();
      jRip0.getFolds();
      jRip_NominalAntd0.getMaxInfoGain();
      jRip_NominalAntd0.maxInfoGain = (double) 3;
      jRip0.checkErrorRateTipText();
      jRip_NominalAntd0.getMaxInfoGain();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "numeric");
      jRip0.optimizationsTipText();
      double double0 = 0.0;
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.checkErrorRateTipText();
      jRip0.getCheckErrorRate();
      Attribute attribute0 = new Attribute("Whether check for error rate >= 1/2 is included in stopping criterion.");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      jRip0.optimizationsTipText();
      jRip_NumericAntd0.getMaxInfoGain();
      jRip0.debugTipText();
      double double0 = (-110.525);
      CostMatrix costMatrix0 = new CostMatrix(1);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      MockRandom mockRandom0 = new MockRandom();
      try { 
        costMatrix0.applyCostMatrix((Instances) null, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      protectedProperties1.keys();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties1);
      protectedProperties3.keySet();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties3);
      protectedProperties7.propertyNames();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties7);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties9.forEach(biConsumer0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("om.", arrayList0, protectedProperties5);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      String string0 = jRip_NumericAntd0.toString();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertNotSame(jRip_NumericAntd0, jRip_NumericAntd1);
      assertEquals("om. <= NaN", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(959.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      int[] intArray0 = new int[2];
      intArray0[0] = 99;
      intArray0[1] = 4111;
      SparseInstance sparseInstance1 = new SparseInstance(1357.0, doubleArray0, intArray0, 99);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1308.571), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(481, intArray0, 1045);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance1);
      binarySparseInstance0.toString(99);
      Attribute attribute0 = new Attribute("", (List<String>) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance3);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      String string0 = jRip0.toString();
      assertFalse(jRip0.getDebug());
      assertEquals("JRIP: No model built yet.", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WarniZg:MFound missing value in test set, filling in values.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WarniZg:MFound missing value in test set, filling in values.");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WarniZg:MFound missing value in test set, filling in values.");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WarniZg:MFound missing value in test set, filling in values.");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WarniZg:MFound missing value in test set, filling in values.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WarniZg:MFound missing value in test set, filling in values.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("WarniZg:MFound missing value in test set, filling in values.", arrayList0, 9);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[4] = (double) 9;
      doubleArray0[0] = 2524.2783;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      instances0.listIterator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("[{2D5|uIH:Je:f_F/", (List<String>) null);
      SystemInUtil.addInputLine("WarniZg:MFound missing value in test set, filling in values.");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      RuleStats.partition(instances0, 3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 2524.2783, 7.0);
      jRip_NumericAntd0.toString();
      System.setCurrentTimeMillis(4);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.005154853485851
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2779.8504093184), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      int[] intArray0 = new int[0];
      SparseInstance sparseInstance1 = new SparseInstance(99.0, doubleArray0, intArray0, 8);
      binarySparseInstance0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(3.0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(99);
      SparseInstance sparseInstance2 = new SparseInstance(99);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance5.toString(99);
      JRip jRip0 = new JRip();
      jRip0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      binarySparseInstance4.dataset();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds((-1782));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      locale0.clone();
      Locale locale1 = Locale.CHINA;
      Locale locale2 = Locale.CHINA;
      // Undeclared exception!
      try { 
        locale1.getUnicodeLocaleType("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
         verifyException("java.util.Locale", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x?joF[");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x?joF[");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x?joF[");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.ITALIAN;
      System.setCurrentTimeMillis((-2395L));
      JRip jRip0 = new JRip();
      long long0 = jRip0.getSeed();
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, long0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = Double.NaN;
      try { 
        jRip0.rulesetForOneClass(Double.NaN, (Instances) null, Double.NaN, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }
}
