/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 12:21:21 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"H()w{");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[0] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Random.setNextRandom(969);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"H()w{");
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"H()w{");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      booleanArray0[3] = true;
      Random.setNextRandom(969);
      Random.setNextRandom((byte)24);
      Random.setNextRandom(606);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Random.setNextRandom((byte)0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Line search ... ");
      double[] doubleArray0 = new double[1];
      Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, false, booleanArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"H()w{");
      Random.setNextRandom((byte)24);
      Random.setNextRandom(969);
      Random.setNextRandom((-950));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(6, 6);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 18;
      doubleArray0[1] = (double) 18;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 36;
      Locale locale0 = Locale.forLanguageTag("B:'1C8]C8u[*@pZ&");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);
      linkedList2.pollFirst();
      linkedList0.addAll((Collection<? extends Locale.LanguageRange>) linkedList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale0.getDisplayScript((Locale) null);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      locale0.getDisplayVariant();
      locale0.toLanguageTag();
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      Locale locale2 = new Locale("");
      locale1.toLanguageTag();
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[5] = true;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      assertArrayEquals(new double[] {0.0, Double.POSITIVE_INFINITY, 0.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {18.0, 18.0, 6.0, 6.0, 36.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"H()w{");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"H()w{");
      byteArray0[1] = (byte)69;
      byte byte0 = (byte)8;
      byteArray0[2] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"H()w{");
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"H()w{");
      booleanArray0[6] = false;
      Random.setNextRandom((byte)69);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Random.setNextRandom(606);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"H()w{");
      Random.setNextRandom((byte)8);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"H()w{");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Line search ... ");
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, true, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity(32, 7);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) 6;
      double double0 = Optimization.m_Epsilon;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-4001.553695886222);
      doubleArray1[1] = 2.220446049250313E-16;
      doubleArray1[2] = 2.220446049250313E-16;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 32;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("o+$w9= a3)", decimalFormatSymbols0);
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      matrix0.print((NumberFormat) decimalFormat0, 0);
      doubleArray1[5] = (-2128.1);
      Optimization.solveTriangle(matrix0, doubleArray1, true, (boolean[]) null);
      Random.setNextRandom(2967);
      Random.setNextRandom((-1739));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(2982);
      int int0 = 2709;
      optimization_DynamicIntArray0.addElement(2709);
      optimization_DynamicIntArray0.elementAt(33);
      weka.core.matrix.Matrix matrix0 = null;
      try {
        matrix0 = new weka.core.matrix.Matrix(2709, (-1216));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.matrix.Matrix", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"H()w{");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)24;
      byteArray1[1] = (byte)24;
      byteArray1[2] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Random.setNextRandom(945);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"H()w{");
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"H()w{");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      booleanArray0[3] = true;
      Random.setNextRandom(945);
      Random.setNextRandom((byte)24);
      Random.setNextRandom(606);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"H()w{");
      Random.setNextRandom((byte)8);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"H()w{");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Line search ... ");
      double[] doubleArray0 = new double[0];
      Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, true, booleanArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"H()w{");
      Random.setNextRandom((byte)24);
      Random.setNextRandom((-950));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"H()w{");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Random.setNextRandom(945);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"H()w{");
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"H()w{");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      booleanArray0[3] = true;
      Random.setNextRandom(945);
      Random.setNextRandom((byte)24);
      Random.setNextRandom(606);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"H()w{");
      Random.setNextRandom((byte)8);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Line search ... ");
      double[] doubleArray0 = new double[0];
      Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, false, booleanArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"H()w{");
      Random.setNextRandom((byte)24);
      Random.setNextRandom(945);
      Random.setNextRandom((-950));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(18, 18);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 18;
      doubleArray0[1] = (double) 18;
      doubleArray0[3] = (double) 18;
      doubleArray0[3] = (double) 18;
      Locale locale0 = Locale.forLanguageTag("B:'1C+8]Ctu[J*@pZ&");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      linkedList0.clear();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      locale0.getDisplayLanguage((Locale) null);
      Comparator<Locale.LanguageRange> comparator0 = (Comparator<Locale.LanguageRange>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      linkedList0.addAll((Collection<? extends Locale.LanguageRange>) linkedList1);
      Locale locale2 = Locale.CHINA;
      locale1.getUnicodeLocaleAttributes();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList3, locale_FilteringMode0);
      linkedList1.add((Locale.LanguageRange) null);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale0.getDisplayScript(locale1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode1);
      locale0.toLanguageTag();
      Locale locale3 = Locale.ROOT;
      locale3.getScript();
      locale0.getUnicodeLocaleKeys();
      locale3.getDisplayCountry();
      Locale locale4 = Locale.ITALIAN;
      locale3.getExtension('e');
      Locale locale5 = Locale.FRENCH;
      locale3.toLanguageTag();
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity(18, 7);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 18;
      doubleArray0[1] = (double) 6;
      matrix0.cond();
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 0;
      weka.core.matrix.Matrix matrix1 = matrix0.times((-1261.248792));
      Locale locale0 = Locale.forLanguageTag("B:'1C8]C8u[*@pZ&");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode0);
      locale0.getDisplayVariant();
      locale0.toLanguageTag();
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale1.toLanguageTag();
      locale1.getScript();
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Optimization.solveTriangle(matrix1, doubleArray0, true, booleanArray0);
      Random.setNextRandom(7);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Academic Press");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(8, 8);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A<`7L+S#|,G#fAlU}/z");
      doubleArray0[5] = (double) 8;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0, Double.NaN, Double.NaN, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      int int0 = 820;
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(820);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.size();
      int int1 = 200;
      // Undeclared exception!
      weka.core.matrix.Matrix.random(820, 200);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      int int0 = 0;
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      int int1 = (-2734);
      optimization_DynamicIntArray0.addElement((-866));
      optimization_DynamicIntArray0.removeElementAt(0);
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt((-4095));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.233582383181043
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(87);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(10);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.copy();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
