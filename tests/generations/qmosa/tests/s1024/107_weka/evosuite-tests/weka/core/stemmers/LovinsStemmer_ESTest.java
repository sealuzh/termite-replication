/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 00:59:54 GMT 2020
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0771812653643373
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[7];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("kzcmyz");
      lovinsStemmer0.stem("kzcmyz");
      lovinsStemmer0.stemString("@Wd<");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("kzcmet");
      String string0 = lovinsStemmer0.stemString("R#g#Y2\"\"(a");
      assertEquals("r#g#y2\"\"(a", string0);
      
      lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.");
      assertEquals("nam(s) of edit(s), typ as ind in th lat book. if ther is al an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string1);
      
      lovinsStemmer0.stemString("kzcmet");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1383816939337545
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("a=GB)`){\"");
      lovinsStemmer0.stem("a=gb)`){\"");
      lovinsStemmer0.stemString("l\"60Xizpn");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.stemString("arized");
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmer");
      lovinsStemmer0.stem("D q?`KR(R");
      lovinsStemmer0.stemString("volume");
      lovinsStemmer0.stemString("volum");
      String string1 = lovinsStemmer0.stemString("/,ul");
      assertEquals("/,ul", string1);
      
      String string2 = lovinsStemmer0.stemString("icist");
      assertEquals("ic", string2);
      
      lovinsStemmer0.stemString("a=gb)`){\"");
      lovinsStemmer0.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0906823690330616
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.globalInfo();
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("k[k$*O$=AEDZX");
      lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("h|im$h}7e~");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      lovinsStemmer1.stemString("MISC");
      lovinsStemmer1.stemString("-Gg!'");
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0785464282715878
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("Bu5cSynIOMK~{Sl%");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("0O\r!]Z(&.%g~V");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.";
      stringArray0[1] = "0o\r!]z(&.%g~v";
      stringArray0[2] = "Bu5cSynIOMK~{Sl%";
      stringArray0[3] = "0O\r!]Z(&.%g~V";
      stringArray0[4] = "W";
      stringArray0[5] = "%*A`(^k.";
      stringArray0[6] = "Indices from sort (ints): ";
      stringArray0[7] = "bu5csyniomk~{sl%";
      stringArray0[8] = "Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("W");
      lovinsStemmer2.toString();
      String string0 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer3.stem("0o\r!]z(&.%g~v");
      String string1 = lovinsStemmer3.stemString("/Uy1?8Rp");
      assertEquals("/uy1?8rp", string1);
      
      String string2 = lovinsStemmer1.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string2);
      
      String string3 = lovinsStemmer2.stemString("ation");
      assertEquals("ation", string3);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.149656298378745
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.getRevision();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer2.stemString("iev");
      assertEquals("ief", string1);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("rpt");
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.193235666285545
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("vas");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("%x");
      lovinsStemmer1.stemString("5.70001 == 5.7 ? ");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%x";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("ive");
      lovinsStemmer1.stemString("%x");
      lovinsStemmer1.stemString("0'9;|");
      String string1 = lovinsStemmer1.stemString("Can't construct a path to file relative to user dir.");
      assertEquals("can't construc a path to fil rel to user dir.", string1);
      
      lovinsStemmer1.stemString("lud");
      lovinsStemmer0.stemString("LW^");
      lovinsStemmer0.stemString("titlax");
      String string2 = lovinsStemmer1.stemString("!\"P2#tqNI");
      assertEquals("!\"p2#tqn", string2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1672453735203485
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "eri0";
      stringArray0[3] = "Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.";
      stringArray0[4] = "Bu5cSynIOMK~{Sl%";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Indices from sort (ints): ");
      assertEquals("indic from sort (int): ", string0);
      
      String string1 = lovinsStemmer0.stemString("Can't add object to itself!");
      assertEquals("can't ad object to itself!", string1);
      
      lovinsStemmer0.stem("can't ad object to itself!");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.stemString("");
      lovinsStemmer2.stemString("");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0985209263509972
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("atory");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stem("atory");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("atory");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ur");
      lovinsStemmer0.stemString("`voMu");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("ator");
      lovinsStemmer0.stemString("JbVS41uM+CL1=t>.Q+");
      String string1 = lovinsStemmer0.stemString("tl6lpex");
      assertEquals("tl6lpic", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1306949927416412
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("The International Standard Serial Number. Used to identify a journal.");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[3];
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("I1ZV;.yn'^|m@");
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("d@tSxH4 I");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("freund, y. and mason, l.lux");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer2.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1303005157968697
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray0[3] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "atives";
      stringArray0[7] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("YYXW1+Sursi%6rF\"sr");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("inity");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("inity");
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.144606758416975
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ics");
      String[] stringArray0 = new String[6];
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("ic");
      assertTrue(string1.equals((Object)string0));
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string2 = lovinsStemmer3.getRevision();
      assertEquals("8034", string2);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("6q");
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer2.stem("s1Y;zbB");
      assertEquals("s1y;zb", string4);
      
      String string5 = lovinsStemmer3.stemString("A");
      assertEquals("a", string5);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1374662776072177
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ak=GB)`){\"k");
      lovinsStemmer0.stem("ak=gb)`){\"k");
      lovinsStemmer0.stemString("l\"60Xizpn");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SD40D3_ 27{=>!3Z3";
      stringArray0[1] = "l\"60Xizpn";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("~:0n*mevN|p!u|R0\"");
      lovinsStemmer0.stemString("5mbher");
      lovinsStemmer0.stemString("\tUses lowercase strings.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("jC");
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1866940996513247
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "atory";
      String[] stringArray0 = null;
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("metr");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("V=//zI=vwfPl?{&");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1494151271363733
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("ak=GB)`){\"k");
      lovinsStemmer0.stem("ak=gb)`){\"k");
      lovinsStemmer0.stemString("l\"60Xizpn");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[8];
      LovinsStemmer.main(stringArray0);
      stringArray0[0] = "SD40D3_ 27{=>!3Z3";
      stringArray0[1] = "l\"60Xizpn";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      String string1 = lovinsStemmer0.stemString("eous");
      assertEquals("eous", string1);
      
      lovinsStemmer0.stemString("l\"60xizpn");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("-h");
      lovinsStemmer0.stemString("tqdmit");
      String string2 = lovinsStemmer0.stemString("\tDisplays this help.");
      assertEquals("\tdisplay th help.", string2);
      
      String string3 = lovinsStemmer0.stemString("<3Md\"S~aX");
      assertEquals("<3md\"s~ax", string3);
      
      String string4 = lovinsStemmer0.stemString("oZiX~tfa|T(_8W");
      assertEquals("ozic~tf|t(_8w", string4);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.098607109833326
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("The International Standard Serial Number. Used to identify a journal.");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "th intern standard ser number. us to identif a journ.";
      stringArray0[2] = "th intern standard ser number. us to identif a journ.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem(",r8");
      String[] stringArray1 = new String[6];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[1] = ",r8";
      stringArray1[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String[] stringArray2 = new String[7];
      stringArray2[0] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray2[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray2[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray2[3] = "th intern standard ser number. us to identif a journ.";
      stringArray2[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer1.stem("aHW\"s%.Bb");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1088078812682207
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("ionate");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ion";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("Proceeding of the Sixteenth International Conference on Machine Learning");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("proceed of th sixteenth intern confer on mach learn");
      lovinsStemmer1.getTechnicalInformation();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0791185544724458
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer0.stemString("l\"60Xizpn");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SD40D3_ 27{=>!3Z3";
      stringArray0[1] = "l\"60Xizpn";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("arized");
      lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer0.stemString("luc");
      lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmer");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.115724419700855
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("kcsyampiclid");
      lovinsStemmer0.stemString("lud");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("First option split up:");
      lovinsStemmer0.stemString("aedzxlux");
      lovinsStemmer0.stemString("rud");
      lovinsStemmer0.stemString("kcsyampiclid");
      String string1 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.stemString("kcsyampiclis");
      String string2 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String string3 = lovinsStemmer1.stemString("kcsyampiclis");
      assertEquals("kcsyampicl", string3);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0960856461932817
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[2] = "p\u0005MbESO<,m)";
      stringArray0[3] = ">XqqU";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("p\u0005MbESO<,m)");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("Proceeding of the Sixteenth International Conference on Machine Learning");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem(" oM|%r64");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("Problem reading user properties: ");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString(" om|%r64");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1295798795513128
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("/O przWEv");
      lovinsStemmer1.stemString("kcsyampiclid");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("kcsyampiclid");
      String string1 = lovinsStemmer1.stemString("allically");
      assertEquals("al", string1);
      
      String string2 = lovinsStemmer0.stemString("/o przwev");
      assertEquals("/o przwev", string2);
      
      String string3 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      String string4 = lovinsStemmer0.stemString("ha9nyz");
      assertEquals("ha9nys", string4);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1263720605467789
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("atory");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stem("atory");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("arizlux");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("atory");
      lovinsStemmer0.stemString("dex");
      lovinsStemmer0.stemString("T\"&cPayNW#k");
      String string2 = lovinsStemmer0.stemString("|qVoBA}u/~p+8~qc|C");
      assertEquals("|qvob}u/~p+8~qc|c", string2);
      
      String string3 = lovinsStemmer0.stemString(">f=]Q)PppV*2aPP~Y:");
      assertEquals(">f=]q)pppv*2ap~y:", string3);
      
      lovinsStemmer0.stem("A9&v&U;I%lcho3$ 4Q3");
      String string4 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string4);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1231670442800543
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ics");
      String[] stringArray0 = new String[6];
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("A work that is printed and bou{d, but without a named publisher or sponsoring institution.");
      assertEquals("a work that is print and bou{d, but without a nam publishes or sponsor institut.", string0);
      
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("a work that is print and bou{d, but without a nam publishes or sponsor institut.");
      String string1 = lovinsStemmer0.stemString("ics");
      assertEquals("ic", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmer");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmer");
      String string3 = lovinsStemmer0.stemString("kEvHS=*1(?MD");
      assertEquals("kevh=*1(?md", string3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0990167643062487
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("iev");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("ancies");
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1103060664834175
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.globalInfo();
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("S?tCAC<,Ga{ho\"|uAq");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("addresend");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1070879882717752
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("5.70001 == 5.7 ? ");
      lovinsStemmer0.stemString("5X$eA)w*G{");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ionate";
      stringArray0[1] = "ionate";
      stringArray0[2] = "5.70001 == 5.7 ? ";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "5.70001 == 5.7 ? ";
      stringArray1[2] = "5.70001 == 5.7 ? ";
      stringArray1[3] = "5x$ea)w*g{";
      stringArray1[5] = "5x$ea)w*g{";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("ional");
      lovinsStemmer0.stemString("ionate");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1421431791224685
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.globalInfo();
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stem("wek.cor.stemmer.lovinsstemmer");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("yi\"l'aaaBvQ0jAR");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("umeezexbex");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer3.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.149000625079662
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("gat'v!t(.jkldex");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("XaG_xHu3!/$q");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("pvZBaW5@}g?,.RR&B");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.148655607336595
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("kcsyampiclid");
      lovinsStemmer0.stemString("\n");
      lovinsStemmer0.stemString(" .,;:!?'\"");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString(" .,;:!?'\"");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString(";`e4fZESK");
      lovinsStemmer0.stemString("aedzxax");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1181967851328005
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("The Mathematical Reviews number.");
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "The Mathematical Reviews number.";
      stringArray1[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[2] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray1[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[5] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      assertEquals(6, stringArray1.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1299844492144984
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      String string1 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("arlrudcid");
      lovinsStemmer0.stemString("uad");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer1.toString();
      assertFalse(string3.equals((Object)string0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.172355478988128
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("D");
      lovinsStemmer0.stemString("13myt");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("Array-Dimensions of 'new int[][]': ");
      assertEquals("arra-dimens of 'new int[][]': ", string1);
      
      String string2 = lovinsStemmer0.stemString("1k");
      assertEquals("1k", string2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1643179658612617
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.stemString("kcsyampiclid");
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmer");
      lovinsStemmer0.stemString("First option split up:");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("First option split up:");
      assertEquals("first opt split up:", string2);
      
      String string3 = lovinsStemmer0.stemString("'b@z5LM_");
      assertEquals("'b@z5lm_", string3);
      
      lovinsStemmer0.stemString("?");
      lovinsStemmer0.stemString("ward");
      lovinsStemmer0.stemString("SCHOOL");
      lovinsStemmer0.stemString("EBT&Q:T@D\"xXx1^'O,^");
      LovinsStemmer.main(stringArray0);
      String string4 = lovinsStemmer0.stemString("rud");
      assertEquals("rus", string4);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.163884074796734
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getRevision();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.globalInfo();
      lovinsStemmer2.stemString("kvbwjex");
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("KFB&*osv");
      lovinsStemmer4.getRevision();
      LovinsStemmer.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1456438031694904
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("kcsyampiclid");
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmer");
      lovinsStemmer0.stemString("d1;UT^WQ#o&H|kpV`>");
      lovinsStemmer0.stemString("ex");
      String string1 = lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      assertEquals("invalis cv revis - not dot!", string1);
      
      lovinsStemmer0.stemString("LAt8O");
      lovinsStemmer0.stemString("LAt8O");
      String string2 = lovinsStemmer0.stemString("ex");
      assertEquals("ex", string2);
      
      lovinsStemmer0.stemString("erid");
      String string3 = lovinsStemmer0.stemString(",7");
      assertEquals(",7", string3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0679204258189465
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("p\u0005MbESO<,m)");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("p\u0005mbes<,m)");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("ian");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("nbx }6>P_jm>L#W");
      lovinsStemmer1.stemString("log2(4.6): ");
      lovinsStemmer2.stemString("tex");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.stemString("jkldicuad");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer2.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1295798795513128
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.stemString("ert");
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.stemString("ert");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("rud");
      lovinsStemmer1.stemString("titlcid");
      String string2 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1355337574010402
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("ak=GB)`){\"k");
      lovinsStemmer0.stem("ak=gb)`){\"k");
      lovinsStemmer0.stemString("l\"60Xizpn");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SD40D3_ 27{=>!3Z3";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.stemString("ert");
      lovinsStemmer0.stemString("iful");
      lovinsStemmer0.stemString("SD40D3_ 27{=>!3Z3");
      String string2 = lovinsStemmer0.stemString("ond");
      assertEquals("ons", string2);
      
      lovinsStemmer0.stemString("arly");
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.stemString("SD40D3_ 27{=>!3Z3");
      assertEquals("sd40d3_ 27{=>!3z3", string3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1299844492144984
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("atory");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("atory");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "54kcsampand";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "atory";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "ator";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("end");
      lovinsStemmer0.stemString("z=9mG%f7");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1421431791224685
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("yz");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("ak=GB)`){\"k");
      lovinsStemmer0.stem("ak=gb)`){\"k");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SD40D3_ 27{=>!3Z3";
      stringArray0[1] = "ak=GB)`){\"k";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ak=GB)`){\"k");
      lovinsStemmer0.stem("!|e#n`W{");
      lovinsStemmer0.stemString("ious");
      lovinsStemmer0.stemString("SD40D3_ 27{=>!3Z3");
      String string1 = lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      assertEquals("a loc associ with th entr, such as th cit in which a confer took plac.", string1);
      
      lovinsStemmer0.stemString("SD40D3_ 27{=>!3Z3");
      String string2 = lovinsStemmer0.stemString("arlrud");
      assertEquals("arlrus", string2);
      
      lovinsStemmer0.stem("ak=gb)`){\"k");
      String string3 = lovinsStemmer0.stem("yz");
      assertEquals("yz", string3);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1643179658612617
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("kcsyampiclid");
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmer");
      lovinsStemmer0.stemString("First option split up:");
      String string0 = lovinsStemmer0.stemString("First option split up:");
      assertEquals("first opt split up:", string0);
      
      String string1 = lovinsStemmer0.stemString("'b@z5LM_");
      assertEquals("'b@z5lm_", string1);
      
      lovinsStemmer0.stemString("?");
      String string2 = lovinsStemmer0.stemString("lingulud");
      assertEquals("lingulus", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1570563043021076
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.stemString("kcsyampiclid");
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmer");
      String string2 = lovinsStemmer0.stemString("First option split up:");
      assertEquals("first opt split up:", string2);
      
      String string3 = lovinsStemmer0.stemString("kcsyampiclid");
      assertEquals("kcsyampiclis", string3);
      
      lovinsStemmer0.stemString("ations");
      lovinsStemmer0.stemString(")d");
      String string4 = lovinsStemmer0.stemString("<3Md\"S~aX");
      assertEquals("<3md\"s~ax", string4);
      
      String string5 = lovinsStemmer0.stemString("X-Sj)\"pA7<tN'*");
      assertEquals("x-sj)\"pa7<tn'*", string5);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1529065503646017
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"P");
      String string0 = lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer0.stemString("8034");
      assertTrue(string2.equals((Object)string0));
      
      lovinsStemmer0.stem("ical");
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.stem("8034");
      String string4 = lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1303005157968697
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.globalInfo();
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.stemString("vad");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1160452568871542
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ics");
      assertEquals("ic", string0);
      
      String[] stringArray0 = new String[6];
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("A work that is printed and bound, but without a named publisher or sponsoring institution.");
      assertEquals("a work that is print and bound, but without a nam publishes or sponsor institut.", string1);
      
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String[] stringArray1 = new String[6];
      stringArray1[0] = "ic";
      stringArray1[1] = "ic";
      stringArray1[2] = "";
      stringArray1[3] = "ics";
      stringArray1[4] = "ics";
      stringArray1[5] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("sercid");
      lovinsStemmer0.stemString("icide");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2256050317581284
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("M_xLUhzMf5qg.Zt");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.getRevision();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[1] = "M_xLUhzMf5qg.Zt";
      stringArray1[2] = "8034";
      stringArray1[3] = "M_xLUhzMf5qg.Zt";
      stringArray1[4] = "M_xLUhzMf5qg.Zt";
      stringArray1[5] = "";
      stringArray1[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[7] = "ic+f0`bY',.ofnOrk";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("o5tO6$rRa~92(HO QU{");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.getRevision();
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1522908559729585
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("l\"60Xizpn");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SD40D3_ 27{=>!3Z3";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("l\"60Xizpn");
      lovinsStemmer0.stemString("U");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("ement");
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.072717258717951
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",r8";
      stringArray0[1] = ",r8";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.151870983087876
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("A work that is printed and bou{d, but without a named publisher or sponsoring institution.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("hmT!GYaQ$36");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0894843889333998
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The International Standard Serial Number. Used to identify a journal.");
      assertEquals("th intern standard ser number. us to identif a journ.", string0);
      
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "th intern standard ser number. us to identif a journ.";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray1);
      String string1 = lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      assertEquals("how someth strang ha been publ. th first word should be capital.", string1);
      
      lovinsStemmer0.stemString("th intern standard ser number. us to identif a journ.");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1579647963882482
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("&iv^ 4_z,5RQgFusnn");
      String string0 = lovinsStemmer0.stem("&iv^ 4_z,5rqgfusn");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      lovinsStemmer0.stem("&iv^ 4_z,5rqgfusn");
      stringArray0[1] = "&iv^ 4_z,5RQgFusnn";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "&iv^ 4_z,5RQgFusnn";
      stringArray0[4] = "&iv^ 4_z,5RQgFusnn";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("&iv^ 4_z,5rqgfusn");
      String string2 = lovinsStemmer0.stemString("&iv^ 4_z,5RQgFusnn");
      assertTrue(string2.equals((Object)string0));
      
      lovinsStemmer0.stem("f~");
      lovinsStemmer0.stem("&iv^ 4_z,5RQgFusnn");
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.stem("ants");
      assertEquals("ant", string3);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("gcvjond");
      lovinsStemmer1.stemString("cvj");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("&iv^ 4_z,5RQgFusnn");
      lovinsStemmer0.stemString("&iv^ 4_z,5rqgfusn");
      String string4 = lovinsStemmer0.stemString("ix");
      assertEquals("ix", string4);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0927630368103949
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "W";
      stringArray0[1] = "erid";
      stringArray0[2] = "VI";
      stringArray0[3] = "Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.";
      stringArray0[4] = "The sponsoring institution of a technical report.";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Indices from sort (ints): ");
      assertEquals("indic from sort (int): ", string0);
      
      lovinsStemmer0.stemString("");
      String string1 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("g63o~/bex");
      assertEquals("g63~/bic", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.stem("The sponsoring institution of a technical report.");
      lovinsStemmer0.stemString("indic from sort (int): ");
      String string4 = lovinsStemmer0.stemString("erid");
      lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmerdicpex");
      String string5 = lovinsStemmer0.stem("");
      assertFalse(string5.equals((Object)string4));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.015053218185904
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "?";
      stringArray0[1] = "eri0";
      stringArray0[2] = "S$";
      stringArray0[3] = "Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.";
      stringArray0[4] = "Bu5cSynIOMK~{Sl%";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("owpand");
      lovinsStemmer0.stemString("?nm~RpRtAZI8`Tc(5D");
      lovinsStemmer0.stemString("owpans");
      lovinsStemmer0.stemString("istically");
      lovinsStemmer0.stemString("#&IA");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0315778986857715
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[2] = "p\u0005MbESO<,m)";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("p\u0005MbESO<,m)");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("Proceeding of the Sixteenth International Conference on Machine Learning");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = "V2zs4QD}FcC";
      lovinsStemmer0.stemString("V2zs4QD}FcC");
      lovinsStemmer0.getTechnicalInformation();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
