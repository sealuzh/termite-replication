/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 11:20:07 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("y: nqNxq");
      discretize0.m_NumBins = (-1360);
      discretize0.m_UseBinNumbers = true;
      discretize0.getUseBinNumbers();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4123374860214275
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.m_FindNumBins = true;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("No file provided with option '-fil'!", arrayList2, protectedProperties0);
      Attribute attribute1 = new Attribute("real");
      attribute0.setStringValue("numeric");
      Attribute attribute2 = attribute1.copy("real");
      discretize0.getIgnoreClass();
      attribute2.indexOfValue("string");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList2.sort(comparator0);
      arrayList3.add(attribute2);
      Instances instances0 = new Instances("numeric", arrayList3, 1741);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0660708377143053
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@relation";
      stringArray0[1] = "h8fDo+-UM";
      stringArray0[3] = "@relation";
      stringArray0[4] = "q40 !p_OD";
      stringArray0[4] = "Problem reading instance wei-ht";
      stringArray0[6] = "-M [-<num>";
      Filter.runFilter(discretize0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("q40 !p_OD");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(4);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(stringArray0[2], arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2028178998);
      doubleArray0[1] = (double) 2;
      int[] intArray0 = new int[2];
      SparseInstance sparseInstance0 = new SparseInstance((-2028178998), doubleArray0, intArray0, 2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      binarySparseInstance0.setMissing((-2028178998));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance1.setValueSparse((-2816), 4);
      binarySparseInstance0.mergeInstance(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      discretize0.input(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.92539018313875
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.m_FindNumBins = true;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("No file provided with option '-fil'!", arrayList2, protectedProperties0);
      Attribute attribute1 = new Attribute("real");
      attribute1.setStringValue("integer");
      Attribute attribute2 = attribute1.copy("real");
      arrayList3.add(attribute2);
      Instances instances0 = new Instances("numeric", arrayList3, 1741);
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getFindNumBins());
      
      discretize0.batchFinished();
      boolean boolean0 = discretize0.getFindNumBins();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1162692393511016
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-F";
      stringArray0[1] = "h8fDo+-UM";
      stringArray0[2] = "q40 !p_OD";
      stringArray0[3] = "-F";
      stringArray0[4] = "'@8Ks|*y";
      stringArray0[5] = "Problem reading instance wei-ht";
      stringArray0[6] = "-M <num>";
      Filter.runFilter(discretize0, stringArray0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("-M <num>", linkedList2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(4);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("'@8Ks|*y", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2028178998);
      doubleArray0[1] = (double) 2;
      int[] intArray0 = new int[4];
      SparseInstance sparseInstance0 = new SparseInstance((-2028178998), doubleArray0, intArray0, 2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.setDataset(instances0);
      binarySparseInstance0.mergeInstance(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      boolean boolean0 = discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0595049599945248
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList1 = new LinkedList<Attribute>();
      linkedList0.pollFirst();
      LinkedList<Attribute> linkedList2 = new LinkedList<Attribute>();
      linkedList0.pollFirst();
      linkedList0.clone();
      linkedList0.removeAll(linkedList0);
      linkedList0.removeAll(linkedList1);
      LinkedList<Attribute> linkedList3 = new LinkedList<Attribute>();
      linkedList0.clear();
      LinkedList<Attribute> linkedList4 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList5 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList6 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList7 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList8 = new LinkedList<Attribute>();
      Properties properties0 = new Properties();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList10 = new LinkedList<String>();
      linkedList10.add("~xF");
      linkedList10.add("=U$O&+[}`8z");
      linkedList10.add("=U$O&+[}`8z");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList1, 1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.m_MakeBinary = true;
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      discretize0.convertInstance(sparseInstance0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4922963932744846
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      arrayList0.removeIf(predicate3);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "-dIbwuWTS3} J");
      ArrayList<Object> arrayList4 = new ArrayList<Object>();
      arrayList2.containsAll(arrayList4);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "No file provided wih option '-file'!");
      Attribute attribute0 = new Attribute("No file provided wih option '-file'!", arrayList2, protectedProperties0);
      Attribute attribute1 = new Attribute("\"position\" is date");
      discretize0.setDesiredWeightOfInstancesPerInterval(3);
      Attribute attribute2 = attribute0.copy("integer");
      arrayList3.add(attribute2);
      Instances instances0 = new Instances("numeric", arrayList3, 1755);
      Discretize[] discretizeArray0 = new Discretize[0];
      instances0.toArray(discretizeArray0);
      discretize0.setInputFormat(instances0);
      discretize0.binsTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "@4(YEa4kt\",d";
      Discretize discretize0 = new Discretize("@4(YEa4kt\",d");
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = 2060.124929613445;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1484.86963693442;
      doubleArray1[6] = 373.856218;
      doubleArray1[7] = 542.3806308009157;
      doubleArray1[8] = 1.7976931348623157E308;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray2[1] = 373.856218;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1484.86963693442;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 542.3806308009157;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 373.856218;
      doubleArray3[1] = 373.856218;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      SystemInUtil.addInputLine((String) null);
      discretize0.setMakeBinary(true);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0157605325851495
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(",8)]oT", arrayList0, 4254);
      Properties properties0 = new Properties();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      arrayList0.removeIf(predicate3);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".arff", linkedList1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances1 = new Instances("-F", arrayList1, 1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(17);
      Instances instances2 = new Instances(".arff", arrayList1, 2175);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      discretize1.batchFinished();
      int int0 = (-2111085617);
      // Undeclared exception!
      try { 
        discretize1.getBinRangesString((-2111085617));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2111085617
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0279671047737198
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList1 = new LinkedList<Attribute>();
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      LinkedList<Attribute> linkedList2 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList3 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList4 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList5 = new LinkedList<Attribute>();
      linkedList4.removeAll(linkedList0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList6);
      Attribute attribute0 = new Attribute("I3quS3.b2y1P+O\t", list0);
      linkedList4.add(attribute0);
      linkedList4.removeAll(linkedList3);
      LinkedList<Attribute> linkedList7 = new LinkedList<Attribute>();
      linkedList4.clear();
      LinkedList<Attribute> linkedList8 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList9 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList10 = new LinkedList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<String> linkedList11 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("K!6Be_", linkedList11);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(5);
      arrayList1.add(attribute1);
      Instances instances0 = new Instances((String) null, arrayList1, 1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.getBinRangesString(0);
      // Undeclared exception!
      try { 
        linkedList11.add(1, "@data");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0908565637391248
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@relation";
      stringArray0[1] = "h8fDo+-UM";
      stringArray0[3] = "@relation";
      stringArray0[4] = "q40 !p_OD";
      stringArray0[4] = "h8fDo+-UM";
      stringArray0[6] = "-M [-<num>";
      Filter.runFilter(discretize0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("-M [-<num>", linkedList2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(4);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(stringArray0[2], arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2028178998);
      doubleArray0[1] = (double) 2;
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 4;
      intArray0[2] = (-2028178998);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 2);
      discretize0.convertInstance(binarySparseInstance0);
      int[] intArray1 = new int[2];
      SparseInstance sparseInstance0 = new SparseInstance((-2028178998), doubleArray0, intArray1, 2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      binarySparseInstance1.setMissing((-2028178998));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance2.setValueSparse((-2816), 4);
      binarySparseInstance1.mergeInstance(binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      discretize0.input(binarySparseInstance1);
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.081657918918465
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.m_FindNumBins = true;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Nofile provided with option '-fil'!", arrayList2, protectedProperties0);
      Attribute attribute1 = new Attribute("real");
      attribute0.setStringValue("numeric");
      Attribute attribute2 = attribute1.copy("real");
      discretize0.getIgnoreClass();
      attribute2.indexOfValue("string");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList2.sort(comparator0);
      arrayList3.add(attribute2);
      Instances instances0 = new Instances("numeric", arrayList3, 1741);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.output();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.922881171592452
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.m_FindNumBins = true;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("No file provided with option '-fil'!", arrayList2, protectedProperties0);
      Attribute attribute1 = new Attribute("real");
      attribute0.setStringValue("numeric");
      Attribute attribute2 = attribute1.copy("real");
      discretize0.getIgnoreClass();
      attribute2.indexOfValue("string");
      Attribute.typeToString(68);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList2.sort(comparator0);
      arrayList3.add(attribute2);
      Instances instances0 = new Instances("numeric", arrayList3, 1741);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(discretize0.getFindNumBins());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.377187658901546
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ") can't be established.");
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Rn3x#yiJk");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      arrayList1.add(") can't be established.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      arrayList1.containsAll(arrayList0);
      arrayList1.add("4iUHViY");
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute(") can't be established.", arrayList1, protectedProperties2);
      attribute0.setStringValue(") can't be established.");
      discretize0.m_NumBins = 1;
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(") can't be established.", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize();
      discretize1.setBins((-1789569704));
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1162692393511016
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-F";
      stringArray0[1] = "h8fDo+-UM";
      stringArray0[2] = "q40 !p_OD";
      stringArray0[3] = "-F";
      stringArray0[4] = "'@8Ks|*y";
      stringArray0[5] = "Problem reading instance wei-ht";
      stringArray0[6] = "-M <num>";
      Filter.runFilter(discretize0, stringArray0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("-M <num>", linkedList2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(4);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("'@8Ks|*y", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2028178998);
      doubleArray0[1] = (double) 2;
      int[] intArray0 = new int[4];
      SparseInstance sparseInstance0 = new SparseInstance((-2028178998), doubleArray0, intArray0, 2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.mergeInstance(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList1 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList2 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList3 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList4 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList5 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList6 = new LinkedList<Attribute>();
      linkedList4.clear();
      LinkedList<Attribute> linkedList7 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList8 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList9 = new LinkedList<Attribute>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.containsAll(linkedList3);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.containsAll(linkedList4);
      arrayList0.add("-");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("-", arrayList0, protectedProperties1);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList3.add(attribute0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties2.replaceAll(biFunction0);
      Instances instances0 = new Instances("integer", arrayList3, 1);
      instances0.remove((Object) linkedList8);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@attribute";
      stringArray0[2] = "-";
      stringArray0[3] = "numeric";
      stringArray0[4] = "integer";
      stringArray0[5] = "wF+?gCv?:)\"&-m";
      stringArray0[6] = "@end";
      stringArray0[7] = "@relation";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9633894721891396
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList1 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList2 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList3 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList4 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList5 = new LinkedList<Attribute>();
      linkedList4.removeAll(linkedList0);
      linkedList4.removeAll(linkedList3);
      LinkedList<Attribute> linkedList6 = new LinkedList<Attribute>();
      linkedList4.clear();
      LinkedList<Attribute> linkedList7 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList8 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList9 = new LinkedList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Attribute> linkedList10 = new LinkedList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList12 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList11, (Collection<String>) linkedList12, locale_FilteringMode0);
      Attribute attribute0 = new Attribute((String) null, linkedList12, protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("-B <num>", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.findNumBins(0);
      discretize0.calculateCutPoints();
      System.setCurrentTimeMillis((-1794L));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.495914456064185
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ") can't be established.");
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Rn3x#yiJk");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.trimToSize();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      arrayList1.add(") can't be established.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      boolean boolean0 = discretize0.m_UseBinNumbers;
      arrayList1.add("4iUHViY");
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute(") can't be established.", arrayList1, protectedProperties2);
      attribute0.setStringValue(") can't be established.");
      discretize0.m_NumBins = 2;
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(") can't be established.", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.setBins((-1789569704));
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(35);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.924955966899063
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.m_FindNumBins = true;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("No file provided with option '-fil'!", arrayList2, protectedProperties0);
      Attribute attribute1 = new Attribute("real");
      attribute0.setStringValue("numeric");
      Attribute attribute2 = attribute1.copy("real");
      discretize0.getIgnoreClass();
      attribute2.indexOfValue("string");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      properties0.forEach(biConsumer0);
      arrayList3.add(attribute2);
      Instances instances0 = new Instances("numeric", arrayList3, 1741);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.calculateCutPoints();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4904032277870636
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("");
      int int0 = 4;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(4);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("h8fDo+-UM", arrayList0, 2);
      discretize0.setInputFormat(instances0);
      arrayList0.add(attribute0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.941504941494078
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(4);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("h8fDo+-UM", arrayList0, 2);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      SparseInstance sparseInstance0 = new SparseInstance(706);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.setMissing(89);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1264.91343535395), doubleArray0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances1 = new Instances("=", arrayList1, 706);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize("%=I");
      discretize0.toString();
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 313.4558722860764;
      doubleArray1[1] = (-1244.3031699333173);
      doubleArray1[2] = 1643.62;
      doubleArray1[3] = 627.3553877237829;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1643.62;
      doubleArray2[1] = 1.7976931348623157E308;
      doubleArray2[2] = (-1244.3031699333173);
      doubleArray2[3] = 313.4558722860764;
      doubleArray2[4] = 1643.62;
      doubleArray2[5] = (-1244.3031699333173);
      doubleArray2[6] = 313.4558722860764;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 313.4558722860764;
      doubleArray4[1] = 313.4558722860764;
      doubleArray4[2] = 1643.62;
      doubleArray4[3] = 313.4558722860764;
      doubleArray4[4] = 1.7976931348623157E308;
      doubleArray4[5] = (-1244.3031699333173);
      doubleArray4[6] = 1.7976931348623157E308;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 300.0;
      doubleArray5[1] = 1643.62;
      doubleArray5[2] = 627.3553877237829;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 313.4558722860764;
      doubleArray6[1] = 313.4558722860764;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(1001);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1001
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      arrayList0.trimToSize();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      arrayList2.add(") can't be established.");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      arrayList2.containsAll(arrayList0);
      arrayList2.add("4iUHViY");
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute(") can't be established.", arrayList2, protectedProperties2);
      attribute0.setStringValue(") can't be established.");
      arrayList1.add(attribute0);
      Instances instances0 = new Instances(") can't be established.", arrayList1, 1);
      instances0.remove((Object) "4iUHViY");
      Discretize discretize0 = new Discretize();
      protectedProperties1.keys();
      discretize0.setBins((-1789569704));
      discretize0.getBins();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.971558425985957
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList1 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList2 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList3 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList4 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList5 = new LinkedList<Attribute>();
      linkedList4.removeAll(linkedList0);
      linkedList4.removeAll(linkedList3);
      LinkedList<Attribute> linkedList6 = new LinkedList<Attribute>();
      linkedList4.clear();
      LinkedList<Attribute> linkedList7 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList8 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList9 = new LinkedList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Attribute> linkedList10 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList11 = new LinkedList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList13 = new LinkedList<String>();
      linkedList13.add("q_O3");
      linkedList12.removeLastOccurrence(protectedProperties1);
      List<String> list0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(82);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 82
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1614755180305174
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(",8)]oT", arrayList0, 4254);
      Properties properties0 = new Properties();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      arrayList0.removeIf(predicate3);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".arff", linkedList1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances1 = new Instances("-F", arrayList1, 1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(17);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.toString(attribute0, 28);
      discretize0.input(binarySparseInstance0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 70
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1443193481666527
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@relation";
      stringArray0[1] = "h8fDo+-UM";
      stringArray0[3] = "@relation";
      stringArray0[4] = "q40 !p_OD";
      stringArray0[5] = "Problem reading instance wei-ht";
      stringArray0[6] = "-M <num>";
      Filter.runFilter(discretize0, stringArray0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("-M <num>", linkedList2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(4);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(stringArray0[2], arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2028178998);
      doubleArray0[1] = (double) 2;
      int[] intArray0 = new int[4];
      SparseInstance sparseInstance0 = new SparseInstance((-2028178998), doubleArray0, intArray0, 2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      binarySparseInstance0.setMissing((-2028178998));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.mergeInstance(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
      
      discretize0.batchFinished();
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.337343179130308
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(4);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("hBDo+-M", arrayList0, 2);
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      SparseInstance sparseInstance0 = new SparseInstance(706);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.setMissing(89);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1264.91343535395), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance1.mergeInstance(binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      String[] stringArray0 = new String[0];
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.711395681466945
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      discretize0.setInvertSelection(true);
      discretize0.getOptions();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.123168425011997
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(4);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("h8fDo+-UM", arrayList0, 2);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      SparseInstance sparseInstance0 = new SparseInstance(706);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.setMissing(89);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1264.91343535395), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      Instance instance0 = binarySparseInstance1.mergeInstance(binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      discretize0.input(instance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(589);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 589
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.953731509708438
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      discretize0.m_FindNumBins = true;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Nofile provided with option '-fil'!", arrayList2, protectedProperties0);
      Attribute attribute1 = new Attribute("real");
      attribute0.setStringValue("numeric");
      Attribute attribute2 = attribute1.copy("real");
      discretize0.getIgnoreClass();
      attribute2.indexOfValue("string");
      arrayList3.add(attribute0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList2.sort(comparator0);
      Instances instances0 = new Instances("numeric", arrayList3, 1741);
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(discretize0.getFindNumBins());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "@4(YEa4kt\",d";
      Discretize discretize0 = new Discretize("@4(YEa4kt\",d");
      String string1 = ",8)]oT";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      arrayList2.add("@4(YEa4kt\",d");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("zr()*6%(", arrayList2, protectedProperties2);
      arrayList1.add(attribute0);
      int int0 = 4242;
      Instances instances0 = new Instances(",8)]oT", arrayList1, 4242);
      instances0.remove((Object) null);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at @4(YEa4kt\"
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "@4(YEa4lt\"xd";
      Discretize discretize0 = new Discretize("@4(YEa4lt\"xd");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      LinkedList<Attribute> linkedList1 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList2 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList3 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList4 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList5 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList6 = new LinkedList<Attribute>();
      linkedList4.toArray();
      Discretize discretize1 = new Discretize("@4(YEa4lt\"xd");
      // Undeclared exception!
      try { 
        discretize1.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      SparseInstance sparseInstance0 = new SparseInstance(15);
      sparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8011502078711175
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(2.0);
      discretize0.setOutputFormat();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getBins();
      discretize0.getOptions();
      discretize0.getBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8807342062201364
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("@4(YE6a4kt\",d");
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      discretize0.getRevision();
      discretize0.findNumBinsTipText();
      discretize0.useBinNumbersTipText();
      discretize0.makeBinaryTipText();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = null;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.sort((Comparator<? super Attribute>) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("@4(YE}}a4+ku\",d", arrayList1);
      arrayList0.add(attribute0);
      Integer integer0 = new Integer(4254);
      Instances instances0 = new Instances("@4(YE}}a4+ku\",d", arrayList0, 4254);
      discretize0.setMakeBinary(true);
      boolean boolean0 = discretize0.getMakeBinary();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.111133239697327
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList1 = new LinkedList<Attribute>();
      linkedList0.pollFirst();
      LinkedList<Attribute> linkedList2 = new LinkedList<Attribute>();
      linkedList0.pollFirst();
      LinkedList<Discretize> linkedList3 = new LinkedList<Discretize>();
      linkedList0.removeAll(linkedList0);
      linkedList0.removeAll(linkedList1);
      LinkedList<Attribute> linkedList4 = new LinkedList<Attribute>();
      linkedList0.clear();
      LinkedList<Attribute> linkedList5 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList6 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList7 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList8 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList9 = new LinkedList<Attribute>();
      Properties properties0 = new Properties();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList11 = new LinkedList<String>();
      linkedList11.listIterator();
      linkedList11.add("~xF");
      linkedList11.add("=U$O&+[}`8z");
      linkedList11.add("=U$O&+[}`8z");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList1, 1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      Filter.runFilter(discretize0, stringArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 885;
      doubleArray0[0] = (double) 885;
      doubleArray0[2] = (double) (-552);
      MultiFilter multiFilter0 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter((-1932735282));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1932735282
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.67021118191495
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)67;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("No file provided with option '-file'!");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.listOptions();
      discretize0.toString();
      discretize0.m_IgnoreClass = true;
      String string0 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      
      discretize0.getInvertSelection();
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9227239619685323
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@relation";
      stringArray0[1] = "h8fDo+-UM";
      discretize0.setIgnoreClass(true);
      stringArray0[3] = "@relation";
      stringArray0[4] = "q40 !p_OD";
      stringArray0[5] = "Problem reading instance wei-ht";
      stringArray0[6] = "-M [-<num>";
      Filter.runFilter(discretize0, stringArray0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("-M [-<num>", linkedList2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(4);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(stringArray0[2], arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2028178998);
      doubleArray0[1] = (double) 2;
      int[] intArray0 = new int[4];
      SparseInstance sparseInstance0 = new SparseInstance((-2028178998), doubleArray0, intArray0, 2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      binarySparseInstance0.setMissing((-2028178998));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      discretize0.batchFinished();
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-2029));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2029
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "@4(YEa4kt\",d";
      Discretize discretize0 = new Discretize("@4(YEa4kt\",d");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SystemInUtil.addInputLine((String) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Instances instances0 = new Instances(",8)]oT", arrayList1, 4254);
      discretize0.setMakeBinary(true);
      Attribute attribute0 = new Attribute("G{{~5y<5L*", instances0);
      arrayList1.add(attribute0);
      instances0.remove((Object) "   * @param inst\tthe instanceto turn into an array\n");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8061891451134446
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = false;
      discretize0.setUseEqualFrequency(true);
      discretize0.getAttributeIndices();
      discretize0.getUseEqualFrequency();
      discretize0.getOptions();
      SystemInUtil.addInputLine("xYZk");
      discretize0.getOptions();
      discretize0.invertSelectionTipText();
      discretize0.useEqualFrequencyTipText();
      discretize0.getAttributeIndices();
      discretize0.invertSelectionTipText();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.4271954797562523
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-F";
      stringArray0[1] = "h8fDo+-UM";
      stringArray0[2] = "q40 !p_OD";
      stringArray0[3] = "-F";
      stringArray0[4] = "'@8Ks|*y";
      stringArray0[5] = "Problem reading instance wei-ht";
      stringArray0[6] = "-M <num>";
      Filter.runFilter(discretize0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("-M <num>", list0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(4);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("'@8Ks|*y", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter1.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.814720189023951
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SystemInUtil.addInputLine(",8)]oT");
      int int0 = 4254;
      Instances instances0 = new Instances(",8)]oT", arrayList0, 4254);
      discretize0.setMakeBinary(true);
      discretize0.getOptions();
      instances0.remove((Object) "   * @param inst\tthe instanceto turn into an array\n");
      Instances instances1 = new Instances(instances0);
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize("first-last");
      discretize0.m_MakeBinary = false;
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.m_UseBinNumbers = true;
      discretize0.setOutputFormat();
      int[] intArray0 = new int[3];
      intArray0[2] = 472;
      discretize0.getOptions();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertTrue(discretize0.getUseBinNumbers());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize("@4(YEa4kt\",d");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Object object0 = new Object();
      protectedProperties1.replace((Object) discretize0, (Object) arrayList1, object0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",8)]oT";
      stringArray0[1] = "@4(YEa4kt\",d";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (double) 4242;
      discretize0.getUseEqualFrequency();
      doubleArray0[5] = (double) 4242;
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 363.2;
      doubleArray1[2] = 565.2;
      doubleArray1[3] = (-559.75195627);
      doubleArray1[4] = (-504.6965002);
      doubleArray1[5] = 985.789535;
      doubleArray1[6] = 3.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 565.2;
      doubleArray2[1] = 565.2;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 3.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 3.0;
      doubleArray3[1] = (-504.6965002);
      doubleArray3[2] = (-504.6965002);
      doubleArray3[3] = (-1422.017);
      doubleArray3[4] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-1422.017);
      doubleArray4[1] = 3.0;
      doubleArray4[2] = (-504.6965002);
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = 363.2;
      doubleArray4[6] = 3.0;
      doubleArray4[7] = 565.2;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-1422.017);
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.toArray();
      LinkedList<Attribute> linkedList1 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList2 = new LinkedList<Attribute>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("'B1of2'", linkedList3);
      attribute0.copy("'B1of2'");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      linkedList0.add(attribute0);
      attribute0.isInRange(1534.11098886);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(linkedList1);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(4, stringArray0.length);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize("o.Hxj");
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance((-2413.31428613), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = null;
      try {
        sparseInstance2 = new SparseInstance((-832));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Discretize discretize0 = new Discretize("+('XJPyDncl1");
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize(".qsTnEyq@.4ftCT7;");
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)0;
      discretize0.getBinRangesString(1892);
      discretize0.getAttributeIndices();
      int[] intArray0 = new int[5];
      intArray0[1] = 1892;
      discretize0.getCutPoints(2168);
      discretize0.setDesiredWeightOfInstancesPerInterval((-3075.49148852529));
      discretize0.setDesiredWeightOfInstancesPerInterval((-1090.7734464734158));
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1942);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_Pa4");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_Pa4");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VieKZxk%!%Ph7J[Hz!h");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VieKZxk%!%Ph7J[Hz!h");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("N_>A0V-YrW>");
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, int0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-1115,-1115,473";
      boolean boolean0 = discretize0.m_UseEqualFrequency;
      stringArray0[1] = "Can't ignore class when changing the number of attributes!";
      stringArray0[2] = "^F2u3";
      stringArray0[3] = "R";
      stringArray0[4] = "-R <col1,col2-col4,...>";
      stringArray0[5] = "first-last";
      stringArray0[7] = "1tYoN|*yCeUHgNl";
      stringArray0[7] = "SL\"aU/_5SfPeuYf!&*";
      stringArray0[8] = "first-last";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins((-1403));
      String[] stringArray0 = new String[0];
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.829567812821188
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "K%]@vrr$5K'[Sz)";
      stringArray0[1] = "dXji-_Z4O1:J)&wD";
      stringArray0[2] = "Variance: ";
      stringArray0[3] = "+?*";
      stringArray0[4] = "e047J<I";
      stringArray0[5] = "@4(YE}}a4kt\",d";
      stringArray0[6] = "    setOutputFormat(format);\n";
      Discretize.main(stringArray0);
      String[] stringArray1 = new String[0];
      try { 
        Filter.filterFile(discretize0, stringArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize("Dat");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList1 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList2 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList3 = new LinkedList<Attribute>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<Attribute> linkedList5 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList6 = new LinkedList<Attribute>();
      LinkedList<Attribute> linkedList7 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(linkedList7);
      String string0 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      int int0 = (-4353);
      // Undeclared exception!
      try { 
        multiFilter0.getFilter((-2013265917));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2013265917
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[9];
      System.setCurrentTimeMillis(44);
      intArray0[0] = 44;
      intArray0[1] = (-526);
      intArray0[2] = 1709;
      intArray0[3] = (-667);
      intArray0[4] = (-634);
      intArray0[5] = 241;
      intArray0[6] = (-3381);
      intArray0[7] = (-1730);
      intArray0[8] = (-2111085617);
      discretize0.setAttributeIndicesArray(intArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Dat";
      stringArray0[1] = "!NKo5Ei$67hsG|tL2";
      stringArray0[2] = "Dat";
      MultiFilter multiFilter2 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter1.getFilter((-1932735280));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1932735280
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VieKZxk%!%Ph7J[Hz!h");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VieKZxk%!%Ph7J[Hz!h");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VieKZxk%!%Ph7J[Hz!h");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Attribute> linkedList1 = new LinkedList<Attribute>();
      linkedList1.listIterator();
      LinkedList<Attribute> linkedList2 = new LinkedList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.getAttributeIndices();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize1 = new Discretize("uJ0<'dOI/2_ $dRSozE");
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(1.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance2);
      SparseInstance sparseInstance3 = new SparseInstance((-832), doubleArray0);
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance3);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance4);
      SparseInstance sparseInstance5 = new SparseInstance((Instance) sparseInstance4);
      SparseInstance sparseInstance6 = new SparseInstance(sparseInstance2);
      SparseInstance sparseInstance7 = new SparseInstance((Instance) sparseInstance3);
      sparseInstance1.isMissing((-832));
      SparseInstance sparseInstance8 = new SparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(10, doubleArray0);
      SparseInstance sparseInstance9 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance10 = new SparseInstance((Instance) sparseInstance1);
      sparseInstance10.isMissing((-2799));
      DenseInstance denseInstance0 = new DenseInstance(1.2, doubleArray0);
      Discretize discretize0 = new Discretize("IB(sOUz~txU(9S7l|aO");
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Discretize discretize0 = new Discretize("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      discretize0.getCapabilities();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Discretize discretize0 = new Discretize("o.Hxj");
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance((-2413.31428613), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance((-3984.223), doubleArray0);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance1);
      SparseInstance sparseInstance4 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance5 = new SparseInstance(sparseInstance2);
      SparseInstance sparseInstance6 = new SparseInstance((Instance) binarySparseInstance0);
      sparseInstance3.isMissing(10);
      SparseInstance sparseInstance7 = new SparseInstance((-832), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1106.226259014438, doubleArray0);
      SparseInstance sparseInstance8 = new SparseInstance(sparseInstance7);
      SparseInstance sparseInstance9 = new SparseInstance((Instance) sparseInstance2);
      sparseInstance7.isMissing(1833);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3637.503950318);
      doubleArray1[1] = (-3637.503950318);
      doubleArray1[2] = (double) (-832);
      doubleArray1[3] = (double) (-832);
      doubleArray1[4] = (double) (-832);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 1833;
      DenseInstance denseInstance0 = new DenseInstance((-3637.503950318), doubleArray1);
      Discretize discretize1 = new Discretize("@end");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(217);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("sc/ir<ax'VNFI", arrayList0, 2095);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      instances1.remove((Object) null);
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Discretize discretize0 = new Discretize("jp");
      discretize0.setAttributeIndices("jp");
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Filter.makeCopy(multiFilter1);
      int int0 = (-4353);
      Discretize discretize0 = new Discretize("q_O3");
      discretize0.binsTipText();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter((-2013265917));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2013265917
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("\nDataset with names changed:\n");
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.m_FindNumBins = true;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("No file provided with option '-fil'!", arrayList2, protectedProperties0);
      Attribute attribute1 = new Attribute("real");
      attribute0.setStringValue("numeric");
      attribute1.copy("real");
      discretize0.getMakeBinary();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      MultiFilter multiFilter2 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter1.getFilter(350);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 350
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Discretize discretize0 = new Discretize("Z");
      discretize0.getOptions();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter(4143);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4143
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      discretize0.setInvertSelection(false);
      stringArray0[2] = "jKlnW";
      boolean boolean0 = discretize0.getFindNumBins();
      boolean boolean1 = discretize0.getInvertSelection();
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(boolean1 == boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      String[] stringArray0 = new String[0];
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[2] = "jKlnW";
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 262;
      discretize0.getBinRangesString(262);
      MultiFilter multiFilter0 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter(262);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 262
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_Pa4");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_Pa4");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance2);
      Instance instance0 = sparseInstance1.mergeInstance(sparseInstance0);
      SparseInstance sparseInstance3 = new SparseInstance((-832), doubleArray0);
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance3);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance5 = new SparseInstance((Instance) sparseInstance3);
      SparseInstance sparseInstance6 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance7 = new SparseInstance(instance0);
      sparseInstance0.isMissing((-2092419962));
      SparseInstance sparseInstance8 = new SparseInstance((-832), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-0.1), doubleArray0);
      SparseInstance sparseInstance9 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance10 = new SparseInstance((Instance) binarySparseInstance2);
      sparseInstance10.isMissing((-832));
      DenseInstance denseInstance0 = new DenseInstance((-832), doubleArray0);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-1115,-1115,473";
      stringArray0[1] = "Can't ignore class when changing the number of attributes!";
      stringArray0[2] = "^F2u3";
      stringArray0[3] = "R";
      stringArray0[4] = "-R <col1,col2-col4,...>";
      stringArray0[5] = "first-last";
      stringArray0[6] = "1tYoN|*yCeUHgNl";
      stringArray0[7] = "SL\"aU/_5SfPeuYf!&*";
      stringArray0[8] = "first-last";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }
}
