/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 22:16:54 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      byte[] byteArray0 = null;
      int int0 = 32;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2042925308588086
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 188);
      nucleotide0.getBasesFor();
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGapOffsets(byteArray0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.decodedLengthOf(byteArray1);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.encode((-2), iterator0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1332332768830984
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 188);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)18, (byte) (-32)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      nucleotide0.getBasesFor();
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.add(nucleotide0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>(linkedList0);
      linkedList1.removeFirstOccurrence((Object) null);
      linkedList0.removeLast();
      Nucleotide nucleotide1 = Nucleotide.Thymine;
      nucleotide1.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      DefaultNucleotideCodec.valueOf("INSTANCE");
      int int0 = defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8141986525875637
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byte byte0 = (byte)116;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte)116, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.19006574334878
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 188);
      nucleotide0.getBasesFor();
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Nucleotide nucleotide1 = Nucleotide.Unknown;
      nucleotide1.getAllPossibleAmbiguities();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.poll();
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>(linkedList1);
      Object object0 = new Object();
      Integer integer0 = new Integer((-621));
      linkedList0.removeFirstOccurrence(range_CoordinateSystem0);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Nucleotide) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3146309199329567
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 188);
      nucleotide0.getBasesFor();
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide1 = Nucleotide.NotGuanine;
      nucleotide1.getBasesFor();
      Set<Nucleotide> set2 = nucleotide1.getAllPossibleAmbiguities();
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1861);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)18, (byte) (-32)}, byteArray0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, 0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set2);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec2.encode(0, (Iterator<Nucleotide>) null);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec1.getGapOffsets(byteArray1);
      int int1 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray2, (-2820));
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate4.or(predicate7);
      Predicate<Object> predicate9 = predicate5.negate();
      Byte byte0 = new Byte((byte) (-24));
      predicate7.test(byte0);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate11 = predicate10.or(predicate9);
      Predicate.isEqual((Object) predicate8);
      predicate6.or(predicate11);
      Predicate<Object> predicate12 = predicate9.negate();
      Predicate<Object> predicate13 = predicate12.negate();
      predicate0.and(predicate12);
      Predicate<Object> predicate14 = predicate3.negate();
      Predicate<Object> predicate15 = predicate0.or(predicate9);
      Predicate<Object> predicate16 = predicate3.negate();
      Predicate<Object> predicate17 = predicate14.negate();
      Predicate.isEqual((Object) predicate8);
      predicate8.or(predicate11);
      predicate17.negate();
      Predicate<Object> predicate18 = predicate17.negate();
      predicate4.or(predicate18);
      predicate15.negate();
      predicate13.negate();
      predicate16.and(predicate12);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, (byte) (-24));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)42;
      byteArray0[0] = (byte)42;
      byte byte1 = (byte)100;
      int int0 = (-75);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2078886384336633
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.offerLast(nucleotide0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Nucleotide nucleotide1 = Nucleotide.Amino;
      linkedList0.add(nucleotide1);
      linkedList0.removeAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      linkedList1.containsAll(linkedList0);
      defaultNucleotideCodec1.getGapOffsets(byteArray0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide2 = Nucleotide.Purine;
      linkedList2.retainAll(linkedList0);
      linkedList2.add(nucleotide2);
      linkedList2.containsAll(linkedList0);
      linkedList2.add(nucleotide0);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>(linkedList1);
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide3 = Nucleotide.Guanine;
      linkedList4.add(nucleotide3);
      linkedList4.removeLast();
      Nucleotide nucleotide4 = Nucleotide.NotCytosine;
      nucleotide4.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec2.getUngappedLength(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3251712488973015
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      linkedList0.offerLast(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.Cytosine;
      linkedList0.add(nucleotide1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Nucleotide nucleotide2 = Nucleotide.Amino;
      Nucleotide nucleotide3 = Nucleotide.Cytosine;
      linkedList0.add(nucleotide3);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1577));
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      byte[] byteArray1 = new byte[7];
      Nucleotide nucleotide4 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide4.getBasesFor();
      nucleotide2.getAllPossibleAmbiguities();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray2);
      Range range0 = Range.of((long) (-1577));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -1577 .. -1577 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.058653378785294
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = predicate4.or(predicate6);
      Predicate<Object> predicate8 = predicate0.and(predicate6);
      Byte byte0 = new Byte((byte) (-24));
      Predicate<Object> predicate9 = predicate8.negate();
      predicate4.or(predicate9);
      predicate0.and(predicate9);
      Integer integer0 = new Integer(2686);
      Predicate<Object> predicate10 = predicate3.and(predicate0);
      predicate0.or(predicate8);
      predicate3.negate();
      predicate8.negate();
      Predicate<Nucleotide> predicate11 = Predicate.isEqual((Object) predicate2);
      Predicate<Nucleotide> predicate12 = predicate11.and(predicate10);
      Predicate<Nucleotide> predicate13 = predicate12.or(predicate6);
      Predicate<Nucleotide> predicate14 = predicate13.negate();
      predicate0.negate();
      predicate14.or(predicate7);
      predicate13.negate();
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Object object0 = new Object();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList0.retainAll(linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList1.add(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList1);
      DefaultNucleotideCodec.values();
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-24));
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1910965649135674
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 132);
      nucleotide0.getBasesFor();
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      Set<Nucleotide> set2 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set2);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(132, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9273748510447195
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray2, (byte)0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Predicate<Nucleotide> predicate0 = Predicate.isEqual((Object) nucleotide0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Nucleotide> predicate2 = predicate0.or(predicate1);
      predicate2.and(predicate1);
      Predicate<Nucleotide> predicate3 = predicate2.negate();
      linkedList0.add(nucleotide0);
      Predicate<Nucleotide> predicate4 = predicate3.or(predicate2);
      linkedList0.removeIf(predicate4);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      // Undeclared exception!
      try { 
        linkedList1.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1589038418249675
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.offerLast(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Nucleotide nucleotide1 = Nucleotide.Amino;
      linkedList0.add(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 89);
      assertEquals(1, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      linkedList1.containsAll(linkedList0);
      defaultNucleotideCodec2.getGapOffsets(byteArray1);
      assertEquals(5, byteArray1.length);
      
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide2 = Nucleotide.Purine;
      linkedList2.add(nucleotide2);
      linkedList2.containsAll(linkedList0);
      linkedList2.add(nucleotide0);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>(linkedList1);
      Object object0 = new Object();
      linkedList1.removeFirstOccurrence(object0);
      LinkedList<Nucleotide> linkedList4 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide3 = Nucleotide.Guanine;
      linkedList4.add(nucleotide3);
      linkedList4.removeLast();
      Nucleotide nucleotide4 = Nucleotide.NotCytosine;
      nucleotide4.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) linkedList4);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray2, 1);
      assertEquals(4, byteArray2.length);
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1499778240921676
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.offerLast(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.add(nucleotide0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      Nucleotide nucleotide1 = Nucleotide.Amino;
      linkedList0.add(nucleotide1);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1591));
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-71);
      byteArray1[1] = (byte) (-111);
      byte byte0 = (byte) (-89);
      byteArray1[2] = (byte) (-89);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide2 = Nucleotide.Amino;
      linkedList0.add(nucleotide0);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>(linkedList2);
      linkedList0.removeFirstOccurrence(nucleotide2);
      // Undeclared exception!
      try { 
        linkedList3.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1499778240921676
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.offerLast(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.add(nucleotide0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      Nucleotide nucleotide1 = Nucleotide.Amino;
      linkedList0.add(nucleotide1);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1591));
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byte[] byteArray1 = new byte[7];
      byte byte0 = (byte) (-71);
      byteArray1[0] = (byte) (-71);
      byteArray1[2] = (byte) (-89);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide2 = Nucleotide.Amino;
      linkedList0.add(nucleotide0);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>(linkedList2);
      linkedList0.removeFirstOccurrence(nucleotide2);
      // Undeclared exception!
      try { 
        linkedList3.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)76;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)118);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.679983198025875
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, (byte) (-51));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.025362797621158
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)120;
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      List<Integer> list0 = defaultNucleotideCodec1.getGapOffsets(byteArray1);
      assertTrue(list0.isEmpty());
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec2.toString(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals("ACGT", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2727580379224137
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 249);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)18, (byte) (-32)}, byteArray0);
      
      Nucleotide nucleotide1 = Nucleotide.Purine;
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      Nucleotide nucleotide2 = Nucleotide.Cytosine;
      Set<Nucleotide> set2 = nucleotide2.getAllPossibleAmbiguities();
      nucleotide2.getBasesFor();
      Nucleotide nucleotide3 = Nucleotide.Guanine;
      nucleotide3.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      assertEquals(5, byteArray1.length);
      
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.retainAll(set2);
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(2L, long0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)6;
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)4;
      byte byte1 = (byte) (-100);
      byteArray0[2] = (byte) (-100);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-111));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate0.and(predicate7);
      predicate9.test(predicate4);
      predicate2.test(predicate0);
      Predicate.isEqual((Object) "6!N]eqDt");
      Byte byte0 = new Byte((byte) (-19));
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate0.and(predicate2);
      Predicate<Object> predicate12 = predicate1.and(predicate0);
      Predicate<Object> predicate13 = predicate10.negate();
      Predicate<String> predicate14 = Predicate.isEqual((Object) predicate3);
      predicate11.and(predicate9);
      predicate0.negate();
      predicate12.and(predicate11);
      predicate14.negate();
      Predicate<Object> predicate15 = predicate13.or(predicate6);
      Integer integer0 = new Integer((-64791167));
      predicate15.negate();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[0] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-2004318208L), long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.538556725953367
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byte byte0 = (byte)10;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      byte byte1 = (byte)26;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (byte)0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.35346684524343
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray1, (byte)0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getGapOffsets(byteArray1);
      defaultNucleotideCodec2.toString(byteArray1);
      Range range0 = Range.of((long) (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.290619308495773
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 188);
      Set<Nucleotide> set1 = nucleotide0.getBasesFor();
      Set<Nucleotide> set2 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set2);
      Nucleotide nucleotide1 = Nucleotide.NotGuanine;
      nucleotide1.getBasesFor();
      nucleotide1.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.retainAll(set0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (-198));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray1, 188);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 188 corresponds to encodedIndex 98  encodedglyph length is 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.spliterator();
      linkedList0.parallelStream();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0 corresponds to encodedIndex 4  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      Predicate<Object> predicate6 = predicate0.and(predicate5);
      Predicate<Object> predicate7 = predicate3.or(predicate6);
      Predicate<Object> predicate8 = predicate2.negate();
      Byte byte0 = new Byte((byte) (-24));
      predicate6.test(byte0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate2);
      predicate4.test(predicate9);
      Predicate<Object> predicate10 = predicate9.or(predicate8);
      Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate11 = predicate5.or(predicate10);
      Predicate<Object> predicate12 = predicate5.negate();
      Predicate<Object> predicate13 = predicate12.negate();
      Predicate<Object> predicate14 = predicate0.and(predicate12);
      Predicate<Object> predicate15 = predicate0.negate();
      predicate15.negate();
      predicate14.negate();
      Predicate<Object> predicate16 = predicate0.negate();
      Predicate<Object> predicate17 = predicate11.and(predicate13);
      Predicate<Object> predicate18 = predicate4.and(predicate0);
      Predicate<String> predicate19 = Predicate.isEqual((Object) "");
      Predicate<String> predicate20 = predicate19.and(predicate1);
      Predicate<String> predicate21 = predicate20.negate();
      Predicate<String> predicate22 = predicate21.or(predicate19);
      predicate18.negate();
      Predicate<Object> predicate23 = predicate16.and(predicate6);
      predicate22.negate();
      predicate17.or(predicate2);
      predicate23.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[13];
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      assertFalse(boolean0);
      
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      predicate4.or(predicate6);
      predicate0.and(predicate6);
      Byte byte0 = new Byte((byte) (-24));
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate6);
      predicate0.and(predicate7);
      Integer integer0 = new Integer(2686);
      predicate7.negate();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(83, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate2.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      Predicate<Object> predicate6 = predicate2.or(predicate5);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Predicate<Object> predicate7 = predicate6.and(predicate2);
      Predicate.isEqual((Object) predicate7);
      Byte byte0 = new Byte((byte) (-24));
      Predicate<Object> predicate8 = predicate2.negate();
      Predicate<Object> predicate9 = predicate2.negate();
      Predicate<Object> predicate10 = predicate2.and(predicate3);
      predicate10.negate();
      Integer integer0 = new Integer(296);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate12 = predicate11.or(predicate10);
      predicate1.and(predicate12);
      Predicate.isEqual((Object) "6!N]eqDt");
      predicate4.or(predicate9);
      Integer integer1 = new Integer((-6725));
      predicate8.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, (byte) (-24));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)116;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1767);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate4.or(predicate7);
      predicate2.negate();
      Byte byte0 = new Byte((byte) (-24));
      predicate7.test(byte0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate2);
      predicate5.test(predicate9);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate10 = predicate6.or(predicate4);
      Predicate<Object> predicate11 = predicate6.negate();
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate3.negate();
      predicate13.negate();
      predicate1.negate();
      Predicate<Object> predicate14 = predicate0.negate();
      Predicate<Object> predicate15 = predicate10.and(predicate12);
      Predicate<Object> predicate16 = predicate5.and(predicate0);
      Predicate<String> predicate17 = Predicate.isEqual((Object) "");
      predicate15.negate();
      Predicate<String> predicate18 = predicate17.and(predicate1);
      Predicate<String> predicate19 = predicate18.negate();
      Predicate<String> predicate20 = predicate19.or(predicate17);
      predicate16.negate();
      Predicate<Object> predicate21 = predicate14.and(predicate7);
      predicate20.negate();
      predicate15.or(predicate2);
      predicate21.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.890202965106063
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)73;
      defaultNucleotideCodec0.isGap(byteArray0, (byte) (-1));
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)0;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 188);
      byteArray0[6] = (byte)122;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[7] = (byte) (-2);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      defaultNucleotideCodec0.encode(nucleotide0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("9nCCJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.9nCCJ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate4.or(predicate7);
      Predicate<Object> predicate9 = predicate5.negate();
      Byte byte0 = new Byte((byte) (-24));
      predicate7.test(byte0);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate11 = predicate3.negate();
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate12 = predicate6.or(predicate11);
      Predicate<Object> predicate13 = predicate9.negate();
      Predicate<Object> predicate14 = predicate1.negate();
      Predicate<Object> predicate15 = predicate0.and(predicate13);
      Predicate<Object> predicate16 = predicate10.negate();
      Predicate<Object> predicate17 = predicate0.or(predicate9);
      Predicate<Object> predicate18 = predicate3.negate();
      Predicate<Object> predicate19 = predicate16.negate();
      Predicate.isEqual((Object) predicate8);
      predicate12.or(predicate11);
      Predicate<Object> predicate20 = predicate19.negate();
      Predicate<Object> predicate21 = predicate19.negate();
      predicate4.or(predicate21);
      Predicate<Object> predicate22 = predicate17.negate();
      predicate14.negate();
      predicate18.and(predicate13);
      predicate20.and(predicate8);
      predicate8.or(predicate15);
      predicate22.and(predicate12);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Object object0 = new Object();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate0.and(predicate7);
      predicate9.test(predicate4);
      predicate2.test(predicate0);
      Predicate.isEqual((Object) "6!N]eqDt");
      Byte byte0 = new Byte((byte) (-19));
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate0.and(predicate2);
      Predicate<Object> predicate12 = predicate1.and(predicate0);
      Predicate<Object> predicate13 = predicate10.negate();
      Predicate<String> predicate14 = Predicate.isEqual((Object) predicate3);
      predicate11.and(predicate9);
      predicate0.negate();
      predicate12.and(predicate11);
      predicate14.negate();
      Predicate<Object> predicate15 = predicate13.or(predicate6);
      Integer integer0 = new Integer((-64791167));
      predicate15.negate();
      byte[] byteArray0 = new byte[9];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 1L);
      assertEquals(Nucleotide.Gap, nucleotide0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-28);
      Range range0 = Range.of((long) (byte) (-28));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate2.and(predicate5);
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate0.and(predicate6);
      predicate8.test(predicate3);
      predicate1.test(predicate0);
      Predicate.isEqual((Object) "6!N]eqDt");
      Byte byte0 = new Byte((byte) (-19));
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate9.negate();
      predicate0.and(predicate0);
      Predicate<Object> predicate11 = predicate1.and(predicate0);
      Predicate<Object> predicate12 = predicate9.negate();
      Predicate<String> predicate13 = Predicate.isEqual((Object) predicate2);
      predicate10.and(predicate8);
      predicate0.negate();
      predicate11.and(predicate10);
      predicate13.negate();
      Predicate<Object> predicate14 = predicate12.or(predicate5);
      Integer integer0 = new Integer((-64791167));
      predicate14.negate();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[0] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.30449292032559
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide1.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray1, 188);
      Set<Nucleotide> set1 = nucleotide1.getBasesFor();
      Set<Nucleotide> set2 = nucleotide1.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set2);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.retainAll(set0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(1L, long0);
      assertEquals(5, byteArray0.length);
      
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)18, (byte) (-32)}, byteArray1);
      
      Nucleotide nucleotide2 = Nucleotide.Cytosine;
      Set<Nucleotide> set3 = nucleotide2.getBasesFor();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set3);
      assertEquals(5, byteArray2.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2321972342449334
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray0, 188);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-23));
      assertEquals(0, int0);
      
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertEquals(0, list0.size());
      
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("AGT", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)18, (byte) (-32)}, byteArray0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8160500079520578
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate0.and(predicate7);
      predicate9.test(predicate4);
      predicate2.test(predicate0);
      Predicate.isEqual((Object) "6!N]eqDt");
      Byte byte0 = new Byte((byte) (-19));
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate0.and(predicate2);
      Predicate<Object> predicate12 = predicate1.and(predicate0);
      Predicate<Object> predicate13 = predicate10.negate();
      Predicate<String> predicate14 = Predicate.isEqual((Object) predicate3);
      predicate11.and(predicate9);
      predicate0.negate();
      predicate12.and(predicate11);
      predicate14.negate();
      Predicate<Object> predicate15 = predicate13.or(predicate6);
      Integer integer0 = new Integer((-64791167));
      predicate15.negate();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[0] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      predicate2.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = predicate4.or(predicate6);
      Predicate<Object> predicate8 = predicate2.negate();
      Byte byte0 = new Byte((byte) (-24));
      predicate6.test(byte0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate10 = predicate9.or(predicate8);
      Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate11 = predicate5.or(predicate10);
      Predicate<Object> predicate12 = predicate2.negate();
      Predicate<Object> predicate13 = predicate12.negate();
      Predicate<Object> predicate14 = predicate0.and(predicate12);
      Predicate<Object> predicate15 = predicate3.negate();
      Predicate<Object> predicate16 = predicate15.negate();
      predicate14.negate();
      predicate0.negate();
      Predicate<Object> predicate17 = predicate11.and(predicate13);
      Predicate<Object> predicate18 = predicate16.and(predicate8);
      Predicate<String> predicate19 = Predicate.isEqual((Object) "");
      Predicate<String> predicate20 = predicate19.and(predicate1);
      Predicate<String> predicate21 = predicate20.negate();
      Predicate<String> predicate22 = predicate21.or(predicate19);
      predicate18.negate();
      predicate22.negate();
      predicate17.or(predicate2);
      predicate5.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[13];
      defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      Range range0 = Range.of((long) (byte) (-24), 4L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -24 .. 4 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = predicate4.or(predicate6);
      Predicate<Object> predicate8 = predicate2.negate();
      Byte byte0 = new Byte((byte) (-24));
      predicate6.test(byte0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate2);
      predicate2.test(predicate9);
      Predicate<Object> predicate10 = predicate9.or(predicate8);
      Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate11 = predicate5.or(predicate10);
      Predicate<Object> predicate12 = predicate5.negate();
      Predicate<Object> predicate13 = predicate12.negate();
      Predicate<Object> predicate14 = predicate0.and(predicate12);
      Predicate<Object> predicate15 = predicate3.negate();
      predicate15.negate();
      predicate14.negate();
      Predicate<Object> predicate16 = predicate0.negate();
      Predicate<Object> predicate17 = predicate11.and(predicate13);
      Predicate<Object> predicate18 = predicate1.and(predicate0);
      Predicate<String> predicate19 = Predicate.isEqual((Object) "");
      Predicate<String> predicate20 = predicate19.and(predicate1);
      Predicate<String> predicate21 = predicate20.negate();
      Predicate<String> predicate22 = predicate21.or(predicate19);
      predicate18.negate();
      Predicate<Object> predicate23 = predicate16.and(predicate6);
      predicate22.negate();
      predicate17.or(predicate2);
      predicate23.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[13];
      defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-24);
      byteArray1[1] = (byte) (-24);
      byteArray1[2] = (byte) (-24);
      byteArray1[3] = (byte) (-24);
      byteArray1[4] = (byte) (-24);
      Range range0 = Range.of((-172L));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      nucleotide0.getBasesFor();
      Predicate.isEqual((Object) nucleotide0);
      byte byte0 = (byte) (-4);
      byte byte1 = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.retainAll(linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-47);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate4.or(predicate7);
      Predicate<Object> predicate9 = predicate2.negate();
      Byte byte0 = new Byte((byte) (-24));
      predicate7.test(byte0);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate2);
      predicate5.test(predicate10);
      Predicate<Object> predicate11 = predicate10.or(predicate9);
      Predicate.isEqual((Object) predicate8);
      predicate6.or(predicate11);
      Predicate<Object> predicate12 = predicate6.negate();
      predicate12.negate();
      Predicate<Object> predicate13 = predicate0.and(predicate12);
      Predicate<Object> predicate14 = predicate3.negate();
      Predicate<Object> predicate15 = predicate14.negate();
      predicate13.negate();
      Predicate<Object> predicate16 = predicate0.negate();
      Predicate<Object> predicate17 = predicate5.negate();
      Predicate<Object> predicate18 = predicate15.and(predicate9);
      Predicate<String> predicate19 = Predicate.isEqual((Object) "");
      Predicate<String> predicate20 = predicate19.and(predicate1);
      Predicate<String> predicate21 = predicate20.negate();
      Predicate<String> predicate22 = predicate21.or(predicate19);
      predicate18.negate();
      Predicate<Object> predicate23 = predicate16.and(predicate7);
      predicate22.negate();
      predicate17.or(predicate2);
      predicate23.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.047707978151193
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate4.or(predicate7);
      Predicate<Object> predicate9 = predicate5.negate();
      Byte byte0 = new Byte((byte) (-24));
      predicate7.test(byte0);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate11 = predicate10.or(predicate9);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate12 = predicate6.or(predicate11);
      predicate9.negate();
      Predicate<Object> predicate13 = predicate1.negate();
      Predicate<Object> predicate14 = predicate10.negate();
      Predicate<Object> predicate15 = predicate0.or(predicate9);
      Predicate<Object> predicate16 = predicate3.negate();
      Predicate<Object> predicate17 = predicate14.negate();
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate18 = predicate12.or(predicate11);
      Predicate<Object> predicate19 = predicate5.negate();
      Predicate<Object> predicate20 = predicate17.negate();
      predicate4.or(predicate20);
      Predicate<Object> predicate21 = predicate15.negate();
      predicate6.negate();
      Predicate<Object> predicate22 = predicate13.and(predicate16);
      predicate18.and(predicate19);
      predicate2.or(predicate22);
      predicate1.and(predicate21);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Object object0 = new Object();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 6948709);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6948709, int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      predicate2.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = predicate4.or(predicate6);
      Predicate<Object> predicate8 = predicate2.negate();
      Byte byte0 = new Byte((byte) (-24));
      predicate6.test(byte0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate10 = predicate9.or(predicate8);
      Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate11 = predicate5.or(predicate10);
      Predicate<Object> predicate12 = predicate5.negate();
      Predicate<Object> predicate13 = predicate12.negate();
      Predicate<Object> predicate14 = predicate0.and(predicate12);
      predicate3.negate();
      predicate14.negate();
      Predicate<Object> predicate15 = predicate0.negate();
      Predicate<Object> predicate16 = predicate11.and(predicate13);
      Predicate<Object> predicate17 = predicate12.and(predicate8);
      Predicate<String> predicate18 = Predicate.isEqual((Object) "");
      Predicate<String> predicate19 = predicate18.and(predicate1);
      Predicate<String> predicate20 = predicate19.negate();
      Predicate<String> predicate21 = predicate20.or(predicate18);
      predicate17.negate();
      Predicate<Object> predicate22 = predicate15.and(predicate6);
      predicate21.negate();
      predicate16.or(predicate2);
      predicate22.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[13];
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      assertFalse(boolean0);
      
      Nucleotide nucleotide0 = Nucleotide.Purine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-64)}, byteArray1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-52);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-52);
      byteArray0[4] = (byte)0;
      Range range0 = Range.of(483L);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 245
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.7544389640523006
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)37;
      byteArray0[8] = (byte)26;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2365));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)10;
      Integer integer0 = new Integer((byte) (-50));
      byteArray1[2] = (byte)118;
      byteArray1[3] = (byte)25;
      byteArray1[4] = (byte)37;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (-2673));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6454371383635378
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte) (-43);
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte) (-32);
      byteArray1[5] = (byte) (-10);
      byteArray1[6] = (byte)13;
      byteArray1[7] = (byte) (-11);
      byteArray1[8] = (byte)0;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 1269108175);
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)1;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)49);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.469125437401365
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-891));
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-38);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-207));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.7577110499289814
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      defaultNucleotideCodec0.toString(byteArray0);
      Range range0 = Range.ofLength(0L);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      byte byte0 = (byte)109;
      byteArray0[1] = (byte)109;
      byte byte1 = (byte)33;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate4.or(predicate7);
      Predicate<Object> predicate9 = predicate5.negate();
      Byte byte0 = new Byte((byte) (-24));
      predicate7.test(byte0);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate11 = predicate10.or(predicate9);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate12 = predicate6.or(predicate11);
      Predicate<Object> predicate13 = predicate9.negate();
      Predicate<Object> predicate14 = predicate13.negate();
      predicate0.and(predicate13);
      predicate3.negate();
      predicate0.or(predicate9);
      predicate3.negate();
      Predicate<Object> predicate15 = predicate0.negate();
      Predicate<Object> predicate16 = predicate12.and(predicate14);
      predicate5.and(predicate0);
      Predicate<String> predicate17 = Predicate.isEqual((Object) "");
      Predicate<String> predicate18 = predicate17.and(predicate1);
      Predicate<String> predicate19 = predicate18.negate();
      Predicate<String> predicate20 = predicate19.or(predicate17);
      predicate12.negate();
      predicate15.and(predicate7);
      predicate20.negate();
      predicate16.or(predicate2);
      predicate12.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[13];
      defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-565L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -565
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate2);
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      Predicate<Object> predicate7 = predicate0.and(predicate5);
      Predicate<Object> predicate8 = predicate7.negate();
      predicate4.or(predicate8);
      predicate1.negate();
      Integer integer0 = new Integer(2686);
      predicate3.and(predicate0);
      predicate0.or(predicate7);
      predicate3.negate();
      predicate7.negate();
      Predicate.isEqual((Object) predicate2);
      Predicate.isEqual((Object) predicate6);
      predicate1.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      assertEquals(Nucleotide.Gap, nucleotide0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      UnaryOperator<Nucleotide> unaryOperator0 = UnaryOperator.identity();
      linkedList0.offer(nucleotide0);
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.stream();
      linkedList0.add(nucleotide0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)75;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      predicate0.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = predicate4.negate();
      Byte byte0 = new Byte((byte) (-24));
      predicate6.test(byte0);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate2);
      predicate4.test(predicate8);
      Predicate<Object> predicate9 = predicate8.or(predicate7);
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate10 = predicate5.or(predicate9);
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate11.negate();
      Predicate<Object> predicate13 = predicate0.and(predicate11);
      predicate3.negate();
      predicate0.or(predicate7);
      predicate13.negate();
      Predicate<Object> predicate14 = predicate0.negate();
      predicate10.and(predicate12);
      Predicate<Object> predicate15 = predicate4.and(predicate0);
      Predicate<String> predicate16 = Predicate.isEqual((Object) "");
      Predicate<String> predicate17 = predicate16.and(predicate1);
      Predicate<String> predicate18 = predicate17.negate();
      Predicate<String> predicate19 = predicate18.or(predicate16);
      predicate15.negate();
      predicate14.and(predicate6);
      predicate19.negate();
      predicate10.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[13];
      defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-24);
      byteArray1[1] = (byte) (-24);
      byteArray1[2] = (byte) (-24);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.527845560804654
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-23);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte) (-36);
      byteArray1[3] = (byte) (-40);
      byteArray1[4] = (byte) (-14);
      byteArray1[5] = (byte)81;
      byteArray1[6] = (byte)98;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate0.and(predicate7);
      predicate9.test(predicate4);
      predicate2.test(predicate0);
      Predicate.isEqual((Object) "6!N]eqDt");
      Byte byte0 = new Byte((byte) (-19));
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate0.and(predicate2);
      Predicate<Object> predicate12 = predicate1.and(predicate0);
      Predicate<Object> predicate13 = predicate10.negate();
      Predicate<String> predicate14 = Predicate.isEqual((Object) predicate3);
      predicate11.and(predicate9);
      predicate0.negate();
      predicate12.and(predicate11);
      predicate14.negate();
      Predicate<Object> predicate15 = predicate13.or(predicate6);
      Integer integer0 = new Integer((-64791167));
      predicate15.negate();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[0] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte) (-120), (Iterator<Nucleotide>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.1852309053601315
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      int int0 = 3657;
      defaultNucleotideCodec0.isGap(byteArray0, 3657);
      nucleotide0.getAllPossibleAmbiguities();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1822L);
      Range range0 = Range.of((long) 3657);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (long) 3657, (long) 3657);
      range0.isSubRangeOf(range1);
      range1.intersection(range0);
      Range.of(range_CoordinateSystem1, (long) 3657, (long) 3657);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      defaultNucleotideCodec0.encode(nucleotide0);
      Range.of(range_CoordinateSystem0, 228L, 228L);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      predicate4.or(predicate6);
      Predicate<Object> predicate7 = predicate0.and(predicate6);
      Predicate.isEqual((Object) "6!N]eqDt");
      Byte byte0 = new Byte((byte) (-24));
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate1.and(predicate0);
      Predicate<Object> predicate11 = predicate8.negate();
      predicate10.and(predicate9);
      Predicate.isEqual((Object) predicate10);
      Predicate<Object> predicate12 = predicate11.or(predicate5);
      Integer integer0 = new Integer((-64791167));
      predicate12.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      defaultNucleotideCodec0.isGap(byteArray0, (byte) (-120));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-671), (Iterator<Nucleotide>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)84;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(3090, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.6737877026525627
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)15;
      int int0 = (-891);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-891));
      byteArray0[0] = (byte)15;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-2639));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.retainAll(linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)67;
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-89));
      assertEquals((-89), int0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate5.negate();
      predicate8.and(predicate1);
      Predicate<Object> predicate9 = predicate0.and(predicate7);
      predicate9.test(predicate4);
      predicate2.test(predicate0);
      Predicate.isEqual((Object) "6!N]eqDt");
      Byte byte0 = new Byte((byte) (-19));
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate0.and(predicate2);
      Predicate<Object> predicate12 = predicate1.and(predicate0);
      Predicate<Object> predicate13 = predicate10.negate();
      Predicate<String> predicate14 = Predicate.isEqual((Object) predicate3);
      predicate11.and(predicate9);
      predicate0.negate();
      predicate12.and(predicate11);
      predicate14.negate();
      Predicate<Object> predicate15 = predicate13.or(predicate6);
      Integer integer0 = new Integer((-64791167));
      predicate15.negate();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[0] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.4273916305367944
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = predicate0.and(predicate6);
      predicate7.test(predicate4);
      predicate2.test(predicate0);
      Predicate.isEqual((Object) "6!N]eqDt");
      Byte byte0 = new Byte((byte) (-19));
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate0.and(predicate2);
      Predicate<Object> predicate11 = predicate1.and(predicate0);
      Predicate<Object> predicate12 = predicate8.negate();
      Predicate<String> predicate13 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate14 = predicate9.and(predicate7);
      Predicate<Object> predicate15 = predicate10.and(predicate0);
      predicate13.or(predicate15);
      predicate14.negate();
      predicate11.and(predicate9);
      predicate13.negate();
      Predicate<Object> predicate16 = predicate12.or(predicate5);
      predicate16.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-19);
      byteArray0[0] = (byte) (-19);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 579);
      assertEquals(0, int0);
      
      byteArray0[4] = (byte) (-19);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, (byte) (-19));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate4.or(predicate7);
      Predicate<Object> predicate9 = predicate2.negate();
      Byte byte0 = new Byte((byte) (-24));
      predicate7.test(byte0);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate2);
      predicate5.test(predicate10);
      Predicate<Object> predicate11 = predicate10.or(predicate9);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate12 = predicate6.or(predicate11);
      Predicate<Object> predicate13 = predicate6.negate();
      Predicate<Object> predicate14 = predicate13.negate();
      Predicate<Object> predicate15 = predicate0.and(predicate13);
      Predicate<Object> predicate16 = predicate3.negate();
      predicate16.negate();
      predicate15.negate();
      Predicate<Object> predicate17 = predicate0.negate();
      Predicate<Object> predicate18 = predicate12.and(predicate14);
      Predicate<Object> predicate19 = predicate5.and(predicate0);
      Predicate<String> predicate20 = Predicate.isEqual((Object) "");
      Predicate<String> predicate21 = predicate20.and(predicate1);
      Predicate<String> predicate22 = predicate21.negate();
      Predicate<String> predicate23 = predicate22.or(predicate20);
      predicate19.negate();
      predicate17.and(predicate7);
      predicate23.negate();
      predicate18.or(predicate2);
      predicate12.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      predicate7.negate();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, (byte) (-24));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate0.and(predicate7);
      predicate9.test(predicate4);
      predicate2.test(predicate0);
      Predicate.isEqual((Object) "6!N]eqDt");
      Byte byte0 = new Byte((byte) (-19));
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate0.and(predicate2);
      Predicate<Object> predicate12 = predicate1.and(predicate0);
      Predicate<Object> predicate13 = predicate10.negate();
      Predicate<String> predicate14 = Predicate.isEqual((Object) predicate3);
      predicate11.and(predicate9);
      predicate0.negate();
      predicate12.and(predicate11);
      predicate14.negate();
      Predicate<Object> predicate15 = predicate13.or(predicate6);
      Integer integer0 = new Integer((-64791167));
      predicate15.negate();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[0] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate0.and(predicate7);
      predicate9.test(predicate4);
      predicate2.test(predicate0);
      Predicate.isEqual((Object) "6!N]eqDt");
      Byte byte0 = new Byte((byte) (-19));
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate0.and(predicate2);
      Predicate<Object> predicate12 = predicate1.and(predicate0);
      Predicate<Object> predicate13 = predicate10.negate();
      Predicate<String> predicate14 = Predicate.isEqual((Object) predicate3);
      predicate11.and(predicate9);
      predicate0.negate();
      predicate12.and(predicate11);
      predicate14.negate();
      Predicate<Object> predicate15 = predicate13.or(predicate6);
      Integer integer0 = new Integer((-64791167));
      predicate15.negate();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[0] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-19);
      byteArray1[1] = (byte) (-19);
      byteArray1[2] = (byte) (-120);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[11];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate4.or(predicate7);
      Predicate<Object> predicate9 = predicate5.negate();
      Byte byte0 = new Byte((byte) (-24));
      predicate7.test(byte0);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate11 = predicate10.or(predicate9);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate12 = predicate6.or(predicate11);
      Predicate<Object> predicate13 = predicate9.negate();
      Predicate<Object> predicate14 = predicate13.negate();
      predicate0.and(predicate13);
      Predicate<Object> predicate15 = predicate10.negate();
      Predicate<Object> predicate16 = predicate0.or(predicate9);
      Predicate<Object> predicate17 = predicate3.negate();
      Predicate<Object> predicate18 = predicate15.negate();
      Predicate.isEqual((Object) predicate8);
      predicate12.or(predicate11);
      predicate18.negate();
      Predicate<Object> predicate19 = predicate18.negate();
      predicate4.or(predicate19);
      predicate16.negate();
      predicate14.negate();
      predicate17.and(predicate13);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-24);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate0.and(predicate7);
      predicate9.test(predicate4);
      predicate2.test(predicate0);
      Predicate.isEqual((Object) "6!N]eqDt");
      Byte byte0 = new Byte((byte) (-19));
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate0.and(predicate2);
      Predicate<Object> predicate12 = predicate1.and(predicate0);
      Predicate<Object> predicate13 = predicate10.negate();
      predicate12.negate();
      Predicate<String> predicate14 = Predicate.isEqual((Object) predicate3);
      predicate11.and(predicate9);
      predicate0.negate();
      predicate12.and(predicate11);
      predicate14.negate();
      Predicate<Object> predicate15 = predicate13.or(predicate6);
      Integer integer0 = new Integer((-64791167));
      predicate15.negate();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[0] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, 0L);
      assertEquals(Nucleotide.NotAdenine, nucleotide0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.404588558646996
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(d+)s*-s*(d+)");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate0.and(predicate7);
      predicate8.test(predicate4);
      predicate2.test(predicate0);
      Predicate<Object> predicate9 = predicate3.or(predicate6);
      predicate2.or(predicate9);
      Predicate.isEqual((Object) "p<3\"R%GM@Dl}w%");
      Byte byte0 = new Byte((byte) (-19));
      Predicate<Object> predicate10 = predicate7.negate();
      Predicate<Object> predicate11 = predicate5.negate();
      Predicate<Object> predicate12 = predicate0.and(predicate2);
      Predicate<Object> predicate13 = predicate1.and(predicate0);
      Predicate<Object> predicate14 = predicate10.negate();
      predicate10.or(predicate0);
      Predicate<String> predicate15 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate16 = predicate11.and(predicate8);
      Predicate<Object> predicate17 = predicate12.and(predicate0);
      predicate15.or(predicate17);
      predicate16.negate();
      predicate13.and(predicate11);
      predicate15.negate();
      Predicate<Object> predicate18 = predicate14.or(predicate6);
      predicate18.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (byte) (-120));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.403763330235561
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate4.or(predicate7);
      Predicate<Object> predicate9 = predicate5.negate();
      Byte byte0 = new Byte((byte)0);
      predicate7.test(byte0);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate11 = predicate10.or(predicate9);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate12 = predicate6.or(predicate11);
      Predicate<Object> predicate13 = predicate9.negate();
      Predicate<Object> predicate14 = predicate13.negate();
      predicate0.and(predicate13);
      Predicate<Object> predicate15 = predicate3.negate();
      Predicate<Object> predicate16 = predicate15.negate();
      predicate3.negate();
      Predicate<Object> predicate17 = predicate0.negate();
      Predicate<Object> predicate18 = predicate12.and(predicate14);
      predicate5.and(predicate0);
      Predicate<String> predicate19 = Predicate.isEqual((Object) "");
      Predicate<String> predicate20 = predicate19.and(predicate1);
      Predicate<String> predicate21 = predicate20.negate();
      Predicate<String> predicate22 = predicate21.or(predicate19);
      predicate16.negate();
      predicate17.and(predicate7);
      predicate22.negate();
      predicate18.or(predicate2);
      predicate12.negate();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-28);
      byteArray1[4] = (byte) (-28);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-28);
      byteArray1[7] = (byte) (-28);
      Range range0 = Range.of(4L);
      defaultNucleotideCodec0.iterator(byteArray1, range0);
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)67;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.ofLength((-635L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)64;
      defaultNucleotideCodec0.iterator(byteArray0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (long) 188, (long) 188);
      Range range1 = Range.of(2253L);
      range0.isSubRangeOf(range1);
      range0.intersection(range1);
      long long0 = (-2130L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 3577L, (-2130L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
