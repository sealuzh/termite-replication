/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 22:16:02 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdWholeReadItem;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2090584275903393
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = null;
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PositionSequence positionSequence0 = null;
      DefaultPhd defaultPhd0 = new DefaultPhd("", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null);
      Map<String, String> map0 = defaultPhd0.getComments();
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      PhdBuilder phdBuilder1 = phdBuilder0.copy();
      phdBuilder1.comments(map0);
      defaultPhd0.getWholeReadItems();
      PhdBuilder phdBuilder2 = phdBuilder0.copy();
      PhdBuilder phdBuilder3 = phdBuilder1.fakePeaks();
      phdBuilder2.build();
      // Undeclared exception!
      try { 
        phdBuilder3.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.ArtificialPhd", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(65535L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd((String) null, nucleotideSequence0, (QualitySequence) null, (PositionSequence) null, (Map<String, String>) null);
      defaultPhd0.toString();
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      phdBuilder0.peaks((PositionSequence) null);
      System.setCurrentTimeMillis((-593L));
      System.setCurrentTimeMillis(1952L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Integer integer0 = new Integer(15);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      assertFalse(object10.equals((Object)object4));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      phdBuilder0.peaks((PositionSequence) null);
      short[] shortArray0 = null;
      byte[] byteArray0 = null;
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel((byte[]) null, (short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableByteArray", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      DefaultPhd defaultPhd0 = new DefaultPhd("BDJkz^4E 7`(.jb", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null, map0);
      List<PhdReadTag> list0 = defaultPhd0.getReadTags();
      DefaultPhd defaultPhd1 = new DefaultPhd("BDJkz^4E 7`(.jb", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null, map0, (List<PhdWholeReadItem>) null, list0);
      List<PhdWholeReadItem> list1 = defaultPhd0.getWholeReadItems();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      defaultPhd0.equals(list1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList1);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      defaultPhd0.getReadTags();
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("=);bKp", (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9448468679826323
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("org.jcvi.jillion.assemly.consed.phd.DefaultPhd", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      Range range0 = Range.of((-3511L));
      phdBuilder0.readTags(linkedList0);
      MockDate mockDate0 = new MockDate(841, 841, 841, (-2685), 500, (-2685));
      mockDate0.setTime(0L);
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag("org.jcvi.jillion.assemly.consed.phd.DefaultPhd", "@U@VI6<Yzl? }h#Q'Gl", range0, mockDate0, "", "qualities can not be null");
      linkedList0.offerFirst((PhdReadTag) null);
      phdBuilder0.readTags(linkedList0);
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.remove((Object) "W6{");
      hashMap1.put(">YVVk#|", "?hs~f.;A");
      hashMap1.put((String) null, "");
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder(">YVVk#|", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.comments(hashMap1);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.clone();
      System.setCurrentTimeMillis((-1L));
      hashMap1.put("aRP(#$Cx41JS;", "");
      hashMap1.put((String) null, "!mc&gl\"7-PkN'.N7U/");
      System.setCurrentTimeMillis((-1L));
      hashMap1.put(">YVVk#|", "?hs~f.;A");
      hashMap1.put((String) null, "");
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, nucleotideSequence0, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence1).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-PuwxdR/tnJm ,Q", nucleotideSequence1, qualitySequence1);
      phdBuilder0.fakePeaks(15, 15);
      phdBuilder0.build();
      NucleotideSequence nucleotideSequence2 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence2 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      short[] shortArray0 = new short[7];
      shortArray0[3] = (short) (byte)7;
      QualitySequence qualitySequence3 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      QualitySequence qualitySequence4 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence1).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("-PuwxdR/tnJm ,Q", nucleotideSequence1, qualitySequence1);
      phdBuilder0.build();
      NucleotideSequence nucleotideSequence2 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence2 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      short[] shortArray0 = new short[7];
      shortArray0[3] = (short) (byte)7;
      QualitySequence qualitySequence3 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      QualitySequence qualitySequence4 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      DefaultPhd defaultPhd0 = new DefaultPhd("BDJkz^4E 7`(.jb", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null, map0);
      List<PhdReadTag> list0 = defaultPhd0.getReadTags();
      DefaultPhd defaultPhd1 = new DefaultPhd("BDJkz^4E 7`(.jb", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null, map0, (List<PhdWholeReadItem>) null, list0);
      defaultPhd0.getWholeReadItems();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("org.jcvi.jillion.core.residue.nt.TwoBitEncodedNucleotideCodec");
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList1);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      defaultPhd0.getReadTags();
      phdBuilder0.wholeReadItems(linkedList0);
      PhdBuilder phdBuilder1 = null;
      try {
        phdBuilder1 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      System.setCurrentTimeMillis((-593L));
      System.setCurrentTimeMillis(1952L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      PhdBuilder phdBuilder1 = phdBuilder0.copy();
      assertNotSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<DefaultPhdWholeReadItem> linkedList0 = new LinkedList<DefaultPhdWholeReadItem>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList2);
      List<String> list0 = defaultPhdWholeReadItem0.getLines();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0, locale_FilteringMode0);
      linkedList0.retainAll(list1);
      LinkedList<PhdWholeReadItem> linkedList3 = new LinkedList<PhdWholeReadItem>(linkedList0);
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PositionSequence positionSequence0 = mock(PositionSequence.class, new ViolatedAssumptionAnswer());
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence2 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence2).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("P|", nucleotideSequence1, qualitySequence2);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(10, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("]FN -BvzW4M3)WJ", nucleotideSequence0, qualitySequence0);
      System.setCurrentTimeMillis((-593L));
      System.setCurrentTimeMillis(1952L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks();
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      DefaultPhd defaultPhd0 = new DefaultPhd("BDJkz^4E 7`(.jb", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null, map0);
      List<PhdReadTag> list0 = defaultPhd0.getReadTags();
      DefaultPhd defaultPhd1 = new DefaultPhd("BDJkz^4E 7`(.jb", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null, map0, (List<PhdWholeReadItem>) null, list0);
      defaultPhd0.getWholeReadItems();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList1);
      linkedList0.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      defaultPhd0.getReadTags();
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.remove((Object) "W6{");
      hashMap1.put("YVVk#|", "?hs~f.;A");
      hashMap1.put("W6{", "g@}Ww~p");
      hashMap1.put((String) null, "");
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("?hs~f.;A", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-1706), 1068);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis(65535L);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1782L);
      byte[] byteArray0 = null;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2099);
      shortArray0[1] = (short)789;
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel((byte[]) null, shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableByteArray", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      hashMap0.put("2dVENS+Y", "2dVENS+Y");
      hashMap0.put("2dVENS+Y", "");
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      hashMap0.put("2dVENS+Y", "2dVENS+Y");
      hashMap0.putIfAbsent("sequence can not be null", "org.jcvi.jillion.assembly.consed.phd.PhdBuilder");
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      hashMap0.clear();
      hashMap0.put("", "`;e*:As-~<x");
      hashMap0.put(">\"f", "UjFvWa(Il");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      hashMap0.computeIfPresent("", biFunction0);
      hashMap0.put("sequence can not be null", ">\"f");
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replace("", "");
      hashMap0.merge("idcan not be null", "|!'", biFunction1);
      BiFunction<Object, Object, String> biFunction2 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction2).apply(any() , any());
      hashMap0.compute("Vz^\"", biFunction2);
      hashMap0.put("M}K215%+*(?6-AOThc", "idcan not be null");
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("sequence can not be null", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4060L), (-4060L));
      MockDate mockDate0 = new MockDate(609, 2797, 2658);
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag("lwo~NSm7SyC", "", range0, mockDate0, "", "e| 3!r,<S");
      linkedList1.add((PhdReadTag) defaultPhdReadTag0);
      linkedList0.pollLast();
      ArtificialPhd artificialPhd0 = new ArtificialPhd(">=b:{f136&/.dW", nucleotideSequence0, qualitySequence0, map0, linkedList0, linkedList1, 2797);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }
}
