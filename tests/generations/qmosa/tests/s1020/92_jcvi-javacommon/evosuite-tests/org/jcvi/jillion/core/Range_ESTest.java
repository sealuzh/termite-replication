/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 18:22:15 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.ToDoubleFunction;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.43196579202489
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(393L, 4294967336L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 65560L, 4294967336L);
      Range range3 = Range.ofLength(2769L);
      long long0 = range3.getLength();
      assertEquals(2769L, long0);
      
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range1.equals((Object) null);
      assertSame(range1, range0);
      
      Range range4 = range2.intersection(range3);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.833213344056217
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(4294967295L);
      linkedList0.add(range0);
      Object object0 = new Object();
      range0.equals(linkedList0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals((Object) null);
      Range range1 = Range.of(4294967295L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5970083497432395
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(9223372036854772809L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder2.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2558L), 9223372036854772809L);
      range2.getLength();
      Range.Builder range_Builder3 = new Range.Builder((-2558L), (-2330L));
      range2.complement(range1);
      Object object1 = new Object();
      range2.equals(range_Builder1);
      range2.intersection(range1);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-1809L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2532719365231575
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = (-7L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 127L;
      Range.of(range_CoordinateSystem0, (-7L), 127L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Object object0 = new Object();
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.ofLength(1L);
      range0.equals(range1);
      Object object1 = new Object();
      Long long2 = new Long(2147483661L);
      String string0 = "given length %d would make range [%d - ? ] beyond max allowed end offset";
      // Undeclared exception!
      try { 
        Range.parseRange("given length %d would make range [%d - ? ] beyond max allowed end offset");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse given length %d would make range [%d - ? ] beyond max allowed end offset into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1808908482480276
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967274L, 9223372036854775530L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.equals(range0);
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object1 = new Object();
      boolean boolean1 = range0.equals(object1);
      assertFalse(boolean1 == boolean0);
      
      Range range2 = range1.intersection(range0);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8314802400679735
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(224L);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.45475180621637
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder();
      Object object1 = new Object();
      range0.equals("");
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandEnd(2147483647L);
      Range range1 = Range.of((-1273L), (-1273L));
      Range range2 = Range.of(2147483647L, 4294967295L);
      boolean boolean0 = range1.equals(range_Builder0);
      Range.of(255L, 255L);
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean1 = range0.equals(range2);
      assertTrue(boolean1 == boolean0);
      
      Range range3 = range0.intersection(range2);
      assertSame(range3, range0);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.321667306574474
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-7L), 127L);
      range0.equals((Object) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object2);
      assertFalse(boolean0);
      
      Range range1 = Range.of(127L);
      Range range2 = range1.intersection(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1471670889360297
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-7L), (-7L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = Range.of((-7L));
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.443622926503114
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(1832L, 1832L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Range range1 = Range.of(4338L, 4338L);
      Range range2 = Range.of(2147484818L);
      Object object1 = new Object();
      boolean boolean0 = range0.equals(range1);
      Object object2 = new Object();
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Object object3 = new Object();
      boolean boolean1 = range2.equals(object3);
      assertTrue(boolean1 == boolean0);
      
      range2.intersection(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5173067256047372
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder();
      Object object1 = new Object();
      range0.equals("");
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandEnd(2147483647L);
      Range range1 = Range.of((-1273L), (-1273L));
      Range range2 = Range.of(4294967295L);
      range1.equals(range_Builder0);
      Range range3 = Range.of(255L, 255L);
      assertFalse(range3.isEmpty());
      
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(range2);
      Range range4 = range0.intersection(range2);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8767636555119314
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of((-2529L));
      Object object2 = new Object();
      range1.equals(range0);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("WQr;MQ?,c3[. |@v", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse WQr;MQ?,c3[. |@v into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.412565077654792
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.ofLength(9223372036854775807L);
      Range range1 = Range.of((-3029L));
      range0.equals(range1);
      Range range2 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range2.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3029 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3218223443933574
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4584L), (-4584L));
      Range range1 = Range.of((-555L), 44L);
      Range range2 = Range.of((-4857L));
      Object object0 = new Object();
      range2.equals(range0);
      assertFalse(range0.isEmpty());
      
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      boolean boolean0 = range2.equals(object4);
      assertFalse(boolean0);
      
      Range range3 = range1.intersection(range2);
      assertTrue(range3.isEmpty());
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4342902161264153
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(1832L, 1832L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1832L, 1832L);
      Range range2 = Range.ofLength(4214L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 65535L, 65535L);
      Object object0 = new Object();
      boolean boolean0 = range3.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range3.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range4 = range2.intersection(range1);
      assertTrue(range4.isEmpty());
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5061059152732135
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(1832L, 1832L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1832L, 1832L);
      Range range2 = Range.ofLength(4214L);
      Range range3 = Range.of((-1L), 2591L);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals((Object) null);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      
      Range range4 = range3.intersection(range2);
      //  // Unstable assertion: assertNotSame(range4, range3);
      //  // Unstable assertion: assertTrue(range4.equals((Object)range3));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3517922332229957
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.of(1832L, 9223372036854775807L);
      Range range0 = Range.of(4294967300L, 9223372036854775807L);
      range0.spliterator();
      Object object0 = new Object();
      long long0 = (-2489L);
      Range.of((-2489L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 286L, (-2489L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3234532248613666
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967274L, 9223372036854775530L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(4294967274L, 4294967274L);
      range_Builder1.expandEnd(311L);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(9223372036854775530L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      
      range0.equals(range_Builder2);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3149511924096102
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-1170L), (-1170L));
      Spliterator<Long> spliterator0 = range0.spliterator();
      Object object0 = new Object();
      Range range1 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), (-1170L));
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      
      Range range3 = Range.of((-2147483648L));
      range2.equals(spliterator0);
      assertFalse(range0.isEmpty());
      
      Range.of((-1170L), 2147483647L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range2.equals(object6);
      Range range4 = range3.intersection(range1);
      assertFalse(range3.isEmpty());
      assertSame(range3, range4);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.462372842894049
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(319L, 319L);
      Range.Builder range_Builder0 = new Range.Builder(319L);
      range_Builder0.contractBegin(318L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder(9223372036854773976L);
      Range range2 = range_Builder1.build();
      range_Builder0.shift(319L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.Builder range_Builder4 = new Range.Builder(range2);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder0);
      Range.of((-397L));
      range_Builder5.build();
      Range range3 = Range.of(319L);
      Object object0 = new Object();
      range3.equals(object0);
      Range.of(255L, 9223372036854773976L);
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range3.equals((Object) null);
      assertFalse(boolean0);
      
      Range range4 = range0.intersection(range3);
      assertSame(range4, range0);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.536626556217483
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1832L, 4294967273L);
      Range range1 = Range.of(range_CoordinateSystem0, 4294967273L, 4294967295L);
      range0.complement(range1);
      Range range2 = Range.of((-2238L), 1832L);
      Range.of(959L, 4294967273L);
      range2.spliterator();
      range2.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967273L, 1832L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.7464574900192535
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(1832L);
      Range.Builder range_Builder0 = new Range.Builder((-128L), (-128L));
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.copy();
      range_Builder1.copy();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.parallelStream();
      Range range2 = Range.ofLength(1832L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range1);
      linkedList0.parallelStream();
      range1.complementFrom(linkedList0);
      range2.intersection(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.5026362258884434
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-2933L), (-2933L));
      Long long0 = new Long((-2933L));
      range0.equals(long0);
      Range range2 = Range.of(0L, 0L);
      range1.equals((Object) null);
      Range range3 = Range.of((-2933L));
      range1.intersection(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range range4 = Range.of(0L);
      range4.complement(range3);
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertFalse(range_ComparatorsArray1.equals((Object)range_ComparatorsArray0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.532079803076833
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(9223372036854772809L);
      Object object0 = new Object();
      Range range0 = Range.of((-2147483648L), 67L);
      Range range1 = Range.of(67L);
      Object object1 = new Object();
      range1.equals(object1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 67L, 55638366L);
      Object object2 = new Object();
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(boolean0);
      
      Range.Builder range_Builder1 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range3 = range0.intersection(range1);
      assertFalse(range3.isEmpty());
      assertFalse(range3.equals((Object)range0));
      assertSame(range3, range1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.076595013395784
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(1219L, 9223372036854775807L);
      Long long0 = new Long(2147483647L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      Range range1 = range0.intersection(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0160103005785253
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854710273L);
      Range range1 = Range.ofLength(9223372036854710273L);
      Object object0 = new Object();
      range0.equals(range1);
      range1.intersection(range0);
      Range range2 = Range.of(4294967295L);
      Range range3 = range0.intersection(range2);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range3.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.547163076219723
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4584L), (-4584L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin((-4584L));
      Range.Builder range_Builder2 = new Range.Builder(2224L);
      range_Builder1.copy();
      Range range1 = range_Builder0.build();
      range_Builder2.build();
      range_Builder1.shift((-4584L));
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range0.spliterator();
      Object object0 = new Object();
      range0.equals((Object) null);
      range1.intersection(range0);
      Range.Comparators.values();
      Iterator<Long> iterator0 = range1.iterator();
      Iterator<Long> iterator1 = range0.iterator();
      assertFalse(iterator1.equals((Object)iterator0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.7099582010340715
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of((-32768L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range1.isSubRangeOf(range0);
      Range range2 = Range.ofLength(2147483647L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(278L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-32768L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range3 = range_Builder2.build();
      range_Builder1.shift((-32768L));
      Range.Builder range_Builder3 = new Range.Builder(range2);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range3.getEnd();
      Object object0 = new Object();
      boolean boolean1 = range0.equals(range2);
      assertFalse(boolean1 == boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range3.complement(range1);
      Range range4 = Range.of((-382L));
      range4.intersection(range0);
      assertSame(range0, range2);
      
      List<Range> list1 = range4.complementFrom(list0);
      assertEquals(2, list1.size());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4356949243248636
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(1219L, 1219L);
      Spliterator<Long> spliterator0 = range0.spliterator();
      Object object0 = new Object();
      range0.equals(spliterator0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(1219L);
      Range range1 = Range.of(1219L, 9981L);
      Range range2 = Range.of(4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range range3 = Range.of(255L, 55408998L);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object1);
      assertFalse(range0.isEmpty());
      
      Range range4 = range3.intersection(range2);
      assertFalse(range3.isEmpty());
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2810957517900725
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(1832L, 1832L);
      Range range1 = Range.ofLength(1832L);
      Range range2 = Range.of(840L, 840L);
      Long long0 = new Long(2147483647L);
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      
      Range range3 = range1.intersection(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range3.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.589500849774564
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854710273L);
      Range range1 = Range.ofLength(9223372036854710273L);
      Range range2 = Range.of(4766L);
      range0.equals(range2);
      Range range3 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(127L, 9223372036854710273L);
      List<Range> list0 = range1.complement(range2);
      //  // Unstable assertion: assertEquals(2, list0.size());
      
      List<Range> list1 = range2.complement(range0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertSame(range0, range3);
      //  // Unstable assertion: assertFalse(list1.contains(range2));
      
      Range range4 = Range.of(9223372036854775807L);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.259772048297927
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-7L), 4294967295L);
      linkedList0.add(range0);
      Object object0 = new Object();
      range0.equals(linkedList0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = Range.of((-7L));
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1220184985197488
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.of(4766L);
      Range.of(4294967274L, 9223372036854710273L);
      Long long0 = new Long((-888L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2299266943090346
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = (-7L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-7L), (-7L));
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.ofLength(9223372036854775807L);
      linkedList0.add((Range) null);
      Range range1 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range1.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3233389060614593
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(1832L, 1832L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1832L, 1832L);
      Range range2 = Range.ofLength(4214L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 1832L, 1832L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem2, 1832L, 4214L);
      assertNotSame(range4, range0);
      
      Long long0 = new Long(1832L);
      boolean boolean0 = range1.equals(long0);
      assertFalse(boolean0);
      
      Range range5 = range1.intersection(range2);
      assertSame(range5, range3);
      assertTrue(range5.isEmpty());
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4386608632132307
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(1832L, 1832L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1832L, 1832L);
      Range range2 = Range.ofLength(4214L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 65535L, 65535L);
      assertTrue(range3.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range2);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range4 = range2.intersection(range1);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.168621811863419
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(9223372036854772809L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(9223372036854772809L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(9842L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-9223372036854775808L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3291235801921513
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(9223372036854710273L, 9223372036854710273L);
      Range.of(4766L);
      Range range1 = range0.asRange();
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.split(9223372036854710273L);
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1627022802135856
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.of(1832L);
      Range.Builder range_Builder0 = new Range.Builder((-128L), (-128L));
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.917432973292215
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-2924L);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-2924L), (-2924L));
      Long long1 = new Long((-2924L));
      range0.equals(long1);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.573329487444706
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-7L), (-7L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.expandEnd((-7L));
      Range range1 = Range.of((-813L), 2147483647L);
      Range.of(4294967295L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      Range range2 = Range.of((-2923L), 0L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(range_CoordinateSystem0);
      Range range3 = range2.intersection(range0);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2867616596032363
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967291L, 9223372036854775530L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(4294967291L, 4294967291L);
      range_Builder1.expandEnd(311L);
      range_Builder1.expandEnd(9223372036854775530L);
      range0.complement(range1);
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range2.complement(range1);
      assertSame(range2, range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3667342127404596
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin((-4584L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-886L), 0L);
      Range.of(65535L);
      Range.of((-4584L), 1L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9490123306617946
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1L);
      range0.getBegin();
      range0.getEnd();
      range0.getLength();
      range0.getEnd();
      Object object0 = new Object();
      Long long0 = new Long(1805L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.of((-481L), (-832L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.521934413021037
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-32768L), 65535L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range1.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-32768L));
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.equals(long0);
      Range range2 = Range.of(65535L);
      Range range3 = range2.intersection(range0);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-555L));
      Range.of((-4857L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.08004713767688
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(9223372036854772809L, 9223372036854775807L);
      range0.equals((Object) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      long long0 = 67L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854772809L, 67L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(393L, 4294967356L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      linkedList0.sort(comparator0);
      Stream<Range> stream0 = linkedList0.parallelStream();
      range0.equals(stream0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long(4294967356L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.7878762280875944
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.ofLength(9223372036854775807L);
      linkedList0.add((Range) null);
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3768208271695905
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4584L), (-4584L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin((-4584L));
      Range.Builder range_Builder2 = new Range.Builder(2224L);
      Range range1 = range_Builder0.build();
      long long0 = range1.getBegin();
      assertEquals(0L, long0);
      
      Range.Builder range_Builder3 = new Range.Builder();
      Range range2 = Range.of(2147483647L);
      range1.intersection(range2);
      range1.complement(range0);
      assertTrue(range1.isEmpty());
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.283271730815608
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(9223372036854772809L);
      Object object0 = new Object();
      Range.of((-2147483648L), 67L);
      Range range0 = Range.of(67L);
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Range.Builder range_Builder1 = new Range.Builder(4294967295L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-3946L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3946 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0650971907121782
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(9223372036854772809L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(67L);
      Object object2 = new Object();
      range0.equals(object2);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long1 = new Long((-1714L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.695722484943548
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(319L, 319L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 319 .. 319 ]/0B", string0);
      
      boolean boolean0 = range0.isSubRangeOf(range0);
      Range range1 = Range.ofLength(319L);
      range0.complement(range1);
      boolean boolean1 = range1.endsBefore(range1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem.values();
      Range range2 = Range.ofLength(319L);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      
      Range range3 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range4 = Range.parseRange("[ 319 .. 319 ]/0B");
      Range range5 = range3.intersection(range4);
      //  // Unstable assertion: assertTrue(range5.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0872556414799566
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-7L), 4294967295L);
      linkedList0.add(range0);
      range0.spliterator();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long((-7L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.149621076619472
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-7L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-7L), 1175L);
      range_Builder0.build();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-7L), (-7L));
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.555253129760522
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of(61L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range range2 = Range.of(1L);
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(1L, 4294967295L);
      Object object4 = new Object();
      Object object5 = new Object();
      range1.equals((Object) null);
      Range range4 = range3.intersection(range0);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.513060744263011
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(1832L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967274L, 4294967274L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandEnd(1832L);
      List<Range> list0 = range0.complement(range2);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      
      range2.equals(range1);
      Range range3 = Range.of(1694L, 4294967274L);
      Range range4 = range3.intersection(range2);
      assertFalse(range4.isEmpty());
      assertSame(range4, range2);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.5185221989863678
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.of((-1807L), 2147483647L);
      Range range1 = Range.ofLength(1238L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      range0.spliterator();
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range range2 = Range.ofLength(0L);
      Range range3 = Range.ofLength(0L);
      range3.asRange();
      Long long0 = new Long(1L);
      boolean boolean0 = range2.equals(range3);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.5179540458450553
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(319L, 319L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(319L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      boolean boolean0 = range1.endsBefore(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range2 = Range.ofLength(319L);
      Range range3 = Range.parseRange("[ 319 .. 320 ]/SB", range_CoordinateSystem1);
      //  // Unstable assertion: assertSame(range3, range1);
      
      boolean boolean1 = range2.startsBefore(range0);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.4936682263533685
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of((-431L), 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      assertFalse(linkedList0.contains(range0));
      
      Object object0 = new Object();
      range0.equals("end of file reached before entire block was skipped");
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      Range range2 = Range.of((-431L));
      Range range3 = range2.intersection(range0);
      assertTrue(range3.isEmpty());
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.0443902281158373
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-147L), (-147L));
      Range.Builder range_Builder1 = new Range.Builder(2034L);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      range0.equals(range_Builder2);
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(2034L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.694319444752532
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), 32767L);
      Range range2 = Range.of(32767L, 32767L);
      boolean boolean0 = range1.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-1767L), (-1253L));
      range_Builder0.contractEnd(1L);
      Range range3 = range0.intersection(range2);
      Range.Builder range_Builder1 = new Range.Builder();
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range3));
      //  // Unstable assertion: assertEquals(2, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      
      Long long0 = new Long(1L);
      Range.of(2999L);
      boolean boolean1 = range0.endsBefore(range2);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertNotSame(range2, range3);
      
      Range range4 = Range.of((-977L));
      boolean boolean2 = range0.intersects(range4);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.7032329674700435
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(1832L);
      Range.Builder range_Builder0 = new Range.Builder((-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder2.copy();
      range_Builder2.copy();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.parallelStream();
      linkedList0.addFirst(range0);
      assertFalse(range0.equals((Object)range1));
      
      Range range2 = Range.ofLength(255L);
      assertFalse(range2.isEmpty());
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range1);
      linkedList0.parallelStream();
      List<Range> list0 = range1.complementFrom(linkedList0);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3552397034845103
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = 1219L;
      Range range0 = Range.of(1219L, 1219L);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(1219L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(1219L, 1665L);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        range1.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.1308596534603352
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-4584L), 1L);
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Long long1 = new Long((-4584L));
      List<Range> list0 = range0.split(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem2);
      range_Builder0.shift((long) long1);
      long long2 = 361L;
      range_Builder0.build();
      Range.ofLength(long2);
      Range range1 = Range.of(range_CoordinateSystem1, long0, long2);
      range0.equals(range1);
      String string0 = "unable to mkdirs for ";
      // Undeclared exception!
      try { 
        Range.parseRange(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse unable to mkdirs for  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.1907699694758564
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(1219L, 1219L);
      Spliterator<Long> spliterator0 = range0.spliterator();
      Object object0 = new Object();
      Range range1 = Range.of(1219L, 1219L);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
      
      range0.spliterator();
      Object object1 = new Object();
      range1.equals(spliterator0);
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      
      List<Range> list0 = range0.split(1L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      assertSame(range0, range2);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.7290107922541242
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(1832L);
      Range.Builder range_Builder0 = new Range.Builder((-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      range1.endsBefore(range0);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder2.copy();
      range_Builder2.copy();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range1);
      linkedList0.parallelStream();
      Range range2 = Range.ofLength(255L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range1);
      linkedList0.parallelStream();
      range1.complementFrom(linkedList0);
      range2.intersection(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.1874663325633676
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-7L), (-7L));
      range_Builder0.contractBegin((-7L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long((-7L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.2072541696876598
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-2933L), (-2933L));
      Long long0 = new Long((-2933L));
      range0.equals(long0);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder1.build();
      long long1 = 9223372036854775807L;
      long long2 = (-912L);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder((-912L), (-2933L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.2368370943385467
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range_Builder0.shift((-2748L));
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      range_Builder0.build();
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(1833L, (-7L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.4840726925347125
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(1219L, 1219L);
      range0.spliterator();
      Object object0 = new Object();
      Range range1 = Range.of((-2147483648L));
      range0.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.52383746885986
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4584L), (-4584L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin((-4584L));
      long long0 = 2224L;
      Range.Builder range_Builder2 = new Range.Builder(2224L);
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder2.build();
      range_Builder1.shift((-4584L));
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Object object0 = new Object();
      range1.intersects(range2);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.2830503796406174
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(319L, 319L);
      Range.Builder range_Builder0 = new Range.Builder(319L);
      range_Builder0.contractBegin(318L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854773976L);
      Range range2 = range_Builder1.build();
      range_Builder0.shift(319L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.Builder range_Builder4 = new Range.Builder(range2);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder0);
      Range range3 = range_Builder5.build();
      long long0 = 9223372036854775807L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 318L, 65535L);
      Range.Builder range_Builder6 = new Range.Builder(319L, 65535L);
      range1.intersection(range2);
      // Undeclared exception!
      try { 
        range3.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.137309368892479
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.of((-4584L));
      long long0 = 2224L;
      long long1 = 255L;
      Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 934L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.8139081750777235
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-7L), (-7L));
      Range range0 = Range.of((-2256L), 1L);
      Range.ofLength(271L);
      List<Range> list0 = range0.split(271L);
      range0.complementFrom(list0);
      range0.asRange();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = (-803L);
      // Undeclared exception!
      try { 
        Range.ofLength((-803L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.2920604857149813
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4614L), (-4614L));
      Long long0 = new Long((-4614L));
      Range range1 = Range.of((-1704L), 0L);
      Object object0 = new Object();
      range1.complement(range0);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      Range range2 = range1.intersection(range0);
      range2.intersection(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.1441439786503693
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.of((-7L));
      Range.Builder range_Builder0 = new Range.Builder((-3664L), 9223372036854772052L);
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-7L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.2455689729561477
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long(67L);
      Long long1 = new Long(33023L);
      range0.equals(long1);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      boolean boolean0 = range0.equals(object7);
      assertFalse(boolean0);
      
      Range range1 = Range.of(33023L);
      range1.intersection(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.5832555597634927
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = Range.of(32767L, 32767L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1767L), (-1253L));
      range_Builder0.copy();
      range_Builder0.contractEnd(1L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder1 = new Range.Builder();
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range2));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Long long0 = new Long(1L);
      Range.of(2999L);
      boolean boolean0 = range0.endsBefore(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(range1, range2);
      
      Range range3 = Range.of(32767L);
      boolean boolean1 = range0.intersects(range3);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.086030159798497
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(892L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 891 ]/0B", string0);
      
      List<Range> list0 = range0.split(892L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      
      range0.getLength();
      Range.Comparators.values();
      Range range1 = Range.of(4294967294L, 4294967294L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      range_Builder0.contractBegin((-128L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, (-2104L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2105 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.004264933733523
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-1170L), (-1170L));
      range0.spliterator();
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775415L, (-1170L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1170 would make range [9223372036854775415 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.223530831983023
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = 1219L;
      Range range0 = Range.of(1219L, 1219L);
      Range range1 = Range.of(1219L);
      range0.startsBefore(range1);
      range0.spliterator();
      Range range2 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.016291837301391
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = 1219L;
      Range range0 = Range.ofLength(1219L);
      Range range1 = Range.of(1219L);
      range0.startsBefore(range1);
      Range range2 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.1185824544200034
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long long0 = 9223372036854710273L;
      Range.of(9223372036854710273L, 9223372036854710273L);
      Range range0 = Range.ofLength(9223372036854710273L);
      Range.of(9223372036854710273L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854710273L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -131071 would make range [9223372036854710273 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.072232258605225
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-7L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-7L), (-7L));
      long long1 = (-2222L);
      Range range0 = Range.of((-2222L), 1L);
      range0.split(255L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-7L), (-2222L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.6035344421351567
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-395L), 32767L);
      Range range2 = Range.of((-395L), 32767L);
      range2.spliterator();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range3 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder((-395L), 4584L);
      range0.complement(range1);
      Range range4 = range0.intersection(range3);
      assertSame(range3, range4);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.8892632916692698
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.of(393L, 4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(393L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.059354848590835
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(1217L);
      range0.split(1217L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.4618539021248713
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-2933L), (-2933L));
      Long long0 = new Long((-2933L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      Range.of((-133L));
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      Range range2 = range_Builder1.build();
      Range.Builder range_Builder5 = new Range.Builder(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(0L, long1);
      
      range0.complement(range1);
      range_Builder0.shift((-4459L));
      Range range3 = range0.intersection(range2);
      range1.complement(range2);
      assertSame(range1, range3);
      
      Range.of(9223372036854775807L);
      Range.Comparators.values();
      Range range4 = Range.of((-912L));
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.298059552841556
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(1832L, 1832L);
      range0.getBegin();
      Range.ofLength(1832L);
      Range.of((-1L), 2591L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.352334153589759
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ -1 .. 1 ]/SB", string0);
      
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.split(255L);
      range1.complementFrom(list0);
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      List<Range> list1 = range1.complement(range0);
      List<Range> list2 = range1.complementFrom(list1);
      assertEquals(1, list2.size());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.0325189149497596
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.8892632916692698
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(1219L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-2026L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.57585991307886
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range range1 = range_Builder0.build();
      range_Builder0.copy();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      Range range2 = Range.ofLength(2684L);
      linkedList0.add(range0);
      linkedList0.parallelStream();
      range2.complementFrom(linkedList0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.3247259429734775
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(45L, 4294967295L);
      range0.spliterator();
      range0.intersects(range0);
      range0.equals(linkedList0);
      Range range1 = Range.of(45L);
      range1.intersection(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.453140987426936
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-67L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(219L);
      Object object0 = new Object();
      range0.intersects(range0);
      range_Builder1.expandEnd((-67L));
      Range.of(67L, 255L);
      Range.of((-67L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 67L, (-3274L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.593098105612368
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854710273L);
      Range.Builder range_Builder0 = new Range.Builder(3930L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.Builder range_Builder3 = new Range.Builder(9223372036854710273L);
      range_Builder3.copy();
      range_Builder3.copy();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      linkedList0.parallelStream();
      Range range2 = Range.ofLength(65535L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range1);
      linkedList1.parallelStream();
      range2.complementFrom(linkedList0);
      range0.intersection(range2);
      Range.Comparators.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.14716708893603
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Object object0 = new Object();
      range0.isSubRangeOf(range0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        Range.of(32767L, 248L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.540526871385096
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(1832L);
      Range.Builder range_Builder0 = new Range.Builder((-128L), (-128L));
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.copy();
      range_Builder1.copy();
      range1.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Range> consumer0 = (Consumer<Range>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.add(range0);
      Range range2 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(1832L, 1832L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range3 = range1.intersection(range0);
      Range range4 = Range.of((-128L));
      boolean boolean0 = range3.isSubRangeOf(range4);
      assertFalse(boolean0);
      
      range0.complement(range3);
      assertSame(range0, range2);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.5020751193142665
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854710273L);
      Range range1 = Range.ofLength(9223372036854710273L);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range2 = Range.ofLength(9223372036854710273L);
      range2.complementFrom(linkedList0);
      Range range3 = Range.ofLength(1L);
      range3.iterator();
      range1.iterator();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(1L, 1L);
      range0.complement(range2);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        range3.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.2839015386645043
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-2933L), (-2933L));
      Long long0 = new Long((-2933L));
      range0.isEmpty();
      Range.of((-133L));
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder1.build();
      long long1 = (-9223372036854775792L);
      long long2 = (-912L);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder((-912L), (-2933L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.3149511924096102
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-1170L), (-1170L));
      Spliterator<Long> spliterator0 = range0.spliterator();
      Object object0 = new Object();
      Range range1 = Range.of((-2147483645L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483645L), (-1170L));
      boolean boolean0 = range1.equals(range2);
      Range.of((-2147483645L));
      range2.equals(spliterator0);
      Range.of((-1170L), 2147483647L);
      Object object1 = new Object();
      boolean boolean1 = range2.equals(range_CoordinateSystem0);
      assertTrue(boolean1 == boolean0);
      
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range2.isEmpty();
      Range range3 = range0.intersection(range2);
      assertFalse(range2.equals((Object)range1));
      assertSame(range0, range3);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.7646083712236185
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854710273L);
      Range range1 = Range.of((-2503L));
      range1.isSubRangeOf(range0);
      Range range2 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.complement(range2);
      range1.endsBefore(range2);
      Object object0 = new Object();
      range2.isEmpty();
      Range.ofLength(0L);
      Object object1 = new Object();
      Range range3 = Range.of((-1499L));
      range3.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 127L);
      range3.intersection(range1);
      Range range4 = Range.of((-2503L), 127L);
      range4.intersection(range3);
      String string0 = "w*%WdN)q4M\\$1@xI";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("w*%WdN)q4M$1@xI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.w*%WdN)q4M$1@xI
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.9283537338038963
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(29L, 29L);
      range_Builder0.expandEnd((-9223372036854775808L));
      Range.of(2591L, 10042L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.9669434861893547
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-7L), (-7L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-6L), long0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.204597690591572
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.of(1832L, 1832L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1832L, 1832L);
      Range.of(range_CoordinateSystem0, 1832L, 4214L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 65535L, 65535L);
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long(65535L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.1422089789313334
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1056L), 9223372036854773243L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.9504258637418843
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-7L));
      range0.getEnd();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.3210801130763783
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(319L, 319L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 319L, 2147483647L);
      long long0 = 278L;
      Range.Builder range_Builder0 = new Range.Builder(319L);
      range_Builder0.contractBegin(319L);
      Range range2 = range_Builder0.build();
      range_Builder0.shift(278L);
      Range.Builder range_Builder1 = new Range.Builder(range2);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range1.getEnd();
      long long1 = (-1L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.362689340973494
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1912L), 0L);
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1912L), (-1912L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      range_Builder1.shift((-1912L));
      range0.getBegin();
      range_Builder1.contractBegin((-1912L));
      range0.getBegin();
      range_Builder1.expandEnd(0L);
      range_Builder1.expandEnd(0L);
      range_Builder1.contractEnd(0L);
      Range range1 = range0.asRange();
      range_CoordinateSystem0.toString();
      range1.endsBefore(range0);
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.split((-1912L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.014635675651483
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-714L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1872L, (-714L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.809783478004049
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-7L), (-7L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("UTF-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.UTF-8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.40220293726372
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(1832L, 1832L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(1832L, 4294967295L);
      Spliterator<Long> spliterator0 = range0.spliterator();
      linkedList0.add(range0);
      range0.equals(spliterator0);
      Range range2 = Range.of(319L);
      range1.intersection(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.5233118545673268
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(319L, 319L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(319L);
      range0.complement(range1);
      range1.endsBefore(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range2 = Range.ofLength(18L);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2465L, 685L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.2464858698187875
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967274L, 9223372036854775550L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.ofLength(9223372036854775550L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandEnd(9223372036854775550L);
      range0.endsBefore(range1);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertNotSame(range2, range0);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.593020231284679
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(393L, 4294967336L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 65560L, 4294967336L);
      Range range3 = Range.ofLength(2769L);
      long long0 = range3.getLength();
      assertEquals(2769L, long0);
      
      range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder((-1924L), 393L);
      range0.endsBefore(range2);
      Range.Comparators.values();
      List<Range> list0 = range0.complement(range2);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range0));
      
      Range range4 = range3.intersection(range1);
      List<Range> list1 = range0.complement(range4);
      assertEquals(1, list1.size());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.014630013724273
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(45L, 4294967295L);
      range0.spliterator();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(4294967295L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.0594891092421146
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), 255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getBegin();
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.2695555088811252
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-82L), 10L);
      range0.getBegin();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder1 = new Range.Builder((-82L), 1576L);
      Range range1 = range_Builder0.build();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.5181415178566375
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      Range.Builder range_Builder0 = new Range.Builder(278L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-2565L));
      range_Builder1.shift(255L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder1.expandBegin(2468L);
      Object object0 = new Object();
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range_Builder2.expandEnd(2147483647L);
      range1.complement(range0);
      Range range2 = Range.of(32767L);
      Range range3 = range0.intersection(range2);
      List<Range> list0 = range3.complement(range0);
      assertTrue(list0.contains(range0));
      
      range2.intersects(range3);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.4668803402419717
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(1219L, 1219L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1219L, 1219L);
      range_Builder0.copy();
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range_Builder0.expandEnd(1219L);
      Range range1 = Range.of(1219L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.5620925021044187
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(319L, 319L);
      Range.Builder range_Builder0 = new Range.Builder(319L);
      range_Builder0.contractBegin(318L);
      Range.Builder range_Builder1 = new Range.Builder(9223372036854773976L);
      Range range1 = range_Builder1.build();
      Range range2 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.shift(319L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      Range.Builder range_Builder5 = new Range.Builder(range1);
      Range range3 = range_Builder2.build();
      Range.Builder range_Builder6 = new Range.Builder(9223372036854773585L, 9223372036854775807L);
      range1.complement(range3);
      Range range4 = range3.intersection(range2);
      range3.complement(range1);
      Range range5 = Range.of(9223372036854773585L);
      assertFalse(range5.equals((Object)range4));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.372078010615197
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4584L), (-4584L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 3977L, 3977L);
      range0.intersection(range1);
      range0.getLength();
      // Undeclared exception!
      try { 
        range0.split((-4584L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.2514331634468316
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of(61L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.633158074728882
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1219L, 1219L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1219L, 65560L);
      Range range2 = Range.ofLength(1L);
      range0.getLength();
      range_Builder0.build();
      long long0 = (-1907L);
      Range.of((-3664L), (-1L));
      range1.complement(range2);
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-3664L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.4067900128304314
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.of(1832L, 1832L);
      Range range0 = Range.ofLength(1832L);
      Range range1 = Range.of((-1L), 2591L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.intersection(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range1.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.9678674685340356
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-253L), (-253L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.0472340198018077
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.of((-32768L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(61L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(2207L);
      range_Builder0.shift((-1023L));
      range_Builder0.expandEnd(2207L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.583791848750833
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of(319L, 319L);
      Range.Builder range_Builder0 = new Range.Builder(319L);
      range_Builder0.contractBegin(318L);
      Range.Builder range_Builder1 = new Range.Builder(9223372036854773976L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.shift(319L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      Range.Builder range_Builder5 = new Range.Builder(range1);
      Range range2 = range_Builder2.build();
      Range.Builder range_Builder6 = new Range.Builder(9223372036854773585L, 9223372036854775807L);
      List<Range> list0 = range1.complement(range2);
      //  // Unstable assertion: assertEquals(2, list0.size());
      
      Range range3 = range2.intersection(range1);
      List<Range> list1 = range2.complement(range1);
      Range range4 = Range.of(9223372036854773585L);
      List<Range> list2 = range4.complementFrom(list1);
      //  // Unstable assertion: assertEquals(1, list2.size());
      //  // Unstable assertion: assertSame(range2, range3);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.3683283251621425
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.of((-32768L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of(61L);
      Range range0 = Range.of(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range.ofLength(237L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long(32767L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.405704467942183
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4584L), (-4584L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.contractBegin((-4584L));
      Range.Builder range_Builder3 = new Range.Builder(2224L);
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem0, 2224L, 2224L);
      Range.Builder range_Builder5 = new Range.Builder(range0);
      range_Builder1.contractBegin((-4584L));
      Range.Builder range_Builder6 = new Range.Builder(range2);
      Range.Builder range_Builder7 = new Range.Builder(range1);
      range_Builder1.contractBegin(1442L);
      range_Builder2.build();
      Range.Builder range_Builder8 = new Range.Builder();
      Object object0 = new Object();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.541790251658955
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.complement(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 700L, 2147483647L);
      Range range3 = range1.intersection(range2);
      List<Range> list1 = range3.complement(range0);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.03251891494976
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.474266959939438
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(319L, 319L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 319L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(319L);
      range_Builder0.contractBegin(319L);
      Range range2 = Range.of(range_CoordinateSystem0, 319L, 2147483647L);
      range_Builder0.shift(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range2);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Long long0 = new Long(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range range3 = Range.of(621L, 2147483647L);
      Range.Builder range_Builder4 = new Range.Builder(range3);
      Range range4 = range_Builder0.build();
      Range.Builder range_Builder5 = new Range.Builder();
      Range.Builder range_Builder6 = new Range.Builder(range0);
      range3.complement(range4);
      Range range5 = range2.intersection(range4);
      //  // Unstable assertion: assertTrue(range5.isEmpty());
      
      List<Range> list0 = range2.complement(range0);
      //  // Unstable assertion: assertEquals(2, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.885082981228065
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      List<Range> list0 = range0.complement(range1);
      range_Builder0.build();
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(range1.isEmpty());
      assertFalse(list1.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.6391297189283116
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(3471L);
      Range.Builder range_Builder2 = range_Builder0.contractBegin((-2199L));
      Range.Builder range_Builder3 = new Range.Builder(914L);
      Range range1 = range_Builder0.build();
      range_Builder2.shift(3471L);
      Range.Builder range_Builder4 = new Range.Builder(range1);
      Range.Builder range_Builder5 = new Range.Builder(range1);
      Range.Builder range_Builder6 = new Range.Builder(range0);
      Range range2 = range_Builder5.build();
      Range.Builder range_Builder7 = new Range.Builder(0L, 318L);
      range2.complement(range1);
      range2.intersection(range0);
      range1.complement(range0);
      Range range3 = Range.of(914L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.2743400585288547
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-7L), (-7L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.contractBegin((-7L));
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder((-2355L), (-2355L));
      range0.complement(range1);
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range0.complement(range2);
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range2));
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.2349020857005786
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(319L, 319L);
      Range.Builder range_Builder0 = new Range.Builder(319L);
      range_Builder0.contractBegin(318L);
      Range.Builder range_Builder1 = new Range.Builder(9223372036854773976L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.shift(319L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(range1);
      Range range2 = range_Builder2.build();
      Range range3 = range2.intersection(range1);
      assertSame(range3, range2);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.401440358521753
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(1832L, 1832L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of((-2298L));
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.654750227660117
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4584L), (-4584L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.contractBegin((-4584L));
      Range.Builder range_Builder3 = new Range.Builder(2224L);
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder3.build();
      range_Builder1.shift((-4584L));
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder1.contractBegin((-4584L));
      Range.Builder range_Builder5 = new Range.Builder(range2);
      Range.Builder range_Builder6 = new Range.Builder(range1);
      range_Builder1.contractBegin(1442L);
      Range range3 = range_Builder2.build();
      Range.Builder range_Builder7 = new Range.Builder();
      Range.Builder range_Builder8 = new Range.Builder(9953L, 9223372036854775807L);
      range3.complement(range0);
      Range range4 = range0.intersection(range3);
      Range.of((-375L));
      List<Range> list0 = range4.complement(range3);
      assertFalse(list0.contains(range0));
      assertTrue(range4.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range2.getBegin(range_CoordinateSystem1);
      assertFalse(range2.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.1522874445805202
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.of(1832L, 1832L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1832L, 1832L);
      Range.of(4294967303L, 4294967303L);
      Object object0 = new Object();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.2454274927088713
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-4586L);
      Range.Builder range_Builder0 = new Range.Builder(278L);
      long long1 = 24L;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-4586L), 278L);
      Range.Builder range_Builder2 = range_Builder1.shift((-4586L));
      Range.Builder range_Builder3 = range_Builder2.copy();
      Range.of(range_CoordinateSystem0, (-2147483648L), 1L);
      range_Builder3.expandEnd(41L);
      // Undeclared exception!
      try { 
        Range.of(328L, (-453L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.6681512260204028
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of(1832L, 1832L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1832L, 1832L);
      Range range2 = Range.ofLength(4214L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 65535L, 65535L);
      Object object0 = new Object();
      range3.intersection(range1);
      Range range4 = Range.of((-1178L));
      range0.complement(range2);
      range4.intersection(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.661713041420133
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.of(1832L, 1832L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1832L, 1832L);
      Range range1 = Range.ofLength(4214L);
      Range range2 = Range.of((-1L), 2591L);
      Range range3 = Range.of((-1L));
      Range range4 = range0.intersection(range1);
      Range range5 = Range.of((-1L), 1832L);
      assertNotSame(range5, range2);
      
      range1.asRange();
      Range range6 = range3.intersection(range1);
      assertFalse(range3.isEmpty());
      assertTrue(range6.isEmpty());
      
      List<Range> list0 = range1.complement(range4);
      assertTrue(range0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.6628001991026484
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4584L), (-4584L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.contractBegin((-4584L));
      Range.Builder range_Builder3 = new Range.Builder(2224L);
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder3.build();
      range_Builder1.shift((-4584L));
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder1.contractBegin((-4584L));
      Range.Builder range_Builder5 = new Range.Builder(range2);
      assertFalse(range2.isEmpty());
      
      Range.Builder range_Builder6 = new Range.Builder(range1);
      range_Builder1.contractBegin(1442L);
      Range range3 = range_Builder2.build();
      Range.Builder range_Builder7 = new Range.Builder();
      Range.Builder range_Builder8 = new Range.Builder(9953L, 9223372036854775807L);
      List<Range> list0 = range3.complement(range0);
      assertTrue(list0.contains(range3));
      
      Range range4 = range0.intersection(range3);
      List<Range> list1 = range4.complement(range3);
      assertFalse(range0.isEmpty());
      assertFalse(list1.equals((Object)list0));
      
      long long0 = new Long(1442L);
      List<Range> list2 = range1.split(1442L);
      assertTrue(list2.contains(range1));
      assertFalse(list2.contains(range4));
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.9669434861893547
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of(3842L, 3842L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(3843L, long0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.of(4294967336L, 4294967336L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(2147483647L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.1443140113476007
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      long long0 = (-4379L);
      Range.Builder range_Builder1 = new Range.Builder((-4379L), (-4379L));
      Range.of((-4379L));
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.contractBegin((-4379L));
      long long1 = 255L;
      long long2 = (-4900L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-4900L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.3943981129939513
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3842L, 3842L);
      Range.Builder range_Builder1 = new Range.Builder(3842L);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, (-1169L), (-540L));
      Range range1 = range_Builder2.build();
      range_Builder2.expandEnd(3842L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder3.contractEnd((-540L));
      range_Builder2.copy();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder5 = new Range.Builder();
      Range range2 = range_Builder1.build();
      Range.Builder range_Builder6 = new Range.Builder(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range2));
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.8337387456310323
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372032559808257L, 9223372032559808257L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.0456489995354796
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.of((-32794L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of(61L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long(1345L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.8892425051146353
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3167L), (-3167L));
      range_Builder0.expandBegin(1L);
      range_Builder0.contractEnd(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-3167L), (-3167L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.9786447802782234
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range.ofLength(1460L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range1));
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = 732L;
      Range.Builder range_Builder0 = new Range.Builder(732L, 732L);
      long long1 = 4363L;
      range_Builder0.expandBegin(4363L);
      range_Builder0.contractBegin(4363L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(732L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.0472340198018077
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.of((-32768L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of(61L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(2207L);
      range_Builder0.expandEnd(2207L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.2385432099457176
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of(3842L, 3842L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder5 = new Range.Builder();
      range_Builder5.build();
      range_Builder2.build();
      Range.Builder range_Builder6 = new Range.Builder(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.1775684364247834
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.of(1219L, 1219L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.ofLength(2672L);
      linkedList0.add(range0);
      linkedList0.parallelStream();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, (Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
