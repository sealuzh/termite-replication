/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 22:55:35 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.8029449286457946
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(2403L, 65535L);
      Range range1 = Range.of(476L);
      range0.endsBefore(range1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = (-168L);
      Range range2 = Range.of((-168L), 2147483647L);
      range2.split(2147483647L);
      long long1 = (-1928L);
      // Undeclared exception!
      range2.split(65535L);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.6007036719975325
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.of((-7053L));
      Range range0 = Range.of((-7053L), 65535L);
      Object object0 = new Object();
      Long long0 = new Long(2812L);
      Object object1 = new Object();
      Range.of((-7053L), 1L);
      Object object2 = new Object();
      range0.equals((Object) null);
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf(".6C,%!;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators..6C,%!;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.924506401828121
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range1 = Range.ofLength(154L);
      linkedList1.addFirst(range1);
      assertFalse(linkedList1.contains(range0));
      
      linkedList1.add(range0);
      linkedList0.stream();
      linkedList0.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>(linkedList1);
      linkedList2.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-2057L));
      Object object0 = new Object();
      Range.of((-2057L), 1432L);
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.962583513942557
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of((-1L), 9223372036854775787L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      linkedList0.add(range0);
      linkedList0.stream();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 311L;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      linkedList0.add(range1);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.855278018251428
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList0.stream();
      linkedList0.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>(linkedList1);
      linkedList2.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-2057L));
      Range range2 = Range.of(9223372036854710269L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-2057L), 9223372036854710262L);
      // Undeclared exception!
      try { 
        range0.complement(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854710269 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.531927805156167
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(2427L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of(65535L, 9223372036854775787L);
      Long long0 = new Long(1182L);
      Long.getLong((String) null, long0);
      Long.compareUnsigned(1182L, 9223372036854775787L);
      Long long1 = Long.getLong("zg11q6RchC:^ {a", long0);
      Long.toUnsignedString(1182L);
      range1.equals(long1);
      Range.of(65535L, 9223372036854775787L);
      Object object2 = new Object();
      Range range2 = Range.of(1182L, 65535L);
      Range range3 = Range.of(1945L);
      boolean boolean0 = range0.equals(range3);
      assertFalse(range0.isEmpty());
      
      Range range4 = Range.of(1182L);
      Object object3 = new Object();
      range2.equals(object3);
      assertNotSame(range2, range4);
      assertFalse(range2.equals((Object)range4));
      
      boolean boolean1 = range1.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5256307996433036
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      range_Builder1.expandBegin(2441L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.Builder range_Builder4 = range_Builder3.shift((-1211L));
      range_Builder4.shift(65535L);
      Range.Builder range_Builder5 = new Range.Builder();
      Range.Builder range_Builder6 = new Range.Builder(range_Builder2);
      range0.equals((Object) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.773545216782999
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      linkedList0.push(range0);
      linkedList0.add(range0);
      linkedList0.stream();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 9223372036854775787L;
      Range range1 = Range.of(range_CoordinateSystem0, 1476L, 9223372036854775787L);
      linkedList0.add(range1);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775787L, (-1799L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1800 would make range [9223372036854775787 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.7159875025196514
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = (-1594L);
      Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-128L), 127L);
      Range.of(463L, 463L);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.699757381711338
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList0.stream();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      linkedList2.stream();
      Range.CoordinateSystem.values();
      long long0 = (-32768L);
      Range range1 = Range.of((-9223372036854775808L));
      Range range2 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range2.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=4.020769984197283
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-128L));
      range_Builder0.shift((-128L));
      range_Builder0.shift((-128L));
      range_Builder0.copy();
      range_Builder0.contractBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-736L), (-736L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Comparators.values();
      range0.equals((Object) null);
      Object object0 = new Object();
      Range.of(0L, 0L);
      Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-128L), (-736L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.8322486874545936
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of((-1L), 9223372036854775787L);
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long(2403L);
      Long long1 = new Long(9223372036854775787L);
      Long long2 = Long.getLong("5(@MR", long1);
      boolean boolean0 = range0.equals((Object) null);
      Range.ofLength(2403L);
      Object object4 = new Object();
      Range.of(1182L);
      Range range1 = Range.of(377L);
      boolean boolean1 = range1.equals(long2);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.845680651920649
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of((-1594L), (-1594L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.ofLength(1L);
      Object object2 = new Object();
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      
      Object object3 = new Object();
      Range.of(1L, 1L);
      Range range3 = Range.of((-1594L), 1485L);
      Object object4 = new Object();
      range0.equals(object4);
      assertNotSame(range0, range3);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.8614755706412285
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of((-1594L), 127L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      linkedList2.add(range0);
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      linkedList2.push(range0);
      linkedList1.add(range0);
      linkedList2.stream();
      linkedList0.add(range0);
      range0.complementFrom(linkedList3);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1594L), 127L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      range1.complement(range0);
      // Undeclared exception!
      try { 
        range0.split((-1594L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.427071343575012
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.copy();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3823144645699146
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(9223372036854710272L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object0);
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of((-577L));
      Object object4 = new Object();
      range0.equals((Object) null);
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("XC8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.XC8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.830869847443528
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(2441L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      Range.Builder range_Builder5 = range_Builder4.shift((-1211L));
      Range.Builder range_Builder6 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder7 = new Range.Builder();
      range_Builder5.copy();
      Range.Builder range_Builder8 = new Range.Builder(range_Builder3);
      boolean boolean0 = range0.equals(range_Builder3);
      Range range1 = Range.ofLength(2441L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      Range range2 = Range.of(2147483646L, 9223372036854775807L);
      boolean boolean1 = range2.equals(range_Builder5);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.6645519305354908
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(2435L, 65535L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of(65535L, 9223372036854775787L);
      Object object2 = new Object();
      Long long0 = new Long(1182L);
      Long long1 = Long.getLong("zg11q6RchC:^ {a", long0);
      range1.equals(long1);
      Range range2 = Range.ofLength(2435L);
      assertFalse(range2.isEmpty());
      
      Object object3 = new Object();
      Range.of(1182L, 65535L);
      Range range3 = Range.of(1945L);
      boolean boolean0 = range0.equals(range3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.8215359123562025
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(2403L, 65535L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of((-1L), (-1L));
      Object object2 = new Object();
      Object object3 = new Object();
      Range range2 = Range.of(2403L);
      boolean boolean0 = range2.equals(range0);
      Range.of((-2004L));
      Object object4 = new Object();
      Range range3 = Range.of(116L, 65535L);
      boolean boolean1 = range1.equals(range3);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      
      Integer integer0 = new Integer((-155));
      boolean boolean2 = range3.equals(integer0);
      assertTrue(boolean2 == boolean1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0719020252438676
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(2427L);
      Object object0 = new Object();
      Object object1 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.addFirst(range0);
      linkedList0.push(range0);
      linkedList0.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      linkedList2.stream();
      Long long0 = new Long(276L);
      Long long1 = new Long(0L);
      Object object2 = new Object();
      Range range1 = Range.of(276L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(linkedList1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=4.073951977708218
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(21L, 21L);
      Range range1 = Range.of(1L, 1L);
      range0.getLength();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Comparators.values();
      Range range2 = Range.of((-771L), 21L);
      range0.complement(range1);
      range2.split(21L);
      Range.of((-771L));
      range0.intersects(range2);
      range2.endsBefore(range0);
      Range.of(range_CoordinateSystem0, 21L, 21L);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      assertEquals("0B", range_CoordinateSystem1.getAbbreviatedName());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=4.045693016314408
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(21L, 21L);
      Range range1 = Range.of(1L, 1L);
      range0.getLength();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range range2 = Range.of((-771L), 21L);
      range0.complement(range1);
      range2.split(21L);
      Range.of((-771L));
      range0.intersects(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1L, 1L);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.7521228663029564
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-7373L);
      Range range0 = Range.of(range_CoordinateSystem0, (-7373L), (-7373L));
      range0.getEnd();
      Range range1 = Range.of(range_CoordinateSystem0, (-976L), (-976L));
      long long1 = 65534L;
      Range range2 = Range.ofLength(65534L);
      range2.isSubRangeOf(range1);
      range0.endsBefore(range1);
      range2.intersects(range1);
      range1.getEnd();
      range0.startsBefore(range1);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range1.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.029029949053515
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(21L, 21L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1946L, 1946L);
      Range range2 = Range.of(1L, 1L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.isEmpty();
      range0.getLength();
      range2.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Comparators.values();
      Range range3 = Range.of((-771L), 1946L);
      Range range4 = Range.of((-771L));
      boolean boolean2 = range3.endsBefore(range0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(range0, range2);
      
      Range.of((-32762L));
      Range.Comparators.values();
      boolean boolean3 = range4.endsBefore(range1);
      Range range5 = Range.of(1L, 1514L);
      assertNotSame(range5, range2);
      
      boolean boolean4 = range4.equals(range3);
      assertFalse(range4.isEmpty());
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.9969460524195966
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-1594L), (-1594L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.clone();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      Range range1 = Range.of((-259L));
      range0.startsBefore(range1);
      Range.Comparators.values();
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1818L), (-1594L));
      range1.isSubRangeOf(range2);
      Range range3 = Range.of((-1818L));
      range3.intersection(range0);
      range0.equals(range2);
      List<Range> list0 = range2.complement(range2);
      range1.complementFrom(list0);
      range0.complementFrom(linkedList0);
      Long long0 = new Long((-1594L));
      assertEquals((-1594L), (long)long0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.783121307397888
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(21L, 21L);
      Range range1 = Range.of(1L, 1L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Comparators.values();
      Range range2 = Range.of(1L, 21L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Range range3 = Range.of(1L);
      Range range4 = range3.intersection(range2);
      assertFalse(range4.isEmpty());
      assertSame(range4, range1);
      
      Object object0 = new Object();
      Range range5 = Range.of(21L, 21L);
      boolean boolean0 = range2.equals(range5);
      assertFalse(range2.equals((Object)range3));
      assertNotSame(range2, range3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.82896544031227
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of((-1594L), 116L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.ofLength(2147483647L);
      Object object2 = new Object();
      range1.equals(object2);
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      
      Object object3 = new Object();
      Range.of(1418L, 1418L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.4486070202756154
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = 9223372036854775618L;
      Range range0 = Range.ofLength(9223372036854775618L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775618L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -381 would make range [9223372036854775618 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.429091545595214
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      Long long0 = new Long((-2362L));
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4736604799032067
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.listIterator();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.push(range0);
      linkedList1.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      linkedList1.stream();
      Long long0 = new Long((-9223372036854775808L));
      Long long1 = new Long(323L);
      Object object0 = new Object();
      range0.equals(linkedList2);
      boolean boolean0 = range0.equals(linkedList1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.817178053542946
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.of(1L, 1L);
      long long1 = (-1199L);
      Range range1 = Range.of((-1199L));
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=4.057480150097002
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-1594L), 65535L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-32768L), (-1L));
      Range range1 = range_Builder0.build();
      range0.spliterator();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder1.expandBegin((-1L));
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range2 = Range.ofLength(1L);
      Object object2 = new Object();
      range0.getLength();
      range2.intersection(range1);
      range2.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("h}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.h}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6251492556054488
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(21L, 21L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(21L);
      range0.intersection(range1);
      Object object0 = new Object();
      range0.equals(range1);
      Range.of(1L, 0L);
      Object object1 = new Object();
      Long long0 = new Long((-892L));
      Object object2 = new Object();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.066572360403333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      long long0 = 9223372036854710272L;
      Range range1 = Range.of((-2147483648L));
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range1);
      linkedList0.add(range1);
      linkedList0.stream();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range1.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-990L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 346L, (-990L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.568297313033828
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      range0.isEmpty();
      Range.Comparators.values();
      range0.intersects(range0);
      range0.intersection(range0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.5366362310758155
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.of(2403L, 65535L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-168L), 2147483647L);
      Long long0 = new Long((-1928L));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.of((-168L), (-1928L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.7082153519722567
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of((-1L), (-1L));
      assertFalse(range0.isEmpty());
      
      Object object2 = new Object();
      Range range1 = Range.of(2403L, 2147483646L);
      Object object3 = new Object();
      range1.equals(object3);
      Range range2 = Range.of((-2147483648L));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.836564503546081
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2026L, 2026L);
      Range range1 = Range.ofLength(12378L);
      range0.isSubRangeOf(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 9982L, 4294967295L);
      Range.of(range_CoordinateSystem0, 12378L, 4294967295L);
      range1.isEmpty();
      range1.complement(range2);
      String string0 = "U";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.U
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2338564522265383
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(9223372036854710272L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(9223372036854710272L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.listIterator();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range2 = Range.ofLength(9223372036854710272L);
      linkedList1.push(range2);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.push(range2);
      linkedList2.add(range1);
      linkedList0.add(range0);
      linkedList1.stream();
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      Long long0 = new Long(9223372036854710272L);
      Long long1 = new Long((-21L));
      Object object1 = new Object();
      Integer integer0 = new Integer(4);
      range2.equals(integer0);
      range2.equals((Object) null);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.733505760756046
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList0.stream();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775692L, (-1776L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1777 would make range [9223372036854775692 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.5249242146772444
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = 887L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      long long1 = (-347L);
      Range.of((-2801L), (-347L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.382886531149798
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.intersects(range0);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9944L, 281L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3390309450565465
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      range_Builder1.expandBegin(2441L);
      range_Builder1.shift(9223372036854775807L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854710275 would make range [9223372036854773366 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3051895766672246
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = (-2073L);
      long long1 = 65535L;
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.ofLength(1L);
      range1.startsBefore(range0);
      range1.intersects(range0);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("23N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.23N
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.5278950559807756
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(2441L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder4.shift((-1211L));
      Range.Builder range_Builder5 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder6 = new Range.Builder();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.6640429960803935
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder2.expandBegin(2509L);
      assertSame(range0, range1);
      
      Range.of(9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1369L, 2509L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=4.008512407792742
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.shift(125L);
      range_Builder1.copy();
      range_Builder1.expandBegin(2339L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder3.expandBegin(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
      Range range3 = Range.of((-2147483648L));
      range3.intersection(range2);
      long long0 = 4294967295L;
      Range.of(4294967295L, 4294967295L);
      range0.complement(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("-ThZB{6UPRPl.6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.-ThZB{6UPRPl.6
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=4.041439453120082
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range1.intersection(range0);
      range1.equals(range2);
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 1079L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder1.expandBegin(1L);
      Range.of(range_CoordinateSystem1, 1079L, 4062L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = range1.intersection(range2);
      range0.getEnd();
      range3.getEnd();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("byte array can not be null", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse byte array can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1181988436640466
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.ofLength(65535L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range.ofLength(2403L);
      Range.CoordinateSystem.values();
      Long long0 = new Long(2636L);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("YP1_rX3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.YP1_rX3
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.9601172417330948
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = 2403L;
      Range range0 = Range.of(2403L, 65535L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range1 = Range.of((-1L), (-1L));
      Object object1 = new Object();
      range1.isSubRangeOf(range0);
      Range range2 = Range.of(2403L);
      range0.intersection(range1);
      range2.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 9223372034707292158L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("unable to mkdirs for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.unable to mkdirs for 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.5789674348993934
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-1L), 9223372036854775787L);
      Object object2 = new Object();
      Long long0 = new Long(2403L);
      Object object3 = new Object();
      Range range0 = Range.of(1L, 9223372036854775787L);
      Object object4 = new Object();
      range0.equals("0B");
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("gc@G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.gc@G
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.486431594146561
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.push(range0);
      linkedList1.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      linkedList1.stream();
      Long long0 = new Long((-9223372036854775808L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.7686635524137375
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(21L, 21L);
      range0.getLength();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Comparators.values();
      Range range1 = Range.of(1L, 21L);
      range0.complement(range0);
      range1.split(21L);
      Range.of(1L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(617L, (-3436L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.8790410176000885
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 32767L;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(32767L, 32767L);
      range0.intersects(range1);
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      linkedList2.add(range0);
      linkedList0.stream();
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("bitset can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.bitset can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=4.085235665872499
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-7053L));
      long long0 = 9223372036854710272L;
      Range range1 = Range.of(9223372036854710272L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range1);
      range0.isSubRangeOf(range1);
      linkedList0.parallelStream();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-1044L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 346L, (-1044L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.75787063830931
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.of((-1594L), 116L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.ofLength(2147483647L);
      Range range0 = Range.of(1762L, 2147483647L);
      Object object2 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.7897073185329133
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(174L);
      Range range1 = Range.of(range_CoordinateSystem0, 174L, 255L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.ofLength(1L);
      range0.toString();
      Range range3 = Range.ofLength(174L);
      range2.isSubRangeOf(range0);
      Range.of(range_CoordinateSystem0, 174L, 255L);
      Range range4 = Range.parseRange("[ 174 .. 174 ]/0B", range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range3.complement(range4);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.9472334475796407
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range range1 = Range.of(1L, 1L);
      range0.getLength();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Comparators.values();
      Range range2 = Range.of((-771L), 1L);
      range0.complement(range1);
      range2.split(1L);
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
      Range.of(1L);
      range1.intersection(range0);
      Range.of((-771L), (-771L));
      range2.complement(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.718168176694822
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range0.intersects(range2);
      boolean boolean1 = range0.endsBefore(range1);
      assertTrue(boolean1 == boolean0);
      
      range1.complement(range2);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.6236200263152307
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-1594L), (-1594L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      long long0 = (-259L);
      Range range1 = Range.of((-259L));
      range0.intersects(range1);
      Range.Comparators.values();
      range1.intersects(range0);
      Range.CoordinateSystem.values();
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
      long long1 = (-2147483648L);
      Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.0646924500665085
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      long long0 = 65535L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.450681401235421
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder();
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      range_Builder2.expandBegin(2509L);
      Range range2 = Range.of((-128L));
      assertFalse(range2.isEmpty());
      
      Range range3 = range_Builder3.build();
      assertSame(range3, range1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.8596220163082795
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(65536L, 65536L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList1.add(range0);
      linkedList0.stream();
      linkedList0.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>(linkedList1);
      linkedList2.add(range0);
      Range range1 = Range.of(4070L);
      Range.of((-32768L));
      range0.intersection(range1);
      Range.of(1099L, 2415L);
      // Undeclared exception!
      try { 
        Range.of(790L, (-871L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.8640267267056094
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-1594L), 116L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.ofLength(2147483647L);
      Object object2 = new Object();
      range1.equals(object2);
      Range range2 = range1.intersection(range0);
      Object object3 = new Object();
      range2.equals(object3);
      assertFalse(range2.isEmpty());
      
      Object object4 = new Object();
      Range.of(1432L, 1432L);
      range1.equals((Object) null);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.8176546614746445
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(21L);
      long long0 = 127L;
      Range range1 = Range.of(127L);
      Object object0 = new Object();
      long long1 = 346L;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      linkedList0.add(range1);
      linkedList0.stream();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 21L, (-1595L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.5337924088759936
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(2403L, 65535L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-1L), (-1L));
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.of(2403L, 2147483646L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.7335185548168384
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-1594L), (-1594L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.clone();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      Range range1 = Range.of((-259L));
      range0.startsBefore(range1);
      Range.Comparators.values();
      range1.intersects(range0);
      Range.of((-1594L));
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-850L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -850 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.852022417700207
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder0.shift((-2062L));
      range_Builder2.expandBegin(2509L);
      Range.of((-128L));
      Range range2 = range0.intersection(range1);
      boolean boolean0 = range2.equals(range1);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-128L), 2509L);
      range1.complement(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.6725881056980056
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.expandBegin(4294967295L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder1.expandBegin(4294967295L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.ofLength(4294967295L);
      Object object0 = new Object();
      Long long0 = new Long(4294967295L);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("+ig&t.4a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.+ig&t.4a
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.709281389477431
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder1.copy();
      range_Builder1.expandBegin(2339L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      range_Builder4.expandBegin(2147483647L);
      range_Builder4.expandBegin(2147483647L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      Range.CoordinateSystem.values();
      Long long0 = new Long(2147483647L);
      Range.of(2147483647L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("file can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.file can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.690959625530023
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList0.stream();
      linkedList0.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>(linkedList1);
      range0.startsBefore(range0);
      range0.complement(range0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-2057L);
      Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-2057L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854710269L, (-259L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.966038512992888
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.expandBegin(2441L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder0.shift(2441L);
      range_Builder0.shift(2441L);
      Range range1 = range_Builder4.build();
      range_Builder4.shift(2403L);
      Range.Builder range_Builder5 = new Range.Builder();
      Range.Builder range_Builder6 = new Range.Builder(range_Builder4);
      Range.Builder range_Builder7 = new Range.Builder(range_Builder6);
      range0.equals(range_Builder4);
      assertSame(range0, range1);
      assertTrue(range0.isEmpty());
      
      Range range2 = Range.ofLength(2403L);
      Object object0 = new Object();
      Range.of((-32768L), 32767L);
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=4.0127648536896405
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      range_Builder1.expandBegin(2441L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      List<Range> list0 = range0.split(2147483647L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>(list0);
      linkedList0.add(range0);
      Range range1 = Range.of((-1558L));
      Range range2 = Range.of(4201L);
      Range range3 = range1.intersection(range2);
      Range.of(0L, 2441L);
      Range.of((-1L), 790L);
      range2.complement(range3);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.6984775668142698
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      range_Builder1.expandBegin(2441L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        range_Builder2.contractEnd(2441L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.7397736451122605
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-1594L), 116L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      range0.intersection(range0);
      Object object3 = new Object();
      Range.of(1432L, 1432L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("]PRJ_&_l-WcL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ]PRJ_&_l-WcL into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-409L), 2317L);
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(2317L);
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Long long1 = new Long((-386L));
      assertEquals((-386L), (long)long1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.ofLength(32767L);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.354100214318228
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      linkedList0.add(range0);
      linkedList0.add(range0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.9071381849602944
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 887L;
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long1 = 776L;
      Range range0 = Range.ofLength(887L);
      linkedList0.push(range0);
      linkedList0.add(range0);
      linkedList0.stream();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList1.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 887L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=4.0588835963828265
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-7053L));
      Range range1 = Range.of(9223372036854710272L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range1);
      linkedList0.add(range1);
      linkedList0.stream();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
      Range range2 = Range.of((-7053L));
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(3034L, (-7053L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.7618089220973743
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.shift(125L);
      range_Builder1.copy();
      range_Builder1.expandBegin(2339L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder3.expandBegin(2147483647L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(450L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range1.equals("file can not be null");
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("UTF-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.UTF-8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.733422986969812
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.shift(125L);
      range_Builder1.copy();
      range_Builder1.expandBegin(2339L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder3.expandBegin(2147483647L);
      range_Builder3.expandBegin(2147483647L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range.CoordinateSystem.values();
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(450L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range1.intersects(range1);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("UTF-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.UTF-8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.5391377149194216
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 4371L;
      Range range0 = Range.of((-4043L), 4371L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.isSubRangeOf(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range0.complementFrom(list0);
      long long1 = (-195L);
      Long long2 = new Long((-195L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.945700752237241
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.shift(139L);
      range_Builder1.copy();
      range_Builder1.expandBegin(2339L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range2 = range_Builder0.build();
      range1.intersection(range0);
      range2.isSubRangeOf(range1);
      long long0 = (-1561L);
      Range.of((-1561L));
      long long1 = (-128L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.135617821725798
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.iterator();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.282784501919476
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-128L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-753L), (-753L));
      range0.equals("53");
      // Undeclared exception!
      try { 
        Range.parseRange("53", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 53 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.56728176355572
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-1594L), (-1594L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList linkedList1 = new LinkedList<Object>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      linkedList3.add(range0);
      Range range1 = Range.of((-259L));
      range0.isEmpty();
      Range.Comparators.values();
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of((-259L), (-1594L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.613358332539524
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long long0 = (-7053L);
      Range range0 = Range.of((-7053L));
      long long1 = 9223372036854710272L;
      Range range1 = Range.of(9223372036854710272L);
      range1.isSubRangeOf(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.endsBefore(range1);
      long long2 = 4294967295L;
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 9982L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.409219584492206
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 444L, 65535L);
      range_Builder0.shift(2163L);
      Range range0 = Range.of((-2947L));
      range0.getEnd();
      String string0 = "{M8Rr9`T-epay";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("{M8Rr9`T-epay");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.{M8Rr9`T-epay
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-2938L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2937L), long0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.6094636223686933
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(1209L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(496L, 496L);
      Object object0 = new Object();
      Long long0 = new Long(496L);
      Object object1 = new Object();
      Range.Comparators.valueOf("LONGEST_TO_SHORTEST");
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      long long0 = (-1251L);
      range_Builder0.shift((-1251L));
      long long1 = 255L;
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-333L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.727888321446231
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      range_Builder1.expandBegin(2441L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range range1 = range_Builder3.build();
      range_Builder0.expandBegin(174L);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder2.shift((-2798L));
      Range.Builder range_Builder5 = new Range.Builder();
      Range.Builder range_Builder6 = new Range.Builder(range_Builder2);
      range_Builder1.shift(9223372036854775787L);
      Range.CoordinateSystem.values();
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
      Range range2 = Range.of(9223372036854775787L);
      range0.intersection(range1);
      List<Range> list0 = range2.complement(range1);
      assertTrue(range1.isEmpty());
      assertSame(range1, range0);
      assertTrue(list0.contains(range2));
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.877904470543541
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = 102L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 887L, 4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      linkedList0.add(range0);
      linkedList0.stream();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      range0.getEnd();
      Range.CoordinateSystem.values();
      long long1 = (-32768L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1245L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.8247201557353465
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1912L), 0L);
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      range_Builder1.shift(0L);
      range_Builder1.contractBegin(0L);
      range0.getBegin();
      range_Builder1.expandEnd(0L);
      range_Builder1.expandEnd(0L);
      range_Builder1.contractEnd(0L);
      Range range1 = range0.asRange();
      range_CoordinateSystem0.toString();
      range1.endsBefore(range0);
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.split((-1912L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.5598355032065174
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Range range1 = Range.of((-836L), 1071L);
      range1.getBegin(range_CoordinateSystem0);
      Object object3 = new Object();
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.881416823949635
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-1594L), (-89L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList1.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      range0.isEmpty();
      range0.complementFrom(linkedList2);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-89L), (-89L));
      Range range2 = Range.of((-224L));
      range2.isEmpty();
      Range.Comparators.values();
      range0.isSubRangeOf(range2);
      Range range3 = Range.of((-224L), (-89L));
      Range.Comparators.values();
      boolean boolean0 = range1.endsBefore(range3);
      assertFalse(boolean0);
      
      List<Range> list0 = range3.complement(range2);
      assertFalse(list0.contains(range3));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.849555054218213
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = 65535L;
      Range range1 = Range.of(2002L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      linkedList0.add(range1);
      linkedList0.stream();
      linkedList0.add(range1);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854773393L, 2002L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.7874115682158336
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(1334L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList1.stream();
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
      range0.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(968L, (-640L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.641009466515949
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.copy();
      long long0 = 2339L;
      range_Builder2.expandBegin(2339L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder0.build();
      range_Builder2.expandBegin(2147483647L);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.9552422366709767
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(3143L, 3143L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList0.stream();
      linkedList0.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>(linkedList1);
      range0.endsBefore(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      Range range1 = Range.of(3143L);
      range1.intersection(range0);
      Range.of((-1780L), 3143L);
      Range.of(3143L, 3143L);
      range1.complement(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.6644504299961516
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-1L), 9223372036854775787L);
      Object object2 = new Object();
      Long long0 = new Long(2403L);
      Object object3 = new Object();
      Range range0 = Range.of(1L, 9223372036854775787L);
      Object object4 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object5 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("gc@G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.gc@G
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.4561155024908885
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(2415L, 65535L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      range0.getBegin();
      Range.ofLength(2415L);
      long long0 = 429L;
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 1008L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.9103013152505754
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      range_Builder1.expandBegin(2441L);
      Range.Builder range_Builder2 = new Range.Builder(65535L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range range1 = range_Builder3.build();
      range_Builder0.expandBegin(174L);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder2.shift((-2811L));
      Range.Builder range_Builder5 = new Range.Builder();
      Range.Builder range_Builder6 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder7 = range_Builder1.shift(9223372036854775787L);
      range_Builder7.contractBegin(32L);
      Range.of(174L, 2048L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-322L), 32L);
      long long0 = range2.getBegin();
      assertEquals((-322L), long0);
      
      Integer integer0 = new Integer(517);
      boolean boolean0 = range0.equals(integer0);
      assertSame(range0, range1);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, (-2270L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=4.0367057544724965
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(1836L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, (-2882L), (-2882L));
      range0.intersection(range1);
      Range.of(1836L);
      Range range2 = Range.of((-2882L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.of(1836L, (-2882L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.5255164146037217
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(2444L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(1182L);
      Long.compareUnsigned(1182L, 9223372036854775787L);
      Long.getLong("zg11q6RchC:^ {a", long0);
      Long.toUnsignedString(1182L);
      Object object3 = new Object();
      Range range1 = Range.of(1116L, 2444L);
      assertNotSame(range1, range0);
      
      Range range2 = Range.of(255L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.4864315941465613
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList0.stream();
      linkedList0.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>(linkedList1);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.201383418854485
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.expandEnd(4294967295L);
      Long long0 = new Long((-505L));
      Long long1 = new Long(481L);
      Object object0 = new Object();
      range0.intersects(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.7757931076762232
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4584L), (-4584L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 3977L, 3977L);
      range0.intersection(range1);
      range0.getLength();
      // Undeclared exception!
      try { 
        range0.split((-4584L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3167L), 282L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(1L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.510673859773301
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = 732L;
      Range.Builder range_Builder0 = new Range.Builder(732L, 732L);
      range_Builder0.build();
      long long1 = 4363L;
      range_Builder0.expandBegin(4363L);
      range_Builder0.contractBegin(4363L);
      Range.CoordinateSystem.values();
      Range.ofLength(4363L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(732L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.906530749083248
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long long0 = 9223372036854710272L;
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.push(range0);
      linkedList0.add(range0);
      linkedList0.stream();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 4294967295L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-301L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.8023259221315167
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-1594L), (-1594L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.clone();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      linkedList2.stream();
      linkedList0.add(range0);
      linkedList1.add(range0);
      Range.CoordinateSystem.values();
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
      Range range1 = Range.of(4294967295L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of((-128L), (-1594L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.910956396112609
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList0.stream();
      linkedList0.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>(linkedList1);
      linkedList2.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      Range range1 = Range.of((-3416L));
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(3034L, (-650L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.9142257945609438
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-154L));
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.push(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      linkedList1.stream();
      Range.CoordinateSystem.values();
      Range range1 = Range.of(2798L);
      range1.intersection(range0);
      Range range2 = Range.of((-154L), (-154L));
      range2.complement(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.6453713439123354
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList0.stream();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      Range.CoordinateSystem.values();
      Range range1 = Range.of((-9223372036854775808L));
      range1.intersection(range0);
      Range range2 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      range1.complement(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.851117749853617
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList0.stream();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      linkedList2.stream();
      Range.CoordinateSystem.values();
      Range.of((-9223372036854775808L));
      Range range1 = Range.of((-32768L));
      range1.intersection(range0);
      Range.of((-2090L), (-2090L));
      Range range2 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      range1.complement(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.7644127983994893
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      range_Builder1.expandBegin(2441L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range range1 = range_Builder3.build();
      range_Builder0.expandBegin(174L);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder2.shift((-2798L));
      Range.Builder range_Builder5 = new Range.Builder();
      Range.Builder range_Builder6 = new Range.Builder(range_Builder2);
      range_Builder1.shift(9223372036854775787L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Range.of(174L);
      Range range3 = Range.of(65535L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.15350808408238
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774709L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      long long1 = range0.getLength();
      assertEquals(9223372036854774709L, long1);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.765412070026897
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.expandBegin(0L);
      Range.of(283L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1369L, 1369L);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.998487097854019
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.of(2403L, 65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.stream();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.clear();
      linkedList1.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>(linkedList0);
      linkedList1.add(range0);
      Range range1 = Range.of(1617L, 4294967295L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-4194L), (-2057L));
      // Undeclared exception!
      try { 
        Range.of(0L, (-259L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.6361275195877707
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
      
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.expandBegin(2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder0.expandBegin(2147483647L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      range_Builder2.expandBegin(255L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483648L, long0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.64539536996292
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-1594L), (-1594L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1594L), (-1594L));
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      linkedList2.push(range0);
      LinkedList<Range> linkedList4 = new LinkedList<Range>();
      linkedList4.add(range0);
      linkedList4.stream();
      long long0 = 311L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1971L, 2147483646L);
      linkedList4.add(range0);
      range1.complementFrom(linkedList3);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem3, 140L, 2147483646L);
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("k-=R5I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.k-=R5I
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.6033263656199757
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList0.stream();
      Range.CoordinateSystem.values();
      Range range1 = Range.of(9223372036854775807L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range3);
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      
      Range.Comparators.values();
      List<Range> list1 = range3.split(9223372036854775807L);
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
      //  // Unstable assertion: assertSame(range3, range2);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.487993152678633
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = 2403L;
      Range.of(2403L, 65535L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of((-1L), (-1L));
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.5808298671314693
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      range_Builder1.expandBegin(2441L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder3.build();
      range_Builder0.expandBegin(174L);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder2.shift((-2798L));
      Range.Builder range_Builder5 = new Range.Builder();
      Range.Builder range_Builder6 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder7 = range_Builder1.shift(9223372036854775787L);
      range_Builder7.contractBegin(32L);
      range_Builder7.expandEnd(9223372036854775807L);
      Range.Builder range_Builder8 = range_Builder0.expandEnd((-2487L));
      range_Builder0.expandBegin((-2504L));
      range_Builder7.shift((-23L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range_Builder8.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.3242198972611243
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder((-2062L), (-2062L));
      long long0 = 2509L;
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-2062L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.5061989727758878
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(1182L);
      Long.getLong("zg11q6RchC:^ {a", long0);
      Long.toUnsignedString(1182L);
      Object object3 = new Object();
      Range.of(1182L, 65535L);
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3977L, 3977L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.908547693116493
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range range1 = Range.of((-1199L));
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range2.toString(range_CoordinateSystem0);
      Range.ofLength(1L);
      range0.toString();
      Range range3 = Range.ofLength(1L);
      range0.isSubRangeOf(range3);
      Range.of(214L);
      range0.startsBefore(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("23N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.23N
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.524127803273672
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-1L), 9223372036854775787L);
      Object object2 = new Object();
      Long long0 = new Long(2382L);
      Object object3 = new Object();
      Object object4 = new Object();
      Range.of(2382L, 9223372036854775787L);
      Object object5 = new Object();
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.2007670511016713
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-128L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-753L), (-753L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-753L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.66448958045846
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder2.expandBegin(2509L);
      Range range0 = Range.of((-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.703309868074819
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      range_Builder1.expandBegin(2441L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder3.shift((-1211L));
      assertTrue(range0.isEmpty());
      
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder6 = range_Builder1.shift(9223372036854775787L);
      range_Builder6.contractBegin(32L);
      range_Builder6.expandEnd(9223372036854775807L);
      range_Builder0.expandBegin((-2504L));
      Range range1 = Range.of(32L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.505201713387332
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-832L));
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.532671954642706
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.push(range0);
      linkedList1.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
