/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 00:10:37 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import org.apache.xerces.jaxp.SAXParserImpl;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.NodeType;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMCDATA;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMProcessingInstruction;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultProcessingInstruction;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.IndexedElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jaxen.SimpleVariableContext;
import org.jaxen.VariableContext;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("$OGG%!]CNfQ!WP,BNk$");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-88);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"$OGG%!]CNFQ!WP,BNK$\". Nested exception: Invalid encoding name \"$OGG%!]CNFQ!WP,BNK$\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.349742765197841
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/y|3h>.U]ZwxPl0y|3h>.U]ZwxPl");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "//tmp/`~_e5J~},6M+40`~_e5J~},6M+4/tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(/1EnZPNk}l7P1_\" 0.tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "-'");
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      MockFile mockFile0 = new MockFile("`~_e5J~},6M+4");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      File file0 = MockFile.createTempFile("y|3h>.U]ZwxPl", "y|3h>.U]ZwxPl");
      FileSystemHandling.createFolder(evoSuiteFile0);
      file0.getCanonicalPath();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "`~_e5J~},6M+4");
      URI uRI0 = file0.toURI();
      MockFile mockFile1 = new MockFile(uRI0);
      sAXReader0.setEncoding("//tmp/tmp/y%3h>.U]ZwxPc0y%3h>.U]ZwxPc0/tmp/y%3h>.U]ZwxPc0y%3h>.U]ZwxPc");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"//TMP/TMP/Y%3H>.U]ZWXPC0Y%3H>.U]ZWXPC0/TMP/Y%3H>.U]ZWXPC0Y%3H>.U]ZWXPC\". Nested exception: Invalid encoding name \"//TMP/TMP/Y%3H>.U]ZWXPC0Y%3H>.U]ZWXPC0/TMP/Y%3H>.U]ZWXPC0Y%3H>.U]ZWXPC\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("<!DOCTYPE ");
      StringReader stringReader0 = new StringReader(" : ");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.754627133386218
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      defaultDocumentFactory0.createElement("v2i\"aN'U89Dm'?NCT", "");
      sAXReader0.setEncoding("v2i\"aN'U89Dm'?NCT");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      sAXReader0.getXMLFilter();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setEntityResolver(sAXContentHandler0);
      EntityResolver entityResolver0 = sAXReader0.getEntityResolver();
      sAXReader0.setEntityResolver(entityResolver0);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "http://xml.org/sax/features/namespaces";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDefaultHandler(pruningDispatchHandler0);
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      pruningDispatchHandler1.removeHandler("//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(");
      sAXReader0.addHandler("http://xml.org/sax/features/namespaces", (ElementHandler) null);
      sAXReader0.isValidating();
      String string1 = "//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(";
      try { 
        sAXReader0.setProperty("//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(", (Object) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4197646972089735
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(", (Namespace) null);
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      QName.get("//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(", "//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(");
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      sAXReader0.getXMLReader();
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.createContentHandler(xMLFilterImpl0);
      String string0 = "";
      String string1 = "";
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/pEz{SO,T&X7trJ(/pEz{SO,T&X7trJ(1W-_K<q`Dk%md@$");
      try { 
        sAXReader0.read((Reader) stringReader1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3346959524909847
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kcxg1");
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.jaxen.pattern.NameTest");
      sAXReader_SAXEntityResolver0.resolveEntity("VQ", "kcxg1");
      sAXReader0.setEntityResolver(sAXReader_SAXEntityResolver0);
      StringReader stringReader0 = new StringReader(" : ");
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'B';
      charArray0[2] = 'G';
      charArray0[3] = 'I';
      charArray0[4] = '~';
      charArray0[5] = 'S';
      charArray0[6] = ':';
      charArray0[7] = 's';
      stringReader0.read(charArray0);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      NamespaceStack namespaceStack1 = new NamespaceStack(documentFactory0);
      namespaceStack1.getAttributeQName("//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(", "", "");
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setFeature("http://xml.org/sax/features/validation", false);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4533877862797624
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream1);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(pushbackInputStream0, sequenceInputStream1);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.available();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration1);
      String string0 = null;
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4328450228196594
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      QName qName0 = namespaceStack0.getAttributeQName("v^XEnC>iyuxjfSy7~l}", "v^XEnC>iyuxjfSy7~l}", "v^XEnC>iyuxjfSy7~l}");
      qName0.getQualifiedName();
      MockFile mockFile0 = new MockFile("v^XEnC>iyuxjfSy7~l}");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.configureReader(xMLFilterImpl2, sAXContentHandler0);
      sAXReader0.setMergeAdjacentText(false);
      SAXReader sAXReader1 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      xMLFilterImpl3.getErrorHandler();
      sAXReader1.setErrorHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl5 = new XMLFilterImpl(xMLFilterImpl1);
      InputSource inputSource0 = new InputSource();
      try { 
        sAXReader1.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.466334879769807
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(", (Namespace) null);
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      SAXParserImpl.JAXPSAXParser sAXParserImpl_JAXPSAXParser0 = (SAXParserImpl.JAXPSAXParser)sAXReader0.getXMLReader();
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.createContentHandler(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(sAXParserImpl_JAXPSAXParser0);
      parserAdapter0.getContentHandler();
      sAXReader0.setXMLReader(xMLFilterImpl0);
      String string0 = "";
      // Undeclared exception!
      try { 
        sAXReader0.read(".%WW\"P&-5^>{");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/y|3h>.U]ZwxPl0y|3h>.U]ZwxPl");
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertSame(documentFactory0, defaultDocumentFactory0);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory1.getQNames();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createElement("//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(", ";_~C.\"7~}WLz");
      defaultDocumentFactory0.createDocument("0 d$>eD!cAH v@Zn|6*");
      defaultDocumentFactory2.createElement("//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory4.createElement((QName) null);
      defaultDocumentFactory1.createEntity("jb|`PvLd)E5Xs", "oH");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      defaultDocumentFactory0.setXPathNamespaceURIs(hashMap1);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory1, true);
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4421607022717833
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("2");
      boolean boolean0 = true;
      QName.get("//tmp/tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(0[ prefix: ", "+GR;<]}FD}NI{Jd");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.createContentHandler(xMLReader0);
      StringReader stringReader0 = new StringReader("2");
      String string0 = "N*4j\"3";
      StringReader stringReader1 = new StringReader("N*4j\"3");
      try { 
        sAXReader0.read((Reader) stringReader1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createXMLReader();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      DOMDocument dOMDocument0 = new DOMDocument();
      assertEquals((short)9, dOMDocument0.getNodeType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DocumentFactory documentFactory1 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory1);
      NamespaceStack namespaceStack1 = new NamespaceStack(documentFactory0);
      namespaceStack1.toString();
      namespaceStack1.getAttributeQName("//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(", "^v\"0fm3", "http://xml.org/sax/features/validation");
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream1);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream2);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(bufferedInputStream1, bufferedInputStream0);
      sequenceInputStream1.available();
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration1);
      Enumeration<ByteArrayInputStream> enumeration2 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)30;
      sequenceInputStream0.read(byteArray0, 1750, 1);
      DOMDocument dOMDocument0 = new DOMDocument();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(sequenceInputStream4, sequenceInputStream3);
      sequenceInputStream6.close();
      SequenceInputStream sequenceInputStream7 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream6);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.resolveEntity("`~_e5J~},6M+4", "`~_e5J~},6M+4");
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.275805525146526
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      String string0 = " of document ";
      String string1 = "";
      InputSource inputSource0 = new InputSource("");
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.278600407264681
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream1);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream1);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream1);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(pushbackInputStream1, pushbackInputStream1);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration1);
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(sequenceInputStream3, sequenceInputStream0);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration2);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream7 = new SequenceInputStream(enumeration3);
      InputSource inputSource0 = new InputSource();
      StringReader stringReader0 = new StringReader("]ES`o/O");
      inputSource0.setCharacterStream(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      sAXReader0.installXMLFilter((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("`~_e5J~},6M+4");
      sAXReader_SAXEntityResolver0.resolveEntity("", "`~_e5J~},6M+4");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = Namespace.get("//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(", "//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(");
      defaultDocumentFactory0.createQName("//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(", namespace0);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory3.getQNames();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory4.createDocument((Element) null);
      defaultDocumentFactory0.createQName("8=v D3WqHG,");
      defaultDocumentFactory0.createElement("o.VHEJ2)I4@", "o.VHEJ2)I4@");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      defaultDocumentFactory4.createDocType("//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(", "/", "o.VHEJ2)I4@");
      defaultDocumentFactory3.createComment("KsSNu_P$");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      defaultDocumentFactory4.setXPathNamespaceURIs(hashMap0);
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory3, true);
      Object object0 = new Object();
      try { 
        sAXReader0.setProperty("/", "/");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '/' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      InputSource inputSource0 = new InputSource(" of document ");
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("k=xBGVnc~b~a&6*", "//tmp/,Qk)tN#`0,Qk)tN#`");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setDocumentFactory(documentFactory0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("lShSo^TTMX^9Vo.");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 19);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.getEncoding();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createElement("/", "//tmp/tmp/org.jaxen.expr.iter.IterableParentAxis0org.jaxen.expr.iter.IterableParentAxis0");
      defaultDocumentFactory0.createDocument("og.j)xen.\"xpr.DefaultminaryExpr");
      defaultDocumentFactory2.createElement("//tmp/tmp/org.jaxen.expr.iter.IterableParentAxis0org.jaxen.expr.iter.IterableParentAxis0");
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement("//tmp/tmp/org.jaxen.expr.iter.IterableParentAxis0org.jaxen.expr.iter.IterableParentAxis0", object0);
      beanElement0.element("//tmp/tmp/`~_e5J~},6M+40`~_e5J~},6M+4/tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(/1EnZPNk}l7P1_\" 0.tmp0/tmp/`~_e5J~},6M+40`~_e5J~},6M+4/tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(/1EnZPNk}l7P1_\" 0.tmp");
      defaultDocumentFactory1.createAttribute((Element) null, "/", "//tmp/tmp/org.jaxen.expr.iter.IterableParentAxis0org.jaxen.expr.iter.IterableParentAxis0");
      defaultDocumentFactory0.createAttribute((Element) beanElement0, "pB 4BC-(7", "//tmp/tmp/org.jaxen.expr.iter.IterableParentAxis0org.jaxen.expr.iter.IterableParentAxis0");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory2, true);
      StringReader stringReader0 = new StringReader("//tmp/tmp/org.jaxen.expr.iter.IterableParentAxis0org.jaxen.expr.iter.IterableParentAxis0");
      try { 
        sAXReader0.read((Reader) stringReader0, "/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "//tmp/xOYm?^t\"lt\"frS,Bn@0v0f\\&X4T{E";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/xOYm?^t\"lt\"frS,Bn@0v0f&X4T{E");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/xOYm?^t\"lt\"frS,Bn@0v0f&X4T{E", ":x~L@");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/xOYm?^t\"lt\"frS,Bn@0v0f&X4T{E", "//tmp/xOYm?^t\"lt\"frS,Bn@0v0f&X4T{E");
      String string1 = "xO/m?^t\"lt\"f ],Bn@";
      URI uRI0 = MockURI.aFTPURI;
      try { 
        MockURI.URI("//tmp/xOYm?^t\"lt\"frS,Bn@0v0f&X4T{E");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in query at index 11: //tmp/xOYm?^t\"lt\"frS,Bn@0v0f&X4T{E
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.337271798865072
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      SAXReader sAXReader1 = new SAXReader();
      StringReader stringReader0 = new StringReader("H8eG{@]5p&n$@ia[");
      try { 
        sAXReader1.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory1.getQNames();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory3.createElement("/", "//tmp/tmp/org.jaxen.expr.iter.IterableParentAxis0org.jaxen.expr.iter.IterableParentAxis0");
      DefaultDocument defaultDocument0 = new DefaultDocument();
      IndexedElement indexedElement0 = new IndexedElement("//tmp/y|3h>.U]ZwxPl0gM<nR#u,(5]L3q= k/tmp/tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(0[ prefix: 0/tmp/tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(0[ prefix: ");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement("//tmp/tmp/org.jaxen.expr.iter.IterableParentAxis0org.jaxen.expr.iter.IterableParentAxis0", object0);
      beanElement0.element("//tmp/tmp/`~_e5J~},6M+40`~_e5J~},6M+4/tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(/1EnZPNk}l7P1_\" 0.tmp0/tmp/`~_e5J~},6M+40`~_e5J~},6M+4/tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(/1EnZPNk}l7P1_\" 0.tmp");
      BaseElement baseElement0 = new BaseElement("h^");
      String string0 = "kayfe\\G\"xFM";
      defaultDocumentFactory3.createAttribute((Element) null, "kayfeG\"xFM", "9NAUwQIxNYbU}");
      defaultDocumentFactory0.createAttribute((Element) indexedElement0, "//tmp/tmp/org.jaxen.expr.iter.IterableParentAxis0org.jaxen.expr.iter.IterableParentAxis0", "l->:'j4AJ?ih");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createDocument((Element) baseElement0);
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      StringReader stringReader0 = new StringReader("O`DK;f");
      try { 
        sAXReader0.read((Reader) stringReader0, "//tmp/7gs:,0VP])?M0k9q.R");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document //tmp/7gs:,0VP])?M0k9q.R : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream0.available();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      sequenceInputStream0.read((byte[]) null, 0, 102);
      sequenceInputStream0.skip(0);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(bufferedInputStream2);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, bufferedInputStream1);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(pushbackInputStream0, bufferedInputStream2);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration1);
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(bufferedInputStream1, pushbackInputStream0);
      Enumeration<ByteArrayInputStream> enumeration2 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration2);
      Enumeration<ByteArrayInputStream> enumeration3 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration3);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      StringReader stringReader0 = new StringReader("O`DK;f");
      try { 
        sAXReader0.read((Reader) stringReader0, "O`DK;f");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document O`DK;f : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createDefaultEntityResolver("u");
      byte[] byteArray0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 13;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 13);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(true);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.addHandler((String) null, sAXModifyElementHandler0);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SAXReader sAXReader1 = new SAXReader((String) null);
      DOMDocument dOMDocument0 = new DOMDocument();
      assertEquals(NodeType.DOCUMENT_NODE, dOMDocument0.getNodeTypeEnum());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, sequenceInputStream0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.unparsedEntityDecl("//home/ubuntu/termite/projects/62_dom4j/pEz{SO,T&X7trJ(/pEz{SO,T&X7trJ(1W-_K<q`Dk%md@$", "//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(", "//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(", "//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)61;
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.getHandler("");
      sAXReader0.addHandler("w_KF85", (ElementHandler) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)61, 3743);
      assertEquals((-54), byteArrayInputStream0.available());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.removeHandler("#.P]{:873f0IH10p*J^");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 58);
      Object object0 = new Object();
      URL uRL0 = MockURL.getFileExample();
      URI uRI0 = MockURL.toURI(uRL0);
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockURI.resolve(uRI1, uRI0);
      String string0 = "org.jaxen.saxpath.base.Token";
      String string1 = "/";
      try { 
        MockURI.URI("/", (String) null, "A", "Q^:5>D=[2o<E%Wi' 2m", "A");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: /:A?Q%5E:5%3ED=[2o%3CE%25Wi'%202m#A
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader();
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertTrue(sAXReader1.isStringInternEnabled());
      
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.471853918106659
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.getDispatchHandler();
      defaultDocumentFactory0.createElement("v2i\"aN'U89Dm'?NCT", "");
      sAXReader0.setEncoding("v2i\"aN'U89Dm'?NCT");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "X^fUCl", 2284, "X`#c>Lv", uRLStreamHandler0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setValidation(true);
      DefaultDocument defaultDocument0 = new DefaultDocument("zo%gAWB7");
      assertEquals("zo%gAWB7", defaultDocument0.getName());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U");
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction("", "0}17dEF('");
      SAXReader sAXReader1 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("*(Ug9!Zw{t ^Z]1g");
      sAXReader_SAXEntityResolver0.resolveEntity("*(Ug9!Zw{t ^Z]1g", " : ");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument();
      sAXReader0.isValidating();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.489718268386487
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("atS[", "atS[");
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createComment("atS[");
      sAXReader0.setStripWhitespaceText(false);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler("atS[");
      sAXReader0.setDefaultHandler((ElementHandler) null);
      defaultDocumentFactory0.createProcessingInstruction("XK}", "atS[");
      try { 
        sAXReader0.read("sum() requires one argument.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/sum() requires one argument. (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/sum() requires one argument. (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 58);
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      try { 
        sAXReader0.setProperty("//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(", "-'");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.3660231847196305
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Y^/G", "org.dom4j.util.DoubleNameMap", 39, "", uRLStreamHandler0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = Namespace.get("//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(", "//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(");
      defaultDocumentFactory0.createQName("//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(", namespace0);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory3.getQNames();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory3.getXPathNamespaceURIs();
      defaultDocumentFactory4.setXPathNamespaceURIs((Map<String, String>) null);
      defaultDocumentFactory0.createElement("o.VHEJ2)I4@", "o.VHEJ2)I4@");
      defaultDocumentFactory2.createDocument("/");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      defaultDocumentFactory4.setXPathNamespaceURIs(hashMap0);
      DOMDocument dOMDocument0 = new DOMDocument("/");
      InputSource inputSource0 = new InputSource();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory3, true);
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "+GR;<]}FD}NI{Jd";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("+GR;<]}FD}NI{Jd", "+GR;<]}FD}NI{Jd");
      String string1 = "xOm?^\"lt\"fS,Bn";
      String string2 = "v0f\\&XT{E";
      URI uRI0 = MockURI.aHttpURI;
      try { 
        MockURI.URI("+GR;<]}FD}NI{Jd");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 4: +GR;<]}FD}NI{Jd
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3087432950398514
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream0.available();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      sequenceInputStream0.read((byte[]) null, 0, 102);
      sequenceInputStream0.skip(0);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(bufferedInputStream2);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, bufferedInputStream1);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(pushbackInputStream0, bufferedInputStream2);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration1);
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(bufferedInputStream1, pushbackInputStream0);
      Enumeration<ByteArrayInputStream> enumeration2 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration2);
      Enumeration<ByteArrayInputStream> enumeration3 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration3);
      InputSource inputSource0 = new InputSource();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.8545607627328535
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//home/ubuntu/termite/projects/62_dom4j/8RT!/8RT!08RT!");
      sAXReader_SAXEntityResolver0.resolveEntity("`ZU|zER", "//tmp/tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(0[ prefix: ");
      sAXReader_SAXEntityResolver0.resolveEntity("", (String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("+GR;<]}FD}NI{Jd", "//home/ubuntu/termite/projects/62_dom4j/8RT!/8RT!08RT!");
      FileSystemHandling.shouldAllThrowIOExceptions();
      URI uRI0 = MockURI.aFTPURI;
      assertEquals("", uRI0.getRawPath());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Iec7Ed.RZfe))t^");
      sAXReader_SAXEntityResolver0.resolveEntity("/", "Iec7Ed.RZfe))t^");
      SAXReader sAXReader0 = new SAXReader(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.unparsedEntityDecl("B", "B", "/", "Iec7Ed.RZfe))t^");
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZZzu}rCsj");
      SAXReader sAXReader0 = new SAXReader(true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      sAXReader0.getDocumentFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 14);
      Object object0 = new Object();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      int int0 = 45;
      int int1 = 2671;
      PipedInputStream pipedInputStream2 = new PipedInputStream(2671);
      pipedInputStream0.mark(2671);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream2);
      PipedInputStream pipedInputStream3 = null;
      try {
        pipedInputStream3 = new PipedInputStream(pipedOutputStream1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory1.getQNames();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory3.getQNames();
      defaultDocumentFactory3.createElement("/", "o.VHEJ2)I4@");
      defaultDocumentFactory1.createDocument("og.j)xen.\"xpr.DefaultminaryExpr");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertNotNull(xMLReader0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createElement("http://xml.org/sax/properties/lexical-handler");
      defaultDocumentFactory0.getQNames();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.isStringInternEnabled();
      DOMDocument dOMDocument0 = new DOMDocument();
      assertNull(dOMDocument0.getNodeValue());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("`~_e5J~},6M+4");
      sAXReader_SAXEntityResolver0.resolveEntity("`~_e5J~},6M+4", "`~_e5J~},6M+4");
      sAXReader_SAXEntityResolver0.resolveEntity("", "`~_e5J~},6M+4");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getErrorHandler();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(");
      sAXReader_SAXEntityResolver0.uriPrefix = "http://xml.org/sax/properties/lexical-handler";
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getDispatchHandler();
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("http://xml.org/sax/features/namespace-prefixes");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class http://xml.org/sax/features/namespace-prefixes not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/y|3h>.U]ZwxPl0y|3h>.U]ZwxPl");
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader();
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      sAXReader0.resetHandlers();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("`~_e5J~},6M+4");
      String string0 = "";
      sAXReader_SAXEntityResolver0.resolveEntity("", "`~_e5J~},6M+4");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, (-483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3447004957129813
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "//tmp/xOYm?^t\"lt\"frS,Bn@0v0f\\&X4T{E";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/xOYm?^t\"lt\"frS,Bn@0v0f&X4T{E");
      sAXReader_SAXEntityResolver0.resolveEntity("", "//tmp/xOYm?^t\"lt\"frS,Bn@0v0f&X4T{E");
      sAXReader_SAXEntityResolver0.resolveEntity("g+z$XT*JJLyeqK~LHaF", "");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("//tmp/xOYm?^t\"lt\"frS,Bn@0v0f&X4T{E", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class //tmp/xOYm?^t\"lt\"frS,Bn@0v0f&X4T{E not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createContentHandler(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createElement("=yp@V>F!OE]u{i", "=yp@V>F!OE]u{i");
      defaultDocumentFactory1.createDocument("4!B]z!&r");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory.getInstance();
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument("//tmp/y|3h>.U]ZwxPl0pEz{SO,T&X7trJ(");
      DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory.getInstance();
      BaseElement baseElement0 = new BaseElement("");
      defaultDocumentFactory0.createAttribute((Element) baseElement0, "-'", "1m\"/4V7/nNEahO:5A");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createDocument("x+mA");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument("x+mA");
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      String string0 = "//tmp/y|3h>.U]ZwxPl0gM<nR#u,(5]L3q= k";
      InputSource inputSource0 = new InputSource("//tmp/y|3h>.U]ZwxPl0gM<nR#u,(5]L3q= k");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      String string1 = "//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(";
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      try { 
        sAXReader0.setProperty("//tmp/y|3h>.U]ZwxPl0gM<nR#u,(5]L3q= k", documentFactory0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '//tmp/y|3h>.U]ZwxPl0gM<nR#u,(5]L3q= k' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null);
      boolean boolean0 = true;
      sAXReader0.setIgnoreComments(true);
      sAXReader0.isIncludeExternalDTDDeclarations();
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory1.getQNames();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory3.createElement("/", "o.VHEJ2)I4@");
      defaultDocumentFactory1.createDocument("og.j)xen.\"xpr.DefaultminaryExpr");
      defaultDocumentFactory3.createElement("o.VHEJ2)I4@");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory4.createElement((QName) null);
      defaultDocumentFactory4.createEntity("oH", "og.j)xen.\"xpr.DefaultminaryExpr");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory3.createXPath("//tmp/org.jaxen.expr.iter.IterableParentAxis0org.jaxen.expr.iter.IterableParentAxis", (VariableContext) simpleVariableContext0);
      defaultDocumentFactory4.setXPathNamespaceURIs(hashMap0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory3, true);
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      try { 
        sAXReader0.setXMLReaderClassName("/");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class / not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStringInternEnabled(true);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.3660231847196305
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = Namespace.get("//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(", "//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(");
      defaultDocumentFactory0.createQName("//tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(", namespace0);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory3.getQNames();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      String string0 = "o.VHEJ2)I4@";
      defaultDocumentFactory0.createElement("o.VHEJ2)I4@", "o.VHEJ2)I4@");
      defaultDocumentFactory2.createDocument("/");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      defaultDocumentFactory4.setXPathNamespaceURIs(hashMap0);
      DOMDocument dOMDocument0 = new DOMDocument("/");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InputSource inputSource0 = new InputSource();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory3, true);
      sAXReader0.setEncoding("http://xml.org/sax/features/string-interning");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMCDATA dOMCDATA0 = new DOMCDATA("9 yAUShIC!Cs!k5Ug");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      StringReader stringReader0 = new StringReader("");
      Document document0 = defaultDocumentFactory0.createDocument();
      assertEquals(NodeType.DOCUMENT_NODE, document0.getNodeTypeEnum());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      bufferedInputStream0.available();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      sequenceInputStream0.skip(0);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(bufferedInputStream2);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, bufferedInputStream1);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(pushbackInputStream0, bufferedInputStream2);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration1);
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(bufferedInputStream1, pushbackInputStream0);
      Enumeration<ByteArrayInputStream> enumeration2 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration2);
      Enumeration<ByteArrayInputStream> enumeration3 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration3);
      InputSource inputSource0 = new InputSource();
      MockFile mockFile0 = new MockFile("//tmp/y|3h>.U]ZwxPl0gM<nR#u,(5]L3q= k", "//tmp/y|3h>.U]ZwxPl0gM<nR#u,(5]L3q= k");
      MockFile mockFile1 = new MockFile(mockFile0, "~T>rsD{>_g{F{tW");
      mockFile1.getCanonicalPath();
      File file0 = mockFile0.getCanonicalFile();
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      defaultDocumentFactory1.getQNames();
      BaseElement baseElement0 = new BaseElement("og.j)xen.\"xpr.DefaultminaryExpr");
      defaultDocumentFactory2.createNamespace("og.j)xen.\"xpr.DefaultminaryExpr", "og.j)xen.\"xpr.DefaultminaryExpr");
      defaultDocumentFactory1.createAttribute((Element) baseElement0, "og.j)xen.\"xpr.DefaultminaryExpr", "og.j)xen.\"xpr.DefaultminaryExpr");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createDocument("og.j)xen.\"xpr.DefaultminaryExpr");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      defaultDocumentFactory0.setXPathNamespaceURIs((Map<String, String>) null);
      defaultDocumentFactory3.createDocument((Element) baseElement0);
      InputSource inputSource0 = new InputSource();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      DefaultDocument defaultDocument1 = new DefaultDocument("og.j)xen.\"xpr.DefaultminaryExpr");
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader1.read("//tmp/fV&[0fV&[");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/fV&[0fV&[ Nested exception: no protocol: //tmp/fV&[0fV&[
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[0] = (byte)39;
      byteArray0[2] = (byte) (-88);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl1.resolveEntity("qf3:jk", "qf3:jk");
      SAXReader sAXReader0 = new SAXReader(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@79388ed4 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      bufferedInputStream0.available();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream1);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream1);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pushbackInputStream1);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream1);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(pushbackInputStream1, pushbackInputStream1);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration1);
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(sequenceInputStream3, sequenceInputStream0);
      sequenceInputStream2.available();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "[8~^moO.qxX");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/y|3h>.U]ZwxPl0y|3h>.U]ZwxPl");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "//tmp/`~_e5J},6M+40`~_e5J~},6M+4/tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(/1EnZPNk}l7P1_\" 0.mp");
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "//tmp/`~_e5J},6M+40`~_e5J~},6M+4/tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(/1EnZPNk}l7P1_\" 0.mp");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      File file0 = MockFile.createTempFile("y|3h>.U]ZwxPl", "y|3h>.U]ZwxPl");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile0);
      file0.getCanonicalPath();
      file0.getCanonicalFile();
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///tmp/y|3h>.U]ZwxPl0y|3h>.U]ZwxPl : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.3087432950398514
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream1);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream1);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pushbackInputStream1);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream1);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(pushbackInputStream1, pushbackInputStream1);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration1);
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(sequenceInputStream3, sequenceInputStream0);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream6 = new SequenceInputStream(enumeration2);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream7 = new SequenceInputStream(enumeration3);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      InputSource inputSource0 = new InputSource();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read("number");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/number (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/number (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader(false);
      Object object1 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 58);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, pipedInputStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/y|3h>.U]ZwxPl0y|3h>.U]ZwxPl");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "//tmp/`~_e5J},6M+40`~_e5J~},6M+4/tmp/`~_e5J~},6M+40pEz{SO,T&X7trJ(/1EnZPNk}l7P1_\" 0.mp");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setMergeAdjacentText(true);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      File file0 = MockFile.createTempFile("y|3h>.U]ZwxPl", "y|3h>.U]ZwxPl");
      file0.delete();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile0);
      file0.getCanonicalPath();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      assertNull(defaultDocument0.getName());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl((XMLReader) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      StringReader stringReader0 = new StringReader("");
      DefaultDocument defaultDocument0 = new DefaultDocument("");
      assertEquals(NodeType.DOCUMENT_NODE, defaultDocument0.getNodeTypeEnum());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, dataInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream1);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SAXReader sAXReader0 = new SAXReader((String) null);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "xYp87EFe8");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/xYp87EFe8 : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.setFeature("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.tree.DefaultProcessingInstruction/org.dom4j.tree.FlyweightProcessingInstruction/org.dom4j.tree.DefaultProcessingInstruction0ANY_NODE", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '//home/ubuntu/termite/projects/62_dom4j/org.dom4j.tree.DefaultProcessingInstruction/org.dom4j.tree.FlyweightProcessingInstruction/org.dom4j.tree.DefaultProcessingInstruction0ANY_NODE' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }
}
