/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 17:19:42 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4327072914612193
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getString("Q:SP</d<+Xb6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Q:SP<\\/d<+Xb6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1800243279736113
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Integer integer0 = new Integer((-732));
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      Integer.toUnsignedString((-732));
      Integer.min((-732), (-732));
      Integer.toUnsignedLong((-732));
      Integer integer1 = new Integer((-732));
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      JSONObject jSONObject1 = jSONObject0.put("HE", false);
      JSONArray jSONArray0 = jSONObject1.names();
      Boolean.logicalXor(false, false);
      Long long0 = new Long((-1392L));
      Integer integer2 = new Integer((-3837));
      Integer integer3 = new Integer((-732));
      hashMap2.put(integer2, "vo!a");
      JSONObject jSONObject2 = jSONObject0.put("uo|G)U->+", (Map) hashMap1);
      JSONObject jSONObject3 = jSONObject2.put("HE", (Map) hashMap0);
      JSONArray jSONArray1 = jSONObject2.toJSONArray(jSONArray0);
      hashMap2.replace((Integer) null, "HE", "tET $k>z]p}K");
      Long long1 = new Long((-732));
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HashMap<Boolean, JSONObject> hashMap3 = new HashMap<Boolean, JSONObject>();
      jSONObject0.toString((-732), (-732));
      Double double0 = new Double(0.0);
      jSONObject3.accumulate("4294966564", double0);
      try { 
        jSONObject1.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7070019092448188
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = new Boolean("true");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.getNames(jSONObject0);
      String string0 = "HE";
      String string1 = "lo";
      Boolean boolean2 = new Boolean("true");
      int int0 = (-3262);
      Integer integer0 = new Integer((-3262));
      Integer.min((-3262), (-3262));
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      Boolean boolean3 = Boolean.FALSE;
      hashMap1.put(boolean3, integer0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("HE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of HE
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8072180062889975
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 827;
      Integer integer0 = new Integer(827);
      Integer integer1 = new Integer(91);
      Integer.compare(91, 91);
      Integer.getInteger("isdoubleToLongBits", integer1);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      String string0 = "HE";
      Boolean boolean0 = new Boolean("lo");
      Integer integer2 = new Integer((-3262));
      hashMap0.put(boolean0, integer2);
      jSONObject0.put("HE", false);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      try { 
        jSONObject0.getJSONObject("HE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HE\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = new Integer(45);
      Integer integer1 = new Integer(45);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Long long0 = new Long((-1347L));
      Integer integer2 = new Integer(45);
      String string0 = "isvalueOf";
      hashMap1.put(integer2, "isvalueOf");
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      hashMap1.putAll(hashMap2);
      Integer.min(4, (-808));
      Boolean.valueOf(false);
      Boolean boolean0 = new Boolean((String) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.quote(",\n");
      Short short0 = new Short((short)8743);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.41890220330832
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z_9:O+\"";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("$ R", "z_9:O+\"");
      Double.sum(927.0, (-1693.642));
      JSONObject jSONObject2 = jSONObject1.put("z_9:O+\"", (Collection) null);
      jSONObject2.getString("$ R");
      jSONObject2.optBoolean("z_9:O+\"", false);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optDouble((String) null, 2775.7120933514852);
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalOr(false, false);
      Boolean.getBoolean("1/");
      JSONObject.getNames((Object) "java.lang.String@0000000003");
      Boolean.compare(false, true);
      JSONObject.getNames((Object) boolean0);
      JSONObject.quote("G@AFxCq:/Df^8$s");
      JSONObject.getNames((Object) "java.lang.String@0000000003");
      jSONObject2.optLong("G@AFxCq:/Df^8$s", (-3522L));
      Boolean boolean1 = Boolean.valueOf(false);
      JSONObject.valueToString(boolean1);
      jSONObject2.optJSONArray("z_9:O+\"");
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.463108890081922
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Double double0 = new Double(0.0);
      hashMap0.put(double0, (Boolean) null);
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject(integer1);
      jSONObject0.optInt(" UUv", (-732));
      jSONObject0.putOpt("", hashMap0);
      Double.sum(13, (-1.0));
      Integer.max((-732), 40);
      jSONObject0.put(">(Cum7VK7L8h$XWHZz", (Collection) null);
      jSONObject0.getString("");
      jSONObject0.optBoolean(">(Cum7VK7L8h$XWHZz", false);
      JSONObject.doubleToString(0.0);
      Boolean.valueOf(false);
      Boolean.compare(false, false);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.valueToString(hashMap0, 40, 13);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("isvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of isvalueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9015033445338534
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "";
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer((-732));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Integer.toUnsignedString((-732));
      Integer.getInteger("");
      Integer.min((-732), (-732));
      Integer.toUnsignedLong((-732));
      Integer integer2 = new Integer((-732));
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Boolean boolean0 = new Boolean("");
      hashMap0.put(boolean0, integer1);
      JSONObject jSONObject1 = jSONObject0.put("HE", false);
      JSONArray jSONArray0 = jSONObject1.names();
      Boolean.logicalXor(false, false);
      Long long0 = new Long((-1397L));
      Integer integer3 = new Integer((-3837));
      Integer integer4 = new Integer((-732));
      hashMap0.put(boolean0, integer4);
      hashMap1.put(integer3, "va");
      JSONObject jSONObject2 = jSONObject0.put("uo|G)U->+", (Map) hashMap0);
      jSONObject2.toJSONArray(jSONArray0);
      hashMap1.replace((Integer) null, "HE", "tET $k>z]p}K");
      Long long1 = new Long((-732));
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      try { 
        jSONObject1.getDouble("HE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HE\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3582892383036
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("m$lon`@OKE2XBRd", 2128);
      Boolean boolean0 = new Boolean((String) null);
      JSONObject jSONObject2 = jSONObject0.putOpt((String) null, boolean0);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean1 = Boolean.TRUE;
      JSONObject jSONObject3 = jSONObject2.append("wheel.json.JSONTokener", jSONObject1);
      jSONObject1.getDouble("m$lon`@OKE2XBRd");
      Boolean boolean2 = new Boolean((String) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject3.put("[", (Collection) linkedList0);
      JSONObject jSONObject4 = jSONObject0.put("m$lon`@OKE2XBRd", (Map) hashMap0);
      Short short0 = new Short((short) (-1031));
      JSONObject.valueToString(short0);
      JSONObject jSONObject5 = jSONObject1.putOpt("~<_{Dy#", "[");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject2.put("true", (Map) hashMap0);
      JSONObject.quote("=k$Ba]u J om{.~s2`");
      JSONObject.numberToString(short0);
      jSONObject1.optLong("getparseUnsignedLong");
      JSONObject jSONObject6 = jSONObject4.optJSONObject("true");
      assertFalse(jSONObject6.equals((Object)jSONObject5));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Integer integer0 = new Integer((-649));
      Integer integer1 = new Integer((-649));
      Integer integer2 = new Integer((-649));
      Integer.getInteger((String) null, integer2);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Short short0 = new Short((short)5203);
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "getdecode";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "null";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      try { 
        jSONObject0.put((String) null, (Object) "null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2510583317959272
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Long long0 = new Long(14L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Integer integer0 = new Integer((-322));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Short short0 = new Short((short)5203);
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "";
      JSONObject jSONObject1 = new JSONObject(object0, stringArray0);
      String string0 = "JSON does not allow non-finite numbers.";
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject1.put("JSON does not allow non-finite numbers.", (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2617173459369164
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Double.max((-1.0), (-1.0));
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      HashMap<Float, Byte> hashMap1 = new HashMap<Float, Byte>(hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.names();
      JSONObject jSONObject2 = jSONObject0.append("gettoSONObject", "");
      jSONObject0.optInt("", 46);
      jSONObject1.optBoolean("");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.write(stringWriter0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2005640604933308
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.sum(0.0, (-2791.4));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optBoolean("ZE$.t/S0@dX", false);
      jSONObject0.optInt("dou", 0);
      JSONObject jSONObject1 = jSONObject0.putOpt("%?", double0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Long long0 = new Long((-1347L));
      Long.sum(0L, (-1347L));
      jSONObject1.put("ZE$.t/S0@dX", (Object) double0);
      Long.compareUnsigned(0L, (-1602L));
      Byte byte0 = new Byte((byte) (-57));
      Float float0 = new Float((double) (byte)0);
      JSONObject.doubleToString((byte)0);
      jSONObject1.optLong("0");
      double double1 = jSONObject0.optDouble("izJ:Zv#");
      assertEquals(5, jSONObject0.length());
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1711814934197813
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.valueToString("BWZF.cQK}=-2y$hs", 53, 7);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"java.lang.String@0000000008\"");
      Writer writer0 = jSONObject0.write(stringWriter1);
      JSONObject jSONObject1 = jSONObject0.put("ismax", true);
      StringWriter stringWriter2 = new StringWriter(53);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "\"java.lang.String@0000000008\"");
      StringWriter stringWriter4 = stringWriter3.append('Q');
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      jSONObject0.put("BWZF.cQK}=-2y$hs", (Map) hashMap0);
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      charArray0[6] = 'Q';
      writer0.write(charArray0);
      jSONObject1.write(stringWriter3);
      jSONObject1.write(stringWriter4);
      String string0 = "H)ibH-";
      try { 
        jSONObject1.getDouble("H)ibH-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"H)ibH-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.786323375621791
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double double1 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      jSONObject0.optDouble("+A+8(@n:", (-1.0));
      JSONObject.valueToString("", 53, 53);
      jSONObject1.toString();
      jSONObject0.toString((-186));
      jSONObject0.optString("\"java.lang.String@0000000008\"", "");
      JSONObject jSONObject2 = jSONObject1.put("", true);
      StringWriter stringWriter0 = new StringWriter(53);
      StringWriter stringWriter1 = new StringWriter();
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject3 = jSONObject2.put("", (Map) hashMap0);
      jSONObject2.names();
      jSONObject3.toString(8, 53);
      jSONObject3.put("{\n                                                             \"java.lang.String@0000000008\": {},\n                                                             \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                             \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                             \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                     }", (double) 53);
      jSONObject1.optBoolean("{\n                                                             \"java.lang.String@0000000008\": {},\n                                                             \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                             \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                             \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                     }");
      jSONObject1.optLong("{\n                                                             \"java.lang.String@0000000008\": {},\n                                                             \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                             \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                             \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                     }");
      JSONTokener jSONTokener0 = new JSONTokener("IQ");
      jSONTokener0.nextTo("{\n                                                             \"java.lang.String@0000000008\": {},\n                                                             \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                             \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                             \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                     }");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of IQ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(45);
      Integer integer0 = new Integer(45);
      Integer integer1 = new Integer(45);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Long long0 = new Long((-1347L));
      Integer integer2 = new Integer(45);
      hashMap2.put(integer2, "isvalueOf");
      Boolean.getBoolean("1/");
      Boolean boolean0 = new Boolean((String) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6547445136670866
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double double1 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      jSONObject0.optDouble("+A+8(@n:", (-1.0));
      JSONObject.quote("+A+8(@n:");
      jSONObject1.toString();
      jSONObject0.optString("\"+A+8(@n:\"", "");
      JSONObject jSONObject2 = jSONObject1.put("", true);
      StringWriter stringWriter0 = new StringWriter(53);
      StringWriter stringWriter1 = new StringWriter();
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject3 = new JSONObject((Object) "");
      jSONObject2.names();
      jSONObject3.toString(8, 53);
      jSONObject1.optBoolean("{\n                                                             \"java.lang.String@0000000014\": [],\n                                                             \"java.lang.String@0000000017\": \"java.lang.Class@0000000018\",\n                                                             \"java.lang.String@0000000012\": java.lang.Boolean@0000000013\n                                                     }");
      jSONObject1.optLong("{\n                                                             \"java.lang.String@0000000014\": [],\n                                                             \"java.lang.String@0000000017\": \"java.lang.Class@0000000018\",\n                                                             \"java.lang.String@0000000012\": java.lang.Boolean@0000000013\n                                                     }");
      JSONTokener jSONTokener0 = new JSONTokener("IQ");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of IQ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8195852087407347
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer.getInteger("", (Integer) null);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      JSONObject.quote("");
      Integer.min((-732), 105);
      Integer.toUnsignedLong(83);
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt("true", hashMap2);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.accumulate(",:]}/\"[{;=#", jSONArray0);
      try { 
        jSONObject1.getBoolean("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.555391841554766
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("", 65009L);
      JSONObject jSONObject2 = jSONObject0.putOpt("9@,g6qosh1A@", short0);
      jSONObject2.getLong("9@,g6qosh1A@");
      JSONObject.getNames((Object) jSONObject2);
      jSONObject1.isNull("");
      jSONObject2.optInt("getparseDouble");
      jSONObject2.optString((String) null, "`P");
      JSONTokener jSONTokener0 = new JSONTokener("`P");
      Byte byte0 = new Byte((byte) (-40));
      jSONTokener0.syntaxError("`P");
      jSONObject0.accumulate("", byte0);
      jSONTokener0.syntaxError("Expected a ',' or '}'");
      jSONTokener0.skipTo('!');
      jSONObject2.isNull("d{{tP&V}uH5,MgBX");
      jSONObject0.opt("d{{tP&V}uH5,MgBX");
      jSONObject2.keys();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      JSONObject jSONObject3 = new JSONObject(object1);
      JSONObject jSONObject4 = jSONObject3.put("d{{tP&V}uH5,MgBX", (Map) hashMap0);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      JSONObject jSONObject5 = new JSONObject((Map) hashMap0);
      jSONObject4.optJSONObject("d{{tP&V}uH5,MgBX");
      assertEquals(2, jSONObject3.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3835238642003804
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("", 65009L);
      JSONObject jSONObject2 = jSONObject0.putOpt("9@,g6qosh1A@", short0);
      jSONObject2.getLong("9@,g6qosh1A@");
      JSONObject.getNames((Object) jSONObject2);
      jSONObject1.isNull("");
      jSONObject2.optString((String) null, "`P");
      JSONTokener jSONTokener0 = new JSONTokener("`P");
      Byte byte0 = new Byte((byte) (-40));
      jSONTokener0.syntaxError("`P");
      jSONObject0.accumulate("", byte0);
      jSONTokener0.syntaxError("Expected a ',' or '}'");
      jSONTokener0.skipTo('!');
      jSONObject2.isNull("d{{tP&V}uH5,MgBX");
      jSONObject0.opt("d{{tP&V}uH5,MgBX");
      jSONObject0.optBoolean("istoHexString", false);
      jSONObject1.put("VzKaEE0)Z78o2", (double) 63754);
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONObject2.getLong("VzKaEE0)Z78o2");
      assertEquals(4, jSONObject2.length());
      assertEquals(63754L, long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1637696111101254
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Short short0 = new Short((short) (-528));
      Short.toUnsignedLong((short) (-528));
      short short1 = (short) (-1782);
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("", 65008L);
      String string0 = "9@,g6qosh1A@";
      JSONObject jSONObject2 = jSONObject0.putOpt("9@,g6qosh1A@", short0);
      jSONObject2.getLong("9@,g6qosh1A@");
      JSONObject.getNames((Object) jSONObject2);
      jSONObject1.isNull("");
      jSONObject0.optDouble("", (double) (-528L));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3874774573092568
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Float float0 = new Float((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.valueToString("BWZF.cQK}=-2y$hs", 53, 53);
      JSONObject.testValidity(double0);
      jSONObject0.optLong("max", (long) 53);
      jSONObject1.toString();
      jSONObject0.optString("\"java.lang.String@0000000009\"", "");
      JSONObject jSONObject2 = jSONObject1.put("", true);
      Double.isFinite(0.0);
      StringWriter stringWriter0 = new StringWriter(53);
      StringWriter stringWriter1 = new StringWriter();
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject3 = jSONObject2.put("", (Map) hashMap0);
      jSONObject2.names();
      jSONObject3.toString(8, 53);
      jSONObject1.keys();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject4 = new JSONObject(jSONTokener0);
      try { 
        jSONObject4.getLong("}8b6#~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}8b6#~\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(45);
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Short short0 = new Short((short)5203);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put("JSON does not allow non-finite numbers.", (Object) short0);
      HashMap<Boolean, JSONObject> hashMap3 = new HashMap<Boolean, JSONObject>();
      HashMap<Long, JSONObject> hashMap4 = new HashMap<Long, JSONObject>();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5806491250694639
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 827;
      Integer integer0 = new Integer(827);
      Integer integer1 = new Integer(91);
      Integer.getInteger("isdoubleToLongBits", integer1);
      Integer.getInteger((String) null, integer1);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      String string0 = "HE";
      Boolean boolean0 = new Boolean("lo");
      Integer integer2 = new Integer((-3262));
      jSONObject0.length();
      Integer.getInteger("HE", 2921);
      hashMap0.put(boolean0, integer2);
      jSONObject0.put("HE", false);
      try { 
        jSONObject0.getJSONObject("HE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HE\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.190397018804569
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Double double0 = Double.valueOf(1464.9351);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.length();
      Double.isFinite((-633.72481750554));
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      BiConsumer<Float, Object> biConsumer0 = (BiConsumer<Float, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      JSONObject jSONObject1 = jSONObject0.put("sB><1h;tS=.'xnN", (Map) hashMap0);
      jSONObject1.optInt("ixLf", 100);
      jSONObject1.remove("sB><1h;tS=.'xnN");
      jSONObject1.optLong("4@W/\"t.`");
      jSONObject1.put("sB><1h;tS=.'xnN", (Object) "sB><1h;tS=.'xnN");
      Short short0 = new Short((short) (-2102));
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3292763863011157
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = new JSONObject();
      Boolean boolean0 = new Boolean("\"p+wT&XEyIOsEV");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((-1.0));
      float float1 = new Float(1.0F);
      Float.min((-1487.79F), (-4531.0F));
      float float2 = new Float((double) 0.0F);
      Float.max((-4531.0F), 1.0F);
      Float.sum((-1487.8518F), (-1192.9344F));
      float float3 = new Float((-4531.0F));
      Float float4 = new Float(1.0);
      String string0 = JSONObject.numberToString(float4);
      assertNotNull(string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.161423635898512
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(48);
      Integer integer2 = Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.getNames((Object) hashMap2);
      Boolean boolean0 = new Boolean("");
      hashMap1.put(boolean0, integer2);
      int int0 = Boolean.compare(false, false);
      HashMap<Double, LinkedList<String>> hashMap3 = new HashMap<Double, LinkedList<String>>();
      Double.sum((-732), (-732));
      jSONObject0.optBoolean("is", false);
      JSONObject.valueToString(integer1, (-732), 48);
      Boolean boolean1 = new Boolean("wheel.json.JSONArray");
      Integer.sum(553, 1185);
      JSONObject jSONObject1 = jSONObject0.accumulate("istoString", (Object) null);
      Boolean boolean2 = Boolean.valueOf(false);
      jSONObject1.putOpt("istoString", boolean2);
      Integer integer3 = new Integer(48);
      assertFalse(integer3.equals((Object)int0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.2677946372884996
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "";
      try { 
        jSONObject0.putOpt("", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.237073455923194
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      JSONObject.valueToString(double0);
      JSONObject.testValidity(double0);
      jSONObject0.optLong("max", (long) 53);
      JSONObject.quote("BWZF.cQK}=-2y$hs");
      Double.sum((-1.0), (-809.0));
      jSONObject0.append("BWZF.cQK}=-2y$hs", (Object) null);
      jSONObject1.put("max", (Collection) null);
      jSONObject1.optDouble("java.lang.Double@0000000009", (-809.0));
      jSONObject1.optString("max");
      assertEquals(6, jSONObject1.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6029355072348994
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = (-1.0);
      Double double1 = new Double((-1.0));
      Float float0 = new Float((-1.0));
      JSONObject jSONObject0 = new JSONObject(double1);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double1);
      int int0 = 53;
      JSONObject.valueToString("BWZF.cQK}=-2y$hs", 53, 53);
      JSONObject.testValidity(double1);
      jSONObject0.optLong("max", (long) 53);
      jSONObject1.toString();
      jSONObject0.optString("\"java.lang.String@0000000010\"", "");
      JSONObject jSONObject2 = jSONObject1.put("", false);
      Double.isFinite(0.0);
      StringWriter stringWriter0 = new StringWriter(53);
      StringWriter stringWriter1 = new StringWriter();
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject3 = jSONObject2.put("", (Map) hashMap0);
      jSONObject2.names();
      jSONObject3.toString(53, 53);
      jSONObject1.keys();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000008\":java.lang.Double@0000000009,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      JSONObject jSONObject4 = new JSONObject(jSONTokener0);
      try { 
        jSONObject4.getLong("}8b6#~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}8b6#~\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.490199876599919
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      short short1 = (short) (-1782);
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("", 65009L);
      String string0 = "9@,g6qosh1A@";
      JSONObject jSONObject2 = jSONObject0.putOpt("9@,g6qosh1A@", short0);
      jSONObject2.getLong("9@,g6qosh1A@");
      JSONObject.getNames(jSONObject0);
      jSONObject1.isNull("");
      jSONObject2.optString((String) null, "`P");
      JSONTokener jSONTokener0 = new JSONTokener("`P");
      Byte byte0 = new Byte((byte) (-40));
      Byte.toUnsignedLong((byte) (-40));
      jSONTokener0.syntaxError("`P");
      JSONObject jSONObject3 = jSONObject0.accumulate("", byte0);
      // Undeclared exception!
      jSONObject3.toString((int) (short) (-527), 63754);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z_9:O+\"";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("$ R", "z_9:O+\"");
      double double0 = 0.0;
      Double.sum(927.0, 0.0);
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) null);
      jSONObject2.getString("$ R");
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.455500877075017
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = (-1.0);
      Double double1 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double1);
      jSONObject0.putOpt("", double1);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      String string0 = "~Mv|oV2N`";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("~Mv|oV2N`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~Mv|oV2N`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4723556152241644
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Integer integer0 = new Integer((-732));
      Integer.compareUnsigned(43, (-18627781));
      Integer integer1 = Integer.getInteger("", integer0);
      Integer.toUnsignedLong((-1));
      hashMap0.put((Boolean) null, integer1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject0.put("HE", false);
      jSONObject2.toString();
      Long long0 = new Long(0L);
      Short short0 = new Short((short)248);
      Short.toUnsignedInt((short)484);
      jSONObject1.put("E-,aypxtx'd$_z", (Object) short0);
      jSONObject2.remove("{\"java.lang.String@0000000003\":java.lang.Boolean@0000000004}");
      jSONObject1.optInt("E-,aypxtx'd$_z");
      String string0 = "LLw6~n";
      jSONObject0.optJSONObject("LLw6~n");
      String string1 = "^j92|0dU-TCQ=Bh";
      // Undeclared exception!
      try { 
        jSONObject1.toString(988);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5075180812912845
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      Double.sum(2004.470386030494, (-809.0));
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.put("gettoSONObject", false);
      jSONObject0.optString("", "iswriVte");
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      HashMap<Float, Byte> hashMap1 = new HashMap<Float, Byte>(hashMap0);
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject3.names();
      jSONObject2.append("gettoSONObject", "");
      jSONObject2.optInt("", 46);
      jSONObject3.optBoolean("");
      Short short0 = new Short((short)1271);
      Float float0 = new Float(2004.470386030494);
      String[] stringArray0 = new String[1];
      Float.isFinite((-1.0F));
      stringArray0[0] = "";
      JSONObject jSONObject4 = new JSONObject(float0, stringArray0);
      jSONObject3.optLong("java.lang.Double@0000000009");
      JSONObject jSONObject5 = jSONObject2.put("getisFinite", (Map) hashMap0);
      try { 
        jSONObject5.getLong("ha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ha\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5465986860485124
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z_9:O+\"";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "$ R";
      jSONObject0.putOpt("$ R", "z_9:O+\"");
      Double.sum(927.0, 0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3144210078577787
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString();
      jSONObject0.isNull("{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}";
      jSONObject0.isNull("{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      jSONObject0.toString();
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.valueToString(boolean0);
      jSONObject0.optLong("java.lang.Boolean@0000000005");
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      try { 
        jSONObject0.getDouble("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0981473891350673
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "z_9:O+\"";
      stringArray0[1] = "z_9:O+\"";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("z_9:O+\"", stringArray0[0]);
      String string1 = "G@AFxCq:/Df^8$s";
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) null);
      try { 
        jSONObject2.getString(stringArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.064049997964577
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z_9:O+\"";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("$ R", "z_9:O+\"");
      Double.sum((-1693.642), (-1693.642));
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) null);
      jSONObject2.getString("$ R");
      jSONObject1.append("", "");
      Boolean boolean0 = new Boolean("G@AFxCq:/Df^8$s");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      jSONObject0.put("java.lang.String@0000000003", (Collection) linkedList1);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      jSONObject1.put("zV'y", (Map) hashMap0);
      JSONObject.valueToString(linkedList0);
      JSONObject jSONObject3 = jSONObject2.putOpt("", "[]");
      try { 
        jSONObject3.getBoolean("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3082539203634207
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.append("true", "");
      jSONObject0.getDouble("");
      Boolean boolean1 = new Boolean("true");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject0.put("zV'y", (Collection) linkedList0);
      jSONObject2.optDouble("W@@*SRNO$&", (-1.0));
      jSONObject0.put("zV'y", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject2.getJSONObject("zV'y");
      JSONObject.valueToString(jSONObject0);
      // Undeclared exception!
      try { 
        jSONObject3.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.317155183791537
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject2 = jSONObject1.append("true", "");
      jSONObject0.getDouble("");
      Boolean boolean1 = new Boolean("true");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = jSONObject0.put("zV'y", (Collection) linkedList0);
      jSONObject0.put("zV'y", (Map) hashMap0);
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject4 = jSONObject1.putOpt("", jSONObject2);
      jSONObject3.getJSONObject("");
      try { 
        jSONObject4.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1135857248280376
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = new JSONObject((Object) "");
      String string0 = "";
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      hashMap0.clone();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject2 = jSONObject1.append("", "true");
      Boolean boolean1 = new Boolean("i");
      JSONObject jSONObject3 = jSONObject2.put("getgetBoolean", (Map) hashMap0);
      String string1 = "' and instead saw '";
      JSONObject.valueToString(jSONObject0);
      Object object0 = new Object();
      int int0 = 72;
      // Undeclared exception!
      JSONObject.valueToString(jSONObject3, 54, 3229);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      int int0 = (-4039);
      jSONArray0.optJSONObject((-4039));
      jSONArray0.optJSONObject(818);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.271560843825428
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", 65009L);
      JSONObject jSONObject2 = jSONObject0.putOpt("9@[,qqosh1@", short0);
      JSONObject.getNames(jSONObject0);
      jSONObject1.isNull("");
      String string1 = null;
      String string2 = "`P";
      jSONObject2.optString((String) null, "`P");
      JSONTokener jSONTokener0 = new JSONTokener("`P");
      Short.toUnsignedInt((short) (-1));
      jSONTokener0.skipTo('\u0013');
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject1.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9631972529314483
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Long long0 = new Long(14L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(108, false);
      jSONObject0.toJSONArray(jSONArray0);
      Float.isFinite(0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      stringWriter1.write("kWE.tK'/", 4, 4);
      jSONObject0.write(stringWriter1);
      jSONObject0.put("ismax", true);
      StringWriter stringWriter2 = null;
      try {
        stringWriter2 = new StringWriter((-6254807));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer integer2 = new Integer((-732));
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      Long long0 = new Long((-732));
      Integer integer3 = new Integer((-732));
      Integer integer4 = new Integer((-471));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put("isshortValue", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6405304405539622
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(45);
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer integer2 = Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      JSONObject.getNames(jSONObject0);
      Boolean boolean0 = new Boolean("s>~J");
      hashMap1.put(boolean0, integer2);
      JSONObject jSONObject1 = jSONObject0.put("HE", false);
      JSONArray jSONArray0 = jSONObject1.names();
      jSONArray0.toString();
      Long long0 = new Long((-1347L));
      JSONObject jSONObject2 = jSONObject0.put("uo|G)U->+", (Map) hashMap1);
      jSONObject2.toJSONArray(jSONArray0);
      jSONObject1.names();
      jSONObject1.toString((-482), (-732));
      jSONObject1.optBoolean("HE");
      jSONObject0.optLong("{");
      jSONObject1.optInt("HE", 1677);
      try { 
        jSONObject2.getLong(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.293118601486813
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      String string0 = "A JSONObject text must end with '}'";
      Float float0 = new Float(2038.25362);
      Float.isFinite(0.0F);
      hashMap0.put("A JSONObject text must end with '}'", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("false", true);
      jSONObject0.optBoolean("false");
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5093498058582293
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double double1 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      jSONObject0.optDouble("+A+8(@n:", (-1.0));
      JSONObject.valueToString("", 53, 53);
      jSONObject1.toString();
      jSONObject0.optString("\"java.lang.String@0000000008\"", "");
      JSONObject jSONObject2 = jSONObject1.put("", true);
      StringWriter stringWriter0 = new StringWriter(53);
      StringWriter stringWriter1 = new StringWriter();
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Long.getLong("\"java.lang.String@0000000008\"", (Long) null);
      Long.getLong("{\"java.lang.String@0000000008\":java.lang.Double@0000000009,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}", (Long) null);
      hashMap0.put((Long) null, "\"\"");
      JSONObject jSONObject3 = jSONObject2.put("", (Map) hashMap0);
      jSONObject2.names();
      // Undeclared exception!
      try { 
        jSONObject3.toString(8, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "'";
      stringArray0[2] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[3] = "O3g~?~[`@[";
      stringArray0[4] = "getdoubleToLongBits";
      stringArray0[5] = "t?v}~'$,KmQ";
      stringArray0[6] = "] is not a Boolean.";
      stringArray0[7] = "&W6[qsgX0";
      JSONObject jSONObject0 = new JSONObject((Object) "getdoubleToLongBits");
      jSONObject0.has("hs2Qs.3wqRtVT'_Zz");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "gP/";
      jSONObject0.isNull("gP/");
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Integer.toUnsignedLong(128);
      Short short0 = new Short((short)2389);
      Float.max(1391.91F, 2.6738362F);
      HashMap<Byte, Object> hashMap2 = new HashMap<Byte, Object>();
      String string1 = ",\n";
      try { 
        jSONObject0.getString(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8407487285692812
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 45;
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(45);
      Integer integer0 = new Integer((-732));
      int int1 = 13;
      Integer integer1 = new Integer(13);
      Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Short short0 = new Short((short)5203);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put("JSON does not allow non-finite numbers.", (Object) short0);
      jSONObject0.optJSONArray("");
      String string0 = "_IdH7";
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.0162060650470273
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      jSONObject0.put("~Mv|oV2N`", (-1.0));
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.putOpt("su", "~Mv|oV2N`");
      JSONObject jSONObject2 = jSONObject1.append("true", "");
      jSONObject0.put("Vey", (Map) hashMap0);
      JSONObject.valueToString(jSONObject0);
      Double.isFinite(456.855758);
      Long long0 = new Long((-809L));
      jSONObject2.accumulate("JSONArray initial value should be a string or collection or array.", "~Mv|oV2N`");
      assertEquals(9, jSONObject2.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1506298932810233
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject2 = jSONObject0.put("~Mv|oV2N`", (-1.0));
      jSONObject2.put("~Mv|oV2N`", true);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.putOpt("su", "~Mv|oV2N`");
      JSONObject jSONObject3 = jSONObject1.append("true", "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double.max(456.855758, (-1.0));
      Double.isFinite((-1.0));
      linkedList0.add("toS");
      jSONObject0.put("Vey", (Collection) linkedList0);
      JSONObject jSONObject4 = jSONObject0.put("Vey", (Map) hashMap0);
      JSONObject.valueToString(jSONObject0);
      jSONObject4.accumulate("su", "' and instead saw '");
      JSONObject jSONObject5 = new JSONObject();
      assertFalse(jSONObject5.equals((Object)jSONObject3));
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.3274475906236463
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Short short0 = new Short((short) (-528));
      Short.toUnsignedLong((short) (-528));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("", 65008L);
      JSONObject jSONObject2 = jSONObject0.putOpt("9@,g6qosh1A@", short0);
      jSONObject2.getLong("9@,g6qosh1A@");
      JSONObject.getNames((Object) jSONObject2);
      jSONObject1.isNull("");
      jSONObject2.optString((String) null, "`P");
      JSONTokener jSONTokener0 = new JSONTokener("`P");
      jSONTokener0.syntaxError("`P");
      jSONTokener0.nextValue();
      jSONTokener0.syntaxError("Expected a ',' or '}'");
      jSONTokener0.skipTo('\u001F');
      Boolean.valueOf("`P");
      jSONObject1.optLong("", (-668L));
      int int0 = jSONObject1.getInt("");
      assertEquals(3, jSONObject1.length());
      assertEquals(65008, int0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.390689782753827
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.putOpt("9@,g6qosh1A@", short0);
      jSONObject1.getLong("9@,g6qosh1A@");
      JSONObject.getNames((Object) jSONObject1);
      jSONObject0.isNull("");
      jSONObject1.optString((String) null, "`P");
      JSONTokener jSONTokener0 = new JSONTokener("`P");
      Byte byte0 = new Byte((byte) (-40));
      jSONTokener0.syntaxError("`P");
      JSONObject jSONObject2 = jSONObject0.accumulate("", byte0);
      jSONTokener0.syntaxError("Expected a ',' or '}'");
      jSONTokener0.skipTo('!');
      Boolean boolean0 = new Boolean("`P");
      jSONObject0.optLong("", (-668L));
      jSONObject0.opt("d{{tP&V}uH5,MgBX");
      jSONObject2.put("9@,g6qosh1A@", 0L);
      jSONObject0.getInt("");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5311386121723252
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("Of@n7:U[G7tn8", object0);
      try { 
        jSONObject1.getInt("Of@n7:U[G7tn8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Of@n7:U[G7tn8\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3718061232922234
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = new Boolean("true");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean2 = new Boolean("true");
      int int0 = (-3262);
      Integer integer0 = new Integer((-3262));
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      Boolean boolean3 = new Boolean("true");
      hashMap1.put(boolean3, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.put("true", false);
      try { 
        jSONObject0.getJSONObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6827494392771072
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0440459090141285
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = new JSONObject();
      Double double1 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject1.putOpt("8JB(8kv&", double1);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      jSONObject0.put("", 1.0);
      Boolean boolean1 = Boolean.TRUE;
      Integer integer0 = new Integer((short) (-527));
      JSONObject jSONObject3 = jSONObject1.append("min", integer0);
      Boolean boolean2 = new Boolean("~Mv|oV2N`");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.put("getcompare", (Collection) linkedList0);
      jSONObject3.put("true", (Map) hashMap0);
      JSONObject.valueToString((Object) null);
      Object object0 = new Object();
      jSONObject3.putOpt("true", object0);
      try { 
        jSONObject2.getBoolean("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.097774775249932
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Short short0 = new Short((short) (-528));
      Short.toUnsignedLong((short) (-528));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", 65008L);
      JSONObject jSONObject2 = jSONObject0.putOpt("9@,g6qosh1A@", short0);
      jSONObject2.getLong("9@,g6qosh1A@");
      JSONObject.getNames((Object) jSONObject2);
      jSONObject1.isNull("");
      String string1 = null;
      String string2 = "`P";
      try { 
        jSONObject2.getInt("`P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`P\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6352992220581908
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(45);
      Integer integer0 = new Integer(13);
      Integer integer1 = new Integer(45);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Integer.getInteger("-zd", integer1);
      HashMap<Boolean, Integer> hashMap3 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap4 = new HashMap<Integer, String>();
      Integer.toUnsignedLong((short)2389);
      Short short0 = new Short((short)253);
      Float float0 = new Float(1.0);
      Float.max((short)2389, 2164.4683F);
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      HashMap<Byte, Object> hashMap5 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap5);
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9273921261392744
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("m$lon`@OKE2XBRd", 2128);
      JSONTokener jSONTokener0 = new JSONTokener("]2jy");
      jSONTokener0.skipTo('I');
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]2jy";
      stringArray0[1] = "]2jy";
      stringArray0[2] = "m$lon`@OKE2XBRd";
      stringArray0[3] = "m$lon`@OKE2XBRd";
      stringArray0[4] = "m$lon`@OKE2XBRd";
      JSONObject jSONObject2 = new JSONObject("m$lon`@OKE2XBRd", stringArray0);
      String string0 = "hrCsZzseZ'";
      jSONObject2.isNull("hrCsZzseZ'");
      jSONObject1.opt("m$lon`@OKE2XBRd");
      String string1 = "JSONArray[";
      jSONObject1.put("JSONArray[", (double) 2128);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "m$lon`@OKE2XBRd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8698812449927336
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long long0 = new Long(14L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Float.isFinite(0.0F);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      Writer writer0 = jSONObject0.write(stringWriter1);
      jSONObject0.write(writer0);
      String string0 = "ismax";
      jSONObject0.put("ismax", true);
      StringWriter stringWriter2 = null;
      try {
        stringWriter2 = new StringWriter((-6254807));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double.sum(927.0, 0.0);
      Boolean.valueOf(false);
      Boolean.getBoolean("1/");
      try { 
        jSONObject0.getLong("G@AFxCq:/Df^8$s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G@AFxCq:/Df^8$s\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3966464467019137
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Byte byte0 = new Byte((byte)11);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.toUnsignedInt((byte)57);
      try { 
        jSONObject0.getJSONObject(",:]}/\"[{;=r#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=r#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.278274770599302
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      jSONObject0.put("~Mv|oV2N`", (-1.0));
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject2 = jSONObject0.putOpt("su", "~Mv|oV2N`");
      jSONObject1.append("true", "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("toS");
      jSONObject0.put("Vey", (Collection) linkedList0);
      jSONObject0.put("Vey", (Map) hashMap0);
      JSONObject.valueToString(jSONObject0);
      Double.isFinite(456.855758);
      jSONObject1.optLong("isvalueOf");
      try { 
        jSONObject2.getLong("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.965541844727092
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject2 = jSONObject0.put("~Mv|oV2N`", (-1.0));
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject3 = jSONObject1.append("true", "");
      Boolean boolean1 = new Boolean("true");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.optLong("] is not a Boolean.");
      Short short0 = new Short((short) (-877));
      Integer integer0 = new Integer((-656));
      jSONObject1.getLong("~Mv|oV2N`");
      try { 
        jSONObject3.getString("6#m?sOsx;kz6LP?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6#m?sOsx;kz6LP?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      Integer integer0 = new Integer((byte)10);
      Integer.getInteger("JSONObject[", (Integer) null);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Boolean boolean0 = Boolean.FALSE;
      Integer integer1 = new Integer(0);
      hashMap0.put(boolean0, integer1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.6179154120919863
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Short short0 = new Short((short) (-528));
      Short.toUnsignedLong((short) (-528));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("", 65008L);
      JSONObject jSONObject2 = jSONObject0.putOpt("9@,g6qosh1A@", short0);
      jSONObject2.getLong("9@,g6qosh1A@");
      JSONObject.getNames((Object) jSONObject2);
      jSONObject1.isNull("");
      jSONObject2.optString((String) null, "`P");
      JSONTokener jSONTokener0 = new JSONTokener("`P");
      Byte byte0 = new Byte((byte) (-40));
      jSONTokener0.syntaxError("`P");
      JSONObject jSONObject3 = jSONObject0.accumulate("", byte0);
      jSONTokener0.nextValue();
      jSONTokener0.syntaxError("`P");
      jSONTokener0.syntaxError("Expected a ',' or '}'");
      jSONTokener0.skipTo('\u001F');
      Boolean boolean0 = new Boolean("`P");
      Byte.toUnsignedInt((byte) (-40));
      jSONObject1.optLong("", (-668L));
      jSONObject0.opt("d{{tP&V}uH5,MgBX");
      jSONObject3.put("-21C+h\"1c5+'|FP+$", 0L);
      jSONObject2.put("`P", 34);
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.3033795051939387
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer.getInteger("", (Integer) null);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      Integer.toUnsignedString((-732));
      Integer.min((-732), 13);
      Integer.toUnsignedLong(13);
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      Boolean boolean0 = new Boolean("");
      hashMap1.put(boolean0, (Integer) null);
      JSONObject jSONObject1 = jSONObject0.put("HE", false);
      JSONArray jSONArray0 = jSONObject1.names();
      Long long0 = new Long((-1397L));
      Integer integer2 = new Integer((-3837));
      JSONObject.valueToString(hashMap1, (-732), (-732));
      JSONObject jSONObject2 = jSONObject0.put("uo|G)U->+", (Map) hashMap1);
      jSONObject2.toJSONArray(jSONArray0);
      jSONObject1.names();
      hashMap2.replace((Integer) null, "HE", "tET $k>z]p}K");
      Long long1 = new Long(13);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap2.compute((Integer) null, biFunction0);
      jSONObject0.optJSONArray("null");
      JSONObject jSONObject3 = jSONObject0.accumulate("_IdH7", long0);
      double double0 = jSONObject3.optDouble("4294966564");
      assertEquals(3, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7201934592198251
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z_9:O+\"";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("z_9:O+\"", "z_9:O+\"");
      Float float0 = new Float((float) 0);
      Float.min(0, 0);
      Float.sum((-3159.93F), 0.0F);
      JSONObject.valueToString(object0, 0, (-2150));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.4207654590437926
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "z_9:O+\"";
      stringArray0[0] = "z_9:O+\"";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("z_9:O+\"", "z_9:O+\"");
      String string1 = "";
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) null);
      jSONObject2.getString("z_9:O+\"");
      jSONObject2.optBoolean("z_9:O+\"", false);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optDouble((String) null, 2775.7120933514852);
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalOr(false, false);
      Boolean.getBoolean("1/");
      JSONObject.getNames((Object) "java.lang.String@0000000002");
      Boolean.compare(false, true);
      JSONObject.getNames((Object) boolean0);
      JSONObject.quote("G@AFxCq:/Df^8$s");
      JSONObject.getNames((Object) "java.lang.String@0000000002");
      jSONObject2.optLong("G@AFxCq:/Df^8$s", (-3522L));
      Boolean boolean1 = Boolean.valueOf(false);
      jSONObject0.optDouble("\"G@AFxCq:/Df^8$s\"", (double) (-1));
      JSONObject.valueToString(boolean1);
      jSONObject2.optJSONArray("z_9:O+\"");
      JSONObject.quote("\"\"");
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1428074196753928
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      Boolean boolean0 = Boolean.FALSE;
      String string0 = "wP0g('^";
      String string1 = "4J;j7(S[\"Pox5WH8}";
      Boolean.getBoolean("4J;j7(S[\"Pox5WH8}");
      int int0 = 2869;
      try { 
        jSONObject0.put((String) null, 2869);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.846481543262211
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "getlowestOneBit";
      stringArray0[1] = "ismax";
      jSONObject0.optLong("3&w");
      stringArray0[2] = ";1L'-)O> W8&X8H";
      stringArray0[3] = "get";
      stringArray0[4] = "/8[%LnnnV-j4+t1";
      stringArray0[5] = "BcQG>\"bV*];Jk[";
      stringArray0[6] = "A JSONArray text must start with '['";
      stringArray0[7] = "}X)";
      stringArray0[8] = "2";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("ismax", 110);
      try { 
        jSONObject0.get("getlowestOneBit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getlowestOneBit\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.8454042934359522
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optLong(": ", 6149L);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      JSONObject.testValidity(double0);
      jSONObject0.optLong("max", (long) 7);
      jSONObject0.isNull("d{{tP&V}uH5,MgBX");
      jSONObject1.opt("R>@X>\"&q<Qh");
      try { 
        jSONObject0.getLong("getlogicalAnd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getlogicalAnd\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.3824566443859903
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      jSONObject0.put("~Mv|oV2N`", (-1.0));
      JSONObject jSONObject2 = jSONObject1.append("true", "");
      Boolean boolean0 = new Boolean("true");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double.max(456.855758, (-1.0));
      linkedList0.add("toS");
      Byte.toUnsignedInt((byte)19);
      String string0 = "fp#Sx";
      jSONObject2.optLong("fp#Sx", (-1420L));
      jSONObject1.opt("[]");
      JSONObject jSONObject3 = jSONObject0.put("mAj0j$I)_cnT%-%", (-471L));
      // Undeclared exception!
      jSONObject3.toString(8192);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.3757076237612953
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      Short.toUnsignedInt((short) (-1782));
      Double.sum((-809.0), (short) (-527));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optBoolean("getwait", false);
      JSONObject.doubleToString((short) (-527));
      Object object0 = new Object();
      JSONObject.getNames((Object) "wa");
      JSONObject jSONObject1 = jSONObject0.append("iscompare", "iscompare");
      jSONObject0.optLong((String) null);
      Short short1 = new Short((short) (-527));
      Integer integer0 = new Integer((-563));
      JSONObject.getNames((Object) null);
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject0.getDouble("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.6094379124341
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 2128;
      jSONObject0.optDouble("+hl/yT0rjzj", (double) (byte)57);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-1187));
      String string0 = "0";
      try { 
        jSONObject0.put("0", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.258317895502333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.getNames((Object) jSONObject1);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject jSONObject2 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("false");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of false
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.453787663627306
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString();
      jSONObject0.isNull("{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}";
      stringArray0[1] = "{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}";
      stringArray0[2] = "{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}";
      Double.sum((-809.0), (-809.0));
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}", (Collection) null);
      jSONObject1.optBoolean("{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}", false);
      JSONObject.doubleToString(Double.NaN);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      jSONObject1.append("null", (Object) null);
      jSONObject1.optLong("\n");
      Short short0 = new Short((short)77);
      Integer integer0 = new Integer((-563));
      try { 
        jSONObject1.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.808045719583997
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      int int0 = (-732);
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer.getInteger("", (Integer) null);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      Integer.min((-732), 105);
      Integer.toUnsignedLong(91);
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      Boolean boolean0 = Boolean.valueOf("");
      hashMap1.put(boolean0, integer0);
      Boolean boolean1 = new Boolean("");
      hashMap1.put(boolean1, (Integer) null);
      JSONObject jSONObject1 = jSONObject0.put("HE", false);
      JSONArray jSONArray0 = jSONObject1.names();
      jSONArray0.optJSONObject(13);
      jSONArray0.put((Map) hashMap0);
      jSONObject1.put("", (double) (-732));
      JSONObject jSONObject2 = new JSONObject();
      jSONArray0.optJSONObject(13);
      try { 
        Byte.valueOf("+N", 52);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 52 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6088551692563475
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.append("true", "");
      Boolean boolean1 = new Boolean("true");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "true";
      stringArray0[1] = "true";
      stringArray0[2] = "zV'y";
      stringArray0[3] = "";
      stringArray0[4] = "zV'y";
      stringArray0[5] = "true";
      stringArray0[6] = ",";
      stringArray0[7] = "";
      JSONObject jSONObject2 = new JSONObject(integer0, stringArray0);
      Object object0 = new Object();
      jSONObject0.put("true", object0);
      HashMap<Boolean, JSONObject> hashMap1 = new HashMap<Boolean, JSONObject>();
      HashMap<Long, JSONObject> hashMap2 = new HashMap<Long, JSONObject>();
      assertEquals(0, hashMap2.size());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.5658313831363064
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Short short0 = new Short((short) (-528));
      Short.toUnsignedLong((short) (-528));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("", 65008L);
      String string0 = "9@,g6qosh1A@";
      JSONObject jSONObject2 = jSONObject0.putOpt("9@,g6qosh1A@", short0);
      jSONObject2.getLong("9@,g6qosh1A@");
      JSONObject.getNames((Object) jSONObject2);
      jSONObject1.isNull("");
      jSONObject2.optString((String) null, (String) null);
      Byte byte0 = new Byte((byte) (-40));
      JSONObject jSONObject3 = jSONObject0.accumulate("", byte0);
      Boolean boolean0 = new Boolean((String) null);
      Byte.toUnsignedInt((byte) (-40));
      jSONObject1.optLong("", (-668L));
      jSONObject0.opt("d{{tP&V}uH5,MgBX");
      jSONObject3.put("-21C+h\"1c5+'|FP+$", 0L);
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.1976431428786016
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      Boolean.compare(true, true);
      jSONObject0.toString();
      jSONObject0.isNull("{}");
      jSONObject0.toString();
      String[] stringArray0 = new String[2];
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject("{}");
      JSONObject.valueToString(jSONObject1);
      jSONObject0.optLong("lo");
      JSONObject.valueToString(jSONObject2);
      try { 
        jSONObject1.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.390838144701785
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString();
      jSONObject0.isNull("{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      jSONObject0.toString();
      String[] stringArray0 = new String[2];
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      JSONObject.valueToString(boolean0);
      jSONObject0.optLong("lo");
      JSONObject.valueToString(jSONObject2);
      try { 
        jSONObject1.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.407425491116241
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("", 65009L);
      JSONObject jSONObject2 = jSONObject0.putOpt("", short0);
      jSONObject2.getLong("");
      JSONObject.getNames((Object) jSONObject2);
      jSONObject1.isNull("");
      jSONObject2.optString((String) null, "`P");
      JSONTokener jSONTokener0 = new JSONTokener("`P");
      Byte byte0 = new Byte((byte) (-40));
      jSONTokener0.syntaxError("`P");
      jSONTokener0.syntaxError("Expected a ',' or '}'");
      Short.toUnsignedInt((short) (-1782));
      Byte.compare((byte) (-40), (byte)0);
      jSONTokener0.skipTo('!');
      jSONObject0.opt("d{{tP&V}uH5,MgBX");
      jSONObject1.getInt("");
      jSONObject0.optBoolean("istoHexString", true);
      JSONObject jSONObject3 = jSONObject1.put("VzKaEE0)Z78o2", (double) 63754);
      jSONObject3.putOpt((String) null, byte0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.getString("isparseShort");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isparseShort\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5990147122062977
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(45);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "c:ex18gX");
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Boolean.FALSE;
      Boolean boolean2 = new Boolean((String) null);
      Byte byte0 = new Byte((byte) (-54));
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      double double0 = jSONObject1.optDouble(" +QyOsVyb]bN;Mg\"dA");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.318487109402997
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Z8v;)fn";
      stringArray0[1] = "\r";
      stringArray0[2] = "";
      stringArray0[3] = "gettoString";
      stringArray0[4] = "G@\"a";
      Boolean.getBoolean("Z8v;)fn");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getJSONObject("isvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Expected a ',' or ']'";
      stringArray0[1] = "WZG";
      stringArray0[2] = "";
      String string0 = "null";
      stringArray0[3] = "null";
      stringArray0[4] = "Nb@f:W/Jg";
      stringArray0[5] = "|)cr7v$nC&mH";
      stringArray0[6] = "C>W8TGn^";
      stringArray0[7] = "%)8){a9";
      stringArray0[8] = "0:,&V`N::$4,ZA ";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.294505660268623
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      Double.sum(2006.6138068361, (-809.0));
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) null);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(92);
      BiFunction<Object, Boolean, Boolean> biFunction0 = (BiFunction<Object, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer.toUnsignedString(122);
      hashMap0.replaceAll(biFunction0);
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject.valueToString(jSONObject0, 92, 92);
      Boolean.logicalAnd(false, false);
      hashMap0.put(integer0, boolean0);
      String string0 = "int";
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      JSONObject jSONObject3 = jSONObject2.put("", (Map) hashMap1);
      jSONObject3.optLong("", 0L);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1711943783081258
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("b");
      int int0 = 731;
      jSONObject0.optInt((String) null, 731);
      try { 
        jSONObject0.put((String) null, (-4704L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.9001686001769098
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(45);
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      jSONObject0.isNull("");
      jSONObject0.optString("`P", "");
      jSONObject0.optLong("`P");
      JSONTokener jSONTokener0 = new JSONTokener("_8dj'Sdem:9IV");
      jSONTokener0.skipTo('s');
      jSONObject0.isNull((String) null);
      jSONObject0.opt("");
      jSONObject0.put("O", (double) (-732));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(hashMap2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.917534941541677
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z_9:O+\"";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("$ R", "z_9:O+\"");
      jSONObject1.optLong(":1v-M?JN/Cal,98", (long) 0);
      jSONObject0.optString("null", "7')KkgPg");
      JSONTokener jSONTokener0 = new JSONTokener(":1v-M?JN/Cal,98");
      jSONObject0.isNull("z_9:O+\"");
      jSONObject0.opt((String) null);
      jSONObject0.put("z_9:O+\"", (double) 0L);
      jSONObject0.optJSONArray("null");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.961744408353066
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject(integer1);
      jSONObject0.optInt(" UUv", (-732));
      JSONObject jSONObject1 = jSONObject0.putOpt("", hashMap0);
      Double.sum(13, (-1.0));
      Integer.max((-732), 40);
      jSONObject0.put(">(Cum7VK7L8h$XWHZz", (Collection) null);
      jSONObject0.getString("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">(Cum7VK7L8h$XWHZz";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      Integer integer2 = Integer.getInteger((String) null, (-732));
      jSONObject0.put("ha", (Object) integer2);
      HashMap<Boolean, JSONObject> hashMap3 = new HashMap<Boolean, JSONObject>();
      HashMap<Long, JSONObject> hashMap4 = new HashMap<Long, JSONObject>();
      assertEquals(0, hashMap4.size());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.4648163848908131
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "m$lon`@OKE2XBRd";
      jSONObject0.remove("m$lon`@OKE2XBRd");
      JSONObject jSONObject1 = jSONObject0.put("m$lon`@OKE2XBRd", 2128);
      jSONObject1.put("m$lon`@OKE2XBRd", (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("m$lon`@OKE2XBRd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of m$lon`@OKE2XBRd
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.8080457195839967
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("m$lon`@OKE2XBRd", 2128);
      JSONObject.valueToString(jSONObject0);
      Short short0 = new Short((short)123);
      Integer integer0 = new Integer(46);
      jSONObject0.put("iswrite", (Object) integer0);
      jSONObject1.remove("iswrite");
      HashMap<Boolean, JSONObject> hashMap1 = new HashMap<Boolean, JSONObject>();
      HashMap<Long, JSONObject> hashMap2 = new HashMap<Long, JSONObject>();
      jSONObject0.put("wheel.json.JSONObject@0000000001", (Map) hashMap1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("+hl/yT0rjzj", (double) (byte)0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-1187));
      jSONObject0.optInt(",r'FJ5 ");
      try { 
        jSONObject0.getDouble("a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"a\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.TRUE;
      Short short0 = new Short((short) (-765));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "true";
      stringArray0[2] = "";
      stringArray0[3] = "true";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.put("true", (Object) null);
      HashMap<Boolean, JSONObject> hashMap1 = new HashMap<Boolean, JSONObject>();
      HashMap<Long, JSONObject> hashMap2 = new HashMap<Long, JSONObject>();
      assertTrue(hashMap2.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Double.max((-1.0), (-1.0));
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Object object0 = hashMap0.clone();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = new Boolean("true");
      Object object1 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      Object object2 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap2);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("true");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(61);
      Integer integer0 = new Integer((-738));
      Integer integer1 = new Integer(13);
      Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Short short0 = new Short((short)5203);
      String[] stringArray0 = new String[21];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      try { 
        jSONObject0.getString("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethashCode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Integer integer0 = new Integer(13);
      Integer integer1 = new Integer(45);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Long long0 = new Long((-1347L));
      Long.sum(45, (-1961L));
      Integer integer2 = new Integer(45);
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("Expected a ',' or '}'");
      JSONObject jSONObject1 = jSONObject0.put(":w^qp", 2112L);
      try { 
        jSONObject1.getInt("hi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"hi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7201934592198251
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(45);
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Short short0 = new Short((short)5203);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put("JSON does not allow non-finite numbers.", (Object) short0);
      HashMap<Boolean, JSONObject> hashMap3 = new HashMap<Boolean, JSONObject>();
      HashMap<Long, JSONObject> hashMap4 = new HashMap<Long, JSONObject>();
      try { 
        jSONObject0.append("JSON does not allow non-finite numbers.", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[JSON does not allow non-finite numbers.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = new Integer(115);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".";
      stringArray0[1] = " pjheDdNdP";
      stringArray0[2] = "\t";
      stringArray0[3] = "G('M=.^0Pw?D!";
      stringArray0[4] = "val";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.5230267143533336
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.putOpt("9@,g6qosh1A@", short0);
      jSONObject1.getLong("9@,g6qosh1A@");
      JSONObject.getNames(jSONObject0);
      jSONObject0.isNull("");
      jSONObject1.optString((String) null, "`P");
      JSONTokener jSONTokener0 = new JSONTokener("`P");
      Byte byte0 = new Byte((byte) (-40));
      jSONTokener0.syntaxError("`P");
      JSONObject jSONObject2 = jSONObject0.accumulate("", byte0);
      jSONObject2.optInt("");
      jSONTokener0.syntaxError("Expected a ',' or '}'");
      jSONTokener0.skipTo('!');
      jSONObject1.isNull("d{{tP&V}uH5,MgBX");
      jSONObject0.opt("d{{tP&V}uH5,MgBX");
      jSONObject0.optBoolean("istoHexString", false);
      jSONObject0.put("VzKaEE0)Z78o2", (double) 63754);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/gkX1(";
      stringArray0[1] = "/gkX1(";
      stringArray0[2] = "/gkX1(";
      stringArray0[3] = "/gkX1(";
      stringArray0[4] = "/gkX1(";
      stringArray0[5] = "/gkX1(";
      stringArray0[6] = "/gkX1(";
      stringArray0[7] = "/gkX1(";
      stringArray0[8] = "/gkX1(";
      JSONObject jSONObject0 = new JSONObject("/gkX1(", stringArray0);
      jSONObject0.put("/gkX1(", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.457273054297971
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      short short1 = (short) (-1782);
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("", 65009L);
      String string0 = "9@[,qqosh1A@";
      JSONObject jSONObject2 = jSONObject0.putOpt("9@[,qqosh1A@", short0);
      jSONObject2.getLong("9@[,qqosh1A@");
      JSONObject.getNames(jSONObject0);
      jSONObject1.isNull("");
      jSONObject2.optString((String) null, "`P");
      JSONTokener jSONTokener0 = new JSONTokener("`P");
      Byte byte0 = new Byte((byte) (-40));
      jSONTokener0.syntaxError("`P");
      jSONObject0.accumulate("", byte0);
      jSONTokener0.skipTo('!');
      jSONObject2.isNull("d{{tP&V}uH5,MgBX");
      jSONObject0.opt("d{{tP&V}uH5,MgBX");
      jSONObject1.put("VzKaEE0)Z78o2", (double) 63754);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.3579778549873245
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Short short0 = new Short((short)5203);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      Short.toUnsignedLong((short)5203);
      stringArray0[2] = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put("JSON does not allow non-finite numbers.", (Object) short0);
      HashMap<Boolean, JSONObject> hashMap2 = new HashMap<Boolean, JSONObject>();
      HashMap<Long, JSONObject> hashMap3 = new HashMap<Long, JSONObject>();
      jSONObject0.put("", 0.0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "val";
      JSONTokener jSONTokener0 = new JSONTokener("val");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of val
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.271899083808096
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Long long0 = new Long(2712L);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "[";
      stringArray0[1] = "lo";
      stringArray0[2] = " at character ";
      stringArray0[3] = "par";
      stringArray0[4] = "^w@@A(q";
      stringArray0[5] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[6] = "wheel.json.JSONTokener";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      long long1 = jSONObject0.optLong("G5sX-]MsT_*t");
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("val");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getDouble("val");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"val\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.6359764629668248
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Float float0 = new Float((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      JSONObject.valueToString("BWZF.cQK}=-2y$hs", 53, 53);
      JSONObject.testValidity(double0);
      jSONObject0.optInt("\"java.lang.String@0000000010\"", 53);
      jSONObject0.optLong("max", (long) 53);
      jSONObject1.toString();
      jSONObject0.optString("\"java.lang.String@0000000010\"", "");
      JSONObject jSONObject2 = jSONObject1.put("", false);
      Double.isFinite(0.0);
      StringWriter stringWriter0 = new StringWriter(53);
      StringWriter stringWriter1 = new StringWriter();
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject3 = new JSONObject();
      jSONObject2.names();
      jSONObject3.toString(53, 53);
      jSONObject1.keys();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000008\":java.lang.Double@0000000009,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      JSONObject jSONObject4 = new JSONObject(jSONTokener0);
      jSONObject1.write(stringWriter1);
      try { 
        jSONObject4.getLong("}8b6#~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}8b6#~\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ": ";
      stringArray0[1] = "Expected '";
      stringArray0[2] = "issum";
      stringArray0[3] = "[YUVsRA<;,!G";
      stringArray0[4] = "3AHN";
      stringArray0[5] = "q;30^eYtr$f^!@4l.w";
      stringArray0[6] = ".";
      stringArray0[7] = "USQxOvHkk( O";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string0 = jSONObject0.optString(".");
      assertEquals("", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = new Boolean("/Vt7ue");
      Float.sum(622.8F, 1.0F);
      Float.min(623.8F, (-1928.7863F));
      Float.max(623.8F, 623.8F);
      Float.sum((-1928.7863F), 511.7F);
      Float.min(0.0F, (-1192.9344F));
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.8018332764047933
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z_9:O+\"";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("$ R", "z_9:O+\"");
      Double.sum(927.0, 0.0);
      String string0 = "G@AFxCq:/Df^8$s";
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) null);
      jSONObject2.getString("$ R");
      jSONObject2.optBoolean("z_9:O+\"", false);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-1));
      jSONObject2.put("get", 0.0);
      JSONObject jSONObject3 = new JSONObject();
      jSONArray0.optJSONObject((-28734958));
      try { 
        jSONArray0.getJSONObject(97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[97] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Integer integer0 = new Integer((-732));
      Integer.getInteger("", integer0);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Double.sum((-732), (-1.0));
      JSONObject.doubleToString(0.49217061368235926);
      Boolean.valueOf(false);
      Boolean.compare(true, false);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("isvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of isvalueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Short short0 = new Short((short) (-528));
      Short.toUnsignedLong((short) (-528));
      Short.toUnsignedInt((short) (-1782));
      JSONTokener jSONTokener0 = new JSONTokener("`P");
      Byte byte0 = new Byte((byte) (-40));
      jSONTokener0.syntaxError("`P");
      Float.min((short) (-1782), 0.0F);
      Float.max((byte) (-40), (-1928.7863F));
      Float.min(65008L, (-380.927F));
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.9439981771714585
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Integer integer0 = new Integer((-732));
      Integer.toUnsignedString((-732));
      Integer.min((-732), (-732));
      Integer.toUnsignedLong((-732));
      Integer integer1 = new Integer((-732));
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.putOpt("4294966564", hashMap1);
      jSONObject1.append("h}z(d}.Huu", (Object) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean1 = linkedList0.add("toS");
      jSONObject1.put("", (Collection) linkedList0);
      Double double0 = new Double((-732));
      JSONObject.valueToString(double0);
      boolean boolean2 = Double.isFinite(4294966564L);
      assertTrue(boolean2 == boolean1);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.260048585331333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      jSONObject0.put("~Mv|oV2N`", (-1.0));
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.putOpt("su", "~Mv|oV2N`");
      JSONObject jSONObject2 = jSONObject1.append("true", "");
      Boolean boolean1 = new Boolean("true");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double.max(456.855758, (-1.0));
      linkedList0.add("toS");
      jSONObject0.put("Vey", (Collection) linkedList0);
      jSONObject0.put("Vey", (Map) hashMap0);
      JSONObject.valueToString(jSONObject0);
      Double.isFinite(456.855758);
      JSONObject jSONObject3 = jSONObject1.putOpt("", jSONObject2);
      try { 
        jSONObject3.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "m$lon`@OKE2XBRd";
      JSONObject jSONObject1 = jSONObject0.put("m$lon`@OKE2XBRd", 2141);
      try { 
        jSONObject1.getJSONArray("m$lon`@OKE2XBRd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m$lon`@OKE2XBRd\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.2677946372884996
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(45);
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Long long0 = new Long((-1347L));
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap1);
      Float float0 = new Float(0.0);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z_9:O+\"";
      stringArray0[1] = "!X.~";
      stringArray0[2] = "6C]|)w(U!QlgLY3T6H";
      stringArray0[3] = "_@3";
      stringArray0[4] = "";
      stringArray0[5] = "U'";
      stringArray0[6] = "()M?,2>Ue(e/6eS";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      double double0 = jSONObject0.optDouble("()M?,2>Ue(e/6eS", Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.515707952085713
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Integer integer0 = new Integer(13);
      Integer integer1 = new Integer(45);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Long long0 = new Long((-1347L));
      Long.sum(45, (-1961L));
      Integer integer2 = new Integer(45);
      Byte byte0 = new Byte((byte)0);
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "g\"";
      stringArray0[1] = "g\"";
      stringArray0[2] = "g\"";
      stringArray0[3] = "g\"";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Double double0 = new Double(1982.2469);
      jSONObject0.putOpt("g\"", double0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer integer2 = new Integer((-732));
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      Long long0 = new Long((-732));
      Integer integer3 = new Integer((-732));
      Integer integer4 = new Integer((-471));
      Long.compareUnsigned((-39L), (-1L));
      Float float0 = new Float((double) 13);
      Long long1 = new Long(0L);
      Float float1 = new Float((float) (-471));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(float1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(45);
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Integer integer2 = new Integer((-732));
      Integer integer3 = new Integer(45);
      Integer.sum(4, 1604);
      Integer integer4 = new Integer((-465));
      Integer.getInteger(" at character ", integer4);
      HashMap<Boolean, Integer> hashMap3 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap4 = new HashMap<Integer, String>();
      hashMap4.put(integer4, " at character ");
      Short short0 = new Short((short)2389);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("]T/r.t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ]T/r.t
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "";
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      String string1 = "true";
      Boolean boolean1 = new Boolean("true");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double.max((-1.0), (-1896.56226807679));
      linkedList0.add((String) null);
      JSONTokener jSONTokener0 = new JSONTokener("{D0J'");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {D0J'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      short short1 = (short) (-1782);
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.3333350382255085
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      int int0 = 218;
      Long.divideUnsigned(0L, 1334L);
      jSONObject0.toString(218, 218);
      jSONObject0.isNull("");
      String string0 = "";
      jSONObject0.optLong("");
      JSONObject.valueToString(long0);
      try { 
        jSONObject0.getDouble("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": \\\"java.lang.Class@0000000003\\\"}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.148205587729735
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(45);
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Short short0 = new Short((short)5203);
      String[] stringArray0 = new String[16];
      Short.toUnsignedLong((short) (-450));
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = "JSON does not allow non-finite numbers.";
      jSONObject0.put("JSON does not allow non-finite numbers.", (Object) short0);
      HashMap<Boolean, JSONObject> hashMap3 = new HashMap<Boolean, JSONObject>();
      HashMap<Long, JSONObject> hashMap4 = new HashMap<Long, JSONObject>();
      JSONObject.valueToString(jSONObject0, 45, (-2266));
      jSONObject0.optDouble("in");
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.4340412225950483
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      Long.divideUnsigned(1L, 372L);
      int int0 = 43;
      jSONObject0.toString(43, 51);
      jSONObject0.isNull("Xv'FAi.6");
      jSONObject1.optLong("] is not a Boolean.");
      JSONObject.valueToString("Xv'FAi.6");
      try { 
        jSONObject1.getDouble("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Z8v;)fn";
      stringArray0[1] = "\r";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "G@\"a";
      stringArray0[5] = "M1.#C)rq /Rn:[0nB";
      stringArray0[6] = "{}";
      stringArray0[7] = "-8+";
      stringArray0[8] = ")U5xq:UR|SEJME^";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      try { 
        jSONObject0.append((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.6120102123772964
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Short short0 = new Short((short) (-528));
      Short.toUnsignedLong((short) (-528));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("", 65008L);
      JSONObject jSONObject2 = jSONObject0.putOpt("9@,g6qosh1A@", short0);
      jSONObject2.getLong("9@,g6qosh1A@");
      JSONObject.getNames((Object) jSONObject2);
      jSONObject1.isNull("");
      String string0 = "`P";
      jSONObject2.optString((String) null, "`P");
      JSONTokener jSONTokener0 = new JSONTokener("`P");
      Byte byte0 = new Byte((byte) (-40));
      jSONTokener0.syntaxError("`P");
      JSONObject jSONObject3 = jSONObject0.accumulate("", byte0);
      String string1 = "Expected a ',' or '}'";
      JSONObject.valueToString(jSONObject3, (short) (-528), (short) (-1782));
      jSONTokener0.next();
      jSONTokener0.syntaxError("Expected a ',' or '}'");
      jSONTokener0.skipTo('\u001F');
      Boolean boolean0 = new Boolean("`P");
      Byte.toUnsignedInt((byte) (-40));
      jSONObject1.optLong("", (-668L));
      jSONObject0.opt("d{{tP&V}uH5,MgBX");
      String string2 = "-21C+h\"1c5+'|FP+$";
      jSONObject3.put("-21C+h\"1c5+'|FP+$", 0L);
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.8870599309181906
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      hashMap0.keySet();
      Boolean boolean0 = Boolean.valueOf("gP/");
      Integer integer0 = new Integer(44);
      hashMap0.put(boolean0, integer0);
      Boolean boolean1 = new Boolean("gP/");
      jSONObject0.putOpt("gP/", hashMap0);
      Float float0 = new Float(0.0F);
      JSONObject.valueToString(hashMap0, (-3678), (-3678));
      Integer integer1 = new Integer((-3678));
      String string0 = " at character ";
      Integer integer2 = new Integer((-3678));
      Integer integer3 = new Integer((-3678));
      Integer.getInteger(" at character ", integer2);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      Integer.getInteger("gettBStr1ng");
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      short short0 = (short)2389;
      Integer.compareUnsigned(1733, 1733);
      Integer.toUnsignedLong(128);
      Short short1 = new Short((short)2389);
      Float float1 = new Float((double) 0.0F);
      try { 
        Integer.decode(" at character ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" at character \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-5009));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(45);
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer(13);
      Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Short short0 = new Short((short)5203);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      Short.toUnsignedLong((short)5203);
      stringArray0[2] = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put("JSON does not allow non-finite numbers.", (Object) short0);
      HashMap<Boolean, JSONObject> hashMap3 = new HashMap<Boolean, JSONObject>();
      HashMap<Long, JSONObject> hashMap4 = new HashMap<Long, JSONObject>();
      jSONObject0.put("", (Map) hashMap0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.245171589411516
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-1463);
      jSONObject0.put("false", (-1463));
      String string0 = "getmax";
      JSONObject jSONObject1 = jSONObject0.put("getmax", (-1463));
      String string1 = "bX4SSR)Z{'C2sJ#8P O";
      JSONObject jSONObject2 = jSONObject1.append("bX4SSR)Z{'C2sJ#8P O", (Object) null);
      Byte byte0 = new Byte((byte)9);
      jSONObject0.optInt((String) null);
      try { 
        jSONObject2.append("getmax", byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[getmax] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.5331598289492039
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      boolean boolean0 = jSONObject0.optBoolean("?=q7aRN q_epV\"(", true);
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'";
      stringArray0[1] = "false";
      stringArray0[2] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[3] = "O3g~?~[`@[";
      stringArray0[4] = "getdoubleToLongBits";
      stringArray0[5] = "t?v}~'$,KmQ";
      stringArray0[6] = "] is not a Boolean.";
      stringArray0[7] = "&W6[qsgX0";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getInt("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initial value should be a string or collection or array.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("isvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0042424730540764
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Integer integer0 = new Integer(827);
      Integer integer1 = new Integer(91);
      Integer.getInteger("isdoubleToLongBits", integer1);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Integer.getInteger("isdoubleToLongBits", 91);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((double) 91);
      Float.sum(0.0F, 827);
      Float.min(2432.3F, (-1.0F));
      Float.sum((-1.0F), (-3890.62F));
      Float.max((-3890.62F), (-1.0F));
      Float.sum((-3890.62F), 0.0F);
      Float.min((-64.86F), 0.0F);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.8000120331977751
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.326158222891455
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject2 = jSONObject1.append("true", "");
      Boolean boolean1 = new Boolean("true");
      String string0 = "zV\\'y";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double.isFinite((-1.0));
      JSONObject jSONObject3 = jSONObject0.put("zV'y", (Collection) linkedList0);
      jSONObject3.toString();
      jSONObject0.put("zV'y", (Map) hashMap0);
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject4 = jSONObject1.putOpt("", jSONObject2);
      jSONObject0.optJSONObject("<X7");
      jSONObject1.get("");
      try { 
        jSONObject4.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.289817848657825
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      hashMap0.keySet();
      jSONObject0.isNull("gP/");
      jSONObject0.putOpt("gP/", hashMap0);
      Float float0 = new Float(0.0F);
      JSONObject.valueToString(hashMap0, (-3678), (-3678));
      Integer integer0 = new Integer((-3678));
      Integer integer1 = new Integer((-3678));
      Integer integer2 = new Integer((-3678));
      Integer integer3 = Integer.getInteger(" at character ", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Integer.toUnsignedLong(128);
      Short short0 = new Short((short)2389);
      Float float1 = new Float((double) 0.0F);
      Float.max(1391.91F, 0.0F);
      JSONObject.valueToString(integer3);
      HashMap<Byte, Object> hashMap3 = new HashMap<Byte, Object>();
      jSONObject0.put("+UJH|Pa;&`H", (Map) hashMap1);
      try { 
        jSONObject0.getLong("SM5`!&$)o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"SM5`!&$)o\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Integer integer0 = new Integer((-732));
      Integer integer1 = new Integer((-732));
      Integer.getInteger("", integer1);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Double.sum((-732), (-1.0));
      Integer.max((-732), 40);
      Boolean.valueOf(false);
      Boolean.compare(false, false);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.2055983590263932
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z_9:O+\"";
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "$ R";
      JSONObject jSONObject1 = jSONObject0.putOpt("$ R", "z_9:O+\"");
      Double.sum(927.0, 0.0);
      String string1 = "G@AFxCq:/Df^8$s";
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) null);
      jSONObject2.getString("$ R");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('Q');
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.2446725381717776
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Long long0 = new Long(14L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Integer integer0 = new Integer(13);
      Integer integer1 = new Integer(218);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Long long1 = new Long(14L);
      Long.sum((-1524L), 14L);
      Integer integer2 = new Integer(13);
      Byte byte0 = new Byte((byte)106);
      Float float0 = new Float(0.0);
      String string0 = JSONObject.numberToString(integer1);
      assertNotNull(string0);
  }
}
