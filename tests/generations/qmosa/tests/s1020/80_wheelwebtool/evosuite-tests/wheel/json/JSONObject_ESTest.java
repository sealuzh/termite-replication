/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 23:55:55 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9844935290697798
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Float float1 = new Float(0.0F);
      hashMap1.put("gettoHexString", float1);
      Float float2 = new Float(0.0);
      Float float3 = new Float(0.0F);
      hashMap1.put("6r?/aqBOpMe", float3);
      Float.max(0.0F, 0.0F);
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      Float float4 = new Float((double) 0.0F);
      hashMap2.put("6r?/aqBOpMe", float4);
      hashMap1.put("isparseDouble", float0);
      HashMap<String, Float> hashMap3 = new HashMap<String, Float>();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("U?h%)4gdo.@", jSONArray0);
      Integer integer0 = new Integer(8);
      assertEquals(8, (int)integer0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-62164681));
      Float.sum(0, 0.0F);
      Float.sum(0.0F, 2881.9583F);
      Float float0 = new Float((double) 0);
      String string0 = JSONObject.doubleToString((-62164681));
      assertEquals("-6.2164681E7", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5301635638340714
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, 2517.0);
      Double.min(0.0, (-1232.842069315157));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("]", double0);
      Double.min(2517.0, (-11.54863564722));
      Double.sum(2006.6138068361, 1471.0737);
      Double.min(2517.0, 2517.0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.append("get", "]");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("int", (Collection) linkedList0);
      boolean boolean1 = new Boolean("lFqH");
      jSONObject1.put("Fg!D]z]`", 745);
      jSONObject2.put("</_HP}7%^P", (Object) "get");
      JSONArray jSONArray0 = jSONObject1.getJSONArray("get");
      Boolean.getBoolean((String) null);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      jSONObject2.toJSONArray(jSONArray0);
      jSONObject1.optJSONArray("Fg!D]z]`");
      try { 
        jSONObject1.getJSONObject("</_HP}7%^P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<\\/_HP}7%^P\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.491718123649689
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      hashMap0.put(")Dy(s", (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "vm)$0zr?c[WQ";
      Float float0 = new Float(0.0);
      hashMap0.put("vm)$0zr?c[WQ", float0);
      jSONObject0.isNull("issubstring");
      Short short0 = new Short((short)92);
      Boolean boolean0 = new Boolean("mbf)|w+H%W/&");
      Byte byte0 = new Byte((byte) (-128));
      JSONObject jSONObject1 = jSONObject0.append("mbf)|w+H%W/&", byte0);
      jSONObject0.optJSONObject("mbf)|w+H%W/&");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      hashMap1.clone();
      JSONObject jSONObject2 = jSONObject1.put("]Nul key.", (Map) hashMap0);
      jSONObject2.getJSONObject("]Nul key.");
      String string1 = ",NDdQ[uyIk|T_ZH\\QB";
      try { 
        jSONObject1.getInt("vm)$0zr?c[WQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vm)$0zr?c[WQ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.528169125208633
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "null";
      Boolean boolean0 = new Boolean("null");
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      JSONObject jSONObject1 = jSONObject0.put("@", false);
      jSONObject0.names();
      jSONObject1.accumulate("null", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(2938);
      StringWriter stringWriter1 = stringWriter0.append('1');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0, 2938, 2938);
      // Undeclared exception!
      jSONObject0.write(stringWriter2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4946718996596133
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-506.25431285973707));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("]", double0);
      Double.min(2517.0, (-11.54863564722));
      Double.sum(2006.6138068361, 1471.0737);
      Double.min(2517.0, 2517.0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject2 = jSONObject0.append("get", "]");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.put("int", (Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.put("Fg!D]z]`", 745);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject4 = jSONObject1.append(" at character ", jSONArray0);
      jSONObject3.opt("nOyf>");
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      jSONObject4.toJSONArray(jSONArray0);
      jSONObject2.optJSONArray("int");
      try { 
        jSONObject2.getJSONObject("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3753793274512747
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(2174.5435);
      Double.isFinite(0.0);
      Double.max(Double.NaN, (-407.7518387));
      Double.max((-407.7518387), (-407.7518387));
      JSONObject jSONObject1 = new JSONObject(double0);
      JSONObject jSONObject2 = jSONObject0.putOpt("]", jSONObject1);
      Byte.compare((byte) (-11), (byte) (-78));
      Integer integer0 = new Integer((byte) (-25));
      jSONObject1.isNull("fUrI4");
      Boolean boolean0 = Boolean.FALSE;
      Integer integer1 = new Integer((byte) (-11));
      Integer integer2 = new Integer(1963);
      Float float0 = new Float((-1544.0));
      JSONObject.numberToString(float0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject2.append((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7604522029057335
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Float float0 = new Float((float) (byte)0);
      String string0 = "iscomputeIfPresent";
      hashMap1.put("iscomputeIfPresent", (Float) null);
      JSONObject jSONObject0 = new JSONObject();
      hashMap1.put("] is not a Boolean.", float0);
      String string1 = null;
      jSONObject0.isNull((String) null);
      Short short0 = new Short((short) (-1466));
      Boolean boolean0 = new Boolean("getdescendingIterator");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("in", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("int", 713);
      jSONObject2.getJSONArray("in");
      Boolean.getBoolean((String) null);
      JSONObject jSONObject3 = jSONObject2.put("' and instead saw '", true);
      try { 
        jSONObject3.put((String) null, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.893150787703529
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      Integer integer0 = new Integer(2128);
      JSONObject jSONObject1 = new JSONObject((Object) "null");
      Object object0 = new Object();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-1096), 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.115668629851405
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      JSONObject jSONObject1 = jSONObject0.put("@", false);
      try { 
        jSONObject1.getInt("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Double double0 = new Double(1.0);
      Float float0 = new Float(Double.NaN);
      HashMap<Long, String> hashMap3 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap4 = new HashMap<Long, String>();
      Double double1 = new Double(Double.NaN);
      Float float1 = new Float(1.0);
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3711368317885637
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-514.09));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("]", double0);
      jSONObject0.put("]", (-5678));
      Double.sum(2006.6138068361, 1471.0737);
      String string0 = "get";
      Double.min(2517.0, 2517.0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.append("get", "]");
      jSONObject1.getJSONArray("get");
      JSONObject jSONObject2 = jSONObject1.put("] is not a number.", (boolean) boolean0);
      try { 
        jSONObject2.getJSONArray("]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2620471559051687
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double double0 = new Double(33.73588949958376);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("com", double0);
      Byte byte0 = new Byte((byte)34);
      Byte.compare((byte) (-25), (byte)123);
      String string0 = "#\\`%sejTz0lSLU*`";
      jSONObject0.put("#`%sejTz0lSLU*`", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#`%sejTz0lSLU*`";
      stringArray0[1] = "#`%sejTz0lSLU*`";
      stringArray0[2] = "#`%sejTz0lSLU*`";
      stringArray0[3] = "com";
      Byte byte1 = new Byte((byte)123);
      stringArray0[4] = "com";
      stringArray0[5] = "com";
      stringArray0[6] = "#`%sejTz0lSLU*`";
      Double.sum((-1372.189676185775), (-4705.3733426005));
      jSONObject1.put("sG+Jd(t3.3L3(wk", (-1371));
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{6'#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {6'#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.565394837118028
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Double double0 = new Double((-1862.018676));
      Float float0 = new Float(1772.650875899637);
      Byte.toUnsignedInt((byte)5);
      int int0 = Byte.compare((byte)0, (byte)85);
      Long long0 = new Long((byte)5);
      Long.max((-2255L), (byte)0);
      Long.compareUnsigned((-2539L), (-2539L));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6r?/aqBOpMe";
      stringArray0[1] = "6r?/aqBOpMe";
      Byte.toUnsignedLong((byte)0);
      Long long1 = new Long((-2539L));
      JSONObject.numberToString(long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int1 = jSONObject0.length();
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8753013613649663
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float.sum((-1210.475F), (-1210.475F));
      Float.sum(0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      Float.sum(790.26F, 0.0F);
      Double double0 = new Double((-1933.116));
      Object object0 = new Object();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = new Boolean("isnotify");
      JSONObject jSONObject0 = new JSONObject(linkedList1);
      double double1 = jSONObject0.optDouble("JSON does not allow non-finite numbers.");
      assertEquals(2, jSONObject0.length());
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Double double0 = new Double((-0.5652034380649087));
      Double.isFinite((-0.5652034380649087));
      Float float0 = new Float(0.0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Float float1 = new Float(1.0F);
      Byte byte0 = new Byte((byte)3);
      Byte.toUnsignedInt((byte) (-42));
      Byte.toUnsignedLong((byte)10);
      String[] stringArray0 = new String[3];
      Byte.toUnsignedLong((byte) (-42));
      stringArray0[0] = "7v";
      stringArray0[1] = "7v";
      Byte.toUnsignedInt((byte)3);
      Byte.compare((byte)3, (byte)3);
      stringArray0[2] = "7v";
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4641428564849335
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double((-0.5652034380649087));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("HD3", 2128);
      Byte byte0 = new Byte((byte)51);
      Object object0 = new Object();
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      JSONObject.quote("!XYGkH/H@Zxv(xL&z");
      Double double1 = new Double(2128);
      Byte byte1 = new Byte((byte)51);
      jSONObject2.accumulate("iJN=(OJ8", byte1);
      jSONObject0.isNull("o`=hj`:m>7L2rk+\"t>");
      Short short0 = new Short((byte)51);
      Double double2 = new Double((short) (-878));
      JSONObject jSONObject3 = jSONObject2.append("\"!XYGkH/H@Zxv(xL&z\"", (Object) null);
      jSONObject1.opt("HD3");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-0.5652034380649087));
      linkedList0.addLast(float0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      Float float1 = new Float(328.89);
      linkedList1.offerLast(float1);
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      jSONObject1.optInt("o`=hj`:m>7L2rk+\"t>");
      jSONObject2.getInt("iJN=(OJ8");
      try { 
        jSONObject3.get("!XYGkH/H@Zxv(xL&z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!XYGkH/H@Zxv(xL&z\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.637119420043846
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-514.09));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("]", double0);
      Double.sum(2006.6138068361, 1471.0737);
      Double.min(2517.0, 2517.0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.append("get", "]");
      jSONObject1.optLong("]");
      jSONObject1.getJSONArray("get");
      Double.isFinite(0.0);
      Boolean.getBoolean((String) null);
      String string0 = "] is not a number.";
      jSONObject1.put("] is not a number.", (boolean) boolean0);
      String string1 = "getgetNames";
      JSONObject jSONObject2 = jSONObject0.put("gtH]\"RV!CK@3p;<yN", (-2287));
      try { 
        jSONObject2.getBoolean("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.483907738634915
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.min((-1.0), (-506.25431285973707));
      Double.max(0.0, (-506.25431285973707));
      Double.max((-506.25431285973707), (-1569.26485712974));
      Double.max(0.0, (-506.25431285973707));
      JSONObject jSONObject0 = new JSONObject(double0);
      Boolean boolean0 = new Boolean(false);
      Byte byte0 = new Byte((byte)115);
      JSONObject jSONObject1 = jSONObject0.append("i&IoKec", byte0);
      Float float0 = new Float(1481.035F);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "null";
      stringArray0[1] = "i&IoKec";
      JSONObject jSONObject2 = new JSONObject(boolean0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.join("r");
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject1.optJSONArray("i&IoKec");
      Boolean.logicalAnd(true, false);
      try { 
        jSONObject2.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4449847166752146
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = new Double(10.477891145223147);
      Double.isFinite(10.477891145223147);
      Double.sum(4614.93170935616, 0.0);
      Double.max(2517.0, (-506.25431285973707));
      Double.max(10.477891145223147, 10.477891145223147);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("]", double0);
      jSONObject1.optLong("]");
      int int0 = new Byte((byte)38);
      Integer integer0 = new Integer(125);
      jSONObject1.isNull("]");
      Boolean boolean0 = Boolean.FALSE;
      Integer integer1 = new Integer((byte)123);
      Integer integer2 = new Integer((byte)38);
      assertFalse(integer2.equals((Object)integer0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.481003359970002
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      hashMap0.put(" }nDy(s", (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[19];
      stringArray0[0] = "dUi<wm(9!(yK";
      stringArray0[14] = "gFID7Wu:O5.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("get", true);
      try { 
        jSONObject1.put("dUi<wm(9!(yK", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2360240670898524
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("", double0);
      Double.sum((-1.0), Double.NaN);
      Double double1 = new Double((-1.0));
      Double.max(0.0, (-1.0));
      int int0 = jSONObject0.optInt("");
      assertEquals(4, jSONObject0.length());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.655144929684302
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Short short0 = new Short((short)70);
      Short.toUnsignedLong((short)112);
      Short.toUnsignedInt((short) (-1782));
      Float float0 = new Float((double) (short)70);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      jSONObject1.isNull(":xxR<");
      String string0 = null;
      jSONObject0.isNull((String) null);
      String string1 = "has";
      Double.max(0.0, 112L);
      jSONObject1.optString("", (String) null);
      jSONObject0.optBoolean((String) null);
      jSONObject0.optBoolean((String) null);
      JSONTokener jSONTokener0 = new JSONTokener("do");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of do
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2623243581530907
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-506.25431285973707));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("]", double0);
      Double.sum(2006.6138068361, 1471.0737);
      String string0 = "get";
      Double.min(2517.0, 2517.0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.append("get", "]");
      jSONObject1.put("Fg!D]z]`", 745);
      String string1 = "L-5<ZuXU8Ve";
      int int0 = (-2583);
      jSONObject1.put("L-5<ZuXU8Ve", (-2583));
      String string2 = "null";
      Integer integer0 = new Integer(745);
      JSONObject jSONObject2 = jSONObject1.accumulate("get", integer0);
      Double double1 = new Double(2517.0);
      try { 
        jSONObject2.append("L-5<ZuXU8Ve", double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[L-5<ZuXU8Ve] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.55669481608901
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-514.09));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("]", double0);
      Double.sum(2006.6138068361, 1471.0737);
      Double.min(2517.0, 2517.0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject2 = jSONObject0.append("get", "]");
      JSONArray jSONArray0 = jSONObject2.getJSONArray("get");
      Boolean.getBoolean("]");
      jSONObject0.optBoolean(".", false);
      jSONObject2.put("] is not a number.", (boolean) boolean0);
      jSONObject0.append(":OB", jSONObject1);
      jSONObject0.opt("] is not a number.");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1538026784415054
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("m$lon`@OKE2XBRd", 2128);
      Long long0 = new Long((-3750L));
      JSONObject.getNames((Object) long0);
      Byte byte0 = new Byte((byte)0);
      JSONObject.quote("m$lon`@OKE2XBRd");
      jSONObject0.remove("m$lon`@OKE2XBRd");
      BiFunction<String, Object, Boolean> biFunction0 = (BiFunction<String, Object, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Boolean boolean0 = new Boolean("\"m$lon`@OKE2XBRd\"");
      JSONObject.getNames((Object) "\"m$lon`@OKE2XBRd\"");
      jSONObject1.optLong("SM9G2");
      JSONObject jSONObject2 = jSONObject0.put("\"m$lon`@OKE2XBRd\"", true);
      JSONObject jSONObject3 = new JSONObject((Object) "SM9G2");
      jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject4 = new JSONObject();
      jSONObject1.toString((int) (byte)0, (int) (byte)0);
      JSONObject jSONObject5 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject6 = new JSONObject((Object) "\"m$lon`@OKE2XBRd\"");
      JSONObject.quote("\"m$lon`@OKE2XBRd\"");
      jSONObject2.optBoolean("rev");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000026\": {},\n\"java.lang.String@0000000005\": java.lang.Boolean@0000000006\n}");
      Double double0 = new Double(35.2275748);
      jSONObject1.putOpt("{\n\"java.lang.String@0000000026\": {},\n\"java.lang.String@0000000005\": java.lang.Boolean@0000000006\n}", double0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject7 = new JSONObject(jSONTokener0);
      try { 
        jSONObject6.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4852842818676835
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{sVpH~ :r)");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 11 of {sVpH~ :r)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3208571285739152
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Double double0 = new Double((-2263.602913331045));
      Float float0 = new Float((-2263.602913331045));
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Object) ",");
      JSONObject jSONObject1 = new JSONObject("{}");
      jSONObject0.put("isisNaN", (Object) jSONObject1);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3663024951247453
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = new Double((-0.5652034380649087));
      Double double1 = new Double((-0.5652034380649087));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.accumulate("", double0);
      jSONObject1.put("", 382);
      jSONObject1.getLong("");
      Byte.compare((byte) (-25), (byte)123);
      Integer integer0 = new Integer(125);
      jSONObject0.isNull("");
      Boolean boolean0 = Boolean.FALSE;
      Integer integer1 = new Integer((-1715));
      Integer integer2 = new Integer(873);
      assertEquals(873, (int)integer2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7099284913365564
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-506.25431285973707));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      Float float0 = new Float(2517.0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Float> linkedList4 = new LinkedList<Float>(linkedList1);
      LinkedList<String> linkedList5 = new LinkedList<String>();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(")zb/^;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of )zb/^;
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6755586836166145
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt(".(]_P2L", object0);
      jSONObject0.optDouble("{-/6/0IOcZ", 1025.6);
      JSONObject.doubleToString((-1895.271120467783));
      String string0 = "1e;cMT25Mr";
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.optInt("1e;cMT25Mr");
      String string1 = ".\\)Wa=/";
      jSONObject1.optString(".)Wa=/", "");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("Q62S!A)T7BD+E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Q62S!A)T7BD+E
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6643499436060774
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-506.25431285973707));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("]", double0);
      Double.min(2517.0, (-11.54863564722));
      Double.sum(2006.6138068361, 1471.0737);
      Double.min(2517.0, 2517.0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.append("get", "]");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("int", (Collection) linkedList0);
      jSONObject1.put("Fg!D]z]`", 745);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("get");
      Boolean.getBoolean((String) null);
      JSONObject jSONObject3 = jSONObject1.put("] is not a number.", (boolean) boolean0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      jSONObject2.toJSONArray(jSONArray0);
      jSONObject3.optJSONArray("Fg!D]z]`");
      try { 
        jSONObject2.getJSONObject("h>5+vV6],qn&gWnhKo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"h>5+vV6],qn&gWnhKo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.993402914807878
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Double double0 = new Double(0.0);
      Double.isFinite(0.0);
      Double.max(0.0, 0.0);
      Double.max((-758.3289908683), 0.0);
      Long long0 = new Long(300L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, double0);
      Byte.compare((byte) (-25), (byte)11);
      Integer integer0 = new Integer(46);
      jSONObject1.isNull("w^boYl;Lqa3ym");
      Boolean boolean0 = Boolean.FALSE;
      Integer integer1 = new Integer((byte)11);
      assertEquals(11, (int)integer1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5809915180090193
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      Double.sum(2006.6138068361, (-809.0));
      jSONObject1.isNull("get");
      Long long0 = new Long(2341L);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      JSONObject jSONObject2 = new JSONObject(long0, stringArray0);
      Long long1 = new Long(2341L);
      JSONObject.valueToString(long1, 10, 10);
      Object object0 = new Object();
      jSONObject1.put("getsum", (Object) null);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.808463885562474
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("m$lon`@OKE2XBRd", 2128);
      Byte byte0 = new Byte((byte)0);
      jSONObject1.putOpt("wheel.json.JSONArray", "wheel.json.JSONArray");
      Double.sum(2006.6138068361, 1.0);
      jSONObject1.isNull("");
      jSONObject1.isNull("wheel.json.JSONArray");
      Short short0 = new Short((byte)0);
      JSONObject jSONObject2 = jSONObject0.append("\n", " P~OeUYL(Mg?");
      jSONObject2.opt((String) null);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rn{mf&|4Z";
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      JSONArray jSONArray1 = jSONObject3.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Double double0 = new Double((-2263.602913331045));
      Float float0 = new Float((-2263.602913331045));
      Double.max(0.0, 0.0);
      Float float1 = new Float(0.0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8058518250452344
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Float float0 = new Float((float) (byte)0);
      hashMap1.put("iscomputeIfPresent", (Float) null);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      Float float1 = new Float((double) (byte)0);
      hashMap2.put("wheel.json.JSONException", float1);
      Float.max((-1454.5447F), 1715.272F);
      HashMap<String, Float> hashMap3 = new HashMap<String, Float>();
      hashMap3.values();
      hashMap3.put("wheel.json.JSONException", float1);
      hashMap1.put("?dm!h>Aqihj", (Float) null);
      HashMap<String, Float> hashMap4 = new HashMap<String, Float>();
      hashMap1.putIfAbsent(" of ", float1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "iscomputeIfPresent";
      stringArray0[1] = "V9";
      stringArray0[2] = "V9";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer integer0 = new Integer((byte)0);
      JSONObject jSONObject2 = jSONObject1.putOpt("HPyL!V /Z{", (Object) null);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.678199178734155
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = new Double((-0.5652034380649087));
      Double.max((-0.5652034380649087), (-0.5652034380649087));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("", double0);
      Double.sum((byte)34, 0.0);
      Byte byte0 = new Byte((byte)34);
      JSONObject jSONObject1 = jSONObject0.put("#`%sejTz0lSLU*`", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#`%sejTz0lSLU*`";
      stringArray0[1] = "#`%sejTz0lSLU*`";
      stringArray0[2] = "#`%sejTz0lSLU*`";
      stringArray0[3] = "";
      jSONObject0.optLong("#`%sejTz0lSLU*`");
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "#`%sejTz0lSLU*`";
      JSONObject jSONObject2 = new JSONObject(double0, stringArray0);
      JSONObject.valueToString("", 10, 8);
      Object object0 = new Object();
      jSONObject0.put(".ts&{EW]%xhtctp", object0);
      double double1 = jSONObject1.optDouble("");
      assertEquals(6, jSONObject1.length());
      assertEquals((-0.5652034380649087), double1, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5418777316837105
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "]";
      jSONObject0.putOpt("]", double0);
      Double.sum(2006.6138068361, 1471.0737);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.append("get", "]");
      jSONObject1.getJSONArray("get");
      Boolean.getBoolean("]");
      jSONObject1.put("] is not a number.", (boolean) boolean0);
      jSONObject1.optBoolean("] is not a number.");
      JSONTokener jSONTokener0 = new JSONTokener("get");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of get
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2926115065591888
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Double double0 = new Double(3835.6594869868);
      BiFunction<Double, Boolean, Boolean> biFunction0 = (BiFunction<Double, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(3835.6594869868);
      Double.max(3835.6594869868, 3835.6594869868);
      Double.max(3835.6594869868, 3835.6594869868);
      JSONObject jSONObject0 = new JSONObject(double0);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.putOpt("", boolean0);
      Byte byte0 = new Byte((byte) (-49));
      Integer integer0 = new Integer(64);
      jSONObject1.isNull("null");
      Boolean boolean1 = Boolean.FALSE;
      Integer integer1 = new Integer(64);
      Integer integer2 = new Integer((-114));
      boolean boolean2 = jSONObject0.getBoolean("");
      assertEquals(4, jSONObject0.length());
      assertTrue(boolean2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.515923765284877
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      double double1 = new Float(2006.6138068361);
      jSONObject1.isNull("get");
      jSONObject1.isNull((String) null);
      Double.max((-886.71372), (-1.0));
      jSONObject0.optString(">KHv[\"", "getdoubleToRawLongBits");
      jSONObject0.optBoolean("has");
      jSONObject1.optBoolean("getdoubleToRawLongBits");
      String string0 = "0";
      jSONObject1.opt("0");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      try { 
        jSONObject1.getDouble("bN yYg1$\u0005aE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bN yYg1$\\u0005aE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5192232376208423
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double double0 = new Double(33.73588949958376);
      Double.max(33.73588949958376, 33.73588949958376);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      Byte byte0 = new Byte((byte)34);
      Byte.compare((byte) (-25), (byte)123);
      jSONObject0.isNull("");
      jSONObject0.isNull("joi");
      Double.max((-337.1046193), 3134.2558932);
      jSONObject0.optString("#`%sejTz0lSLU*`", (String) null);
      jSONObject1.optBoolean("_oJ(X");
      jSONObject1.optBoolean("KN'9");
      JSONTokener jSONTokener0 = new JSONTokener("KN'9");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of KN'9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.1441216640961644
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Double double0 = new Double((-2263.602913331045));
      Float float0 = new Float(603.1839171);
      Float float1 = new Float(Double.NaN);
      Float float2 = new Float(0.0);
      String string0 = JSONObject.quote("6r?/aqBOpMe");
      assertEquals("\"6r?/aqBOpMe\"", string0);
      
      JSONObject jSONObject0 = new JSONObject(float2);
      String string1 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.409603976430062
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("m$lon`@OKE2XBRd", 2128);
      Long long0 = new Long((-3750L));
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      JSONObject.quote("m$lon`@OKE2XBRd");
      jSONObject0.remove("m$lon`@OKE2XBRd");
      jSONObject1.put("", 3);
      String string0 = "null";
      Short short0 = new Short((short)1582);
      JSONObject jSONObject2 = new JSONObject(short0, stringArray0);
      Short short1 = new Short((byte)0);
      JSONObject jSONObject3 = jSONObject2.accumulate("null", short1);
      jSONObject3.put("", 2128);
      Float float0 = new Float(0.0F);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject4 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject4.getJSONObject("isF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isF\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1110942732940394
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "b_dJRi8#[Q'i3p";
      JSONObject jSONObject1 = jSONObject0.put("u95n", false);
      int int0 = 32;
      jSONObject0.optInt("b_dJRi8#[Q'i3p", 32);
      Byte.toUnsignedInt((byte)0);
      String string1 = "LF$hhx|kx-az[!l;O";
      JSONTokener jSONTokener0 = new JSONTokener("LF$hhx|kx-az[!l;O");
      JSONObject jSONObject2 = new JSONObject();
      Long long0 = new Long(1L);
      try { 
        jSONObject1.getDouble("u95n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u95n\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.7243641377536076
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      Double.sum(2006.6138068361, (-809.0));
      jSONObject1.isNull("get");
      JSONObject jSONObject2 = jSONObject0.append("get", "");
      jSONObject1.getDouble("");
      jSONObject2.optJSONObject("8V Gg>|<:=`mIu");
      Long long0 = new Long(3668L);
      Boolean boolean0 = Boolean.TRUE;
      Short short0 = new Short((short) (-2891));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8V Gg>|<:=`mIu";
      stringArray0[1] = "8V Gg>|<:=`mIu";
      stringArray0[2] = "";
      stringArray0[3] = "8V Gg>|<:=`mIu";
      stringArray0[4] = "";
      stringArray0[5] = "get";
      stringArray0[6] = "";
      JSONObject jSONObject3 = new JSONObject(short0, stringArray0);
      Integer integer0 = new Integer(137);
      jSONObject3.accumulate("8V Gg>|<:=`mIu", integer0);
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.746055506853717
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max((-506.25431285973707), (-1569.26485712974));
      Double.max(0.0, (-506.25431285973707));
      JSONObject jSONObject0 = new JSONObject(double0);
      Object object0 = new Object();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("null", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7277877809028
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Short short0 = new Short((short)70);
      Short.toUnsignedLong((short)112);
      Short.toUnsignedInt((short) (-1782));
      Float float0 = new Float((double) (short)70);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      Boolean.getBoolean(":xxR<");
      jSONObject1.optString("");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.getNames((Object) jSONArray0);
      jSONObject0.has("");
      jSONObject0.optDouble("", (double) (short) (-1782));
      jSONObject1.getString("");
      jSONObject0.getDouble("");
      jSONObject0.optJSONObject("");
      Long long0 = new Long((-1L));
      jSONObject0.accumulate("CXES&[ETd", "");
      try { 
        jSONObject1.getLong("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.618863199239252
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double.max(0.0, 0.0);
      Boolean boolean0 = new Boolean("null");
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      JSONObject jSONObject1 = jSONObject0.put("", false);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      stringWriter0.append(':');
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.put("null", 125);
      Integer integer0 = new Integer(125);
      jSONObject1.isNull("!9OiCV5wvC@.z");
      Boolean boolean1 = Boolean.FALSE;
      Integer integer1 = new Integer(16);
      jSONObject1.getString("");
      jSONObject1.optBoolean("$");
      assertEquals(4, jSONObject0.length());
      
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.put("r1-2nr73I%K!H5]cie", (-2548));
      jSONObject3.opt("!9OiCV5wvC@.z");
      double double0 = jSONObject3.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.3191809197829913
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max((-506.25431285973707), (-1569.26485712974));
      Double.max(0.0, (-506.25431285973707));
      JSONObject jSONObject0 = new JSONObject(double0);
      Object object0 = new Object();
      jSONObject0.putOpt("null", object0);
      Byte.compare((byte)103, (byte) (-51));
      Integer integer0 = new Integer((byte) (-51));
      jSONObject0.isNull("null");
      Boolean boolean0 = Boolean.FALSE;
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      Byte byte0 = new Byte((byte)87);
      Byte.toUnsignedInt((byte)50);
      Byte.toUnsignedLong((byte)50);
      Byte.toUnsignedLong((byte) (-9));
      Double double0 = new Double(0.0);
      Double.isFinite((byte)87);
      Double.min((-559.3596978384435), 0.0);
      Double.max(0.0, 2392.2);
      hashMap0.put(byte0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("8tW9$#Ms?i", hashMap0);
      try { 
        jSONObject0.put((String) null, 247L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6067773322010037
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Short short0 = new Short((short)70);
      Short.toUnsignedLong((short)112);
      Short.toUnsignedInt((short) (-1782));
      Float float0 = new Float((double) (short)70);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      Boolean.getBoolean(":xxR<");
      String string1 = "JSONArray initial value should be a string or collection or array.";
      jSONObject1.optString("JSONArray initial value should be a string or collection or array.");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float1 = new Float((double) 63754);
      linkedList0.add(float1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.getNames((Object) jSONArray0);
      String string2 = "";
      jSONObject0.has("");
      jSONObject0.optDouble("", (double) (short) (-1782));
      String string3 = null;
      try { 
        jSONObject1.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.3304732325706987
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, 2517.0);
      Double.min(0.0, (-1232.842069315157));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("]", double0);
      Double.min(2517.0, (-11.54863564722));
      Double.sum(2006.6138068361, 1471.0737);
      Double.min(2517.0, 2517.0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.append("get", "]");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.put("in", (Collection) linkedList0);
      Boolean.getBoolean("lFqH");
      jSONObject1.put("Fg!D]z]`", 745);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.removeAll(linkedList1);
      linkedList0.add("</_HP}7%^P");
      JSONTokener jSONTokener0 = new JSONTokener("]");
      jSONTokener0.back();
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      double double1 = jSONObject0.optDouble("Fg!D]z]`");
      assertEquals(7, jSONObject0.length());
      assertEquals(745.0, double1, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1171019303194956
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("m$lon`@OKE2XBRd", 2128);
      JSONObject jSONObject1 = jSONObject0.put("u95n", false);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject2.put((String) null, (Object) jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.146170560202267
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      Double.sum(2006.6138068361, (-809.0));
      jSONObject1.isNull("get");
      JSONObject jSONObject2 = jSONObject0.append("get", "");
      jSONObject2.opt("get");
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5820183568770028
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Z8v;)fn";
      stringArray0[1] = "\r";
      stringArray0[2] = "";
      JSONObject jSONObject0 = new JSONObject("G@\"a", stringArray0);
      Integer integer0 = new Integer(128);
      JSONObject jSONObject1 = new JSONObject(integer0, stringArray0);
      Integer.min(44, (-42833328));
      Integer integer1 = new Integer(336);
      jSONObject0.put("", 93);
      jSONObject1.append("] is not a JSONArray.", integer1);
      double double0 = jSONObject0.getDouble("");
      assertEquals(93.0, double0, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.1719330103601107
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "oOJ(%8v{?0t4";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("oOJ(%8v{?0t4", 123);
      jSONObject0.put("oOJ(%8v{?0t4", (Collection) null);
      JSONObject jSONObject2 = jSONObject0.put("oOJ(%8v{?0t4", (Object) "oOJ(%8v{?0t4");
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.932481400699733
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(2938);
      JSONTokener jSONTokener0 = new JSONTokener("WPe,(k+J`~3!$>5+9M");
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener("isN");
      JSONTokener jSONTokener2 = new JSONTokener(" k1v/@1");
      jSONTokener2.back();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of isN
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.4264889264349754
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      jSONObject0.put("@", false);
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 2938;
      CharBuffer.allocate(2938);
      stringWriter0.append(':');
      int int1 = (-1015);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 2938, (-1015));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.1455451693329737
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-514.09));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("]", double0);
      Double.sum(2006.6138068361, 1471.0737);
      Double.min(2517.0, 2517.0);
      JSONObject jSONObject1 = jSONObject0.append("get", "]");
      jSONObject1.getJSONArray("get");
      JSONTokener jSONTokener0 = new JSONTokener("get");
      jSONTokener0.back();
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONTokener jSONTokener0 = new JSONTokener("_')?8 md\b");
      jSONTokener0.nextClean();
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener("{o[");
      JSONTokener jSONTokener2 = new JSONTokener("null");
      jSONTokener2.next();
      jSONTokener2.nextClean();
      JSONTokener jSONTokener3 = new JSONTokener(".T$h4Rmq{5/9T`[");
      jSONTokener3.skipTo('u');
      jSONTokener3.nextValue();
      jSONTokener3.back();
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.29538640636597
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      JSONObject jSONObject1 = jSONObject0.put("@", false);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(2938);
      JSONObject jSONObject2 = jSONObject1.put("null", false);
      JSONObject jSONObject3 = jSONObject2.put("X)=Kxvhlds]ZR", false);
      jSONObject1.put("null", (Object) jSONObject3);
      jSONObject1.put("X)=Kxvhlds]ZR", (-3631));
      jSONObject1.accumulate("@", jSONObject2);
      jSONObject1.put("tHPeF$Z&f", (-3631));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject4 = new JSONObject(jSONObject2, stringArray0);
      JSONObject jSONObject5 = new JSONObject((Object) jSONObject4, stringArray0);
      try { 
        jSONObject1.getJSONObject("I|,D$r2/Y&Zp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"I|,D$r2/Y&Zp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.19408754118701
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Double double0 = new Double((-0.5652034380649087));
      Double double1 = new Double((-0.5652034380649087));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      jSONObject0.accumulate("", double0);
      String string1 = "";
      Byte byte0 = new Byte((byte)34);
      jSONObject1.put("Null pointer", 212L);
      Double.sum((byte)34, 0.0);
      Byte byte1 = new Byte((byte)34);
      Byte.compare((byte) (-25), (byte)123);
      Integer integer0 = new Integer(125);
      Integer integer1 = new Integer((-1715));
      Integer integer2 = new Integer(873);
      Byte byte2 = Byte.valueOf((byte)34);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9605959149962748
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-506.25431285973707));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("]", double0);
      JSONObject.valueToString(jSONObject0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.266557292908635
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Double double0 = new Double((-0.5652034380649087));
      Double.isFinite((-0.5652034380649087));
      Float float0 = new Float(0.0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Float float1 = new Float(1.0F);
      hashMap1.put("7v", float1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("V9", (Collection) linkedList0);
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      hashMap1.put("7v", (Float) null);
      Float.valueOf(0.0F);
      JSONObject jSONObject1 = jSONObject0.append("JSONArray[", (Object) null);
      jSONObject0.opt("iscopyValueOf");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      int int0 = jSONObject1.optInt("JSONArray[");
      assertEquals(3, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.43805879503139
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-506.25431285973707));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("]", double0);
      Byte.compare((byte)11, (byte) (-25));
      Integer integer0 = new Integer(125);
      jSONObject1.isNull("]");
      Boolean boolean0 = Boolean.FALSE;
      Integer integer1 = new Integer((byte)123);
      Integer integer2 = new Integer((byte)11);
      jSONObject0.get("]");
      try { 
        jSONObject1.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.5580626620908857
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double double0 = new Double((-0.5652034380649087));
      Double double1 = new Double((-0.5652034380649087));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.accumulate("", double0);
      jSONObject1.getLong("");
      Byte.compare((byte) (-25), (byte)123);
      Integer integer0 = new Integer(125);
      jSONObject0.isNull("");
      Boolean boolean0 = Boolean.FALSE;
      Integer integer1 = new Integer((-1715));
      Integer integer2 = new Integer(873);
      Short short0 = new Short((byte) (-25));
      String string0 = JSONObject.valueToString(short0, (byte)123, 35);
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8111428303362396
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      byte byte0 = (byte)0;
      JSONObject.getNames(jSONObject0);
      jSONObject0.optInt("b_dJRi8#[Q'i3p", (int) (byte)0);
      Byte.toUnsignedInt((byte)0);
      String string0 = "LF$hhx|kx-az[!l;O";
      JSONTokener jSONTokener0 = new JSONTokener("LF$hhx|kx-az[!l;O");
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject0.getDouble("u95n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u95n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float(0.0F);
      Float float1 = new Float((double) 0.0F);
      hashMap0.put((String) null, float1);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Float float2 = new Float((double) 0.0F);
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      hashMap2.put("iscomputeIfPresent", float1);
      Float.max((-1454.5447F), (-1454.5447F));
      HashMap<String, Float> hashMap3 = new HashMap<String, Float>();
      hashMap0.values();
      hashMap2.put(",:]}/\"[{;=#", (Float) null);
      Float float3 = new Float(1261.529);
      hashMap2.put("islongBitsToDouble", float3);
      HashMap<String, Float> hashMap4 = new HashMap<String, Float>();
      Float float4 = new Float(1261.529);
      hashMap0.putIfAbsent("?dm!h>Aqihj", float4);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.7850590104276165
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Double double0 = new Double(33.73588949958376);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("com", double0);
      Byte byte0 = new Byte((byte)34);
      byte byte1 = (byte)123;
      Byte.compare((byte) (-25), (byte)123);
      jSONObject0.put("#`%sejTz0lSLU*`", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#`%sejTz0lSLU*`";
      jSONObject1.optInt("com");
      stringArray0[1] = "#`%sejTz0lSLU*`";
      stringArray0[2] = "#`%sejTz0lSLU*`";
      stringArray0[3] = "com";
      Byte byte2 = new Byte((byte)123);
      stringArray0[4] = "com";
      JSONObject.valueToString(jSONObject0, 29, (-148));
      stringArray0[5] = "com";
      stringArray0[6] = "#`%sejTz0lSLU*`";
      Double.sum((-1372.189676185775), (-4705.3733426005));
      jSONObject1.put("sG+Jd(t3.3L3(wk", (-1371));
      try { 
        jSONObject1.getJSONObject("#`%sejTz0lSLU*`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#`%sejTz0lSLU*`\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.6034985759707863
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-514.09));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("]", double0);
      Double.sum(2006.6138068361, 1471.0737);
      Double.min(2517.0, 2517.0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject2 = jSONObject0.append("get", "]");
      JSONArray jSONArray0 = jSONObject2.getJSONArray("get");
      Boolean.getBoolean("]");
      jSONObject0.optBoolean(".", false);
      jSONObject2.put("] is not a number.", (boolean) boolean0);
      jSONObject0.append("get", jSONObject1);
      jSONObject0.opt("] is not a number.");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-269.025));
      linkedList0.add(float0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.1281868201432514
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Float float0 = new Float(2517.0);
      String string0 = "7v";
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      hashMap0.put("7v", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Short short0 = new Short((short)92);
      Double double1 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.append("V9", "V9");
      jSONObject1.opt("|21l4?ir{.hPY4");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float1 = new Float((-130.389458));
      linkedList0.addLast((Float) null);
      jSONObject0.optInt("7v", (int) (short)92);
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      LinkedList<Float> linkedList3 = new LinkedList<Float>(linkedList0);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      jSONObject1.optInt("JSONObject[");
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.5918755796612
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-506.25431285973707));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("]", double0);
      Double.sum(2006.6138068361, 1471.0737);
      Double.min(2517.0, 2517.0);
      JSONObject jSONObject2 = jSONObject0.append("get", "]");
      String string0 = "int";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.put("int", (Collection) linkedList0);
      jSONObject1.optDouble("get");
      jSONObject2.put("]", 745);
      jSONObject2.getJSONArray("get");
      Object object0 = JSONObject.NULL;
      jSONObject2.append("int", object0);
      try { 
        jSONObject2.append((String) null, jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.6923530727633636
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("sb6wt)Bii]MSQ", 2128);
      Long long0 = new Long(1L);
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Float float0 = new Float((double) (-3750L));
      hashMap1.put("sb6wt)Bii]MSQ", float0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "dUi<wm(9!(yK";
      stringArray0[1] = "m$lon`@OKE2XBRd";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      HashMap<JSONArray, Object> hashMap2 = new HashMap<JSONArray, Object>();
      jSONObject1.put("m$lon`@OKE2XBRd", (Map) hashMap0);
      jSONObject0.accumulate("m$lon`@OKE2XBRd", long0);
      try { 
        jSONObject3.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.060680845233058
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Short short0 = new Short((short)9);
      Short.toUnsignedLong((short)9);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("6r?/aqBOpMe", 39);
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      jSONObject0.optDouble("opDkJIs53,,\";@3Eup", (-1.0));
      JSONObject jSONObject1 = new JSONObject(double0);
      Float float0 = new Float((double) 9L);
      JSONTokener jSONTokener0 = new JSONTokener("H'qqSb|E`Ry'X");
      jSONTokener0.back();
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.903660626175515
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-514.09));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("]", double0);
      JSONObject.valueToString("+]tB>G};[kO]a6AwR/4");
      Double.isFinite((-514.09));
      jSONObject0.put("]", (-5678));
      Double.sum(2006.6138068361, 1471.0737);
      Double.min(2517.0, 2517.0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.append("get", "]");
      JSONArray jSONArray0 = jSONObject1.getJSONArray("get");
      JSONObject jSONObject2 = jSONObject1.put("] is not a number.", (boolean) boolean0);
      jSONObject0.toString();
      jSONObject1.append("Missing value", (Object) null);
      jSONObject0.opt("] is not a number.");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject1.optJSONArray("]");
      try { 
        jSONObject2.getJSONObject(":OB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":OB\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.266557292908635
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "vm)$0zr?c[WQ";
      Float float0 = new Float(0.0);
      hashMap0.put("vm)$0zr?c[WQ", float0);
      jSONObject0.isNull("issubstring");
      Double double0 = new Double(2305.04);
      JSONObject jSONObject1 = jSONObject0.append("false", (Object) null);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float1 = new Float(2305.04);
      linkedList0.addLast(float0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      LinkedList<Float> linkedList3 = new LinkedList<Float>(linkedList1);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      jSONObject1.optInt("lon");
      try { 
        jSONObject0.getInt("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Bad value from toJSONString: \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.87902640868881
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      String[] stringArray0 = new String[2];
      Byte.toUnsignedLong((byte)48);
      Byte.toUnsignedLong((byte)99);
      Byte.compare((byte)2, (byte) (-125));
      Byte.compare((byte)48, (byte)9);
      stringArray0[0] = "`h3ltOteLuF";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.optJSONArray("`h3ltOteLuF");
      String string0 = "";
      jSONObject0.optInt("");
      jSONObject0.has(stringArray0[1]);
      jSONObject0.optDouble("opDkJIs53,,\";@3Eup", (double) (byte)9);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.081182757666432
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = new Double(23.699594137094373);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("com", double0);
      Byte byte0 = new Byte((byte)34);
      byte byte1 = (byte)123;
      jSONObject0.put("#`%sejTz0lSLU*`", true);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "com";
      stringArray0[2] = "#`%sejTz0lSLU*`";
      stringArray0[3] = "com";
      Byte byte2 = new Byte((byte)123);
      stringArray0[4] = "com";
      stringArray0[6] = "#`%sejTz0lSLU*`";
      jSONObject1.put("sG+Jd(t3.3L3(wk", (-1371));
      try { 
        jSONObject1.getJSONObject("#`%sejTz0lSLU*`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#`%sejTz0lSLU*`\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      hashMap1.put("9+z", (Float) null);
      HashMap<Object, Double> hashMap2 = new HashMap<Object, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap2);
      int int0 = 35;
      try { 
        jSONObject0.put((String) null, 35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3871888877953718
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Double double0 = new Double((-2263.602913331045));
      Float float0 = new Float(1.0);
      Byte.toUnsignedInt((byte)5);
      Byte.compare((byte)5, (byte)44);
      Long long0 = new Long((-3230L));
      Long.max((-39), 5);
      Long.compareUnsigned(5L, (byte)44);
      Integer integer0 = Integer.valueOf((-1));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6r?/aqBOpMe";
      stringArray0[1] = "6r?/aqBOpMe";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Byte.toUnsignedLong((byte)5);
      try { 
        jSONObject0.getJSONObject("8+Tk6v{dvmT}5/vy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8+Tk6v{dvmT}5/vy\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.9018956404837546
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "()M?,2>Ue(e/6eS";
      JSONObject jSONObject1 = new JSONObject(long0, stringArray0);
      double double1 = jSONObject0.optDouble(stringArray0[0], 1.0);
      assertEquals(1.0, double1, 0.01);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.983027918061439
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double double1 = new Double((-2444.0541085));
      Short short0 = new Short((short)9);
      Short.toUnsignedLong((short)42);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("6r?/aqBOpMe", (-20664796));
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Double double2 = new Double(0.0);
      JSONObject jSONObject1 = new JSONObject(double2);
      Float float0 = new Float((double) (-20664796));
      JSONTokener jSONTokener0 = new JSONTokener("%71qc_frbYOSZ8~t;bx");
      JSONTokener jSONTokener1 = new JSONTokener("ue");
      jSONTokener1.back();
      assertFalse(jSONTokener1.equals((Object)jSONTokener0));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.010406679963535
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double(23.699594137094373);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("com", double0);
      Byte byte0 = new Byte((byte)34);
      byte byte1 = (byte)123;
      JSONObject jSONObject1 = jSONObject0.put("#`%sejTz0lSLU*`", true);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "com";
      stringArray0[2] = "#`%sejTz0lSLU*`";
      stringArray0[3] = "com";
      Byte byte2 = new Byte((byte)123);
      stringArray0[4] = "com";
      String string0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject1.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Double double0 = new Double((-2263.602913331045));
      Float float0 = new Float(603.1839171);
      Integer integer0 = new Integer(16);
      Double double1 = new Double(15.76864089649);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "6r?/aqBOpMe";
      stringArray0[1] = "6r?/aqBOpMe";
      stringArray0[2] = "6r?/aqBOpMe";
      stringArray0[3] = "6r?/aqBOpMe";
      stringArray0[4] = "6r?/aqBOpMe";
      stringArray0[5] = "6r?/aqBOpMe";
      stringArray0[6] = "6r?/aqBOpMe";
      stringArray0[7] = "6r?/aqBOpMe";
      stringArray0[8] = "6r?/aqBOpMe";
      Integer integer1 = new Integer((-484));
      Boolean boolean0 = new Boolean("eYI.>dL^',q");
      JSONObject.testValidity(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.0434774763971433
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("get");
      Short short0 = new Short((short) (-1403));
      Boolean boolean0 = new Boolean("get");
      JSONObject jSONObject1 = jSONObject0.append("na", hashMap0);
      Integer integer0 = new Integer((short) (-1403));
      JSONObject jSONObject2 = jSONObject1.putOpt("", "na");
      jSONObject0.optJSONObject("");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      jSONObject0.put("frvUo]@5p", (Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.put("get", (Collection) linkedList0);
      assertEquals(4, jSONObject2.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.9271776633243958
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optLong("has", 0L);
      jSONObject0.optDouble("has", (-142.44));
      jSONObject0.toString();
      String string0 = "F2(2[z?o3&";
      try { 
        jSONObject0.getDouble("F2(2[z?o3&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"F2(2[z?o3&\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.sum((-1210.475F), (-1210.475F));
      Float.sum(0.0F, 0.0F);
      Float.max(0.0F, (-1210.475F));
      Float.max(0.0F, (-2420.95F));
      Float.sum(0.0F, (-1.0F));
      Float.sum((-4123.1543F), 0.0F);
      Float.sum(0.0F, 0.0F);
      Float float1 = new Float(Double.NaN);
      Float float2 = new Float(0.0F);
      Float.sum(0.0F, 0.0F);
      Float.isFinite(0.0F);
      try { 
        JSONObject.numberToString(float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONTokener jSONTokener0 = new JSONTokener("_')?8 md\b");
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener("{o[");
      JSONTokener jSONTokener2 = new JSONTokener("null");
      jSONTokener2.nextClean();
      JSONTokener jSONTokener3 = new JSONTokener(".T$h4Rmq{5/9T`[");
      jSONTokener3.back();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.1266781109509454
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      JSONObject.valueToString("RjE~x2*_+{DW`!7Cq", 2892, 2892);
      Byte byte0 = new Byte((byte)0);
      String string0 = "RN?`X-N";
      JSONObject jSONObject1 = jSONObject0.put("isdoubleToLongBits", false);
      int int0 = (-1757);
      jSONObject1.toString(58, (-1757));
      try { 
        jSONObject1.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.8069337367078067
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-506.25431285973707));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("]", double0);
      Object object0 = new Object();
      jSONObject1.append("YO\"E^tlc`x%Q^", object0);
      Double.min(2517.0, (-11.54863564722));
      Double.sum(2006.6138068361, 1471.0737);
      String string0 = "get";
      Double.min(2517.0, 2517.0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject2 = jSONObject0.append("get", "]");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.put("int", (Collection) linkedList0);
      jSONObject2.put("Fg!D]z]`", 745);
      jSONObject2.getJSONArray("get");
      Boolean.getBoolean((String) null);
      JSONObject jSONObject3 = jSONObject2.put("] is not a number.", (boolean) boolean0);
      // Undeclared exception!
      jSONObject3.toString(745, 745);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONTokener jSONTokener0 = new JSONTokener("_')?8 md\b");
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener("{o[");
      JSONTokener jSONTokener2 = new JSONTokener("null");
      jSONTokener2.nextClean();
      JSONTokener jSONTokener3 = new JSONTokener("{o[");
      jSONTokener3.back();
      String string0 = JSONObject.quote("_')?8 md\b");
      assertEquals("\"_')?8 md\\b\"", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      Double double0 = new Double(3847.472091540914);
      BiFunction<Double, Boolean, Boolean> biFunction0 = (BiFunction<Double, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyDouble() , anyBoolean());
      hashMap0.compute(double0, biFunction0);
      hashMap0.put(double0, (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.9039004379591296
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-506.25431285973707));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("]", double0);
      Double.min(2517.0, (-11.54863564722));
      Double.sum(2006.6138068361, 1471.0737);
      Double.min(2517.0, 2517.0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.append("get", "]");
      Boolean.logicalAnd(true, true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("int", (Collection) linkedList0);
      jSONObject1.put("Fg!D]z]`", 745);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("get");
      Boolean.getBoolean((String) null);
      JSONObject jSONObject3 = jSONObject1.put("] is not a number.", (boolean) boolean0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      jSONObject2.toJSONArray(jSONArray0);
      jSONObject3.optJSONArray("Fg!D]z]`");
      Integer integer0 = new Integer(745);
      JSONObject jSONObject4 = new JSONObject(integer0);
      // Undeclared exception!
      jSONObject0.toString(4246);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.sum((-1210.475F), (-1210.475F));
      Float.sum(0.0F, 0.0F);
      Float.max(0.0F, 790.26F);
      JSONTokener jSONTokener0 = new JSONTokener("4+c]Sn8BChOam");
      jSONTokener0.skipTo('N');
      String string0 = JSONObject.valueToString((Object) null, (-2984), (-2984));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONTokener jSONTokener0 = new JSONTokener("_')?8 md\b");
      jSONTokener0.nextClean();
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener("{o[");
      JSONTokener jSONTokener2 = new JSONTokener("null");
      jSONTokener2.next();
      jSONTokener2.nextClean();
      JSONTokener jSONTokener3 = new JSONTokener(".T$h4Rmq{5/9T`[");
      jSONTokener3.skipTo('u');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "_')?8 md\b";
      jSONTokener1.next();
      jSONTokener0.back();
      jSONTokener3.skipTo('d');
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0, (-62353088), 2147483645);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{tDy");
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener(":9cS|NdCz#Ahiyv7H");
      jSONTokener0.next();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 47, 47);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.5053262207700677
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      byte byte0 = (byte)0;
      String string0 = "!gV!O-LW2<=Xb";
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Float float0 = new Float((float) (byte)0);
      hashMap1.put("iscomputeIfPresent", (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      Float float1 = new Float((double) (byte)0);
      Float.sum((-4021.0F), (-4021.0F));
      hashMap2.put("wheel.json.JSONException", float1);
      HashMap<String, Float> hashMap3 = new HashMap<String, Float>();
      hashMap3.put("wheel.json.JSONException", float1);
      hashMap1.put("?dm!h>Aqihj", (Float) null);
      Float float2 = Float.valueOf((float) (byte)0);
      HashMap<String, Float> hashMap4 = new HashMap<String, Float>();
      hashMap1.putIfAbsent(" of ", float2);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "iscomputeIfPresent";
      stringArray0[1] = "V9";
      stringArray0[2] = "V9";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Long.getLong("JSONObject[");
      JSONObject.valueToString((Object) null);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("iscomputeIfPresent");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of iscomputeIfPresent
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.4076692388877086
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "m$lon`@OKE2XBRd";
      JSONObject jSONObject1 = jSONObject0.put("m$lon`@OKE2XBRd", 2128);
      Byte byte0 = new Byte((byte)0);
      String string1 = "RN?`X-N";
      JSONObject jSONObject2 = jSONObject1.put("T}?s [K$!|xj&t1F", false);
      jSONObject2.toString((int) (byte)0, 278);
      JSONObject jSONObject3 = jSONObject0.put("X)=Kxvhlds]ZR", true);
      jSONObject3.put("getgetNames", (-2287));
      int int0 = 91;
      jSONObject3.put("null", 91);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "!gV!O-LW2<=Xb";
      stringArray0[6] = "RN?`X-N";
      stringArray0[2] = "null";
      stringArray0[3] = "X)=Kxvhlds]ZR";
      stringArray0[4] = "null";
      stringArray0[5] = "T}?s [K$!|xj&t1F";
      stringArray0[6] = "T}?s [K$!|xj&t1F";
      JSONObject jSONObject4 = new JSONObject();
      String string2 = ",\n";
      String string3 = "is";
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.545202527023502
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONTokener jSONTokener0 = new JSONTokener("_')?8 md\b");
      jSONTokener0.skipTo('0');
      jSONTokener0.nextClean();
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener("null");
      jSONTokener1.next();
      jSONTokener1.skipTo('_');
      jSONTokener1.nextClean();
      jSONTokener1.nextValue();
      jSONTokener0.skipTo('u');
      Boolean.getBoolean("E88");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.optJSONArray("isclear");
      try { 
        jSONObject0.getJSONObject("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.5743378653255435
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Float float0 = new Float((float) (byte)25);
      Float.sum(1726.0F, 423.75F);
      Float.isFinite(1726.0F);
      hashMap1.put("iscomputeIfPresent", float0);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      Float float1 = new Float((double) (byte)25);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("iscomputeIfPresent", hashMap0);
      Byte byte0 = new Byte((byte) (-53));
      Integer integer0 = new Integer(1582);
      jSONObject1.isNull("null");
      Boolean boolean0 = Boolean.FALSE;
      Integer integer1 = new Integer(1724);
      Integer integer2 = new Integer((byte)25);
      jSONObject1.optString("iscomputeIfPresent");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.5424582342311224
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.min((-1.0), (-506.25431285973707));
      Double.max(0.0, (-506.25431285973707));
      Double.max((-506.25431285973707), (-1569.26485712974));
      Double.max(0.0, (-506.25431285973707));
      JSONObject jSONObject0 = new JSONObject(double0);
      Object object0 = new Object();
      jSONObject0.putOpt("null", object0);
      Byte byte0 = new Byte((byte) (-51));
      Integer integer0 = new Integer((byte) (-51));
      jSONObject0.isNull("null");
      JSONTokener jSONTokener0 = new JSONTokener("null");
      jSONTokener0.skipTo('1');
      JSONObject.valueToString(jSONObject0, (-1693), 1485);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.6959944906365267
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      Double.sum(2006.6138068361, (-809.0));
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) null);
      jSONObject1.optBoolean("", false);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject2, 4106, 3);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double double0 = new Double(1298.661);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "isintern";
      stringArray0[1] = "gr-&s,";
      stringArray0[2] = "isreplace";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String string0 = jSONObject0.toString(8192);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max((-506.25431285973707), (-1569.26485712974));
      Double.max(0.0, (-506.25431285973707));
      JSONObject jSONObject0 = new JSONObject(double0);
      Integer integer0 = new Integer(11);
      Integer integer1 = new Integer(46);
      Integer integer2 = new Integer(128);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.403845232838391
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Double double0 = new Double((-0.5652034380649087));
      Double double1 = new Double((-0.5652034380649087));
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "";
      jSONObject0.putOpt("", double0);
      JSONObject jSONObject1 = jSONObject0.accumulate("", double0);
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter();
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = new Integer((-62164681));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(70);
      assertFalse(integer2.equals((Object)integer1));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "oOJ(%v{0t4";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.remove("lon");
      JSONObject jSONObject1 = new JSONObject();
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.521233945011687
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      double double1 = 2006.6138068361;
      Double.sum(2006.6138068361, (-809.0));
      jSONObject1.isNull("get");
      JSONObject jSONObject2 = jSONObject0.append("get", "");
      jSONObject0.remove("get");
      JSONTokener jSONTokener0 = new JSONTokener("LF$hhx|kx-az[!l;O");
      JSONObject jSONObject3 = new JSONObject();
      long long0 = 1L;
      Long long1 = new Long(1L);
      String string0 = "";
      jSONObject2.has("");
      jSONObject1.optDouble("oS\"X", (-1.0));
      try { 
        jSONObject2.getString(")0WKIa|81IRR_Wmy.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")0WKIa|81IRR_Wmy.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.785182093550305
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      hashMap0.put(" }nDy(s", (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "dUi<wm(9!(yK";
      jSONObject0.put("dUi<wm(9!(yK", false);
      stringArray0[1] = "gFID7Wu:O5.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.optDouble("gFID7Wu:O5.", 0.0);
      jSONObject0.put("dUi<wm(9!(yK", (Map) hashMap0);
      jSONObject2.accumulate("@qshoY4U3Fz~.Vh\"", hashMap0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Float float0 = new Float((float) (byte)0);
      hashMap1.put("iscomputeIfPresent", (Float) null);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      hashMap2.put("V9", (Float) null);
      Float float1 = new Float((double) (byte)0);
      hashMap2.put("wheel.json.JSONException", float1);
      Float.max((-1454.5447F), 1715.272F);
      HashMap<String, Float> hashMap3 = new HashMap<String, Float>();
      hashMap3.put("wheel.json.JSONException", float1);
      hashMap1.put("?dm!h>Aqihj", (Float) null);
      HashMap<String, Float> hashMap4 = new HashMap<String, Float>();
      hashMap1.putIfAbsent(" of ", float1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "iscomputeIfPresent";
      stringArray0[1] = "V9";
      jSONObject0.accumulate("V9", (Object) null);
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = new Double((-0.5652034380649087));
      Byte byte0 = new Byte((byte)51);
      JSONTokener jSONTokener0 = new JSONTokener("HD3");
      jSONTokener0.toString();
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener((String) null);
      JSONTokener jSONTokener2 = new JSONTokener("HD3");
      jSONTokener2.back();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.950089105224377
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = new Integer(69);
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.getString("getisNaN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getisNaN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Z8v;)fn";
      stringArray0[1] = "\r";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "G@\"a";
      stringArray0[5] = "M1.#C)rq /Rn:[0nB";
      stringArray0[6] = "{}";
      stringArray0[7] = "-8+";
      stringArray0[8] = ")U5xq:UR|SEJME^";
      Byte.toUnsignedInt((byte)10);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      try { 
        jSONObject0.append((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.3583399014112936
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "isnotifyAll";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.put("isnotifyAll", (-1L));
      JSONObject jSONObject3 = jSONObject1.put("ec8&J2i\"'swy+0%D/ny", 0L);
      assertSame(jSONObject1, jSONObject3);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.keys();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.715219496627562
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      JSONObject jSONObject1 = jSONObject0.put("@", false);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(2938);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Float float0 = new Float(1658.0);
      hashMap1.put("null", float0);
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      hashMap1.put("T,F9", (Float) null);
      Float.valueOf(1633.0536F);
      HashMap<String, Float> hashMap3 = new HashMap<String, Float>();
      Float float1 = Float.valueOf(0.0F);
      hashMap3.putIfAbsent("?dm!h>Aqihj", float1);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.096939400224178
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, 2517.0);
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.min(2517.0, (-11.54863564722));
      Double.sum((-1.0), 1471.0737);
      Float float0 = new Float((-11.54863564722));
      Byte.toUnsignedInt((byte)5);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "get";
      stringArray0[2] = "get";
      stringArray0[4] = "get";
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONTokener jSONTokener0 = new JSONTokener("_')?8 md\b");
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener("{o[");
      JSONTokener jSONTokener2 = new JSONTokener("null");
      jSONTokener2.nextClean();
      JSONTokener jSONTokener3 = new JSONTokener(".T$h4Rmq{5/9T`[");
      jSONTokener3.back();
      Integer integer0 = new Integer(15);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_')?8 md\b";
      stringArray0[1] = "null";
      stringArray0[2] = "_')?8 md\b";
      stringArray0[3] = ".T$h4Rmq{5/9T`[";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      double double1 = new Float(2517.0);
      Double.max((-1.0), (-1.0));
      Float float0 = new Float((-506.25431285973707));
      Float float1 = new Float((-344.8855));
      String string0 = JSONObject.quote("j]KG\";");
      assertEquals("\"j]KG\\\";\"", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "isnotifyAll";
      stringArray0[1] = "|aw^s,";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "isnotifyAll";
      stringArray1[2] = "|aw^s,";
      stringArray1[3] = "isnotifyAll";
      stringArray1[4] = "|aw^s,";
      stringArray1[5] = "isnotifyAll";
      stringArray1[6] = "isnotifyAll";
      stringArray1[7] = "isnotifyAll";
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("isnotifyAll");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.sum((-1210.475F), (-1210.475F));
      Float.sum((-0.4094417F), (-0.4094417F));
      Float.sum(0.0F, (-0.8188834F));
      Float.sum(0.0F, 0.0F);
      Float.sum(2553.0427F, 0.0F);
      Float.sum(1016.25714F, (-1.0F));
      Float float1 = new Float(0.0);
      Float float2 = new Float((-1701.7595F));
      Float.sum(1.0F, 2553.0427F);
      Float.isFinite(0.0F);
      String string0 = JSONObject.numberToString(float2);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.0273923328104524
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Double double0 = new Double((-2263.602913331045));
      Float float0 = new Float(603.1839171);
      Byte.toUnsignedInt((byte)5);
      int int0 = new Integer(5);
      Long long0 = new Long(5);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6r?/aqBOpMe";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Byte.toUnsignedLong((byte)10);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      try { 
        jSONObject1.getLong("6r?/aqBOpMe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6r?/aqBOpMe\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.9016010062582942
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      String string0 = "6r?/aqBOpMe";
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Double double0 = new Double((-2263.602913331045));
      Float float0 = new Float(603.1839171);
      Float.min((-2713.02F), 1.0F);
      Float.isFinite(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getDouble("6r?/aqBOpMe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6r?/aqBOpMe\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.6369843447527805
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("6r?/aqBOpMe", (int) (short) (-1782));
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Long long0 = new Long((short) (-1782));
      hashMap1.put(long0, "6r?/aqBOpMe");
      Long long1 = Long.valueOf((-1070L));
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Long, String> function1 = unaryOperator0.compose((Function<? super Long, ? extends String>) function0);
      hashMap0.computeIfAbsent(long1, function1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      jSONObject0.put("6r?/aqBOpMe", (Map) hashMap1);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.toString((int) (short) (-1782), 95);
      JSONObject jSONObject3 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject4 = new JSONObject(object0);
      jSONObject4.optBoolean("6r?/aqBOpMe");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject1.accumulate("IH>xJk>aB", hashMap1);
      try { 
        jSONObject1.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5186310872822124
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float(276.0F);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float1 = new Float(2419.03F);
      hashMap0.replace("in", float1);
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Double double0 = new Double(0.0);
      Float float2 = new Float((double) 276.0F);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.00684403947552
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      boolean boolean0 = jSONObject0.optBoolean("?=q7aRN q_epV\"(", true);
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.6624197626171715
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("m$lon`@OKE2XBRd", 2128);
      String string0 = "\\u";
      Float float0 = new Float(1.0F);
      jSONObject1.putOpt(string0, float0);
      jSONObject1.put("m$lon`@OKE2XBRd", (double) 1.0F);
      Double.sum((-808.5343630021298), (-808.5343630021298));
      jSONObject0.isNull(string0);
      jSONObject1.optLong("mi", (long) (-727));
      Integer integer0 = new Integer((-727));
      jSONObject1.optBoolean(string0, false);
      try { 
        jSONObject1.append("m$lon`@OKE2XBRd", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[m$lon`@OKE2XBRd] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max((-506.25431285973707), (-1569.26485712974));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((-1210.0F));
      linkedList0.add(float0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Float> linkedList2 = new LinkedList<Float>(linkedList1);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      linkedList3.offerFirst(float0);
      linkedList1.clear();
      linkedList1.add(float0);
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      Float float1 = new Float(0.0);
      Float float2 = new Float((-1.0F));
      Float.sum(0.0F, (-1210.0F));
      Float.isFinite(1.0F);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.343679987341
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      Float float0 = new Float((float) (byte)0);
      hashMap1.put("iscomputeIfPresent", (Float) null);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap2 = new HashMap<String, Float>();
      Float float1 = new Float((double) (byte)0);
      hashMap2.put("wheel.json.JSONException", float1);
      Float.max((-1454.5447F), 1715.272F);
      HashMap<String, Float> hashMap3 = new HashMap<String, Float>();
      Collection<Float> collection0 = hashMap3.values();
      hashMap3.put("wheel.json.JSONException", float1);
      hashMap1.put("wheel.json.JSONException", float0);
      hashMap1.put("?dm!h>Aqihj", (Float) null);
      HashMap<String, Float> hashMap4 = new HashMap<String, Float>();
      hashMap1.putIfAbsent(" of ", float1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "iscomputeIfPresent";
      stringArray0[1] = "V9";
      stringArray0[2] = "V9";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("A JSONArray text must start with '['", collection0);
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.343265739569494
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max((-506.25431285973707), (-1569.26485712974));
      Double.max(0.0, (-506.25431285973707));
      JSONObject jSONObject0 = new JSONObject(double0);
      Object object0 = new Object();
      jSONObject0.putOpt("null", object0);
      Byte byte0 = new Byte((byte) (-51));
      Integer integer0 = new Integer((byte) (-51));
      jSONObject0.isNull("null");
      Boolean boolean0 = Boolean.FALSE;
      Integer integer1 = new Integer((-62164681));
      Integer integer2 = new Integer(70);
      try { 
        jSONObject0.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.1455451693329737
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.max(2517.0, (-514.09));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("]", double0);
      Double.sum(2006.6138068361, (-1.0));
      Double.min(2517.0, 2517.0);
      JSONObject jSONObject1 = jSONObject0.append("get", "]");
      jSONObject1.getJSONArray("get");
      JSONTokener jSONTokener0 = new JSONTokener("get");
      jSONTokener0.back();
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.sum((-1210.475F), (-1210.475F));
      Float.sum(0.0F, 0.0F);
      Float.sum(0.0F, 0.0F);
      Float.sum(0.0F, 0.0F);
      Float.sum(2553.0427F, 0.0F);
      Float.sum(1016.25714F, (-1.0F));
      Float float1 = new Float(0.0);
      Float float2 = new Float((double) 0.0F);
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Double double0 = new Double((-2263.602913331045));
      Float float0 = new Float(810.2);
      Integer integer0 = new Integer(291);
      Double double1 = new Double(0.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(hashMap1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Short short0 = new Short((short)191);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Z_";
      stringArray0[1] = "!!eOgeXeF>~dw";
      stringArray0[2] = "sum";
      stringArray0[3] = "d:<B)bv";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      try { 
        jSONObject0.getJSONArray("d:<B)bv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"d:<B)bv\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONTokener jSONTokener0 = new JSONTokener("_')?8 md\b");
      jSONTokener0.nextClean();
      jSONTokener0.back();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      Float float0 = new Float((-1225.08F));
      linkedList2.offerFirst(float0);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      linkedList3.clear();
      Float float1 = new Float((-1225.08F));
      Float.max(3060.0F, (-3676.0F));
      linkedList3.add(float1);
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      LinkedList<Float> linkedList5 = new LinkedList<Float>(linkedList0);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of j
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.2519772423711797
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      Double double0 = new Double(3847.472091540914);
      BiFunction<Double, Boolean, Boolean> biFunction0 = (BiFunction<Double, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyDouble() , anyBoolean());
      hashMap0.compute(double0, biFunction0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = new String[1];
      String string0 = "{";
      stringArray0[0] = "{";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{tDy");
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener(":9cS|NdCz#Ahiyv7H");
      jSONTokener0.back();
      jSONTokener0.next();
      jSONTokener0.back();
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {tDy
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Double double0 = new Double(3847.472091540914);
      BiFunction<Double, Boolean, Boolean> biFunction0 = (BiFunction<Double, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(3847.472091540914);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      linkedList0.offerFirst(float0);
      linkedList0.clear();
      linkedList0.add(float0);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      LinkedList<Float> linkedList4 = new LinkedList<Float>(linkedList0);
      LinkedList<String> linkedList5 = new LinkedList<String>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      hashMap0.put(" }nDy(s", (Float) null);
      String string0 = "null";
      int int0 = 742;
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("u5<?]fwM");
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener("u5<?]fwM");
      jSONTokener1.back();
      jSONTokener1.next();
      jSONTokener1.back();
      jSONTokener0.skipTo('V');
      String string0 = JSONObject.valueToString(jSONObject0, 9, (-62353088));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.sum((-1210.475F), (-1210.475F));
      Float.sum(0.0F, 0.0F);
      Float.sum(0.0F, 0.0F);
      Float.sum(0.0F, 0.0F);
      Float.sum(2553.0427F, 0.0F);
      Float.sum(1016.25714F, (-1.0F));
      Float float1 = new Float(0.0);
      Integer integer0 = new Integer(570);
      Integer integer1 = new Integer(93);
      String string0 = JSONObject.valueToString(float0, 525, 1158);
      assertNotNull(string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.176248184796301
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Integer integer0 = new Integer(130);
      Integer integer1 = new Integer(16);
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object1);
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      Integer integer2 = new Integer(93);
      Integer integer3 = new Integer(64);
      jSONObject0.toString(93, (-1907));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.129029299502578
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.compare((short)1272, (short)4125);
      jSONObject0.optBoolean("_");
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Float float0 = new Float(3847.472091540914);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      linkedList0.offerLast(float0);
      LinkedList<Float> linkedList2 = new LinkedList<Float>();
      linkedList0.clear();
      linkedList0.add(float0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "toH";
      stringArray0[1] = "toH";
      stringArray0[2] = "toH";
      stringArray0[3] = "toH";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-62164681));
      Integer integer1 = new Integer((-609));
      try { 
        jSONObject0.getBoolean("getsplit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getsplit\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      String string0 = JSONObject.valueToString(hashMap1, (-3413), 1900);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Integer integer0 = new Integer(130);
      Integer integer1 = new Integer(16);
      Integer integer2 = new Integer(3190);
      Integer integer3 = new Integer(475);
      String string0 = JSONObject.numberToString(integer3);
      assertNotNull(string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("_')?8 md\b");
      jSONTokener0.skipTo('0');
      jSONTokener0.nextClean();
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener("null");
      jSONTokener1.skipTo('_');
      JSONObject.quote("");
      Integer integer0 = new Integer(3753);
      Integer integer1 = new Integer(64);
      assertFalse(integer1.equals((Object)integer0));
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Float float0 = new Float((-1.0));
      Float.sum(0.0F, (-1210.475F));
      Float.sum((-1210.475F), (-318.96518F));
      Float.sum((-1210.475F), (-733.448F));
      Float.sum(0.0F, 0.0F);
      Float.sum((-1225.8812F), (-1529.4402F));
      Float.sum(0.0F, (-2755.3213F));
      Float float1 = new Float(0.0);
      Float float2 = new Float(1.0F);
      Float.sum((-1.0F), 1016.25714F);
      Float.isFinite((-2755.3213F));
      String string0 = JSONObject.numberToString(float1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Double double0 = new Double((-2582.4886503316));
      Float float0 = new Float((-1198.572));
      Float float1 = new Float(2434.59815);
      Float float2 = new Float(2534.4322634507507);
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.039581156259877
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      HashMap<Long, String> hashMap2 = new HashMap<Long, String>();
      Double double0 = new Double(1.0);
      HashMap<String, Float> hashMap3 = new HashMap<String, Float>();
      Float float0 = new Float(1.0);
      hashMap3.put("6r?/aqBOpMe", float0);
      Float float1 = new Float(1715.272F);
      HashMap<String, Float> hashMap4 = new HashMap<String, Float>();
      hashMap4.values();
      Float float2 = new Float((-1916.2542F));
      Float float3 = new Float((-1.0F));
      hashMap4.put("6r?/aqBOpMe", float3);
      hashMap3.put("6r?/aqBOpMe", float2);
      hashMap4.put("?dm!h>Aqihj", float2);
      hashMap3.put("?dm!h>Aqihj", (Float) null);
      HashMap<String, Float> hashMap5 = new HashMap<String, Float>();
      hashMap5.putIfAbsent("?dm!h>Aqihj", (Float) null);
      Long long0 = new Long(1L);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "6r?/aqBOpMe";
      stringArray0[1] = "6r?/aqBOpMe";
      stringArray0[2] = " of ";
      stringArray0[3] = "?dm!h>Aqihj";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.4140512084176216
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONTokener jSONTokener0 = new JSONTokener("_')?8 md\b");
      jSONTokener0.back();
      JSONTokener jSONTokener1 = new JSONTokener("{o[");
      JSONTokener jSONTokener2 = new JSONTokener("null");
      jSONTokener2.nextClean();
      JSONTokener jSONTokener3 = new JSONTokener(".T$h4Rmq{5/9T`[");
      jSONTokener3.back();
      Integer integer0 = new Integer(15);
      Integer integer1 = new Integer(15);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_')?8 md\b";
      stringArray0[1] = "null";
      stringArray0[2] = "{o[";
      stringArray0[3] = ".T$h4Rmq{5/9T`[";
      JSONObject jSONObject0 = new JSONObject(integer1, stringArray0);
      Byte.toUnsignedLong((byte)59);
      try { 
        jSONObject0.getJSONObject("_')?8 md\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_')?8 md\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      Double double0 = new Double(3847.472091540914);
      BiFunction<Double, Boolean, Boolean> biFunction0 = (BiFunction<Double, Boolean, Boolean>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyDouble() , anyBoolean());
      hashMap0.compute(double0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("64.B^[.bn:(ZJk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"64.B^[.bn:(ZJk\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.4758926897646165
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Boolean boolean0 = new Boolean("null");
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      String string0 = "@";
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(2938);
      charBuffer0.subSequence(2938, 2938);
      StringWriter stringWriter1 = stringWriter0.append(':');
      stringWriter1.append(':');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0, 2938, 2938);
      jSONObject0.write(stringWriter2);
      JSONObject jSONObject1 = new JSONObject();
      Integer integer0 = new Integer(130);
      String string1 = "!9OiCV5wvC@.z";
      jSONObject0.isNull("!9OiCV5wvC@.z");
      Boolean boolean1 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        stringWriter1.write("@", 2938, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
