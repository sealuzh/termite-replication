/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 21:58:11 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.DBObjectPoolConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.196422294125466
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setTimeoutMsg("=\u0003q2?");
      QuickServer quickServer0 = new QuickServer("=\u0003q2?", 0);
      quickServer0.setServiceState(0);
      quickServer0.getQSAdminServerAuthenticator();
      quickServer0.setSecurityManagerClass("Qo");
      quickServer0.setRawCommunicationLogging(false);
      quickServer0.setTimeout(0);
      theClient0.setServer(quickServer0);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientObjectHandler();
      System.setCurrentTimeMillis(1L);
      theClient0.getServer();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocketChannel();
      theClient0.getClientObjectHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.getClientBinaryHandler();
      theClient0.toString();
      theClient0.toString();
      theClient0.getSocket();
      System.setCurrentTimeMillis(0);
      SocketChannel.open();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      System.setCurrentTimeMillis(0L);
      theClient0.getClientWriteHandler();
      theClient0.toString();
      theClient0.getAuthenticator();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      DBObjectPoolConfig dBObjectPoolConfig0 = new DBObjectPoolConfig();
      quickServer0.setDBObjectPoolConfig(dBObjectPoolConfig0);
      quickServer0.setClientObjectHandler("</server-mode>\n");
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.initServer(quickServerConfig0);
      theClient0.setServer(quickServer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getSocket();
      theClient0.getSocket();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      System.setCurrentTimeMillis(612L);
      theClient0.getSocketChannel();
      theClient0.getServer();
      theClient0.getClientExtendedEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getLocalPort();
      mockSocket0.getSoLinger();
      mockSocket0.close();
      theClient0.setSocket(mockSocket0);
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-96);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:4>", nonBlockingClientHandler0.getName());
      
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setTrusted(true);
      theClient0.getClientObjectHandler();
      theClient0.getClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      //  // Unstable assertion: assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-94);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte) (-111);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      theClient0.setTimeoutMsg("");
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      theClient0.getTimeoutMsg();
      theClient0.getMaxConnectionMsg();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.getTimeoutMsg();
      theClient0.getClientBinaryHandler();
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      theClient0.getClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      theClient0.setServer(quickServer0);
      QuickServer quickServer1 = new QuickServer("");
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("");
      theClient0.getMaxAuthTryMsg();
      try { 
        QuickServer.load("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not init server from xml file
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      System.setCurrentTimeMillis((-1055L));
      theClient0.getSocket();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3247387677850297
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setTrusted(false);
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      TheClient theClient1 = new TheClient();
      theClient0.getAuthenticator();
      TheClient theClient2 = new TheClient();
      theClient1.setTrusted(false);
      theClient2.setMaxAuthTry((byte)102);
      theClient2.toString();
      TheClient theClient3 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient2.getClientWriteHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient3.getClientAuthenticationHandler();
      theClient2.getMaxAuthTry();
      theClient1.getClientExtendedEventHandler();
      theClient3.getClientAuthenticationHandler();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      TheClient theClient4 = new TheClient();
      theClient2.getClientEventHandler();
      theClient1.getClientWriteHandler();
      theClient2.getClientBinaryHandler();
      theClient3.getClientWriteHandler();
      theClient3.getSocket();
      theClient2.getAuthenticator();
      assertEquals(102, theClient2.getMaxAuthTry());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1262368167947456
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxAuthTry();
      theClient0.getMaxConnectionMsg();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientExtendedEventHandler();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientCommandHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientCommandHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      System.setCurrentTimeMillis(0);
      theClient0.getClientBinaryHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.193764486816496
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      data0.setUsername("wN%@j9Un\"YDZTUTV");
      theClient0.setTimeout((-3466));
      theClient0.setClientData(data0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTimeoutMsg("wN%@j9Un\"YDZTUTV");
      theClient0.getClientAuthenticationHandler();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.getTimeoutMsg();
      theClient0.getClientEventHandler();
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      assertEquals((-3466), theClient0.getTimeout());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1982462795335826
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      TheClient theClient1 = new TheClient();
      theClient0.getAuthenticator();
      theClient1.setAuthenticator((Authenticator) null);
      TheClient theClient2 = new TheClient();
      theClient1.setTrusted(false);
      theClient2.setMaxAuthTry((byte) (-2));
      theClient2.toString();
      TheClient theClient3 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient2.getClientWriteHandler();
      TheClient theClient4 = new TheClient();
      theClient4.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)0;
      theClient0.getClientAuthenticationHandler();
      theClient2.getMaxAuthTry();
      theClient1.getClientExtendedEventHandler();
      theClient3.getClientAuthenticationHandler();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      TheClient theClient5 = new TheClient();
      theClient2.getClientEventHandler();
      assertEquals((-2), theClient2.getMaxAuthTry());
      
      theClient1.getClientWriteHandler();
      theClient5.getClientBinaryHandler();
      theClient4.getClientBinaryHandler();
      assertTrue(theClient4.getCommunicationLogging());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("+,@fQn\"");
      theClient0.getMaxAuthTryMsg();
      try { 
        QuickServer.load("+,@fQn\"");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not init server from xml file
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.setClientEvent((ClientEvent) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientEvent();
      theClient0.getClientObjectHandler();
      theClient0.getClientCommandHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      org.quickserver.net.qsadmin.Authenticator authenticator1 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator1);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler(authenticator1);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      data0.setLastAsked("W`#-nl");
      byte[] byteArray0 = new byte[0];
      data0.setPassword(byteArray0);
      data0.setPassword(byteArray0);
      data0.setUsername("wN%@j9Un\"YDZTUTV");
      data0.setPassword(byteArray0);
      data0.setLastAsked("W`#-nl");
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.881766240540306
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      data0.setLastAsked("fN@j9Un\"YDZTUT");
      byte[] byteArray0 = new byte[0];
      data0.setPassword(byteArray0);
      data0.setUsername("fN@j9Un\"YDZTUT");
      data0.setUsername("fN@j9Un\"YDZTUT");
      theClient0.setClientData(data0);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      ClientData clientData0 = theClient0.getClientData();
      theClient0.setClientData(clientData0);
      theClient0.getClientCommandHandler();
      theClient0.getClientEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientExtendedEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[0];
      theClient0.setTimeout((-3466));
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getTimeout();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      System.setCurrentTimeMillis(0L);
      theClient0.getClientObjectHandler();
      assertEquals((-3466), theClient0.getTimeout());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      SocketChannel socketChannel0 = SocketChannel.open();
      theClient0.setSocketChannel(socketChannel0);
      SocketChannel socketChannel1 = SocketChannel.open();
      assertFalse(socketChannel1.isRegistered());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.toString();
      theClient0.setTimeout(1606);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getTimeout();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientObjectHandler();
      assertEquals(1606, theClient0.getTimeout());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      int int0 = (-1766);
      int int1 = (-188);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("NbQn", (-1766), inetAddress0, (-188));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1766
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEvent();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      int int0 = (-188);
      int int1 = 374;
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("", 374, inetAddress0, (-188));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-188
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)0;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getTimeout();
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, int0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      TheClient theClient0 = new TheClient();
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0506636431758234
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxConnectionMsg("50OyA\"y`bc$f!7[jZ");
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getMaxConnectionMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.getCommunicationLogging();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.toString();
      theClient0.getClientAuthenticationHandler();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      TheClient theClient0 = new TheClient();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      assertFalse(theClient0.getTrusted());
  }
}
