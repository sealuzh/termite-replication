/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 21:36:00 GMT 2019
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FilenameFilter;
import java.io.PrintStream;
import java.net.MalformedURLException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverPropertyInfo;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.time.temporal.ChronoField;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.PriorityBlockingQueue;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JColorChooser;
import javax.swing.JEditorPane;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JRadioButton;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSpinner;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.JViewport;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SpinnerListModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.plaf.metal.MetalLabelUI;
import javax.swing.plaf.multi.MultiOptionPaneUI;
import javax.swing.plaf.multi.MultiSliderUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.PlainDocument;
import javax.swing.text.StringContent;
import javax.swing.text.StyledEditorKit;
import javax.swing.text.TextAction;
import javax.swing.text.WrappedPlainView;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAlias;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.client.util.ApplicationFiles;
import net.sourceforge.squirrel_sql.fw.id.IntegerIdentifier;
import net.sourceforge.squirrel_sql.fw.id.UidIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.ProcedureInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriver;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverProperty;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.javax.swing.MockSpinnerDateModel;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.ui.FilesystemFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      Vector<ITableInfo> vector0 = new Vector<ITableInfo>();
      String string0 = null;
      boolean boolean0 = true;
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLConnection sQLConnection0 = new SQLConnection(connection0, sQLDriverPropertyCollection0, sQLDriver0);
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate(sQLConnection0, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.ScriptWriter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((DatabaseMetaData) null).when(connection0).getMetaData();
      Vector<ITableInfo> vector0 = new Vector<ITableInfo>();
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      SQLDriver sQLDriver0 = new SQLDriver();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("8v`pwbDY,", "8v`pwbDY,", "+N", "`%3lSD+", (-570), "8v`pwbDY,", 2937, 1000000, 1000000, 1000000, "TRUNCTE TABLE ", "+N", 2937, 2865, "");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SESSION;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("", "8v`pwbDY,", "^c\"vui,.;k#aZl_)", "`%3lSD+", 2002, "8v`pwbDY,", 15, (-2086126969), 2002, 2002, "Dw+OpWKLF", "]b[$l{.<VbzS?", 1611, 1611, "`%3lSD+");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF;
      tableColumnInfo1.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.isBinaryType(tableColumnInfo1);
      SQLConnection sQLConnection0 = new SQLConnection(connection0, sQLDriverPropertyCollection0, sQLDriver0);
      ITableInfo iTableInfo0 = null;
      // Undeclared exception!
      try { 
        DBUtil.tableHasPrimaryKey(sQLConnection0, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBUtil.typesAreEquivalent((-7), (-7));
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      jCheckBoxMenuItem0.setArmed(false);
      dBCopyPlugin0.setCopyMenuEnabled(false);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getMaximumSize(jCheckBoxMenuItem0);
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem();
      jCheckBoxMenuItem1.getDisplayedMnemonicIndex();
      BasicCheckBoxUI basicCheckBoxUI1 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getAccessibleChildrenCount(jCheckBoxMenuItem1);
      basicCheckBoxUI0.getAccessibleChild(jCheckBoxMenuItem0, 96);
      basicCheckBoxUI1.getAccessibleChild(jCheckBoxMenuItem1, 4);
      basicCheckBoxUI1.getPropertyPrefix();
      basicCheckBoxUI1.installUI(jCheckBoxMenuItem0);
      JMenuItem jMenuItem0 = new JMenuItem("lLl");
      jCheckBoxMenuItem0.getContainerListeners();
      basicCheckBoxUI1.uninstallUI(jMenuItem0);
      assertFalse(jMenuItem0.isFocusTraversalPolicySet());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("prefs.xml");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-117);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ilf`/T+t`,_Nn");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "ilf`/T+t`,_Nn", "CU~^#Re8ViS\u0000Q");
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) null);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DBUtil.typesAreEquivalent((-7), 828);
      SpinnerNumberModel spinnerNumberModel0 = null;
      try {
        spinnerNumberModel0 = new SpinnerNumberModel((-3279), (-1524), (-4096), (-3279));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (minimum <= value <= maximum) is false
         //
         verifyException("javax.swing.SpinnerNumberModel", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel0 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel1 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel1.getItemListeners();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel2 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel3 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel2.setEnabled(true);
      jToggleButton_ToggleButtonModel3.isRollover();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel4 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel5 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel5.getActionCommand();
      jToggleButton_ToggleButtonModel3.setMnemonic(567);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, "DBUtil.error.bindblobfailure", "VxT<", (-741), "n<+4`Q$", 1315, 155, 2, 35, (String) null, "E]i@0#vmcpI>HA", (-2), 15, "TRUNCATE TABLE ");
      String string0 = DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      assertNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.VIEW;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.COLUMN;
      ImageIcon imageIcon0 = new ImageIcon("`%IlSD+");
      imageIcon0.toString();
      DatabaseObjectType.createNewDatabaseObjectType("`%IlSD+", (Icon) imageIcon0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.createNewDatabaseObjectType("dcopytest", (Icon) imageIcon0);
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.UDF;
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SYNONYM;
      DatabaseObjectType.createNewDatabaseObjectType("CU~^#Re8ViS\u0000Q");
      ImageIcon imageIcon1 = (ImageIcon)databaseObjectType4.getIcon();
      imageIcon1.toString();
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType databaseObjectType8 = DatabaseObjectType.CATALOG;
      DatabaseObjectType databaseObjectType9 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType.createNewDatabaseObjectType("`%IlSD+", (Icon) imageIcon1);
      DatabaseObjectType databaseObjectType10 = DatabaseObjectType.UDF;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "B6Sd*j&ay!", "wD=@nz7Iv}");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`%IlSD+";
      stringArray0[1] = "`%IlSD+";
      stringArray0[2] = "CU~^#Re8ViS\u0000Q";
      stringArray0[3] = "wD=@nz7Iv}";
      stringArray0[4] = "CU~^#Re8ViS\u0000Q";
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      Vector<ITableInfo> vector0 = new Vector<ITableInfo>();
      String string0 = null;
      boolean boolean0 = false;
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLConnection sQLConnection0 = new SQLConnection(connection0, sQLDriverPropertyCollection0, sQLDriver0);
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate(sQLConnection0, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLDriverProperty[] sQLDriverPropertyArray0 = sQLDriverPropertyCollection0.getDriverProperties();
      sQLDriverPropertyCollection0.setDriverProperties(sQLDriverPropertyArray0);
      SQLAlias sQLAlias0 = new SQLAlias();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLAlias sQLAlias1 = new SQLAlias(uidIdentifier0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection1 = sQLAlias1.getDriverPropertiesClone();
      SQLConnection sQLConnection0 = new SQLConnection(connectionWrapper0, sQLDriverPropertyCollection0, sQLDriver0);
      sQLDriver0.setJDBCDriverClassLoaded(false);
      SQLConnection sQLConnection1 = new SQLConnection(connectionWrapper0, sQLDriverPropertyCollection1, sQLDriver0);
      String string0 = null;
      dBCopyPlugin0.getPasteToTableInfo(sQLConnection1, (String) null, (String) null);
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-884));
      sQLAlias1.setDriverIdentifier(uidIdentifier0);
      SQLDriver sQLDriver1 = new SQLDriver(integerIdentifier0);
      SQLDriver sQLDriver2 = new SQLDriver(uidIdentifier0);
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "", (String) null, "`%3lSD+", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin0, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(connection0).getAutoCommit();
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLDriverProperty[] sQLDriverPropertyArray0 = sQLDriverPropertyCollection0.getDriverProperties();
      sQLDriverPropertyCollection0.setDriverProperties(sQLDriverPropertyArray0);
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection1 = sQLAlias0.getDriverPropertiesClone();
      SQLConnection sQLConnection0 = new SQLConnection(connectionWrapper0, sQLDriverPropertyCollection1, sQLDriver0);
      sQLDriver0.setJDBCDriverClassLoaded(true);
      SQLConnection sQLConnection1 = new SQLConnection(connectionWrapper0, sQLDriverPropertyCollection1, sQLDriver0);
      sQLConnection0.close();
      dBCopyPlugin0.getPasteToTableInfo(sQLConnection1, "Derby", "rRY1=BH_");
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-884));
      sQLAlias0.setDriverIdentifier(integerIdentifier0);
      SQLDriver sQLDriver1 = new SQLDriver(integerIdentifier0);
      SQLDriver sQLDriver2 = new SQLDriver(integerIdentifier0);
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      try { 
        DBUtil.tableHasPrimaryKey(sQLConnection1, (ITableInfo) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // Methods cannot be invoked on a closed connection
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBUtil.typesAreEquivalent(2, 1590);
      String string0 = "B6Sd*j&aTy!";
      JEditorPane jEditorPane0 = null;
      try {
        jEditorPane0 = new JEditorPane("B6Sd*j&aTy!");
        fail("Expecting exception: MalformedURLException");
      
      } catch(Throwable e) {
         //
         // no protocol: B6Sd*j&aTy!
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Vector<ITableInfo> vector0 = new Vector<ITableInfo>();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("/9W", ",c&is\"pR;`?Pw7", "82", "NO", (-2), "/9W", (-2), (-2), 1089, (-2), "h!GmOTXjrEC", "/9W", (-2), (-4), ",c&is\"pR;`?Pw7");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.COLUMN;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.INDEX_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.UDF;
      Icon icon0 = databaseObjectType1.getIcon();
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.createNewDatabaseObjectType("rAKX@", icon0);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.FUNCTION;
      DatabaseObjectType.createNewDatabaseObjectType("/9W", icon0);
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.TABLE;
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.FOREIGN_KEY;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DBUtil.isBinaryType(tableColumnInfo0);
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[6];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      MockSpinnerDateModel mockSpinnerDateModel0 = null;
      try {
        mockSpinnerDateModel0 = new MockSpinnerDateModel();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal value
         //
         verifyException("javax.swing.SpinnerDateModel", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      JRadioButton jRadioButton0 = new JRadioButton();
      JMenuItem jMenuItem0 = new JMenuItem("sqlResultsTabPlacement");
      jMenuItem0.setContentAreaFilled(false);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("action.", "sqlResultsTabPlacement", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 0, ")FH1", (-872), (-872), (-872), 0, "action.", ")FH1", 32765, 401, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      DatabaseObjectType.createNewDatabaseObjectType("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DatabaseObjectType.createNewDatabaseObjectType("Wl.C~rp*LQ");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(0, int0);
      
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriver sQLDriver0 = new SQLDriver();
      int int1 = DBUtil.replaceDistinctDataType(401, tableColumnInfo0, (ISession) null);
      assertEquals(401, int1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JMenuItem jMenuItem0 = new JMenuItem();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      GridBagConstraints gridBagConstraints0 = gridBagLayout0.getConstraints(jMenuItem0);
      GridBagLayout gridBagLayout1 = new GridBagLayout();
      gridBagConstraints0.weighty = 0.0;
      gridBagLayout1.setConstraints(jMenuItem0, gridBagConstraints0);
      gridBagLayout0.layoutContainer(jMenuItem0);
      Point point0 = gridBagLayout1.location(0, 1);
      point0.translate(0, 2002);
      point0.clone();
      gridBagLayout1.setConstraints(jMenuItem0, gridBagConstraints0);
      Point point1 = gridBagLayout1.location(0, (-1));
      point1.translate(13, 0);
      jMenuItem0.setLocation(point1);
      jMenuItem0.getIcon();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "Max function is null for dialect=", "Max function is null for dialect=");
      // Undeclared exception!
      try { 
        DBUtil.getColumnNames((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBUtil.setLastStatementValues("net.sourceforge.squirrel_sql.client.}ession.schemainfo.SchemaInfo");
      String string0 = DBUtil.getLastStatementValues();
      assertEquals("net.sourceforge.squirrel_sql.client.}ession.schemainfo.SchemaInfo", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((SQLWarning) null, (SQLWarning) null).when(connection0).getWarnings();
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLDriverProperty[] sQLDriverPropertyArray0 = sQLDriverPropertyCollection0.getDriverProperties();
      sQLDriverPropertyCollection0.setDriverProperties(sQLDriverPropertyArray0);
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection1 = new SQLDriverPropertyCollection();
      SQLDriver sQLDriver1 = new SQLDriver();
      SQLConnection sQLConnection0 = new SQLConnection(connectionWrapper0, sQLDriverPropertyCollection0, sQLDriver1);
      sQLDriverPropertyCollection1.clear();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      sQLDriver1.setIdentifier(uidIdentifier0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection2 = new SQLDriverPropertyCollection();
      SQLDriver sQLDriver2 = new SQLDriver();
      SQLDriverPropertyCollection sQLDriverPropertyCollection3 = new SQLDriverPropertyCollection();
      SQLConnection sQLConnection1 = new SQLConnection(connectionWrapper0, sQLDriverPropertyCollection3, sQLDriver0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection4 = new SQLDriverPropertyCollection();
      sQLDriverPropertyCollection4.getDriverProperties();
      sQLDriverPropertyCollection0.setDriverProperties(sQLDriverPropertyArray0);
      SQLConnection sQLConnection2 = new SQLConnection(connectionWrapper0, sQLDriverPropertyCollection0, sQLDriver0);
      connectionWrapper0.getWarnings();
      SQLConnection sQLConnection3 = new SQLConnection(connectionWrapper0, sQLDriverPropertyCollection4, sQLDriver2);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      sQLConnection1.getWarnings();
      sQLDriverPropertyCollection3.applyTo((Properties) null);
      dBCopyPlugin0.getPasteToTableInfo(sQLConnection3, "ee!", "exp");
      // Undeclared exception!
      try { 
        DBUtil.getColumnName(sQLConnection1, (ITableInfo) null, 885);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.SQLDatabaseMetaData", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", ",c&is\"pR;`n>?Pw7", "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.BEST_ROW_ID;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType("Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", icon0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM((DatabaseObjectType) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JMenuItem jMenuItem0 = new JMenuItem("sqlResultsTabPlacement");
      jMenuItem0.getHorizontalTextPosition();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      GridBagConstraints gridBagConstraints0 = gridBagLayout0.getConstraints(jMenuItem0);
      GridBagLayout gridBagLayout1 = new GridBagLayout();
      gridBagConstraints0.anchor = 0;
      GridBagLayout gridBagLayout2 = new GridBagLayout();
      gridBagLayout1.getLayoutOrigin();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("sqlResultsTabPlacement");
      jCheckBoxMenuItem0.getInputVerifier();
      jCheckBoxMenuItem0.getActionMap();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jCheckBoxMenuItem0.getSubElements();
      menuSelectionManager0.isComponentPartOfCurrentMenu(jMenuItem0);
      MenuElement[] menuElementArray0 = new MenuElement[6];
      menuElementArray0[1] = (MenuElement) jMenuItem0;
      menuElementArray0[2] = (MenuElement) jMenuItem0;
      menuElementArray0[3] = (MenuElement) jMenuItem0;
      menuElementArray0[4] = (MenuElement) jMenuItem0;
      menuElementArray0[5] = (MenuElement) jMenuItem0;
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jCheckBoxMenuItem0, 0, (-1), 6050, 2901, 0, (-1014), false, menuElementArray0, menuSelectionManager0);
      JMenuItem jMenuItem1 = new JMenuItem("kj&}IA*d");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("insert into ", "insert into ", "sqlResultsTabPlacement", "Uq})x1", 0, "q/|6zy0Qnu,bL_", (-1014), 0, 1, 0, "J.FRnr.p^A`P@LF1*L", "q/|6zy0Qnu,bL_", 2089, (-382), (String) null);
      String string0 = DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      assertEquals("insert into ", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((DatabaseMetaData) null).when(connection0).getMetaData();
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      sQLDriverPropertyCollection0.applyDriverPropertynfo((DriverPropertyInfo[]) null);
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLDriverProperty[] sQLDriverPropertyArray0 = sQLDriverPropertyCollection0.getDriverProperties();
      sQLDriverPropertyCollection0.setDriverProperties(sQLDriverPropertyArray0);
      SQLConnection sQLConnection0 = new SQLConnection(connectionWrapper0, sQLDriverPropertyCollection0, sQLDriver0);
      sQLDriver0.setJDBCDriverClassLoaded(true);
      dBCopyPlugin0.getPasteToTableInfo(sQLConnection0, "t`gDr(", "t`gDr(");
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-884));
      SQLDriver sQLDriver1 = new SQLDriver(integerIdentifier0);
      sQLConnection0.rollback();
      sQLConnection0.removePropertyChangeListener((PropertyChangeListener) null);
      SQLConnection sQLConnection1 = new SQLConnection(connectionWrapper0, sQLDriverPropertyCollection0, sQLDriver0);
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString(sQLConnection0, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // metaData
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.DatabaseMetaDataWrapper", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector<ITableInfo> vector0 = new Vector<ITableInfo>();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("B6Sd*&aTy!", "netD>ourcefo(ge.squir(el_sql.plugins.dbcopy.dbcopy", "P[ ", "netD>ourcefo(ge.squir(el_sql.plugins.dbcopy.dbcopy", (-955), "B6Sd*&aTy!", 1998, 1, 241, 241, "e@}m$3#m\"PMSe", "CREATE TABLE ", 241, 4, "e@}m$3#m\"PMSe");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[8];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceDistinctDataType(0, tableColumnInfo0, (ISession) null);
      int int0 = DBUtil.replaceDistinctDataType(1, tableColumnInfo0, (ISession) null);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "clazz == null");
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      arrayList0.add((ITableInfo) null);
      DBUtil.convertTableToObjectList(arrayList0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      assertEquals("3bcf957:16e806af4bb:-7e97", uidIdentifier0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("prefs.xml");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-117);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ilf`IT+t`r_Nn");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "ilf`IT+t`r_Nn", "CU~^#Re8ViS\u0000Q");
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      assertEquals("Rob Manning", dBCopyPlugin0.getAuthor());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRadioButton jRadioButton0 = new JRadioButton();
      JMenuItem jMenuItem0 = new JMenuItem("sqlResultsTabPlacement");
      jMenuItem0.getHorizontalTextPosition();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      gridBagLayout0.getConstraints(jMenuItem0);
      GridBagLayout gridBagLayout1 = new GridBagLayout();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("sqlResultsTabPlacement");
      jCheckBoxMenuItem0.setVerifyInputWhenFocusTarget(true);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[7];
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sqlResultsTabPlacement");
      menuElementArray0[2] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[3] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[4] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[5] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[6] = (MenuElement) jMenuItem0;
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jCheckBoxMenuItem0, (-1), 0, 16, (-2687), 1398, (-1), true, menuElementArray0, menuSelectionManager0);
      JMenuItem jMenuItem1 = new JMenuItem("p0ux2t1dm6");
      jMenuItem0.getContainerListeners();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "lO2|cx+f(-%4<TFH", "lO2|cx+f(-%4<TFH", "p0ux2t1dm6", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.convertTableToObjectList((List<ITableInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("(", "", "WwOxQV+7yaF!", "", (-70), "(", 824, 824, 824, 7, "", "rx&i\"l>y|K", (-70), (-70), "qvuoL@Ks+j391:m");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Stack<ITableInfo> stack0 = new Stack<ITableInfo>();
      PriorityBlockingQueue<Object> priorityBlockingQueue0 = new PriorityBlockingQueue<Object>();
      stack0.ensureCapacity((-951));
      stack0.retainAll(priorityBlockingQueue0);
      DBUtil.convertTableToObjectList(stack0);
      // Undeclared exception!
      try { 
        DBUtil.isBinaryType((TableColumnInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = ";7a|td\\uA`;";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(string0, " drop foreign |pkey ", "#5OPKc", ",>{Dzz(U6y\"l+e", (-3), "#5OPKc", 4989, 4989, (-3), (-3), string0, " drop foreign |pkey ", (-3), (-2105376123), ",c&is\"pR;`n>?Pw7");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TABLE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.PROC_TYPE_DBO;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType("current", icon0);
      DatabaseObjectType.createNewDatabaseObjectType(string0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.FOREIGN_KEY;
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      Icon icon1 = defaultTreeCellRenderer1.getOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType(",>{Dzz(U6y\"l+e", icon1);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType.createNewDatabaseObjectType("round(");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.UDF;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBUtil.typesAreEquivalent((-422), 2);
      String string0 = "ScriptWriter.error.nouserhome";
      JTextPane jTextPane0 = new JTextPane();
      SpinnerListModel spinnerListModel0 = new SpinnerListModel();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor(jSpinner0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not a SpinnerDateModel
         //
         verifyException("javax.swing.JSpinner$DateEditor", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      jCheckBoxMenuItem0.setContentAreaFilled(false);
      jCheckBoxMenuItem0.setInheritsPopupMenu(false);
      StyledEditorKit.FontFamilyAction styledEditorKit_FontFamilyAction0 = new StyledEditorKit.FontFamilyAction((String) null, (String) null);
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem();
      jCheckBoxMenuItem1.getIcon();
      jCheckBoxMenuItem0.getVetoableChangeListeners();
      jCheckBoxMenuItem0.getIcon();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      gridBagLayout0.layoutContainer(jCheckBoxMenuItem0);
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Icon) null);
      jCheckBoxMenuItem0.getIcon();
      // Undeclared exception!
      try { 
        DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.OTHER;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.COLUMN;
      ImageIcon imageIcon0 = new ImageIcon();
      imageIcon0.toString();
      DatabaseObjectType.createNewDatabaseObjectType("`%3lSD+", (Icon) imageIcon0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.createNewDatabaseObjectType("dcopytest", (Icon) imageIcon0);
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.UDF;
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SYNONYM;
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.DATATYPE;
      ImageIcon imageIcon1 = (ImageIcon)databaseObjectType4.getIcon();
      imageIcon1.toString();
      DatabaseObjectType.createNewDatabaseObjectType("CU~^#Re8ViS\u0000Q", (Icon) imageIcon1);
      DatabaseObjectType databaseObjectType8 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType databaseObjectType9 = DatabaseObjectType.CATALOG;
      DatabaseObjectType databaseObjectType10 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType.createNewDatabaseObjectType("javax.swing.ImageIcon@18fd3cc7", (Icon) imageIcon1);
      DatabaseObjectType databaseObjectType11 = DatabaseObjectType.UDF;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "B6Sd*j&ay!", "wD=@nz7Iv}");
      DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "`%3lSD+");
      // Undeclared exception!
      try { 
        DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("?XXX.?i[VL", "xoQR5", "?XXX.?i[VL", "?XXX.?i[VL", 1111, "?XXX.?i[VL", 4114, 61, 61, (-2165), "SN", "?XXX.?i[VL", 4114, 1085, "NO");
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(tableColumnInfo0, (SchemaInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getDTPropertiesFile();
      applicationFileWrappersImpl0.getExecutionLogFile();
      MockFile mockFile0 = new MockFile("eh.f", "eh.f");
      fileWrapperFactoryImpl0.create((File) mockFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`A3]7H'tG?*o/[");
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFileWrappersImpl0.getSquirrelHomeDir();
      applicationFiles0.getSQuirrelJarFile();
      File file0 = applicationFiles0.getUpdateDirectory();
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      fileWrapperFactoryImpl0.createTempFile("round(", "round(", fileWrapper0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~es3PQz!|/!-");
      fileWrapperFactoryImpl0.create("5}] ");
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles0);
      applicationFileWrappersImpl0.getEditWhereColsFile();
      FileWrapperImpl.listRoots();
      MockFile mockFile1 = new MockFile(file0, "`A3]7H'tG?*o/[");
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl(mockFile1);
      FileWrapperImpl fileWrapperImpl1 = FileWrapperImpl.createTempFile("5}] ", (String) null, fileWrapperImpl0);
      fileWrapperImpl1.toURI();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo((String) null, "eh.f", "!Fx");
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(databaseObjectInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getDTPropertiesFile();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl0.getExecutionLogFile();
      MockFile mockFile0 = new MockFile("eh.f", "eh.f");
      fileWrapperFactoryImpl0.create((File) mockFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`A3]7H'tG?*o/[");
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      FileWrapperImpl fileWrapperImpl1 = (FileWrapperImpl)applicationFileWrappersImpl0.getSquirrelHomeDir();
      applicationFiles0.getSQuirrelJarFile();
      MockFile mockFile1 = new MockFile("`A3]7H'tG?*o/[");
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      fileWrapperFactoryImpl0.createTempFile("round(", "round(", fileWrapper0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~es3PQz!|/!-");
      fileWrapperFactoryImpl0.create("5}] ");
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles0);
      applicationFileWrappersImpl0.getEditWhereColsFile();
      FileWrapperImpl.listRoots();
      MockFile mockFile2 = new MockFile(mockFile1, "`A3]7H'tG?*o/[");
      applicationFileWrappersImpl0.getSQuirrelJarFile();
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl(fileWrapperImpl0);
      FileWrapperImpl fileWrapperImpl3 = FileWrapperImpl.createTempFile("5}] ", (String) null, fileWrapperImpl2);
      fileWrapperImpl3.toURI();
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      fileWrapperFactoryImpl1.createTempFile("round(", "t`gDr(", (FileWrapper) fileWrapperImpl1);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        DBUtil.getInsertSQL(dBCopyPlugin0, "", (ITableInfo) null, 1302);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[6];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(">h`SWM", "net.sourceforge.squirrel_sql.fw.dialects.MySQL5DialectExt", "1Y%u8`e#zg5b/Js", ">h`SWM", (-1770), "1Y%u8`e#zg5b/Js", 4, (-1770), (-1770), (-2001), "1Y%u8`e#zg5b/Js", "net.sourceforge.squirrel_sql.fw.dialects.MySQL5DialectExt", (-2055), 4, "yS");
      tableColumnInfoArray0[0] = tableColumnInfo0;
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("7%<'A", "g~]+=DY3", "1Y%u8`e#zg5b/Js", "", 4, " row_.* from ( ", 93, (-942), (-1465), (-1116), "yS", "\n", (-1658), 2004, " add index ");
      tableColumnInfoArray0[1] = tableColumnInfo1;
      TableColumnInfo tableColumnInfo2 = new TableColumnInfo(".", "+YuAr;]=!_N", " row_.* from ( ", "", 2003, "gvQ*", (-1658), 9, 221, 93, "g~]+=DY3", "ScriptWriter.error.nouserhome", 9, 4408, (String) null);
      tableColumnInfoArray0[2] = tableColumnInfo2;
      TableColumnInfo tableColumnInfo3 = new TableColumnInfo("bit varying(2147000000)", "net.>ourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "1Y%u8`e#zg5b/Js", "\n", 1847, "net.>ourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 4408, (-1658), (-1713), 2, "yS", "DIF+", (-5), 221, "*hoxZYxi'Fm1");
      tableColumnInfoArray0[3] = tableColumnInfo3;
      TableColumnInfo tableColumnInfo4 = new TableColumnInfo("#Th[+j/oHW~dp~2M", ">h`SWM", (String) null, " row_.* from ( ", (-1465), " that matched ", (-942), 0, 3033, 2570, "uvZD?", " tableName = ", 0, (-5), "<-LwtnC");
      tableColumnInfoArray0[4] = tableColumnInfo4;
      TableColumnInfo tableColumnInfo5 = new TableColumnInfo("<-LwtnC", "DIF+", "9ozY>%!y)7\"pe", "net.sourceforge.squirrel_sql.fw.dialects.MySQL5DialectExt", (-1713), "AR", (-5), 2327, (-4566), (-942), (String) null, "m]%,Rq2O", (-1968526675), 2000000000, "\n");
      tableColumnInfoArray0[5] = tableColumnInfo5;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals(">h`SWM, , , \n,  row_.* from ( , net.sourceforge.squirrel_sql.fw.dialects.MySQL5DialectExt", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.VIEW;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.CATALOG;
      ImageIcon imageIcon0 = new ImageIcon("`%IlSD+");
      imageIcon0.toString();
      DatabaseObjectType.createNewDatabaseObjectType("`%IlSD+", (Icon) imageIcon0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.createNewDatabaseObjectType("dcopytest", (Icon) imageIcon0);
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.UDF;
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.SYNONYM;
      DatabaseObjectType.createNewDatabaseObjectType("CU~^#Re8ViS\u0000Q");
      ImageIcon imageIcon1 = (ImageIcon)databaseObjectType4.getIcon();
      imageIcon1.toString();
      imageIcon1.getDescription();
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      DatabaseObjectType databaseObjectType8 = DatabaseObjectType.CATALOG;
      imageIcon1.toString();
      DatabaseObjectType databaseObjectType9 = DatabaseObjectType.SCHEMA;
      DatabaseObjectType.createNewDatabaseObjectType("`%IlSD+", (Icon) imageIcon1);
      DatabaseObjectType databaseObjectType10 = DatabaseObjectType.UDF;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "B6Sd*j&ay!", "wD=@nz7Iv}");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`%IlSD+";
      stringArray0[3] = "`%IlSD+";
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, (String) null, "`%IlSD+");
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.VIEW;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.CATALOG;
      ImageIcon imageIcon0 = new ImageIcon("`%IlSD+");
      imageIcon0.toString();
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("`%IlSD+", (Icon) imageIcon0);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.createNewDatabaseObjectType("dcopytest", (Icon) imageIcon0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("dcopytest", "getCatSep: Unexpected Exception - ", "[^,=lD", "`%IlSD+", 2160, "egB}3y,b", 53, 53, 4, 53, "YSx", "CLUSTERED", (-1881), 378, "p'WgcMT");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.TABLE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.PROC_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("Lu&5j=S<A<4j;|");
      DatabaseObjectType databaseObjectType8 = DatabaseObjectType.FOREIGN_KEY;
      DatabaseObjectType databaseObjectType9 = DatabaseObjectType.PROCEDURE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType9);
      DatabaseObjectType.createNewDatabaseObjectType("YSx");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType5);
      DatabaseObjectType databaseObjectType10 = DatabaseObjectType.UDF;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType4);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("NO", "82", "82", " ADD FOREIGN KEY (", 1707, "`c&is\"pR;`n>?Pw7", 1089, (-4), (-6), (-4), "NO", "NO", (-4), (-4), "JWLy}]sL&");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.COLUMN;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DatabaseObjectType.createNewDatabaseObjectType(" CASCADE");
      DatabaseObjectType.createNewDatabaseObjectType("`c&is\"pR;`n>?Pw7");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.FOREIGN_KEY;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.UDF;
      databaseObjectType2.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType((String) null, (Icon) null);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.FUNCTION;
      DatabaseObjectType.createNewDatabaseObjectType("82", (Icon) null);
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.TABLE;
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.createNewDatabaseObjectType("`c&is\"pR;`n>?Pw7", (Icon) null);
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.FOREIGN_KEY;
      DatabaseObjectType.createNewDatabaseObjectType("JWLy}]sL&");
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType6);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType5);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Stack<IDatabaseObjectInfo> stack0 = new Stack<IDatabaseObjectInfo>();
      stack0.add((IDatabaseObjectInfo) null);
      DBUtil.convertObjectToTableList(stack0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertNull(iSession0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceDistinctDataType((-1073), (TableColumnInfo) null, (ISession) null);
      assertEquals((-1073), int0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Stack<IDatabaseObjectInfo> stack0 = new Stack<IDatabaseObjectInfo>();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      int int0 = DBUtil.replaceDistinctDataType(2210, (TableColumnInfo) null, (ISession) null);
      assertEquals(2210, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBUtil.setLastStatementValues("");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "i~`&P";
      DBUtil.getLastStatementValues();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString() , anyInt() , anyInt());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      // Undeclared exception!
      try { 
        connectionWrapper0.prepareCall("Not yet implemented", 523, 523);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[6];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(">h`SWM", "net.sourceforge.squirrel_sql.fw.dialects.MySQL5DialectExt", "1Y%u8`e#zg5b/Js", ">h`SWM", (-1770), "1Y%u8`e#zg5b/Js", 4, (-1770), (-1770), (-2001), "1Y%u8`e#zg5b/Js", "net.sourceforge.squirrel_sql.fw.dialects.MySQL5DialectExt", (-2055), 4, "yS");
      tableColumnInfoArray0[4] = tableColumnInfo0;
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("7%<'A", "g~]+=DY3", "1Y%u8`e#zg5b/Js", "", 4, " row_.* from ( ", 79, (-942), (-1465), (-1116), "yS", "\n", (-1658), 2004, " add index ");
      tableColumnInfoArray0[1] = tableColumnInfo1;
      TableColumnInfo tableColumnInfo2 = new TableColumnInfo(".", "rYC/]MIrMu$Dg(Uh7@", " row_.* from ( ", "", 2003, "gvQ*", (-1658), 32, 221, 79, "g~]+=DY3", "ScriptWriter.error.nouserhome", 32, 4408, (String) null);
      tableColumnInfoArray0[2] = tableColumnInfo2;
      TableColumnInfo tableColumnInfo3 = new TableColumnInfo("bit varying(2147000000)", "net.>ourceforge.squirrel_sl.plugins.dbopy.dbcopy", "1Y%u8`e#zg5b/Js", "\n", 1847, "net.>ourceforge.squirrel_sl.plugins.dbopy.dbcopy", 4408, (-1658), (-1713), 2, "yS", "DIF+", (-5), 221, "*hoxZYxi'Fm1");
      tableColumnInfoArray0[3] = tableColumnInfo3;
      TableColumnInfo tableColumnInfo4 = new TableColumnInfo("#Th[+j/oHW~dp~2M", ">h`SWM", (String) null, " row_.* from ( ", (-1465), " that matched ", (-942), 0, 3033, 2570, "u~ZD?", " tableName = ", 0, (-5), "<-LwtnC");
      tableColumnInfoArray0[4] = tableColumnInfo1;
      TableColumnInfo tableColumnInfo5 = new TableColumnInfo("<-LwtnC", "DIF+", "9ozY>%!y)7\"pe", "net.sourceforge.squirrel_sql.fw.dialects.MySQL5DialectExt", (-1713), "AR", (-5), 2345, (-4566), (-942), (String) null, "m]%,Rq2O", (-1968526675), 2000000000, "\n");
      tableColumnInfoArray0[5] = tableColumnInfo5;
      // Undeclared exception!
      try { 
        DBUtil.getColumnList(tableColumnInfoArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JMenuItem jMenuItem0 = new JMenuItem("sqlResultsTabPlacement");
      jMenuItem0.getHorizontalTextPosition();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      GridBagConstraints gridBagConstraints0 = gridBagLayout0.getConstraints(jMenuItem0);
      GridBagLayout gridBagLayout1 = new GridBagLayout();
      gridBagConstraints0.anchor = (-1419);
      GridBagLayout gridBagLayout2 = new GridBagLayout();
      Point point0 = gridBagLayout1.getLayoutOrigin();
      Point point1 = (Point)point0.clone();
      Point point2 = gridBagLayout1.location(1, 7);
      point2.setLocation((Point2D) point1);
      point0.y = 2028;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Llh)d7Dt", "yhuPk&L8GK4{Gat>", "yhuPk&L8GK4{Gat>", "StWP*=D*p)I,\\", (-2300), "sqlResultsTabPlacement", (-2442), (-1419), 1, 442, "Error closing Session", "yhuPk&L8GK4{Gat>", (-708), 1111, "Error closing Session");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[0];
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte) (-57);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getDatabaseDriversFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[1];
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("'2000-1-1'", ",\"BBzRlL<1JW}8?'", "the time period ");
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) databaseObjectInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel0 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel0.setSelected(false);
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel1 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel2 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel3 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel3.getItemListeners();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel4 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel5 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel3.getChangeListeners();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel6 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel6.getMnemonic();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel7 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel1.getActionListeners();
      Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
      jToggleButton_ToggleButtonModel1.getListeners(class0);
      jToggleButton_ToggleButtonModel2.isSelected();
      jToggleButton_ToggleButtonModel1.getItemListeners();
      jToggleButton_ToggleButtonModel3.isArmed();
      jToggleButton_ToggleButtonModel2.getGroup();
      jToggleButton_ToggleButtonModel5.setGroup((ButtonGroup) null);
      jToggleButton_ToggleButtonModel5.isRollover();
      jToggleButton_ToggleButtonModel3.getActionCommand();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((String) null);
      jRadioButtonMenuItem0.setModel(jToggleButton_ToggleButtonModel2);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      jToggleButton_ToggleButtonModel6.getActionCommand();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("flHEEl!6RACN:3{\u0001l", "+YuAr;]=!_N", "+YuAr;]=!_N", "X[=|Bg6%A#654Jx", 0, "flHEEl!6RACN:3{\u0001l", 0, (-3), 332, 0, "+YuAr;]=!_N", ")?>@;I_slcNWK)H", (-527), (-2710), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin1, tableColumnInfo0, "X[=|Bg6%A#654Jx", "6smZt$W~\u0007ElXUNV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel0 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel0.setSelected(false);
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel1 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel2 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel3 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel3.getItemListeners();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel4 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel5 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel6 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel6.getMnemonic();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel7 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel1.getActionListeners();
      Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
      jToggleButton_ToggleButtonModel1.getListeners(class0);
      jToggleButton_ToggleButtonModel2.isSelected();
      jToggleButton_ToggleButtonModel1.getItemListeners();
      jToggleButton_ToggleButtonModel3.isArmed();
      jToggleButton_ToggleButtonModel2.getGroup();
      jToggleButton_ToggleButtonModel5.setGroup((ButtonGroup) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jToggleButton_ToggleButtonModel3.getActionCommand();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem();
      jRadioButtonMenuItem0.setModel(jToggleButton_ToggleButtonModel2);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("flHEEl!6RACN:3{\u0001l", "+YuAr;]=!_N", "+YuAr;]=!_N", "X[=|Bg6%A#654Jx", 0, "flHEEl!6RACN:3{\u0001l", 0, 0, 332, 0, "+YuAr;]=!_N", ")?>@;I_slcNWK)H", (-527), (-2710), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin1, tableColumnInfo0, "X[=|Bg6%A#654Jx", "6smZt$W~\u0007ElXUV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JMenuItem jMenuItem0 = new JMenuItem("sqlResultsTabPlacement");
      jMenuItem0.getHorizontalTextPosition();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      GridBagConstraints gridBagConstraints0 = gridBagLayout0.getConstraints(jMenuItem0);
      GridBagLayout gridBagLayout1 = new GridBagLayout();
      gridBagConstraints0.anchor = (-1419);
      GridBagLayout gridBagLayout2 = new GridBagLayout();
      Point point0 = gridBagLayout1.getLayoutOrigin();
      point0.clone();
      Point point1 = gridBagLayout1.location(1, 7);
      gridBagConstraints0.ipady = 1111;
      point1.move(45, 0);
      jMenuItem0.setLocation(point1);
      jMenuItem0.getIcon();
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getDTPropertiesFile();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl0.getExecutionLogFile();
      MockFile mockFile0 = new MockFile("eh.f", "eh.f");
      fileWrapperFactoryImpl0.create((File) mockFile0);
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      FileWrapperImpl fileWrapperImpl1 = (FileWrapperImpl)applicationFileWrappersImpl0.getSquirrelHomeDir();
      applicationFiles0.getSQuirrelJarFile();
      MockFile mockFile1 = new MockFile("`A3]7H'tG?*o/[");
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      fileWrapperFactoryImpl0.createTempFile("round(", "round(", fileWrapper0);
      fileWrapperFactoryImpl0.create("5}] ");
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles0);
      applicationFileWrappersImpl0.getEditWhereColsFile();
      MockFile mockFile2 = new MockFile(mockFile1, "`A3]7H'tG?*o/[");
      applicationFileWrappersImpl0.getSQuirrelJarFile();
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl(fileWrapperImpl0);
      FileWrapperImpl fileWrapperImpl3 = FileWrapperImpl.createTempFile("5}] ", (String) null, fileWrapperImpl2);
      fileWrapperImpl3.mkdirs();
      fileWrapperImpl3.toURI();
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      fileWrapperFactoryImpl1.createTempFile("round(", "t`gDr(", (FileWrapper) fileWrapperImpl1);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getForeignKeySQL(dBCopyPlugin0, (ITableInfo) null, (ArrayList<ITableInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      StyledEditorKit.FontFamilyAction styledEditorKit_FontFamilyAction0 = new StyledEditorKit.FontFamilyAction("}]22&oli3MS-j?z", "}]22&oli3MS-j?z");
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem(styledEditorKit_FontFamilyAction0);
      jCheckBoxMenuItem1.getIcon();
      jCheckBoxMenuItem0.getVetoableChangeListeners();
      jCheckBoxMenuItem0.getIcon();
      jCheckBoxMenuItem0.getVetoableChangeListeners();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.replaceOtherDataType((TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[1];
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("$listget", "", "", (String) null, (-3), "$listget", (-7), 1311, (-2061), (-2061), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "*,234A+UPL0\"fr", (-3), (-3), "#{*nZ~CJ6\"M,:M@.yp");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      String string0 = dBCopyPlugin0.getWebSite();
      assertEquals("http://www.squirrelsql.org", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(")(fY%EXGmJQR", ")(fY%EXGmJQR", ")(fY%EXGmJQR", "Encountered unexpected exceptisn whie attempting to determine if catalogs are used in table definitions", 1111, "Encountered unexpected exceptisn whie attempting to determine if catalogs are used in table definitions", 1111, 4114, 1111, 1111, "Encountered unexpected exceptisn whie attempting to determine if catalogs are used in table definitions", "Encountered unexpected exceptisn whie attempting to determine if catalogs are used in table definitions", 1111, 4114, "Encountered unexpected exceptisn whie attempting to determine if catalogs are used in table definitions");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Rectangle rectangle0 = new Rectangle(0, 0);
      AffineTransform affineTransform0 = new AffineTransform((-4299.198F), (float) 0, (float) 0, (float) 0, 0.0F, 3776.59F);
      JColorChooser jColorChooser0 = new JColorChooser();
      JColorChooser jColorChooser1 = new JColorChooser();
      JViewport jViewport0 = new JViewport();
      JViewport jViewport1 = new JViewport();
      jViewport1.getViewSize();
      MultiOptionPaneUI multiOptionPaneUI0 = new MultiOptionPaneUI();
      // Undeclared exception!
      try { 
        multiOptionPaneUI0.getAccessibleChild(jColorChooser1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("NO", "82", "82", " ADD FOREIGN KEY (", 1707, "`c&is\"pR;`n>?Pw7", 1089, (-4), (-6), (-4), "NO", "NO", (-4), (-4), "JWLy}]sL&");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.COLUMN;
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriver sQLDriver0 = new SQLDriver();
      Color color0 = Color.BLUE;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1089;
      // Undeclared exception!
      try { 
        color0.getRGBComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JMenu jMenu0 = new JMenu();
      jMenu0.getHorizontalTextPosition();
      FocusListener[] focusListenerArray0 = jMenu0.getFocusListeners();
      jMenu0.setContentAreaFilled(true);
      jMenu0.setInheritsPopupMenu(true);
      ImageIcon imageIcon0 = new ImageIcon("e7e6Pawn!9Vi");
      jMenu0.getWidth();
      jMenu0.getVetoableChangeListeners();
      MockPrintStream mockPrintStream0 = new MockPrintStream("e7e6Pawn!9Vi");
      PrintStream printStream0 = mockPrintStream0.printf("j0dh#bHQL9~i", (Object[]) focusListenerArray0);
      mockPrintStream0.println('U');
      printStream0.flush();
      printStream0.print((-3221));
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jMenu0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      printStream0.print(0L);
      jMenu0.list(printStream0);
      jMenu0.getContainerListeners();
      DatabaseObjectType.createNewDatabaseObjectType("BLXZ#");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.INDEX;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("BLXZ#", "getCatSep: Unexpected Exception - ", "T]:+zBOIY7f*vy~_", "BLXZ#", 2147000000, "BLXZ#", 28, (-4723), (-923), 1111, "T]:+zBOIY7f*vy~_", (String) null, 0, 11, "g");
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, tableColumnInfo0, "j0dh#bHQL9~i", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JMenuItem jMenuItem0 = new JMenuItem("sqlResultsTabPlacement");
      jMenuItem0.getHorizontalTextPosition();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      GridBagConstraints gridBagConstraints0 = gridBagLayout0.getConstraints(jMenuItem0);
      GridBagLayout gridBagLayout1 = new GridBagLayout();
      gridBagConstraints0.anchor = 0;
      GridBagLayout gridBagLayout2 = new GridBagLayout();
      gridBagLayout0.getConstraints(jMenuItem0);
      GridBagLayout gridBagLayout3 = new GridBagLayout();
      GridBagLayout gridBagLayout4 = new GridBagLayout();
      Point point0 = gridBagLayout1.getLayoutOrigin();
      point0.clone();
      point0.setLocation(1, 2005);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DBUtil.tableHasForeignKey("bit_add", " tableName=", "SIW", foreignKeyInfo0, dBCopyPlugin0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[0];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[1];
      DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      JLabel jLabel0 = new JLabel();
      MultiSliderUI multiSliderUI0 = new MultiSliderUI();
      // Undeclared exception!
      try { 
        multiSliderUI0.getMinimumSize(jLabel0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent((-308), 1213);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DBUtil.typesAreEquivalent(2, 2);
      String string0 = "ScriptWriter.error.nouserhome";
      JTextPane jTextPane0 = new JTextPane();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor(jSpinner0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not a SpinnerDateModel
         //
         verifyException("javax.swing.JSpinner$DateEditor", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Stack<ProcedureInfo> stack0 = new Stack<ProcedureInfo>();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceDatabaseObjects();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(515);
      Stack<IDatabaseObjectInfo> stack0 = new Stack<IDatabaseObjectInfo>();
      DBUtil.convertObjectToTableList(stack0);
      sQLDriverPropertyCollection0.getDriverProperties();
      SQLDriver sQLDriver0 = new SQLDriver(integerIdentifier0);
      int int0 = 1003;
      // Undeclared exception!
      try { 
        sQLDriverPropertyCollection0.getDriverProperty(1003);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1003, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.unload();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      File file0 = applicationFiles0.getUserSettingsDirectory();
      fileWrapperFactoryImpl0.create(file0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getExecutionLogFile();
      String[] stringArray0 = new String[12];
      stringArray0[9] = "B{,6*&aTy!";
      FilesystemFilter filesystemFilter0 = new FilesystemFilter(stringArray0, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", false);
      fileWrapper0.listFiles((FilenameFilter) filesystemFilter0);
      fileWrapperFactoryImpl0.createTempFile("B{,6*&aTy!", "B{,6*&aTy!", fileWrapper0);
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      dBCopyPlugin0.getDestSession();
      String string0 = DBUtil.fixCase((ISession) null, stringArray0[0]);
      assertNull(string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem("}]22&oli3MS-j?z");
      jCheckBoxMenuItem1.getIcon();
      jCheckBoxMenuItem0.getVetoableChangeListeners();
      jCheckBoxMenuItem0.getIcon();
      jCheckBoxMenuItem0.getVetoableChangeListeners();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JCheckBoxMenuItem jCheckBoxMenuItem2 = new JCheckBoxMenuItem("}]22&oli3MS-j?z");
      jCheckBoxMenuItem1.getIcon();
      jCheckBoxMenuItem1.getVetoableChangeListeners();
      MenuElement[] menuElementArray0 = new MenuElement[10];
      menuElementArray0[9] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[2] = (MenuElement) jCheckBoxMenuItem2;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      menuSelectionManager1.getChangeListeners();
      jCheckBoxMenuItem0.getName();
      jCheckBoxMenuItem1.setDoubleBuffered(true);
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jCheckBoxMenuItem2, 1007, 1L, (-3465), (-3465), 1529, (-3465), false, menuElementArray0, menuSelectionManager1);
      JMenuItem jMenuItem0 = new JMenuItem("}]22&oli3MS-j?z");
      Integer integer0 = new Integer(2736);
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, "pT", "w^T0@=|_e*FY[Wg~m", ";7@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel0 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel1 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel1.getItemListeners();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel2 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel3 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel4 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel4.getMnemonic();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel5 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel6 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel7 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel7.getActionListeners();
      Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
      jToggleButton_ToggleButtonModel6.getListeners(class0);
      jToggleButton_ToggleButtonModel7.isSelected();
      jToggleButton_ToggleButtonModel4.getItemListeners();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel8 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel6.isArmed();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel9 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel9.getGroup();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel10 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel10.setGroup((ButtonGroup) null);
      jToggleButton_ToggleButtonModel7.isRollover();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel11 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel11.getActionCommand();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, ",c&is\"pR;`n>?Pw7", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "getCatSep: Unexpected Exception - ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JMenuItem jMenuItem0 = new JMenuItem("sqlResultsTabPlacement");
      jMenuItem0.getHorizontalTextPosition();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      GridBagConstraints gridBagConstraints0 = gridBagLayout0.getConstraints(jMenuItem0);
      GridBagLayout gridBagLayout1 = new GridBagLayout();
      gridBagConstraints0.anchor = (-1419);
      GridBagLayout gridBagLayout2 = new GridBagLayout();
      Point point0 = gridBagLayout1.getLayoutOrigin();
      Point point1 = (Point)point0.clone();
      Point point2 = gridBagLayout1.location(1, 7);
      point2.clone();
      point2.setLocation((Point2D) point1);
      point0.y = 2028;
      gridBagConstraints0.ipady = 1111;
      point2.move(45, 2028);
      jMenuItem0.setLocation(point2);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.dropTable("sqlResultsTabPlacement", "lO2|cx+f(-%4<TFH", "lO2|cx+f(-%4<TFH", (ISession) null, true, 2339);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DBUtil.setLastStatement("]z;|<Jq<_n1wpR");
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "CU~^#Re8ViS\u0000Q", "CU~^#Re8ViS\u0000Q", "t`gDr(", (-948));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      StyledEditorKit.FontFamilyAction styledEditorKit_FontFamilyAction0 = new StyledEditorKit.FontFamilyAction("Xcm|[CF|U/}K", "Xcm|[CF|U/}K");
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem(styledEditorKit_FontFamilyAction0);
      jCheckBoxMenuItem1.getIcon();
      jCheckBoxMenuItem0.getVetoableChangeListeners();
      jCheckBoxMenuItem0.getIcon();
      jCheckBoxMenuItem0.getVetoableChangeListeners();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JCheckBoxMenuItem jCheckBoxMenuItem2 = new JCheckBoxMenuItem("Xcm|[CF|U/}K");
      jCheckBoxMenuItem2.setInheritsPopupMenu(true);
      jCheckBoxMenuItem1.getIcon();
      jCheckBoxMenuItem1.getVetoableChangeListeners();
      jCheckBoxMenuItem2.setVerifyInputWhenFocusTarget(true);
      MenuElement[] menuElementArray0 = new MenuElement[9];
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[2] = (MenuElement) jCheckBoxMenuItem2;
      menuElementArray0[3] = (MenuElement) jCheckBoxMenuItem1;
      menuElementArray0[4] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[5] = (MenuElement) jCheckBoxMenuItem2;
      menuElementArray0[6] = (MenuElement) jCheckBoxMenuItem2;
      styledEditorKit_FontFamilyAction0.setEnabled(false);
      menuElementArray0[8] = (MenuElement) jCheckBoxMenuItem2;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jCheckBoxMenuItem2, 1796, 1796, (-3465), (-3465), 1796, 1796, false, menuElementArray0, menuSelectionManager0);
      jCheckBoxMenuItem1.processMenuDragMouseEvent(menuDragMouseEvent0);
      JMenuItem jMenuItem0 = new JMenuItem("Xcm|[CF|U/}K");
      jCheckBoxMenuItem2.getContainerListeners();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "oA6B(I@ DitjcUZ", "oA6B(I@ DitjcUZ", (-1417));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(4194304, (-538));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DBUtil.typesAreEquivalent(15, 15);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      defaultCaret0.intersects((Rectangle2D) rectangle0);
      defaultCaret0.setRect((double) (-2071), (double) (-2071), (-2070.5480536734967), (-2070.5480536734967));
      JColorChooser jColorChooser0 = new JColorChooser();
      JColorChooser jColorChooser1 = new JColorChooser();
      JViewport jViewport0 = new JViewport();
      Dimension dimension0 = jViewport0.getViewSize();
      DefaultEditorKit.PasteAction defaultEditorKit_PasteAction0 = new DefaultEditorKit.PasteAction();
      String string0 = "BLXZ#";
      Action[] actionArray0 = new Action[5];
      actionArray0[0] = (Action) defaultEditorKit_PasteAction0;
      actionArray0[1] = (Action) defaultEditorKit_PasteAction0;
      actionArray0[2] = (Action) defaultEditorKit_PasteAction0;
      actionArray0[3] = (Action) defaultEditorKit_PasteAction0;
      Box box0 = Box.createVerticalBox();
      ActionMap actionMap0 = box0.getActionMap();
      Object object0 = new Object();
      dimension0.height = (-192);
      actionMap0.get(object0);
      actionArray0[4] = null;
      dimension0.height = 0;
      // Undeclared exception!
      try { 
        TextAction.augmentList(actionArray0, actionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.TextAction", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DBUtil.typesAreEquivalent(3, 3);
      StringContent stringContent0 = new StringContent((-61));
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      Element element0 = plainDocument0.getDefaultRootElement();
      plainDocument0.getDefaultRootElement();
      ChronoField chronoField0 = ChronoField.DAY_OF_WEEK;
      LabelView labelView0 = new LabelView(element0);
      WrappedPlainView wrappedPlainView0 = new WrappedPlainView(element0, true);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      JEditorPane jEditorPane0 = null;
      try {
        jEditorPane0 = new JEditorPane("N");
        fail("Expecting exception: MalformedURLException");
      
      } catch(Throwable e) {
         //
         // no protocol: N
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((ISession) null, "WwOxQV+7yaF!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = ";7a|td\\uA`;";
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, string0, " drop foreign |pkey ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JRadioButton jRadioButton0 = new JRadioButton();
      JMenuItem jMenuItem0 = new JMenuItem("sqlResultsTabPlacement");
      jMenuItem0.getHorizontalTextPosition();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      GridBagConstraints gridBagConstraints0 = gridBagLayout0.getConstraints(jMenuItem0);
      GridBagLayout gridBagLayout1 = new GridBagLayout();
      gridBagLayout0.setConstraints(jRadioButton0, gridBagConstraints0);
      gridBagConstraints0.gridheight = (-1419);
      gridBagLayout1.layoutContainer(jRadioButton0);
      GridBagLayout gridBagLayout2 = new GridBagLayout();
      Point point0 = gridBagLayout2.location(5, 1);
      point0.clone();
      Point point1 = gridBagLayout1.location((-1419), 7);
      gridBagConstraints0.ipady = 1111;
      gridBagLayout0.minimumLayoutSize(jRadioButton0);
      point1.move(45, 0);
      jMenuItem0.setLocation(point1);
      jMenuItem0.getIcon();
      // Undeclared exception!
      try { 
        DBUtil.isKeyword((ISession) null, "sqlResultsTabPlacement");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setRecordDelayMillis(4L);
      dBCopyPreferenceBean0.setUseFileCaching(false);
      dBCopyPreferenceBean0.setCopyForeignKeys(true);
      dBCopyPreferenceBean0.setCopyForeignKeys(false);
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      String string0 = "";
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLDriver sQLDriver0 = new SQLDriver(uidIdentifier0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      String string1 = "&+\"~Na,Z\\(qCtb|k";
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "&+\"~Na,Z(qCtb|k", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.sanityCheckPreferences((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = DBUtil.getLastStatement();
      assertNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String string0 = DBUtil.getLastStatementValues();
      assertNull(string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      StyledEditorKit.FontFamilyAction styledEditorKit_FontFamilyAction0 = new StyledEditorKit.FontFamilyAction("}]22&oli3MS-j?z", "}]22&oli3MS-j?z");
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem(styledEditorKit_FontFamilyAction0);
      jCheckBoxMenuItem1.getIcon();
      DBUtil dBUtil0 = new DBUtil();
      ActionEvent actionEvent0 = new ActionEvent(dBUtil0, (-2395), "}]22&oli3MS-j?z", (-2395), (-2395));
      styledEditorKit_FontFamilyAction0.actionPerformed(actionEvent0);
      jCheckBoxMenuItem0.getVetoableChangeListeners();
      ImageIcon imageIcon0 = new ImageIcon("}]22&oli3MS-j?z", "}]22&oli3MS-j?z");
      jCheckBoxMenuItem0.getVetoableChangeListeners();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JCheckBoxMenuItem jCheckBoxMenuItem2 = new JCheckBoxMenuItem("}]22&oli3MS-j?z");
      jCheckBoxMenuItem2.setInheritsPopupMenu(true);
      jCheckBoxMenuItem1.getIcon();
      jCheckBoxMenuItem1.getVetoableChangeListeners();
      MenuElement[] menuElementArray0 = new MenuElement[10];
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[2] = (MenuElement) jCheckBoxMenuItem2;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      menuSelectionManager1.getChangeListeners();
      jCheckBoxMenuItem1.setDoubleBuffered(true);
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jCheckBoxMenuItem2, 1007, 1L, (-3465), (-3465), 1529, (-3465), true, menuElementArray0, menuSelectionManager1);
      JMenuItem jMenuItem0 = new JMenuItem("}]22&oli3MS-j?z");
      jCheckBoxMenuItem1.getContainerListeners();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.unload();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "]z;|<Jq<_n1wpR", "]z;|<Jq<_n1wpR");
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel0 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel0.setSelected(true);
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel1 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel2 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel1.getItemListeners();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel3 = new JToggleButton.ToggleButtonModel();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel4 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel2.setEnabled(false);
      jToggleButton_ToggleButtonModel0.isRollover();
      JToggleButton.ToggleButtonModel jToggleButton_ToggleButtonModel5 = new JToggleButton.ToggleButtonModel();
      jToggleButton_ToggleButtonModel1.getActionCommand();
      jToggleButton_ToggleButtonModel3.setMnemonic(Integer.MAX_VALUE);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, (String) null, "Failed to add cloned item.", "action.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }
}
