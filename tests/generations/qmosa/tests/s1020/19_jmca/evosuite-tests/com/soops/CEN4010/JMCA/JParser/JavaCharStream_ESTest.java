/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 17:22:48 GMT 2020
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8913187591243728
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#J2>$");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1383), 1705);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.maxNextCharInd = 1705;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(1705, javaCharStream0.getEndColumn());
      assertEquals(1705, javaCharStream0.getBeginColumn());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals((-1383), javaCharStream0.getLine());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals(1705, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      
      javaCharStream0.prevCharIsLF = true;
      assertEquals(1705, javaCharStream0.getEndColumn());
      assertEquals(1705, javaCharStream0.getBeginColumn());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals((-1383), javaCharStream0.getLine());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals(1705, javaCharStream0.getColumn());
      
      char char1 = javaCharStream0.BeginToken();
      assertTrue(char1 == char0);
      assertEquals((-1382), javaCharStream0.getLine());
      assertEquals((-1382), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-1382), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char1);
      
      javaCharStream0.FillBuff();
      assertEquals((-1382), javaCharStream0.getLine());
      assertEquals((-1382), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-1382), javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ExpandBuff(true);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-1382), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = javaCharStream0.getEndLine();
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-1382), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int0);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8313535499175861
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#J2>$");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1383), 1705);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.maxNextCharInd = 1705;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals((-1383), javaCharStream0.getLine());
      assertEquals(1705, javaCharStream0.getColumn());
      assertEquals(1705, javaCharStream0.getBeginColumn());
      assertEquals(1705, javaCharStream0.getEndColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      
      char char1 = javaCharStream0.BeginToken();
      assertTrue(char1 == char0);
      assertEquals((-1383), javaCharStream0.getLine());
      assertEquals(1706, javaCharStream0.getBeginColumn());
      assertEquals(1706, javaCharStream0.getEndColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals(1706, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char1);
      
      javaCharStream0.FillBuff();
      assertEquals((-1383), javaCharStream0.getLine());
      assertEquals(1706, javaCharStream0.getBeginColumn());
      assertEquals(1706, javaCharStream0.getEndColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals(1706, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ExpandBuff(false);
      assertEquals((-1383), javaCharStream0.getLine());
      assertEquals(1706, javaCharStream0.getBeginColumn());
      assertEquals(1706, javaCharStream0.getEndColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals(1706, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = javaCharStream0.getEndLine();
      assertEquals((-1383), javaCharStream0.getLine());
      assertEquals(1706, javaCharStream0.getBeginColumn());
      assertEquals(1706, javaCharStream0.getEndColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals(1706, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1383), int0);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = JavaCharStream.hexval('A');
      assertEquals(10, int0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertNotNull(uRI0);
      
      // Undeclared exception!
      try { 
        MockURI.relativize(uRI0, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7494938253936618
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 64);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('I', char0);
      
      javaCharStream0.backup((byte)1);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(4095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char1 = javaCharStream0.BeginToken();
      assertTrue(char1 == char0);
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('I', char1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7494938253936616
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)18;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[1] = (byte)18;
      byteArray0[3] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(14, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)18, (byte)0, (byte)18);
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(14, byteArray0.length);
      
      long long0 = byteArrayInputStream0.skip((byte)18);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(14L, long0);
      assertEquals(14, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)18;
      intArray0[1] = (int) (byte)18;
      intArray0[2] = (int) (byte)18;
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
      assertEquals(14, byteArray0.length);
      
      byteArrayInputStream0.reset();
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(14, byteArray0.length);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0012', char0);
      assertEquals(14, byteArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      javaCharStream0.bufline = intArray1;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.backup((-3459));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3459, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|y%Z7)&l8C7FGlY");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("'");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 2218;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-903), 2218);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.maxNextCharInd = (-1802);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6525902233018674
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("#J2>$");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1383), 1705);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals((-1383), javaCharStream0.getLine());
      assertEquals(1705, javaCharStream0.getBeginColumn());
      assertEquals(1705, javaCharStream0.getColumn());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals(1705, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('#', char0);
      
      char char1 = javaCharStream0.readChar();
      assertFalse(char1 == char0);
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals(1706, javaCharStream0.getColumn());
      assertEquals((-1383), javaCharStream0.getLine());
      assertEquals(1705, javaCharStream0.getBeginColumn());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals(1706, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('J', char1);
      
      char char2 = javaCharStream0.BeginToken();
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals(1707, javaCharStream0.getColumn());
      assertEquals((-1383), javaCharStream0.getLine());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals(1707, javaCharStream0.getEndColumn());
      assertEquals(1707, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('2', char2);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3944462701712828
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = JavaCharStream.hexval('B');
      assertEquals(11, int0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      assertFalse(uRI1.equals((Object)uRI0));
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getScheme());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isAbsolute());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("", uRI1.toString());
      assertNull(uRI1.getRawAuthority());
      assertEquals("", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertFalse(uRI1.isOpaque());
      assertNotNull(uRI1);
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-112), (byte)78, (byte)8}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-112), (byte)78, (byte)8}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)8, (byte)8);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-4), byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-112), (byte)78, (byte)8}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 91, (-4944));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-4), byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-112), (byte)78, (byte)8}, byteArray0);
      
      javaCharStream0.backup((byte)8);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-4), byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4087, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-112), (byte)78, (byte)8}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      StringReader stringReader0 = new StringReader("P[]'g");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-4944), 100, (byte)8);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      char char0 = javaCharStream1.readChar();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-4944), javaCharStream1.getLine());
      assertEquals(100, javaCharStream1.getColumn());
      assertEquals(100, javaCharStream1.getBeginColumn());
      assertEquals((-4944), javaCharStream1.getBeginLine());
      assertEquals((-4944), javaCharStream1.getEndLine());
      assertEquals(100, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('P', char0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-4), byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4087, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-112), (byte)78, (byte)8}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(int1 == int0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-4), byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4087, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-112), (byte)78, (byte)8}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      int int2 = byteArrayInputStream1.read();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-4), byteArrayInputStream1.available());
      assertEquals((-1), int2);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-112), (byte)78, (byte)8}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      StringReader stringReader1 = new StringReader("54dj-pv");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, (-1), (byte)78);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      
      javaCharStream2.AdjustBuffSize();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      
      char char1 = javaCharStream2.BeginToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(char1 == char0);
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals(78, javaCharStream2.getColumn());
      assertEquals(78, javaCharStream2.getEndColumn());
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals(78, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('5', char1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      
      char char2 = javaCharStream1.readChar();
      assertFalse(char2 == char0);
      assertFalse(char2 == char1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertEquals((-4944), javaCharStream1.getLine());
      assertEquals(100, javaCharStream1.getBeginColumn());
      assertEquals(101, javaCharStream1.getEndColumn());
      assertEquals((-4944), javaCharStream1.getBeginLine());
      assertEquals((-4944), javaCharStream1.getEndLine());
      assertEquals(101, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('[', char2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertEquals((-4944), javaCharStream1.getLine());
      assertEquals(100, javaCharStream1.getBeginColumn());
      assertEquals(101, javaCharStream1.getEndColumn());
      assertEquals((-4944), javaCharStream1.getBeginLine());
      assertEquals((-4944), javaCharStream1.getEndLine());
      assertEquals(101, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char char3 = javaCharStream2.ReadByte();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(char3 == char2);
      assertFalse(char3 == char1);
      assertFalse(char3 == char0);
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals(78, javaCharStream2.getColumn());
      assertEquals(78, javaCharStream2.getEndColumn());
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals(78, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('4', char3);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      
      try { 
        javaCharStream1.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5723854919701734
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 64);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('I', char0);
      
      javaCharStream0.backup((byte)1);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      
      char char1 = javaCharStream0.readChar();
      assertTrue(char1 == char0);
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('I', char1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)76);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, (-127));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = JavaCharStream.hexval('F');
      assertEquals(15, int0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNotNull(uRI0);
      
      // Undeclared exception!
      try { 
        MockURI.relativize(uRI0, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(19, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(19, byteArray0.length);
      
      byteArrayInputStream0.reset();
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(19, byteArray0.length);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 74, (byte)0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-55), byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertEquals(19, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, (byte)0, (byte)0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-55), byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(19, byteArray0.length);
      
      javaCharStream0.backup(74);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-55), byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4021, javaCharStream0.bufpos);
      assertEquals(19, byteArray0.length);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArrayInputStream0.reset();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(19, byteArray0.length);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J<lRbF6!WF]ci~ft");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-55), byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4022, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(19, byteArray0.length);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-55), byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4022, javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertEquals(19, byteArray0.length);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      char char1 = javaCharStream0.BeginToken();
      assertTrue(char1 == char0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-55), byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4023, javaCharStream0.bufpos);
      assertEquals('\u0000', char1);
      assertEquals(19, byteArray0.length);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[0] = (byte)63;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)9;
      byte byte0 = (byte)74;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte) (-97);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)63, (byte)0, (byte)0, (byte)0, (byte)63, (byte) (-98), (byte)9, (byte)74, (byte) (-97)}, byteArray0);
      
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = JavaCharStream.hexval('E');
      assertEquals(14, int0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setExecutable(false);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(boolean0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      boolean boolean1 = mockFile1.setExecutable(false);
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("/home/ubuntu/replication/scripts/projects", mockFile1.getParent());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isDirectory());
      assertFalse(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertEquals("19_jmca", mockFile1.getName());
      assertEquals("/home/ubuntu/replication/scripts/projects/19_jmca", mockFile1.toString());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(boolean1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      MockFile mockFile2 = new MockFile("");
      assertTrue(mockFile2.equals((Object)mockFile1));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertNotNull(mockFile2);
      
      MockFile mockFile3 = new MockFile(mockFile1, "com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)mockFile2));
      assertFalse(mockFile3.equals((Object)mockFile2));
      assertFalse(mockFile3.equals((Object)mockFile1));
      assertFalse(mockFile3.equals((Object)mockFile0));
      assertNotNull(mockFile3);
      
      String string0 = "";
      try { 
        MockURI.URI("jS4Qcv*{ef\"pA;", "YS,sA2M]v%NY@x>", (String) null, (String) null, "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 6: jS4Qcv*{ef\"pA;://YS,sA2M]v%25NY@x%3E#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7060571156426696
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#J2>$");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1383), 1705);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      
      javaCharStream0.maxNextCharInd = 1705;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals((-1383), javaCharStream0.getLine());
      assertEquals(1705, javaCharStream0.getEndColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals(1705, javaCharStream0.getColumn());
      assertEquals(1705, javaCharStream0.getBeginColumn());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      
      char char1 = javaCharStream0.BeginToken();
      assertTrue(char1 == char0);
      assertEquals((-1383), javaCharStream0.getLine());
      assertEquals(1706, javaCharStream0.getEndColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals(1706, javaCharStream0.getColumn());
      assertEquals(1706, javaCharStream0.getBeginColumn());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      int int0 = 495;
      javaCharStream0.backup(495);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1706, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3601, javaCharStream0.bufpos);
      
      javaCharStream0.backup((-1383));
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals(1706, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4984, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4985
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3409508144607027
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#J2>$");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1383), 1705);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      
      javaCharStream0.backup(1436);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2659, javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2660, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2660, javaCharStream0.bufpos);
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2660, javaCharStream0.bufpos);
      assertEquals(0, int0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertTrue(int1 == int0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2660, javaCharStream0.bufpos);
      assertEquals(0, int1);
      
      javaCharStream0.adjustBeginLineColumn((-1), 1436);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1436, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1436, javaCharStream0.getBeginColumn());
      assertEquals(1436, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2660, javaCharStream0.bufpos);
      
      javaCharStream0.backup(1187);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1436, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1436, javaCharStream0.getBeginColumn());
      assertEquals(1436, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1473, javaCharStream0.bufpos);
      
      String string1 = javaCharStream0.GetImage();
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1436, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1436, javaCharStream0.getBeginColumn());
      assertEquals(1436, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1473, javaCharStream0.bufpos);
      assertNotNull(string1);
      
      javaCharStream0.ExpandBuff(true);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1436, javaCharStream0.getBeginColumn());
      assertEquals(7617, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1436, javaCharStream0.getBeginColumn());
      assertEquals(7617, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char1 = javaCharStream0.BeginToken();
      assertTrue(char1 == char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(7618, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char char2 = javaCharStream0.readChar();
      assertTrue(char2 == char0);
      assertTrue(char2 == char1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(7619, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char2);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1436, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1436, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      char char3 = javaCharStream0.BeginToken();
      assertTrue(char3 == char2);
      assertTrue(char3 == char0);
      assertTrue(char3 == char1);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1436, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1436, javaCharStream0.getBeginColumn());
      assertEquals(1436, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals('\u0000', char3);
      
      int int2 = javaCharStream0.getLine();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1436, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1436, javaCharStream0.getBeginColumn());
      assertEquals(1436, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1), int2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E\"0>T");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 812, 2, 2);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = 'q';
      charArray0[2] = '\\';
      charArray0[3] = 'Q';
      charArray0[4] = '8';
      charArray0[5] = '6';
      charArray0[6] = 'y';
      charArray0[7] = 'b';
      javaCharStream0.nextCharBuf = charArray0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.351673301904631
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-231), 2011);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      int int0 = 2;
      javaCharStream1.backup(2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4093, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      char char0 = javaCharStream1.readChar();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4094, javaCharStream1.bufpos);
      assertEquals('\u0000', char0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4094, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.Done();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4094, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(int1 == int0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      // Undeclared exception!
      try { 
        javaCharStream1.getBeginColumn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 188, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix(882);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = JavaCharStream.hexval('9');
      assertEquals(9, int0);
      
      boolean boolean0 = true;
      String string0 = "^3bmzJkq)\"K*O";
      MockFile mockFile0 = new MockFile("^3bmzJkq)\"K*O", "[4(c>");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "[4(c>");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockFile mockFile2 = null;
      try {
        mockFile2 = new MockFile(mockFile1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = JavaCharStream.hexval('e');
      assertEquals(14, int0);
      
      URI uRI0 = null;
      // Undeclared exception!
      try { 
        MockURI.relativize((URI) null, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('5');
      assertEquals(5, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(5);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        JavaCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      // Undeclared exception!
      try { 
        MockURI.relativize(uRI0, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = JavaCharStream.hexval('6');
      assertEquals(6, int0);
      
      String string0 = "l";
      MockFile mockFile0 = new MockFile("l");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setWritable(false);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("l", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("l", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(boolean0);
      
      boolean boolean1 = mockFile0.setExecutable(false);
      assertTrue(boolean1 == boolean0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("l", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("l", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(boolean1);
      
      MockFile mockFile1 = new MockFile(mockFile0, "l");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      try { 
        JavaCharStream.hexval('g');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0963525794641384
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("cl2D# UD>b)");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.backup(221);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3874, javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3875, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, int0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertTrue(int1 == int0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, int1);
      
      javaCharStream0.adjustBeginLineColumn(221, 0);
      assertEquals(221, javaCharStream0.getBeginLine());
      assertEquals(221, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(221, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(221, javaCharStream0.getBeginLine());
      assertEquals(221, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(221, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      javaCharStream0.ExpandBuff(true);
      assertEquals(221, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(221, javaCharStream0.bufpos);
      
      try { 
        MockURI.URI("osTS", " column ", "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: osTS:// column
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.1738965505262752
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3945573191650285
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[?zS5j75:X}m\u0001-~p;");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1021, 1021);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.prevCharIsCR = true;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(1022, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1022, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1022, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('[', char0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3945573191650285
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "[?zS5j75:X}m\\1-~p;";
      StringReader stringReader0 = new StringReader("[?zS5j75:X}m\u0001-~p;");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1021, 1021);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      int int0 = stringReader0.read();
      assertEquals(91, int0);
      
      javaCharStream0.prevCharIsCR = true;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(1022, javaCharStream0.getBeginLine());
      assertEquals(1022, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1022, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('?', char0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char char0 = '\\';
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.7988376432206954
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("#J2>$");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1374), 1705);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      
      int int0 = 1436;
      javaCharStream0.backup(1436);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2659, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2660, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2660, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int1 = javaCharStream0.getBeginLine();
      assertFalse(int1 == int0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2660, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int1);
      
      int int2 = javaCharStream0.getBeginColumn();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2660, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int2);
      
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char char0 = 'W';
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#J2>$");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('c');
      assertEquals(12, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "F6-";
      String string1 = "vZ9";
      try { 
        MockURI.URI("", "", "Tr[QBA?A{G9~g5|_iF@", "vZ9", "vZ9");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://Tr%5BQBA%3FA%7BG9~g5%7C_iF@?vZ9#vZ9
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.335648405544701
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)74;
      StringReader stringReader0 = new StringReader("7tK:8B}c");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('7', char0);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, int0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertTrue(int1 == int0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, int1);
      
      javaCharStream0.adjustBeginLineColumn((-1), 1049);
      assertEquals(1049, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1049, javaCharStream0.getEndColumn());
      assertEquals(1049, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaCharStream0.backup(1049);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1049, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(5095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1049, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(5095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      
      javaCharStream0.ExpandBuff(false);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1049, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(5095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (byte)9, (-1063));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      String string1 = javaCharStream0.GetImage();
      assertTrue(string1.equals((Object)string0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1049, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(5095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      try { 
        javaCharStream1.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = JavaCharStream.hexval('4');
      assertEquals(4, int0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getHost());
      assertNotNull(uRI0);
      
      // Undeclared exception!
      try { 
        MockURI.relativize(uRI0, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1152090707897355
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-273), 2011);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      javaCharStream1.backup(2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(4093, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      char char0 = javaCharStream1.BeginToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(4094, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int0 = javaCharStream0.getBeginLine();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, int0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      int int1 = javaCharStream1.getBeginColumn();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertTrue(int1 == int0);
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int1);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.adjustBeginLineColumn(2, (-874));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(2, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getLine());
      assertEquals((-874), javaCharStream1.getBeginColumn());
      assertEquals((-874), javaCharStream1.getColumn());
      assertEquals((-874), javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream0.tokenBegin = (-446);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        javaCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = JavaCharStream.hexval('d');
      assertEquals(13, int0);
      
      File file0 = MockFile.createTempFile("|I=DJF", "|I=DJF");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/|I=DJF0|I=DJF", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("|I=DJF0|I=DJF", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "|I=DJF");
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|2<5V1QY~vWw");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.302014103085905
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = MockFile.createTempFile("[?zS5j75:X}m\u0001-~p;", "[?zS5j75:X}m\u0001-~p;");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("[?zS5j75:X}m\u0001-~p;0[?zS5j75:X}m\u0001-~p;", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/[?zS5j75:X}m\u0001-~p;0[?zS5j75:X}m\u0001-~p;", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      StringReader stringReader0 = new StringReader("[?zS5j75:X}m\u0001-~p;");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 10, (-1740));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      javaCharStream0.backup(4088);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int0 = javaCharStream1.getBeginLine();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int1 = javaCharStream1.getBeginColumn();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertTrue(int1 == int0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int1);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream0.adjustBeginLineColumn(0, 11);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaCharStream1.tokenBegin = 11;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      String string1 = javaCharStream1.GetImage();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string1);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream0.ExpandBuff(false);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      char char1 = javaCharStream0.BeginToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertTrue(char1 == char0);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals('\u0000', char1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      char char2 = javaCharStream0.readChar();
      assertTrue(char2 == char1);
      assertTrue(char2 == char0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals('\u0000', char2);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-12), javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8605343774698508
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[3] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(23, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(23, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)18, (byte)0, (byte)18);
      assertEquals(23, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(23, byteArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      byteArrayInputStream0.reset();
      assertEquals(23, byteArrayInputStream0.available());
      assertEquals(23, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b9.G&iTt?d!W%/YH");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0012', char0);
      assertEquals(23, byteArray0.length);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals("\u0012", string0);
      assertEquals(23, byteArray0.length);
      
      int int0 = javaCharStream0.getEndColumn();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, int0);
      assertEquals(23, byteArray0.length);
      
      char char1 = javaCharStream0.BeginToken();
      assertTrue(char1 == char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0012', char1);
      assertEquals(23, byteArray0.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = JavaCharStream.hexval('2');
      assertEquals(2, int0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ",CD";
      String string1 = "F6-";
      try { 
        MockURI.URI("", "", "", ",CD", "F6-");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://?,CD#F6-
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.8497583656586766
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[?zS5j75:X}m\u0001-~p;");
      assertNotNull(stringReader0);
      
      int int0 = 95;
      stringReader0.mark(95);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1021, 1021);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(1021, javaCharStream0.getBeginLine());
      assertEquals(1021, javaCharStream0.getBeginColumn());
      assertEquals(1021, javaCharStream0.getEndColumn());
      assertEquals(1021, javaCharStream0.getEndLine());
      assertEquals(1021, javaCharStream0.getLine());
      assertEquals(1021, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('[', char0);
      
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.212256610922266
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)102}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)102}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 8, (byte)102);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)102}, byteArray0);
      
      javaCharStream0.backup(578);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3517, javaCharStream0.bufpos);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)102}, byteArray0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3518, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)102}, byteArray0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3518, javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)102}, byteArray0);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3518, javaCharStream0.bufpos);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)102}, byteArray0);
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3518, javaCharStream0.bufpos);
      assertEquals(0, int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)102}, byteArray0);
      
      javaCharStream0.adjustBeginLineColumn((-5636), (-247));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals((-247), javaCharStream0.getBeginColumn());
      assertEquals((-5636), javaCharStream0.getEndLine());
      assertEquals((-5636), javaCharStream0.getLine());
      assertEquals((-247), javaCharStream0.getEndColumn());
      assertEquals((-5636), javaCharStream0.getBeginLine());
      assertEquals((-247), javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3518, javaCharStream0.bufpos);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)102}, byteArray0);
      
      char[] charArray0 = javaCharStream0.GetSuffix(8);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals((-247), javaCharStream0.getBeginColumn());
      assertEquals((-5636), javaCharStream0.getEndLine());
      assertEquals((-5636), javaCharStream0.getLine());
      assertEquals((-247), javaCharStream0.getEndColumn());
      assertEquals((-5636), javaCharStream0.getBeginLine());
      assertEquals((-247), javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3518, javaCharStream0.bufpos);
      assertNotNull(charArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)102}, byteArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.3693166935831766
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CDGc:hx[z?=!][NW");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3415), (-3415));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.backup((-1823));
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1822, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals((-3415), javaCharStream0.getEndLine());
      assertEquals((-3415), javaCharStream0.getLine());
      assertEquals((-3415), javaCharStream0.getColumn());
      assertEquals((-3415), javaCharStream0.getBeginLine());
      assertEquals((-3415), javaCharStream0.getBeginColumn());
      assertEquals((-3415), javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('C', char0);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals((-3415), javaCharStream0.getEndLine());
      assertEquals((-3415), javaCharStream0.getLine());
      assertEquals((-3415), javaCharStream0.getColumn());
      assertEquals((-3415), javaCharStream0.getBeginLine());
      assertEquals((-3415), javaCharStream0.getBeginColumn());
      assertEquals((-3415), javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2082), 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      int int0 = javaCharStream1.getBeginLine();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(int1 == int0);
      assertEquals((-3415), javaCharStream0.getEndLine());
      assertEquals((-3415), javaCharStream0.getLine());
      assertEquals((-3415), javaCharStream0.getColumn());
      assertEquals((-3415), javaCharStream0.getBeginLine());
      assertEquals((-3415), javaCharStream0.getBeginColumn());
      assertEquals((-3415), javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-3415), int1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaCharStream1.adjustBeginLineColumn((-1823), 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1822), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, (-2082), 117);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotNull(javaCharStream2);
      
      String string0 = javaCharStream2.GetImage();
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotNull(string0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      
      javaCharStream2.ExpandBuff(false);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      
      try { 
        MockURI.URI("1", "1", "CDGc:hx[z?=!][NW", "1");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 1://1CDGc:hx%5Bz%3F=%7F!%5D%5BNW#1
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.0340825546042387
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-231), 2011);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      javaCharStream1.backup(2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(4093, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      char char0 = javaCharStream1.BeginToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(4094, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int0 = javaCharStream0.getBeginLine();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, int0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      int int1 = javaCharStream1.getBeginColumn();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertTrue(int1 == int0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int1);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.adjustBeginLineColumn(2, (-874));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(2, javaCharStream1.getBeginLine());
      assertEquals((-874), javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getEndLine());
      assertEquals((-874), javaCharStream1.getBeginColumn());
      assertEquals((-874), javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 0, 2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      
      javaCharStream1.UpdateLineColumn('7');
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-873), javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getEndLine());
      assertEquals((-874), javaCharStream1.getBeginColumn());
      assertEquals((-873), javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = JavaCharStream.hexval('f');
      assertEquals(15, int0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8546526185598233
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 81);
      assertNotNull(pushbackInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, (byte) (-68), (byte)0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, int0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertTrue(int1 == int0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, int1);
      
      javaCharStream0.adjustBeginLineColumn(97, 0);
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.backup((byte)0);
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertNotNull(string0);
      
      javaCharStream0.ExpandBuff(false);
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      
      int int2 = javaCharStream0.getLine();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(97, int2);
      
      String string1 = javaCharStream0.GetImage();
      assertTrue(string1.equals((Object)string0));
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertNotNull(string1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte byte0 = (byte)30;
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = JavaCharStream.hexval('8');
      assertEquals(8, int0);
      
      MockFile mockFile0 = new MockFile("`]l>jVrg}b");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setExecutable(false);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("`]l>jVrg}b", mockFile0.toString());
      assertEquals("`]l>jVrg}b", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(boolean0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "FdOfg_ly`Y{RA3)?*I0");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockFile mockFile2 = new MockFile(":C$Zr^,IWQEK");
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertNotNull(mockFile2);
      
      MockFile mockFile3 = new MockFile(mockFile1, "");
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile2));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile3.equals((Object)mockFile2));
      assertFalse(mockFile3.equals((Object)mockFile0));
      assertTrue(mockFile3.equals((Object)mockFile1));
      assertNotNull(mockFile3);
      
      URI uRI0 = MockURI.URI((String) null, "uIHjY?lp^b", "rqmK Y", (String) null, "?`KW{h|'UP");
      assertEquals("uIHjY%3Flp%5EbrqmK%20Y", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("//uIHjY%3Flp%5EbrqmK%20Y#?%60KW%7Bh%7C'UP", uRI0.toString());
      assertEquals("?%60KW%7Bh%7C'UP", uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNotNull(uRI0);
      
      MockFile mockFile4 = null;
      try {
        mockFile4 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<\"{FU&Kb");
      assertFalse(boolean0);
      
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.7988376432206954
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[0] = (byte)58;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte) (-97);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)58, (byte)0, (byte)0, (byte)0, (byte)63, (byte)58, (byte)9, (byte)74, (byte) (-97)}, byteArray0);
      
      int int0 = JavaCharStream.hexval('7');
      assertEquals(7, int0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      javaCharStream0.ReInit((InputStream) dataInputStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(dataInputStream0, 0, 4, 4);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      javaCharStream1.prevCharIsLF = false;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.ExpandBuff(false);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaCharStream1.FillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.246799205165493
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#J2>$");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1383), 1705);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      
      javaCharStream0.backup(1436);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2659, javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2660, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2660, javaCharStream0.bufpos);
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2660, javaCharStream0.bufpos);
      assertEquals(0, int0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertTrue(int1 == int0);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2660, javaCharStream0.bufpos);
      assertEquals(0, int1);
      
      javaCharStream0.adjustBeginLineColumn((-1), 1436);
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(1436, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1436, javaCharStream0.getBeginColumn());
      assertEquals(1436, javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2660, javaCharStream0.bufpos);
      
      javaCharStream0.backup(1187);
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(1436, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1436, javaCharStream0.getBeginColumn());
      assertEquals(1436, javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1473, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string1 = javaCharStream0.GetImage();
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(1436, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1436, javaCharStream0.getBeginColumn());
      assertEquals(1436, javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1473, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string1);
      
      javaCharStream0.ExpandBuff(true);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1436, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(7617, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1436, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(7617, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int2 = javaCharStream0.getColumn();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(1436, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(7617, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int2);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.822456686505235
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, (-1272), (byte)0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G&iTt?d!W%/YH");
      assertFalse(boolean0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1272), javaCharStream0.getColumn());
      assertEquals((-1272), javaCharStream0.getEndColumn());
      assertEquals((-1272), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1272), javaCharStream0.getColumn());
      assertEquals((-1272), javaCharStream0.getEndColumn());
      assertEquals((-1272), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = javaCharStream0.getColumn();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1272), javaCharStream0.getColumn());
      assertEquals((-1272), javaCharStream0.getEndColumn());
      assertEquals((-1272), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1272), int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[?zS5j75:X}m\u0001-~p;");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)89;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      StringReader stringReader1 = new StringReader("nHvJee`*b4kM");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 157, (byte) (-28));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.ReInit((Reader) stringReader1, 2191, 76, 4358);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
      
      javaCharStream0.ReInit((InputStream) dataInputStream0, 4358, 3965, 1021);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader1, stringReader0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0276566703132268
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)18, (-6086), 1834);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      byteArrayInputStream0.reset();
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals((-6086), javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals((-6086), javaCharStream0.getColumn());
      assertEquals((-6086), javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0012', char0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals((-6086), javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals((-6086), javaCharStream0.getColumn());
      assertEquals((-6086), javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals("\u0012", string0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      
      int int0 = JavaCharStream.hexval('1');
      assertEquals(1, int0);
      
      int int1 = javaCharStream0.getEndColumn();
      assertFalse(int1 == int0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals((-6086), javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals((-6086), javaCharStream0.getColumn());
      assertEquals((-6086), javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-6086), int1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#J2>$");
      assertNotNull(stringReader0);
      
      int int0 = (-1383);
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)52;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)52, (byte)52, (byte) (-80), (byte)52, (byte)52, (byte)52, (byte)52}, byteArray0);
      
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.031759218569271
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-231), 2011);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      javaCharStream1.backup(2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4093, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      char char0 = javaCharStream1.BeginToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4094, javaCharStream1.bufpos);
      assertEquals('\u0000', char0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.bufsize = 1792;
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4094, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int0 = javaCharStream0.getBeginLine();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      int int1 = javaCharStream1.getBeginColumn();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertTrue(int1 == int0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4094, javaCharStream1.bufpos);
      assertEquals(0, int1);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int2 = javaCharStream1.getBeginLine();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, int2);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      String string1 = "yv~-^S@";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("yv~-^S@");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.0791512728828505
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-231), 2011);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      javaCharStream1.backup(2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4093, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      char char0 = javaCharStream1.BeginToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4094, javaCharStream1.bufpos);
      assertEquals('\u0000', char0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int0 = javaCharStream0.getBeginLine();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, int0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      int int1 = javaCharStream1.getBeginColumn();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertTrue(int1 == int0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int1);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int2 = javaCharStream1.getBeginLine();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int2);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      try { 
        MockURI.URI("so-Po", (String) null, (String) null, "STJ*Q:w,2i[(PluKm");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme-specific part at index 6: so-Po:#STJ*Q:w,2i[(PluKm
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-98);
      byteArray0[7] = (byte)74;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.196755797914435
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-231), 2011);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      javaCharStream1.backup(2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(4093, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      char char0 = javaCharStream1.BeginToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(4094, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int0 = javaCharStream0.getBeginLine();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      int int1 = javaCharStream1.getBeginColumn();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertTrue(int1 == int0);
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, int1);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.adjustBeginLineColumn(2, (-874));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(2, javaCharStream1.getBeginLine());
      assertEquals((-874), javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getLine());
      assertEquals((-874), javaCharStream1.getBeginColumn());
      assertEquals((-874), javaCharStream1.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      String string1 = javaCharStream0.GetImage();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) '\u0000';
      javaCharStream0.bufline = intArray0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream1.ExpandBuff(true);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(2, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals((-874), javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.column = (-1103);
      assertEquals(2, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals((-874), javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      
      URI uRI0 = MockURI.URI((String) null, "osTS", "", "");
      assertEquals("", uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals("osTS", uRI0.getHost());
      assertEquals("//osTS#", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("osTS", uRI0.getRawAuthority());
      assertNotNull(uRI0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.2015118659867245
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-231), 2011);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      javaCharStream1.backup(2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4093, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      char char0 = javaCharStream1.BeginToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4094, javaCharStream1.bufpos);
      assertEquals('\u0000', char0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      int int0 = javaCharStream0.getBeginLine();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, int0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      int int1 = javaCharStream1.getBeginColumn();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertTrue(int1 == int0);
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, int1);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaCharStream1.adjustBeginLineColumn(2, (-874));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(2, javaCharStream1.getEndLine());
      assertEquals((-874), javaCharStream1.getBeginColumn());
      assertEquals((-874), javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getLine());
      assertEquals((-874), javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      String string1 = javaCharStream0.GetImage();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) '\u0000';
      javaCharStream0.bufline = intArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream1.ExpandBuff(true);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-874), javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.8605343774698508
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[3] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(23, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(23, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)18, (byte)0, (byte)18);
      assertEquals(23, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(23, byteArray0.length);
      
      long long0 = byteArrayInputStream0.skip((byte)18);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(18L, long0);
      assertEquals(23, byteArray0.length);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setExecutable(true);
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MockFile mockFile1 = new MockFile(mockFile0, "");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockFile mockFile2 = new MockFile("");
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertTrue(mockFile2.equals((Object)mockFile1));
      assertNotNull(mockFile2);
      
      boolean boolean2 = mockFile1.setReadOnly();
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)mockFile2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/ubuntu/replication/scripts/projects", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.canWrite());
      assertEquals("19_jmca", mockFile1.getName());
      assertEquals("/home/ubuntu/replication/scripts/projects/19_jmca", mockFile1.toString());
      assertFalse(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isDirectory());
      assertFalse(mockFile1.isHidden());
      assertTrue(boolean2);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, mockFile2);
      
      MockFile mockFile3 = new MockFile(mockFile2, "^3bmzJkq)\"K*O");
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertTrue(mockFile2.equals((Object)mockFile1));
      assertFalse(mockFile3.equals((Object)mockFile2));
      assertFalse(mockFile3.equals((Object)mockFile0));
      assertFalse(mockFile3.equals((Object)mockFile1));
      assertNotNull(mockFile3);
      
      MockFile mockFile4 = new MockFile("^3bmzJkq)\"K*O");
      assertFalse(mockFile4.equals((Object)mockFile2));
      assertTrue(mockFile4.equals((Object)mockFile3));
      assertFalse(mockFile4.equals((Object)mockFile0));
      assertFalse(mockFile4.equals((Object)mockFile1));
      assertNotNull(mockFile4);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u0004@Lu1+ZDbefv?");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(23, byteArray0.length);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertEquals(23, byteArray0.length);
      
      char char1 = javaCharStream0.BeginToken();
      assertTrue(char1 == char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char1);
      assertEquals(23, byteArray0.length);
      
      javaCharStream0.ExpandBuff(true);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4096, javaCharStream0.bufpos);
      assertEquals(23, byteArray0.length);
      
      char char2 = javaCharStream0.BeginToken();
      assertTrue(char2 == char0);
      assertTrue(char2 == char1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char2);
      assertEquals(23, byteArray0.length);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      assertFalse(boolean0);
      
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.8224566865052352
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 15, (byte)85);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("2W,");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 517, (-1417), 1207);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      char[] charArray0 = javaCharStream0.GetSuffix(1207);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(charArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(1207, charArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0, 77);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, (byte)0, (byte)0, 4072);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.3145993928668185
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 15, (byte)85);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      javaCharStream0.backup((byte)0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(4095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertTrue(int1 == int0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int1);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      javaCharStream0.adjustBeginLineColumn(61, (-1947));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(62, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getEndLine());
      assertEquals((-1947), javaCharStream0.getBeginColumn());
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      javaCharStream0.backup((-1164));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-1947), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(5260, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-2232), 71);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-1947), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(5260, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      int int2 = javaCharStream0.getBeginColumn();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-1947), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(5260, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1947), int2);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int3 = 14;
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 14, 73, (byte)85);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotNull(javaCharStream2);
      
      try { 
        javaCharStream1.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(".");
      assertNotNull(stringReader0);
      
      stringReader0.mark(0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      javaCharStream0.backup(0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(0, int0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertTrue(int1 == int0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(0, int1);
      
      javaCharStream0.adjustBeginLineColumn(75, 4096);
      assertEquals(75, javaCharStream0.getLine());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(4096, javaCharStream0.getEndColumn());
      assertEquals(4096, javaCharStream0.getColumn());
      assertEquals(4096, javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      
      javaCharStream0.backup(1);
      assertEquals(75, javaCharStream0.getLine());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(4096, javaCharStream0.getEndColumn());
      assertEquals(4096, javaCharStream0.getColumn());
      assertEquals(4096, javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4094, javaCharStream0.bufpos);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, 1021, 590);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, 1, (-1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      
      String string1 = javaCharStream2.GetImage();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      
      javaCharStream0.bufsize = 0;
      assertEquals(75, javaCharStream0.getLine());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(4096, javaCharStream0.getEndColumn());
      assertEquals(4096, javaCharStream0.getColumn());
      assertEquals(4096, javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getEndLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn((-74), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.2174832262209563
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#J2>$");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1383), 1705);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      
      javaCharStream0.maxNextCharInd = 1705;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(1705, javaCharStream0.getBeginColumn());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals(1705, javaCharStream0.getEndColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals((-1383), javaCharStream0.getLine());
      assertEquals(1705, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      
      char char1 = javaCharStream0.BeginToken();
      assertTrue(char1 == char0);
      assertEquals(1706, javaCharStream0.getBeginColumn());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals(1706, javaCharStream0.getColumn());
      assertEquals(1706, javaCharStream0.getEndColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals((-1383), javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char1);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(1706, javaCharStream0.getBeginColumn());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals(1706, javaCharStream0.getColumn());
      assertEquals(1706, javaCharStream0.getEndColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals((-1383), javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals(1706, javaCharStream0.getBeginColumn());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals(1706, javaCharStream0.getColumn());
      assertEquals(1706, javaCharStream0.getEndColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals((-1383), javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1383), int0);
      
      stringReader0.close();
      int int1 = javaCharStream0.getBeginColumn();
      assertFalse(int1 == int0);
      assertEquals(1706, javaCharStream0.getBeginColumn());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals(1706, javaCharStream0.getColumn());
      assertEquals(1706, javaCharStream0.getEndColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals((-1383), javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1706, int1);
      
      javaCharStream0.adjustBeginLineColumn((-1383), (-934));
      assertEquals((-934), javaCharStream0.getBeginColumn());
      assertEquals((-1383), javaCharStream0.getEndLine());
      assertEquals((-934), javaCharStream0.getColumn());
      assertEquals((-934), javaCharStream0.getEndColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals((-1383), javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaCharStream0.backup(1706);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-934), javaCharStream0.getBeginColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4438, javaCharStream0.bufpos);
      
      String string1 = javaCharStream0.GetImage();
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-934), javaCharStream0.getBeginColumn());
      assertEquals((-1383), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4438, javaCharStream0.bufpos);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.581141646822833
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(23, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(23, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 91, (-2587));
      assertEquals(23, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(23, byteArray0.length);
      
      javaCharStream0.backup((-2587));
      assertEquals(23, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2586, javaCharStream0.bufpos);
      assertEquals(23, byteArray0.length);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(91, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-2587), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getEndLine());
      assertEquals((-2587), javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2587, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(23, byteArray0.length);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(91, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-2587), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getEndLine());
      assertEquals((-2587), javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2587, javaCharStream0.bufpos);
      assertEquals(23, byteArray0.length);
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(91, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-2587), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getEndLine());
      assertEquals((-2587), javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2587, javaCharStream0.bufpos);
      assertEquals(0, int0);
      assertEquals(23, byteArray0.length);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertTrue(int1 == int0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(91, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-2587), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getEndLine());
      assertEquals((-2587), javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2587, javaCharStream0.bufpos);
      assertEquals(0, int1);
      assertEquals(23, byteArray0.length);
      
      javaCharStream0.adjustBeginLineColumn((-2587), 0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(91, javaCharStream0.getLine());
      assertEquals((-2587), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getEndLine());
      assertEquals((-2587), javaCharStream0.getEndColumn());
      assertEquals((-2587), javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2587, javaCharStream0.bufpos);
      assertEquals(23, byteArray0.length);
      
      javaCharStream0.backup((byte)18);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-2587), javaCharStream0.getBeginLine());
      assertEquals(2569, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(23, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, 91, 0, 2048);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(23, byteArray0.length);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, (-3064), (-3064), (-1502));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotNull(javaCharStream2);
      assertEquals(23, byteArray0.length);
      
      String string0 = javaCharStream2.GetImage();
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotNull(string0);
      assertEquals(23, byteArray0.length);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      
      javaCharStream1.ExpandBuff(false);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      
      // Undeclared exception!
      try { 
        javaCharStream1.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = JavaCharStream.hexval('b');
      assertEquals(11, int0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertNotNull(uRI0);
      
      // Undeclared exception!
      try { 
        MockURI.relativize(uRI0, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.868127401884721
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 15, (byte)85);
      javaCharStream0.backup(578);
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.getBeginLine();
      javaCharStream0.getBeginColumn();
      javaCharStream0.adjustBeginLineColumn((-1947), 1655);
      javaCharStream0.backup((byte)0);
      assertEquals((-1947), javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)0, (byte)0);
      javaCharStream1.GetImage();
      javaCharStream1.adjustBeginLineColumn((byte)85, (-2059));
      javaCharStream1.GetSuffix((byte)0);
      assertEquals(86, javaCharStream1.getBeginLine());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.302014103085905
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 15, (byte)85);
      javaCharStream0.backup((byte)0);
      javaCharStream0.readChar();
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.getBeginLine();
      javaCharStream0.getBeginColumn();
      javaCharStream0.adjustBeginLineColumn(61, (-1947));
      javaCharStream0.backup((-1164));
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-2232), 71);
      javaCharStream0.GetImage();
      javaCharStream0.adjustBeginLineColumn(0, 55);
      javaCharStream0.GetSuffix(0);
      javaCharStream0.ExpandBuff(false);
      javaCharStream1.ExpandBuff(false);
      javaCharStream0.readChar();
      // Undeclared exception!
      javaCharStream1.adjustBeginLineColumn((byte)0, (byte)0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("ujqhzkR<wo5pl");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1496, (-822));
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.column = 1496;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      javaCharStream0.GetSuffix(1496);
      char[] charArray0 = javaCharStream0.GetSuffix(117);
      assertEquals(117, charArray0.length);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[3] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)18, (byte)0, (byte)18);
      byteArrayInputStream0.skip((byte)18);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.reset();
      byteArrayInputStream0.read();
      byteArrayInputStream0.read();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArrayInputStream0.reset();
      javaCharStream0.backup((byte)18);
      javaCharStream0.readChar();
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)18);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)18);
      javaCharStream0.BeginToken();
      int int0 = javaCharStream0.getLine();
      assertEquals(4079, javaCharStream0.bufpos);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.7800229868966868
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#J2>$");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1362), 1680);
      javaCharStream0.GetImage();
      javaCharStream0.maxNextCharInd = 1680;
      stringReader0.mark(1680);
      javaCharStream0.BeginToken();
      javaCharStream0.adjustBeginLineColumn(1680, 1680);
      int int0 = javaCharStream0.getEndColumn();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1680, int0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cf=\"xTO&_2>yR");
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = 4117;
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.037734194785151
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte) (-16);
      byteArray0[3] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 15, (byte)85);
      javaCharStream0.backup(578);
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.getBeginLine();
      javaCharStream0.getBeginColumn();
      javaCharStream0.adjustBeginLineColumn((-1947), 1655);
      javaCharStream0.backup((byte)0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte) (-16), (byte)0);
      javaCharStream1.GetImage();
      javaCharStream1.adjustBeginLineColumn((byte)0, 578);
      // Undeclared exception!
      javaCharStream1.adjustBeginLineColumn((byte)85, (-2059));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.897367567113771
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 64);
      javaCharStream0.readChar();
      stringReader0.reset();
      javaCharStream0.ExpandBuff(true);
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      CharBuffer charBuffer0 = CharBuffer.allocate(4096);
      stringReader0.read(charBuffer0);
      javaCharStream0.GetImage();
      javaCharStream0.ExpandBuff(false);
      javaCharStream0.AdjustBuffSize();
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.5792331346113395
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[?zS5j75:X}m\u0001-~p;");
      StringReader stringReader1 = new StringReader("");
      stringReader0.mark(117);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader2 = new StringReader("");
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = '\'';
      charArray0[2] = 'F';
      charArray0[3] = '}';
      stringReader2.read(charArray0);
      stringReader2.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 73, 99, 73);
      javaCharStream0.BeginToken();
      javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.bufpos);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringReader stringReader0 = new StringReader("[(+");
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.nextCharInd = 66;
      javaCharStream0.getBeginLine();
      javaCharStream0.ExpandBuff(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (byte) (-23));
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, 100, 1);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.0963525794641384
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 15, (byte)85);
      javaCharStream0.backup(578);
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.getBeginLine();
      javaCharStream0.getBeginColumn();
      javaCharStream0.adjustBeginLineColumn((-173), 100);
      javaCharStream0.backup((-173));
      javaCharStream0.GetImage();
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 0, 82);
      javaCharStream1.ExpandBuff(false);
      assertFalse(JavaCharStream.staticFlag);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.Done();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byte byte0 = (byte)33;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = (-2413);
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn((-2413), (byte)18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";z[o!TG");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      char char0 = javaCharStream0.ReadByte();
      assertEquals(';', char0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JavaCharStream.hexval('C');
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "[?zS5j75:X}m\\1-~p;";
      StringReader stringReader0 = new StringReader("[?zS5j75:X}m\u0001-~p;");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1021, 1021);
      javaCharStream0.Done();
      boolean boolean0 = true;
      javaCharStream0.prevCharIsCR = true;
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = JavaCharStream.hexval('0');
      assertEquals(0, int0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=NUI*f\"1{,<aDW%2");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.Done();
      byte byte0 = (byte)33;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader1 = new StringReader("[,");
      int int0 = 84;
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 68, 84, 59);
      javaCharStream1.ReInit((Reader) stringReader0, (-1), 85, (int) (byte)18);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[?zS5j75:X}m\u0001-~p;");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 606, 15, 421);
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)18, (-6086), (byte)18);
      byteArrayInputStream0.reset();
      StringReader stringReader0 = new StringReader("");
      javaCharStream0.Done();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArrayInputStream0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaCharStream0.ReInit((Reader) stringReader0, (int) (byte)18, (int) (byte)18, 2838);
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.6525902233018674
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#J2>$");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1383), 1705);
      javaCharStream0.BeginToken();
      javaCharStream0.BeginToken();
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.9959217847159896
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 15, (byte)85);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      javaCharStream1.AdjustBuffSize();
      javaCharStream1.getBeginLine();
      javaCharStream1.getBeginColumn();
      byteArrayInputStream0.reset();
      javaCharStream0.adjustBeginLineColumn(377, (-1468));
      javaCharStream1.backup((-1130));
      javaCharStream0.GetImage();
      javaCharStream0.ExpandBuff(false);
      assertEquals((-1468), javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.6184726740880684
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = (-1383);
      StringReader stringReader1 = new StringReader("oq@C:6Q{w");
      int int1 = (-128);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1383), (-128));
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), (-128));
      javaCharStream0.readChar();
      javaCharStream1.backup(14);
      javaCharStream1.readChar();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.6290407622471201
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 64);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArrayInputStream0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid escape character at line ");
      javaCharStream0.BeginToken();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.readInt();
      StringReader stringReader1 = new StringReader("9~&8;m?(7)^l=av>;r-");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)74);
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('n', char0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.811427391082605
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      int int0 = (-1383);
      StringReader stringReader1 = new StringReader("oq@C:6Q{w");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1383), (-128));
      javaCharStream0.BeginToken();
      stringReader1.markSupported();
      javaCharStream0.BeginToken();
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[3] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)18, (byte)0, (byte)18);
      byteArrayInputStream0.skip((byte)18);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.reset();
      byteArrayInputStream0.read();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaCharStream0.maxNextCharInd = (-1754);
      byteArrayInputStream0.reset();
      String string0 = "b9.G&iTt?d!W%/YH";
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.422947928303473
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xH{yoda]q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2011, 215);
      javaCharStream0.GetImage();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaCharStream1.backup((-521));
      javaCharStream1.BeginToken();
      javaCharStream1.AdjustBuffSize();
      javaCharStream0.getBeginLine();
      javaCharStream1.getBeginColumn();
      javaCharStream1.adjustBeginLineColumn(191, (-1228));
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 176, 190);
      String string0 = javaCharStream2.GetImage();
      javaCharStream1.ExpandBuff(true);
      try { 
        MockURI.URI("Invalid escape character at line ", "xH{yoda]q", string0, "Invalid escape character at line ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: Invalid escape character at line ://xH{yoda]qnvalid%20escape%20character%20at%20line%20
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.1742933185645006
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.reset();
      javaCharStream0.adjustBeginLineColumn(1545, 1545);
      StringReader stringReader1 = new StringReader("");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaCharStream0.AdjustBuffSize();
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-2903), (-189), (-1));
      javaCharStream1.getBeginLine();
      javaCharStream0.getBeginColumn();
      StringReader stringReader2 = new StringReader("PzEwIzik+7`C");
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader2, (-2903), (-1), 2048);
      try { 
        javaCharStream1.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.666332585328325
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.getBeginLine();
      javaCharStream0.getBeginColumn();
      javaCharStream0.adjustBeginLineColumn((byte)0, 3724);
      javaCharStream0.GetImage();
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char char0 = 'Z';
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 71, (-3823), (-3823));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)18, (-6086), (byte)18);
      byteArrayInputStream0.reset();
      StringReader stringReader0 = new StringReader("");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArrayInputStream0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaCharStream0.ReInit((Reader) stringReader0, (int) (byte)18, (int) (byte)18, 2838);
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vtw^{GTw=T");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 12, 97, 12);
      javaCharStream0.ReInit((Reader) stringReader0, 83, 83, 12);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 82, 67);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)28);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (-51), 874, (byte)28);
      StringReader stringReader0 = new StringReader("iU8>GFBe_");
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader0, 5, 67, (-2388));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, (byte)0, 4067);
      byteArrayInputStream0.reset();
      StringReader stringReader0 = new StringReader("G7mH7");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArrayInputStream0.mark(1981);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      byteArrayInputStream1.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      javaCharStream0.ReInit((Reader) stringReader0, (int) (byte)0, (int) (byte)0, 4070);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream1);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!SJ&?.%Oj}[Pk6");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 1149);
      javaCharStream0.GetImage();
      javaCharStream0.Done();
      // Undeclared exception!
      try { 
        javaCharStream0.getBeginLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("V0]~F8{gh7hRt6/V0]~F8{gh7hRt6/V0]~F8{gh7hRt60<{1'.+,!3F%.GM9(JD9");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.adjustBeginLineColumn(1545, 1545);
      StringReader stringReader1 = new StringReader("");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MockFile mockFile0 = new MockFile("V0]~F8{gh7hRt6", "V0]~F8{gh7hRt6");
      File file0 = MockFile.createTempFile("V0]~F8{gh7hRt6", "<{1'.+,!3F%.GM9(JD9", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "<{1'.+,!3F%.GM9(JD9");
      mockFile1.setReadOnly();
      MockFile mockFile2 = new MockFile(mockFile1, "D53LUojPZ~.Y43--nn");
      MockFile mockFile3 = new MockFile(file0, "");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      javaCharStream0.adjustBeginLineColumn(1545, (-782));
      assertEquals((-782), javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(9956);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      byteArrayInputStream0.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0, 77);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, (byte)0, 4072);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.skip(0L);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, 1934, (byte)0);
      StringReader stringReader0 = new StringReader("g{hh");
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$<d");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1248, 1248, 0);
      javaCharStream0.ReInit((Reader) stringReader0, 0, 1248);
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)22;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2084), (-2084));
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-3765), 1422);
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream(stringReader0, (-1617), (-1617), (-1932));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.6290407622471204
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)18;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)18;
      byteArray0[3] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)18, (byte)0, (byte)18);
      byteArrayInputStream0.skip((byte)18);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.reset();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byteArrayInputStream0.read();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArrayInputStream0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      javaCharStream0.BeginToken();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      byteArrayInputStream0.reset();
      dataInputStream0.readInt();
      StringReader stringReader0 = new StringReader("b9.G&iTt?d!W%/YH");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 959);
      char char0 = javaCharStream0.BeginToken();
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals('\u0012', char0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.1727640532816053
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[3] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)18, (byte)0, (byte)18);
      byteArrayInputStream0.skip((byte)18);
      byteArrayInputStream0.reset();
      javaCharStream0.BeginToken();
      javaCharStream0.getBeginLine();
      javaCharStream0.getBeginColumn();
      javaCharStream0.adjustBeginLineColumn((-2202), (-1));
      javaCharStream0.ExpandBuff(true);
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, byteArrayInputStream0.available());
      
      javaCharStream0.BeginToken();
      javaCharStream0.readChar();
      javaCharStream0.AdjustBuffSize();
      assertEquals((-2201), javaCharStream0.getEndLine());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      StringReader stringReader0 = new StringReader("U;");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.ReadByte();
      // Undeclared exception!
      try { 
        MockURI.relativize(uRI0, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 12, 2110, 2110);
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.7963116401738131
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[3] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 450, 70);
      javaCharStream0.adjustBeginLineColumn(0, 450);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader1 = new StringReader("");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MockFile mockFile0 = new MockFile("Invalid escape character at line ", "Invalid escape character at line ");
      String string0 = "'%MXS)";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, (-1375), (-5627));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1712);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 11);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (-920), (-920));
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix((-127));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('7');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        JavaCharStream.hexval(',');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.Done();
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader1 = new StringReader("3W#6+");
      javaCharStream0.prevCharIsLF = true;
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2838, (byte)18);
      // Undeclared exception!
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("");
      javaCharStream0.ReInit((Reader) stringReader1, (-3541), (-1));
      assertEquals((-1), javaCharStream0.bufpos);
  }
}
