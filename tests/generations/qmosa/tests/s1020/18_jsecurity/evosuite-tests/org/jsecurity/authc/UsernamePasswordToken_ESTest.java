/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 21:27:46 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = '0';
      charArray0[2] = '<';
      charArray0[3] = '>';
      charArray0[4] = '&';
      charArray0[5] = '5';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)45;
      InetAddress inetAddress0 = MockInetAddress.getByAddress("Kwky))5WT", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("fJz|uR(UNo");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("");
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress1 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName(", rememberMe=");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("}ktWH6M");
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null, true);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      InetAddress inetAddress2 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress2.equals((Object)inetAddress1));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("|MD,NF?m1W\"yyi", "");
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Ym'oUHJ man[y", (String) null);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockInetAddress.getByName("fJz|uR(UNo");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("fJz|uR(UNo");
      MockInetAddress.getByName("}ktWH6M");
      InetAddress inetAddress0 = MockInetAddress.getByName("yK2R(V6h ostF\"6");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("fJz|uR(UNo");
      MockInetAddress.getByName("yK2R(V6h ostF\"6");
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'q';
      charArray0[3] = 'V';
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("6Q7", "^", inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "");
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockInetAddress.getByName("fJz|uR(UNo");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("fJz|uR(UNo");
      MockInetAddress.getByName("}ktWH6M");
      MockInetAddress.getByName("");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("fJz|uR(UNo");
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'q';
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '`';
      charArray0[2] = 'c';
      charArray0[3] = '`';
      charArray0[4] = ' ';
      charArray0[5] = 'i';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("je8#o|/PdKBR oK^", charArray0, false);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      MockInetAddress.getByName("gsn$G62]{&\"[D~");
      MockInetAddress.getByName("");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName((String) null);
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("!Y&U]S!A%*e[s");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("9jt", "", true, inetAddress0);
      MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = '8';
      charArray0[2] = 'q';
      charArray0[3] = 'Y';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null, (InetAddress) null);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      MockInetAddress.getByName("gsn$G62]{&\"[D~");
      MockInetAddress.getByName("");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName((String) null);
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("s|a]:vlMNr{ a");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("9 7", "", true, inetAddress0);
      usernamePasswordToken0.toString();
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      assertSame(inetAddress1, inetAddress0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("t4Kc#/dplTg!Pj:w", "Ym'oUHJ man[y");
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - t4Kc#/dplTg!Pj:w, rememberMe=false", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("fJz|uR(UNo");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName(", rememberMe=");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("}ktWH6M");
      InetAddress inetAddress1 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, true, inetAddress1);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      InetAddress inetAddress2 = MockInetAddress.getLoopbackAddress();
      assertEquals("/127.0.0.1", inetAddress2.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("3~ASsNpWqBNP", "n8x_GFEoI<fDgD~|");
      usernamePasswordToken0.setUsername(")C`dl)N.?MPxui.E");
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)29;
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockInetAddress.getByName("fJz|uR(UNo");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName((String) null);
      MockInetAddress.getByName("fJz|uR(UNo");
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("fJz|uR(UNo", (char[]) null, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("fJz|uR(UNo", "jxEI;|L>'f2Vlw7C", true, inetAddress0);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[2] = '\u001A';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("3~ASsWpWq}BNP", "H/OGdOh^");
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockInetAddress.getByName("fJz|uR(UNo");
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("fJz|uR(UNo");
      MockInetAddress.getByName("}ktWH6M");
      MockInetAddress.getByName("");
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("fJz|uR(UNo");
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'q';
      charArray0[3] = 'V';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true, inetAddress0);
      usernamePasswordToken0.setRememberMe(false);
      InetAddress inetAddress2 = MockInetAddress.getLoopbackAddress();
      assertSame(inetAddress2, inetAddress1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockInetAddress.getByName(", rememberMe=");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("fJz|uR(UNo");
      MockInetAddress.getByName(", rememberMe=");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      InetAddress inetAddress0 = MockInetAddress.getByName(", rememberMe=");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("fJz|uR(UNo", "fJz|uR(UNo", true, inetAddress0);
      usernamePasswordToken0.clear();
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress1.isMCOrgLocal());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("3~ASsNpWqBNP", "n8x_GFEoI<fDgD~|");
      usernamePasswordToken0.setRememberMe(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)29;
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("3~ASsNpWq}BNP", "n8x_GEoI<fDgD~|");
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = '+';
      usernamePasswordToken0.setPassword(charArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)29;
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("q)Ir+>nIk6Bv 3PZ[", "9kgVi?W0dlc");
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("?UN-FG", "?UN-FG", true);
      usernamePasswordToken0.getPrincipal();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'E';
      charArray0[2] = 'W';
      charArray0[3] = 'Y';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("A'\"@>UQAapohkBA", charArray0);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" - ", charArray0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
