/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 22:55:50 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import freemind.view.mindmapview.MultipleImage;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Menu;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.time.Instant;
import java.time.format.DateTimeParseException;
import java.time.temporal.TemporalAmount;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import javax.swing.ActionMap;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenuItem;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.MatteBorder;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.metal.MetalLabelUI;
import javax.swing.text.AsyncBoxView;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GapContent;
import javax.swing.text.LabelView;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.undo.UndoManager;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.rowio.RowOutputBinary;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      Object object0 = jDayChooser0.getTreeLock();
      jDayChooser0.getInputVerifier();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.addContainerListener((ContainerListener) null);
      ActionEvent actionEvent0 = new ActionEvent(object0, 49, "day", 49, 3618);
      actionEvent0.paramString();
      actionEvent0.paramString();
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1684660956418664
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      ActionEvent actionEvent0 = new ActionEvent(object0, 3, "6,t9", (-749L), 1);
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.control;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.removeKeyListener(jDayChooser1);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setDay(3);
      jDayChooser0.setDayBordersVisible(true);
      Locale locale0 = Locale.KOREA;
      jDayChooser0.setLocale(locale0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.441321317741834
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(218L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getDay();
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser1.isDayBordersVisible();
      jDayChooser1.initDecorations();
      jDayChooser1.setDay(3);
      jDayChooser0.setDay(9999);
      jDayChooser1.setMaxDayCharacters((-422));
      jDayChooser0.getSelectedDay();
      jDayChooser0.setYear(4);
      jDayChooser1.setAlwaysFireDayProperty(true);
      jDayChooser0.isDayBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser1.setMonth(1);
      jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser1.setMaxSelectableDate((Date) null);
      assertEquals(3, jDayChooser1.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1425008133613783
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      ActionEvent actionEvent0 = new ActionEvent(object0, 3, "6,t9", (-749L), 1);
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setDay(3);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.275387562158455
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser1.setSelectableDateRange((Date) null, date0);
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser1.setDay(39);
      jDayChooser1.setMaxDayCharacters((-221));
      JButton jButton0 = new JButton("day");
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser1.isDayBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.362126199810887
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.firePropertyChange("+ v>", 0L, 1L);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.list();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.getWeekdayForeground();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getDaysInMonth();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.drawDays();
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setSelectableDateRange(date0, date0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.235799669234131
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      JDayChooser jDayChooser0 = new JDayChooser();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JTree jTree0 = new JTree();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer1);
      defaultTreeCellEditor0.getBorderSelectionColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getMinSelectableDate();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertNull(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2404401212809124
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w@mR3,vl}\"1");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getClientProperty(object0);
      objectArray0[4] = null;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      jDayChooser0.getDay();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.initDecorations();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.DY;
      jDayChooser0.getClientProperty(object0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1519), 0L, (int) gVTAttributedCharacterIterator_TextAttribute0.SMALL_CAPS, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_LTR, 'h');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 17, 17, 12, (int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_AUTO, 'c');
      jDayChooser0.keyPressed(keyEvent1);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1237209008767897
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      ActionMap actionMap0 = new ActionMap();
      jDayChooser0.setActionMap(actionMap0);
      Boolean boolean0 = Boolean.FALSE;
      jDayChooser0.getUIClassID();
      int int0 = 1;
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      ImageIcon imageIcon0 = new ImageIcon(bufferedImage0, "PanelUI");
      JButton jButton0 = new JButton(imageIcon0);
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 1, "day", 9223372036854775787L, 1);
      JDayChooser jDayChooser1 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus();
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1911493682936887
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(20);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      jDayChooser0.getDayPanel();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3422193110490572
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Dialog Plain 11");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDay();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.initDecorations();
      jDayChooser0.setDay(3);
      jDayChooser0.setDay(3518);
      jDayChooser0.setMaxDayCharacters((-221));
      jDayChooser0.getSelectedDay();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.isDayBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMonth((-2471));
      jDayChooser0.setEnabled(true);
      jDayChooser0.setMonth((-1244));
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSundayForeground((Color) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.31733481324828
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDay();
      jDayChooser0.setDayBordersVisible(true);
      boolean boolean0 = new Boolean(true);
      jDayChooser0.initDecorations();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.setDay(3);
      jDayChooser0.setDay(3518);
      jDayChooser0.setDay((-1543));
      JDayChooser jDayChooser1 = new JDayChooser(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser1.setDay(24);
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.getSelectedDay();
      jDayChooser1.setAlwaysFireDayProperty(true);
      jDayChooser0.isDayBordersVisible();
      jDayChooser1.setMaxDayCharacters((-1543));
      jDayChooser0.setDay(791);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser1.getMaxSelectableDate();
      assertEquals(24, jDayChooser1.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2056219650639624
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getUIClassID();
      jDayChooser0.isDecorationBackgroundVisible();
      ActionMap actionMap0 = new ActionMap();
      jDayChooser0.setAutoscrolls(false);
      jDayChooser0.setMonth(1505);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1505, 1505, 21, 21, 'E');
      jDayChooser0.keyTyped(keyEvent0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext(1505, stringArray0, stringArray0, stringArray0, stringArray0, iBindingFactory0);
      String string0 = "28";
      // Undeclared exception!
      try { 
        unmarshallingContext0.parseElementDate("IfY$4K:@\"J", "freemind.controller.actions.generated.instance.FontSizeNodeAction");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1701728192590113
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      ActionMap actionMap0 = new ActionMap();
      ActionMap actionMap1 = jDayChooser0.getActionMap();
      actionMap0.setParent(actionMap1);
      actionMap0.allKeys();
      jDayChooser0.setActionMap(actionMap0);
      Boolean boolean0 = Boolean.FALSE;
      jDayChooser0.getUIClassID();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.FRENCH;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth(20);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.LINE_HEIGHT;
      KeyStroke.getKeyStroke((-5110), (int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_ALL);
      jDayChooser0.getCursor();
      int int0 = (-3284);
      JMenuItem jMenuItem0 = new JMenuItem();
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      Menu menu0 = null;
      try {
        menu0 = new Menu("AMOUNT_OF_VISIBLE_MENU_ITEMS", (boolean) gVTAttributedCharacterIterator_TextAttribute0.STRIKETHROUGH_ON);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1345935981126343
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDay();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDay(14);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setDay(6);
      assertEquals(6, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser1.setWeekdayForeground(color0);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2054733035890117
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(14);
      jDayChooser0.keyReleased((KeyEvent) null);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.169980761415708
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.drawWeeks();
      int int0 = (-1861);
      long long0 = (-751L);
      int int1 = 100;
      jDayChooser0.setDecorationBackgroundVisible(true);
      MultipleImage multipleImage0 = new MultipleImage(3491.728771);
      multipleImage0.getIconWidth();
      MatteBorder matteBorder0 = new MatteBorder(multipleImage0);
      // Undeclared exception!
      try { 
        jDayChooser0.remove((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.181514581974372
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDayBordersVisible(false);
      int int0 = 99;
      jDayChooser0.setDay(99);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1708905556289215
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getUIClassID();
      jDayChooser0.isDecorationBackgroundVisible();
      ActionMap actionMap0 = new ActionMap();
      ActionMap actionMap1 = new ActionMap();
      actionMap0.clear();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setActionMap((ActionMap) null);
      jDayChooser0.init();
      jDayChooser1.setFocus();
      jDayChooser0.setFocus();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-678), "14", (-870), (-1212), (-1721), 1151, 10, 926, 45, 45, (-1824), (-2571), 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -870
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1919995951265934
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "Windows";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)4;
      ActionEvent actionEvent0 = new ActionEvent("Windows", 10, "VBi", (byte)4, 33);
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser0.setMaxDayCharacters(1262);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser1.setDay((byte)0);
      jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1700989912782065
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      ActionMap actionMap0 = new ActionMap();
      Boolean boolean0 = Boolean.FALSE;
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = jDayChooser0.locale;
      ActionMap actionMap1 = new ActionMap();
      actionMap1.size();
      ActionMap actionMap2 = new ActionMap();
      actionMap2.getParent();
      actionMap0.size();
      ActionMap actionMap3 = new ActionMap();
      actionMap1.getParent();
      actionMap3.setParent(actionMap2);
      actionMap0.clear();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(rowOutputBinary0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, rowOutputBinary0, 0, 0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1662762489038148
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1522);
      jDayChooser0.setMaxDayCharacters((-169));
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.0918164583074423
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      jDayChooser0.printComponents((Graphics) null);
      jDayChooser0.setDay(0);
      jDayChooser0.addListeners(7);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.058591591902833
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(190);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.232046895647383
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.control;
      float[] floatArray0 = systemColor0.getComponents((float[]) null);
      int int0 = (-444);
      Color.getColor("");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.removeContainerListener((ContainerListener) null);
      Color.RGBtoHSB((-444), (-444), (-444), floatArray0);
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.setDay((-444));
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser1.isDayBordersVisible();
      jDayChooser0.setEnabled(false);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-444));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0966532889808382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "accessories.plugins.time.JDayChooser$DecoratorButton";
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = new Color(64258, false);
      jDayChooser0.setForeground(color0);
      jDayChooser0.setForeground(color0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser_DecoratorButton0.addMouseListener(defaultCaret0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.097465961594406
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.requestFocus();
      jDayChooser0.setDay(6);
      assertEquals(6, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2007629417128554
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.LINE_HEIGHT;
      JDayChooser jDayChooser1 = new JDayChooser();
      Color color0 = new Color(29, true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getSelectedIcon();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day", (Icon) null);
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day", true);
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem((Icon) null, false);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource0.requestFocus((boolean) gVTAttributedCharacterIterator_TextAttribute0.STRIKETHROUGH_ON);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[2];
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem1;
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      menuSelectionManager0.setSelectedPath(menuElementArray0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 357, (-486L), (int) gVTAttributedCharacterIterator_TextAttribute0.SMALL_CAPS, 1, 'g', menuElementArray0, menuSelectionManager0);
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser1, 1360, 1251L, (int) gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON, 2, 'g', menuElementArray0, menuSelectionManager0);
      jDayChooser1.keyPressed(menuKeyEvent1);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1236949235614806
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.LINE_HEIGHT;
      KeyStroke.getKeyStroke((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL);
      ActionEvent actionEvent0 = new ActionEvent("6,t9", 73, "13", 1L, (-1181));
      JDayChooser jDayChooser1 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser1.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_NONE);
      jDayChooser0.setDay(13);
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.205567847238633
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getClientProperty(object0);
      objectArray0[4] = null;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      objectArray0[7] = object0;
      JTree jTree0 = new JTree(objectArray0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMonth((-2840));
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertSame(date0, date1);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3243239261352264
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponentListeners();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.isDecorationBordersVisible();
      PanelUI panelUI0 = jDayChooser0.getUI();
      jDayChooser0.setUI(panelUI0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.initDecorations();
      jDayChooser0.setSelectableDateRange(date0, date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.231186315522068
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionMap actionMap0 = new ActionMap();
      actionMap0.size();
      ActionMap actionMap1 = jDayChooser0.getActionMap();
      actionMap0.setParent(actionMap1);
      actionMap0.allKeys();
      jDayChooser0.setActionMap(actionMap0);
      Boolean boolean0 = Boolean.FALSE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.getUIClassID();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jDayChooser0.isDecorationBackgroundVisible();
      ActionMap actionMap2 = new ActionMap();
      actionMap2.size();
      ActionMap actionMap3 = new ActionMap();
      actionMap3.getParent();
      actionMap3.setParent((ActionMap) null);
      actionMap3.setParent(actionMap2);
      actionMap2.clear();
      jDayChooser0.setActionMap(actionMap3);
      jDayChooser0.init();
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      
      actionMap2.keys();
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.setName("B#1.xQbi=X8)FH");
      FocusEvent focusEvent0 = new FocusEvent(jTextPane0, (-327));
      focusEvent0.paramString();
      jTextPane0.dispatchEvent(focusEvent0);
      jTextPane0.getCharacterAttributes();
      GapContent gapContent0 = new GapContent(0);
      jDayChooser0.setDay((-632));
      jDayChooser0.initDecorations();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setEnabled(true);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "accessories.plugins.time.JDayChooser$DecoratorButton";
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 64258;
      Color color0 = new Color(64258, false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.isDayBordersVisible();
      BrowseMode browseMode0 = new BrowseMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.15605401524258
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getClientProperty(objectArray0[3]);
      objectArray0[4] = null;
      jDayChooser0.setMaxDayCharacters(164);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(90);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.15093828530084
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2182516393465375
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String string0 = "Ku+fgk";
      Color color0 = jDayChooser0.getForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      Font font0 = Font.decode("Ku+fgk");
      jDayChooser0.setFont(font0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setWeekOfYearVisible(true);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      defaultStyledDocument0.getBidiRootElement();
      AsyncBoxView asyncBoxView0 = new AsyncBoxView((Element) null, 0);
      // Undeclared exception!
      try { 
        asyncBoxView0.getGraphics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.View", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAutoscrolls(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-16754012), color0.getRGB());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.174496393113594
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(3);
      jDayChooser0.setDay(3518);
      jDayChooser0.setDay(3518);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setDay(3518);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setMaxDayCharacters(3);
      jDayChooser2.getSelectedDay();
      jDayChooser0.setAlwaysFireDayProperty(true);
      boolean boolean0 = new Boolean(false);
      jDayChooser0.setMaxDayCharacters(238);
      jDayChooser0.setDay(223);
      assertEquals(28, jDayChooser0.getDay());
      
      jDayChooser2.setDayBordersVisible(false);
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAccessibleContext();
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      jDayChooser0.addPropertyChangeListener("D~.q", (PropertyChangeListener) metalLabelUI0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.isDecorationBordersVisible();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      // Undeclared exception!
      try { 
        MockInstant.minus(instant0, (TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.Instant", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0586049119161527
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.requestFocus();
      jDayChooser0.drawDays();
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.167881841697888
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      ActionMap actionMap0 = new ActionMap();
      Boolean boolean0 = Boolean.FALSE;
      jDayChooser0.getUIClassID();
      jDayChooser0.isDecorationBackgroundVisible();
      actionMap0.size();
      actionMap0.size();
      ActionMap actionMap1 = new ActionMap();
      actionMap0.getParent();
      actionMap1.setParent(actionMap0);
      actionMap1.setParent(actionMap0);
      actionMap0.clear();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(3);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(rowOutputBinary0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor((JTree) null, defaultTreeCellRenderer0);
      defaultTreeCellEditor0.getBorderSelectionColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.096699891103565
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMonth(1748);
      jDayChooser0.setMonth(1748);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1677452551206233
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JTree jTree0 = new JTree();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0);
      defaultTreeCellEditor0.getBorderSelectionColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 3246;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 3246);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getSundayForeground();
      // Undeclared exception!
      try { 
        MockZonedDateTime.parse((CharSequence) "day");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'day' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.focusGained((FocusEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0966532889808382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 61443;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(61443, 61443, 61443);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.init();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.initDecorations();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", 141);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(807, 0, 159, 807, 5, 0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=807,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=159,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=807,HOUR_OF_DAY=807,MINUTE=5,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.164900461674488
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      ActionMap actionMap0 = new ActionMap();
      ActionMap actionMap1 = jDayChooser0.getActionMap();
      actionMap0.setParent(actionMap1);
      actionMap0.allKeys();
      jDayChooser0.setActionMap(actionMap0);
      Boolean boolean0 = Boolean.FALSE;
      jDayChooser0.getUIClassID();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.isDecorationBackgroundVisible();
      ActionMap actionMap2 = new ActionMap();
      actionMap2.size();
      ActionMap actionMap3 = new ActionMap();
      actionMap3.getParent();
      actionMap3.setParent((ActionMap) null);
      actionMap3.setParent(actionMap2);
      actionMap2.clear();
      jDayChooser0.setActionMap(actionMap3);
      jDayChooser0.init();
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      
      actionMap2.keys();
      JTextPane jTextPane0 = new JTextPane();
      FocusEvent focusEvent0 = new FocusEvent(jTextPane0, (-327));
      focusEvent0.paramString();
      jTextPane0.dispatchEvent(focusEvent0);
      jTextPane0.getCharacterAttributes();
      GapContent gapContent0 = new GapContent(0);
      jDayChooser0.setDay((-632));
      jDayChooser0.initDecorations();
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1236847859261854
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.requestFocus();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Element element0 = defaultStyledDocument0.getBidiRootElement();
      LabelView labelView0 = new LabelView(element0);
      UndoManager undoManager0 = new UndoManager();
      defaultStyledDocument0.removeUndoableEditListener(undoManager0);
      defaultStyledDocument0.getBidiRootElement();
      Font font0 = labelView0.getFont();
      jDayChooser0.setFont(font0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.LINE_HEIGHT;
      KeyStroke.getKeyStroke((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL);
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (-84), "day", (long) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_LTR, 638);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
