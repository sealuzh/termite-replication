/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 23:59:47 GMT 2019
 */

package freemind.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import freemind.controller.Controller;
import freemind.main.FreeMindMain;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.preferences.FreemindPropertyListener;
import java.awt.Color;
import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import javax.swing.JList;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.SpinnerListModel;
import javax.swing.plaf.metal.MetalSplitPaneUI;
import javax.swing.plaf.metal.MetalToolBarUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import plugins.collaboration.database.DatabaseConnector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller_ESTest extends Controller_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      System.setCurrentTimeMillis((-3793L));
      System.setCurrentTimeMillis((-3793L));
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      MetalSplitPaneUI metalSplitPaneUI1 = new MetalSplitPaneUI();
      metalSplitPaneUI1.getNonContinuousLayoutDivider();
      Color color0 = Color.pink;
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getDockingColor();
      try { 
        Controller.showCommonJColorChooserDialog((Component) null, (String) null, (Color) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Controller.addPropertyChangeListener((FreemindPropertyListener) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ky");
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)39;
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      jTabbedPane0.getFocusTraversalKeys((byte)0);
      try { 
        Controller.showCommonJColorChooserDialog(jTabbedPane0, ")Vhq}Th?j", (Color) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SpinnerListModel spinnerListModel0 = new SpinnerListModel();
      JSpinner jSpinner0 = new JSpinner(spinnerListModel0);
      JSpinner.ListEditor jSpinner_ListEditor0 = new JSpinner.ListEditor(jSpinner0);
      Controller.Closer controller_Closer0 = new Controller.Closer();
      MindMapMode mindMapMode0 = new MindMapMode();
      assertEquals("MindMap", mindMapMode0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      System.setCurrentTimeMillis((-3793L));
      Controller.CloseAction controller_CloseAction0 = null;
      try {
        controller_CloseAction0 = new Controller.CloseAction((Controller) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$CloseAction", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      System.setCurrentTimeMillis((-3793L));
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      DatabaseConnector[] databaseConnectorArray0 = new DatabaseConnector[7];
      DatabaseConnector databaseConnector0 = new DatabaseConnector();
      databaseConnectorArray0[0] = databaseConnector0;
      DatabaseConnector databaseConnector1 = new DatabaseConnector();
      databaseConnectorArray0[1] = databaseConnector1;
      DatabaseConnector databaseConnector2 = new DatabaseConnector();
      databaseConnectorArray0[2] = databaseConnector2;
      DatabaseConnector databaseConnector3 = new DatabaseConnector();
      databaseConnectorArray0[3] = databaseConnector3;
      DatabaseConnector databaseConnector4 = new DatabaseConnector();
      databaseConnectorArray0[4] = databaseConnector4;
      DatabaseConnector databaseConnector5 = new DatabaseConnector();
      databaseConnectorArray0[5] = databaseConnector5;
      DatabaseConnector databaseConnector6 = new DatabaseConnector();
      databaseConnectorArray0[6] = databaseConnector6;
      JList<DatabaseConnector> jList0 = new JList<DatabaseConnector>(databaseConnectorArray0);
      FocusEvent focusEvent0 = new FocusEvent(jList0, (-6246), false, jList0);
      controller_DisposeOnClose0.componentMoved(focusEvent0);
      // Undeclared exception!
      try { 
        controller_DisposeOnClose0.componentHidden((ComponentEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$DisposeOnClose", e);
      }
  }
}
