/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 23:20:58 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASSearch;
import weka.attributeSelection.Ranker;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.evaluation.output.prediction.CSV;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.supportVector.Kernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.REPTree;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.tokenizers.WordTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8464780550622204
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-1723.853);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 5;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getMinimal");
      double double0 = evaluation0.m_SumPriorAbsErr;
      MockRandom mockRandom0 = new MockRandom(2);
      evaluation1.weightedMatthewsCorrelation();
      evaluation1.priorEntropy();
      evaluation1.weightedTruePositiveRate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, (int[]) null, 1533);
      try { 
        evaluation0.updateStatsForPredictor(0.6363636363636364, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.636638945204742
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      CSV cSV0 = new CSV();
      cSV0.getAttributes();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.enumerateMeasures();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(5);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1002;
      doubleArray1[1] = 0.2016966346522487;
      doubleArray1[2] = (double) 5;
      doubleArray1[3] = (double) 4;
      doubleArray1[4] = 0.2016966346522487;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1000.0, doubleArray1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance2);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc2 = new GlobalInfoJavadoc();
      evaluation0.falsePositiveRate(1002);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6882353605344806
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      globalInfoJavadoc0.generateHelp();
      globalInfoJavadoc0.setSilent(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(1072.3161151598124, 0.7071067811865476);
      double double0 = evaluation0.m_SumPriorAbsErr;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(gaussianProcesses0, 1);
      evaluation0.weightedTruePositiveRate();
      double double1 = evaluation0.m_MaxTarget;
      evaluation0.getClassPriors();
      evaluation0.truePositiveRate(1);
      evaluation0.weightedTruePositiveRate();
      evaluation0.weightedAreaUnderROC();
      DenseInstance denseInstance0 = new DenseInstance(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.weightedFalseNegativeRate();
      try { 
        evaluation2.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8628151101818309
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      linearRegression1.setAttributeSelectionMethod(selectedTag0);
      AbstractClassifier.makeCopies(linearRegression0, 5);
      evaluation0.avgCost();
      evaluation0.precision(0);
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.711459467186574
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumNominal((-2362));
      Evaluation evaluation0 = new Evaluation(instances0);
      CSV cSV0 = new CSV();
      cSV0.getAttributes();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.enumerateMeasures();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1002;
      doubleArray0[1] = (-0.04004465739155069);
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (-0.04004465739155069);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1000.0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      evaluation1.useNoPriors();
      evaluation0.weightedFMeasure();
      evaluation1.weightedFMeasure();
      evaluation1.weightedTruePositiveRate();
      evaluation0.getClassPriors();
      evaluation1.SFMeanEntropyGain();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.730681715284607
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 7;
      double double0 = evaluation0.m_TotalCost;
      Integer integer0 = new Integer(7);
      evaluation0.unweightedMacroFmeasure();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      evaluation0.kappa();
      evaluation0.trueNegativeRate(864);
      evaluation0.falseNegativeRate(2);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1733));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1733
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.141844860959406
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CSV cSV0 = new CSV();
      cSV0.getAttributes();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.enumerateMeasures();
      evaluation0.weightedAreaUnderPRC();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-0.04004465739155069);
      doubleArray0[2] = (double) 5;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (-0.04004465739155069);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1000.0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      evaluation0.areaUnderPRC(1002);
      try { 
        evaluation0.evaluateModelOnce((Classifier) regressionByDiscretization0, (Instance) binarySparseInstance3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.842345486040718
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CSV cSV0 = new CSV();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.enumerateMeasures();
      evaluation0.toCumulativeMarginDistributionString();
      J48 j48_0 = new J48();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "@data");
      // Undeclared exception!
      try { 
        instances0.deleteAttributeAt(2147483645);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4276804720991216
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader1.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(gaussianProcesses0, 4);
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.setAttributeSelectionMethod(selectedTag0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Version.MINOR = 2;
      gaussianProcesses1.getFilterType();
      evaluation0.toClassDetailsString();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.fMeasure(1);
      evaluation0.SFPriorEntropy();
      evaluation0.recall(811);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8725336946728461
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      KStar kStar0 = new KStar();
      SelectedTag selectedTag0 = kStar0.getMissingMode();
      linearRegression0.setAttributeSelectionMethod(selectedTag0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.836925436825745
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      decisionTable0.setDisplayRules(true);
      double[] doubleArray0 = new double[2];
      decisionTable0.buildClassifier(instances0);
      doubleArray0[0] = (double) 4;
      DecisionTable decisionTable1 = new DecisionTable();
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(14);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance2);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(14, true, true);
      M5Rules m5Rules0 = new M5Rules();
      Evaluation.makeOptionString(m5Rules0, true);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) sparseInstance1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.trueNegativeRate(2211);
      evaluation0.falseNegativeRate(1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.677018125225026
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.KBMeanInformation();
      MockRandom mockRandom0 = new MockRandom((byte)97);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedTruePositiveRate();
      evaluation0.confusionMatrix();
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.986196396263119
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.turnChecksOff();
      decisionTable0.setDisplayRules(true);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable1.setDisplayRules(true);
      decisionTable1.buildClassifier(instances0);
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable0.setDisplayRules(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      decisionTable1.buildClassifier(instances0);
      double double0 = evaluation0.m_TotalCost;
      Integer integer0 = new Integer(4);
      evaluation0.unweightedMacroFmeasure();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SimpleKMeans simpleKMeans1 = new SimpleKMeans();
      simpleKMeans1.getClusterCentroids();
      evaluation0.kappa();
      evaluation0.trueNegativeRate(3);
      evaluation0.confusionMatrix();
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.196302982564237
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      double double0 = evaluation0.m_SumPriorAbsErr;
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.priorEntropy();
      evaluation0.weightedTruePositiveRate();
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3603846010517215
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      AbstractClassifier.makeCopies(linearRegression0, 5);
      evaluation0.avgCost();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.errorRate();
      double double0 = evaluation1.m_Incorrect;
      evaluation1.weightedTrueNegativeRate();
      evaluation0.incorrect();
      GaussianProcesses gaussianProcesses2 = new GaussianProcesses();
      evaluation1.rootMeanSquaredError();
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4126692473710047
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      AbstractClassifier.makeCopies(linearRegression0, 5);
      evaluation0.avgCost();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.errorRate();
      double double0 = evaluation1.m_Incorrect;
      evaluation1.weightedTrueNegativeRate();
      evaluation0.incorrect();
      GaussianProcesses gaussianProcesses2 = new GaussianProcesses();
      evaluation1.numFalseNegatives(0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.881568459239703
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.setDisplayRules(true);
      DecisionTable decisionTable1 = new DecisionTable();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      instances0.toArray();
      CSV cSV0 = new CSV();
      decisionTable0.enumerateMeasures();
      CSV cSV1 = new CSV();
      evaluation0.equals(cSV1);
      decisionTable0.toString();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 4;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.75);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      evaluation1.weightedAreaUnderROC();
      int int0 = 1;
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 3100;
      intArray0[5] = 3;
      intArray0[6] = 2;
      Instance instance0 = BallNode.calcCentroidPivot(3100, 5, intArray0, instances0);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((Classifier) decisionTable1, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4522469794234416
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      selectedTag0.getRevision();
      linearRegression0.setAttributeSelectionMethod(selectedTag0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Classifier[] classifierArray0 = AbstractClassifier.makeCopies(decisionTable0, 0);
      SGD sGD0 = new SGD();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      linearRegression0.setAttributeSelectionMethod(selectedTag0);
      globalInfoJavadoc0.setSilent(true);
      LMT lMT0 = new LMT();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFEntropyGain();
      evaluation1.setNumericPriorsFromBuffer();
      evaluation1.areaUnderROC(1591);
      OneR oneR0 = new OneR();
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        evaluation0.evaluateModel((Classifier) linearRegression0, instances0, (Object[]) classifierArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.LinearRegression", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6988608687809186
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      evaluation0.equals(randomCommittee0);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 101;
      evaluation0.numFalsePositives(101);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      IBk iBk0 = new IBk(33);
      iBk0.getDistanceWeighting();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.equals(textDirectoryLoader0);
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = evaluation1.getClassPriors();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(485);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.508909101948806
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation((String) null);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      boolean boolean0 = false;
      decisionTable0.setDisplayRules(false);
      double[] doubleArray0 = new double[2];
      decisionTable0.buildClassifier(instances0);
      doubleArray0[0] = (double) 4;
      DecisionTable decisionTable1 = new DecisionTable();
      instances0.toArray();
      CSV cSV0 = new CSV();
      DecisionTable decisionTable2 = new DecisionTable();
      Evaluation.getGlobalInfo(linearRegression0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1002);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      instances1.addAll((Collection<? extends Instance>) instances0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6779640796175417
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      byte byte0 = (byte)72;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.SFPriorEntropy();
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.getClassPriors();
      evaluation0.truePositiveRate(1);
      evaluation0.weightedTruePositiveRate();
      evaluation0.weightedAreaUnderROC();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-2110));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8913741235084864
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      decisionTable0.setDisplayRules(false);
      DecisionTable decisionTable1 = new DecisionTable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      instances0.toArray();
      CSV cSV0 = new CSV();
      decisionTable1.enumerateMeasures();
      J48 j48_0 = new J48();
      evaluation0.equals(j48_0);
      decisionTable1.toString();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8725336946728461
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CSV cSV0 = new CSV();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.enumerateMeasures();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      DecisionTable decisionTable1 = new DecisionTable();
      SparseInstance sparseInstance0 = new SparseInstance(1002);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1002;
      doubleArray0[2] = (double) 1002;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (-4092.94908993904);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.492644530741424
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CSV cSV0 = new CSV();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.enumerateMeasures();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      DecisionTable decisionTable1 = new DecisionTable();
      SparseInstance sparseInstance0 = new SparseInstance(1002);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      evaluation0.weightedAreaUnderPRC();
      try { 
        evaluation0.evaluateModelOnce(0.5641895648310689, (Instance) sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2383884359730457
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".arff");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      linearRegression1.setAttributeSelectionMethod(selectedTag0);
      AbstractClassifier.makeCopies(linearRegression0, 5);
      evaluation0.avgCost();
      evaluation0.numFalseNegatives(3);
      evaluation0.precision(0);
      try { 
        Evaluation.handleCostOption(".arff", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.510469536685408
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      evaluation0.equals(randomCommittee0);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.pctIncorrect();
      evaluation0.SFMeanPriorEntropy();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.getTechnicalInformation();
      evaluation0.weightedRecall();
      evaluation0.toMatrixString("cYL\">;/'Vs^Q:BpFh");
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = new Float(Double.NaN);
      evaluation1.toClassDetailsString();
      evaluation1.m_SumSqrClass = (double) 1;
      MockRandom mockRandom0 = new MockRandom(1508);
      LMT lMT0 = new LMT();
      evaluation0.matthewsCorrelationCoefficient(1);
      evaluation1.SFMeanPriorEntropy();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@relation";
      stringArray0[1] = "globalInfo";
      stringArray0[2] = "@data";
      stringArray0[3] = "=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n";
      stringArray0[4] = "getMinimal";
      stringArray0[5] = "cYL\">;/'Vs^Q:BpFh\n   <-- classified as\n";
      stringArray0[6] = ".arff";
      stringArray0[7] = "<!-- globalinfo-start -->";
      stringArray0[8] = "@relation";
      try { 
        evaluation0.crossValidateModel("@relation", instances0, (-2768), stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.187737762476829
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      linearRegression0.setAttributeSelectionMethod(selectedTag0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      AbstractClassifier.makeCopies(decisionTable0, 0);
      SGD sGD0 = new SGD();
      JRip jRip0 = new JRip();
      evaluation0.equals(jRip0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      gaussianProcesses0.listOptions();
      evaluation1.pctUnclassified();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      Object[] objectArray0 = instances0.toArray();
      CSV cSV0 = new CSV();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable1 = new NaiveBayesMultinomialUpdateable();
      evaluation0.getDiscardPredictions();
      SMO sMO0 = new SMO();
      evaluation0.evaluateModel((Classifier) naiveBayesMultinomialUpdateable0, instances0, objectArray0);
      globalInfoJavadoc1.setClassname("getModelPath");
      JRip jRip0 = new JRip();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      // Undeclared exception!
      try { 
        ConverterUtils.DataSource.read("ges>HLV$V`y)|9iY{");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class weka.core.converters.ConverterUtils
         //
         verifyException("weka.core.converters.ConverterUtils$DataSource", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      textDirectoryLoader1.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      textDirectoryLoader3.getDataSet();
      TextDirectoryLoader textDirectoryLoader4 = new TextDirectoryLoader();
      textDirectoryLoader4.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel("Maximum number of iterations must be > 0", instances1, (-3235), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: Maximum number of iterations must be > 0
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1826169738729706
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      linearRegression0.turnChecksOn();
      decisionTable0.buildClassifier(instances0);
      assertEquals(2.0, decisionTable0.measureNumRules(), 0.01);
      
      testInstances0.setNumInstances(3);
      linearRegression0.setAttributeSelectionMethod(selectedTag0);
      evaluation0.equals(selectedTag0);
      SelectedTag selectedTag1 = new SelectedTag(2, linearRegression0.TAGS_SELECTION);
      IBk iBk0 = new IBk(2);
      SelectedTag selectedTag2 = iBk0.getDistanceWeighting();
      linearRegression0.setAttributeSelectionMethod(selectedTag2);
      double double0 = evaluation0.weightedAreaUnderROC();
      evaluation0.numTruePositives(4);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      evaluation1.useNoPriors();
      evaluation1.weightedFMeasure();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(double1, double0, 0.01);
      
      evaluation1.setDiscardPredictions(false);
      assertEquals(Double.NaN, evaluation1.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.511418405311467
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      MultiScheme multiScheme0 = new MultiScheme();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOutputFilename(true);
      globalInfoJavadoc0.setSilent(false);
      LMT lMT0 = new LMT();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.addNumericTrainClass((-540.4448), (-540.4448));
      evaluation0.weightedFMeasure();
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.unweightedMacroFmeasure();
      System.setCurrentTimeMillis(0L);
      double double1 = evaluation0.m_SumSchemeEntropy;
      evaluation0.getRevision();
      evaluation0.setDiscardPredictions(true);
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.136625166318807
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDataSet();
      evaluation0.SFPriorEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.equals(evaluation0);
      evaluation0.numTrueNegatives((-4074));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      evaluation0.SFPriorEntropy();
      gaussianProcesses0.toString();
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(0, charArray0, (-1461032992));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9614154699306983
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-126);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 7;
      double double0 = evaluation0.m_TotalCost;
      Integer integer0 = new Integer(7);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.9375, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc2 = new GlobalInfoJavadoc();
      evaluation0.areaUnderPRC(1002);
      double double1 = evaluation0.falsePositiveRate((-180));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.650771041589762
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      double[] doubleArray0 = new double[2];
      DecisionTable decisionTable1 = new DecisionTable();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      instances0.toArray();
      CSV cSV0 = new CSV();
      decisionTable1.enumerateMeasures();
      evaluation0.equals(cSV0);
      double[] doubleArray1 = new double[6];
      decisionTable1.getOptions();
      doubleArray1[0] = 113.3699045521029;
      doubleArray1[1] = (double) 3;
      decisionTable1.toString();
      doubleArray1[2] = (double) 1;
      doubleArray1[4] = (double) 4;
      doubleArray1[5] = (double) 1;
      evaluation0.updateNumericScores(doubleArray1, doubleArray0, 1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBRelativeInformation();
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8239604435494834
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader1.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(gaussianProcesses0, 4);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_MaxTarget;
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      
      evaluation0.truePositiveRate(118);
      evaluation0.weightedTruePositiveRate();
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      DenseInstance denseInstance0 = new DenseInstance(4);
      double double3 = evaluation0.KBRelativeInformation();
      double double4 = evaluation0.weightedTruePositiveRate();
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0545027463856176
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcesses1.getFilterType();
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      System.setCurrentTimeMillis(0);
      double double1 = evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      BallTree ballTree0 = new BallTree((Instances) null);
      double double2 = evaluation0.SFMeanEntropyGain();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.010912819014038
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CSV cSV0 = new CSV();
      DecisionTable decisionTable0 = new DecisionTable();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1002;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (-0.04004465739155069);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1000.0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MockRandom mockRandom0 = new MockRandom((-2));
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      evaluation0.priorEntropy();
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9365829081953962
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-5229);
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3;
      int[] intArray0 = new int[7];
      intArray0[0] = (-2);
      intArray0[1] = 5;
      intArray0[2] = 2;
      intArray0[3] = 2;
      evaluation0.equals(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.numTrueNegatives(9);
      double double1 = evaluation0.m_SumKBInfo;
      evaluation0.numTruePositives(573);
      Evaluation.handleCostOption("", 2);
      evaluation0.rootRelativeSquaredError();
      double double2 = evaluation0.numTrueNegatives((-3278));
      assertEquals(0.0, double2, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = '8';
      charArray0[2] = '_';
      charArray0[3] = 'k';
      String string0 = evaluation0.num2ShortID(214748365, charArray0, 122);
      assertEquals("                                                                                                            8k8k8k8k8k8k_8", string0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6479994512217355
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities0 = decisionTable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable1 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      linearRegression0.getAttributeSelectionMethod();
      linearRegression0.turnChecksOn();
      decisionTable0.buildClassifier(instances0);
      evaluation0.weightedFalsePositiveRate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc2 = new GlobalInfoJavadoc();
      evaluation0.falsePositiveRate(5);
      assertEquals(4.0, decisionTable0.measureNumRules(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.30045221348672
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.listOptions();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDataSet();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.setDebug(true);
      gaussianProcesses0.getFilterType();
      evaluation0.SFMeanEntropyGain();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 1147.9229039958;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.679088518599767
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LinearRegression linearRegression0 = new LinearRegression();
      SelectedTag selectedTag0 = new SelectedTag(0, gaussianProcesses0.TAGS_FILTER);
      linearRegression0.setAttributeSelectionMethod(selectedTag0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.relativeAbsoluteError();
      evaluation0.KBMeanInformation();
      evaluation0.SFMeanEntropyGain();
      evaluation0.meanPriorAbsoluteError();
      double[] doubleArray0 = new double[0];
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.022169612205472
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      decisionTable0.setDisplayRules(false);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      DecisionTable decisionTable1 = new DecisionTable();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      instances0.toArray();
      CSV cSV0 = new CSV();
      decisionTable1.enumerateMeasures();
      evaluation0.equals(cSV0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 113.3699045521029;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 1;
      try { 
        Evaluation.evaluateModel((Classifier) null, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.344685224905305
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      linearRegression1.setAttributeSelectionMethod(selectedTag0);
      Evaluation evaluation1 = new Evaluation(instances0);
      REPTree rEPTree0 = new REPTree();
      evaluation0.equals((Object) null);
      DecisionTable decisionTable1 = new DecisionTable();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.equals(evaluation2);
      evaluation1.meanAbsoluteError();
      evaluation0.SFSchemeEntropy();
      double double0 = evaluation2.m_TotalCost;
      evaluation0.unclassified();
      System.setCurrentTimeMillis(2);
      evaluation2.SFMeanSchemeEntropy();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.SFMeanEntropyGain();
      evaluation1.getHeader();
      try { 
        Evaluation.evaluateModel((Classifier) rEPTree0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.trees.REPTree:
         // 
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf (default 2).
         // -V <minimum variance for split>
         // \tSet minimum numeric class variance proportion
         // \tof train variance for split (default 1e-3).
         // -N <number of folds>
         // \tNumber of folds for reduced error pruning (default 3).
         // -S <seed>
         // \tSeed for random data shuffling (default 1).
         // -P
         // \tNo pruning.
         // -L
         // \tMaximum tree depth (default -1, no maximum)
         // -I
         // \tInitial class value count (default 0)
         // -R
         // \tSpread initial count over all class values (i.e. don't use 1 per value)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.888857014046431
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1002;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (-0.04004465739155069);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1000.0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MockRandom mockRandom0 = new MockRandom((-2));
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.numInstances();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9528170179559594
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      LMT lMT0 = new LMT();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc2 = new GlobalInfoJavadoc();
      SMO sMO0 = new SMO();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "globalInfo";
      stringArray0[1] = "globalInfo";
      stringArray0[3] = "";
      stringArray0[4] = "globalInfo";
      stringArray0[6] = "<!-- globalinfo-end -->";
      try { 
        Evaluation.evaluateModel((Classifier) sMO0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6771918788453415
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      linearRegression1.setAttributeSelectionMethod(selectedTag0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 549.9982;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      evaluation1.weightedAreaUnderROC();
      DenseInstance denseInstance0 = new DenseInstance(500);
      evaluation1.weightedFalseNegativeRate();
      try { 
        evaluation1.updatePriors(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.703430061283228
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation1 = new Evaluation(instances0);
      DecisionTable decisionTable1 = new DecisionTable();
      LinearRegression linearRegression1 = new LinearRegression();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcesses1.getFilterType();
      evaluation1.numTruePositives((-219252797));
      double double0 = evaluation0.m_SumSqrErr;
      evaluation1.trueNegativeRate(3);
      Float float0 = new Float(0.1111111111111111);
      evaluation0.weightedAreaUnderPRC();
      try { 
        evaluation1.evaluateModelOnce((double) 0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1952862989642514
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression1 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      evaluation0.numTruePositives((-52));
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.trueNegativeRate(0);
      Float float0 = new Float((double) (-2));
      evaluation0.weightedAreaUnderPRC();
      try { 
        CostMatrix.parseMatlab("@/5<(:<3\"U{$");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)72;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-41);
      intArray0[1] = (int) (byte)72;
      intArray0[2] = (int) (byte) (-92);
      intArray0[3] = (int) (byte) (-92);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)72;
      intArray0[6] = (int) (byte) (-92);
      intArray0[7] = (int) (byte)72;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)72, intArray0, 0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      evaluation0.weightedAreaUnderPRC();
      try { 
        evaluation0.evaluateModelOnce((double) (-41), (Instance) binarySparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1826276107671783
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<!-- globalinfo-end -->";
      stringArray0[1] = "globalInfo";
      stringArray0[2] = "E-";
      stringArray0[2] = "<!-- globalinfo-end -->";
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.equals("<!-- globalinfo-end -->");
      Evaluation.k_MarginResolution = 0;
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)115;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      double double1 = evaluation0.m_SumErr;
      double double2 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.m_Correct;
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      String string0 = evaluation0.num2ShortID((byte) (-117), charArray0, 5);
      assertEquals("    h", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.8988632973778206
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      J48 j48_0 = new J48();
      TestInstances testInstances1 = new TestInstances();
      evaluation1.equals(testInstances1);
      TestInstances testInstances2 = new TestInstances();
      testInstances1.assign(testInstances2);
      evaluation1.numTrueNegatives(4);
      Evaluation evaluation2 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.SFPriorEntropy();
      evaluation2.trueNegativeRate((-552));
      evaluation2.falseNegativeRate(4);
      evaluation2.unweightedMicroFmeasure();
      evaluation2.SFPriorEntropy();
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'Q';
      charArray0[2] = 'X';
      charArray0[3] = 'w';
      charArray0[4] = '`';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-195225787), charArray0, 1246);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8999379565198353
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      linearRegression0.setAttributeSelectionMethod(selectedTag0);
      XML xML0 = new XML();
      evaluation0.equals(xML0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numFalsePositives(1846);
      evaluation0.SFMeanPriorEntropy();
      decisionTable0.getTechnicalInformation();
      evaluation0.weightedRecall();
      evaluation0.toMatrixString("getUseLaplace");
      evaluation0.numFalsePositives(2223);
      evaluation0.toSummaryString("KNNTipText", true);
      evaluation0.toSummaryString();
      Evaluation.getGlobalInfo(gaussianProcesses0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = '[';
      charArray0[2] = '5';
      evaluation0.num2ShortID(855, charArray0, 0);
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "DEFAULTCHILD");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6835862697242048
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader1.reset();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1);
      textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getAttributeSelectionMethod();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      AbstractClassifier.makeCopy(multiClassClassifier0);
      SelectedTag selectedTag0 = multiClassClassifier0.getMethod();
      linearRegression0.setAttributeSelectionMethod(selectedTag0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation1.KBMeanInformation();
      evaluation1.SFMeanEntropyGain();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "    // set class value to missing\n");
      evaluation0.meanPriorAbsoluteError();
      evaluation1.SFMeanPriorEntropy();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.440769675320202
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getStopwords();
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.correct();
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.SFMeanEntropyGain();
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.55;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      assertEquals(0.0, evaluation0.correct(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) decisionTable0, (Instances) null, (-1272), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.131100645201405
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader1.reset();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1);
      textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      evaluation0.numFalsePositives(46);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.toClassDetailsString();
      MockRandom mockRandom0 = new MockRandom(0L);
      LMT lMT0 = new LMT();
      IBk iBk0 = new IBk();
      try { 
        evaluation0.crossValidateModel((Classifier) lMT0, instances0, 46, (Random) mockRandom0, (Object[]) iBk0.TAGS_WEIGHTING);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5295291652033653
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      LMT lMT0 = new LMT();
      instances0.getRevision();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<!-- globalinfo-start -->";
      stringArray0[1] = "globalInfo";
      stringArray0[2] = "@data";
      stringArray0[2] = "<!-- globalinfo-end -->";
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.equals("<!-- globalinfo-end -->");
      evaluation0.numTrueNegatives(0);
      evaluation0.SFPriorEntropy();
      evaluation0.trueNegativeRate(483);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.3738754275433327
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      DecisionTable decisionTable0 = new DecisionTable();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      instances0.toArray();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@relation";
      stringArray0[5] = ".bsi";
      NaiveBayesMultinomial.main(stringArray0);
      evaluation0.equals(naiveBayesMultinomial0);
      DecisionTable decisionTable1 = new DecisionTable();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      double double0 = evaluation0.SFMeanSchemeEntropy();
      evaluation0.numTrueNegatives(5);
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.503366758015138
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      AbstractClassifier.makeCopies(naiveBayesMultinomial0, 0);
      SGD sGD0 = new SGD();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.enumerateMeasures();
      attributeSelectedClassifier0.getSearch();
      Ranker ranker0 = new Ranker();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.setSearch(ranker0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      inputMappedClassifier1.setIgnoreCaseForNames(true);
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = 6.283185307179586;
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.9090909090909091;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 5;
      doubleArray3[3] = (double) 4;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 0.625;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (double) 1;
      doubleArray5[1] = (double) 5;
      doubleArray5[2] = (double) 1;
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = (double) 2;
      doubleArray5[5] = (double) 0;
      doubleArray5[6] = 1705.0;
      doubleArray5[7] = 865.5;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (double) 1;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = (double) 2;
      doubleArray7[2] = (double) 2;
      doubleArray7[3] = (double) 0;
      doubleArray7[4] = (double) 5;
      doubleArray7[6] = (double) 1;
      doubleArray7[7] = (-1838.47);
      doubleArray0[6] = doubleArray7;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      inputMappedClassifier1.setTrim(false);
      LinearRegression linearRegression0 = new LinearRegression();
      DecisionTable decisionTable1 = new DecisionTable();
      String string0 = evaluation0.toSummaryString(".cost", true);
      assertEquals(".cost\nTotal Number of Instances                0     \n", string0);
      
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      String string1 = Evaluation.getGlobalInfo(decisionTable1);
      assertEquals("\nSynopsis for weka.classifiers.rules.DecisionTable:\n\nClass for building and using a simple decision table majority classifier.\n\nFor more information see: \n\nRon Kohavi: The Power of Decision Tables. In: 8th European Conference on Machine Learning, 174-189, 1995.", string1);
      
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.totalCost();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.287571408673428
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      textDirectoryLoader0.listOptions();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      instances0.toArray();
      CSV cSV0 = new CSV();
      cSV0.getAttributes();
      decisionTable0.enumerateMeasures();
      Attribute attribute0 = new Attribute("numIterationsTipText", "/");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "@end";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "numIterationsTipText";
      stringArray0[5] = "@attribute";
      stringArray0[6] = "real";
      stringArray0[7] = "integer";
      stringArray0[8] = "@relation";
      NaiveBayesMultinomial.main(stringArray0);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      attributeSelectedClassifier1.getSearch();
      Ranker ranker0 = new Ranker();
      decisionTable0.setSearch(ranker0);
      evaluation0.equals(attributeSelectedClassifier0);
      String string0 = evaluation0.toSummaryString("debugTipText", true);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals("debugTipText\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      String string1 = Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      assertEquals("\nSynopsis for weka.classifiers.bayes.NaiveBayesMultinomial:\n\nClass for building and using a multinomial Naive Bayes classifier. For more information see,\n\nAndrew Mccallum, Kamal Nigam: A Comparison of Event Models for Naive Bayes Text Classification. In: AAAI-98 Workshop on 'Learning for Text Categorization', 1998.\n\nThe core equation for this classifier:\n\nP[Ci|D] = (P[D|Ci] x P[Ci]) / P[D] (Bayes rule)\n\nwhere Ci is class i and D is a document.", string1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.99940268890032
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable1.setDisplayRules(false);
      decisionTable0.buildClassifier(instances0);
      assertEquals(2.0, decisionTable0.measureNumRules(), 0.01);
      
      double double0 = evaluation0.m_TotalCost;
      Integer integer0 = new Integer((-1));
      double double1 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SimpleKMeans simpleKMeans1 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      evaluation0.kappa();
      evaluation0.trueNegativeRate(0);
      double double2 = evaluation0.falseNegativeRate(0);
      assertNotEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate(3404);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.falseNegativeRate(3404);
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.weightedMatthewsCorrelation();
      double double3 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.6007624033913315
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      globalInfoJavadoc1.setSilent(true);
      LMT lMT0 = new LMT();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numTrueNegatives(477);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFPriorEntropy();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.m_SumPriorSqrErr;
      evaluation2.SFEntropyGain();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 26;
      evaluation2.updateMargins(doubleArray0, 0, 26.0);
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) lMT0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 0.0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) globalInfoJavadoc1;
      objectArray0[5] = (Object) mockRandom0;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) 0.0;
      try { 
        evaluation0.crossValidateModel((Classifier) lMT0, instances0, 1, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.5089360197456996
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      decisionTable0.setDisplayRules(false);
      double[] doubleArray0 = new double[2];
      decisionTable0.buildClassifier(instances0);
      doubleArray0[0] = (double) 4;
      DecisionTable decisionTable1 = new DecisionTable();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      instances0.toArray();
      CSV cSV0 = new CSV();
      DecisionTable decisionTable2 = new DecisionTable();
      Evaluation.getGlobalInfo(linearRegression0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1002);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8725336946728461
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      SMOreg sMOreg0 = new SMOreg();
      Kernel kernel0 = sMOreg0.getKernel();
      gaussianProcesses0.setKernel(kernel0);
      KStar kStar0 = new KStar();
      kStar0.toString();
      SelectedTag selectedTag0 = new SelectedTag(0, sMOreg0.TAGS_FILTER);
      linearRegression0.setAttributeSelectionMethod(selectedTag0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.426775702954569
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc2 = new GlobalInfoJavadoc();
      textDirectoryLoader0.setOutputFilename(false);
      globalInfoJavadoc2.setSilent(false);
      LMT lMT0 = new LMT();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.areaUnderROC(0);
      evaluation0.addNumericTrainClass(0.0, (-540.4448));
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CSV cSV0 = new CSV();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.enumerateMeasures();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DecisionTable decisionTable1 = new DecisionTable();
      SparseInstance sparseInstance0 = new SparseInstance(1002);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      decisionTable1.toString();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-6.8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8802063289439461
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation("\"BF:}j*XO{. !vzb[9n");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      AbstractClassifier.makeCopies(decisionTable0, 502);
      evaluation0.avgCost();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation2.precision(41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.663696837782289
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      linearRegression1.setAttributeSelectionMethod(selectedTag0);
      GaussianProcesses gaussianProcesses2 = new GaussianProcesses();
      gaussianProcesses1.getFilterType();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.SFMeanPriorEntropy();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.makeDistribution(0);
      String string1 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(" -1       0    \n", string1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.773118601486813
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      double[] doubleArray0 = new double[3];
      boolean boolean0 = evaluation0.equals(naiveBayesMultinomial0);
      assertFalse(boolean0);
      
      evaluation0.avgCost();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = evaluation0.numFalsePositives(40);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanPriorEntropy();
      double double2 = evaluation0.weightedRecall();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.getRevision();
      double[] doubleArray1 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray1.length);
      
      double double3 = evaluation0.avgCost();
      assertEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.6900480315584496
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      evaluation0.equals(adaBoostM1_0);
      evaluation0.weightedMatthewsCorrelation();
      int int0 = 9;
      evaluation0.numTrueNegatives(2);
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.numTruePositives(1);
      try { 
        Evaluation.handleCostOption(".arff", (-5229));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.3472195112753518
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.errorRate();
      OneR oneR0 = new OneR();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) instances0;
      objectArray0[1] = (Object) " -1       0    \n";
      objectArray0[3] = (Object) costMatrix0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = object0;
      evaluation0.avgCost();
      String string1 = evaluation0.toSummaryString("Ignored Class Unknown Instances            ", false);
      assertEquals("Ignored Class Unknown Instances            \nTotal Number of Instances                0     \n", string1);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.655658866069486
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      evaluation0.numTrueNegatives(0);
      try { 
        CostMatrix.parseMatlab(" ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.7727445397131927
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      DecisionTable decisionTable1 = new DecisionTable();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      instances0.toArray();
      CSV cSV0 = new CSV();
      cSV0.getAttributes();
      decisionTable1.enumerateMeasures();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(741);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1002;
      doubleArray0[2] = (double) 5;
      doubleArray0[4] = (double) 741;
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = (double) 1002;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1.7976931348623157E308, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(3);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      double double0 = evaluation0.weightedFMeasure();
      evaluation0.weightedFMeasure();
      double double1 = evaluation0.unweightedMacroFmeasure();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.06075971812573
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      AbstractClassifier.makeCopies(gaussianProcesses0, 8);
      evaluation0.SFPriorEntropy();
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.getClassPriors();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.731741760099072
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader1.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader2.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AbstractClassifier.makeCopies(gaussianProcesses0, 4);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_MaxTarget;
      evaluation0.getClassPriors();
      evaluation0.truePositiveRate(118);
      double double2 = evaluation0.weightedTruePositiveRate();
      double double3 = evaluation0.weightedAreaUnderROC();
      assertEquals(double3, double2, 0.01);
      
      DenseInstance denseInstance0 = new DenseInstance(4);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double4 = evaluation0.weightedFalseNegativeRate();
      double double5 = evaluation1.SFMeanEntropyGain();
      assertEquals(double5, double4, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.makeOptionString(classifier0, false);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.585652225212809
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.SFPriorEntropy();
      Evaluation evaluation2 = new Evaluation(instances0);
      String string0 = evaluation2.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      boolean boolean0 = evaluation0.equals(evaluation1);
      assertTrue(boolean0);
      
      evaluation0.numTrueNegatives((-4074));
      evaluation0.SFPriorEntropy();
      double double0 = evaluation1.numTruePositives(1);
      assertEquals(0.0, double0, 0.01);
      
      evaluation2.errorRate();
      evaluation0.kappa();
      double double1 = evaluation0.trueNegativeRate(498);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation2.falseNegativeRate(498);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable2.setDisplayRules(true);
      DecisionTable decisionTable3 = new DecisionTable();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Object[] objectArray0 = instances0.toArray();
      CSV cSV0 = new CSV();
      cSV0.getAttributes();
      decisionTable0.enumerateMeasures();
      Attribute attribute0 = new Attribute("setFilterType", " ");
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      attributeSelectedClassifier0.getSearch();
      Ranker ranker0 = new Ranker();
      decisionTable2.setSearch(ranker0);
      try { 
        evaluation0.evaluateModel((Classifier) naiveBayesMultinomial0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.DenseInstance cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "";
      Evaluation.handleCostOption("", 0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc2 = new GlobalInfoJavadoc();
      int int0 = 0;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 26;
      doubleArray0[1] = (double) 26;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 70, (-3888.12));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 70
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.5935382302322667
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      Integer integer0 = new Integer(19);
      evaluation0.unweightedMacroFmeasure();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SimpleKMeans simpleKMeans1 = new SimpleKMeans();
      simpleKMeans1.getClusterCentroids();
      evaluation0.weightedTruePositiveRate();
      evaluation0.falseNegativeRate(3940);
      instances0.enumerateInstances();
      testInstances0.clone();
      double double1 = evaluation0.numTrueNegatives((-2));
      assertEquals(0.0, double1, 0.01);
      
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.2487138225718355
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      decisionTable0.setDisplayRules(false);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      DecisionTable decisionTable1 = new DecisionTable();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      instances0.toArray();
      CSV cSV0 = new CSV();
      decisionTable1.enumerateMeasures();
      evaluation0.equals(cSV0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 113.3699045521029;
      evaluation0.areaUnderPRC(5);
      evaluation0.numTruePositives(1238);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.130870775447331
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities0 = decisionTable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable1 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      linearRegression0.getAttributeSelectionMethod();
      linearRegression0.turnChecksOn();
      decisionTable0.buildClassifier(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      evaluation0.useNoPriors();
      evaluation0.weightedFMeasure();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.weightedTruePositiveRate();
      assertEquals(4.0, decisionTable0.measureNumRules(), 0.01);
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.7037995141431166
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.setDisplayRules(true);
      DecisionTable decisionTable1 = new DecisionTable();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      instances0.toArray();
      CSV cSV0 = new CSV();
      decisionTable0.enumerateMeasures();
      CSV cSV1 = new CSV();
      evaluation0.equals(cSV1);
      decisionTable0.toString();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 4;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.75);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      evaluation1.weightedAreaUnderROC();
      DenseInstance denseInstance0 = new DenseInstance(1);
      evaluation0.weightedFalseNegativeRate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      try { 
        inputMappedClassifier0.constructMappedInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.2144930563317518
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      linearRegression0.turnChecksOn();
      decisionTable0.buildClassifier(instances0);
      linearRegression0.setAttributeSelectionMethod(selectedTag0);
      evaluation0.equals(selectedTag0);
      SelectedTag selectedTag1 = new SelectedTag(2, linearRegression0.TAGS_SELECTION);
      IBk iBk0 = new IBk(2);
      SelectedTag selectedTag2 = iBk0.getDistanceWeighting();
      linearRegression0.setAttributeSelectionMethod(selectedTag2);
      evaluation0.weightedAreaUnderROC();
      evaluation0.numTruePositives(4);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      evaluation1.useNoPriors();
      evaluation1.weightedFMeasure();
      evaluation0.weightedFMeasure();
      evaluation0.weightedTruePositiveRate();
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution((-1679.78));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CSV cSV0 = new CSV();
      cSV0.getAttributes();
      DecisionTable decisionTable0 = new DecisionTable();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1002;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (-0.04004465739155069);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1000.0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, binarySparseInstance2, 1000.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 13;
      Instances instances0 = new Instances("Qe/B#BF", arrayList0, 13);
      Evaluation.handleCostOption((String) null, 13);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.4013297376603298
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader2.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      globalInfoJavadoc0.setSilent(true);
      LMT lMT0 = new LMT();
      Evaluation evaluation0 = new Evaluation(instances1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.toString();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = 0.035823639860549865;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 4;
      doubleArray0[8] = (double) 3;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2434.302183357342));
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      evaluation1.weightedAreaUnderROC();
      evaluation0.toMatrixString();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-2307));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.8010564781550666
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LinearRegression linearRegression0 = new LinearRegression();
      SelectedTag selectedTag0 = new SelectedTag(0, gaussianProcesses0.TAGS_FILTER);
      linearRegression0.setAttributeSelectionMethod(selectedTag0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.KBMeanInformation();
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.getHeader();
      double double2 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6982534265943698
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 7;
      double double0 = evaluation0.m_TotalCost;
      Integer integer0 = new Integer(7);
      DecisionTable decisionTable0 = new DecisionTable();
      SparseInstance sparseInstance0 = new SparseInstance(1516);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(2, true, true);
      M5Rules m5Rules0 = new M5Rules();
      evaluation0.toMatrixString("measureAttributesUsed");
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.063594376997188
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.incorrect();
      evaluation0.toCumulativeMarginDistributionString();
      Sourcable sourcable0 = null;
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, ".xml");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.2731738319283363
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      MultiScheme multiScheme0 = new MultiScheme();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      textDirectoryLoader1.setOutputFilename(false);
      globalInfoJavadoc0.setSilent(false);
      LMT lMT0 = new LMT();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.addNumericTrainClass(101, 0.7071067811865476);
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1508;
      doubleArray0[1] = 0.7071067811865476;
      doubleArray0[2] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.0171869213426303
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc2 = new GlobalInfoJavadoc();
      textDirectoryLoader0.setOutputFilename(true);
      globalInfoJavadoc2.setSilent(true);
      LWL lWL0 = new LWL();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.9456645463488127
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CSV cSV0 = new CSV();
      DecisionTable decisionTable0 = new DecisionTable();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1002;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (-0.04004465739155069);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1000.0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(10);
      evaluation0.areaUnderROC(19);
      double double0 = evaluation1.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.108746843378915
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiScheme multiScheme0 = new MultiScheme();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      evaluation0.equals(randomCommittee0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double1 = evaluation0.numFalsePositives(101);
      assertEquals(0.0, double1, 0.01);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getFilterType();
      IBk iBk0 = new IBk(33);
      iBk0.getDistanceWeighting();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.equals(textDirectoryLoader0);
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(double2, double0, 0.01);
      
      evaluation1.rootRelativeSquaredError();
      double double3 = evaluation1.numTrueNegatives((-299));
      assertEquals(0.0, double3, 0.01);
      
      Float float0 = new Float((-3308.258));
      double double4 = evaluation1.errorRate();
      assertEquals(Double.NaN, double4, 0.01);
      
      evaluation0.kappa();
      evaluation0.trueNegativeRate(0);
      evaluation0.falseNegativeRate(214748365);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      DecisionTable decisionTable1 = new DecisionTable();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CSV cSV0 = new CSV();
      cSV0.getAttributes();
      decisionTable1.enumerateMeasures();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(741);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1002;
      doubleArray0[2] = (double) 5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = (double) 1002;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 0;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1.7976931348623157E308, doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("7&-_8+ UM&8C*r,^c%");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.891873605298316
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      linearRegression1.setAttributeSelectionMethod(selectedTag0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (-1723.853);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 5;
      double double0 = evaluation0.m_SumPriorAbsErr;
      MockRandom mockRandom0 = new MockRandom(41L);
      evaluation1.weightedMatthewsCorrelation();
      double double1 = evaluation1.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
      
      evaluation1.weightedTruePositiveRate();
      evaluation1.weightedRecall();
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.730888889972105
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DecisionTable decisionTable0 = new DecisionTable();
      LinearRegression linearRegression0 = new LinearRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SelectedTag selectedTag0 = gaussianProcesses0.getFilterType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinearRegression linearRegression1 = new LinearRegression();
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      linearRegression1.setAttributeSelectionMethod(selectedTag0);
      Evaluation evaluation1 = new Evaluation(instances0);
      REPTree rEPTree0 = new REPTree();
      evaluation0.equals((Object) null);
      DecisionTable decisionTable1 = new DecisionTable();
      evaluation0.falseNegativeRate((-1));
      Evaluation evaluation2 = new Evaluation(instances0);
      testInstances0.setNumNominal(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.unweightedMicroFmeasure();
      double double1 = evaluation2.weightedPrecision();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation2.numFalsePositives(1);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "\"(ip";
      Evaluation.main(stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("    runFilter(new WekaWrapper(), args);\n");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\"(ip");
      try { 
        Evaluation.handleCostOption("    runFilter(new WekaWrapper(), args);\n", (-1653));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"(ip\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.720077983769899
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CSV cSV0 = new CSV();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.enumerateMeasures();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      DecisionTable decisionTable1 = new DecisionTable();
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getAttributeSelectionMethod();
      linearRegression0.turnChecksOn();
      decisionTable1.buildClassifier(instances0);
      assertEquals(2.0, decisionTable1.measureNumRules(), 0.01);
      
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1002;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) binarySparseInstance0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc1 = new GlobalInfoJavadoc();
      GlobalInfoJavadoc globalInfoJavadoc2 = new GlobalInfoJavadoc();
      double double1 = evaluation0.falsePositiveRate(1002);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.717020786717215
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-289.408121641);
      doubleArray0[1] = (-289.408121641);
      doubleArray0[2] = 2851.9055304;
      doubleArray0[3] = (-289.408121641);
      doubleArray0[4] = 2510.33;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.getRevision();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals("9101", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.677191878845341
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.toArray();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.setDisplayRules(false);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      DecisionTable decisionTable1 = new DecisionTable();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      instances0.toArray();
      decisionTable1.enumerateMeasures();
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 113.3699045521029;
      doubleArray1[1] = (double) 3;
      decisionTable1.toString();
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) (-2);
      doubleArray1[4] = (double) 4;
      doubleArray1[5] = 1407.72859804;
      evaluation0.updateNumericScores(doubleArray1, doubleArray0, 1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedTruePositiveRate();
      evaluation1.weightedAreaUnderROC();
      evaluation1.weightedFalseNegativeRate();
      evaluation0.incorrect();
      org.evosuite.runtime.Random.setNextRandom(86);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation.handleCostOption((String) null, (byte) (-38));
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) (byte) (-38);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(100);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.1102945927097245
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.numTruePositives((-152));
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.trueNegativeRate((-52));
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(32, false, true);
      M5Rules m5Rules0 = new M5Rules();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString("@data");
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      XRFFLoader xRFFLoader1 = new XRFFLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CSVLoader cSVLoader0 = new CSVLoader();
      CSVLoader cSVLoader1 = new CSVLoader();
      try { 
        cSVLoader1.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CSV cSV0 = new CSV();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.enumerateMeasures();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      org.evosuite.runtime.Random.setNextRandom((-197112209));
      binarySparseInstance0.setValue(0, (double) 5);
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CSVLoader cSVLoader0 = new CSVLoader();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        Evaluation.evaluateModel((Classifier) inputMappedClassifier0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.misc.InputMappedClassifier:
         // 
         // -I
         // \tIgnore case when matching attribute names and nominal values.
         // -M
         // \tSuppress the output of the mapping report.
         // -trim
         // \tTrim white space from either end of names before matching.
         // -L <path to model to load>
         // \tPath to a model to load. If set, this model
         // \twill be used for prediction and any base classifier
         // \tspecification will be ignored. Environment variables
         // \tmay be used in the path (e.g. ${HOME}/myModel.model)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.483453314954943
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      instances0.toArray();
      CSV cSV0 = new CSV();
      CSV cSV1 = new CSV();
      evaluation0.toClassDetailsString("-l <name of input file>\n");
      decisionTable0.enumerateMeasures();
      Attribute attribute0 = new Attribute(".arff", 1);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      AttributeSelectedClassifier attributeSelectedClassifier1 = new AttributeSelectedClassifier();
      attributeSelectedClassifier1.listOptions();
      ASSearch aSSearch0 = attributeSelectedClassifier1.getSearch();
      Ranker ranker0 = new Ranker();
      try { 
        ASSearch.makeCopies(aSSearch0, (-666460443));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.attributeSelection.ASSearch", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "splitOnResidualsTipText";
      stringArray0[1] = "`T";
      stringArray0[2] = "{m";
      stringArray0[3] = "getErrorOnProbabilities";
      stringArray0[4] = "&C,+d]&";
      stringArray0[5] = "_d-S,C8f";
      try { 
        Evaluation.evaluateModel((Classifier) multiScheme0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.MultiScheme:
         // 
         // -X <number of folds>
         // \tUse cross validation for model selection using the
         // \tgiven number of folds. (default 0, is to
         // \tuse training error)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -B <classifier specification>
         // \tFull class name of classifier to include, followed
         // \tby scheme options. May be specified multiple times.
         // \t(default: \"weka.classifiers.rules.ZeroR\")
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "\"NSz`i";
      try { 
        Evaluation.evaluateModel("\"NSz`i", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name \"NSz`i.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("m!/RjW", arrayList0, 1670);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-2939.197927);
      doubleArray0[2] = (double) 99;
      doubleArray0[3] = (-2939.197927);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 99;
      intArray0[3] = 0;
      intArray0[4] = 0;
      SparseInstance sparseInstance0 = new SparseInstance((-2939.197927), doubleArray0, intArray0, (-5696));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.dataset();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
