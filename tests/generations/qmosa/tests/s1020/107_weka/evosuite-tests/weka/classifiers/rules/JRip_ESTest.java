/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 22:02:00 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASEvaluation;
import weka.attributeSelection.CorrelationAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.estimate.BayesNetEstimator;
import weka.classifiers.bayes.net.search.SearchAlgorithm;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.lazy.IBk;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0652173913644494
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("(YD3&X]q+Q %X4");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("(YD3&X]q+Q %X4", arrayList1, 87);
      JRip jRip0 = new JRip();
      arrayList0.add("");
      Attribute attribute0 = new Attribute("", arrayList0, 87);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Instances instances1 = new Instances(instances0);
      jRip_NominalAntd0.splitData(instances0, (-1.0), 0.0);
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.getSearchAlgorithm();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet3.measureAICScore();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet5.getRevision();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      JRip jRip2 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip2.new RipperRule();
      jRip_RipperRule1.setConsequent(2429.08);
      try { 
        jRip_RipperRule1.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnaryOperator.identity();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      int int0 = 3980;
      Instances instances0 = new Instances("',z,Z:QMKJcKMARL#", arrayList1, 3980);
      arrayList0.add("',z,Z:QMKJcKMARL#");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2302.81376084419;
      doubleArray0[1] = 13.753830090987;
      doubleArray0[3] = 13.753830090987;
      doubleArray0[4] = (double) 3980;
      doubleArray0[5] = 13.753830090987;
      doubleArray0[6] = (double) (-4192);
      doubleArray0[7] = 13.753830090987;
      doubleArray0[8] = (double) (-4192);
      SparseInstance sparseInstance0 = new SparseInstance(13.753830090987, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("9V?pIBjm]e\")$", arrayList0, (-4192));
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Instances instances1 = new Instances(instances0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 4, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L<!!-J=t#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("L<!!-J=t#", arrayList0, 42);
      DenseInstance denseInstance0 = new DenseInstance(6);
      SparseInstance sparseInstance0 = new SparseInstance(112);
      instances0.add((Instance) sparseInstance0);
      RuleStats.partition(instances0, (-1094));
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList1, 42);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, (-1), (-1094));
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2879917301334416
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-1287));
      jRip0.toString();
      jRip0.debugTipText();
      jRip0.debugTipText();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JRIP: No model built yet.");
      jRip0.getUsePruning();
      jRip0.getOptimizations();
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2905));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-119);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.spliterator();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet0.m_Distributions = null;
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      bayesNet0.setSearchAlgorithm(searchAlgorithm0);
      BayesNet bayesNet4 = new BayesNet();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "KIO.";
      stringArray0[1] = "pand";
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      BayesNet bayesNet7 = new BayesNet();
      SearchAlgorithm searchAlgorithm1 = bayesNet2.getSearchAlgorithm();
      BayesNet bayesNet8 = new BayesNet();
      bayesNet8.measureBayesScore();
      bayesNet8.setSearchAlgorithm(searchAlgorithm1);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-48.20031631496505), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.value = (double) 2;
      jRip_NominalAntd0.covers(sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3105624464720997
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      int[] intArray0 = new int[1];
      intArray0[0] = 2928;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1600.234215749587, intArray0, 2928);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("X?LCxM+PoWR:%/rGY", protectedProperties0);
      JRip jRip2 = new JRip();
      protectedProperties0.propertyNames();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (-3042.783908855962);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("X?LCxM+PoWR:%/rGY >= NaN", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnaryOperator.identity();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      environment0.getVariableNames();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) list0);
      predicate0.negate();
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("]", arrayList5, 13);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.75;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = 1642.0;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = 957.172845545298;
      doubleArray0[6] = 1642.0;
      doubleArray0[7] = (double) 6;
      DenseInstance denseInstance0 = new DenseInstance(1642.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      instances0.add((Instance) sparseInstance0);
      RuleStats.partition(instances0, 13);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("]", list1, 6);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 6, 2.147483647E9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attribute attribute0 = new Attribute("',z,Z:QMKJcKMARL#");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 1);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      instances0.add((Instance) binarySparseInstance0);
      jRip_RipperRule0.toString(attribute0);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',z,Z:QMKpKKMA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',z,Z:QMKpKKMA#");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',z,Z:QMKpKKMA#");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',z,Z:QMKpKKMA#");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[2];
      jRip0.setDebug(true);
      stringArray0[0] = "',z,Z:QMKpKKMA#";
      stringArray0[1] = "',z,Z:QMKpKKMA#";
      JRip.main(stringArray0);
      jRip0.getOptions();
      jRip0.getCapabilities();
      assertTrue(jRip0.getDebug());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.setSeed(0L);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance(1740.3328375870183, doubleArray0, intArray0, 2824);
      SparseInstance sparseInstance1 = new SparseInstance((-1.0), doubleArray0, intArray0, (-1));
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      PrincipalComponents principalComponents2 = new PrincipalComponents();
      jRip0.getSeed();
      PrincipalComponents principalComponents3 = new PrincipalComponents();
      PrincipalComponents principalComponents4 = new PrincipalComponents();
      try { 
        principalComponents1.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',z,Z:QMKJKKMA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',z,Z:QMKJKKMA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',z,Z:QMKJKKMA#");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SMOreg sMOreg0 = new SMOreg();
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.getDebug();
      double double0 = 2.0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.m_saveMemory = false;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.spliterator();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet5.setSearchAlgorithm(searchAlgorithm0);
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      BayesNet bayesNet10 = new BayesNet();
      SearchAlgorithm searchAlgorithm1 = bayesNet10.getSearchAlgorithm();
      BayesNet bayesNet11 = new BayesNet();
      BayesNet bayesNet12 = new BayesNet();
      bayesNet1.measureBayesScore();
      BayesNet bayesNet13 = new BayesNet();
      bayesNet3.setSearchAlgorithm(searchAlgorithm1);
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass(4, (Instances) null, 3, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>(arrayList0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ClassOrder classOrder0 = new ClassOrder();
      linkedList1.removeFirstOccurrence(arrayList0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.containsAll(linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList2, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0, locale_FilteringMode0);
      arrayList2.retainAll(linkedList1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>(linkedList1);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      JRip jRip0 = new JRip();
      linkedList5.add("");
      Attribute attribute0 = new Attribute("", "", 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(" = ", string0);
      
      String string1 = jRip_NumericAntd0.toString();
      assertEquals(" <= NaN", string1);
      
      Locale.filterTags((List<Locale.LanguageRange>) linkedList4, (Collection<String>) linkedList5);
      Attribute.typeToString(attribute0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance1);
      boolean boolean1 = jRip_NominalAntd0.covers(sparseInstance1);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3221086830269158
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("needs");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayList0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>(arrayList1);
      Environment environment0 = new Environment();
      environment0.getVariableNames();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayList2, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-920.584270858331), doubleArray0, intArray0, (-1));
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      jRip2.setDebug(true);
      try { 
        jRip2.rulesetForOneClass(4.1925210160653865, (Instances) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(arrayList1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("ism");
      arrayList3.add(locale_LanguageRange0);
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("needs");
      arrayList0.add("0E?,)ZBzEQFf,");
      arrayList3.add(locale_LanguageRange1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayList0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>(arrayList4);
      Environment environment0 = new Environment();
      environment0.getVariableNames();
      ArrayList<String> arrayList5 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayList5, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList0, locale_FilteringMode2);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-920.584270858331), doubleArray0, intArray0, (-1));
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("bA", (-1));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertTrue(boolean0);
      
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals("bA = ", string0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      
      String string1 = jRip0.toString();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals("JRIP: No model built yet.", string1);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("a", "a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("date");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "date");
      printWriter0.println((double) 2);
      printWriter0.println(false);
      mockPrintWriter0.print(true);
      mockPrintWriter0.println();
      Properties properties1 = new Properties();
      mockPrintWriter0.print("numeric");
      PrintWriter printWriter1 = mockPrintWriter0.append((CharSequence) "relational");
      printWriter1.print(true);
      printWriter1.print(1.0F);
      properties1.store((Writer) printWriter1, "f,G-(8Sa@lr*ySi4");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("real", arrayList0, 4);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      RuleStats.partition(instances0, 2);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 3, 0);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1238L));
      jRip_NumericAntd0.splitData(instances0, 4, 4);
      jRip_NumericAntd0.splitData(instances0, 1, 2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => a=", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-48);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJyKA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJyKA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJyKA#");
      JRip jRip0 = new JRip();
      Utils.log2 = 0.25;
      long long0 = jRip0.getSeed();
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 10);
      Instances instances1 = new Instances(instances0);
      try { 
        jRip0.rulesetForOneClass(5.3, instances1, 10, 5.3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<ClassOrder> arrayList1 = new ArrayList<ClassOrder>();
      arrayList0.retainAll(arrayList1);
      Instances instances0 = new Instances((String) null, arrayList0, 4);
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Attribute attribute0 = new Attribute((String) null, instances1, (-568));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      System.setCurrentTimeMillis(1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute attribute0 = new Attribute("',z,Z:QMKJcKMARL#");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 1);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      StringReader stringReader0 = new StringReader(".arff");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 80);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      bufferedReader1.mark(822);
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader0, 101);
      StringReader stringReader1 = new StringReader("");
      BufferedReader bufferedReader3 = new BufferedReader(stringReader0);
      StringReader stringReader2 = new StringReader("',z,Z:QMKJcKMARL#");
      BufferedReader bufferedReader4 = new BufferedReader(bufferedReader3);
      BufferedReader bufferedReader5 = new BufferedReader(stringReader2, 2);
      BufferedReader bufferedReader6 = new BufferedReader(bufferedReader1);
      StringReader stringReader3 = new StringReader("");
      BufferedReader bufferedReader7 = new BufferedReader(bufferedReader0);
      BufferedReader bufferedReader8 = new BufferedReader(bufferedReader5);
      StringReader stringReader4 = new StringReader("@end");
      BufferedReader bufferedReader9 = null;
      try {
        bufferedReader9 = new BufferedReader(stringReader4, (-1464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 11;
      intArray0[4] = 1;
      intArray0[5] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), intArray0, 1367);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.dataset();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 1, 6.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.spliterator();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayList0, locale_FilteringMode1);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList0, locale_FilteringMode2);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list1, locale_FilteringMode3);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list1, locale_FilteringMode4);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("]", arrayList4, 2189);
      RuleStats.partition(instances0, 123);
      Attribute attribute0 = new Attribute("@relation", list2, 68);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 0, 2189);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      String string0 = jRip0.globalInfo();
      Attribute attribute0 = new Attribute("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.accu = (-2769.7815);
      jRip_NominalAntd0.value = (double) 3;
      double double0 = jRip_NominalAntd0.cover;
      jRip0.getFolds();
      jRip0.getFolds();
      jRip_NominalAntd0.getRevision();
      jRip0.foldsTipText();
      jRip0.getUsePruning();
      jRip_NominalAntd0.getAccuRate();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "date";
      stringArray0[1] = "@attribute";
      stringArray0[2] = "relational";
      stringArray0[3] = "relational";
      stringArray0[4] = "Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.";
      stringArray0[5] = "@attribute";
      stringArray0[6] = "@attribute";
      stringArray0[7] = string0;
      ASEvaluation.runEvaluator(correlationAttributeEval0, stringArray0);
      try { 
        principalComponents0.convertInstance((Instance) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet3.setSearchAlgorithm(searchAlgorithm0);
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      bayesNet2.getEstimator();
      BayesNetEstimator bayesNetEstimator0 = bayesNet0.getEstimator();
      bayesNet0.setEstimator(bayesNetEstimator0);
      bayesNet3.measureEntropyScore();
      BayesNet bayesNet10 = new BayesNet();
      SearchAlgorithm searchAlgorithm1 = bayesNet10.getSearchAlgorithm();
      BayesNet bayesNet11 = new BayesNet();
      BayesNet bayesNet12 = new BayesNet();
      BayesNet bayesNet13 = new BayesNet();
      bayesNet3.setSearchAlgorithm(searchAlgorithm1);
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Ol9 rule: ";
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("a", protectedProperties0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("date");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "date");
      printWriter0.println((double) 2);
      printWriter0.println(true);
      properties0.store((Writer) printWriter0, "");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAttrValue();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals("a = ", string0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attribute attribute0 = new Attribute("',z,Z:QMKJKKMA#");
      JRip jRip0 = new JRip();
      int int0 = 2752;
      Attribute attribute1 = new Attribute("0m24L0'KFL X;nI9e9`", 2752);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("',z,Z:QMKJKKMA#", arrayList0, 0);
      Instances instances1 = new Instances(instances0);
      jRip0.setFolds(0);
      jRip_NominalAntd0.splitData(instances0, (-1.0), (-1364.389632493428));
      StringReader stringReader0 = new StringReader(" (");
      StringReader stringReader1 = new StringReader("5");
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(stringReader0, (-100));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      PrincipalComponents principalComponents2 = new PrincipalComponents();
      principalComponents1.setVarianceCovered((-1.0));
      int[] intArray0 = new int[9];
      intArray0[0] = (-2799);
      intArray0[1] = (-4635);
      intArray0[2] = (-4635);
      intArray0[3] = (-4635);
      intArray0[4] = (-2799);
      intArray0[5] = (-2799);
      intArray0[6] = (-4635);
      intArray0[7] = (-2799);
      intArray0[8] = (-2799);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-4635);
      doubleArray0[1] = (double) (-2799);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 3);
      PrincipalComponents principalComponents3 = new PrincipalComponents();
      PrincipalComponents principalComponents4 = new PrincipalComponents();
      PrincipalComponents principalComponents5 = new PrincipalComponents();
      boolean boolean1 = jRip0.getUsePruning();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(boolean1 == boolean0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("", linkedList0, 93);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getMaxInfoGain();
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd1 = jRip1.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.4333447762296143
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jRip0.foldsTipText();
      jRip0.getMinNo();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.");
      jRip0.globalInfo();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      jRip0.optimizationsTipText();
      jRip0.debugTipText();
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.minNoTipText();
      BallNode ballNode0 = new BallNode(1055);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1055;
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      Instances instances1 = null;
      try {
        instances1 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, (String) null, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttr();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-48);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-48);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2)\nQoUQ&?w5ZfWt43");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iI0=Y,o86a4}");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZEu>!(AeGGYx\"ryq");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2)\nQoUQ&?w5ZfWt43");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0389512887079997
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = new Attribute("',z,Z:QMKJKKMA#");
      JRip jRip0 = new JRip();
      Attribute attribute1 = new Attribute("0m24L0'KFL X;nI9e9`", 2752);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("',z,Z:QMKJKKMA#", arrayList0, 0);
      Instances instances1 = new Instances(instances0);
      jRip_NominalAntd0.splitData(instances0, (-1.0), (-1364.389632493428));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringReader stringReader0 = new StringReader(" (");
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances2 = new Instances("The number of neighbours to use.", arrayList1, 0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.toString();
      RuleStats.partition(instances2, 4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances1, 2, (-699.18271271325));
      jRip_NominalAntd1.getCover();
      jRip_NominalAntd1.toString();
      jRip_NumericAntd0.toString();
      Attribute attribute2 = new Attribute("");
      Attribute.typeToString(attribute1);
      attribute1.setStringValue("i:daO9uR4,a");
      jRip_RipperRule0.toString(attribute0);
      jRip_RipperRule0.hasAntds();
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3469992135645263
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList1, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(11, stringArray0.length);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-119);
      intArray0[1] = (-3);
      intArray0[2] = (int) (byte) (-119);
      intArray0[3] = (int) (byte) (-119);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte) (-119), intArray0, (-446));
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      StringReader stringReader0 = new StringReader("Value of positio for copy (intrnal format): ");
      StringReader stringReader1 = new StringReader("_H;z>)<Vufj.1?F&Q");
      stringReader1.reset();
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(stringReader1, (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      decisionTable0.m_majority = (-78.0);
      arrayList0.add("!\"`ZoV/e&leyD0u");
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip jRip0 = new JRip();
      jRip0.checkErrorRateTipText();
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 5;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 2000;
      intArray0[6] = 5;
      intArray0[7] = 1;
      intArray0[8] = 1;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1.0), (double[]) null, intArray0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnaryOperator.identity();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet0.setSearchAlgorithm(searchAlgorithm0);
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) pipedInputStream0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("2I=u >)u", (-10));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      Predicate<Locale.LanguageRange> predicate1 = Predicate.isEqual((Object) jRip_NumericAntd1);
      predicate0.or(predicate1);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      
      predicate0.negate();
      BayesNet bayesNet10 = new BayesNet();
      bayesNet1.toXMLBIF03();
      JRip jRip1 = new JRip();
      String string0 = jRip0.toString();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("JRIP: No model built yet.", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("(YD3&X]q+Q %X4");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("(YD3&X]q+Q %X4", arrayList1, 649);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("(YD3&X]q+Q %X4", arrayList0, (-55));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      jRip_NominalAntd0.splitData(instances0, 0, (-1.0));
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      arrayList0.add("@data");
      StringReader stringReader0 = new StringReader("?G2L,~");
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(stringReader0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.566621028859323
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("a", protectedProperties0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("date");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "date");
      printWriter0.println((double) 2);
      printWriter0.println(false);
      printWriter0.println(false);
      printWriter0.print(false);
      Properties properties1 = new Properties();
      printWriter0.append((CharSequence) "date");
      printWriter0.print((float) 4);
      Object[] objectArray0 = new Object[5];
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Object object0 = jRip_NominalAntd0.copy();
      objectArray0[0] = object0;
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd2 = (JRip.NominalAntd)jRip_NominalAntd1.copy();
      assertEquals(Double.NaN, jRip_NominalAntd2.getAttrValue(), 0.01);
      
      objectArray0[1] = (Object) jRip_NominalAntd2;
      objectArray0[2] = (Object) properties0;
      objectArray0[3] = (Object) protectedProperties0;
      objectArray0[4] = (Object) "f,G-(8Sa@lr*ySi4";
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)printWriter0.printf("8J'7)\"liz#IOaUA::", objectArray0);
      protectedProperties0.store((Writer) mockPrintWriter1, "string");
      JRip.NominalAntd jRip_NominalAntd3 = jRip0.new NominalAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      Attribute.typeToString((-174));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(" => a=", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(arrayList1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayList0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0, locale_FilteringMode2);
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list1, locale_FilteringMode3);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.75;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3460.36;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3460.36, doubleArray0);
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("", arrayList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(3, jRip1.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip1.getDebug());
      assertTrue(boolean0);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "";
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.hasAntds();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      PrincipalComponents principalComponents2 = new PrincipalComponents();
      int[] intArray0 = new int[1];
      intArray0[0] = (-2799);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1.0), (double[]) null, intArray0, (-4635));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("0m24L0'KFL X;nI9e9`", 2752);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      StringReader stringReader0 = new StringReader(" (");
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 227);
      BufferedReader bufferedReader1 = new BufferedReader(stringReader0);
      bufferedReader1.mark(822);
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader1, 3);
      StringReader stringReader1 = new StringReader("");
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader1);
      StringReader stringReader2 = new StringReader("");
      BufferedReader bufferedReader4 = new BufferedReader(stringReader1);
      BufferedReader bufferedReader5 = new BufferedReader(bufferedReader4, 652);
      BufferedReader bufferedReader6 = new BufferedReader(bufferedReader3);
      StringReader stringReader3 = new StringReader("");
      BufferedReader bufferedReader7 = new BufferedReader(bufferedReader5);
      BufferedReader bufferedReader8 = new BufferedReader(bufferedReader7);
      StringReader stringReader4 = new StringReader("");
      StringReader stringReader5 = new StringReader("");
      BufferedReader bufferedReader9 = new BufferedReader(stringReader5, 2752);
      BufferedReader bufferedReader10 = new BufferedReader(bufferedReader9, 11);
      BufferedReader bufferedReader11 = new BufferedReader(stringReader3, 2752);
      bufferedReader11.read();
      BufferedReader bufferedReader12 = new BufferedReader(bufferedReader11);
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      JRip.NominalAntd jRip_NominalAntd2 = (JRip.NominalAntd)jRip_NominalAntd1.copy();
      assertEquals(0.0, jRip_NominalAntd2.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd2.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd2.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd2.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd2.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.019770647980608
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "K;";
      stringArray0[1] = "The seed used for randomizing the data.";
      stringArray0[2] = "The seed used for randomizing the data.";
      stringArray0[3] = "=4R%J;ep,Q-EEm Q5`r";
      stringArray0[4] = "The seed used for randomizing the data.";
      stringArray0[5] = "The seed used for randomizing the data.";
      stringArray0[6] = "The seed used for randomizing the data.";
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getRevision();
      Attribute attribute0 = new Attribute("vQ<k");
      jRip_RipperRule0.toString(attribute0);
      jRip0.setOptions(stringArray0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 5.3;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 3;
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 3;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 1;
      SparseInstance sparseInstance0 = new SparseInstance(5.3, doubleArray0, intArray0, (-17));
      jRip_RipperRule0.covers(sparseInstance0);
      jRip_NominalAntd0.copy();
      jRip_NominalAntd0.accu = (-2769.7815);
      intArray0[6] = 3;
      jRip_NominalAntd0.getAccu();
      attribute0.addStringValue("The seed used for randomizing the data.");
      jRip0.getFolds();
      jRip_RipperRule0.size();
      jRip0.foldsTipText();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L<!!-J=t#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(xI:K#UV_>tA*VW\"");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L<!!-J=t#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L<!!-J=t#");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("");
      Attribute.typeToString((-100));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(" <= NaN", string0);
      
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(arrayList1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) arrayList0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) arrayList0, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>(arrayList1);
      Environment environment0 = new Environment();
      environment0.getVariableNames();
      ArrayList<String> arrayList5 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) arrayList5, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList6, (Collection<String>) arrayList5, locale_FilteringMode1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute(".,M}ti", (-2282));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      boolean boolean0 = jRip0.getDebug();
      assertFalse(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L<!!-J=t#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(xI:K#UV_>tA*VW\"");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L<!!-J=t#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L<!!-J=t#");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "(xI:K#UV_>tA*VW\"";
      stringArray1[1] = "r<F0#";
      stringArray1[2] = "";
      stringArray1[3] = "',,Z:QMKJKKA#";
      stringArray1[4] = "";
      AbstractClassifier.runClassifier(jRip0, stringArray1);
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      
      stringArray0[0] = "F";
      stringArray0[1] = "',,Z:QMKJKKA#";
      jRip0.setOptions(stringArray0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("(q>( ?O^z[o{JU");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator1);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      Instances instances0 = bayesNet1.m_Instances;
      BayesNet bayesNet6 = new BayesNet();
      SearchAlgorithm searchAlgorithm0 = bayesNet6.getSearchAlgorithm();
      bayesNet0.setSearchAlgorithm(searchAlgorithm0);
      JRip jRip1 = new JRip();
      jRip0.listOptions();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("a", protectedProperties0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("date");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "date");
      printWriter0.format("", (Object[]) null);
      printWriter0.println((double) 2);
      printWriter0.println(false);
      mockPrintWriter0.print(true);
      Properties properties1 = new Properties();
      mockPrintWriter0.print("numeric");
      PrintWriter printWriter1 = mockPrintWriter0.append((CharSequence) "relational");
      printWriter1.print(true);
      printWriter1.print(1.0F);
      properties1.store((Writer) printWriter1, "f,G-(8Sa@lr*ySi4");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("real", arrayList0, 4);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      RuleStats.partition(instances0, 2);
      JRip jRip0 = new JRip();
      String string0 = jRip0.usePruningTipText();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("Whether pruning is performed.", string0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UnaryOperator.identity();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      environment0.getVariableNames();
      ArrayList<String> arrayList4 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode2);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) list0);
      Predicate<Locale.LanguageRange> predicate1 = predicate0.negate();
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("]", arrayList5, 13);
      RuleStats.partition(instances0, 13);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("]", list1, 2349);
      arrayList0.removeIf(predicate1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 2349, 2.147483647E9);
      System.setCurrentTimeMillis(0L);
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      int[] intArray0 = new int[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BiFunction<Object, Object, ClassOrder> biFunction0 = (BiFunction<Object, Object, ClassOrder>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      properties0.compute(inputMappedClassifier0, biFunction0);
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("X?LCxM+PoWR:%/rGY", protectedProperties0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip1 = new JRip();
      jRip1.setOptimizations(17);
      protectedProperties0.propertyNames();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (-3042.783908855962);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "',,Z:QMKJKKA#");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L<!!-J=t#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(xI:K#UV_>tA*VW\"");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L<!!-J=t#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L<!!-J=t#");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "F";
      stringArray0[1] = "',,Z:QMKJKKA#";
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.spliterator();
      decisionTable0.m_saveMemory = false;
      arrayList0.add("Distribute counts for missing values. Counts are distributed across other values in proportion to their frequency. Otherwise, missing is treated as a separate value.");
      Instances instances0 = decisionTable0.m_theInstances;
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopies(decisionTable0, 109);
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.m_saveMemory = false;
      Instances instances0 = decisionTable0.m_theInstances;
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopies(decisionTable0, 4);
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("Class complexity | order 0         ", list0, 4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(3, jRip1.getFolds());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(jRip1.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      StringReader stringReader0 = new StringReader(" (");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 227);
      BufferedReader bufferedReader1 = new BufferedReader(stringReader0);
      bufferedReader1.mark(822);
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader1, 3);
      StringReader stringReader1 = new StringReader("");
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader1);
      bufferedReader3.markSupported();
      BufferedReader bufferedReader4 = new BufferedReader(stringReader1);
      bufferedReader4.markSupported();
      BufferedReader bufferedReader5 = new BufferedReader(bufferedReader4, 652);
      BufferedReader bufferedReader6 = new BufferedReader(bufferedReader3);
      StringReader stringReader2 = new StringReader("");
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      bufferedReader5.read(charBuffer0);
      BufferedReader bufferedReader7 = new BufferedReader(bufferedReader5);
      BufferedReader bufferedReader8 = new BufferedReader(bufferedReader7);
      StringReader stringReader3 = new StringReader("");
      StringReader stringReader4 = new StringReader("");
      BufferedReader bufferedReader9 = new BufferedReader(stringReader4, 2775);
      BufferedReader bufferedReader10 = new BufferedReader(stringReader2, 2775);
      BufferedReader bufferedReader11 = new BufferedReader(bufferedReader10);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[1];
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UnaryOperator.identity();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet0.setSearchAlgorithm(searchAlgorithm0);
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      BayesNet bayesNet10 = new BayesNet();
      bayesNet7.measureEntropyScore();
      bayesNet3.getSearchAlgorithm();
      BayesNet bayesNet11 = new BayesNet();
      BayesNet bayesNet12 = new BayesNet();
      bayesNet7.measureBayesScore();
      BayesNet bayesNet13 = new BayesNet();
      BayesNet bayesNet14 = new BayesNet();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", protectedProperties0);
      JRip jRip0 = new JRip();
      protectedProperties0.propertyNames();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      attribute0.addStringValue("");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(18);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      
      String string0 = jRip0.foldsTipText();
      assertEquals(3, jRip0.getFolds());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "    Lowest Value = ";
      stringArray0[2] = "RH}?q";
      stringArray0[3] = "on both artificial data \"ab+bcd+defg\" and UCI datasets.  In all these ";
      stringArray0[4] = "?QJ35=V$m,lnb";
      stringArray0[5] = "5SB^";
      stringArray0[6] = "Eju'Y^x";
      stringArray0[7] = "V@_OuTrj#?F";
      stringArray0[8] = "): the dl = ";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.setSearchAlgorithm(searchAlgorithm0);
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      bayesNet3.measureExtraArcs();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNetEstimator bayesNetEstimator0 = bayesNet3.getEstimator();
      bayesNet3.setEstimator(bayesNetEstimator0);
      bayesNet2.measureEntropyScore();
      BayesNet bayesNet7 = new BayesNet();
      bayesNet1.measureAICScore();
      SearchAlgorithm searchAlgorithm1 = bayesNet6.getSearchAlgorithm();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      bayesNet1.measureBayesScore();
      BayesNet bayesNet10 = new BayesNet();
      BayesNet bayesNet11 = new BayesNet();
      BayesNet bayesNet12 = new BayesNet();
      BayesNet bayesNet13 = new BayesNet();
      bayesNet12.setSearchAlgorithm(searchAlgorithm1);
      JRip jRip1 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("weka.classifiers.functions.SimpleLogistic");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weka.classifiers.functions.SimpleLogistic not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      JRip jRip0 = new JRip();
      jRip0.setMinNo(1.0E75);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      int int0 = (-1207);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2325);
      doubleArray0[1] = (double) (-1207);
      IBk iBk0 = new IBk((-2325));
      int[] intArray0 = new int[1];
      intArray0[0] = (-2325);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(2, doubleArray0, intArray0, (-2325));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      SearchAlgorithm searchAlgorithm0 = new SearchAlgorithm();
      BayesNet bayesNet5 = new BayesNet();
      bayesNet3.setSearchAlgorithm(searchAlgorithm0);
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      BayesNet bayesNet10 = new BayesNet();
      bayesNet2.getEstimator();
      BayesNetEstimator bayesNetEstimator0 = bayesNet0.getEstimator();
      bayesNet0.setEstimator(bayesNetEstimator0);
      bayesNet3.measureEntropyScore();
      BayesNet bayesNet11 = new BayesNet();
      SearchAlgorithm searchAlgorithm1 = bayesNet11.getSearchAlgorithm();
      BayesNet bayesNet12 = new BayesNet();
      BayesNet bayesNet13 = new BayesNet();
      bayesNet1.measureBayesScore();
      BayesNet bayesNet14 = new BayesNet();
      BayesNet bayesNet15 = new BayesNet();
      bayesNet3.setSearchAlgorithm(searchAlgorithm1);
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("L6%8(VD BJpAI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // L6%8(VD BJpAI not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-783.4);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.getConsequent();
      jRip0.optimizationsTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(95);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleAttributes();
      Locale locale1 = Locale.GERMANY;
      jRip0.globalInfo();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(1088);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-119);
      intArray0[1] = (-3);
      intArray0[2] = (int) (byte) (-119);
      intArray0[3] = (int) (byte) (-119);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte) (-119), intArray0, (-446));
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.covers(binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String string0 = "Value of positio for copy (intrnal format): ";
      StringReader stringReader0 = new StringReader("Value of positio for copy (intrnal format): ");
      StringReader stringReader1 = new StringReader("_H;z>)<Vufj.1?F&Q");
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(stringReader1, (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-119);
      intArray0[1] = (-3);
      intArray0[2] = (int) (byte) (-119);
      intArray0[3] = (int) (byte) (-119);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte) (-119), intArray0, (-446));
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-119));
      jRip_RipperRule0.covers(binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String string0 = "Value of positio for copy (intrnal format): ";
      StringReader stringReader0 = new StringReader("Value of positio for copy (intrnal format): ");
      StringReader stringReader1 = new StringReader("_H;z>)<Vufj.1?F&Q");
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(stringReader1, (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-119);
      intArray0[1] = (-3);
      intArray0[2] = (int) (byte) (-119);
      intArray0[3] = (int) (byte) (-119);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte) (-119), intArray0, (-446));
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.covers(binarySparseInstance0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String string0 = "Value of position for copy (internal format): ";
      StringReader stringReader0 = new StringReader("Value of position for copy (internal format): ");
      StringReader stringReader1 = new StringReader("");
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(stringReader1, (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.4578498912420974
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("a", protectedProperties0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("date");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "date");
      mockPrintWriter0.print(true);
      printWriter0.write((-77));
      printWriter0.println(true);
      properties0.store((Writer) printWriter0, "");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("a", arrayList0, 2);
      Instances instances1 = new Instances(instances0);
      jRip_NominalAntd0.splitData(instances1, 0.0, 0.0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd1 = jRip1.new NominalAntd(attribute0);
      String string0 = jRip_NumericAntd1.getRevision();
      assertEquals("8118", string0);
      
      JRip.NumericAntd jRip_NumericAntd2 = (JRip.NumericAntd)jRip_NumericAntd1.copy();
      assertEquals(Double.NaN, jRip_NumericAntd2.getSplitPoint(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd2.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd2.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd2.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertNotSame(jRip_NumericAntd2, jRip_NumericAntd1);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd2.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd2.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(arrayList1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) arrayList0, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>(arrayList4);
      Environment environment0 = new Environment();
      environment0.removeVariable("(useAccuray? ");
      environment0.getVariableNames();
      ArrayList<String> arrayList5 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) arrayList5, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList0, locale_FilteringMode2);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("K6NQ;6", 21);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute("a", "a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("date");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "date");
      printWriter0.println((double) 2);
      printWriter0.println(false);
      mockPrintWriter0.print(true);
      mockPrintWriter0.println();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      PrintWriter printWriter1 = mockPrintWriter0.append((CharSequence) "relational");
      printWriter1.println((-736.98));
      printWriter1.print(true);
      printWriter1.print(1.0F);
      protectedProperties0.store((Writer) printWriter1, "f,G-(8Sa@lr*ySi4");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("real", arrayList0, 4);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      RuleStats.partition(instances0, 2);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 3, 0);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1238L));
      RuleStats.partition(instances0, 4);
      jRip0.getCheckErrorRate();
      Random.setNextRandom(2);
  }
}
