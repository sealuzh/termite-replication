/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 17:00:21 GMT 2020
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.145878966973923
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.stemString("00Nopj9PWsT5.{)rQ");
      lovinsStemmer0.stemString("00Nopj9PWsT5.{)rQ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stem("lux");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stem("AFF9IATIcON");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("85ex");
      lovinsStemmer1.stem("lux");
      String string0 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.stemString("ea.nul");
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer1.stemString("YN;{iUmQvH\"raEf%");
      String string2 = lovinsStemmer2.stemString("ea.nul");
      assertEquals("ea.nl", string2);
      
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stem("AFF9IATIcON");
      lovinsStemmer1.stemString("00Nopj9PWsT5.{)rQ");
      String string3 = lovinsStemmer0.stemString("ea.nl");
      assertEquals("ea.nl", string3);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.107555386991017
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      stringArray0[1] = "8034";
      stringArray0[2] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer2.toString();
      lovinsStemmer2.getRevision();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      lovinsStemmer2.getRevision();
      String string1 = lovinsStemmer4.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer5.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer5.stemString("us for alphab, cro refer, and creat a label when th ``author'' inform is mi. th field should not be confus with th key that appear in th cit command and at th begin of th datab entr.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getRevision();
      lovinsStemmer6.getRevision();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1379352825940852
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ister");
      lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("LCRdwh");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("doublert");
      lovinsStemmer0.stem("ister");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("iev");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[1] = "8034";
      stringArray1[2] = "invalis cv revis - not enough part separ by dot!";
      stringArray1[3] = "8034";
      LovinsStemmer.main(stringArray1);
      String[] stringArray2 = new String[1];
      stringArray2[0] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray2);
      assertEquals(1, stringArray2.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1284966095918003
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      stringArray0[4] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      stringArray0[5] = "us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.";
      stringArray0[6] = "us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString(".w%RKc");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("xn`gfdu{Vae J(\"/CX");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("%T^T7@w-D%{f1*");
      lovinsStemmer0.stem("erid");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("Z9eJ`gU]3<<ETgum");
      lovinsStemmer1.stem("xn`gfdu{Vae J(\"/CX");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3168058659029573
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.stemString("lovinsstemmerher");
      lovinsStemmer0.stemString("lovinsstemmerher");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string1);
      
      String string2 = lovinsStemmer0.stemString("B>5Fy4ZL5&0}/!");
      assertEquals("b>5fy4zl5&0}/!", string2);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2980608176545194
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("00Nopj9PWsT5.{)rQ");
      lovinsStemmer0.stemString("00Nopj9PWsT5.{)rQ");
      lovinsStemmer0.stem("00Nopj9PWsT5.{)rQ");
      lovinsStemmer0.stemString(")$%.,v:JYFOqBdD!T.k");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "uN(e23Lk=5fq~";
      stringArray0[2] = "00Nopj9PWsT5.{)rQ";
      stringArray0[3] = ")$%.,v:jyfoqbd!t.k";
      stringArray0[4] = "yQ_*G_`z|JNQVzLM(T";
      stringArray0[5] = "";
      stringArray0[6] = "00nopj9pwst5.{)rq";
      stringArray0[7] = "yQ_*G_`z|JNQVzLM(T";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("uN(e23Lk=5fq~");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stem("/9#'`");
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stem("ac,/'2F\"9 !0%");
      String string0 = lovinsStemmer1.globalInfo();
      lovinsStemmer4.stemString("lK-]&wK*d");
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1343663913255022
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ister");
      lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("sN!TVn=M.T vvy{");
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      lovinsStemmer1.stem("iev");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.globalInfo();
      lovinsStemmer4.globalInfo();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.116000723278595
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.";
      stringArray0[1] = "The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.";
      stringArray0[2] = "The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.";
      stringArray0[5] = "The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer1.stemString("The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.");
      assertEquals("th nam of a ser or ses of book. when cit an entir book, th th titl field giv it titl and an opt ser field giv th nam of a ser or mult-volum ses in which th book is publ.", string2);
      
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      String string3 = lovinsStemmer1.stemString("th nam of a ser or ses of book. when cit an entir book, th th titl field giv it titl and an opt ser field giv th nam of a ser or mult-volum ses in which th book is publ.");
      assertEquals("th nam of a ser or se of book. when cit an entir book, th th titl field giv it titl and an opt ser field giv th nam of a ser or mult-vol se in which th book is publ.", string3);
      
      lovinsStemmer1.getTechnicalInformation();
      String string4 = lovinsStemmer0.toString();
      assertFalse(string4.equals((Object)string0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3327571142945964
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.stemString("00Nopj9PWsT5.{)rQ");
      lovinsStemmer0.stemString("00Nopj9PWsT5.{)rQ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.stemString("es");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.toString();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer4.stemString(";qZ$WrR`.S+V");
      assertEquals(";qz$wr`.s+v", string0);
      
      lovinsStemmer4.stemString("0EC8)Tikz>NDn");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("R");
      lovinsStemmer4.stemString("00nopj9pwst5.{)rq");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string1 = lovinsStemmer5.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer1.stemString("");
      lovinsStemmer0.stemString("her");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      String string2 = lovinsStemmer5.stemString("00nopj9pwst5.{)rq");
      assertEquals("00nopj9pwst5.{)rq", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1509508366081709
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ister");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      String[] stringArray0 = new String[2];
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.stem("Can't find class called: ");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer1.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String string3 = lovinsStemmer1.stemString("can't find class called: ");
      assertEquals("can't find clas cal: ", string3);
      
      String string4 = lovinsStemmer1.stemString("W%cYC>'/Wvk\"W_|g");
      assertEquals("w%cyc>'/wvk\"w_|g", string4);
      
      String string5 = lovinsStemmer2.stemString("yz");
      assertEquals("yz", string5);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1656257355152841
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmeryz");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.yz";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "j\"RwPAbYGT%R";
      stringArray1[1] = "";
      stringArray1[2] = "+[EEF{Y6";
      stringArray1[3] = "wek.cor.stemmer.lovinsstemmerys";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("lux");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("Copyright information.");
      assertEquals("copyright inform.", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("ical");
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmerlud");
      assertEquals("wek.cor.stemmer.lovinsstemmerlus", string2);
      
      lovinsStemmer0.stemString("F[OHT");
      LovinsStemmer.main(stringArray1);
      String string3 = lovinsStemmer0.stem("=,yYeXYH1F_k/");
      assertEquals("=,yyexyh1f_k/", string3);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2174093909775443
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("-l");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("String should not finish with ");
      lovinsStemmer0.stemString("rbvad");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-l";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "-l";
      stringArray0[3] = "String should not finish with ";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "rbvas";
      LovinsStemmer.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.212841921733258
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ister");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("ionally");
      assertEquals("ion", string0);
      
      lovinsStemmer0.stemString("ister");
      lovinsStemmer0.stemString("ement");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("H$`?c\"Smkr|)Fz");
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("9J66]DPz=-q");
      assertEquals("9j66]dpz=-q", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1818182519285305
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("Ic:FEx!j57GghoWK");
      assertEquals("ic:fec!j57gghowk", string1);
      
      lovinsStemmer0.stemString("ys");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("dex");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stem("fJRY|.AbV&jMP]6Ah>s");
      assertEquals("fjry|.abv&jmp]6ah>", string2);
      
      lovinsStemmer1.stem("dex");
      lovinsStemmer0.toString();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string3 = lovinsStemmer2.getRevision();
      assertEquals("8034", string3);
      
      String string4 = lovinsStemmer0.stemString("rpt");
      assertEquals("rb", string4);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.137844650055747
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("linguyt");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "linguys";
      stringArray0[1] = "ngu";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("Machine Learning");
      assertEquals("mach learn", string1);
      
      lovinsStemmer0.stemString(")");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("fna\"{c");
      String string2 = lovinsStemmer0.stemString("ex");
      assertEquals("ex", string2);
      
      String string3 = lovinsStemmer0.stemString("eous");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string4 = lovinsStemmer1.stemString("Max index (doubles): ");
      assertEquals("mac indic (doubl): ", string4);
      
      lovinsStemmer1.toString();
      String string5 = lovinsStemmer1.stem("");
      assertFalse(string5.equals((Object)string3));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3370901072897503
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.toString();
      stringArray0[0] = "D";
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("gjflid");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("o<K.K_=p!& vRBb#s ");
      assertEquals("o<k.k_=p!& vrb#s ", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      String string1 = lovinsStemmer1.stemString(":[}GB8\"KHOLf");
      assertEquals(":[}gb8\"kholf", string1);
      
      lovinsStemmer2.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.toString();
      String string3 = lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0981146240991866
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ngu");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ngu";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Machine Learning");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ngu");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("+YuAr;]=!_N");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.149656298378745
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("YVSUd-yDJQC983lq14H");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "YVSUd-yDJQC983lq14H";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.stem("istr");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stem("\"LR?");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.globalInfo();
      lovinsStemmer3.stemString("umpt");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.globalInfo();
      lovinsStemmer2.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1056602152487016
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[8];
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("JFH(Xgp3ZiN");
      lovinsStemmer0.stemString("EDITOR");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("a+Tk<WQk_54AEAIH");
      lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.rud");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1520911152929774
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ister");
      assertEquals("ister", string0);
      
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "ister";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "ister";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("The month in which the work was published or, for an unpublished work, in which it was written. You should use the standard three-letter abbreviation, as described in Appendix B.1.3 of the LaTeX book.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer.main((String[]) null);
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1436456619374786
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.yz");
      lovinsStemmer0.stemString("HTTP");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.ys");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "HTTP";
      stringArray0[1] = "http";
      stringArray0[2] = "et";
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("H[D0n$'=&");
      lovinsStemmer0.stem("umpt");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("J4");
      lovinsStemmer0.getRevision();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1713735406948946
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer3.stemString("ngu");
      lovinsStemmer2.getRevision();
      lovinsStemmer0.stemString("8o|k,27U0(FzNTRgg");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.stemString("");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.getRevision();
      lovinsStemmer4.getRevision();
      String string1 = lovinsStemmer1.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1608535161691869
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ister");
      String string0 = lovinsStemmer0.stemString("invalid CVS revision - not enough parts separa#ed by dots!");
      assertEquals("invalis cv revis - not enough part separ#ed by dot!", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("2j`ZK/o`g,BqTjRV@^u");
      lovinsStemmer0.stemString("invalis cv revis - not enough part separ#ed by dot!");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      lovinsStemmer1.getRevision();
      String string3 = lovinsStemmer1.stem("hood");
      assertEquals("hood", string3);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2901405175281222
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("AB3)HS ");
      assertEquals("ab3)hs ", string0);
      
      lovinsStemmer0.stemString("ab3)hs ");
      lovinsStemmer0.stemString("uasend");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer1.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer.main((String[]) null);
      String string3 = lovinsStemmer0.stemString("tex");
      assertEquals("tic", string3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0952596043012184
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "OWNS=_{1c?,";
      stringArray0[2] = "OWNS=_{1c?,";
      stringArray0[3] = "OWNS=_{1c?,";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "weka.core.TechnicalInformation$Type";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("PROCEEDINGS");
      assertEquals("proceed", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("erid");
      assertEquals("eris", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1940113099285703
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "acious";
      stringArray0[1] = "owns=_{1c?,dex";
      lovinsStemmer0.stemString("GjF>{)#m_g+3");
      stringArray0[2] = "ions";
      lovinsStemmer0.globalInfo();
      stringArray0[3] = "owns=_{1c?,pex";
      stringArray0[4] = "";
      stringArray0[5] = "owns=_{1c?,erid";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "owns=_{1c?,pex";
      stringArray1[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[2] = "owns=_{1c?,pex";
      stringArray1[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("owns=_{1c?,pex");
      lovinsStemmer0.stemString("2z");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray1);
      assertEquals(7, stringArray1.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.128775686502136
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[8];
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("EDITOR");
      lovinsStemmer0.stemString("edit");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("Normalized again (doubles): ");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0987669681064178
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("TZ.}_>D>Hl_$t$cK@a");
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.stemString("8034");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("ental");
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9689389428517154
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("8034");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.stem("U[-m%yTAL");
      assertEquals("u[-m%ys", string1);
      
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stem("8034");
      lovinsStemmer3.getRevision();
      lovinsStemmer2.getRevision();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer1.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2122861853229316
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[0] = "acious";
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ucpend");
      lovinsStemmer0.stemString("ucpens");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("+_\"WXe;@Y");
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.020061291396514
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.yz");
      lovinsStemmer0.stem("60%n6");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("5IgI:\"+");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.toString();
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3485158334564216
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("B2%MmKx)+");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "'y4%1d5";
      stringArray0[3] = "b2%mmkx)+";
      stringArray0[4] = "b2%mmkx)+";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      stringArray0[6] = "B2%MmKx)+";
      stringArray0[7] = "'y4%1d5";
      stringArray0[8] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("`FYG M9U(/@");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("YGPP@,Sv-h/MDc2{K");
      assertEquals("ygp@,sv-h/mdc2{k", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.299248006067118
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("00Nopj9PWsT5.{)rQ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("uN(e23Lk=5fq~");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("lingumitpand");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer3.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1057693120558314
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.";
      stringArray0[1] = "The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.";
      stringArray0[2] = "The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.";
      stringArray0[5] = "The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("unpublished");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1881475735659695
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("linguyt");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("mit");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("lud");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1303005157968697
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("QhG");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "qhg";
      stringArray0[3] = "00Nopj9PWsT5.{)rQ";
      stringArray0[4] = "wC09qVs>.}o";
      stringArray0[5] = "qhg";
      stringArray0[6] = "qhg";
      stringArray0[7] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[8] = "00Nopj9PWsT5.{)rQ";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("linguert");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string0 = lovinsStemmer0.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1125817740998791
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Ic:FEx!j57GghoWK");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray1 = new String[5];
      stringArray1[0] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray1[1] = "-";
      stringArray1[2] = "Ic:FEx!j57GghoWK";
      stringArray1[3] = "Ic:FEx!j57GghoWK";
      stringArray1[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("r umlV");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("kN-");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("Induction of decision trees");
      assertEquals("induc of decis tree", string1);
      
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer1.stemString("sPK");
      assertEquals("spk", string3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.184761380080226
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[7];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("tex");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("o;XP|1+{$CULa{HLK9");
      lovinsStemmer0.stemString("00nopj9pwst5.{)rqlid");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("00nopj9pwst5.{)rqlid");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.13113419813566
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "8034";
      stringArray0[0] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("acies");
      lovinsStemmer0.stemString("arisations");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getRevision();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.2913538071217936
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("ymV2yzj}9");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[11];
      stringArray0[0] = "biex";
      stringArray0[1] = "ymV2yzj}9";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("uad");
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[1] = "uas";
      stringArray1[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[3] = "biex";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1299844492144984
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.yz");
      lovinsStemmer0.stemString("HTTP");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer1.stemString("uN(e23Lk=5fq~");
      assertEquals("un(e23lk=5fq~", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer1.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.yz");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.yz", string1);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("hpnyfmit");
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1783921365443883
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("wPhGfD!<Y");
      lovinsStemmer0.stemString("wPhGfD!<Y");
      lovinsStemmer0.stem("wphgfd!<y");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "wPhGfD!<Y";
      stringArray0[2] = "wPhGfD!<Y";
      stringArray0[3] = "wphgfd!<y";
      stringArray0[4] = "wphgfd!<y";
      lovinsStemmer0.stemString("00nopj9pwst5.{)rqlux");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("00nopj9pwst5.{)rqlux");
      String[] stringArray1 = new String[9];
      stringArray1[0] = "wphgfd!<y";
      stringArray1[1] = "00nopj9pwst5.{)rqluc";
      lovinsStemmer0.stem("wphgfd!<y");
      stringArray1[2] = "wphgfd!<y";
      stringArray1[3] = "00nopj9pwst5.{)rqluc";
      stringArray1[4] = "wphgfd!<y";
      stringArray1[5] = "wPhGfD!<Y";
      stringArray1[6] = "istics";
      stringArray1[7] = "wphgfd!<y";
      stringArray1[8] = "wPhGfD!<Y";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray1);
      assertEquals(9, stringArray1.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0754152908072816
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[8];
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[0] = "EDITOR";
      stringArray0[1] = "5IgI:\"+";
      lovinsStemmer0.stem("EDITOR");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("EDITOR");
      assertEquals("edit", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("end");
      assertEquals("ens", string2);
      
      lovinsStemmer0.stemString("iouslux");
      String string3 = lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1303005157968697
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.stemString("00Nopj9PWsT5.{)rQ");
      String string0 = lovinsStemmer0.stemString("00Nopj9PWsT5.{)rQ");
      assertEquals("00nopj9pwst5.{)rq", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stem("lux");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("o");
      String string1 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer2.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1915083782307891
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "wC09qVs>.}o";
      lovinsStemmer0.globalInfo();
      stringArray0[1] = "Copyright information.";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      stringArray0[3] = "Copyright information.";
      stringArray0[4] = "wC09qVs>.}o";
      stringArray0[5] = "Copyright information.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("address");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("0[[");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("book olet");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.135646283803581
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("gmrgher");
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1107969500003925
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[10];
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("Copyright information.");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("'");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("icist");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9526718761409796
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ul";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[7] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stem("wxcid");
      assertEquals("wxcis", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.7356907463699587
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("dex");
      assertEquals("dic", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1299844492144984
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("00Nopj9PWsT5.{)rQ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "00nopj9pwst5.{)rq";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("yQ_*G_`z|JNQVzLM(T");
      String[] stringArray1 = new String[8];
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray1);
      lovinsStemmer2.stemString("uasendvad");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("uasendond");
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.stemString("uasendons");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer3.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.296266262328554
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("biex");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "biec";
      stringArray0[1] = "biex";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "biec";
      stringArray0[4] = "biex";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("^s@Zi)Nr");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.180822249120112
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "wC09qVs>.}o";
      lovinsStemmer0.stemString("wC09qVs>.}o");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("un(e23lk=5fq~bex");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("[[VDG/u$5");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("un(e23lk=5fq~dex");
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1552274978182886
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ister");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ister";
      stringArray0[1] = "ister";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "invalid CVS revision - not enough parts separated by dots!";
      stringArray0[5] = "ister";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1651775427231696
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ied";
      stringArray0[1] = "Copyright information.";
      stringArray0[2] = "Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title field instead.";
      stringArray0[3] = "Copyright information.";
      stringArray0[5] = "ied";
      stringArray0[6] = "wC09qVs>.}o";
      stringArray0[7] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("8034vad");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("8034et");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title field instead.");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.119082754547337
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[0];
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("EDITOR");
      lovinsStemmer0.stemString("edit");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1271590686360198
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.yz");
      lovinsStemmer0.stemString("HTTP");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.stemString("uN(e23Lk=5fq~");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.yz");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("k4ruasend");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stem(";");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.13782061941698
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "uad";
      stringArray0[2] = "ROqv:U{2)lJ6(Z-+?";
      stringArray0[3] = "JQN*8?C3K";
      stringArray0[4] = "0Pl30*2.[rOM";
      stringArray0[5] = "CROSSREF";
      String string0 = lovinsStemmer0.stemString("ROqv:U{2)lJ6(Z-+?");
      assertEquals("roqv:u{2)lj6(z-+?", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1198917667746922
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("00Nopj9PWsT5.{)rQ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("yQ_*G_`z|JNQVzLM(T");
      String[] stringArray0 = new String[8];
      stringArray0[1] = "yQ_*G_`z|JNQVzLM(T";
      stringArray0[2] = "yQ_*G_`z|JNQVzLM(T";
      stringArray0[3] = "00Nopj9PWsT5.{)rQ";
      stringArray0[4] = " Vpt*on.";
      stringArray0[5] = "yq_*g_`z|jnqvzlm(t";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[7] = "yq_*g_`z|jnqvzlm(t";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer1.stemString("00Nopj9PWsT5.{)rQ");
      assertEquals("00nopj9pwst5.{)rq", string0);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String[] stringArray1 = new String[5];
      stringArray1[0] = "yQ_*G_`z|JNQVzLM(T";
      stringArray1[1] = "00Nopj9PWsT5.{)rQ";
      String string2 = lovinsStemmer1.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.mit");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.mis", string2);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9941814492125127
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
  }
}
