/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 22:57:29 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.963689039925415
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-88);
      byteArray0[0] = (byte)38;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)10;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      attribute0.indexOfValue("YCEjTWRNI5?");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "date");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".arff");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "integer");
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute1 = new Attribute("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", arrayList1);
      arrayList0.add(attribute0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      instances0.enumerateAttributes();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      assertEquals(10, discretize0.getBins());
      
      binarySparseInstance0.s_numericAfterDecimalPoint = 3;
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList1.add("string");
      discretize0.m_NumBins = 1;
      Discretize discretize1 = new Discretize("@end");
      discretize1.setOutputFormat();
      discretize0.batchFinished();
      assertEquals(1, discretize0.getBins());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("9irst-la", arrayList0, 2710);
      Attribute attribute0 = new Attribute("9irst-la");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Properties properties0 = new Properties();
      discretize0.m_UseEqualFrequency = true;
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      discretize0.m_FindNumBins = true;
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)40;
      arrayList0.add(attribute0);
      instances0.retainAll(arrayList0);
      instances0.enumerateAttributes();
      Discretize discretize1 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bin number optimization in conjunction with equal-frequency binning not implemented.
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-last", arrayList0, 2710);
      Instances.mergeInstances(instances0, instances0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      discretize0.setIgnoreClass(true);
      Locale locale0 = Locale.KOREAN;
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      instances0.enumerateInstances();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList3, locale_FilteringMode0);
      discretize0.m_MakeBinary = true;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      instances0.retainAll(set0);
      Attribute attribute0 = new Attribute("@data", arrayList1, 2710);
      arrayList0.add(attribute0);
      Locale locale1 = Locale.ENGLISH;
      locale1.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.989160958660353
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "real";
      stringArray0[1] = "real";
      stringArray0[2] = "real";
      stringArray0[3] = "real";
      stringArray0[4] = "real";
      stringArray0[5] = "real";
      stringArray0[6] = "real";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.m_IgnoreClass = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "real");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.m_DiscretizeCols = null;
      discretize0.globalInfo();
      discretize0.binsTipText();
      // Undeclared exception!
      try { 
        discretize0.getAttributeIndices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.527032306139808
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      Instances instances1 = new Instances("@relation", arrayList0, 62);
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      attribute0.indexOfValue("YCEjTWRvI5b");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      instances1.add((Instance) binarySparseInstance0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances1.add((Instance) binarySparseInstance0);
      arrayList1.remove((Object) attribute0);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute1 = new Attribute("y |$mg", arrayList1);
      arrayList0.add(attribute0);
      instances1.retainAll(arrayList0);
      instances0.enumerateAttributes();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      discretize0.m_NumBins = 3;
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList1.add("string");
      discretize0.m_FindNumBins = true;
      discretize0.m_NumBins = 100000;
      Discretize discretize1 = new Discretize("@end");
      discretize1.setOutputFormat();
      // Undeclared exception!
      discretize0.batchFinished();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0157642240853777
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-la", arrayList0, 2710);
      Attribute attribute0 = new Attribute("first-la");
      Locale locale0 = Locale.CANADA;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      protectedProperties0.clone();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Object object0 = new Object();
      Object object1 = new Object();
      properties0.replace((Object) protectedProperties2, object0, object1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Object object2 = new Object();
      properties0.put(object2, protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      arrayList0.add(attribute0);
      locale0.getUnicodeLocaleKeys();
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[4] = 0;
      intArray0[5] = 2710;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2710, intArray0, (-1073741850));
      String string0 = discretize0.getBinRangesString(0);
      assertEquals("All", string0);
      
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8234757337139063
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      Instances instances1 = new Instances("@relation", arrayList0, 62);
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      attribute0.indexOfValue("YCEjTWRvI5b");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      instances1.add((Instance) binarySparseInstance0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances1.add((Instance) binarySparseInstance0);
      arrayList1.remove((Object) attribute0);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute1 = new Attribute("string", 1);
      arrayList0.add(attribute0);
      instances1.retainAll(arrayList0);
      instances0.enumerateAttributes();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      discretize0.m_NumBins = 3;
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList1.add("string");
      discretize0.m_NumBins = 100028;
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      discretize0.setAttributeIndicesArray(intArray0);
      Discretize discretize1 = new Discretize("@end");
      discretize1.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5827678094225917
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      Instances instances1 = new Instances("@relation", arrayList0, 62);
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      instances1.add((Instance) binarySparseInstance0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances1.add((Instance) binarySparseInstance0);
      arrayList1.remove((Object) attribute0);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute1 = new Attribute("y |$mg", arrayList1);
      arrayList0.add(attribute0);
      instances1.retainAll(arrayList0);
      instances0.enumerateAttributes();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      discretize0.m_NumBins = 3;
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList1.add("string");
      discretize0.setAttributeIndices("y |$mg");
      discretize0.input((Instance) null);
      arrayList0.iterator();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0131152170534823
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-la", arrayList0, 2710);
      Attribute attribute0 = new Attribute("first-la");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.FRENCH;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      protectedProperties0.clone();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Object object0 = new Object();
      properties0.put(object0, protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      protectedProperties2.storeToXML((OutputStream) byteArrayOutputStream0, "X9FDwf093-;I?\"BuA");
      protectedProperties5.storeToXML((OutputStream) byteArrayOutputStream0, ">dL^',");
      arrayList0.add(attribute0);
      locale0.getUnicodeLocaleKeys();
      instances0.retainAll(arrayList1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      int[] intArray0 = new int[9];
      intArray0[4] = 0;
      intArray0[5] = 2710;
      intArray0[6] = 2710;
      discretize0.batchFinished();
      DenseInstance denseInstance0 = new DenseInstance(0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize("I406@Yd{on");
      discretize0.getInvertSelection();
      discretize0.m_UseEqualFrequency = true;
      discretize0.setMakeBinary(true);
      discretize0.makeBinaryTipText();
      assertTrue(discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(false);
      discretize0.findNumBinsTipText();
      discretize0.invertSelectionTipText();
      discretize0.getMakeBinary();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.495914456064185
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-last", arrayList0, 2710);
      Attribute attribute0 = new Attribute("first-last");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, locale_FilteringMode0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) set0;
      objectArray0[1] = (Object) arrayList1;
      objectArray0[2] = (Object) properties0;
      objectArray0[3] = (Object) list0;
      arrayList0.toArray(objectArray0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      protectedProperties3.storeToXML((OutputStream) byteArrayOutputStream0, "1s");
      Attribute attribute1 = new Attribute("e", list0, protectedProperties3);
      arrayList0.add(attribute1);
      locale0.getUnicodeLocaleKeys();
      discretize0.setBins((-1639));
      instances0.retainAll(list0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1257);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2975049169006727
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("@relation", arrayList0, 62);
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("numeric");
      arrayList2.add("=f`\"guAd3s");
      instances1.addAll((Collection<? extends Instance>) instances0);
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList2.remove((Object) attribute0);
      arrayList1.add(attribute0);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      Instances instances2 = new Instances("real", arrayList1, 62);
      instances1.retainAll(arrayList1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'Use bin numbers (eg BXofY) rather than ranges for for discretized attributes' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9251021032002043
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("numeric");
      instances0.addAll((Collection<? extends Instance>) instances0);
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList2.remove((Object) attribute0);
      Attribute attribute1 = new Attribute("y |$mg", arrayList2);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances("real", arrayList1, 62);
      instances0.retainAll(arrayList1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      arrayList0.add(attribute1);
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getUnicodeLocaleKeys();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.871249123551436
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("@relation", arrayList0, 62);
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("numeric");
      instances1.addAll((Collection<? extends Instance>) instances0);
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList2.remove((Object) attribute0);
      Attribute attribute1 = new Attribute("y |$mg", arrayList2);
      arrayList0.add(attribute0);
      Instances instances2 = new Instances("real", arrayList1, 62);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      discretize0.m_MakeBinary = true;
      discretize0.calculateCutPoints();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.setOutputFormat();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      discretize0.getCapabilities();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8213683792339523
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      System.setCurrentTimeMillis(0L);
      String string0 = "Set attribute selection mode. If false,only selected (numeric) attributes in the range will be discretized; if true,only non-selected attributes will be discretized.";
      Discretize discretize0 = new Discretize("Set attribute selection mode. If false,only selected (numeric) attributes in the range will be discretized; if true,only non-selected attributes will be discretized.");
      discretize0.m_MakeBinary = true;
      discretize0.setDesiredWeightOfInstancesPerInterval((-722.777831));
      discretize0.setDesiredWeightOfInstancesPerInterval(1.7976931348623157E308);
      discretize0.m_ClassIndex = 5736;
      discretize0.getRevision();
      discretize0.m_IgnoreClass = true;
      discretize0.useEqualFrequencyTipText();
      discretize0.getOptions();
      discretize0.getUseBinNumbers();
      discretize0.attributeIndicesTipText();
      AllFilter allFilter0 = new AllFilter();
      int int0 = (-576);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-576));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.985572789946291
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("]", arrayList0, 20);
      Instances instances1 = new Instances("@relation", arrayList0, 20);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "#RXq-`u&T.bG");
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) ather than ranges for for discretized attributes");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("numeric");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)111;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      instances1.add((Instance) binarySparseInstance0);
      SystemInUtil.addInputLine("SumSq   ");
      attribute0.copy("y |$mg");
      arrayList0.add(attribute0);
      instances1.retainAll(arrayList0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      discretize0.m_MakeBinary = true;
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList0.iterator();
      discretize0.batchFinished();
      discretize0.convertInstance(binarySparseInstance0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isNewBatch());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0596016129936894
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("@relation", arrayList0, 62);
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("numeric");
      arrayList2.add("=f`\"guAd3s");
      instances1.addAll((Collection<? extends Instance>) instances0);
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList2.remove((Object) attribute0);
      arrayList0.add(attribute0);
      Instances instances2 = new Instances("real", arrayList1, 62);
      instances1.retainAll(arrayList1);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      instances2.checkInstance(binarySparseInstance0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      int[] intArray0 = new int[1];
      intArray0[0] = 44;
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(0, intArray0, 2109);
      discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
      
      boolean boolean1 = discretize0.batchFinished();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.092474982073624
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-last", arrayList0, 2710);
      Attribute attribute0 = new Attribute("first-last");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, locale_FilteringMode0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      protectedProperties3.storeToXML((OutputStream) byteArrayOutputStream0, "1s");
      protectedProperties6.storeToXML((OutputStream) byteArrayOutputStream0, ">dL^',");
      Attribute attribute1 = new Attribute("u4", list0, protectedProperties0);
      arrayList0.add(attribute1);
      locale0.getUnicodeLocaleKeys();
      instances0.retainAll(arrayList1);
      discretize0.setInputFormat(instances0);
      arrayList0.iterator();
      discretize0.batchFinished();
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 4;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 2710;
      intArray0[6] = 2;
      intArray0[7] = 2710;
      intArray0[8] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3397.72299111056), intArray0, (-1073741824));
      discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-last", arrayList0, 2710);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale locale0 = Locale.KOREAN;
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) arrayList3, locale_FilteringMode0);
      discretize0.m_MakeBinary = true;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      instances0.retainAll(set0);
      Attribute attribute0 = new Attribute("@data", arrayList1, 2710);
      arrayList0.add(attribute0);
      Locale locale1 = Locale.ENGLISH;
      locale1.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      instances0.retainAll(instances1);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7995122062331164
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      discretize0.getFindNumBins();
      Attribute.typeToString(2);
      discretize0.setMakeBinary(true);
      discretize0.getOptions();
      Locale.getISOCountries();
      discretize0.getBinRangesString((-1908874351));
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8474856260031323
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      Instances instances1 = new Instances("@relation", arrayList0, 62);
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("numeric");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      instances1.add((Instance) binarySparseInstance0);
      instances1.addAll((Collection<? extends Instance>) instances0);
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances1.add((Instance) binarySparseInstance0);
      arrayList1.remove((Object) attribute0);
      Attribute attribute1 = new Attribute("y |$mg", arrayList1);
      arrayList0.add(attribute0);
      instances1.retainAll(arrayList0);
      instances0.enumerateAttributes();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      discretize0.m_MakeBinary = true;
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      arrayList0.add(attribute0);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[1][8];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(4211);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4211
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.091939703917201
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      Instances instances1 = new Instances("@relation", arrayList0, 62);
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("numeric");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      instances1.add((Instance) binarySparseInstance0);
      instances1.addAll((Collection<? extends Instance>) instances0);
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList1.add("@data");
      instances1.add((Instance) binarySparseInstance0);
      arrayList1.remove((Object) attribute0);
      Attribute attribute1 = new Attribute("y |$mg", arrayList1);
      arrayList0.add(attribute0);
      instances1.retainAll(arrayList0);
      instances0.enumerateAttributes();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      discretize0.batchFinished();
      int int0 = (-949);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1.0E-5), (int[]) null, 854);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3363946186934594
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", linkedList0, 20);
      arrayList0.add(attribute0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.");
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.or(predicate0);
      Predicate<String> predicate3 = predicate2.and(predicate0);
      linkedList0.removeIf(predicate3);
      Instances instances1 = new Instances(instances0);
      Attribute attribute1 = new Attribute("?gR:3C:}?hV");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("numeric");
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList1.sort(comparator0);
      arrayList1.add(attribute1);
      arrayList2.remove((Object) attribute1);
      instances1.deleteWithMissing(0);
      Attribute attribute2 = new Attribute("y |$mg", arrayList2);
      Attribute.typeToString(4);
      instances1.retainAll(arrayList1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(690);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2373));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2373
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.395709426084936
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", linkedList0, 20);
      arrayList0.add(attribute0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.");
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.or(predicate0);
      predicate1.and(predicate2);
      Predicate<String> predicate3 = predicate2.and(predicate0);
      linkedList0.removeIf(predicate3);
      Instances instances1 = new Instances(instances0);
      Attribute attribute1 = new Attribute("?gR:3C:}?hV");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("numeric");
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList1.sort(comparator0);
      arrayList1.add(attribute1);
      arrayList2.remove((Object) attribute1);
      instances1.deleteWithMissing(0);
      Attribute attribute2 = new Attribute("y |$mg", arrayList2);
      Attribute.typeToString(4);
      instances1.retainAll(arrayList1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(690);
      discretize0.getIgnoreClass();
      arrayList1.iterator();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.972284750343551
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("]", arrayList0, 20);
      Instances instances1 = new Instances("@relation", arrayList0, 20);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "#RXq-`u&T.bG");
      Attribute attribute0 = new Attribute("]", 20);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("numeric");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(20);
      byte[] byteArray0 = new byte[0];
      byteArrayOutputStream0.write(byteArray0);
      protectedProperties3.storeToXML((OutputStream) byteArrayOutputStream0, "@attribute");
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("6;'80/Jf^Mi+", arrayList1);
      arrayList0.add(attribute1);
      Instances instances2 = new Instances(instances1, 0);
      Discretize discretize0 = new Discretize("");
      assertFalse(discretize0.getMakeBinary());
      
      boolean boolean0 = discretize0.setInputFormat(instances1);
      discretize0.isOutputFormatDefined();
      boolean boolean1 = discretize0.batchFinished();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertTrue(boolean1 == boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7518685126965625
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("[WekaPackageManager] unable to find a version of package ");
      discretize0.setInvertSelection(true);
      discretize0.getInvertSelection();
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = discretize0.getInvertSelection();
      Range range0 = discretize0.m_DiscretizeCols;
      discretize0.m_DiscretizeCols = range0;
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)113;
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      
      discretize0.listOptions();
      String string1 = discretize0.getRevision();
      assertEquals("8964", string1);
      
      String string2 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string2);
      
      range0.getInvert();
      range0.setRanges("[WekaPackageManager] unable to find a version of package ");
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean1 = discretize0.getFindNumBins();
      assertFalse(boolean1 == boolean0);
      
      String string3 = discretize0.makeBinaryTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", string3);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.985572789946291
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-la", arrayList0, 2710);
      Attribute attribute0 = new Attribute("first-la");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.FRENCH;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Object object0 = new Object();
      properties0.put(object0, protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      protectedProperties5.storeToXML((OutputStream) byteArrayOutputStream0, ">dL^',");
      arrayList0.add(attribute0);
      locale0.getUnicodeLocaleKeys();
      instances0.retainAll(arrayList1);
      discretize0.setInputFormat(instances0);
      arrayList0.iterator();
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[4] = 0;
      intArray0[5] = 2710;
      intArray0[6] = 2710;
      Random.setNextRandom(2710);
      discretize0.findNumBins(0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2215523079930732
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      Instances instances1 = new Instances("@relation", arrayList0, 62);
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      attribute0.indexOfValue("YCEjTWRvI5b");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      instances1.add((Instance) binarySparseInstance0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList1.remove((Object) attribute0);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute1 = new Attribute("y |$mg", arrayList1);
      arrayList0.add(attribute0);
      instances1.retainAll(arrayList0);
      instances0.enumerateAttributes();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      discretize0.m_NumBins = 3;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      instances0.retainAll(arrayList0);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.711395681466945
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      Range range0 = new Range("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      range0.setInvert(true);
      discretize0.m_DiscretizeCols = range0;
      range0.getInvert();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(7, stringArray0.length);
      
      discretize0.getCapabilities();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.971558425985957
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("9irst-la", arrayList0, 2710);
      Attribute attribute0 = new Attribute("9irst-la");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)12;
      byteArrayOutputStream0.write(byteArray0);
      protectedProperties4.storeToXML((OutputStream) byteArrayOutputStream0, "H^#<6(|S-Pu");
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 2);
      discretize0.setInputFormat(instances1);
      discretize0.isOutputFormatDefined();
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-422));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -422
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0627299875428027
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-la", arrayList0, 2710);
      Attribute attribute0 = new Attribute("first-la");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.FRENCH;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      protectedProperties0.clone();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Object object0 = new Object();
      properties0.put(object0, protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      protectedProperties2.storeToXML((OutputStream) byteArrayOutputStream0, "X9FDwf093-;I?\"BuA");
      protectedProperties5.storeToXML((OutputStream) byteArrayOutputStream0, ">dL^',");
      arrayList0.add(attribute0);
      locale0.getUnicodeLocaleKeys();
      instances0.retainAll(arrayList1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      int[] intArray0 = new int[9];
      intArray0[4] = 0;
      intArray0[5] = 2710;
      intArray0[6] = 2710;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2710, intArray0, (-1073741850));
      discretize0.input(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-517));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -517
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.067648843266804
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-la", arrayList0, 2710);
      Attribute attribute0 = new Attribute("first-la");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      protectedProperties0.clone();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Object object0 = new Object();
      properties0.put(object0, protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      protectedProperties2.storeToXML((OutputStream) byteArrayOutputStream0, "X9FDwf093-;I?\"BuA");
      protectedProperties5.storeToXML((OutputStream) byteArrayOutputStream0, ">dL^',");
      arrayList0.add(attribute0);
      locale0.getUnicodeLocaleKeys();
      instances0.retainAll(arrayList1);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      
      ArrayList<InputStream> arrayList2 = new ArrayList<InputStream>();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      arrayList3.containsAll(set0);
      Filter.runFilter(discretize0, (String[]) null);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5063505529574353
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("9irst-la", arrayList0, 2710);
      Attribute attribute0 = new Attribute("9irst-la");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      discretize0.m_FindNumBins = true;
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      arrayList1.add("@attribute");
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      protectedProperties4.storeToXML((OutputStream) byteArrayOutputStream0, "H^#<6(|S-Pu");
      arrayList0.add(attribute0);
      instances0.retainAll(arrayList1);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 2);
      discretize0.setInputFormat(instances1);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '9irst-la' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      int int0 = (-18);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize("I406@Yd{on");
      discretize0.getInvertSelection();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = true;
      discretize0.setMakeBinary(true);
      discretize0.makeBinaryTipText();
      discretize0.findNumBinsTipText();
      discretize0.invertSelectionTipText();
      boolean boolean0 = discretize0.getMakeBinary();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize("Make resulting attribues binry.");
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-0.1);
      doubleArray1[1] = 1807.0;
      doubleArray1[2] = 1167.6173829878;
      doubleArray1[3] = 2198.8504;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-2393.8);
      doubleArray1[6] = (-1144.72938352);
      doubleArray1[7] = (-0.1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1807.0;
      doubleArray2[1] = (-2082.68879368);
      doubleArray2[2] = 1167.6173829878;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1807.0;
      doubleArray4[1] = 2198.8504;
      doubleArray4[2] = 295.53386380343767;
      doubleArray1[7] = 0.0;
      doubleArray4[4] = (-2393.8);
      doubleArray4[5] = (-1144.72938352);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-1144.72938352);
      doubleArray5[1] = 2198.8504;
      doubleArray5[2] = 2198.8504;
      doubleArray5[3] = (-2082.68879368);
      doubleArray5[4] = 1807.0;
      doubleArray5[5] = (-2393.8);
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 1167.6173829878;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 295.53386380343767;
      doubleArray6[1] = (-0.1);
      doubleArray6[2] = (-2082.68879368);
      doubleArray6[3] = 1167.6173829878;
      doubleArray6[4] = (-0.1);
      doubleArray6[5] = 2198.8504;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-last", arrayList0, 2710);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, locale_FilteringMode0);
      locale0.getUnicodeLocaleKeys();
      instances1.retainAll(set0);
      Attribute attribute0 = new Attribute(" != ", arrayList3, 2710);
      arrayList0.add(attribute0);
      Locale locale1 = Locale.ENGLISH;
      locale1.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      instances1.retainAll(arrayList1);
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-1700.91483565);
      doubleArray1[2] = (-1144.72938352);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1700.91483565);
      doubleArray2[1] = (-1700.91483565);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1714.43578776;
      doubleArray3[1] = 5.5;
      doubleArray3[2] = (-1700.91483565);
      doubleArray3[3] = (-1144.72938352);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = 5.5;
      doubleArray4[3] = 5.5;
      doubleArray4[4] = (-1144.72938352);
      doubleArray4[5] = 5.5;
      doubleArray4[6] = 5.5;
      doubleArray4[7] = (-1700.91483565);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-1144.72938352);
      doubleArray5[1] = (-1700.91483565);
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-3792));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3792
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setInvertSelection(true);
      Discretize discretize1 = new Discretize("");
      discretize0.setOutputFormat();
      discretize0.getAttributeIndices();
      discretize0.setInvertSelection(true);
      int int0 = (-1797);
      // Undeclared exception!
      try { 
        discretize1.findNumBins((-1499));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",_>=/tp";
      stringArray0[2] = "&";
      stringArray0[3] = "cHk!i.{{]PU||o)";
      stringArray0[4] = "bx: }";
      stringArray0[5] = "|kZVRH>";
      stringArray0[6] = "";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9516001508751386
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", linkedList0, 20);
      arrayList0.add(attribute0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.");
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.or(predicate0);
      predicate2.test(".WPC&\"Jd{Fu%yXB");
      Predicate<String> predicate3 = predicate2.and(predicate1);
      Predicate<String> predicate4 = predicate3.negate();
      linkedList0.removeIf(predicate4);
      Attribute attribute1 = new Attribute("?gR:3C:}?hV");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("numeric");
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList1.sort(comparator0);
      arrayList2.remove((Object) attribute1);
      instances0.deleteWithMissing(0);
      Attribute attribute2 = new Attribute("y |$mg", arrayList2);
      Attribute.typeToString(4);
      instances0.retainAll(arrayList1);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      arrayList1.iterator();
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      discretize0.batchFinished();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.428715181307695
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-la", arrayList0, 2710);
      Attribute attribute0 = new Attribute("first-la");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.FRENCH;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      protectedProperties5.storeToXML((OutputStream) byteArrayOutputStream0, "JT)(LZl.");
      arrayList0.add(attribute0);
      instances0.retainAll(arrayList0);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 91);
      discretize0.setInputFormat(instances0);
      try { 
        Filter.useFilter(instances1, discretize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'first-la' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5582463479552224
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      boolean boolean0 = true;
      discretize0.setIgnoreClass(false);
      discretize0.m_UseBinNumbers = true;
      int int0 = (-148);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-148));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = "U.T<t4Qe]Q";
      discretize0.setBins((-2145609310));
      discretize0.setAttributeIndices("U.T<t4Qe]Q");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      discretize0.m_ClassIndex = (-2145609310);
      discretize0.setDesiredWeightOfInstancesPerInterval(719.0);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SystemInUtil.addInputLine("SU$M<P1o");
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      SystemInUtil.addInputLine("SU$M<P1o");
      SystemInUtil.addInputLine("SU$M<P1o");
      Range range0 = new Range("SU$M<P1o");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "3#(+FR,u`";
      stringArray0[1] = "3#(+FR,u`";
      stringArray0[2] = "SU$M<P1o";
      discretize0.setUseBinNumbers(true);
      stringArray0[3] = "3#(+FR,u`";
      stringArray0[4] = "SU$M<P1o";
      discretize0.setOutputFormat();
      discretize0.useBinNumbersTipText();
      discretize0.getBinRangesString(1320);
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2680390451672863
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      discretize0.m_FindNumBins = true;
      discretize0.setOptions((String[]) null);
      discretize0.getUseBinNumbers();
      discretize0.setOptions((String[]) null);
      discretize0.getAttributeIndices();
      discretize0.findNumBinsTipText();
      discretize0.setBins(0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("j", arrayList0, 0);
      discretize0.getCapabilities(instances0);
      discretize0.listOptions();
      int[] intArray0 = new int[3];
      SystemInUtil.addInputLine("race");
      int int0 = 0;
      discretize0.getBins();
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        discretize0.findNumBins(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3080561808079394
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-la", arrayList0, 2710);
      Attribute attribute0 = new Attribute("first-la");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.FRENCH;
      Locale locale2 = Locale.KOREAN;
      Locale locale3 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) set0, locale_FilteringMode0);
      locale1.getUnicodeLocaleKeys();
      Attribute attribute1 = new Attribute("JEF.H.9^\"nj=|kqU3", list0, (-1064));
      arrayList0.add(attribute1);
      Locale locale4 = Locale.ENGLISH;
      locale4.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      Discretize discretize1 = new Discretize();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".bsi", 20);
      arrayList0.add(attribute0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.");
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.or(predicate0);
      Predicate<String> predicate3 = predicate2.and(predicate0);
      linkedList0.removeIf(predicate3);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      instances0.retainAll(arrayList0);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize("$wz");
      try { 
        discretize1.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at $wz
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom(89);
      Discretize discretize0 = new Discretize(">*F3*7-(vy?FEke]^");
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1370466234504795
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", arrayList0, 20);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("@relation", arrayList0, 62);
      Attribute attribute0 = new Attribute("?gR:3C:}?hV");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("numeric");
      MockRandom mockRandom0 = new MockRandom();
      instances1.randomize(mockRandom0);
      Comparator<Attribute> comparator0 = (Comparator<Attribute>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList1.sort(comparator0);
      instances1.deleteWithMissing(0);
      Attribute attribute1 = new Attribute("y |$mg", arrayList2);
      Attribute.typeToString((-2040109463));
      arrayList0.add(attribute0);
      Instances instances2 = new Instances(instances0, 44);
      instances1.retainAll(arrayList1);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) arrayList2, locale_FilteringMode0);
      Discretize discretize0 = new Discretize("Parameters first and/or toCopy out of range");
      Discretize discretize1 = new Discretize("z=)_[~h6bD~.Pv?]2|");
      String[] stringArray0 = discretize1.getOptions();
      Locale.getISOCountries();
      discretize1.setOptions(stringArray0);
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals(6, stringArray0.length);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseEqualFrequency());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.9103281932812037
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "m;>TNh.dS~{";
      stringArray0[1] = "'";
      stringArray0[2] = "y";
      stringArray0[3] = "Help requested";
      stringArray0[4] = "PTd-i^Z;Z-PWb";
      stringArray0[5] = "@relation";
      stringArray0[6] = ";:C5YFGqP%y&DL";
      stringArray0[7] = "`EZJRLY`&";
      Discretize.main(stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1863));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",_>=/tp";
      stringArray0[1] = "G](C>1;8}4Vf)";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-0.1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-0.1), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2143);
      binarySparseInstance1.setValue((-1455), (double) 44);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.toString();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      Discretize discretize0 = new Discretize(",_>=/tp");
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.7976931348623157E308), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(44);
      binarySparseInstance1.setValue(44, 0.0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      binarySparseInstance1.deleteAttributeAt(44);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2717);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.923966357794659
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("9irst-la", arrayList0, 2710);
      Attribute attribute0 = new Attribute("9irst-la");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      discretize0.m_FindNumBins = true;
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)12;
      byteArrayOutputStream0.write(byteArray0);
      protectedProperties4.storeToXML((OutputStream) byteArrayOutputStream0, "H^#<6(|S-Pu");
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 2);
      discretize0.setInputFormat(instances1);
      discretize0.isOutputFormatDefined();
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(discretize0.getFindNumBins());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize("I406@Yd{on");
      discretize0.getBins();
      System.setCurrentTimeMillis((-1431655765));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      SystemInUtil.addInputLine("c7TX\"5w[`,0>W@'.");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer(44);
      arrayList1.add(integer0);
      Integer integer1 = new Integer((-2979));
      Integer integer2 = new Integer(18);
      Integer integer3 = new Integer(18);
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      arrayList2.trimToSize();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      arrayList2.replaceAll(unaryOperator0);
      arrayList2.add(integer1);
      Integer integer4 = new Integer((-1789569704));
      Integer integer5 = new Integer(3860);
      arrayList1.add(integer5);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      ArrayList<InputStream> arrayList4 = new ArrayList<InputStream>();
      arrayList0.containsAll(arrayList2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "c7TX\"5w[`,0>W@'.";
      discretize0.setInvertSelection(true);
      stringArray0[1] = "c7TX\"5w[`,0>W@'.";
      stringArray0[2] = "c7TX\"5w[`,0>W@'.";
      stringArray0[3] = "c7TX\"5w[`,0>W@'.";
      stringArray0[4] = "c7TX\"5w[`,0>W@'.";
      stringArray0[5] = "c7TX\"5w[`,0>W@'.";
      stringArray0[6] = "c7TX\"5w[`,0>W@'.";
      stringArray0[7] = "c7TX\"5w[`,0>W@'.";
      stringArray0[8] = "c7TX\"5w[`,0>W@'.";
      Filter.runFilter(discretize0, stringArray0);
      Random.setNextRandom(3860);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      SystemInUtil.addInputLine("c7TX\"5w[`,0>W@'.");
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-2979));
      Integer integer1 = new Integer(18);
      Integer integer2 = new Integer(18);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      arrayList1.add(integer0);
      Integer integer3 = new Integer((-1789569704));
      Integer integer4 = new Integer(3860);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<InputStream> arrayList3 = new ArrayList<InputStream>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "c7TX\"5w[`,0>W@'.";
      stringArray0[1] = "c7TX\"5w[`,0>W@'.";
      stringArray0[2] = "c7TX\"5w[`,0>W@'.";
      stringArray0[3] = "c7TX\"5w[`,0>W@'.";
      stringArray0[4] = "c7TX\"5w[`,0>W@'.";
      stringArray0[5] = "c7TX\"5w[`,0>W@'.";
      stringArray0[6] = "c7TX\"5w[`,0>W@'.";
      stringArray0[7] = "c7TX\"5w[`,0>W@'.";
      stringArray0[8] = "c7TX\"5w[`,0>W@'.";
      Filter.runFilter(discretize0, stringArray0);
      Random.setNextRandom(3860);
      discretize0.attributeIndicesTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      discretize0.getFindNumBins();
      Attribute.typeToString(2);
      discretize0.getOptions();
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.0644731584570595
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (-1.7976931348623157E308);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.7976931348623157E308), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(44);
      binarySparseInstance1.setValue(44, (-1.7976931348623157E308));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      binarySparseInstance1.deleteAttributeAt(44);
      Discretize discretize0 = new Discretize("SU=MO1o");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SU=MO1o";
      stringArray0[1] = "SU=MO1o";
      stringArray0[2] = "SU=MO1o";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getCapabilities();
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (-1144.72938352);
      doubleArray0[4] = (-1144.72938352);
      doubleArray0[6] = (-1144.72938352);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1144.72938352), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2150);
      binarySparseInstance1.setValue(2150, 0.8074823505648276);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.toString();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      Discretize discretize0 = new Discretize("");
      discretize0.getBinRangesString(354);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.123168425011997
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("]", arrayList0, 20);
      Instances instances1 = new Instances("@relation", arrayList0, 20);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "#RXq-`u&T.bG");
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) ather than ranges for for discretized attributes");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".bsi");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)111;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      instances1.add((Instance) binarySparseInstance0);
      SystemInUtil.addInputLine("SumSq   ");
      attribute0.copy(".bsi");
      arrayList0.add(attribute0);
      instances1.retainAll(arrayList0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      discretize0.m_MakeBinary = true;
      ArrayList<String> arrayList2 = new ArrayList<String>();
      discretize0.batchFinished();
      discretize0.input(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      arrayList0.add((Locale.LanguageRange) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.containsAll(linkedList0);
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = Locale.CHINA;
      locale1.clone();
      Locale locale2 = locale1.stripExtensions();
      locale2.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode0);
      Discretize discretize0 = new Discretize("");
      discretize0.getOptions();
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale locale0 = Locale.FRENCH;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      protectedProperties0.clone();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Object object0 = new Object();
      properties0.put(object0, protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      SystemInUtil.addInputLine("c7TX\"5w[`,0>W@'.");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-2979));
      Integer integer1 = new Integer(18);
      Integer integer2 = new Integer(18);
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      arrayList2.add(integer0);
      Integer integer3 = new Integer((-1789569704));
      Integer integer4 = new Integer(3845);
      discretize0.getMakeBinary();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      ArrayList<InputStream> arrayList4 = new ArrayList<InputStream>();
      arrayList0.containsAll(arrayList2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "c7TX\"5w[`,0>W@'.";
      stringArray0[1] = "c7TX\"5w[`,0>W@'.";
      stringArray0[2] = "c7TX\"5w[`,0>W@'.";
      stringArray0[3] = "c7TX\"5w[`,0>W@'.";
      stringArray0[4] = "c7TX\"5w[`,0>W@'.";
      stringArray0[6] = stringArray0[5];
      stringArray0[7] = "c7TX\"5w[`,0>W@'.";
      stringArray0[8] = "c7TX\"5w[`,0>W@'.";
      Filter.runFilter(discretize0, stringArray0);
      Random.setNextRandom(3845);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      SystemInUtil.addInputLine("c7TX\"5w[`,0>W@'.");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer(44);
      arrayList1.add(integer0);
      Integer integer1 = new Integer((-2979));
      Integer integer2 = new Integer(18);
      Integer integer3 = new Integer(18);
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      arrayList2.trimToSize();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      arrayList2.replaceAll(unaryOperator0);
      arrayList2.add(integer1);
      Integer integer4 = new Integer((-1789569704));
      Integer integer5 = new Integer(3860);
      arrayList1.add(integer5);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      ArrayList<InputStream> arrayList4 = new ArrayList<InputStream>();
      arrayList0.containsAll(arrayList1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "c7TX\"5w[`,0>W@'.";
      stringArray0[1] = "c7TX\"5w[`,0>W@'.";
      stringArray0[2] = "c7TX\"5w[`,0>W@'.";
      stringArray0[3] = "c7TX\"5w[`,0>W@'.";
      stringArray0[4] = "c7TX\"5w[`,0>W@'.";
      stringArray0[5] = "c7TX\"5w[`,0>W@'.";
      stringArray0[6] = "c7TX\"5w[`,0>W@'.";
      stringArray0[7] = "c7TX\"5w[`,0>W@'.";
      stringArray0[8] = "c7TX\"5w[`,0>W@'.";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SystemInUtil.addInputLine("_0/&85");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[8];
      intArray0[0] = (-882);
      intArray0[1] = 2147483645;
      intArray0[2] = (-3812);
      intArray0[3] = (-2004318069);
      intArray0[4] = (-2967);
      intArray0[5] = 206;
      intArray0[6] = 3;
      intArray0[7] = (-2080374781);
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.setAttributeIndices("_0/&85");
      discretize0.getCutPoints(4);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.8221303550794707
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Discretize discretize0 = new Discretize("\u0005'TS@3|[2");
      discretize0.m_FindNumBins = false;
      discretize0.setUseEqualFrequency(false);
      Filter filter0 = Filter.makeCopy(discretize0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\u0005'TS@3|[2";
      stringArray0[1] = "\u0005'TS@3|[2";
      stringArray0[2] = "\u0005'TS@3|[2";
      stringArray0[3] = "\u0005'TS@3|[2";
      stringArray0[4] = "\u0005'TS@3|[2";
      stringArray0[5] = "\u0005'TS@3|[2";
      stringArray0[6] = "\u0005'TS@3|[2";
      Filter.runFilter(filter0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("TtHJ3PP~}GBg");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "TtHJ3PP~}GBg");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      arrayList1.removeIf(predicate2);
      Attribute attribute0 = new Attribute("Y:^[.<h99Kt", arrayList1);
      Attribute.typeToString(2);
      Discretize discretize0 = new Discretize("TtHJ3PP~}GBg");
      discretize0.getAttributeIndices();
      Random.setNextRandom(0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      arrayList0.removeAll(linkedList0);
      arrayList0.add((Locale.LanguageRange) null);
      arrayList0.add((Locale.LanguageRange) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.iterator();
      linkedList1.removeAll(arrayList0);
      arrayList0.containsAll(linkedList1);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      locale1.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1, locale_FilteringMode0);
      Discretize discretize0 = new Discretize("real");
      String[] stringArray0 = discretize0.getOptions();
      String[] stringArray1 = Locale.getISOLanguages();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SystemInUtil.addInputLine("SlqM3c?qKES*}.OO[q");
      Discretize discretize0 = new Discretize();
      SystemInUtil.addInputLine("SlqM3c?qKES*}.OO[q");
      Range range0 = new Range("'B");
      SystemInUtil.addInputLine(",_>=/tp");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "'B";
      stringArray0[1] = ",_>=/tp";
      stringArray0[2] = ",_>=/tp";
      stringArray0[3] = "z=)_[~h6bD~.Pv?]2|";
      stringArray0[4] = "`~ML";
      stringArray0[5] = "SlqM3c?qKES*}.OO[q";
      stringArray0[7] = "~gdS)";
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer(1);
      arrayList1.add(integer0);
      arrayList0.containsAll(arrayList1);
      Random.setNextRandom(1);
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[6];
      intArray0[0] = (-3950);
      intArray0[1] = 1307;
      intArray0[2] = (-115);
      intArray0[3] = 2312;
      intArray0[4] = (-1879048189);
      intArray0[5] = 98;
      discretize0.setAttributeIndicesArray(intArray0);
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      SystemInUtil.addInputLine("c7TX\"5w[`,0>W@'.");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-2979));
      Integer integer1 = new Integer(18);
      Integer integer2 = new Integer(18);
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      arrayList2.add(integer0);
      Integer integer3 = new Integer((-1789569704));
      Integer integer4 = new Integer(3860);
      arrayList1.add(integer4);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      ArrayList<InputStream> arrayList4 = new ArrayList<InputStream>();
      arrayList0.containsAll(arrayList2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "c7TX\"5w[`,0>W@'.";
      stringArray0[1] = "c7TX\"5w[`,0>W@'.";
      stringArray0[2] = "c7TX\"5w[`,0>W@'.";
      stringArray0[3] = "c7TX\"5w[`,0>W@'.";
      stringArray0[4] = "c7TX\"5w[`,0>W@'.";
      stringArray0[5] = "c7TX\"5w[`,0>W@'.";
      stringArray0[6] = "c7TX\"5w[`,0>W@'.";
      stringArray0[7] = "c7TX\"5w[`,0>W@'.";
      stringArray0[8] = "c7TX\"5w[`,0>W@'.";
      Filter.runFilter(discretize0, stringArray0);
      Random.setNextRandom(3860);
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(0);
      discretize0.setFindNumBins(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("SU$M<P1o", arrayList0, 62);
      Attribute attribute0 = new Attribute(".bsi");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("\tUse bin numbers rather than rangsfor discret+zHd attributes.", arrayList1);
      Attribute.typeToString(2);
      arrayList0.add(attribute1);
      Instances instances1 = new Instances(instances0, 44);
      arrayList0.add(attribute1);
      instances1.toString();
      instances1.retainAll(arrayList0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      arrayList0.removeAll(linkedList0);
      arrayList0.add((Locale.LanguageRange) null);
      arrayList0.add((Locale.LanguageRange) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.iterator();
      linkedList1.removeAll(arrayList0);
      arrayList0.containsAll(linkedList1);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.GERMAN;
      Locale locale2 = locale1.stripExtensions();
      Set<String> set0 = locale2.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<InputStream> arrayList1 = new ArrayList<InputStream>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.containsAll(set0);
      String[] stringArray0 = null;
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      arrayList0.add((Locale.LanguageRange) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.containsAll(linkedList0);
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = Locale.CHINA;
      Locale locale2 = locale1.stripExtensions();
      Set<String> set0 = locale2.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Discretize discretize0 = new Discretize(",_>=/tp");
      discretize0.m_UseEqualFrequency = true;
      String[] stringArray0 = discretize0.getOptions();
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      arrayList0.removeAll(linkedList0);
      arrayList0.add((Locale.LanguageRange) null);
      arrayList0.add((Locale.LanguageRange) null);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.iterator();
      linkedList1.removeAll(arrayList0);
      arrayList0.containsAll(linkedList1);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.GERMAN;
      Locale locale2 = locale1.stripExtensions();
      locale2.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1, locale_FilteringMode0);
      Discretize discretize0 = new Discretize("real");
      discretize0.getOptions();
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
  }
}
