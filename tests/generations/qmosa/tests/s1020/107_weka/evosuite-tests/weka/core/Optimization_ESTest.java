/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 22:22:21 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0421918905228877
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      Optimization.DynamicIntArray optimization_DynamicIntArray1 = (Optimization.DynamicIntArray)optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray1.addElement((-624));
      Random.setNextRandom(0);
      optimization_DynamicIntArray1.addElement(0);
      Random.setNextRandom(602);
      optimization_DynamicIntArray0.copy();
      Random.setNextRandom(0);
      optimization_DynamicIntArray1.addElement(0);
      Random.setNextRandom(2);
      Random.setNextRandom(602);
      Random.setNextRandom(260);
      Random.setNextRandom(106);
      Random.setNextRandom(0);
      Random.setNextRandom(2);
      Random.setNextRandom((-2503));
      Random.setNextRandom(7);
      Random.setNextRandom(7);
      Random.setNextRandom(0);
      Random.setNextRandom((-2503));
      Random.setNextRandom(106);
      Random.setNextRandom(3285);
      Random.setNextRandom(12);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(39, 200);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale locale0 = Locale.JAPAN;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      linkedList0.spliterator();
      linkedList0.add((Locale.LanguageRange) null);
      Locale.setDefault(locale0);
      Locale locale1 = Locale.forLanguageTag("#nh%m+9~:WWd&g_F@");
      locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList2.add((Locale.LanguageRange) null);
      locale0.getDisplayLanguage(locale1);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList2.toArray();
      Locale locale2 = Locale.forLanguageTag("Japanese");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale2.getDisplayCountry(locale1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList1, locale_FilteringMode0);
      locale1.hasExtensions();
      locale0.getDisplayLanguage(locale2);
      Locale locale3 = Locale.CANADA_FRENCH;
      NumberFormat.getIntegerInstance(locale1);
      weka.core.matrix.Matrix matrix1 = matrix0.times((-1192.6069899));
      Locale.getISOCountries();
      double[] doubleArray0 = new double[0];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray1 = Optimization.solveTriangle(matrix1, doubleArray0, true, booleanArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0000000000000004;
      doubleArray0[1] = 1.0000000000000002;
      doubleArray0[2] = 3756.0;
      doubleArray0[3] = 1.0000000000000009;
      doubleArray0[4] = (-2710.408798222309);
      doubleArray0[5] = 1315.2616696635237;
      doubleArray0[6] = (-1320.091202373412);
      doubleArray0[7] = 458.9;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, true, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6382324527900964
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      Optimization.DynamicIntArray optimization_DynamicIntArray1 = (Optimization.DynamicIntArray)optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(0);
      Random.setNextRandom(0);
      Random.setNextRandom(602);
      Optimization.DynamicIntArray optimization_DynamicIntArray2 = (Optimization.DynamicIntArray)optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray2.addElement(3572);
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(4, 91);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 91;
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = (double) 0;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      optimization_DynamicIntArray1.addElement(0);
      optimization_DynamicIntArray1.removeAllElements();
      assertEquals(1, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(5, 5);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.toArray();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      matrix0.times((-1909.7316543215647));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]M7gE&|-V");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 5;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title gield instead.");
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"3AS9nGoiMo{\",) [");
      mockPrintStream0.checkError();
      mockPrintStream0.print(5);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title gield instead.");
      mockPrintStream0.append((CharSequence) charBuffer0, 5, 10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[3] = '|';
      charArray0[2] = 'y';
      charArray0[3] = 'r';
      charArray0[4] = 'a';
      charArray0[5] = 'r';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.print(3446L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title gield instead.");
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(1, 1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      double[] doubleArray0 = new double[1];
      Locale locale0 = Locale.JAPAN;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      locale0.getUnicodeLocaleKeys();
      locale0.getDisplayLanguage(locale0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = new Locale("\u65E5\u672C\u8A9E", "\u65E5\u672C\u8A9E");
      LinkedList<String> linkedList3 = new LinkedList<String>();
      locale0.hasExtensions();
      locale0.clone();
      locale1.getDisplayLanguage(locale0);
      Locale locale2 = Locale.GERMANY;
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      List<Locale> list0 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      linkedList6.pollFirst();
      linkedList2.add((Locale.LanguageRange) null);
      linkedList2.iterator();
      linkedList4.add((Locale.LanguageRange) null);
      linkedList5.poll();
      linkedList2.add((Locale.LanguageRange) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      NumberFormat.getIntegerInstance(locale1);
      Locale.getISOCountries();
      linkedList0.add((Locale.LanguageRange) null);
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, (boolean[]) null);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(1, 1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      double[] doubleArray0 = new double[1];
      boolean[] booleanArray0 = new boolean[7];
      MockPrintStream mockPrintStream0 = new MockPrintStream("Title of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field instead.");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintStream0.print((-16));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.println((double) (-16));
      mockPrintWriter0.print('8');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) linkedList0;
      mockPrintStream0.append((CharSequence) "Title of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field instead.");
      mockPrintWriter0.write("Title of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field instead.", 1, 1);
      objectArray0[3] = (Object) matrix0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      MockPrintStream mockPrintStream1 = new MockPrintStream("Title of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field instead.");
      mockPrintWriter0.print((long) '8');
      objectArray0[1] = (Object) false;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      assertEquals(1, doubleArray1.length);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale0 = Locale.CHINESE;
      Locale.setDefault(locale_Category0, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.spliterator();
      linkedList0.add((Locale.LanguageRange) null);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale locale1 = Locale.FRANCE;
      locale0.getDisplayLanguage(locale1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale2 = Locale.forLanguageTag("");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      locale0.hasExtensions();
      Locale locale3 = new Locale("", "z#^u7Rf");
      locale2.getDisplayLanguage(locale3);
      Locale locale4 = Locale.CANADA_FRENCH;
      NumberFormat.getIntegerInstance(locale4);
      Locale.getISOCountries();
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-3567.71286725);
      doubleArray1[1] = (-966.0);
      doubleArray1[2] = (-966.0);
      doubleArray1[3] = (-966.0);
      doubleArray1[4] = 1286.49409;
      doubleArray1[5] = (-550.129);
      doubleArray1[6] = (-52.0);
      doubleArray1[7] = (-52.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-52.0);
      doubleArray2[1] = (-550.129);
      doubleArray2[2] = (-550.129);
      doubleArray2[3] = (-966.0);
      doubleArray2[4] = 1203.9;
      doubleArray2[5] = (-52.0);
      doubleArray2[6] = (-966.0);
      doubleArray2[7] = (-3567.71286725);
      doubleArray2[8] = (-3567.71286725);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-966.0);
      doubleArray3[1] = (-550.129);
      doubleArray3[2] = (-550.129);
      doubleArray3[3] = (-550.129);
      doubleArray3[4] = (-3567.71286725);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 1203.9;
      doubleArray5[1] = (-966.0);
      doubleArray5[2] = (-108.18466021);
      doubleArray5[3] = 1286.49409;
      doubleArray5[4] = (-3567.71286725);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (-3567.71286725);
      doubleArray6[1] = 1.0000000018626451;
      doubleArray6[2] = 1203.9;
      doubleArray6[3] = (-52.0);
      doubleArray6[4] = (-3567.71286725);
      doubleArray6[5] = (-550.129);
      doubleArray6[6] = 1203.9;
      doubleArray6[7] = (-108.18466021);
      doubleArray6[8] = 1286.49409;
      doubleArray0[5] = doubleArray6;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 1397, (-2164));
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray5, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(1, 1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      weka.core.matrix.Matrix.identity(1, 1);
      matrix0.times(1113.1);
      doubleArray0[1] = (double) 1;
      boolean boolean0 = true;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(1);
      optimization_DynamicIntArray0.removeAllElements();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.elementAt(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Optimization$DynamicIntArray", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(1, 1);
      double[] doubleArray0 = new double[2];
      weka.core.matrix.Matrix matrix1 = weka.core.matrix.Matrix.identity(1, 1);
      matrix1.times(1113.1);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(6393);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(6393);
      optimization_DynamicIntArray0.addElement(6393);
      optimization_DynamicIntArray0.removeElementAt(0);
      Random.setNextRandom(0);
      Random.setNextRandom(118);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2293495789482387
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      Optimization.DynamicIntArray optimization_DynamicIntArray1 = (Optimization.DynamicIntArray)optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(0);
      Random.setNextRandom(0);
      optimization_DynamicIntArray1.addElement(0);
      Random.setNextRandom(602);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.copy();
      Random.setNextRandom(0);
      optimization_DynamicIntArray1.addElement(0);
      Random.setNextRandom(2);
      Random.setNextRandom(602);
      Random.setNextRandom(260);
      Random.setNextRandom(106);
      Random.setNextRandom(0);
      Random.setNextRandom(2);
      Random.setNextRandom((-2503));
      Random.setNextRandom(7);
      Random.setNextRandom(7);
      Random.setNextRandom(0);
      Random.setNextRandom((-2503));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(1180);
      int int0 = optimization_DynamicIntArray0.size();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(1, 1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      double[] doubleArray0 = new double[1];
      boolean[] booleanArray0 = new boolean[7];
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ttle of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field intead.");
      mockPrintStream0.print((-16));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.println((double) (-16));
      char[] charArray0 = new char[7];
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      Object[] objectArray0 = new Object[13];
      mockPrintWriter0.print(5.0);
      charArray0[2] = '<';
      objectArray0[1] = (Object) mockPrintWriter0;
      charArray0[6] = '<';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.print('<');
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) 0.0;
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintStream0.append((CharSequence) "Ttle of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field intead.");
      mockPrintWriter0.write("Ttle of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field intead.", 1, 1);
      Object object0 = new Object();
      objectArray1[4] = object0;
      MockPrintStream mockPrintStream1 = new MockPrintStream("Ttle of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field intead.");
      objectArray1[1] = (Object) true;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      mockPrintStream0.println((double) '<');
      objectArray1[2] = (Object) false;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(1, 1);
      double[] doubleArray0 = new double[1];
      boolean[] booleanArray0 = new boolean[7];
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ttle of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field intead.");
      mockPrintStream0.print((-16));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.println((double) (-16));
      char[] charArray0 = new char[7];
      charArray0[2] = '<';
      charArray0[3] = '<';
      mockPrintStream0.checkError();
      charArray0[4] = '<';
      charArray0[5] = '<';
      Object[] objectArray0 = new Object[13];
      mockPrintWriter0.print(5.0);
      charArray0[2] = '<';
      objectArray0[1] = (Object) mockPrintWriter0;
      charArray0[6] = '<';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.print('<');
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) 0.0;
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintStream0.append((CharSequence) "Ttle of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field intead.");
      mockPrintWriter0.write("Ttle of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field intead.", 1, 1);
      Object object0 = new Object();
      objectArray1[4] = object0;
      MockPrintStream mockPrintStream1 = new MockPrintStream("Ttle of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field intead.");
      objectArray1[1] = (Object) true;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      mockPrintStream0.println((double) '<');
      objectArray1[2] = (Object) false;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(1, 1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      double[] doubleArray0 = new double[1];
      boolean[] booleanArray0 = new boolean[7];
      MockPrintStream mockPrintStream0 = new MockPrintStream("Title of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field instead.");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintStream0.print((-16));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.println((double) (-16));
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      charArray0[6] = '8';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.print('8');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintStream0.append((CharSequence) "Title of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field instead.");
      mockPrintWriter0.write("Title of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field instead.", 1, 1);
      Object object0 = new Object();
      objectArray0[4] = object0;
      MockPrintStream mockPrintStream1 = new MockPrintStream("Title of a book, part of which is being cited. See th: LaTeX book for how to type titles. For book entries, use the title field instead.");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      mockPrintStream0.println((-1437.2953940748));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[2] = (Object) true;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(1233, 1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale locale0 = Locale.JAPAN;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale locale1 = Locale.FRENCH;
      locale0.getDisplayLanguage(locale1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale locale2 = Locale.forLanguageTag("Academic Press");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      locale2.hasExtensions();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) linkedList3, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode3);
      Locale.lookup(linkedList2, list2);
      locale0.getDisplayLanguage(locale1);
      Locale locale3 = Locale.GERMANY;
      Locale locale4 = Locale.TRADITIONAL_CHINESE;
      NumberFormat.getIntegerInstance(locale4);
      matrix0.times((double) 1233);
      Locale.getISOCountries();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1233;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      assertEquals(2, doubleArray1.length);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      int int0 = 25;
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(25);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(25);
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
