/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 23:53:23 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Y2TgIk)");
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("S-h/9W_vU2uH>B=(/&P", 1);
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(4378L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1119L);
      System.setCurrentTimeMillis(534L);
      Services.testSMTP("|CH?W@1>nowSt{|", (-412));
      System.setCurrentTimeMillis((-412));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1026L));
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 2417);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      System.setCurrentTimeMillis((-102L));
      System.setCurrentTimeMillis(2417);
      System.setCurrentTimeMillis((-424L));
      System.setCurrentTimeMillis((-1026L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(2417);
      System.setCurrentTimeMillis(0L);
      Services.testPOP3("", 2417);
      System.setCurrentTimeMillis((-412));
      System.setCurrentTimeMillis((-102L));
      System.setCurrentTimeMillis(58L);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6545216946179053
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      assertEquals(0, services_HTTP_Result0.page_weight);
      
      services_HTTP_Result0.page_weight = 0;
      services_HTTP_Result0.Error = "";
      services_HTTP_Result0.Error = "";
      services_HTTP_Result0.toString();
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      services_SIMPLE_Result0.time = (long) 0;
      Services services0 = new Services();
      String string0 = services_SIMPLE_Result0.Error;
      services_SIMPLE_Result0.toString();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://+RES}=}J:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "iilf`ITt`r_2Nns?");
      String string1 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string1);
      
      services_SIMPLE_Result0.reset();
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("+RES}=}J", 0);
      assertEquals(17, services_HTTP_Result1.page_weight);
      assertTrue(services_HTTP_Result1.works);
      
      String string2 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string2);
      
      Services.testHTTPS("http", 18);
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTP("", (-1));
      Services.SIMPLE_Result services_SIMPLE_Result1 = new Services.SIMPLE_Result();
      Services.HTTP_Result services_HTTP_Result3 = Services.testHTTP("", 0);
      String string3 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string3);
      
      services_HTTP_Result3.works = false;
      services_SIMPLE_Result0.reset();
      assertEquals(0L, services_SIMPLE_Result0.time);
      
      services_HTTP_Result2.reset();
      Services.HTTP_Result services_HTTP_Result4 = Services.testHTTP("", 0);
      assertEquals(0, services_HTTP_Result4.code);
      assertFalse(services_HTTP_Result4.works);
      assertEquals(0L, services_HTTP_Result4.time);
      assertEquals(0, services_HTTP_Result4.page_weight);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3502705392332346
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://s\"2M+6nm(}qz:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "`");
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("s\"2M+6nm(}qz", 0);
      assertEquals(2, services_HTTP_Result0.page_weight);
      assertTrue(services_HTTP_Result0.works);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS((String) null, 704);
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0, services_HTTP_Result0.code);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP(":-p8^xMJ~{VN?QG", (-2899));
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP((String) null, 2412);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP(".{^-}7$HCdlC8", 0);
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("$sG+(S\"YO@sO6", (-1675));
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("LF-}HVES:", (-2089));
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0, services_HTTP_Result0.code);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_HTTP_Result0.page_weight = (-2095);
      services_HTTP_Result0.Error = "";
      services_HTTP_Result0.Error = "";
      services_HTTP_Result0.toString();
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      assertEquals(0L, services_SIMPLE_Result0.time);
      
      services_HTTP_Result0.toString();
      services_SIMPLE_Result0.time = (long) (-2095);
      Services services0 = new Services();
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.toString();
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testPOP3("+RES}=}J", 0);
      Services.SIMPLE_Result services_SIMPLE_Result2 = Services.testSMTP("**Erreur d'E/S** (java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@75a6cc16) **", (-2095));
      services_SIMPLE_Result1.Error = "";
      services_SIMPLE_Result2.reset();
      services_SIMPLE_Result2.reset();
      assertFalse(services_SIMPLE_Result2.works);
  }
}
