/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 17:18:57 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2240978714293633
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      StringReader stringReader0 = new StringReader("%%%");
      jSTerm0.isEval();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      function1.apply(stringBuffer0);
      function1.apply("|s:`7m8?e'");
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      function3.compose((Function<? super String, ?>) function1);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function4 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function3);
      function4.compose((Function<? super JSSubstitution, ?>) function3);
      UnaryOperator.identity();
      function4.compose((Function<? super String, ?>) function3);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function5 = unaryOperator3.compose((Function<? super Object, ? extends Integer>) function3);
      function3.andThen((Function<? super Integer, ? extends String>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function5);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis(3137L);
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8614296307365077
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm1.print();
      jSTerm0.toStr();
      StringReader stringReader0 = new StringReader("%%%");
      jSTerm0.isEval();
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader1.skip((-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer1.lowerCaseMode(true);
      stringReader0.mark(58);
      streamTokenizer0.ordinaryChars(1669, (-1734));
      streamTokenizer1.eolIsSignificant(true);
      stringReader1.skip(0L);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9325479235482863
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      String string0 = null;
      jSTerm0.addElement((Object) null);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.clone();
      UnaryOperator.identity();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1);
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9269145052641095
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.clone();
      jSTerm0.addAll((Collection) jSTerm1);
      JSJshopVars.dot = 2147483645;
      jSTerm1.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.462463753935913
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lis");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.call();
      streamTokenizer0.ordinaryChars((-1), (-1));
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.equals(jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader("_)AW(4v)");
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm5 = jSTerm2.cloneT();
      stringReader1.close();
      jSTerm4.standarizerPredicateForm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.sort(comparator0);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm5.matches(jSTerm2, jSSubstitution0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      JSTerm jSTerm6 = (JSTerm)jSTerm5.clone();
      jSTerm1.matches(jSTerm3);
      JSTerm jSTerm7 = new JSTerm();
      jSTerm3.call();
      JSTerm jSTerm8 = jSTerm6.cloneT();
      jSTerm4.isGround();
      // Undeclared exception!
      try { 
        jSTerm8.addAll((-145), (Collection) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -145
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3988123371064316
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lis");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.call();
      streamTokenizer0.ordinaryChars((-1), (-1));
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.equals(jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader("_)AW(4v)");
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm5 = jSTerm2.cloneT();
      stringReader1.close();
      jSTerm4.standarizerPredicateForm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.sort(comparator0);
      jSTerm5.matches(jSTerm2, jSSubstitution0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      JSTerm jSTerm6 = (JSTerm)jSTerm5.clone();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm3);
      jSTerm6.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm7 = new JSTerm();
      Object object0 = new Object();
      jSTerm7.remove(object0);
      jSTerm3.call();
      JSTerm jSTerm8 = jSTerm6.cloneT();
      // Undeclared exception!
      try { 
        jSTerm8.addAll((-145), (Collection) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -145
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4013567455599407
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lis");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.close();
      streamTokenizer0.ordinaryChars((-1), (-1));
      jSTerm0.stream();
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.equals(jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.clear();
      StringReader stringReader1 = new StringReader("nTB");
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm4.replaceAll(unaryOperator0);
      jSTerm4.clonePF();
      JSTerm jSTerm5 = jSTerm4.cloneT();
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm5);
      jSTerm1.call();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm4, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.32671299687589
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lis");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.call();
      streamTokenizer0.ordinaryChars((-1), (-1));
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("_)AW(4v)");
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm4 = jSTerm0.cloneT();
      stringReader1.close();
      jSTerm3.standarizerPredicateForm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm3.sort(comparator0);
      jSTerm4.matches(jSTerm2, jSSubstitution0);
      jSTerm4.clone();
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm5.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.424869463226009
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.call();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      jSTerm2.clone();
      jSTerm0.makeVariable();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm0.equals(jSTerm3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals(1, jSTerm0.size());
      
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSTerm");
      JSTerm jSTerm5 = jSTerm4.standardizerTerm();
      JSTerm jSTerm6 = jSTerm3.cloneT();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm6.sort(comparator0);
      JSTerm jSTerm7 = new JSTerm();
      jSTerm3.matches(jSTerm7, jSSubstitution0);
      jSTerm5.matches(jSTerm1);
      boolean boolean0 = jSTerm4.isVariable();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5021574648268117
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lis");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.call();
      streamTokenizer0.ordinaryChars((-1), (-1));
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.equals(jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader("_)AW(4v)");
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm5 = jSTerm2.cloneT();
      stringReader1.close();
      jSTerm4.standarizerPredicateForm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.sort(comparator0);
      jSTerm5.matches(jSTerm2, jSSubstitution0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      JSTerm jSTerm6 = (JSTerm)jSTerm5.clone();
      jSTerm1.matches(jSTerm3);
      JSTerm jSTerm7 = new JSTerm();
      jSTerm3.call();
      jSTerm6.cloneT();
      // Undeclared exception!
      try { 
        jSTerm7.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1321922400878854
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lis");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.close();
      streamTokenizer0.ordinaryChars((-1884247309), (-1884247309));
      jSTerm0.stream();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm0);
      StringReader stringReader1 = new StringReader("jfzh");
      jSTerm0.makeEval(true);
      stringReader1.mark(4116);
      stringReader1.reset();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.standardizerTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.parseNumbers();
      try { 
        stringReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.375928993365654
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lis");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.call();
      streamTokenizer0.ordinaryChars((-1), (-1));
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.equals(jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader("_)AW(4v)");
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm5 = jSTerm2.cloneT();
      stringReader1.close();
      jSTerm4.standarizerPredicateForm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.sort(comparator0);
      jSTerm5.matches(jSTerm2, jSSubstitution0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      JSTerm jSTerm6 = (JSTerm)jSTerm5.clone();
      jSTerm6.equals(jSTerm4);
      jSTerm1.matches(jSTerm3);
      JSTerm jSTerm7 = new JSTerm();
      jSTerm3.call();
      JSTerm jSTerm8 = jSTerm6.cloneT();
      // Undeclared exception!
      try { 
        jSTerm8.addAll((-145), (Collection) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -145
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9254081650860662
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSSubstitution1.add((Object) jSTerm1);
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4529759331863557
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.makeVariable();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      StringReader stringReader0 = new StringReader("}bTgsv*");
      jSTerm1.standardizerTerm();
      long long0 = 2076L;
      System.setCurrentTimeMillis(2076L);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm3, (JSSubstitution) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.397936543864098
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.makeVariable();
      jSTerm0.cloneT();
      jSTerm1.equals(jSTerm2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution2);
      StringReader stringReader0 = new StringReader("}bTgsv*");
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution4);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "(jfZh=sl@Dnk !MI";
      StringReader stringReader0 = new StringReader("(jfZh=sl@Dnk !MI");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(2894);
      boolean boolean0 = true;
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 2894);
      streamTokenizer1.ordinaryChar(2894);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.containsAll(jSSubstitution1);
      jSTerm0.clone();
      int int0 = (-2519);
      JSJshopVars.apostrophe = (-2519);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.482678224743739
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pe(y):k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.cloneT();
      JSJshopVars.greaterT = 41;
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.toStr();
      jSTerm2.matches(jSTerm0);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-3643L));
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      Object object0 = jSTerm3.clone();
      // Undeclared exception!
      try { 
        jSTerm4.insertElementAt(object0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4 > 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3748675339382945
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.makeVariable();
      jSTerm0.cloneT();
      jSTerm1.equals(jSTerm2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.print();
      StringReader stringReader0 = new StringReader("}bTgsv*");
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis(2076L);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9924470451737488
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isGround();
      jSTerm1.clear();
      jSTerm1.isGround();
      StringReader stringReader0 = new StringReader("(jVZh=sl@Dnk Mx*I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      StringReader stringReader1 = new StringReader("");
      stringReader1.reset();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(jSTerm0);
      JSJshopVars.backquote = 3820;
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(jfI~Zh=sl@Dnk!MI");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      boolean boolean0 = true;
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1146299722481476
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.removeAllElements();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm2);
      JSJshopVars.coma = (-1033);
      jSTerm0.equals(jSTerm1);
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9137984994637556
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.call();
      UnaryOperator.identity();
      Integer integer0 = new Integer((-32));
      jSTerm0.addElement(jSTerm2);
      //  // Unstable assertion: assertTrue(jSTerm2.isFunction());
      
      jSTerm0.print();
      UnaryOperator.identity();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      //  // Unstable assertion: assertEquals(56, stringBuffer0.length());
      //  // Unstable assertion: assertNotSame(jSTerm0, jSTerm1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4735023850806486
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("equal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      int int0 = (-32);
      jSTerm0.lastElement();
      jSPredicateForm0.removeElement("%%%");
      jSPredicateForm0.add((Object) jSTerm0);
      JSJshopVars.lessT = (-32);
      jSTerm0.containsAll(jSPredicateForm0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.makeEval(true);
      jSTerm1.isGround();
      jSTerm0.print();
      streamTokenizer0.whitespaceChars(1211, (-2));
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = (JSTerm)jSTerm2.clone();
      // Undeclared exception!
      try { 
        jSTerm3.insertElementAt(stringReader0, 1211);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1211 > 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.666332585328325
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      jSTerm0.makeEval(true);
      jSTerm0.clone();
      StringReader stringReader0 = new StringReader("%%%");
      jSTerm0.isEval();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Integer, ?>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9269145052641095
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.call();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSJshopVars.percent = 1264;
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, JSTerm> function3 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super Object, ? extends JSTerm>) function3);
      Function<Object, Integer> function4 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      function2.compose((Function<? super JSSubstitution, ?>) function6);
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function4);
      jSTerm0.setSize(1264);
      Integer integer0 = new Integer(3822);
      unaryOperator0.apply(integer0);
      Function<Object, Integer> function7 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function7);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      jSTerm0.clone();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.771623955677366
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.call();
      Integer integer0 = new Integer(1264);
      jSTerm0.addElement(integer0);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.clone();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function3 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Integer integer1 = new Integer(62);
      Integer integer2 = new Integer(62);
      unaryOperator2.apply(integer2);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ? extends Integer>) function3);
      System.setCurrentTimeMillis(1264);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      jSTerm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6958654450774613
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(24);
      jSTerm1.sort((Comparator) null);
      jSSubstitution0.removeElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.removeAll(jSTerm0);
      jSSubstitution0.removeElement((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSSubstitution6.fail());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement((Object) null);
      jSTerm0.clone();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      JSJshopVars.flagLevel = 2;
      jSTerm0.addElement(object0);
      jSTerm0.addElement(object0);
      jSTerm0.clone();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(jfZh=<sl@Dnk MI");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(jfZh=sl@Dnk !MI");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      boolean boolean0 = true;
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, JSTerm> function3 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function<Object, JSTerm> function4 = unaryOperator2.andThen((Function<? super Object, ? extends JSTerm>) function3);
      unaryOperator2.apply(function1);
      Function.identity();
      function1.compose((Function<? super String, ?>) function2);
      Function<Object, Integer> function5 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function6).apply(any());
      function2.compose((Function<? super Integer, ?>) function4);
      Function<Object, Object> function7 = unaryOperator1.compose((Function<? super Object, ?>) function1);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function6);
      function8.compose((Function<? super Integer, ?>) function7);
      Function.identity();
      function8.apply(unaryOperator1);
      function8.apply(function4);
      function1.compose((Function<? super String, ?>) function4);
      function2.compose((Function<? super JSSubstitution, ?>) function8);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      function2.compose((Function<? super String, ?>) unaryOperator3);
      Function<Object, Integer> function9 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      function9.andThen((Function<? super Integer, ? extends String>) function8);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function9);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isFunction());
      
      System.setCurrentTimeMillis(3137L);
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6924088629865501
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm0.isGround();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function4 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function5 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function4);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function6 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function7 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function5);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function8 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function9 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function8);
      function6.andThen((Function<? super Integer, ? extends String>) function9);
      Function<Object, String> function10 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function11 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function10);
      Function.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function11);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function11);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function12 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      function12.apply(function4);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function12);
      Function<Object, Integer> function13 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      function13.andThen((Function<? super Integer, ? extends Integer>) function6);
      function7.compose((Function<? super String, ?>) function2);
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1321922400878854
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, JSTerm> function3 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function<Object, JSTerm> function4 = unaryOperator2.andThen((Function<? super Object, ? extends JSTerm>) function3);
      unaryOperator2.apply(function1);
      Function.identity();
      function1.compose((Function<? super String, ?>) function2);
      Function<Object, Integer> function5 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function6).apply(any());
      function2.compose((Function<? super Integer, ?>) function4);
      Function<Object, Object> function7 = unaryOperator1.compose((Function<? super Object, ?>) function1);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function6);
      function8.compose((Function<? super Integer, ?>) function7);
      Function.identity();
      function8.apply(unaryOperator1);
      function8.apply(function4);
      function1.compose((Function<? super String, ?>) function4);
      function2.compose((Function<? super JSSubstitution, ?>) function8);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      function2.compose((Function<? super String, ?>) unaryOperator3);
      Function<Object, Integer> function9 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      function9.andThen((Function<? super Integer, ? extends String>) function8);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function9);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis(3137L);
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      int int0 = 1264;
      Integer integer0 = new Integer(1264);
      jSTerm0.addElement(integer0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.261519653692775
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.containsAll(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.clone();
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSTerm0.retainAll(jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals(28, stringBuffer0.length());
      
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = jSTerm0.cloneT();
      assertTrue(jSTerm4.isFunction());
      
      boolean boolean0 = jSTerm3.isFunction();
      assertTrue(boolean0);
      
      JSTerm jSTerm5 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm5.isFunction());
      assertFalse(jSTerm5.isEval());
      assertNotSame(jSTerm5, jSTerm2);
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7721393884375285
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm2;
      objectArray0[2] = (Object) stringReader0;
      objectArray0[3] = (Object) stringReader0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      jSTerm2.toArray(objectArray0);
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      
      stringReader0.ready();
      System.setCurrentTimeMillis((-1));
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(boolean0);
      assertEquals(1, jSTerm0.size());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<");
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'k';
      charArray0[2] = 'K';
      stringReader0.read(charArray0);
      stringReader0.read();
      stringReader0.skip((-931L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      jSSubstitution0.stream();
      jSSubstitution0.iterator();
      StringReader stringReader1 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      StringReader stringReader2 = new StringReader("jP[TuSh0>");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.slashSlashComments(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0425921041755934
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.containsAll(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.clone();
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSTerm2.toStr();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.cloneT();
      assertTrue(jSTerm0.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0233517742082823
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.addElement(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isGround();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.isGround();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function4 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) function4;
      jSSubstitution0.toArray(objectArray0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.standardizerTerm();
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement(jSTerm1);
      jSTerm0.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeElement(jSTerm0);
      jSSubstitution0.iterator();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.addElement(jSTerm0);
      JSTerm jSTerm3 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1935496040981333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Cbb[;2-K+830A");
      StringReader stringReader1 = new StringReader("?Znd`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.whitespaceChars((-2202), (-3));
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0989972655448166
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.iterator();
      jSTerm0.addElement(jSSubstitution1);
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ? extends JSSubstitution>) function0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply("list ");
      UnaryOperator<JSSubstitution> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super JSSubstitution, ?>) unaryOperator0);
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isVariable());
      
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      assertNotNull(jSSubstitution3);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution3.sort(comparator0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm3.isFunction());
      
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm4);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.963908339870089
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.matches(jSTerm0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.matches(jSTerm0);
      JSTerm jSTerm4 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm4, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.771623955677366
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6350915928128098
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm0.isGround();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function4 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function5 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function4);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function6 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function7 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function8 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function5);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function10 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function9);
      function6.andThen((Function<? super Integer, ? extends String>) function10);
      Function<Object, String> function11 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function12 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function11);
      Function.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function12);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function12);
      Function<Object, Integer> function13 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      function8.apply("4q>W(");
      function7.apply(function4);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function13);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      function8.compose((Function<? super String, ?>) function2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      jSTerm0.ensureCapacity((-4));
      streamTokenizer0.slashSlashComments(true);
      stringReader0.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("i#wVc:i#g;e0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.resetSyntax();
      StringReader stringReader1 = new StringReader("tAp<KO(L\"0");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = '<';
      charArray0[2] = 'e';
      charArray0[3] = 'o';
      charArray0[4] = 'u';
      charArray0[5] = '%';
      charArray0[6] = '';
      charArray0[7] = '\\';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("");
      char[] charArray1 = new char[1];
      charArray1[0] = '_';
      stringReader2.read(charArray1);
      StringReader stringReader3 = new StringReader("tAp<KO(L\"0");
      stringReader1.read();
      stringReader0.ready();
      streamTokenizer1.lowerCaseMode(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElement(jSSubstitution0);
      Integer integer0 = new Integer((-543));
      jSTerm0.sort((Comparator) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.removeElement("R#~;>,(ul");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Integer integer1 = new Integer(195);
      jSSubstitution0.removeElement("R#~;>,(ul");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      JSJshopVars.whiteSpace = 2;
      StringReader stringReader0 = new StringReader(";_1^illbaI..;y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(126, (-2595));
      stringReader0.mark(33);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.7519304663146794
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(jSTerm0);
      jSTerm0.addAll((Collection) jSTerm0);
      UnaryOperator.identity();
      Function.identity();
      StringReader stringReader0 = new StringReader("%fz(5BgoRa[#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(")");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.trimToSize();
      streamTokenizer0.whitespaceChars((-1146), (-1146));
      jSTerm0.parseList(streamTokenizer0);
      assertEquals(0, jSTerm0.capacity());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.2700181519104905
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      jSSubstitution0.sort((Comparator) null);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.removeAllElements();
      jSSubstitution0.removeElement(spliterator0);
      jSSubstitution0.clear();
      jSSubstitution0.sort((Comparator) null);
      jSSubstitution0.trimToSize();
      jSSubstitution0.stream();
      jSSubstitution0.iterator();
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("0c^?E.1=!}qo)a");
      char[] charArray0 = new char[8];
      charArray0[1] = '\\';
      charArray0[2] = '`';
      charArray0[7] = '\\';
      charArray0[5] = ':';
      charArray0[6] = '`';
      charArray0[7] = 'I';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      streamTokenizer0.whitespaceChars((-2), (-2));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashSlashComments(true);
      StringReader stringReader1 = new StringReader("0c^?E.1=!}qo)a");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      assertEquals(41, streamTokenizer1.ttype);
      assertEquals("[., [0.0], [., [c?E.1=!qo], [nil]]]", jSTerm1.toString());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1269287948006759
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("list");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      stringReader0.reset();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.1904890967623043
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      jSTerm0.cloneT();
      jSTerm0.makeFunction();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.compose((Function<? super String, ?>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply(function1);
      Function.identity();
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, String> function4 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Object, ?>) function1);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      Function.identity();
      Function.identity();
      function2.compose((Function<? super JSSubstitution, ?>) function5);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Integer, ? extends String>) function5);
      function2.compose((Function<? super String, ?>) unaryOperator3);
      Function<Object, Integer> function6 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      function6.andThen((Function<? super Integer, ? extends String>) function5);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function6);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1569876443452742
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2xP'tx");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5887430728572083
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElement(jSSubstitution0);
      jSSubstitution1.iterator();
      jSSubstitution0.add((Object) spliterator0);
      jSTerm0.sort((Comparator) null);
      StringReader stringReader0 = new StringReader("alml");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSSubstitution0.removeElement(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.removeElement("alml");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.iterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSTerm0.matches(jSTerm1, jSSubstitution3);
      assertTrue(jSSubstitution6.fail());
      
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = jSTerm1.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSSubstitution8.fail());
      assertTrue(jSSubstitution8.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.4287691203187398
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElement(jSSubstitution0);
      jSSubstitution1.iterator();
      jSSubstitution0.add((Object) spliterator0);
      jSTerm0.sort((Comparator) null);
      StringReader stringReader0 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSSubstitution0.removeElement(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.removeElement("call");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.iterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = jSTerm0.matches(jSTerm1, jSSubstitution3);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = jSTerm1.matches(jSTerm0, jSSubstitution6);
      assertTrue(jSSubstitution8.fail());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.5982695885852573
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9]HQ yxn^Y89iFn%$");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(91);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertEquals((-2), streamTokenizer0.ttype);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeElement(jSSubstitution0);
      jSSubstitution1.iterator();
      jSTerm0.addElement(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.removeElement(jSSubstitution1);
      jSSubstitution0.iterator();
      jSTerm0.addElement(spliterator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.clone();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<");
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'k';
      charArray0[2] = 'K';
      stringReader0.read(charArray0);
      stringReader0.read();
      stringReader0.skip((-931L));
      StringReader stringReader1 = new StringReader("RT:ZLFwlz8V_");
      stringReader1.markSupported();
      stringReader1.skip((-1021L));
      stringReader0.ready();
      stringReader0.reset();
      char[] charArray1 = new char[2];
      stringReader1.reset();
      charArray1[0] = 'P';
      charArray1[1] = 'P';
      stringReader0.read(charArray1);
      stringReader0.read(charArray0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.plus = 1403;
      JSJshopVars.verticalL = 1403;
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.removeAllElements();
      jSTerm0.isConstant();
      jSSubstitution0.clear();
      jSSubstitution0.sort((Comparator) null);
      jSSubstitution0.trimToSize();
      jSSubstitution0.stream();
      jSSubstitution0.iterator();
      StringReader stringReader0 = new StringReader("-Pc}Cz");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.slashSlashComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-2163L));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.7721393884375285
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSParserError");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[5];
      charArray0[1] = 'Q';
      charArray0[2] = 'l';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      stringReader0.read(charArray0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      jSTerm1.toStr();
      jSTerm0.isFunction();
      jSTerm1.isConstant();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.subList((-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<");
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'k';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.clear();
      charBuffer0.flip();
      stringReader0.read(charBuffer0);
      stringReader0.read(charArray0);
      stringReader0.read();
      stringReader0.skip((-931L));
      StringReader stringReader1 = new StringReader("RT:ZLFwlz8V_");
      stringReader1.skip(0L);
      stringReader0.ready();
      stringReader0.skip(2);
      stringReader0.reset();
      stringReader1.skip(0L);
      char[] charArray1 = new char[2];
      stringReader1.reset();
      charArray1[0] = 'C';
      charArray1[1] = 'C';
      stringReader0.read(charArray1);
      stringReader0.read(charArray0);
      stringReader0.read(charArray0);
      stringReader0.reset();
      stringReader1.reset();
      stringReader1.reset();
      stringReader1.skip((-931L));
      stringReader1.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<");
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'k';
      charArray0[2] = 'K';
      stringReader0.read(charArray0);
      stringReader0.skip((-931L));
      StringReader stringReader1 = new StringReader("RT:ZLFwlz8V_");
      stringReader1.markSupported();
      stringReader0.mark(2);
      stringReader1.skip((-1021L));
      stringReader0.ready();
      stringReader0.reset();
      char[] charArray1 = new char[2];
      charArray1[0] = 'P';
      charArray1[1] = 'P';
      stringReader0.read(charArray1);
      stringReader0.read(charArray0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6216679171123505
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.matches(jSTerm0);
      StringReader stringReader0 = new StringReader("jfh");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.skip((-1));
      int int0 = 2088;
      streamTokenizer0.ordinaryChar(2088);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.lastElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.flagLevel = 2;
      jSTerm0.clone();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<");
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'k';
      charArray0[2] = 'K';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.clear();
      charBuffer0.flip();
      stringReader0.read(charBuffer0);
      stringReader0.read(charArray0);
      stringReader0.read();
      stringReader0.skip((-931L));
      StringReader stringReader1 = new StringReader("RT:ZLFwlz8V_");
      stringReader1.skip(0L);
      stringReader0.ready();
      stringReader0.skip(2);
      stringReader0.reset();
      char[] charArray1 = new char[2];
      stringReader1.reset();
      charArray1[0] = 'C';
      charArray1[1] = 'C';
      stringReader0.read(charArray1);
      stringReader0.read(charArray0);
      stringReader0.reset();
      stringReader1.reset();
      stringReader1.reset();
      stringReader1.skip((-931L));
      stringReader1.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
