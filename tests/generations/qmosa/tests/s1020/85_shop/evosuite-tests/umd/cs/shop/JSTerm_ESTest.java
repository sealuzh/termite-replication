/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 22:33:36 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.236667736317083
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(>[u(tz(*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer1.nextToken();
      StringReader stringReader1 = new StringReader("(>[u(tz(*");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      streamTokenizer2.ttype = (-885);
      char[] charArray0 = new char[8];
      streamTokenizer0.whitespaceChars((-885), 1826);
      streamTokenizer0.pushBack();
      streamTokenizer1.ordinaryChars((-885), (-1));
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      streamTokenizer1.resetSyntax();
      streamTokenizer1.quoteChar(40);
      streamTokenizer2.ordinaryChars(1826, 1826);
      streamTokenizer1.ttype = (int) 'F';
      streamTokenizer0.ordinaryChars(70, (-885));
      streamTokenizer2.parseNumbers();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.sval = null;
      streamTokenizer0.ttype = (int) 'F';
      streamTokenizer1.ttype = (int) 'F';
      streamTokenizer1.ttype = (int) 'F';
      stringReader0.skip(70);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      stringReader0.skip(70);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.218597132981346
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(>u(2(*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer1.nextToken();
      StringReader stringReader1 = new StringReader("(>u(2(*");
      streamTokenizer1.quoteChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      streamTokenizer2.ttype = (-885);
      char[] charArray0 = new char[8];
      streamTokenizer0.whitespaceChars((-885), 1826);
      streamTokenizer0.pushBack();
      streamTokenizer1.ordinaryChars((-885), (-1));
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      streamTokenizer1.resetSyntax();
      streamTokenizer1.quoteChar(40);
      streamTokenizer2.ordinaryChars(1826, 1826);
      streamTokenizer1.ttype = (int) 'F';
      streamTokenizer2.parseNumbers();
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.sval = null;
      streamTokenizer0.ttype = (int) 'F';
      charArray0[5] = 'F';
      streamTokenizer1.ttype = (int) 'F';
      stringReader0.skip(70);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      stringReader0.skip(70);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6735014553660639
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("( !9(u(2z(*");
      StringReader stringReader0 = new StringReader("( !9(u(2z(*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChars(2795, 4186);
      streamTokenizer0.commentChar(4186);
      streamTokenizer0.whitespaceChars((-4000), 2795);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = '0';
      charArray0[2] = 'H';
      charArray0[3] = '>';
      charArray0[4] = 'l';
      streamTokenizer1.nval = (double) 'U';
      charArray0[6] = 'd';
      charArray0[7] = '&';
      charArray0[8] = '5';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashSlashComments(false);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8904522490156475
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.remove(object0);
      jSTerm0.makeEval(true);
      Object object1 = new Object();
      jSTerm0.addElement(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm1.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.isGround();
      jSTerm3.matches(jSTerm2, jSSubstitution1);
      Predicate<Object> predicate0 = Predicate.isEqual(object1);
      Predicate<Object> predicate1 = null;
      // Undeclared exception!
      try { 
        predicate0.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9749379637738076
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      StringReader stringReader0 = new StringReader("8.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isEval());
      
      jSTerm1.makeEval(true);
      Object object0 = new Object();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.isGround();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm3.matches(jSTerm0);
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.matches(jSTerm4, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSSubstitution2);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate0);
      predicate1.negate();
      Predicate<Object> predicate5 = predicate4.and(predicate0);
      Predicate<Object> predicate6 = predicate2.or(predicate1);
      predicate3.and(predicate2);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate7.negate();
      Predicate<Object> predicate8 = predicate3.and(predicate4);
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate8.negate();
      predicate10.or(predicate9);
      jSTerm1.call();
      assertTrue(jSTerm1.isEval());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.670992147650794
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnaryOperator.identity();
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.makeEval(true);
      Integer integer0 = new Integer(61);
      jSTerm0.addElement(integer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.leftBrac = 61;
      jSTerm1.equals(jSTerm0);
      System.setCurrentTimeMillis(61);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4779958478431
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm1;
      objectArray0[4] = (Object) jSTerm0;
      jSTerm0.makeVariable();
      JSJshopVars.semicolon = 2310;
      objectArray0[5] = (Object) jSTerm0;
      Object object0 = jSTerm0.clone();
      jSTerm0.clone();
      objectArray0[6] = object0;
      jSTerm0.toArray(objectArray0);
      JSJshopVars.apostrophe = 967;
      jSTerm0.equals(jSTerm1);
      jSTerm0.parallelStream();
      jSTerm0.isGround();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.plus = 173;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.greaterT = (-885);
      jSSubstitution0.add((Object) jSTerm0);
      JSJshopVars.plus = (-885);
      JSJshopVars.minus = (-885);
      JSJshopVars.leftPar = (-885);
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( k9u(2zM/*");
      stringReader0.read();
      stringReader0.skip(1458L);
      StringReader stringReader1 = new StringReader("member");
      StringReader stringReader2 = new StringReader("");
      char[] charArray0 = new char[14];
      stringReader2.mark(2196);
      charArray0[0] = 'w';
      stringReader2.read(charArray0);
      stringReader2.markSupported();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "( k9u(2zM/*");
      stringReader2.read(charBuffer0);
      stringReader2.markSupported();
      stringReader0.mark(41);
      StringReader stringReader3 = new StringReader("member");
      stringReader3.read();
      stringReader3.mark(62);
      stringReader2.read(charBuffer0);
      stringReader2.read(charArray0);
      stringReader3.skip(10L);
      stringReader3.read(charArray0);
      stringReader3.skip((-1));
      stringReader3.reset();
      StringReader stringReader4 = new StringReader("( k9u(2zM/*");
      stringReader3.close();
      stringReader4.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader4);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.484861636173335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.makeVariable();
      JSJshopVars.leftBrac = 63;
      Function.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.add((Object) jSTerm0);
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function4 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      function4.apply(jSTerm2);
      function2.compose((Function<? super Object, ?>) function4);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function5 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator.identity();
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super JSSubstitution, ? extends Integer>) function1);
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function5);
      UnaryOperator.identity();
      Function<Object, Integer> function8 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      function7.andThen((Function<? super Integer, ? extends Integer>) function8);
      function5.compose((Function<? super String, ?>) function1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.833377718721871
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      UnaryOperator.identity();
      jSTerm0.removeAllElements();
      Integer integer0 = new Integer(39);
      jSTerm0.addElement(integer0);
      jSTerm0.print();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.addElement((Object) null);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.741377266543732
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("( !9(u(2z(*");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.iterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution5.sort(comparator0);
      jSTerm0.equals(jSTerm1);
      jSTerm2.addElement(jSSubstitution4);
      jSTerm1.print();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm2.addElement(jSSubstitution6);
      jSTerm2.matches(jSTerm3, jSSubstitution6);
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5678765364869536
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("( !9u(2z(*");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.clear();
      jSSubstitution0.addElements(jSSubstitution0);
      jSSubstitution2.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution2);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator1);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution1);
      jSSubstitution7.standarizerSubs();
      jSTerm2.ensureCapacity(125);
      StringReader stringReader0 = new StringReader("F1VrR{V}.erc_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm4.clear();
      jSTerm3.cloneT();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm4.matches(jSTerm2, jSSubstitution7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.654457032273085
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) unaryOperator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      Predicate<Object> predicate5 = predicate2.or(predicate4);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate5);
      Predicate<Object> predicate8 = predicate1.or(predicate4);
      Predicate<Object> predicate9 = predicate4.and(predicate0);
      Predicate<Object> predicate10 = predicate9.or(predicate2);
      Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate11 = predicate6.and(predicate1);
      predicate4.negate();
      Predicate<Object> predicate12 = predicate3.or(predicate1);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate11);
      Predicate<Object> predicate14 = predicate13.negate();
      predicate14.and(predicate2);
      Predicate<Object> predicate15 = predicate12.negate();
      Predicate<Object> predicate16 = predicate15.and(predicate8);
      predicate16.test(predicate10);
      predicate11.negate();
      predicate8.negate();
      Predicate<Object> predicate17 = predicate6.negate();
      predicate17.negate();
      predicate12.or(predicate7);
      StringReader stringReader0 = new StringReader("?$xyQE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm3.print();
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isVariable());
      assertEquals("[?%%%0]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isConstant());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7689599992386538
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer(5485);
      System.setCurrentTimeMillis(5485);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) unaryOperator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      Predicate<Object> predicate5 = predicate2.or(predicate4);
      Function<String, Integer> function0 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ?>) function0);
      predicate5.and(predicate0);
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      predicate5.and(predicate6);
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate4.or(predicate2);
      predicate1.or(predicate7);
      predicate4.and(predicate8);
      predicate0.negate();
      predicate4.test(predicate3);
      predicate7.negate();
      predicate4.negate();
      predicate6.negate();
      predicate7.negate();
      predicate4.or(predicate2);
      StringReader stringReader0 = new StringReader("?$xyQE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm3);
      assertTrue(jSTerm3.isVariable());
      assertEquals("[?%%%0]", jSTerm3.toString());
      assertFalse(jSTerm3.isEval());
      
      boolean boolean1 = jSTerm2.isGround();
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm0.isFunction());
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6074588158830347
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.makeVariable();
      JSJshopVars.leftBrac = 63;
      Function.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function4 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      function4.apply(jSTerm2);
      function2.compose((Function<? super Object, ?>) function4);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm0.isVariable());
      
      jSTerm3.equals(jSTerm2);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function5 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator.identity();
      Function<Object, String> function6 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super JSSubstitution, ? extends Integer>) function1);
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function5);
      UnaryOperator.identity();
      Function<Object, Integer> function8 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      function7.andThen((Function<? super Integer, ? extends Integer>) function8);
      function5.compose((Function<? super String, ?>) function1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm2.cloneT();
      jSTerm0.standardizerTerm();
      assertNotSame(jSTerm0, jSTerm1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(5485);
      jSTerm0.addElement(unaryOperator0);
      Object object0 = jSTerm0.clone();
      jSTerm0.addElement(object0);
      jSTerm0.print();
      System.setCurrentTimeMillis((-2459));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-666L));
      StringReader stringReader0 = new StringReader(".");
      System.setCurrentTimeMillis((-666L));
      System.setCurrentTimeMillis(3631L);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3774086470109967
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.makeVariable();
      JSJshopVars.leftBrac = 43;
      Function.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution1);
      Comparator<JSSubstitution> comparator1 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "";
      jSTerm0.addElement("");
      jSTerm0.print();
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2L);
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 2221;
      jSTerm0.setSize(2221);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.213468927853141
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(>(u(2z(*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer1.nextToken();
      StringReader stringReader1 = new StringReader("(>(u(2z(*");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      streamTokenizer2.ttype = (-885);
      streamTokenizer0.whitespaceChars((-885), 1826);
      streamTokenizer0.pushBack();
      streamTokenizer1.ordinaryChars((-885), (-1));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.quoteChar(32);
      streamTokenizer2.ordinaryChars((-507), 33);
      streamTokenizer1.ordinaryChars(32, 91);
      streamTokenizer2.parseNumbers();
      streamTokenizer2.lowerCaseMode(true);
      stringReader1.skip((-885));
      stringReader0.skip((-885));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.backquote = (-2530);
      int int0 = 2;
      JSJshopVars.VarCounter = 2;
      JSJshopVars.minus = 91;
      JSJshopVars.plus = 173;
      JSJshopVars.greaterT = 2;
      JSJshopVars.astherisk = 2;
      JSJshopVars.dot = 2;
      JSJshopVars.plus = 173;
      JSJshopVars.leftBrac = (-2530);
      JSJshopVars.exclamation = 2;
      JSJshopVars.minus = 173;
      JSJshopVars.equalT = 173;
      JSJshopVars.VarCounter = 40;
      jSTerm0.addElement(".");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.61823041511303
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer(5485);
      System.setCurrentTimeMillis(5485);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) unaryOperator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      Predicate<Object> predicate5 = predicate2.or(predicate4);
      predicate5.and(predicate0);
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      predicate5.and(predicate6);
      Predicate<Object> predicate7 = predicate3.and(predicate4);
      Predicate<Object> predicate8 = predicate4.or(predicate2);
      predicate1.or(predicate7);
      predicate4.and(predicate8);
      predicate0.negate();
      predicate4.test(predicate3);
      predicate7.negate();
      predicate4.negate();
      predicate6.negate();
      predicate7.negate();
      predicate4.or(predicate2);
      StringReader stringReader0 = new StringReader("?$xyQE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.rightBrac = 5485;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.call();
      assertEquals("[?%%%0]", jSTerm2.toString());
      
      jSTerm0.call();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("?%%%0 ", stringBuffer0.toString());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8434835930481515
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.makeVariable();
      JSJshopVars.leftBrac = 63;
      Function.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator.identity();
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function4 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      function4.apply(jSTerm2);
      function2.compose((Function<? super Object, ?>) function4);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm1.standardizerTerm();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jSTerm3.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1166801112506692
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(>(u(2z(*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer1.nextToken();
      StringReader stringReader1 = new StringReader("(>(u(2z(*");
      streamTokenizer1.quoteChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      stringReader0.reset();
      streamTokenizer2.ttype = (-885);
      char[] charArray0 = new char[8];
      streamTokenizer0.whitespaceChars((-885), 1826);
      streamTokenizer0.pushBack();
      streamTokenizer1.ordinaryChars((-885), (-1));
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      streamTokenizer1.resetSyntax();
      streamTokenizer1.quoteChar(40);
      streamTokenizer2.ordinaryChars(1826, 1826);
      streamTokenizer1.ttype = (int) 'F';
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.sval = null;
      streamTokenizer0.ttype = (int) 'F';
      charArray0[5] = 'F';
      streamTokenizer1.ttype = (int) 'F';
      stringReader0.skip(70);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      stringReader0.skip(70);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( !9u(2z(*");
      stringReader0.ready();
      stringReader0.skip(1458L);
      StringReader stringReader1 = new StringReader("c_v(gZv-{x@*11qjv-(");
      char[] charArray0 = new char[1];
      stringReader0.markSupported();
      charArray0[0] = 'w';
      stringReader1.read(charArray0);
      stringReader1.close();
      stringReader0.markSupported();
      char[] charArray1 = new char[7];
      charArray1[0] = 'w';
      charArray1[2] = 'k';
      stringReader1.markSupported();
      stringReader0.mark(8);
      charArray1[3] = 'w';
      StringReader stringReader2 = new StringReader("c_v(gZv-{x@*11qjv-(");
      stringReader2.skip(1458L);
      stringReader2.mark(64);
      stringReader2.read();
      stringReader1.close();
      stringReader1.markSupported();
      stringReader0.skip(62);
      stringReader2.mark(62);
      stringReader2.skip(10L);
      stringReader2.skip(1);
      stringReader2.reset();
      StringReader stringReader3 = new StringReader("( !9u(2z(*");
      stringReader2.close();
      StringReader stringReader4 = new StringReader("( !9u(2z(*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader4);
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.813747837688208
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UnaryOperator.identity();
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.remove(object0);
      jSTerm0.makeEval(true);
      Object object1 = new Object();
      jSTerm0.addElement(object0);
      jSTerm0.cloneT();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual(object1);
      Predicate<Object> predicate1 = null;
      // Undeclared exception!
      try { 
        predicate0.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4066026722723
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) unaryOperator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      predicate2.and(predicate3);
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      predicate3.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate4);
      Predicate<Object> predicate6 = predicate5.and(predicate0);
      UnaryOperator.identity();
      Predicate<Object> predicate7 = predicate1.or(predicate5);
      predicate1.or(predicate7);
      Predicate<Object> predicate8 = predicate3.and(predicate4);
      Predicate<Object> predicate9 = predicate4.or(predicate2);
      predicate9.negate();
      Predicate<Object> predicate10 = predicate4.negate();
      predicate1.and(predicate10);
      predicate9.test("|N[2=rV`OWMLg");
      Predicate<Object> predicate11 = predicate1.or(predicate8);
      predicate4.and(predicate9);
      predicate0.negate();
      predicate7.or(predicate11);
      predicate8.and(predicate4);
      predicate7.negate();
      predicate6.negate();
      predicate4.or(predicate2);
      StringReader stringReader0 = new StringReader("?$xyQE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.backquote = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertEquals("[?%%%0]", jSTerm3.toString());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm3.isVariable());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.808729803252751
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.isGround();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.isGround();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.standarizerSubs();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Integer integer0 = new Integer(1);
      function2.compose((Function<? super Integer, ?>) function3);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      Function<Object, Integer> function4 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function6 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator.identity();
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function8 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function6);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function9 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function8);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function9);
      function4.andThen((Function<? super Integer, ?>) function2);
      Function.identity();
      function8.andThen((Function<? super Integer, ?>) function9);
      function9.andThen((Function<? super Integer, ? extends Integer>) function5);
      UnaryOperator.identity();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.standardizerTerm();
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      System.setCurrentTimeMillis(1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.242477424022544
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.addAll((Collection) jSTerm0);
      UnaryOperator.identity();
      Object object0 = new Object();
      jSTerm1.addElement(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5900512858156524
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8tdGp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9184956192698168
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8tdGp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSJshopVars.equalT = (-1);
      int int0 = 36;
      JSJshopVars.colon = 36;
      jSTerm0.matches(jSTerm2);
      JSJshopVars.VarCounter = (-1);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7514731426126677
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.isGround();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.isGround();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.standarizerSubs();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Integer integer0 = new Integer(1);
      unaryOperator2.apply(integer0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Integer integer1 = new Integer(95);
      unaryOperator2.apply(integer1);
      Function<Object, Integer> function3 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function6 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function5);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      function4.compose((Function<? super Object, ?>) function2);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function6);
      unaryOperator0.compose((Function<? super JSSubstitution, ? extends Integer>) function3);
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function3);
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function7 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      function7.andThen((Function<? super Integer, ? extends Integer>) unaryOperator1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertEquals(1, jSTerm0.size());
      
      jSTerm1.toStr();
      assertFalse(jSTerm0.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.407772263205991
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnaryOperator.identity();
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.remove(object0);
      jSTerm0.makeEval(true);
      Object object1 = new Object();
      jSTerm0.addElement(object0);
      jSTerm0.cloneT();
      jSTerm0.print();
      JSJshopVars.backquote = 1658;
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.415565193303986
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      Function.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function4 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function5 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function4);
      Function<Object, JSSubstitution> function6 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super Integer, ? extends JSSubstitution>) function6);
      unaryOperator1.compose((Function<? super Integer, ? extends Integer>) function1);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      function2.andThen((Function<? super Integer, ? extends Integer>) function5);
      function1.apply(function5);
      Function<Object, Integer> function7 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function5);
      Function.identity();
      Function.identity();
      Function<Object, Integer> function8 = function1.compose((Function<? super Object, ?>) function7);
      Function<Object, Integer> function9 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function9);
      function2.andThen((Function<? super Integer, ?>) function4);
      function3.andThen((Function<? super Integer, ? extends Integer>) function5);
      function2.compose((Function<? super String, ?>) function7);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) function8);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 2;
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.361061809768637
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.makeConstant();
      jSTerm0.call();
      jSTerm1.parallelStream();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(5485);
      jSTerm0.setSize(59);
      jSTerm0.addElement(integer0);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Integer, ? extends Integer>) unaryOperator1);
      Integer integer1 = new Integer(32);
      unaryOperator2.apply(integer1);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Integer, ?>) unaryOperator0);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("Nw=mV@QyW-3MM^");
      jSTerm0.addElement("Nw=mV@QyW-3MM^");
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Integer, ? extends Integer>) unaryOperator1);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(33);
      unaryOperator0.apply(integer1);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Integer, ?>) unaryOperator3);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5071862086407743
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "( !9(u(2z(*";
      jSTerm0.addElement("( !9(u(2z(*");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.iterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm2.cloneT();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.equals(jSTerm1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution3.sort(comparator1);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5069932701881403
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("( !9(u(2z(*");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.iterator();
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm1.removeAll(jSPredicateForm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution5.sort(comparator0);
      jSTerm0.equals(jSTerm1);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator1);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution8.sort(comparator2);
      JSTerm jSTerm3 = new JSTerm();
      JSJshopVars.semicolon = 43;
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.646461395633498
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.isGround();
      JSJshopVars.semicolon = (-955);
      jSTerm0.isGround();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.isGround();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("undeied");
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      Comparator<JSTerm> comparator1 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator1);
      jSTerm2.applySubstitutionT(jSSubstitution1);
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm3.standardizerTerm();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      assertTrue(jSSubstitution8.equals((Object)jSSubstitution1));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.498884008557752
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(5501);
      jSTerm0.addElement(unaryOperator0);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function2);
      Integer integer1 = new Integer(5501);
      function3.compose((Function<? super Integer, ?>) unaryOperator2);
      Integer integer2 = new Integer(5501);
      Integer integer3 = new Integer(0);
      Function<Object, Integer> function4 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function5 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function6 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function7);
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function8);
      function4.andThen((Function<? super Integer, ? extends String>) function8);
      Function<Object, Integer> function9 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function10 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function9);
      Function<Object, Integer> function11 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function10);
      Function<Object, Integer> function12 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function10);
      function10.andThen((Function<? super Integer, ?>) unaryOperator1);
      Function<String, String> function13 = Function.identity();
      function6.andThen((Function<? super Integer, ?>) function11);
      function5.andThen((Function<? super Integer, ? extends Integer>) function1);
      Function<Object, Integer> function14 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Integer, Integer> function15 = Function.identity();
      function14.andThen((Function<? super Integer, ? extends Integer>) function15);
      function12.compose((Function<? super String, ?>) function13);
      UnaryOperator.identity();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$44/685808004 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(37);
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5390789063327173
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("( !9(u(2z(*");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm2.isFunction();
      assertTrue(boolean0);
      
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function4 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function5 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function6 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function5);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function7 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function8 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function4);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function8);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function7);
      Function<String, Integer> function9 = function7.compose((Function<? super String, ?>) function1);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function10 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function11 = unaryOperator4.andThen((Function<? super Object, ? extends String>) function10);
      function7.andThen((Function<? super Integer, ? extends String>) function11);
      UnaryOperator.identity();
      Function<Object, Integer> function12 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function13 = unaryOperator3.compose((Function<? super Object, ? extends Integer>) function1);
      function12.andThen((Function<? super Integer, ? extends Integer>) function13);
      function6.andThen((Function<? super Integer, ? extends Integer>) function2);
      UnaryOperator.identity();
      function8.compose((Function<? super String, ?>) function9);
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm3, jSTerm1);
      
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isFunction());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5506462116893918
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("( !9(u(2z(*");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function4 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      function3.compose((Function<? super Integer, ?>) function1);
      Function<Object, Integer> function5 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function6 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function8 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function9 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function8);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function7);
      Function<String, Integer> function10 = function7.compose((Function<? super String, ?>) function1);
      function10.apply((String) null);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function11 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function12 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function11);
      function10.compose((Function<? super JSTerm, ? extends String>) function12);
      Function<Object, String> function13 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function14 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function13);
      Function.identity();
      function7.andThen((Function<? super Integer, ? extends String>) function14);
      Function<Object, Integer> function15 = function3.compose((Function<? super Object, ?>) function4);
      Function<Object, Integer> function16 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function17 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      function17.andThen((Function<? super Integer, ?>) function15);
      function16.andThen((Function<? super Integer, ? extends Integer>) function17);
      function6.andThen((Function<? super Integer, ? extends Integer>) function2);
      function9.compose((Function<? super String, ?>) function10);
      UnaryOperator.identity();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.431848439223888
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3088411561741995
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UnaryOperator.identity();
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      Object object1 = new Object();
      jSTerm0.addElement(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      Predicate<Object> predicate0 = Predicate.isEqual(object1);
      Predicate<Object> predicate1 = null;
      // Undeclared exception!
      try { 
        predicate0.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5255171634825317
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm1);
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm1.cloneT();
      jSSubstitution1.add((Object) jSTerm0);
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm1.applySubstitutionT(jSSubstitution1);
      Comparator<JSSubstitution> comparator1 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.307102025739417
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.clear();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.5176950194418573
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("( !9u(2z(*");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.clear();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution4);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertTrue(jSTerm2.isFunction());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution7.sort(comparator0);
      jSTerm1.applySubstitutionT(jSSubstitution3);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution7.sort(comparator1);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution4);
      assertFalse(jSSubstitution4.fail());
      
      jSTerm1.applySubstitutionT(jSSubstitution9);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm1, jSTerm2);
      
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isFunction());
      
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      assertTrue(jSSubstitution12.equals((Object)jSSubstitution4));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.3115997768638548
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("( !9u(2z(*");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.addElement((Object) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "5bXQ/]0");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate0.negate();
      predicate5.negate();
      predicate4.or(predicate1);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.4107854730060447
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("( !9(u(2z(*");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm1);
      UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      jSTerm1.addElement("( !9(u(2z(*");
      System.setCurrentTimeMillis((-2459));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1218L);
      StringReader stringReader0 = new StringReader("Zer3561G}/eg@S|DI");
      System.setCurrentTimeMillis((-2459));
      System.setCurrentTimeMillis((-2459));
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5054513218768513
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wgdy/x");
      StringReader stringReader1 = new StringReader("wgdy/x");
      stringReader1.reset();
      StringReader stringReader2 = new StringReader("?%aDqJ+dNF6j*tAp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      stringReader2.read();
      stringReader2.markSupported();
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.105538884854286
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "wgdo7y/x";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.isGround();
      jSTerm0.addAll((Collection) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(2579);
      jSTerm0.clone();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1985574616803634
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) unaryOperator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      predicate3.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate4);
      Predicate<Object> predicate6 = predicate5.and(predicate0);
      Predicate<Object> predicate7 = predicate1.or(predicate5);
      predicate1.or(predicate7);
      Predicate<Object> predicate8 = predicate3.and(predicate4);
      Predicate<Object> predicate9 = predicate4.or(predicate2);
      predicate9.negate();
      predicate9.test("|N[2=rV`OWMLg");
      Predicate<Object> predicate10 = predicate1.or(predicate8);
      predicate4.and(predicate9);
      predicate0.negate();
      predicate7.or(predicate10);
      predicate4.test(predicate3);
      predicate8.and(predicate4);
      predicate7.negate();
      predicate6.negate();
      predicate4.or(predicate2);
      StringReader stringReader0 = new StringReader("?$xyQE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSTerm0.isEval());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution1.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.backquote = (-5);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      Comparator<JSSubstitution> comparator1 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c_v(gZv-{x@*11qjv-(");
      StringReader stringReader1 = new StringReader("c_v(gZv-{x@*11qjv-(");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.listIterator();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.spliterator();
      jSSubstitution3.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer1.nextToken();
      StringReader stringReader1 = new StringReader("?");
      streamTokenizer1.quoteChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer1.lowerCaseMode(false);
      stringReader0.reset();
      char[] charArray0 = new char[8];
      streamTokenizer0.whitespaceChars(1421, 1797);
      streamTokenizer1.ordinaryChars((-4), (-1));
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      streamTokenizer1.resetSyntax();
      streamTokenizer2.ordinaryChars(1797, 1797);
      charArray0[3] = 'F';
      streamTokenizer1.sval = null;
      streamTokenizer0.ttype = (int) 'F';
      charArray0[5] = 'F';
      streamTokenizer1.ttype = (int) 'F';
      charArray0[7] = 'F';
      stringReader0.skip(70);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      StringReader stringReader2 = new StringReader("1QM-Jjkythdn");
      stringReader2.read();
      stringReader2.skip(70);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(5501);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer1 = new Integer((-1610743683));
      unaryOperator0.apply(integer1);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      Integer integer2 = new Integer(5501);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.apply(integer2);
      Integer integer3 = new Integer(5501);
      unaryOperator1.apply(integer3);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Integer, ?>) unaryOperator1);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( !9u(2z(*");
      StringReader stringReader1 = new StringReader("c_v(gZv-{x@*11qjv-(");
      StringReader stringReader2 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      stringReader2.read(charArray0);
      stringReader2.markSupported();
      char[] charArray1 = new char[7];
      charArray1[0] = 'w';
      charArray1[2] = 'k';
      stringReader2.markSupported();
      streamTokenizer0.sval = "t)l";
      stringReader0.mark(41);
      StringReader stringReader3 = new StringReader("S_h.Y\"w?892*$");
      stringReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      StringReader stringReader4 = new StringReader("6w~mgn `");
      stringReader4.skip((-1L));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader4);
      System.setCurrentTimeMillis((-1));
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer7);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.capacity());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6288922115877589
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.VarCounter = 36;
      JSJshopVars.plus = 173;
      JSJshopVars.greaterT = 36;
      JSJshopVars.astherisk = 36;
      JSJshopVars.dot = 36;
      JSJshopVars.plus = 173;
      JSJshopVars.leftBrac = 1441;
      JSJshopVars.exclamation = 36;
      JSJshopVars.minus = 173;
      JSJshopVars.equalT = 173;
      JSJshopVars.VarCounter = 40;
      StringReader stringReader0 = new StringReader(".");
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = 'H';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = 'U';
      int int0 = new Integer(36);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("( !9(u(2z(*");
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      StringReader stringReader1 = new StringReader("%%%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.backquote = (-2530);
      JSJshopVars.VarCounter = 2;
      JSJshopVars.minus = 2;
      JSJshopVars.plus = 173;
      JSJshopVars.greaterT = 173;
      JSJshopVars.percent = (-2459);
      JSJshopVars.dot = 2;
      JSJshopVars.plus = 173;
      JSJshopVars.leftBrac = (-2530);
      JSJshopVars.exclamation = 2;
      JSJshopVars.minus = 173;
      JSJshopVars.equalT = 173;
      JSJshopVars.VarCounter = 40;
      StringReader stringReader0 = new StringReader(")h+YBH:!Ls");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(2, (-947));
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.commentChar(2);
      streamTokenizer0.whitespaceChars((-2576), 40);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      assertTrue(jSTerm2.isConstant());
      assertEquals("[nil]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      boolean boolean0 = jSTerm0.isVariable();
      assertTrue(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U3Xk8*w#>2TKP");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.VarCounter = 36;
      JSJshopVars.plus = 173;
      JSJshopVars.greaterT = 36;
      JSJshopVars.astherisk = 36;
      JSJshopVars.dot = 36;
      JSJshopVars.plus = 173;
      JSJshopVars.leftBrac = 1441;
      JSJshopVars.exclamation = 36;
      JSJshopVars.minus = 173;
      JSJshopVars.equalT = 173;
      JSJshopVars.VarCounter = 40;
      StringReader stringReader0 = new StringReader(".");
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = 'H';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = 'U';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.2054480732221378
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) unaryOperator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      Predicate.isEqual((Object) null);
      predicate3.negate();
      predicate2.test("q'Sv!K\"= +1x");
      Predicate<Object> predicate5 = predicate2.or(predicate4);
      Predicate<Object> predicate6 = predicate5.and(predicate0);
      Predicate<Object> predicate7 = predicate1.or(predicate5);
      predicate1.or(predicate7);
      Predicate<Object> predicate8 = predicate3.and(predicate4);
      Predicate<Object> predicate9 = predicate4.or(predicate2);
      predicate9.negate();
      predicate9.test("|N[2=rV`OWMLg");
      Predicate<Object> predicate10 = predicate1.or(predicate8);
      predicate4.and(predicate9);
      predicate0.negate();
      predicate7.or(predicate10);
      predicate4.test(predicate3);
      predicate8.and(predicate4);
      predicate7.negate();
      predicate6.negate();
      predicate4.or(predicate2);
      StringReader stringReader0 = new StringReader("?$xyQE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm0.isConstant());
      
      stringReader0.read();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.backquote = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertEquals(1, jSSubstitution1.size());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.5312406882916445
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wgdo7y/x");
      StringReader stringReader1 = new StringReader("-Pc)CP");
      StringReader stringReader2 = new StringReader("^ieJb/2CFRz");
      stringReader2.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.iterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.cloneT();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm1.equals(jSTerm0);
      Comparator<JSSubstitution> comparator1 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution3);
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("d8w6kPAF8hRD5=d]Z(i");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader1 = new StringReader("d8w6kPAF8hRD5=d]Z(i");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator2.compose((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        unaryOperator0.andThen((Function<? super Object, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.528652373892955
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSPredicateForm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution7);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution5.sort(comparator0);
      jSTerm3.applySubstitutionT(jSSubstitution4);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution3.sort(comparator1);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm4.standardizerTerm();
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSPredicateForm");
      jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      assertEquals(0, jSSubstitution12.size());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.9024533308450557
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) unaryOperator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      Predicate<Object> predicate5 = predicate2.or(predicate4);
      Predicate<Object> predicate6 = predicate5.and(predicate0);
      Predicate<Object> predicate7 = predicate1.or(predicate5);
      predicate1.or(predicate7);
      Predicate<Object> predicate8 = predicate3.and(predicate4);
      Predicate<Object> predicate9 = predicate4.or(predicate2);
      predicate9.negate();
      predicate9.test("|N[2=rV`OWMLg");
      Predicate<Object> predicate10 = predicate1.or(predicate8);
      predicate4.and(predicate9);
      predicate0.negate();
      predicate7.or(predicate10);
      predicate4.test(predicate3);
      predicate8.and(predicate4);
      predicate7.negate();
      predicate6.negate();
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate0);
      predicate1.or(predicate11);
      StringReader stringReader0 = new StringReader("?$xyQE");
      StringReader stringReader1 = new StringReader("failed substitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader1.read();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( k9u(2zM/*");
      stringReader0.read();
      stringReader0.skip(1458L);
      StringReader stringReader1 = new StringReader("member");
      StringReader stringReader2 = new StringReader("");
      char[] charArray0 = new char[14];
      stringReader2.mark(2196);
      charArray0[0] = 'w';
      stringReader2.read(charArray0);
      stringReader2.markSupported();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "( k9u(2zM/*");
      stringReader2.read(charBuffer0);
      stringReader2.markSupported();
      stringReader0.mark(41);
      stringReader2.read(charArray0);
      StringReader stringReader3 = new StringReader("member");
      stringReader3.read();
      stringReader3.mark(62);
      stringReader2.read(charBuffer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      System.setCurrentTimeMillis((-134L));
      System.setCurrentTimeMillis(41);
      StringReader stringReader4 = new StringReader("th?Qgyf9b");
      System.setCurrentTimeMillis(62);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( k9u(CzM/*");
      StringReader stringReader1 = new StringReader("member");
      StringReader stringReader2 = new StringReader("");
      char[] charArray0 = new char[14];
      charArray0[0] = 'l';
      stringReader2.read(charArray0);
      stringReader2.markSupported();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "( k9u(CzM/*");
      stringReader2.read(charBuffer0);
      stringReader2.markSupported();
      stringReader0.mark(41);
      StringReader stringReader3 = new StringReader("member");
      stringReader3.read();
      stringReader3.mark(62);
      stringReader2.read(charBuffer0);
      stringReader2.read(charArray0);
      stringReader3.read(charArray0);
      stringReader3.skip((-1));
      stringReader3.reset();
      StringReader stringReader4 = new StringReader("( k9u(CzM/*");
      stringReader3.close();
      stringReader4.skip(62);
      stringReader3.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader4);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) unaryOperator0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      Predicate<Object> predicate5 = predicate2.or(predicate4);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate5);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate4.and(predicate0);
      Predicate<Object> predicate10 = predicate9.or(predicate2);
      Predicate<Object> predicate11 = predicate6.and(predicate1);
      predicate4.negate();
      Predicate<Object> predicate12 = predicate3.or(predicate1);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate11);
      Predicate<Object> predicate14 = predicate13.negate();
      predicate14.and(predicate2);
      Predicate<Object> predicate15 = predicate12.negate();
      Predicate<Object> predicate16 = predicate15.and(predicate8);
      predicate16.test(predicate10);
      Predicate<Object> predicate17 = predicate14.negate();
      Predicate<Object> predicate18 = predicate15.or(predicate16);
      Predicate<Object> predicate19 = predicate6.negate();
      Predicate<Object> predicate20 = predicate19.negate();
      Predicate<Object> predicate21 = predicate19.and(predicate9);
      predicate7.or(predicate3);
      Predicate<Object> predicate22 = predicate18.and(predicate21);
      predicate17.negate();
      Predicate<Object> predicate23 = predicate18.or(predicate1);
      predicate23.negate();
      predicate9.and(predicate22);
      Predicate<Object> predicate24 = predicate20.negate();
      predicate24.negate();
      predicate11.negate();
      predicate6.or(predicate5);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-Pc)ppCP");
      StringReader stringReader1 = new StringReader("5jK=[KSZnEk!g6");
      stringReader1.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = streamTokenizer0.nval;
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.lowerCaseMode(true);
      stringReader0.close();
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(false);
      stringReader1.skip((-4));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.nval = (double) (-4);
      char[] charArray0 = new char[15];
      charArray0[1] = '`';
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0090';
      streamTokenizer0.ordinaryChars((-1923), (-1923));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.commentChar(64);
      streamTokenizer0.whitespaceChars(40, '\u0090');
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nval = (-4.0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer1.nval = (double) (-4);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.2296747293240762
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( k9u(CzM/*");
      stringReader0.skip(1458L);
      StringReader stringReader1 = new StringReader("member");
      StringReader stringReader2 = new StringReader("");
      char[] charArray0 = new char[14];
      stringReader2.mark(2196);
      charArray0[0] = 'l';
      stringReader2.read(charArray0);
      stringReader2.markSupported();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "( k9u(CzM/*");
      stringReader2.read(charBuffer0);
      stringReader2.markSupported();
      stringReader0.mark(41);
      StringReader stringReader3 = new StringReader("member");
      stringReader3.read();
      stringReader3.mark(62);
      stringReader2.read(charBuffer0);
      stringReader2.read(charArray0);
      stringReader3.skip(11L);
      stringReader3.read(charArray0);
      stringReader3.skip((-1));
      stringReader3.reset();
      StringReader stringReader4 = new StringReader("( k9u(CzM/*");
      stringReader3.close();
      stringReader4.skip((-1L));
      stringReader3.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader4);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wgdo7y/x");
      StringReader stringReader1 = new StringReader("-Pc)CP");
      stringReader1.mark(64);
      StringReader stringReader2 = new StringReader("5'K=[KSZnqk!g6");
      stringReader2.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.whitespaceChars(42, 42);
      streamTokenizer0.commentChar((-26));
      streamTokenizer0.slashSlashComments(false);
      stringReader2.skip((-4));
      streamTokenizer0.slashSlashComments(true);
      stringReader1.reset();
      streamTokenizer0.nval = streamTokenizer0.nval;
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.commentChar((-26));
      StringReader stringReader3 = new StringReader("5'K=[KSZnqk!g6");
      jSTerm0.isConstant();
      stringReader1.reset();
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      charArray0[4] = 'F';
      stringReader2.read(charArray0);
      stringReader0.skip((-26));
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader3);
      assertFalse(streamTokenizer2.equals((Object)streamTokenizer1));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.7490906203903507
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSParserError");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = 'Q';
      charArray0[2] = 'l';
      charArray0[3] = 'g';
      charArray0[4] = 'L';
      stringReader0.read(charArray0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("%%% ", stringBuffer0.toString());
      
      jSTerm0.isFunction();
      jSTerm1.isConstant();
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-Pc)ppCP");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = streamTokenizer0.nval;
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.nval = (double) (-4);
      char[] charArray0 = new char[15];
      streamTokenizer0.quoteChar(64);
      charArray0[1] = '`';
      charArray0[1] = '\u0000';
      charArray0[3] = '\u0090';
      streamTokenizer0.ordinaryChars((-1923), (-1923));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.commentChar(64);
      streamTokenizer0.whitespaceChars(40, '\u0090');
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nval = (-4.0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.resetSyntax();
      streamTokenizer1.nval = (double) (-4);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.782019572767355
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-Pc)CP");
      StringReader stringReader1 = new StringReader("5'K=[KSZnqk!g6");
      stringReader1.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-1.0);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.commentChar(64);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.nval = streamTokenizer0.nval;
      char[] charArray0 = new char[15];
      streamTokenizer0.quoteChar(64);
      charArray0[1] = '`';
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0090';
      streamTokenizer0.ordinaryChars((-1923), (-1923));
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.whitespaceChars(50, '\u0090');
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nval = (-1.0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer1.nval = (double) 45;
      jSTerm0.parseList(streamTokenizer2);
      assertEquals(41, streamTokenizer2.ttype);
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      StringReader stringReader0 = new StringReader("( !9(u(2z(*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.0;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      StringReader stringReader1 = new StringReader("( !9(u(2z(*");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.plus = 173;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.greaterT = (-885);
      JSJshopVars.plus = (-885);
      JSJshopVars.minus = (-885);
      JSJshopVars.VarCounter = 40;
      System.setCurrentTimeMillis((-1792L));
      long long0 = (-1900L);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      System.setCurrentTimeMillis(1362L);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("LW{G7|fy#vQ-");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      int int0 = (-3);
      jSTerm1.makeConstant();
      int int1 = 37;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer((-3));
      // Undeclared exception!
      try { 
        jSSubstitution0.set(5095, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 5095
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.782019572767355
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-Pc)CP");
      StringReader stringReader1 = new StringReader("5'K=[KSZnqk!g6");
      stringReader1.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-1.0);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.commentChar(64);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.nval = streamTokenizer0.nval;
      char[] charArray0 = new char[15];
      streamTokenizer0.quoteChar(64);
      charArray0[1] = '`';
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0090';
      streamTokenizer0.ordinaryChars((-1923), (-1923));
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.whitespaceChars(40, '\u0090');
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nval = (-1.0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer1.nval = (double) 45;
      jSTerm0.parseList(streamTokenizer2);
      assertEquals(41, streamTokenizer2.ttype);
      assertEquals("Token[')'], line 1", streamTokenizer2.toString());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( k9u(2zM/*");
      stringReader0.read();
      stringReader0.skip(1458L);
      StringReader stringReader1 = new StringReader("member");
      StringReader stringReader2 = new StringReader("YqUx:6C#");
      char[] charArray0 = new char[14];
      stringReader2.mark(2196);
      charArray0[0] = 'w';
      stringReader2.mark(40);
      stringReader2.read(charArray0);
      stringReader2.markSupported();
      CharBuffer charBuffer0 = CharBuffer.allocate(2196);
      stringReader2.read(charBuffer0);
      stringReader2.markSupported();
      stringReader0.reset();
      stringReader0.mark(41);
      stringReader2.read(charArray0);
      StringReader stringReader3 = new StringReader("member");
      charBuffer0.clear();
      stringReader3.read();
      stringReader3.mark(62);
      stringReader2.read(charBuffer0);
      stringReader2.read(charArray0);
      stringReader3.skip(10L);
      stringReader3.read(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'w';
      charArray1[1] = 'w';
      charArray1[2] = 'w';
      charArray1[3] = 'w';
      charArray1[4] = 'w';
      stringReader3.read(charArray1);
      stringReader3.skip(8);
      stringReader3.close();
      stringReader3.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( k9u(2zM/*");
      stringReader0.skip(1458L);
      StringReader stringReader1 = new StringReader("c_v(gZv-{x@*11qjv-(");
      StringReader stringReader2 = new StringReader("");
      char[] charArray0 = new char[1];
      stringReader2.mark(2196);
      charArray0[0] = 'w';
      stringReader2.read(charArray0);
      stringReader2.markSupported();
      char[] charArray1 = new char[7];
      charArray1[0] = 'w';
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "( k9u(2zM/*");
      stringReader2.read(charBuffer0);
      charArray1[2] = 'k';
      stringReader2.markSupported();
      stringReader0.mark(41);
      charArray1[3] = '\u0088';
      StringReader stringReader3 = new StringReader("c_v(gZv-{x@*11qjv-(");
      stringReader3.read();
      stringReader3.mark(62);
      stringReader3.skip(11L);
      stringReader3.read(charArray1);
      stringReader3.skip((-1));
      stringReader3.reset();
      StringReader stringReader4 = new StringReader("( k9u(2zM/*");
      stringReader3.close();
      stringReader4.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader4);
      System.setCurrentTimeMillis((-1464L));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
